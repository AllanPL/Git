
Z0000003v02_3PSM_APFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00028d40  01010000  01010000  00010000  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  01038d40  01038d40  00038d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000008eb  20000000  01038d48  00040000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000169f4  200008f0  01039638  000408eb  2**3
                  ALLOC
  4 .stack        00003004  200172e4  0105002c  000408eb  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  000408eb  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00040915  2**0
                  CONTENTS, READONLY
  7 .debug_info   000a7bd9  00000000  00000000  0004096e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000c6f1  00000000  00000000  000e8547  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0002eaeb  00000000  00000000  000f4c38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002aa8  00000000  00000000  00123723  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000059e8  00000000  00000000  001261cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0002c6cb  00000000  00000000  0012bbb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000394b4  00000000  00000000  0015827e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0007d230  00000000  00000000  00191732  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000924c  00000000  00000000  0020e964  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

01010000 <exception_table>:
 1010000:	e8 a2 01 20 91 db 02 01 2d dc 02 01 2d dc 02 01     ... ....-...-...
 1010010:	2d dc 02 01 2d dc 02 01 2d dc 02 01 00 00 00 00     -...-...-.......
	...
 101002c:	9d dd 02 01 2d dc 02 01 00 00 00 00 15 de 02 01     ....-...........
 101003c:	51 de 02 01 2d dc 02 01 e5 f6 02 01 09 a6 02 01     Q...-...........
 101004c:	31 5c 02 01 a1 60 01 01 2d dc 02 01 2d dc 02 01     1\...`..-...-...
 101005c:	00 00 00 00 7d 51 02 01 00 00 00 00 00 00 00 00     ....}Q..........
 101006c:	29 57 02 01 99 57 02 01 00 00 00 00 2d dc 02 01     )W...W......-...
 101007c:	2d dc 02 01 2d dc 02 01 2d dc 02 01 00 00 00 00     -...-...-.......
 101008c:	2d dc 02 01 2d dc 02 01 2d dc 02 01 00 00 00 00     -...-...-.......
 101009c:	2d dc 02 01 2d dc 02 01 2d dc 02 01 2d dc 02 01     -...-...-...-...
 10100ac:	2d dc 02 01 2d dc 02 01 2d dc 02 01 2d dc 02 01     -...-...-...-...
 10100bc:	45 b5 02 01 2d dc 02 01 2d dc 02 01 a9 d5 02 01     E...-...-.......
 10100cc:	2d dc 02 01 2d dc 02 01 2d dc 02 01 75 48 02 01     -...-...-...uH..
 10100dc:	2d dc 02 01 2d dc 02 01 2d dc 02 01                 -...-...-...

010100e8 <__do_global_dtors_aux>:
 10100e8:	b510      	push	{r4, lr}
 10100ea:	4c05      	ldr	r4, [pc, #20]	; (1010100 <__do_global_dtors_aux+0x18>)
 10100ec:	7823      	ldrb	r3, [r4, #0]
 10100ee:	b933      	cbnz	r3, 10100fe <__do_global_dtors_aux+0x16>
 10100f0:	4b04      	ldr	r3, [pc, #16]	; (1010104 <__do_global_dtors_aux+0x1c>)
 10100f2:	b113      	cbz	r3, 10100fa <__do_global_dtors_aux+0x12>
 10100f4:	4804      	ldr	r0, [pc, #16]	; (1010108 <__do_global_dtors_aux+0x20>)
 10100f6:	f3af 8000 	nop.w
 10100fa:	2301      	movs	r3, #1
 10100fc:	7023      	strb	r3, [r4, #0]
 10100fe:	bd10      	pop	{r4, pc}
 1010100:	200008f0 	.word	0x200008f0
 1010104:	00000000 	.word	0x00000000
 1010108:	01038d48 	.word	0x01038d48

0101010c <frame_dummy>:
 101010c:	4b0c      	ldr	r3, [pc, #48]	; (1010140 <frame_dummy+0x34>)
 101010e:	b143      	cbz	r3, 1010122 <frame_dummy+0x16>
 1010110:	480c      	ldr	r0, [pc, #48]	; (1010144 <frame_dummy+0x38>)
 1010112:	490d      	ldr	r1, [pc, #52]	; (1010148 <frame_dummy+0x3c>)
 1010114:	b510      	push	{r4, lr}
 1010116:	f3af 8000 	nop.w
 101011a:	480c      	ldr	r0, [pc, #48]	; (101014c <frame_dummy+0x40>)
 101011c:	6803      	ldr	r3, [r0, #0]
 101011e:	b923      	cbnz	r3, 101012a <frame_dummy+0x1e>
 1010120:	bd10      	pop	{r4, pc}
 1010122:	480a      	ldr	r0, [pc, #40]	; (101014c <frame_dummy+0x40>)
 1010124:	6803      	ldr	r3, [r0, #0]
 1010126:	b933      	cbnz	r3, 1010136 <frame_dummy+0x2a>
 1010128:	4770      	bx	lr
 101012a:	4b09      	ldr	r3, [pc, #36]	; (1010150 <frame_dummy+0x44>)
 101012c:	2b00      	cmp	r3, #0
 101012e:	d0f7      	beq.n	1010120 <frame_dummy+0x14>
 1010130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 1010134:	4718      	bx	r3
 1010136:	4b06      	ldr	r3, [pc, #24]	; (1010150 <frame_dummy+0x44>)
 1010138:	2b00      	cmp	r3, #0
 101013a:	d0f5      	beq.n	1010128 <frame_dummy+0x1c>
 101013c:	4718      	bx	r3
 101013e:	bf00      	nop
 1010140:	00000000 	.word	0x00000000
 1010144:	01038d48 	.word	0x01038d48
 1010148:	200008f4 	.word	0x200008f4
 101014c:	01038d48 	.word	0x01038d48
 1010150:	00000000 	.word	0x00000000

01010154 <ipc_clear_interrupt>:
 * \param p_pio       Pointer to a IPC controller.
 * \param dw_mask     Bitmask of one or more pin(s) to configure.
 */
void ipc_clear_interrupt( Ipc * ipc, const uint32_t dw_mask )
{
    ipc->IPC_ICCR = dw_mask;
 1010154:	6041      	str	r1, [r0, #4]
 1010156:	4770      	bx	lr

01010158 <ipc_get_status>:
 */
uint32_t ipc_get_status( Ipc * ipc, const uint32_t dw_mask )
{
    uint32_t dw_reg;

    dw_reg = ipc->IPC_ISR;
 1010158:	6983      	ldr	r3, [r0, #24]

    if ( ( dw_reg & dw_mask ) == 0 )
 101015a:	420b      	tst	r3, r1
    }
    else
    {
        return 1;
    }
}
 101015c:	bf14      	ite	ne
 101015e:	2001      	movne	r0, #1
 1010160:	2000      	moveq	r0, #0
 1010162:	4770      	bx	lr

01010164 <ipc_enable_interrupt>:
 *
 * \retval void
 */
void ipc_enable_interrupt( Ipc * ipc, const uint32_t dw_mask )
{
    ipc->IPC_IECR = dw_mask;
 1010164:	60c1      	str	r1, [r0, #12]
 1010166:	4770      	bx	lr

01010168 <twi_set_speed.part.1>:

	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
 1010168:	0049      	lsls	r1, r1, #1
 101016a:	fbb2 f2f1 	udiv	r2, r2, r1
 101016e:	3a04      	subs	r2, #4

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
 1010170:	2aff      	cmp	r2, #255	; 0xff
 1010172:	f04f 0300 	mov.w	r3, #0
 1010176:	d908      	bls.n	101018a <twi_set_speed.part.1+0x22>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
 1010178:	0852      	lsrs	r2, r2, #1
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
 101017a:	2aff      	cmp	r2, #255	; 0xff
		ckdiv++;
 101017c:	f103 0301 	add.w	r3, r3, #1
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
 1010180:	d90b      	bls.n	101019a <twi_set_speed.part.1+0x32>
 1010182:	2b07      	cmp	r3, #7
 1010184:	d1f8      	bne.n	1010178 <twi_set_speed.part.1+0x10>
 1010186:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
 101018a:	0211      	lsls	r1, r2, #8
 101018c:	b2d2      	uxtb	r2, r2
 101018e:	b289      	uxth	r1, r1
 1010190:	431a      	orrs	r2, r3
 1010192:	430a      	orrs	r2, r1
	p_twi->TWI_CWGR =
 1010194:	6102      	str	r2, [r0, #16]
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
}
 1010196:	2000      	movs	r0, #0
 1010198:	4770      	bx	lr
 101019a:	041b      	lsls	r3, r3, #16
 101019c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 10101a0:	e7f3      	b.n	101018a <twi_set_speed.part.1+0x22>
 10101a2:	bf00      	nop

010101a4 <twi_master_init>:
{
 10101a4:	b570      	push	{r4, r5, r6, lr}
	p_twi->TWI_IDR = ~0UL;
 10101a6:	f04f 33ff 	mov.w	r3, #4294967295
 10101aa:	6283      	str	r3, [r0, #40]	; 0x28
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
 10101ac:	2380      	movs	r3, #128	; 0x80
	p_twi->TWI_SR;
 10101ae:	6a02      	ldr	r2, [r0, #32]
	p_twi->TWI_CR = TWI_CR_SWRST;
 10101b0:	6003      	str	r3, [r0, #0]
{
 10101b2:	460d      	mov	r5, r1
	p_twi->TWI_CR = TWI_CR_MSEN;
 10101b4:	2304      	movs	r3, #4
	p_twi->TWI_CR = TWI_CR_MSDIS;
 10101b6:	2108      	movs	r1, #8
	p_twi->TWI_CR = TWI_CR_SVDIS;
 10101b8:	2220      	movs	r2, #32
	p_twi->TWI_RHR;
 10101ba:	6b06      	ldr	r6, [r0, #48]	; 0x30
	p_twi->TWI_CR = TWI_CR_MSDIS;
 10101bc:	6001      	str	r1, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
 10101be:	6002      	str	r2, [r0, #0]
	p_twi->TWI_CR = TWI_CR_MSEN;
 10101c0:	6003      	str	r3, [r0, #0]
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
 10101c2:	6869      	ldr	r1, [r5, #4]
	if (ul_speed > I2C_FAST_MODE_SPEED) {
 10101c4:	4b09      	ldr	r3, [pc, #36]	; (10101ec <twi_master_init+0x48>)
 10101c6:	4299      	cmp	r1, r3
{
 10101c8:	4604      	mov	r4, r0
	if (ul_speed > I2C_FAST_MODE_SPEED) {
 10101ca:	d906      	bls.n	10101da <twi_master_init+0x36>
		status = TWI_INVALID_ARGUMENT;
 10101cc:	2001      	movs	r0, #1
	if (p_opt->smbus == 1) {
 10101ce:	7a6b      	ldrb	r3, [r5, #9]
 10101d0:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
 10101d2:	bf04      	itt	eq
 10101d4:	2340      	moveq	r3, #64	; 0x40
 10101d6:	6023      	streq	r3, [r4, #0]
}
 10101d8:	bd70      	pop	{r4, r5, r6, pc}
 10101da:	682a      	ldr	r2, [r5, #0]
 10101dc:	4b04      	ldr	r3, [pc, #16]	; (10101f0 <twi_master_init+0x4c>)
 10101de:	4798      	blx	r3
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
 10101e0:	f1a0 0001 	sub.w	r0, r0, #1
 10101e4:	fab0 f080 	clz	r0, r0
 10101e8:	0940      	lsrs	r0, r0, #5
 10101ea:	e7f0      	b.n	10101ce <twi_master_init+0x2a>
 10101ec:	00061a80 	.word	0x00061a80
 10101f0:	01010169 	.word	0x01010169

010101f4 <twi_master_read>:
	uint32_t cnt = p_packet->length;
 10101f4:	68cb      	ldr	r3, [r1, #12]
	if (cnt == 0) {
 10101f6:	2b00      	cmp	r3, #0
 10101f8:	d04c      	beq.n	1010294 <twi_master_read+0xa0>
{
 10101fa:	b4f0      	push	{r4, r5, r6, r7}
	p_twi->TWI_MMR = 0;
 10101fc:	2600      	movs	r6, #0
	uint8_t *buffer = p_packet->buffer;
 10101fe:	688c      	ldr	r4, [r1, #8]
	p_twi->TWI_MMR = 0;
 1010200:	6046      	str	r6, [r0, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
 1010202:	684a      	ldr	r2, [r1, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
 1010204:	7c0d      	ldrb	r5, [r1, #16]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
 1010206:	0212      	lsls	r2, r2, #8
 1010208:	f402 7240 	and.w	r2, r2, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
 101020c:	042d      	lsls	r5, r5, #16
 101020e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 1010212:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
 1010216:	432a      	orrs	r2, r5
 1010218:	6042      	str	r2, [r0, #4]
	p_twi->TWI_IADR = 0;
 101021a:	60c6      	str	r6, [r0, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
 101021c:	684a      	ldr	r2, [r1, #4]
	if (len == 0)
 101021e:	bb1a      	cbnz	r2, 1010268 <twi_master_read+0x74>
		return 0;
 1010220:	4615      	mov	r5, r2
	if (cnt == 1) {
 1010222:	2b01      	cmp	r3, #1
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
 1010224:	60c5      	str	r5, [r0, #12]
	if (cnt == 1) {
 1010226:	d02d      	beq.n	1010284 <twi_master_read+0x90>
		p_twi->TWI_CR = TWI_CR_START;
 1010228:	2201      	movs	r2, #1
 101022a:	6002      	str	r2, [r0, #0]
		stop_sent = 0;
 101022c:	2600      	movs	r6, #0
		status = p_twi->TWI_SR;
 101022e:	6a02      	ldr	r2, [r0, #32]
		if (status & TWI_SR_NACK) {
 1010230:	05d5      	lsls	r5, r2, #23
		timeout = TWI_TIMEOUT;
 1010232:	f643 2198 	movw	r1, #15000	; 0x3a98
			p_twi->TWI_CR = TWI_CR_STOP;
 1010236:	f04f 0702 	mov.w	r7, #2
		if (status & TWI_SR_NACK) {
 101023a:	d411      	bmi.n	1010260 <twi_master_read+0x6c>
		if (!timeout--) {
 101023c:	1e4d      	subs	r5, r1, #1
 101023e:	b361      	cbz	r1, 101029a <twi_master_read+0xa6>
		if (cnt == 1  && !stop_sent) {
 1010240:	2b01      	cmp	r3, #1
 1010242:	d023      	beq.n	101028c <twi_master_read+0x98>
		if (!(status & TWI_SR_RXRDY)) {
 1010244:	0792      	lsls	r2, r2, #30
 1010246:	d507      	bpl.n	1010258 <twi_master_read+0x64>
		*buffer++ = p_twi->TWI_RHR;
 1010248:	6b02      	ldr	r2, [r0, #48]	; 0x30
 101024a:	7022      	strb	r2, [r4, #0]
	while (cnt > 0) {
 101024c:	3b01      	subs	r3, #1
		*buffer++ = p_twi->TWI_RHR;
 101024e:	f104 0401 	add.w	r4, r4, #1
	while (cnt > 0) {
 1010252:	d026      	beq.n	10102a2 <twi_master_read+0xae>
		timeout = TWI_TIMEOUT;
 1010254:	f643 2598 	movw	r5, #15000	; 0x3a98
		status = p_twi->TWI_SR;
 1010258:	6a02      	ldr	r2, [r0, #32]
		timeout = TWI_TIMEOUT;
 101025a:	4629      	mov	r1, r5
		if (status & TWI_SR_NACK) {
 101025c:	05d5      	lsls	r5, r2, #23
 101025e:	d5ed      	bpl.n	101023c <twi_master_read+0x48>
			return TWI_RECEIVE_NACK;
 1010260:	2305      	movs	r3, #5
}
 1010262:	4618      	mov	r0, r3
 1010264:	bcf0      	pop	{r4, r5, r6, r7}
 1010266:	4770      	bx	lr
	if (len > 1) {
 1010268:	2a01      	cmp	r2, #1
	val = addr[0];
 101026a:	780d      	ldrb	r5, [r1, #0]
	if (len > 1) {
 101026c:	ddd9      	ble.n	1010222 <twi_master_read+0x2e>
		val |= addr[1];
 101026e:	784e      	ldrb	r6, [r1, #1]
	if (len > 2) {
 1010270:	2a02      	cmp	r2, #2
		val |= addr[1];
 1010272:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
	if (len > 2) {
 1010276:	d0d4      	beq.n	1010222 <twi_master_read+0x2e>
		val |= addr[2];
 1010278:	788a      	ldrb	r2, [r1, #2]
	if (cnt == 1) {
 101027a:	2b01      	cmp	r3, #1
		val |= addr[2];
 101027c:	ea42 2505 	orr.w	r5, r2, r5, lsl #8
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
 1010280:	60c5      	str	r5, [r0, #12]
	if (cnt == 1) {
 1010282:	d1d1      	bne.n	1010228 <twi_master_read+0x34>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
 1010284:	2203      	movs	r2, #3
 1010286:	6002      	str	r2, [r0, #0]
		stop_sent = 1;
 1010288:	461e      	mov	r6, r3
 101028a:	e7d0      	b.n	101022e <twi_master_read+0x3a>
		if (cnt == 1  && !stop_sent) {
 101028c:	b906      	cbnz	r6, 1010290 <twi_master_read+0x9c>
			p_twi->TWI_CR = TWI_CR_STOP;
 101028e:	6007      	str	r7, [r0, #0]
		if (!(status & TWI_SR_RXRDY)) {
 1010290:	2601      	movs	r6, #1
 1010292:	e7d7      	b.n	1010244 <twi_master_read+0x50>
		return TWI_INVALID_ARGUMENT;
 1010294:	2301      	movs	r3, #1
}
 1010296:	4618      	mov	r0, r3
 1010298:	4770      	bx	lr
			return TWI_ERROR_TIMEOUT;
 101029a:	2309      	movs	r3, #9
}
 101029c:	4618      	mov	r0, r3
 101029e:	bcf0      	pop	{r4, r5, r6, r7}
 10102a0:	4770      	bx	lr
 10102a2:	f643 2298 	movw	r2, #15000	; 0x3a98
 10102a6:	e001      	b.n	10102ac <twi_master_read+0xb8>
		if (!timeout--) {
 10102a8:	1c54      	adds	r4, r2, #1
 10102aa:	d0f6      	beq.n	101029a <twi_master_read+0xa6>
	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
 10102ac:	6a01      	ldr	r1, [r0, #32]
 10102ae:	07c9      	lsls	r1, r1, #31
		if (!timeout--) {
 10102b0:	f102 32ff 	add.w	r2, r2, #4294967295
	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
 10102b4:	d5f8      	bpl.n	10102a8 <twi_master_read+0xb4>
	p_twi->TWI_SR;
 10102b6:	6a02      	ldr	r2, [r0, #32]
}
 10102b8:	bcf0      	pop	{r4, r5, r6, r7}
 10102ba:	4618      	mov	r0, r3
 10102bc:	4770      	bx	lr
 10102be:	bf00      	nop

010102c0 <twi_master_write>:
{
 10102c0:	4603      	mov	r3, r0
	uint32_t cnt = p_packet->length;
 10102c2:	68c8      	ldr	r0, [r1, #12]
	if (cnt == 0) {
 10102c4:	2800      	cmp	r0, #0
 10102c6:	d045      	beq.n	1010354 <twi_master_write+0x94>
{
 10102c8:	b470      	push	{r4, r5, r6}
	p_twi->TWI_MMR = 0;
 10102ca:	2600      	movs	r6, #0
	uint8_t *buffer = p_packet->buffer;
 10102cc:	688c      	ldr	r4, [r1, #8]
	p_twi->TWI_MMR = 0;
 10102ce:	605e      	str	r6, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
 10102d0:	7c0a      	ldrb	r2, [r1, #16]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
 10102d2:	684d      	ldr	r5, [r1, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
 10102d4:	0412      	lsls	r2, r2, #16
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
 10102d6:	022d      	lsls	r5, r5, #8
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
 10102d8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
 10102dc:	f405 7540 	and.w	r5, r5, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
 10102e0:	432a      	orrs	r2, r5
 10102e2:	605a      	str	r2, [r3, #4]
	p_twi->TWI_IADR = 0;
 10102e4:	60de      	str	r6, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
 10102e6:	684a      	ldr	r2, [r1, #4]
	if (len == 0)
 10102e8:	b9ba      	cbnz	r2, 101031a <twi_master_write+0x5a>
		return 0;
 10102ea:	4615      	mov	r5, r2
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
 10102ec:	60dd      	str	r5, [r3, #12]
		status = p_twi->TWI_SR;
 10102ee:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWI_SR_NACK) {
 10102f0:	05d1      	lsls	r1, r2, #23
 10102f2:	d40f      	bmi.n	1010314 <twi_master_write+0x54>
		if (!(status & TWI_SR_TXRDY)) {
 10102f4:	0752      	lsls	r2, r2, #29
 10102f6:	d41c      	bmi.n	1010332 <twi_master_write+0x72>
		status = p_twi->TWI_SR;
 10102f8:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWI_SR_NACK) {
 10102fa:	05d6      	lsls	r6, r2, #23
		if (!(status & TWI_SR_TXRDY)) {
 10102fc:	f643 2197 	movw	r1, #14999	; 0x3a97
		if (status & TWI_SR_NACK) {
 1010300:	d408      	bmi.n	1010314 <twi_master_write+0x54>
		if (!timeout--) {
 1010302:	2900      	cmp	r1, #0
 1010304:	d031      	beq.n	101036a <twi_master_write+0xaa>
		if (!(status & TWI_SR_TXRDY)) {
 1010306:	0755      	lsls	r5, r2, #29
 1010308:	d413      	bmi.n	1010332 <twi_master_write+0x72>
		status = p_twi->TWI_SR;
 101030a:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWI_SR_NACK) {
 101030c:	05d6      	lsls	r6, r2, #23
		if (!timeout--) {
 101030e:	f101 31ff 	add.w	r1, r1, #4294967295
		if (status & TWI_SR_NACK) {
 1010312:	d5f6      	bpl.n	1010302 <twi_master_write+0x42>
			return TWI_RECEIVE_NACK;
 1010314:	2005      	movs	r0, #5
}
 1010316:	bc70      	pop	{r4, r5, r6}
 1010318:	4770      	bx	lr
	if (len > 1) {
 101031a:	2a01      	cmp	r2, #1
	val = addr[0];
 101031c:	780d      	ldrb	r5, [r1, #0]
	if (len > 1) {
 101031e:	dde5      	ble.n	10102ec <twi_master_write+0x2c>
		val |= addr[1];
 1010320:	784e      	ldrb	r6, [r1, #1]
	if (len > 2) {
 1010322:	2a02      	cmp	r2, #2
		val |= addr[1];
 1010324:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
	if (len > 2) {
 1010328:	d0e0      	beq.n	10102ec <twi_master_write+0x2c>
		val |= addr[2];
 101032a:	788a      	ldrb	r2, [r1, #2]
 101032c:	ea42 2505 	orr.w	r5, r2, r5, lsl #8
 1010330:	e7dc      	b.n	10102ec <twi_master_write+0x2c>
		p_twi->TWI_THR = *buffer++;
 1010332:	f814 2b01 	ldrb.w	r2, [r4], #1
 1010336:	635a      	str	r2, [r3, #52]	; 0x34
	while (cnt > 0) {
 1010338:	3801      	subs	r0, #1
 101033a:	d1d8      	bne.n	10102ee <twi_master_write+0x2e>
 101033c:	f643 2298 	movw	r2, #15000	; 0x3a98
 1010340:	e004      	b.n	101034c <twi_master_write+0x8c>
		if (status & TWI_SR_TXRDY) {
 1010342:	074d      	lsls	r5, r1, #29
 1010344:	d408      	bmi.n	1010358 <twi_master_write+0x98>
		if (!timeout--) {
 1010346:	f112 32ff 	adds.w	r2, r2, #4294967295
 101034a:	d30e      	bcc.n	101036a <twi_master_write+0xaa>
		status = p_twi->TWI_SR;
 101034c:	6a19      	ldr	r1, [r3, #32]
		if (status & TWI_SR_NACK) {
 101034e:	05ce      	lsls	r6, r1, #23
 1010350:	d4e0      	bmi.n	1010314 <twi_master_write+0x54>
 1010352:	e7f6      	b.n	1010342 <twi_master_write+0x82>
		return TWI_INVALID_ARGUMENT;
 1010354:	2001      	movs	r0, #1
 1010356:	4770      	bx	lr
	p_twi->TWI_CR = TWI_CR_STOP;
 1010358:	2102      	movs	r1, #2
 101035a:	6019      	str	r1, [r3, #0]
	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
 101035c:	6a19      	ldr	r1, [r3, #32]
 101035e:	07c9      	lsls	r1, r1, #31
		if (!timeout--) {
 1010360:	f102 32ff 	add.w	r2, r2, #4294967295
	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
 1010364:	d4d7      	bmi.n	1010316 <twi_master_write+0x56>
		if (!timeout--) {
 1010366:	1c54      	adds	r4, r2, #1
 1010368:	d1f8      	bne.n	101035c <twi_master_write+0x9c>
			return TWI_ERROR_TIMEOUT;
 101036a:	2009      	movs	r0, #9
}
 101036c:	bc70      	pop	{r4, r5, r6}
 101036e:	4770      	bx	lr

01010370 <C1219_full_read>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
void C1219_full_read(C1219_TYPE *c1219_ptr) {
 1010370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	
	static volatile uint16_t response_index;

	response_index = 0;	
 1010374:	4d26      	ldr	r5, [pc, #152]	; (1010410 <C1219_full_read+0xa0>)
	c1219_ptr->c1218_dll->tx_data[response_index++] = C1218_OK;
 1010376:	6842      	ldr	r2, [r0, #4]
	response_index = 0;	
 1010378:	2100      	movs	r1, #0
 101037a:	8029      	strh	r1, [r5, #0]
	c1219_ptr->c1218_dll->tx_data[response_index++] = C1218_OK;
 101037c:	882b      	ldrh	r3, [r5, #0]
void C1219_full_read(C1219_TYPE *c1219_ptr) {
 101037e:	4604      	mov	r4, r0
	c1219_ptr->c1218_dll->tx_data[response_index++] = C1218_OK;
 1010380:	b29b      	uxth	r3, r3
 1010382:	f8d2 00bc 	ldr.w	r0, [r2, #188]	; 0xbc
 1010386:	1c5a      	adds	r2, r3, #1
 1010388:	54c1      	strb	r1, [r0, r3]
 101038a:	b292      	uxth	r2, r2
 101038c:	802a      	strh	r2, [r5, #0]
	c1219_ptr->c1218_dll->tx_data[response_index++] = (uint8_t)((c1219_ptr->table_size & 0xFF00) >> 8);
 101038e:	882b      	ldrh	r3, [r5, #0]
 1010390:	6862      	ldr	r2, [r4, #4]
 1010392:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 1010394:	f8d2 00bc 	ldr.w	r0, [r2, #188]	; 0xbc
 1010398:	b29b      	uxth	r3, r3
 101039a:	1c5a      	adds	r2, r3, #1
 101039c:	0a09      	lsrs	r1, r1, #8
 101039e:	54c1      	strb	r1, [r0, r3]
 10103a0:	b292      	uxth	r2, r2
 10103a2:	802a      	strh	r2, [r5, #0]
	c1219_ptr->c1218_dll->tx_data[response_index++] = (uint8_t)((c1219_ptr->table_size & 0x00FF) >> 0);
 10103a4:	882b      	ldrh	r3, [r5, #0]
 10103a6:	6862      	ldr	r2, [r4, #4]
 10103a8:	8f20      	ldrh	r0, [r4, #56]	; 0x38
 10103aa:	f8d2 10bc 	ldr.w	r1, [r2, #188]	; 0xbc
 10103ae:	b29b      	uxth	r3, r3
		
	c1219_ptr->execute_table_reading(&c1219_ptr->table_data[0]);
 10103b0:	f241 72ac 	movw	r2, #6060	; 0x17ac
	c1219_ptr->c1218_dll->tx_data[response_index++] = (uint8_t)((c1219_ptr->table_size & 0x00FF) >> 0);
 10103b4:	54c8      	strb	r0, [r1, r3]
	c1219_ptr->execute_table_reading(&c1219_ptr->table_data[0]);
 10103b6:	f104 063a 	add.w	r6, r4, #58	; 0x3a
	c1219_ptr->c1218_dll->tx_data[response_index++] = (uint8_t)((c1219_ptr->table_size & 0x00FF) >> 0);
 10103ba:	3301      	adds	r3, #1
 10103bc:	b29b      	uxth	r3, r3
	c1219_ptr->execute_table_reading(&c1219_ptr->table_data[0]);
 10103be:	58a2      	ldr	r2, [r4, r2]
	c1219_ptr->c1218_dll->tx_data[response_index++] = (uint8_t)((c1219_ptr->table_size & 0x00FF) >> 0);
 10103c0:	802b      	strh	r3, [r5, #0]
	c1219_ptr->execute_table_reading(&c1219_ptr->table_data[0]);
 10103c2:	4630      	mov	r0, r6
 10103c4:	4790      	blx	r2
	memcpy(&c1219_ptr->c1218_dll->tx_data[response_index], &c1219_ptr->table_data[0], c1219_ptr->table_size);
 10103c6:	6863      	ldr	r3, [r4, #4]
 10103c8:	882f      	ldrh	r7, [r5, #0]
 10103ca:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 10103ce:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 10103d0:	4b10      	ldr	r3, [pc, #64]	; (1010414 <C1219_full_read+0xa4>)
 10103d2:	4631      	mov	r1, r6
 10103d4:	fa10 f087 	uxtah	r0, r0, r7
 10103d8:	4798      	blx	r3
	response_index += c1219_ptr->table_size;
 10103da:	882b      	ldrh	r3, [r5, #0]
 10103dc:	8f21      	ldrh	r1, [r4, #56]	; 0x38
	
	c1219_ptr->c1218_dll->tx_data[response_index++] = CRC_2s_complement(&c1219_ptr->c1218_dll->tx_data[3], c1219_ptr->table_size);
 10103de:	6860      	ldr	r0, [r4, #4]
 10103e0:	4a0d      	ldr	r2, [pc, #52]	; (1010418 <C1219_full_read+0xa8>)
 10103e2:	f8d0 70bc 	ldr.w	r7, [r0, #188]	; 0xbc
	response_index += c1219_ptr->table_size;
 10103e6:	fa11 f383 	uxtah	r3, r1, r3
 10103ea:	b29b      	uxth	r3, r3
 10103ec:	802b      	strh	r3, [r5, #0]
	c1219_ptr->c1218_dll->tx_data[response_index++] = CRC_2s_complement(&c1219_ptr->c1218_dll->tx_data[3], c1219_ptr->table_size);
 10103ee:	882e      	ldrh	r6, [r5, #0]
 10103f0:	b2b6      	uxth	r6, r6
 10103f2:	1c73      	adds	r3, r6, #1
 10103f4:	b29b      	uxth	r3, r3
 10103f6:	1cf8      	adds	r0, r7, #3
 10103f8:	802b      	strh	r3, [r5, #0]
 10103fa:	4790      	blx	r2
 10103fc:	55b8      	strb	r0, [r7, r6]
	c1219_ptr->c1218_dll->tx_data_length = response_index;
 10103fe:	6863      	ldr	r3, [r4, #4]
 1010400:	882a      	ldrh	r2, [r5, #0]
 1010402:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
	
	C1218_send_response(c1219_ptr->c1218_dll);
 1010406:	6860      	ldr	r0, [r4, #4]
 1010408:	4b04      	ldr	r3, [pc, #16]	; (101041c <C1219_full_read+0xac>)
}
 101040a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	C1218_send_response(c1219_ptr->c1218_dll);
 101040e:	4718      	bx	r3
 1010410:	20000958 	.word	0x20000958
 1010414:	01030a3d 	.word	0x01030a3d
 1010418:	01016bf5 	.word	0x01016bf5
 101041c:	0101637d 	.word	0x0101637d

01010420 <C1219_pread_offset>:
 */
void C1219_pread_offset(C1219_TYPE *c1219_ptr) {
	
	static volatile uint16_t response_index;

	if ( (c1219_ptr->offset + (uint32_t)c1219_ptr->count) <= (uint32_t)c1219_ptr->table_size ) {
 1010420:	6b03      	ldr	r3, [r0, #48]	; 0x30
 1010422:	6b41      	ldr	r1, [r0, #52]	; 0x34
 1010424:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 1010426:	440b      	add	r3, r1
 1010428:	4293      	cmp	r3, r2
 101042a:	d902      	bls.n	1010432 <C1219_pread_offset+0x12>
		
		C1218_send_response(c1219_ptr->c1218_dll);
	}
	else {
		
		C1218_send_onp(c1219_ptr->c1218_dll);
 101042c:	6840      	ldr	r0, [r0, #4]
 101042e:	4b29      	ldr	r3, [pc, #164]	; (10104d4 <C1219_pread_offset+0xb4>)
 1010430:	4718      	bx	r3
void C1219_pread_offset(C1219_TYPE *c1219_ptr) {
 1010432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		response_index = 0;
 1010436:	4d28      	ldr	r5, [pc, #160]	; (10104d8 <C1219_pread_offset+0xb8>)
		c1219_ptr->c1218_dll->tx_data[response_index++] = C1218_OK;
 1010438:	6842      	ldr	r2, [r0, #4]
		response_index = 0;
 101043a:	2100      	movs	r1, #0
 101043c:	8029      	strh	r1, [r5, #0]
		c1219_ptr->c1218_dll->tx_data[response_index++] = C1218_OK;
 101043e:	882b      	ldrh	r3, [r5, #0]
 1010440:	4604      	mov	r4, r0
 1010442:	b29b      	uxth	r3, r3
 1010444:	f8d2 00bc 	ldr.w	r0, [r2, #188]	; 0xbc
 1010448:	1c5a      	adds	r2, r3, #1
 101044a:	54c1      	strb	r1, [r0, r3]
 101044c:	b292      	uxth	r2, r2
 101044e:	802a      	strh	r2, [r5, #0]
		c1219_ptr->c1218_dll->tx_data[response_index++] = (uint8_t)((c1219_ptr->count & 0xFF00) >> 8);
 1010450:	882b      	ldrh	r3, [r5, #0]
 1010452:	6862      	ldr	r2, [r4, #4]
 1010454:	6b61      	ldr	r1, [r4, #52]	; 0x34
 1010456:	f8d2 00bc 	ldr.w	r0, [r2, #188]	; 0xbc
 101045a:	b29b      	uxth	r3, r3
 101045c:	1c5a      	adds	r2, r3, #1
 101045e:	0a09      	lsrs	r1, r1, #8
 1010460:	54c1      	strb	r1, [r0, r3]
 1010462:	b292      	uxth	r2, r2
 1010464:	802a      	strh	r2, [r5, #0]
		c1219_ptr->c1218_dll->tx_data[response_index++] = (uint8_t)((c1219_ptr->count & 0x00FF) >> 0);
 1010466:	882b      	ldrh	r3, [r5, #0]
 1010468:	6862      	ldr	r2, [r4, #4]
 101046a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 101046c:	f8d2 10bc 	ldr.w	r1, [r2, #188]	; 0xbc
 1010470:	b29b      	uxth	r3, r3
		c1219_ptr->execute_table_reading(&c1219_ptr->table_data[0]);
 1010472:	f241 72ac 	movw	r2, #6060	; 0x17ac
		c1219_ptr->c1218_dll->tx_data[response_index++] = (uint8_t)((c1219_ptr->count & 0x00FF) >> 0);
 1010476:	54c8      	strb	r0, [r1, r3]
 1010478:	3301      	adds	r3, #1
 101047a:	b29b      	uxth	r3, r3
		c1219_ptr->execute_table_reading(&c1219_ptr->table_data[0]);
 101047c:	58a2      	ldr	r2, [r4, r2]
		c1219_ptr->c1218_dll->tx_data[response_index++] = (uint8_t)((c1219_ptr->count & 0x00FF) >> 0);
 101047e:	802b      	strh	r3, [r5, #0]
		c1219_ptr->execute_table_reading(&c1219_ptr->table_data[0]);
 1010480:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 1010484:	4790      	blx	r2
		memcpy(&c1219_ptr->c1218_dll->tx_data[response_index], &c1219_ptr->table_data[c1219_ptr->offset], c1219_ptr->count);
 1010486:	6863      	ldr	r3, [r4, #4]
 1010488:	6b21      	ldr	r1, [r4, #48]	; 0x30
 101048a:	882e      	ldrh	r6, [r5, #0]
 101048c:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 1010490:	6b62      	ldr	r2, [r4, #52]	; 0x34
 1010492:	4b12      	ldr	r3, [pc, #72]	; (10104dc <C1219_pread_offset+0xbc>)
 1010494:	313a      	adds	r1, #58	; 0x3a
 1010496:	4421      	add	r1, r4
 1010498:	fa10 f086 	uxtah	r0, r0, r6
 101049c:	4798      	blx	r3
		response_index += c1219_ptr->count;
 101049e:	882b      	ldrh	r3, [r5, #0]
 10104a0:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
		c1219_ptr->c1218_dll->tx_data[response_index++] = CRC_2s_complement(&c1219_ptr->c1218_dll->tx_data[3], c1219_ptr->count);
 10104a2:	6860      	ldr	r0, [r4, #4]
 10104a4:	4a0e      	ldr	r2, [pc, #56]	; (10104e0 <C1219_pread_offset+0xc0>)
 10104a6:	f8d0 70bc 	ldr.w	r7, [r0, #188]	; 0xbc
		response_index += c1219_ptr->count;
 10104aa:	fa11 f383 	uxtah	r3, r1, r3
 10104ae:	b29b      	uxth	r3, r3
 10104b0:	802b      	strh	r3, [r5, #0]
		c1219_ptr->c1218_dll->tx_data[response_index++] = CRC_2s_complement(&c1219_ptr->c1218_dll->tx_data[3], c1219_ptr->count);
 10104b2:	882e      	ldrh	r6, [r5, #0]
 10104b4:	b2b6      	uxth	r6, r6
 10104b6:	1c73      	adds	r3, r6, #1
 10104b8:	b29b      	uxth	r3, r3
 10104ba:	1cf8      	adds	r0, r7, #3
 10104bc:	802b      	strh	r3, [r5, #0]
 10104be:	4790      	blx	r2
 10104c0:	55b8      	strb	r0, [r7, r6]
		c1219_ptr->c1218_dll->tx_data_length = response_index;
 10104c2:	6863      	ldr	r3, [r4, #4]
 10104c4:	882a      	ldrh	r2, [r5, #0]
 10104c6:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
		C1218_send_response(c1219_ptr->c1218_dll);
 10104ca:	6860      	ldr	r0, [r4, #4]
 10104cc:	4b05      	ldr	r3, [pc, #20]	; (10104e4 <C1219_pread_offset+0xc4>)
	}
}
 10104ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		C1218_send_response(c1219_ptr->c1218_dll);
 10104d2:	4718      	bx	r3
 10104d4:	010164a5 	.word	0x010164a5
 10104d8:	2000095a 	.word	0x2000095a
 10104dc:	01030a3d 	.word	0x01030a3d
 10104e0:	01016bf5 	.word	0x01016bf5
 10104e4:	0101637d 	.word	0x0101637d

010104e8 <C1219_full_write>:
 * \retval void
 ******************************************************************************
 */
void C1219_full_write(C1219_TYPE *c1219_ptr) {
	
	if ( c1219_ptr->count == c1219_ptr->table_size ) {
 10104e8:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 10104ea:	6b42      	ldr	r2, [r0, #52]	; 0x34
 10104ec:	429a      	cmp	r2, r3
 10104ee:	d002      	beq.n	10104f6 <C1219_full_write+0xe>
		else {
			C1218_send_dlk(c1219_ptr->c1218_dll);
		}
	}
	else {
		C1218_send_onp(c1219_ptr->c1218_dll);
 10104f0:	6840      	ldr	r0, [r0, #4]
 10104f2:	4b0b      	ldr	r3, [pc, #44]	; (1010520 <C1219_full_write+0x38>)
 10104f4:	4718      	bx	r3
void C1219_full_write(C1219_TYPE *c1219_ptr) {
 10104f6:	b510      	push	{r4, lr}
		if ( c1219_ptr->execute_table_writing(&c1219_ptr->c1218_dll->rx_data[5]) ) {
 10104f8:	6842      	ldr	r2, [r0, #4]
 10104fa:	4604      	mov	r4, r0
 10104fc:	f241 73b0 	movw	r3, #6064	; 0x17b0
 1010500:	6890      	ldr	r0, [r2, #8]
 1010502:	58e3      	ldr	r3, [r4, r3]
 1010504:	3005      	adds	r0, #5
 1010506:	4798      	blx	r3
 1010508:	b120      	cbz	r0, 1010514 <C1219_full_write+0x2c>
			C1218_send_ok(c1219_ptr->c1218_dll);
 101050a:	6860      	ldr	r0, [r4, #4]
 101050c:	4b05      	ldr	r3, [pc, #20]	; (1010524 <C1219_full_write+0x3c>)
	}
}
 101050e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			C1218_send_ok(c1219_ptr->c1218_dll);
 1010512:	4718      	bx	r3
			C1218_send_dlk(c1219_ptr->c1218_dll);
 1010514:	6860      	ldr	r0, [r4, #4]
 1010516:	4b04      	ldr	r3, [pc, #16]	; (1010528 <C1219_full_write+0x40>)
}
 1010518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			C1218_send_dlk(c1219_ptr->c1218_dll);
 101051c:	4718      	bx	r3
 101051e:	bf00      	nop
 1010520:	010164a5 	.word	0x010164a5
 1010524:	01016445 	.word	0x01016445
 1010528:	01016505 	.word	0x01016505

0101052c <C1219_pwrite_offset>:
 * \retval void
 ******************************************************************************
 */
void C1219_pwrite_offset(C1219_TYPE *c1219_ptr) {
	
	if ( (c1219_ptr->offset + (uint32_t)c1219_ptr->count) <= (uint32_t)c1219_ptr->table_size ) {
 101052c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 101052e:	6b41      	ldr	r1, [r0, #52]	; 0x34
 1010530:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 1010532:	440b      	add	r3, r1
 1010534:	4293      	cmp	r3, r2
 1010536:	d81c      	bhi.n	1010572 <C1219_pwrite_offset+0x46>
void C1219_pwrite_offset(C1219_TYPE *c1219_ptr) {
 1010538:	b570      	push	{r4, r5, r6, lr}
		
		c1219_ptr->execute_table_reading(&c1219_ptr->table_data[0]);
 101053a:	f241 73ac 	movw	r3, #6060	; 0x17ac
 101053e:	4604      	mov	r4, r0
 1010540:	f100 053a 	add.w	r5, r0, #58	; 0x3a
 1010544:	58c3      	ldr	r3, [r0, r3]
 1010546:	4628      	mov	r0, r5
 1010548:	4798      	blx	r3
		memcpy(&c1219_ptr->table_data[c1219_ptr->offset], &c1219_ptr->c1218_dll->rx_data[8], c1219_ptr->count);
 101054a:	6863      	ldr	r3, [r4, #4]
 101054c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 101054e:	6899      	ldr	r1, [r3, #8]
 1010550:	6b62      	ldr	r2, [r4, #52]	; 0x34
 1010552:	4b0c      	ldr	r3, [pc, #48]	; (1010584 <C1219_pwrite_offset+0x58>)
 1010554:	303a      	adds	r0, #58	; 0x3a
 1010556:	3108      	adds	r1, #8
 1010558:	4420      	add	r0, r4
 101055a:	4798      	blx	r3
		
		if ( c1219_ptr->execute_table_writing(&c1219_ptr->table_data[0]) ) {
 101055c:	f241 73b0 	movw	r3, #6064	; 0x17b0
 1010560:	4628      	mov	r0, r5
 1010562:	58e3      	ldr	r3, [r4, r3]
 1010564:	4798      	blx	r3
 1010566:	b138      	cbz	r0, 1010578 <C1219_pwrite_offset+0x4c>
			C1218_send_ok(c1219_ptr->c1218_dll);
 1010568:	6860      	ldr	r0, [r4, #4]
 101056a:	4b07      	ldr	r3, [pc, #28]	; (1010588 <C1219_pwrite_offset+0x5c>)
		}
	}
	else {
		C1218_send_onp(c1219_ptr->c1218_dll);
	}
}
 101056c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			C1218_send_ok(c1219_ptr->c1218_dll);
 1010570:	4718      	bx	r3
		C1218_send_onp(c1219_ptr->c1218_dll);
 1010572:	6840      	ldr	r0, [r0, #4]
 1010574:	4b05      	ldr	r3, [pc, #20]	; (101058c <C1219_pwrite_offset+0x60>)
 1010576:	4718      	bx	r3
			C1218_send_dlk(c1219_ptr->c1218_dll);
 1010578:	6860      	ldr	r0, [r4, #4]
 101057a:	4b05      	ldr	r3, [pc, #20]	; (1010590 <C1219_pwrite_offset+0x64>)
}
 101057c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			C1218_send_dlk(c1219_ptr->c1218_dll);
 1010580:	4718      	bx	r3
 1010582:	bf00      	nop
 1010584:	01030a3d 	.word	0x01030a3d
 1010588:	01016445 	.word	0x01016445
 101058c:	010164a5 	.word	0x010164a5
 1010590:	01016505 	.word	0x01016505

01010594 <C1219_mp_110_execute.isra.23>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
void C1219_mp_110_execute(C1219_TYPE *c1219_ptr) {
 1010594:	b510      	push	{r4, lr}

	uint8_t k;
	uint32_t proc_input = 0;
	uint8_t id_value;
	
	if ( ( c1219_ptr->c1218_dll->rx_data_bytes >= (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + MP_110_PARAMETERS_MIN_SIZE ) )    &&
 1010596:	6802      	ldr	r2, [r0, #0]
 1010598:	7b93      	ldrb	r3, [r2, #14]
 101059a:	3b0a      	subs	r3, #10
 101059c:	2b04      	cmp	r3, #4
 101059e:	d831      	bhi.n	1010604 <C1219_mp_110_execute.isra.23+0x70>
	     ( c1219_ptr->c1218_dll->rx_data_bytes <= (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + MP_110_PARAMETERS_MAX_SIZE ) ) )  {	

		k = 0;
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t) (proc_id & 0x00FF);
 10105a0:	4b93      	ldr	r3, [pc, #588]	; (10107f0 <C1219_mp_110_execute.isra.23+0x25c>)
 10105a2:	4604      	mov	r4, r0
 10105a4:	881b      	ldrh	r3, [r3, #0]
 10105a6:	f882 3160 	strb.w	r3, [r2, #352]	; 0x160
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t) (proc_id >> 8);
 10105aa:	6821      	ldr	r1, [r4, #0]
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 10105ac:	4891      	ldr	r0, [pc, #580]	; (10107f4 <C1219_mp_110_execute.isra.23+0x260>)
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t) (proc_id >> 8);
 10105ae:	0a1b      	lsrs	r3, r3, #8
 10105b0:	f881 3161 	strb.w	r3, [r1, #353]	; 0x161
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 10105b4:	6823      	ldr	r3, [r4, #0]
 10105b6:	7802      	ldrb	r2, [r0, #0]
 10105b8:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
		c1219_ptr->c1218_dll->st_08_data[k++] = PROC_ACCEPTED_NOT_COMPLETED;		
 10105bc:	6823      	ldr	r3, [r4, #0]
 10105be:	2201      	movs	r2, #1
 10105c0:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
		c1219_ptr->c1218_dll->st_08_length = k;
 10105c4:	6823      	ldr	r3, [r4, #0]
 10105c6:	2204      	movs	r2, #4
 10105c8:	f8a3 21f6 	strh.w	r2, [r3, #502]	; 0x1f6
		
		id_value = (uint8_t)(c1219_ptr->c1218_dll->rx_data[CALIBRATION_CONSTANT_SELECT_INDEX]);
 10105cc:	6823      	ldr	r3, [r4, #0]
 10105ce:	689a      	ldr	r2, [r3, #8]
		proc_input  = (uint32_t)(c1219_ptr->c1218_dll->rx_data[CALIBRATION_CONSTANT_VALUE_INDEX + 0] << 0);
		proc_input |= (uint32_t)(c1219_ptr->c1218_dll->rx_data[CALIBRATION_CONSTANT_VALUE_INDEX + 1] << 8);
		proc_input |= (uint32_t)(c1219_ptr->c1218_dll->rx_data[CALIBRATION_CONSTANT_VALUE_INDEX + 2] << 16);
		proc_input |= (uint32_t)(c1219_ptr->c1218_dll->rx_data[CALIBRATION_CONSTANT_VALUE_INDEX + 3] << 24);
		
		switch ( id_value ) {
 10105d0:	7a13      	ldrb	r3, [r2, #8]
		proc_input |= (uint32_t)(c1219_ptr->c1218_dll->rx_data[CALIBRATION_CONSTANT_VALUE_INDEX + 3] << 24);
 10105d2:	f8d2 0009 	ldr.w	r0, [r2, #9]
		switch ( id_value ) {
 10105d6:	2b11      	cmp	r3, #17
 10105d8:	f200 8109 	bhi.w	10107ee <C1219_mp_110_execute.isra.23+0x25a>
 10105dc:	e8df f013 	tbh	[pc, r3, lsl #1]
 10105e0:	00f90100 	.word	0x00f90100
 10105e4:	00e200f2 	.word	0x00e200f2
 10105e8:	00c200d2 	.word	0x00c200d2
 10105ec:	00b600bc 	.word	0x00b600bc
 10105f0:	00a000b0 	.word	0x00a000b0
 10105f4:	00800090 	.word	0x00800090
 10105f8:	0074007a 	.word	0x0074007a
 10105fc:	00540063 	.word	0x00540063
 1010600:	002c0045 	.word	0x002c0045
				break;
		}
	}
	else
	{
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 1010604:	4b7a      	ldr	r3, [pc, #488]	; (10107f0 <C1219_mp_110_execute.isra.23+0x25c>)
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1010606:	497b      	ldr	r1, [pc, #492]	; (10107f4 <C1219_mp_110_execute.isra.23+0x260>)
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 1010608:	881b      	ldrh	r3, [r3, #0]
 101060a:	f882 3160 	strb.w	r3, [r2, #352]	; 0x160
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 101060e:	6804      	ldr	r4, [r0, #0]
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1010610:	7809      	ldrb	r1, [r1, #0]
		c1219_ptr->c1218_dll->st_08_data[k++] = INVALID_PARAMETER;
		c1219_ptr->c1218_dll->st_08_length = k;
		
		C1218_send_err(c1219_ptr->c1218_dll);
 1010612:	4a79      	ldr	r2, [pc, #484]	; (10107f8 <C1219_mp_110_execute.isra.23+0x264>)
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1010614:	0a1b      	lsrs	r3, r3, #8
 1010616:	f884 3161 	strb.w	r3, [r4, #353]	; 0x161
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 101061a:	6803      	ldr	r3, [r0, #0]
 101061c:	f883 1162 	strb.w	r1, [r3, #354]	; 0x162
		c1219_ptr->c1218_dll->st_08_data[k++] = INVALID_PARAMETER;
 1010620:	6803      	ldr	r3, [r0, #0]
 1010622:	2102      	movs	r1, #2
 1010624:	f883 1163 	strb.w	r1, [r3, #355]	; 0x163
		c1219_ptr->c1218_dll->st_08_length = k;
 1010628:	6803      	ldr	r3, [r0, #0]
 101062a:	2104      	movs	r1, #4
 101062c:	f8a3 11f6 	strh.w	r1, [r3, #502]	; 0x1f6
		C1218_send_err(c1219_ptr->c1218_dll);
 1010630:	6800      	ldr	r0, [r0, #0]
	}
}
 1010632:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		C1218_send_err(c1219_ptr->c1218_dll);
 1010636:	4710      	bx	r2
					if ( METROLOGY_APP_bCalibrate_ph_ic(proc_input) ) {
 1010638:	4b70      	ldr	r3, [pc, #448]	; (10107fc <C1219_mp_110_execute.isra.23+0x268>)
 101063a:	4798      	blx	r3
						c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 101063c:	6822      	ldr	r2, [r4, #0]
					if ( METROLOGY_APP_bCalibrate_ph_ic(proc_input) ) {
 101063e:	2800      	cmp	r0, #0
 1010640:	d036      	beq.n	10106b0 <C1219_mp_110_execute.isra.23+0x11c>
						c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 1010642:	2100      	movs	r1, #0
 1010644:	f882 1163 	strb.w	r1, [r2, #355]	; 0x163
						EEPROM_reader(DSP_CTRL_CAL_PH_IC_ADDR, (uint8_t*)(&c1219_ptr->c1218_dll->st_08_data[k]), 4);
 1010648:	6821      	ldr	r1, [r4, #0]
 101064a:	4b6d      	ldr	r3, [pc, #436]	; (1010800 <C1219_mp_110_execute.isra.23+0x26c>)
 101064c:	2204      	movs	r2, #4
 101064e:	f501 71b2 	add.w	r1, r1, #356	; 0x164
 1010652:	f44f 706a 	mov.w	r0, #936	; 0x3a8
						EEPROM_reader(DSP_CTRL_CAL_M_VA_ADDR, (uint8_t*)(&c1219_ptr->c1218_dll->st_08_data[k]), 4);
 1010656:	4798      	blx	r3
						c1219_ptr->c1218_dll->st_08_length = k;
 1010658:	6822      	ldr	r2, [r4, #0]
						C1218_send_ok(c1219_ptr->c1218_dll);
 101065a:	4b6a      	ldr	r3, [pc, #424]	; (1010804 <C1219_mp_110_execute.isra.23+0x270>)
						c1219_ptr->c1218_dll->st_08_length = k;
 101065c:	2108      	movs	r1, #8
 101065e:	f8a2 11f6 	strh.w	r1, [r2, #502]	; 0x1f6
						C1218_send_ok(c1219_ptr->c1218_dll);
 1010662:	6820      	ldr	r0, [r4, #0]
}
 1010664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
						C1218_send_ok(c1219_ptr->c1218_dll);
 1010668:	4718      	bx	r3
					if ( METROLOGY_APP_bCalibrate_m_vc(proc_input) ) {
 101066a:	4b67      	ldr	r3, [pc, #412]	; (1010808 <C1219_mp_110_execute.isra.23+0x274>)
 101066c:	4798      	blx	r3
						c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 101066e:	6822      	ldr	r2, [r4, #0]
					if ( METROLOGY_APP_bCalibrate_m_vc(proc_input) ) {
 1010670:	b1f0      	cbz	r0, 10106b0 <C1219_mp_110_execute.isra.23+0x11c>
						c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 1010672:	2100      	movs	r1, #0
 1010674:	f882 1163 	strb.w	r1, [r2, #355]	; 0x163
						EEPROM_reader(DSP_CTRL_CAL_M_VC_ADDR, (uint8_t*)(&c1219_ptr->c1218_dll->st_08_data[k]), 4);
 1010678:	6821      	ldr	r1, [r4, #0]
 101067a:	4b61      	ldr	r3, [pc, #388]	; (1010800 <C1219_mp_110_execute.isra.23+0x26c>)
 101067c:	2204      	movs	r2, #4
 101067e:	f501 71b2 	add.w	r1, r1, #356	; 0x164
 1010682:	f44f 7064 	mov.w	r0, #912	; 0x390
 1010686:	e7e6      	b.n	1010656 <C1219_mp_110_execute.isra.23+0xc2>
					if ( METROLOGY_APP_bCalibrate_m_ic(proc_input) ) {
 1010688:	4b60      	ldr	r3, [pc, #384]	; (101080c <C1219_mp_110_execute.isra.23+0x278>)
 101068a:	4798      	blx	r3
						c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 101068c:	6822      	ldr	r2, [r4, #0]
					if ( METROLOGY_APP_bCalibrate_m_ic(proc_input) ) {
 101068e:	b178      	cbz	r0, 10106b0 <C1219_mp_110_execute.isra.23+0x11c>
						c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 1010690:	2100      	movs	r1, #0
 1010692:	f882 1163 	strb.w	r1, [r2, #355]	; 0x163
						EEPROM_reader(DSP_CTRL_CAL_M_IC_ADDR, (uint8_t*)(&c1219_ptr->c1218_dll->st_08_data[k]), 4);
 1010696:	6821      	ldr	r1, [r4, #0]
 1010698:	4b59      	ldr	r3, [pc, #356]	; (1010800 <C1219_mp_110_execute.isra.23+0x26c>)
 101069a:	2204      	movs	r2, #4
 101069c:	f501 71b2 	add.w	r1, r1, #356	; 0x164
 10106a0:	f44f 7063 	mov.w	r0, #908	; 0x38c
 10106a4:	e7d7      	b.n	1010656 <C1219_mp_110_execute.isra.23+0xc2>
					if ( METROLOGY_APP_bWrite_cal_ph_ic(proc_input) ) {
 10106a6:	4b5a      	ldr	r3, [pc, #360]	; (1010810 <C1219_mp_110_execute.isra.23+0x27c>)
 10106a8:	4798      	blx	r3
						c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 10106aa:	6822      	ldr	r2, [r4, #0]
					if ( METROLOGY_APP_bWrite_cal_ph_ic(proc_input) ) {
 10106ac:	2800      	cmp	r0, #0
 10106ae:	d1c8      	bne.n	1010642 <C1219_mp_110_execute.isra.23+0xae>
						c1219_ptr->c1218_dll->st_08_data[k++] = PROC_CONFLICT_WITH_SET_UP;
 10106b0:	2103      	movs	r1, #3
 10106b2:	f882 1163 	strb.w	r1, [r2, #355]	; 0x163
						c1219_ptr->c1218_dll->st_08_length = k;
 10106b6:	6822      	ldr	r2, [r4, #0]
						C1218_send_err(c1219_ptr->c1218_dll);
 10106b8:	4b4f      	ldr	r3, [pc, #316]	; (10107f8 <C1219_mp_110_execute.isra.23+0x264>)
						c1219_ptr->c1218_dll->st_08_length = k;
 10106ba:	2104      	movs	r1, #4
 10106bc:	f8a2 11f6 	strh.w	r1, [r2, #502]	; 0x1f6
						C1218_send_err(c1219_ptr->c1218_dll);
 10106c0:	6820      	ldr	r0, [r4, #0]
}
 10106c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
						C1218_send_err(c1219_ptr->c1218_dll);
 10106c6:	4718      	bx	r3
					if ( METROLOGY_APP_bWrite_cal_m_vc(proc_input) ) {
 10106c8:	4b52      	ldr	r3, [pc, #328]	; (1010814 <C1219_mp_110_execute.isra.23+0x280>)
 10106ca:	4798      	blx	r3
						c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 10106cc:	6822      	ldr	r2, [r4, #0]
					if ( METROLOGY_APP_bWrite_cal_m_vc(proc_input) ) {
 10106ce:	2800      	cmp	r0, #0
 10106d0:	d0ee      	beq.n	10106b0 <C1219_mp_110_execute.isra.23+0x11c>
 10106d2:	e7ce      	b.n	1010672 <C1219_mp_110_execute.isra.23+0xde>
					if ( METROLOGY_APP_bWrite_cal_m_ic(proc_input) ) {
 10106d4:	4b50      	ldr	r3, [pc, #320]	; (1010818 <C1219_mp_110_execute.isra.23+0x284>)
 10106d6:	4798      	blx	r3
						c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 10106d8:	6822      	ldr	r2, [r4, #0]
					if ( METROLOGY_APP_bWrite_cal_m_ic(proc_input) ) {
 10106da:	2800      	cmp	r0, #0
 10106dc:	d0e8      	beq.n	10106b0 <C1219_mp_110_execute.isra.23+0x11c>
 10106de:	e7d7      	b.n	1010690 <C1219_mp_110_execute.isra.23+0xfc>
					if ( METROLOGY_APP_bCalibrate_ph_ib(proc_input) ) {
 10106e0:	4b4e      	ldr	r3, [pc, #312]	; (101081c <C1219_mp_110_execute.isra.23+0x288>)
 10106e2:	4798      	blx	r3
						c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 10106e4:	6822      	ldr	r2, [r4, #0]
					if ( METROLOGY_APP_bCalibrate_ph_ib(proc_input) ) {
 10106e6:	2800      	cmp	r0, #0
 10106e8:	d0e2      	beq.n	10106b0 <C1219_mp_110_execute.isra.23+0x11c>
						c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 10106ea:	2100      	movs	r1, #0
 10106ec:	f882 1163 	strb.w	r1, [r2, #355]	; 0x163
						EEPROM_reader(DSP_CTRL_CAL_PH_IB_ADDR, (uint8_t*)(&c1219_ptr->c1218_dll->st_08_data[k]), 4);
 10106f0:	6821      	ldr	r1, [r4, #0]
 10106f2:	4b43      	ldr	r3, [pc, #268]	; (1010800 <C1219_mp_110_execute.isra.23+0x26c>)
 10106f4:	2204      	movs	r2, #4
 10106f6:	f501 71b2 	add.w	r1, r1, #356	; 0x164
 10106fa:	f44f 7068 	mov.w	r0, #928	; 0x3a0
 10106fe:	e7aa      	b.n	1010656 <C1219_mp_110_execute.isra.23+0xc2>
					if ( METROLOGY_APP_bCalibrate_m_vb(proc_input) ) {
 1010700:	4b47      	ldr	r3, [pc, #284]	; (1010820 <C1219_mp_110_execute.isra.23+0x28c>)
 1010702:	4798      	blx	r3
						c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 1010704:	6822      	ldr	r2, [r4, #0]
					if ( METROLOGY_APP_bCalibrate_m_vb(proc_input) ) {
 1010706:	2800      	cmp	r0, #0
 1010708:	d0d2      	beq.n	10106b0 <C1219_mp_110_execute.isra.23+0x11c>
						c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 101070a:	2100      	movs	r1, #0
 101070c:	f882 1163 	strb.w	r1, [r2, #355]	; 0x163
						EEPROM_reader(DSP_CTRL_CAL_M_VB_ADDR, (uint8_t*)(&c1219_ptr->c1218_dll->st_08_data[k]), 4);
 1010710:	6821      	ldr	r1, [r4, #0]
 1010712:	4b3b      	ldr	r3, [pc, #236]	; (1010800 <C1219_mp_110_execute.isra.23+0x26c>)
 1010714:	2204      	movs	r2, #4
 1010716:	f501 71b2 	add.w	r1, r1, #356	; 0x164
 101071a:	f44f 7062 	mov.w	r0, #904	; 0x388
 101071e:	e79a      	b.n	1010656 <C1219_mp_110_execute.isra.23+0xc2>
					if ( METROLOGY_APP_bCalibrate_m_ib(proc_input) ) {
 1010720:	4b40      	ldr	r3, [pc, #256]	; (1010824 <C1219_mp_110_execute.isra.23+0x290>)
 1010722:	4798      	blx	r3
						c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 1010724:	6822      	ldr	r2, [r4, #0]
					if ( METROLOGY_APP_bCalibrate_m_ib(proc_input) ) {
 1010726:	2800      	cmp	r0, #0
 1010728:	d0c2      	beq.n	10106b0 <C1219_mp_110_execute.isra.23+0x11c>
						c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 101072a:	2100      	movs	r1, #0
 101072c:	f882 1163 	strb.w	r1, [r2, #355]	; 0x163
						EEPROM_reader(DSP_CTRL_CAL_M_IB_ADDR, (uint8_t*)(&c1219_ptr->c1218_dll->st_08_data[k]), 4);
 1010730:	6821      	ldr	r1, [r4, #0]
 1010732:	4b33      	ldr	r3, [pc, #204]	; (1010800 <C1219_mp_110_execute.isra.23+0x26c>)
 1010734:	2204      	movs	r2, #4
 1010736:	f501 71b2 	add.w	r1, r1, #356	; 0x164
 101073a:	f44f 7061 	mov.w	r0, #900	; 0x384
 101073e:	e78a      	b.n	1010656 <C1219_mp_110_execute.isra.23+0xc2>
					if ( METROLOGY_APP_bWrite_cal_ph_ib(proc_input) ) {
 1010740:	4b39      	ldr	r3, [pc, #228]	; (1010828 <C1219_mp_110_execute.isra.23+0x294>)
 1010742:	4798      	blx	r3
						c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 1010744:	6822      	ldr	r2, [r4, #0]
					if ( METROLOGY_APP_bWrite_cal_ph_ib(proc_input) ) {
 1010746:	2800      	cmp	r0, #0
 1010748:	d0b2      	beq.n	10106b0 <C1219_mp_110_execute.isra.23+0x11c>
 101074a:	e7ce      	b.n	10106ea <C1219_mp_110_execute.isra.23+0x156>
					if ( METROLOGY_APP_bWrite_cal_m_vb(proc_input) ) {
 101074c:	4b37      	ldr	r3, [pc, #220]	; (101082c <C1219_mp_110_execute.isra.23+0x298>)
 101074e:	4798      	blx	r3
						c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 1010750:	6822      	ldr	r2, [r4, #0]
					if ( METROLOGY_APP_bWrite_cal_m_vb(proc_input) ) {
 1010752:	2800      	cmp	r0, #0
 1010754:	d0ac      	beq.n	10106b0 <C1219_mp_110_execute.isra.23+0x11c>
 1010756:	e7d8      	b.n	101070a <C1219_mp_110_execute.isra.23+0x176>
					if ( METROLOGY_APP_bWrite_cal_m_ib(proc_input) ) {
 1010758:	4b35      	ldr	r3, [pc, #212]	; (1010830 <C1219_mp_110_execute.isra.23+0x29c>)
 101075a:	4798      	blx	r3
						c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 101075c:	6822      	ldr	r2, [r4, #0]
					if ( METROLOGY_APP_bWrite_cal_m_ib(proc_input) ) {
 101075e:	2800      	cmp	r0, #0
 1010760:	d0a6      	beq.n	10106b0 <C1219_mp_110_execute.isra.23+0x11c>
 1010762:	e7e2      	b.n	101072a <C1219_mp_110_execute.isra.23+0x196>
					if ( METROLOGY_APP_bCalibrate_ph_ia(proc_input) ) {
 1010764:	4b33      	ldr	r3, [pc, #204]	; (1010834 <C1219_mp_110_execute.isra.23+0x2a0>)
 1010766:	4798      	blx	r3
						c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 1010768:	6822      	ldr	r2, [r4, #0]
					if ( METROLOGY_APP_bCalibrate_ph_ia(proc_input) ) {
 101076a:	2800      	cmp	r0, #0
 101076c:	d0a0      	beq.n	10106b0 <C1219_mp_110_execute.isra.23+0x11c>
						c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 101076e:	2100      	movs	r1, #0
 1010770:	f882 1163 	strb.w	r1, [r2, #355]	; 0x163
						EEPROM_reader(DSP_CTRL_CAL_PH_IA_ADDR, (uint8_t*)(&c1219_ptr->c1218_dll->st_08_data[k]), 4);
 1010774:	6821      	ldr	r1, [r4, #0]
 1010776:	4b22      	ldr	r3, [pc, #136]	; (1010800 <C1219_mp_110_execute.isra.23+0x26c>)
 1010778:	2204      	movs	r2, #4
 101077a:	f501 71b2 	add.w	r1, r1, #356	; 0x164
 101077e:	f44f 7066 	mov.w	r0, #920	; 0x398
 1010782:	e768      	b.n	1010656 <C1219_mp_110_execute.isra.23+0xc2>
					if ( METROLOGY_APP_bCalibrate_m_va(proc_input) ) {
 1010784:	4b2c      	ldr	r3, [pc, #176]	; (1010838 <C1219_mp_110_execute.isra.23+0x2a4>)
 1010786:	4798      	blx	r3
						c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 1010788:	6822      	ldr	r2, [r4, #0]
					if ( METROLOGY_APP_bCalibrate_m_va(proc_input) ) {
 101078a:	2800      	cmp	r0, #0
 101078c:	d090      	beq.n	10106b0 <C1219_mp_110_execute.isra.23+0x11c>
						c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 101078e:	2100      	movs	r1, #0
 1010790:	f882 1163 	strb.w	r1, [r2, #355]	; 0x163
						EEPROM_reader(DSP_CTRL_CAL_M_VA_ADDR, (uint8_t*)(&c1219_ptr->c1218_dll->st_08_data[k]), 4);
 1010794:	6821      	ldr	r1, [r4, #0]
 1010796:	4b1a      	ldr	r3, [pc, #104]	; (1010800 <C1219_mp_110_execute.isra.23+0x26c>)
 1010798:	2204      	movs	r2, #4
 101079a:	f501 71b2 	add.w	r1, r1, #356	; 0x164
 101079e:	f44f 7060 	mov.w	r0, #896	; 0x380
 10107a2:	e758      	b.n	1010656 <C1219_mp_110_execute.isra.23+0xc2>
					if ( METROLOGY_APP_bCalibrate_m_ia(proc_input) ) {
 10107a4:	4b25      	ldr	r3, [pc, #148]	; (101083c <C1219_mp_110_execute.isra.23+0x2a8>)
 10107a6:	4798      	blx	r3
						c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 10107a8:	6822      	ldr	r2, [r4, #0]
					if ( METROLOGY_APP_bCalibrate_m_ia(proc_input) ) {
 10107aa:	2800      	cmp	r0, #0
 10107ac:	d080      	beq.n	10106b0 <C1219_mp_110_execute.isra.23+0x11c>
						c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 10107ae:	2100      	movs	r1, #0
 10107b0:	f882 1163 	strb.w	r1, [r2, #355]	; 0x163
						EEPROM_reader(DSP_CTRL_CAL_M_IA_ADDR, (uint8_t*)(&c1219_ptr->c1218_dll->st_08_data[k]), 4);
 10107b4:	6821      	ldr	r1, [r4, #0]
 10107b6:	4b12      	ldr	r3, [pc, #72]	; (1010800 <C1219_mp_110_execute.isra.23+0x26c>)
 10107b8:	2204      	movs	r2, #4
 10107ba:	f501 71b2 	add.w	r1, r1, #356	; 0x164
 10107be:	f44f 705f 	mov.w	r0, #892	; 0x37c
 10107c2:	e748      	b.n	1010656 <C1219_mp_110_execute.isra.23+0xc2>
					if ( METROLOGY_APP_bWrite_cal_ph_ia(proc_input) ) {
 10107c4:	4b1e      	ldr	r3, [pc, #120]	; (1010840 <C1219_mp_110_execute.isra.23+0x2ac>)
 10107c6:	4798      	blx	r3
						c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 10107c8:	6822      	ldr	r2, [r4, #0]
					if ( METROLOGY_APP_bWrite_cal_ph_ia(proc_input) ) {
 10107ca:	2800      	cmp	r0, #0
 10107cc:	f43f af70 	beq.w	10106b0 <C1219_mp_110_execute.isra.23+0x11c>
 10107d0:	e7cd      	b.n	101076e <C1219_mp_110_execute.isra.23+0x1da>
					if ( METROLOGY_APP_bWrite_cal_m_va(proc_input) ) {
 10107d2:	4b1c      	ldr	r3, [pc, #112]	; (1010844 <C1219_mp_110_execute.isra.23+0x2b0>)
 10107d4:	4798      	blx	r3
						c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 10107d6:	6822      	ldr	r2, [r4, #0]
					if ( METROLOGY_APP_bWrite_cal_m_va(proc_input) ) {
 10107d8:	2800      	cmp	r0, #0
 10107da:	f43f af69 	beq.w	10106b0 <C1219_mp_110_execute.isra.23+0x11c>
 10107de:	e7d6      	b.n	101078e <C1219_mp_110_execute.isra.23+0x1fa>
					if ( METROLOGY_APP_bWrite_cal_m_ia(proc_input) ) {
 10107e0:	4b19      	ldr	r3, [pc, #100]	; (1010848 <C1219_mp_110_execute.isra.23+0x2b4>)
 10107e2:	4798      	blx	r3
						c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 10107e4:	6822      	ldr	r2, [r4, #0]
					if ( METROLOGY_APP_bWrite_cal_m_ia(proc_input) ) {
 10107e6:	2800      	cmp	r0, #0
 10107e8:	f43f af62 	beq.w	10106b0 <C1219_mp_110_execute.isra.23+0x11c>
 10107ec:	e7df      	b.n	10107ae <C1219_mp_110_execute.isra.23+0x21a>
 10107ee:	bd10      	pop	{r4, pc}
 10107f0:	20000954 	.word	0x20000954
 10107f4:	20000956 	.word	0x20000956
 10107f8:	01016465 	.word	0x01016465
 10107fc:	0101e289 	.word	0x0101e289
 1010800:	01017511 	.word	0x01017511
 1010804:	01016445 	.word	0x01016445
 1010808:	0101e1bd 	.word	0x0101e1bd
 101080c:	0101e111 	.word	0x0101e111
 1010810:	0101e219 	.word	0x0101e219
 1010814:	0101e16d 	.word	0x0101e16d
 1010818:	0101e0c1 	.word	0x0101e0c1
 101081c:	0101de79 	.word	0x0101de79
 1010820:	0101ddb1 	.word	0x0101ddb1
 1010824:	0101dd05 	.word	0x0101dd05
 1010828:	0101de0d 	.word	0x0101de0d
 101082c:	0101dd61 	.word	0x0101dd61
 1010830:	0101dcb5 	.word	0x0101dcb5
 1010834:	0101da71 	.word	0x0101da71
 1010838:	0101d9a9 	.word	0x0101d9a9
 101083c:	0101d8fd 	.word	0x0101d8fd
 1010840:	0101da05 	.word	0x0101da05
 1010844:	0101d959 	.word	0x0101d959
 1010848:	0101d8b1 	.word	0x0101d8b1

0101084c <C1219_st_7_full_write>:
void C1219_st_7_full_write(C1219_TYPE *c1219_ptr) {
 101084c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	proc_id  = (uint16_t)(c1219_ptr->c1218_dll->rx_data[PROCEDURE_ID_INDEX + 0] << 0);
 1010850:	6842      	ldr	r2, [r0, #4]
	EVNT_APP_vRegister_event(PROCEDURE_INVOKED, proc_id, true, c1219_ptr->c1218_apl.user_id, rtc.utc_timestamp);
 1010852:	4e8a      	ldr	r6, [pc, #552]	; (1010a7c <C1219_st_7_full_write+0x230>)
	proc_id  = (uint16_t)(c1219_ptr->c1218_dll->rx_data[PROCEDURE_ID_INDEX + 0] << 0);
 1010854:	6892      	ldr	r2, [r2, #8]
	proc_id |= (uint16_t)(c1219_ptr->c1218_dll->rx_data[PROCEDURE_ID_INDEX + 1] << 8);
 1010856:	4d8a      	ldr	r5, [pc, #552]	; (1010a80 <C1219_st_7_full_write+0x234>)
 1010858:	f8b2 e005 	ldrh.w	lr, [r2, #5]
	proc_seq_nbr = c1219_ptr->c1218_dll->rx_data[PROCEDURE_SEQ_NBR_INDEX];
 101085c:	4f89      	ldr	r7, [pc, #548]	; (1010a84 <C1219_st_7_full_write+0x238>)
 101085e:	f892 c007 	ldrb.w	ip, [r2, #7]
	EVNT_APP_vRegister_event(PROCEDURE_INVOKED, proc_id, true, c1219_ptr->c1218_apl.user_id, rtc.utc_timestamp);
 1010862:	6871      	ldr	r1, [r6, #4]
 1010864:	8943      	ldrh	r3, [r0, #10]
 1010866:	f8df 823c 	ldr.w	r8, [pc, #572]	; 1010aa4 <C1219_st_7_full_write+0x258>
	if ( SECR_APP_bCheck_access_to_execute_procedure(user_info) ) {
 101086a:	f8df 923c 	ldr.w	r9, [pc, #572]	; 1010aa8 <C1219_st_7_full_write+0x25c>
void C1219_st_7_full_write(C1219_TYPE *c1219_ptr) {
 101086e:	b0b9      	sub	sp, #228	; 0xe4
 1010870:	4604      	mov	r4, r0
	EVNT_APP_vRegister_event(PROCEDURE_INVOKED, proc_id, true, c1219_ptr->c1218_apl.user_id, rtc.utc_timestamp);
 1010872:	9100      	str	r1, [sp, #0]
 1010874:	2201      	movs	r2, #1
 1010876:	4671      	mov	r1, lr
 1010878:	2009      	movs	r0, #9
	proc_id |= (uint16_t)(c1219_ptr->c1218_dll->rx_data[PROCEDURE_ID_INDEX + 1] << 8);
 101087a:	f8a5 e000 	strh.w	lr, [r5]
	proc_seq_nbr = c1219_ptr->c1218_dll->rx_data[PROCEDURE_SEQ_NBR_INDEX];
 101087e:	f887 c000 	strb.w	ip, [r7]
	EVNT_APP_vRegister_event(PROCEDURE_INVOKED, proc_id, true, c1219_ptr->c1218_apl.user_id, rtc.utc_timestamp);
 1010882:	47c0      	blx	r8
	memcpy(&user_info.password[0], &c1219_ptr->c1218_apl.password[0], 20);
 1010884:	4623      	mov	r3, r4
 	SECURITY_USER_INFO_TYPE user_info = {
 1010886:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
	memcpy(&user_info.password[0], &c1219_ptr->c1218_apl.password[0], 20);
 101088a:	f853 2f16 	ldr.w	r2, [r3, #22]!
 101088e:	f8cd 2033 	str.w	r2, [sp, #51]	; 0x33
 1010892:	68d8      	ldr	r0, [r3, #12]
 1010894:	691a      	ldr	r2, [r3, #16]
 1010896:	f8cd 003f 	str.w	r0, [sp, #63]	; 0x3f
 101089a:	6858      	ldr	r0, [r3, #4]
 101089c:	f8cd 2043 	str.w	r2, [sp, #67]	; 0x43
 	SECURITY_USER_INFO_TYPE user_info = {
 10108a0:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
	memcpy(&user_info.password[0], &c1219_ptr->c1218_apl.password[0], 20);
 10108a4:	f8cd 0037 	str.w	r0, [sp, #55]	; 0x37
	if ( SECR_APP_bCheck_access_to_execute_procedure(user_info) ) {
 10108a8:	a910      	add	r1, sp, #64	; 0x40
 10108aa:	c903      	ldmia	r1, {r0, r1}
 		.tbl_proc_id			= (proc_id & TBL_PROC_NBR_bm) >> TBL_PROC_NBR_bp,
 10108ac:	882a      	ldrh	r2, [r5, #0]
	memcpy(&user_info.password[0], &c1219_ptr->c1218_apl.password[0], 20);
 10108ae:	f8d3 e008 	ldr.w	lr, [r3, #8]
 10108b2:	f8cd e03b 	str.w	lr, [sp, #59]	; 0x3b
	if ( SECR_APP_bCheck_access_to_execute_procedure(user_info) ) {
 10108b6:	e88d 0003 	stmia.w	sp, {r0, r1}
 		.tbl_proc_id			= (proc_id & TBL_PROC_NBR_bm) >> TBL_PROC_NBR_bp,
 10108ba:	f3c2 030a 	ubfx	r3, r2, #0, #11
 		.mfg_flag				= (bool)( (proc_id & STD_VS_MFG_FLAG_bm) >> STD_VS_MFG_FLAG_bp ),
 10108be:	f3c2 22c0 	ubfx	r2, r2, #11, #1
 	SECURITY_USER_INFO_TYPE user_info = {
 10108c2:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 10108c6:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
 10108ca:	ab0c      	add	r3, sp, #48	; 0x30
	if ( SECR_APP_bCheck_access_to_execute_procedure(user_info) ) {
 10108cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 10108ce:	47c8      	blx	r9
 10108d0:	2800      	cmp	r0, #0
 10108d2:	d05b      	beq.n	101098c <C1219_st_7_full_write+0x140>
		switch ( proc_id ) {
 10108d4:	f8b5 9000 	ldrh.w	r9, [r5]
 10108d8:	f640 0367 	movw	r3, #2151	; 0x867
 10108dc:	4599      	cmp	r9, r3
 10108de:	f04f 0a00 	mov.w	sl, #0
 10108e2:	f000 8759 	beq.w	1011798 <C1219_st_7_full_write+0xf4c>
 10108e6:	d92f      	bls.n	1010948 <C1219_st_7_full_write+0xfc>
 10108e8:	f640 037a 	movw	r3, #2170	; 0x87a
 10108ec:	4599      	cmp	r9, r3
 10108ee:	f000 879f 	beq.w	1011830 <C1219_st_7_full_write+0xfe4>
 10108f2:	d951      	bls.n	1010998 <C1219_st_7_full_write+0x14c>
 10108f4:	f640 037e 	movw	r3, #2174	; 0x87e
 10108f8:	4599      	cmp	r9, r3
 10108fa:	f000 870c 	beq.w	1011716 <C1219_st_7_full_write+0xeca>
 10108fe:	f240 80d5 	bls.w	1010aac <C1219_st_7_full_write+0x260>
 1010902:	f640 0396 	movw	r3, #2198	; 0x896
 1010906:	4599      	cmp	r9, r3
 1010908:	f000 8475 	beq.w	10111f6 <C1219_st_7_full_write+0x9aa>
 101090c:	f240 822d 	bls.w	1010d6a <C1219_st_7_full_write+0x51e>
 1010910:	f640 03c8 	movw	r3, #2248	; 0x8c8
 1010914:	4599      	cmp	r9, r3
 1010916:	f000 842d 	beq.w	1011174 <C1219_st_7_full_write+0x928>
 101091a:	f640 03c9 	movw	r3, #2249	; 0x8c9
 101091e:	4599      	cmp	r9, r3
 1010920:	f040 83ad 	bne.w	101107e <C1219_st_7_full_write+0x832>
void C1219_mp_201_execute(C1219_TYPE *c1219_ptr) {
	
	uint8_t k = 0;
	static volatile uint32_t crc_1, crc_2;
	
	if ( c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + MP_201_PARAMETERS_SIZE)) {
 1010924:	6863      	ldr	r3, [r4, #4]
 1010926:	7b9a      	ldrb	r2, [r3, #14]
 1010928:	2a18      	cmp	r2, #24
 101092a:	d10b      	bne.n	1010944 <C1219_st_7_full_write+0xf8>
		
		if ( (ota_image.initiation == 1) && (ota_image.type == c1219_ptr->c1218_dll->rx_data[PROCEDURE_PARAMETER_INDEX]) ) {
 101092c:	4e56      	ldr	r6, [pc, #344]	; (1010a88 <C1219_st_7_full_write+0x23c>)
 101092e:	f896 8000 	ldrb.w	r8, [r6]
 1010932:	f1b8 0f01 	cmp.w	r8, #1
 1010936:	d105      	bne.n	1010944 <C1219_st_7_full_write+0xf8>
 1010938:	689a      	ldr	r2, [r3, #8]
 101093a:	78b0      	ldrb	r0, [r6, #2]
 101093c:	7a11      	ldrb	r1, [r2, #8]
 101093e:	4288      	cmp	r0, r1
 1010940:	f001 8596 	beq.w	1012470 <C1219_st_7_full_write+0x1c24>
		}
	}
	else {
		
		k = 0;
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 1010944:	22c9      	movs	r2, #201	; 0xc9
 1010946:	e03f      	b.n	10109c8 <C1219_st_7_full_write+0x17c>
		switch ( proc_id ) {
 1010948:	f1b9 0f09 	cmp.w	r9, #9
 101094c:	f000 87bf 	beq.w	10118ce <C1219_st_7_full_write+0x1082>
 1010950:	d83f      	bhi.n	10109d2 <C1219_st_7_full_write+0x186>
 1010952:	f1b9 0f05 	cmp.w	r9, #5
 1010956:	f001 8049 	beq.w	10119ec <C1219_st_7_full_write+0x11a0>
 101095a:	f200 813f 	bhi.w	1010bdc <C1219_st_7_full_write+0x390>
 101095e:	f1b9 0f01 	cmp.w	r9, #1
 1010962:	f000 82fe 	beq.w	1010f62 <C1219_st_7_full_write+0x716>
 1010966:	f0c0 8539 	bcc.w	10113dc <C1219_st_7_full_write+0xb90>
 101096a:	f1b9 0f03 	cmp.w	r9, #3
 101096e:	f040 8386 	bne.w	101107e <C1219_st_7_full_write+0x832>
	if (c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + SP_3_PARAMETERS_SIZE)) {
 1010972:	6863      	ldr	r3, [r4, #4]
 1010974:	7b9a      	ldrb	r2, [r3, #14]
 1010976:	2a09      	cmp	r2, #9
 1010978:	f001 8210 	beq.w	1011d9c <C1219_st_7_full_write+0x1550>
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 101097c:	2203      	movs	r2, #3
				c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 101097e:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
				c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1010982:	6862      	ldr	r2, [r4, #4]
				c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1010984:	7839      	ldrb	r1, [r7, #0]
				C1218_send_err(c1219_ptr->c1218_dll);
 1010986:	4b41      	ldr	r3, [pc, #260]	; (1010a8c <C1219_st_7_full_write+0x240>)
				c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1010988:	2000      	movs	r0, #0
 101098a:	e1dc      	b.n	1010d46 <C1219_st_7_full_write+0x4fa>
		C1218_send_isc(c1219_ptr->c1218_dll);
 101098c:	6860      	ldr	r0, [r4, #4]
 101098e:	4b40      	ldr	r3, [pc, #256]	; (1010a90 <C1219_st_7_full_write+0x244>)
 1010990:	4798      	blx	r3
}
 1010992:	b039      	add	sp, #228	; 0xe4
 1010994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switch ( proc_id ) {
 1010998:	f5b9 6f07 	cmp.w	r9, #2160	; 0x870
 101099c:	f000 84c6 	beq.w	101132c <C1219_st_7_full_write+0xae0>
 10109a0:	f200 8154 	bhi.w	1010c4c <C1219_st_7_full_write+0x400>
 10109a4:	f640 036e 	movw	r3, #2158	; 0x86e
 10109a8:	4599      	cmp	r9, r3
 10109aa:	f000 81ea 	beq.w	1010d82 <C1219_st_7_full_write+0x536>
 10109ae:	f200 87db 	bhi.w	1011968 <C1219_st_7_full_write+0x111c>
 10109b2:	f640 0368 	movw	r3, #2152	; 0x868
 10109b6:	4599      	cmp	r9, r3
 10109b8:	f040 8361 	bne.w	101107e <C1219_st_7_full_write+0x832>
	if ( c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + MP_104_PARAMETERS_SIZE) ) {
 10109bc:	6863      	ldr	r3, [r4, #4]
 10109be:	7b9a      	ldrb	r2, [r3, #14]
 10109c0:	2a0b      	cmp	r2, #11
 10109c2:	f001 8216 	beq.w	1011df2 <C1219_st_7_full_write+0x15a6>
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 10109c6:	2268      	movs	r2, #104	; 0x68
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 10109c8:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 10109cc:	6862      	ldr	r2, [r4, #4]
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 10109ce:	7839      	ldrb	r1, [r7, #0]
 10109d0:	e1b7      	b.n	1010d42 <C1219_st_7_full_write+0x4f6>
		switch ( proc_id ) {
 10109d2:	f640 0309 	movw	r3, #2057	; 0x809
 10109d6:	4599      	cmp	r9, r3
 10109d8:	f000 85eb 	beq.w	10115b2 <C1219_st_7_full_write+0xd66>
 10109dc:	f200 819a 	bhi.w	1010d14 <C1219_st_7_full_write+0x4c8>
 10109e0:	f1b9 0f0b 	cmp.w	r9, #11
 10109e4:	f000 82cb 	beq.w	1010f7e <C1219_st_7_full_write+0x732>
 10109e8:	f0c0 8455 	bcc.w	1011296 <C1219_st_7_full_write+0xa4a>
 10109ec:	f640 0306 	movw	r3, #2054	; 0x806
 10109f0:	4599      	cmp	r9, r3
 10109f2:	f040 8344 	bne.w	101107e <C1219_st_7_full_write+0x832>
	if ( c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + MP_6_PARAMETERS_SIZE)) {
 10109f6:	6863      	ldr	r3, [r4, #4]
 10109f8:	7b9a      	ldrb	r2, [r3, #14]
 10109fa:	2a0a      	cmp	r2, #10
 10109fc:	f041 802b 	bne.w	1011a56 <C1219_st_7_full_write+0x120a>
		uint8_t volatile setting_time_min = 0;
 1010a00:	2200      	movs	r2, #0
 1010a02:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
		uint32_t volatile setting_time_ms = 0;
 1010a06:	921a      	str	r2, [sp, #104]	; 0x68
		setting_time_min = ((uint32_t) c1219_ptr->c1218_dll->rx_data[PROCEDURE_PARAMETER_INDEX]);		
 1010a08:	689b      	ldr	r3, [r3, #8]
		meter.ed_mode.test_mode.active_period = (uint32_t)TIMER_ms_to_tic(setting_time_ms);
 1010a0a:	4a22      	ldr	r2, [pc, #136]	; (1010a94 <C1219_st_7_full_write+0x248>)
		setting_time_min = ((uint32_t) c1219_ptr->c1218_dll->rx_data[PROCEDURE_PARAMETER_INDEX]);		
 1010a0c:	7a1b      	ldrb	r3, [r3, #8]
 1010a0e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
		setting_time_ms = (uint32_t)(setting_time_min * 60 *1000);
 1010a12:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
		if ( meter.ed_mode.test_mode.enabled == true ) {
 1010a16:	f892 0024 	ldrb.w	r0, [r2, #36]	; 0x24
		setting_time_ms = (uint32_t)(setting_time_min * 60 *1000);
 1010a1a:	f64e 2360 	movw	r3, #60000	; 0xea60
 1010a1e:	fb03 f301 	mul.w	r3, r3, r1
 1010a22:	931a      	str	r3, [sp, #104]	; 0x68
		meter.ed_mode.test_mode.active_period = (uint32_t)TIMER_ms_to_tic(setting_time_ms);
 1010a24:	991a      	ldr	r1, [sp, #104]	; 0x68
 1010a26:	6291      	str	r1, [r2, #40]	; 0x28
		if ( meter.ed_mode.test_mode.enabled == true ) {
 1010a28:	b128      	cbz	r0, 1010a36 <C1219_st_7_full_write+0x1ea>
			TIMER_start_ms_timer(SM_TEST_MODE_TIMER, meter.ed_mode.test_mode.active_period, SM_APP_vSet_test_mode_expired_flag);
 1010a2a:	4a1b      	ldr	r2, [pc, #108]	; (1010a98 <C1219_st_7_full_write+0x24c>)
 1010a2c:	4b1b      	ldr	r3, [pc, #108]	; (1010a9c <C1219_st_7_full_write+0x250>)
 1010a2e:	2013      	movs	r0, #19
 1010a30:	4798      	blx	r3
 1010a32:	f8b5 9000 	ldrh.w	r9, [r5]
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 1010a36:	6863      	ldr	r3, [r4, #4]
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1010a38:	7839      	ldrb	r1, [r7, #0]
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 1010a3a:	f883 9160 	strb.w	r9, [r3, #352]	; 0x160
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1010a3e:	6863      	ldr	r3, [r4, #4]
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(setting_time_min & 0x00FF);
 1010a40:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(setting_time_min >> 8);
 1010a44:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
		C1218_send_ok(c1219_ptr->c1218_dll);
 1010a48:	4a15      	ldr	r2, [pc, #84]	; (1010aa0 <C1219_st_7_full_write+0x254>)
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1010a4a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 1010a4e:	f883 9161 	strb.w	r9, [r3, #353]	; 0x161
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1010a52:	6863      	ldr	r3, [r4, #4]
 1010a54:	f883 1162 	strb.w	r1, [r3, #354]	; 0x162
		c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 1010a58:	6861      	ldr	r1, [r4, #4]
 1010a5a:	2300      	movs	r3, #0
 1010a5c:	f881 3163 	strb.w	r3, [r1, #355]	; 0x163
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(setting_time_min & 0x00FF);
 1010a60:	6861      	ldr	r1, [r4, #4]
 1010a62:	f881 0164 	strb.w	r0, [r1, #356]	; 0x164
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(setting_time_min >> 8);
 1010a66:	6861      	ldr	r1, [r4, #4]
 1010a68:	f881 3165 	strb.w	r3, [r1, #357]	; 0x165
		c1219_ptr->c1218_dll->st_08_length = k;
 1010a6c:	6863      	ldr	r3, [r4, #4]
 1010a6e:	2106      	movs	r1, #6
 1010a70:	f8a3 11f6 	strh.w	r1, [r3, #502]	; 0x1f6
		C1218_send_ok(c1219_ptr->c1218_dll);
 1010a74:	6860      	ldr	r0, [r4, #4]
 1010a76:	4790      	blx	r2
 1010a78:	e78b      	b.n	1010992 <C1219_st_7_full_write+0x146>
 1010a7a:	bf00      	nop
 1010a7c:	20017160 	.word	0x20017160
 1010a80:	20000954 	.word	0x20000954
 1010a84:	20000956 	.word	0x20000956
 1010a88:	20000930 	.word	0x20000930
 1010a8c:	01016465 	.word	0x01016465
 1010a90:	01016485 	.word	0x01016485
 1010a94:	20016c2c 	.word	0x20016c2c
 1010a98:	010203c1 	.word	0x010203c1
 1010a9c:	0102ba8d 	.word	0x0102ba8d
 1010aa0:	01016445 	.word	0x01016445
 1010aa4:	01019961 	.word	0x01019961
 1010aa8:	0102b465 	.word	0x0102b465
		switch ( proc_id ) {
 1010aac:	f640 037c 	movw	r3, #2172	; 0x87c
 1010ab0:	4599      	cmp	r9, r3
 1010ab2:	f000 81bf 	beq.w	1010e34 <C1219_st_7_full_write+0x5e8>
 1010ab6:	f200 85fd 	bhi.w	10116b4 <C1219_st_7_full_write+0xe68>
	if ( c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + MP_123_PARAMETERS_SIZE) ) {
 1010aba:	6863      	ldr	r3, [r4, #4]
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1010abc:	7839      	ldrb	r1, [r7, #0]
	if ( c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + MP_123_PARAMETERS_SIZE) ) {
 1010abe:	7b9a      	ldrb	r2, [r3, #14]
 1010ac0:	2a0a      	cmp	r2, #10
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 1010ac2:	f04f 027b 	mov.w	r2, #123	; 0x7b
 1010ac6:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1010aca:	6862      	ldr	r2, [r4, #4]
	if ( c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + MP_123_PARAMETERS_SIZE) ) {
 1010acc:	f040 8139 	bne.w	1010d42 <C1219_st_7_full_write+0x4f6>
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1010ad0:	2008      	movs	r0, #8
 1010ad2:	f882 0161 	strb.w	r0, [r2, #353]	; 0x161
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1010ad6:	6862      	ldr	r2, [r4, #4]
		C1218_send_ok(c1219_ptr->c1218_dll);
 1010ad8:	4bac      	ldr	r3, [pc, #688]	; (1010d8c <C1219_st_7_full_write+0x540>)
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1010ada:	f882 1162 	strb.w	r1, [r2, #354]	; 0x162
		c1219_ptr->c1218_dll->st_08_data[k++] = PROC_ACCEPTED_NOT_COMPLETED;
 1010ade:	6862      	ldr	r2, [r4, #4]
 1010ae0:	f8df b340 	ldr.w	fp, [pc, #832]	; 1010e24 <C1219_st_7_full_write+0x5d8>
 1010ae4:	f8df 8340 	ldr.w	r8, [pc, #832]	; 1010e28 <C1219_st_7_full_write+0x5dc>
 1010ae8:	f8df 9340 	ldr.w	r9, [pc, #832]	; 1010e2c <C1219_st_7_full_write+0x5e0>
 1010aec:	4ea8      	ldr	r6, [pc, #672]	; (1010d90 <C1219_st_7_full_write+0x544>)
 1010aee:	2101      	movs	r1, #1
 1010af0:	f882 1163 	strb.w	r1, [r2, #355]	; 0x163
		c1219_ptr->c1218_dll->st_08_length = k;
 1010af4:	6862      	ldr	r2, [r4, #4]
 1010af6:	2104      	movs	r1, #4
 1010af8:	f8a2 11f6 	strh.w	r1, [r2, #502]	; 0x1f6
		C1218_send_ok(c1219_ptr->c1218_dll);
 1010afc:	6860      	ldr	r0, [r4, #4]
 1010afe:	4798      	blx	r3
		uint8_t backup_area_id  = c1219_ptr->c1218_dll->rx_data[PROCEDURE_PARAMETER_INDEX];
 1010b00:	6862      	ldr	r2, [r4, #4]
		memset( &backup_result, 0, sizeof(backup_result) );
 1010b02:	4ba4      	ldr	r3, [pc, #656]	; (1010d94 <C1219_st_7_full_write+0x548>)
		uint8_t backup_area_id  = c1219_ptr->c1218_dll->rx_data[PROCEDURE_PARAMETER_INDEX];
 1010b04:	f8d2 e008 	ldr.w	lr, [r2, #8]
		memset( &backup_result, 0, sizeof(backup_result) );
 1010b08:	aa12      	add	r2, sp, #72	; 0x48
		uint8_t backup_area_id  = c1219_ptr->c1218_dll->rx_data[PROCEDURE_PARAMETER_INDEX];
 1010b0a:	f89e a008 	ldrb.w	sl, [lr, #8]
		memset( &backup_result, 0, sizeof(backup_result) );
 1010b0e:	9208      	str	r2, [sp, #32]
 1010b10:	4610      	mov	r0, r2
 1010b12:	2100      	movs	r1, #0
 1010b14:	221e      	movs	r2, #30
 1010b16:	4798      	blx	r3
		back_up_function[j++] = SM_APP_bBack_up_st_1;
 1010b18:	4b9f      	ldr	r3, [pc, #636]	; (1010d98 <C1219_st_7_full_write+0x54c>)
		back_up_function[j++] = SM_APP_bBack_up_st_6;
 1010b1a:	4aa0      	ldr	r2, [pc, #640]	; (1010d9c <C1219_st_7_full_write+0x550>)
 1010b1c:	921b      	str	r2, [sp, #108]	; 0x6c
 1010b1e:	fa1f f18a 	uxth.w	r1, sl
		back_up_function[j++] = SM_APP_bBack_up_st_21;
 1010b22:	4a9f      	ldr	r2, [pc, #636]	; (1010da0 <C1219_st_7_full_write+0x554>)
		back_up_function[j++] = SM_APP_bBack_up_st_1;
 1010b24:	931a      	str	r3, [sp, #104]	; 0x68
 1010b26:	9104      	str	r1, [sp, #16]
		back_up_function[j++] = SM_APP_bBack_up_mt_73;
 1010b28:	469a      	mov	sl, r3
 1010b2a:	9908      	ldr	r1, [sp, #32]
		back_up_function[j++] = SM_APP_bBack_up_st_22;
 1010b2c:	4b9d      	ldr	r3, [pc, #628]	; (1010da4 <C1219_st_7_full_write+0x558>)
		back_up_function[j++] = SM_APP_bBack_up_st_21;
 1010b2e:	921e      	str	r2, [sp, #120]	; 0x78
		back_up_function[j++] = SM_APP_bBack_up_st_41;
 1010b30:	4a9d      	ldr	r2, [pc, #628]	; (1010da8 <C1219_st_7_full_write+0x55c>)
 1010b32:	9105      	str	r1, [sp, #20]
		back_up_function[j++] = SM_APP_bBack_up_st_22;
 1010b34:	931f      	str	r3, [sp, #124]	; 0x7c
		back_up_function[j++] = SM_APP_bBack_up_st_27;
 1010b36:	499d      	ldr	r1, [pc, #628]	; (1010dac <C1219_st_7_full_write+0x560>)
		back_up_function[j++] = SM_APP_bBack_up_st_42;
 1010b38:	4b9d      	ldr	r3, [pc, #628]	; (1010db0 <C1219_st_7_full_write+0x564>)
		back_up_function[j++] = SM_APP_bBack_up_st_41;
 1010b3a:	9221      	str	r2, [sp, #132]	; 0x84
		back_up_function[j++] = SM_APP_bBack_up_st_44;
 1010b3c:	4a9d      	ldr	r2, [pc, #628]	; (1010db4 <C1219_st_7_full_write+0x568>)
		back_up_function[j++] = SM_APP_bBack_up_st_27;
 1010b3e:	9120      	str	r1, [sp, #128]	; 0x80
		back_up_function[j++] = SM_APP_bBack_up_st_42;
 1010b40:	9322      	str	r3, [sp, #136]	; 0x88
		back_up_function[j++] = SM_APP_bBack_up_st_43;
 1010b42:	499d      	ldr	r1, [pc, #628]	; (1010db8 <C1219_st_7_full_write+0x56c>)
		back_up_function[j++] = SM_APP_bBack_up_st_51;
 1010b44:	4b9d      	ldr	r3, [pc, #628]	; (1010dbc <C1219_st_7_full_write+0x570>)
		back_up_function[j++] = SM_APP_bBack_up_st_44;
 1010b46:	9224      	str	r2, [sp, #144]	; 0x90
		back_up_function[j++] = SM_APP_bBack_up_st_54;
 1010b48:	4a9d      	ldr	r2, [pc, #628]	; (1010dc0 <C1219_st_7_full_write+0x574>)
		back_up_function[j++] = SM_APP_bBack_up_st_43;
 1010b4a:	9123      	str	r1, [sp, #140]	; 0x8c
		back_up_function[j++] = SM_APP_bBack_up_st_51;
 1010b4c:	9325      	str	r3, [sp, #148]	; 0x94
		back_up_function[j++] = SM_APP_bBack_up_st_53;
 1010b4e:	499d      	ldr	r1, [pc, #628]	; (1010dc4 <C1219_st_7_full_write+0x578>)
		back_up_function[j++] = SM_APP_bBack_up_st_61;
 1010b50:	4b9d      	ldr	r3, [pc, #628]	; (1010dc8 <C1219_st_7_full_write+0x57c>)
		back_up_function[j++] = SM_APP_bBack_up_st_54;
 1010b52:	9227      	str	r2, [sp, #156]	; 0x9c
		back_up_function[j++] = SM_APP_bBack_up_st_71;
 1010b54:	4a9d      	ldr	r2, [pc, #628]	; (1010dcc <C1219_st_7_full_write+0x580>)
		back_up_function[j++] = SM_APP_bBack_up_st_53;
 1010b56:	9126      	str	r1, [sp, #152]	; 0x98
		back_up_function[j++] = SM_APP_bBack_up_st_61;
 1010b58:	9328      	str	r3, [sp, #160]	; 0xa0
		back_up_function[j++] = SM_APP_bBack_up_st_62;
 1010b5a:	499d      	ldr	r1, [pc, #628]	; (1010dd0 <C1219_st_7_full_write+0x584>)
		back_up_function[j++] = SM_APP_bBack_up_st_73;
 1010b5c:	4b9d      	ldr	r3, [pc, #628]	; (1010dd4 <C1219_st_7_full_write+0x588>)
		back_up_function[j++] = SM_APP_bBack_up_st_71;
 1010b5e:	922a      	str	r2, [sp, #168]	; 0xa8
		back_up_function[j++] = SM_APP_bBack_up_mt_1;
 1010b60:	4a9d      	ldr	r2, [pc, #628]	; (1010dd8 <C1219_st_7_full_write+0x58c>)
		back_up_function[j++] = SM_APP_bBack_up_st_62;
 1010b62:	9129      	str	r1, [sp, #164]	; 0xa4
		back_up_function[j++] = SM_APP_bBack_up_st_73;
 1010b64:	932b      	str	r3, [sp, #172]	; 0xac
		back_up_function[j++] = SM_APP_bBack_up_st_75;
 1010b66:	499d      	ldr	r1, [pc, #628]	; (1010ddc <C1219_st_7_full_write+0x590>)
		back_up_function[j++] = SM_APP_bBack_up_mt_3;
 1010b68:	4b9d      	ldr	r3, [pc, #628]	; (1010de0 <C1219_st_7_full_write+0x594>)
		back_up_function[j++] = SM_APP_bBack_up_mt_1;
 1010b6a:	922d      	str	r2, [sp, #180]	; 0xb4
		back_up_function[j++] = SM_APP_bBack_up_mt_53;
 1010b6c:	4a9d      	ldr	r2, [pc, #628]	; (1010de4 <C1219_st_7_full_write+0x598>)
		back_up_function[j++] = SM_APP_bBack_up_st_11;
 1010b6e:	489e      	ldr	r0, [pc, #632]	; (1010de8 <C1219_st_7_full_write+0x59c>)
		back_up_function[j++] = SM_APP_bBack_up_st_13;
 1010b70:	f8df e2bc 	ldr.w	lr, [pc, #700]	; 1010e30 <C1219_st_7_full_write+0x5e4>
		back_up_function[j++] = SM_APP_bBack_up_st_75;
 1010b74:	912c      	str	r1, [sp, #176]	; 0xb0
		back_up_function[j++] = SM_APP_bBack_up_mt_3;
 1010b76:	932e      	str	r3, [sp, #184]	; 0xb8
		back_up_function[j++] = SM_APP_bBack_up_mt_23;
 1010b78:	499c      	ldr	r1, [pc, #624]	; (1010dec <C1219_st_7_full_write+0x5a0>)
		back_up_function[j++] = SM_APP_bBack_up_mt_73;
 1010b7a:	4b9d      	ldr	r3, [pc, #628]	; (1010df0 <C1219_st_7_full_write+0x5a4>)
		back_up_function[j++] = SM_APP_bBack_up_mt_53;
 1010b7c:	9230      	str	r2, [sp, #192]	; 0xc0
 1010b7e:	aa1a      	add	r2, sp, #104	; 0x68
 1010b80:	9409      	str	r4, [sp, #36]	; 0x24
		back_up_function[j++] = SM_APP_bBack_up_st_11;
 1010b82:	901c      	str	r0, [sp, #112]	; 0x70
 1010b84:	9c05      	ldr	r4, [sp, #20]
		back_up_function[j++] = SM_APP_bBack_up_st_13;
 1010b86:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
 1010b8a:	f8cd b014 	str.w	fp, [sp, #20]
		back_up_function[j++] = SM_APP_bBack_up_mt_23;
 1010b8e:	912f      	str	r1, [sp, #188]	; 0xbc
		back_up_function[j++] = SM_APP_bBack_up_mt_73;
 1010b90:	9331      	str	r3, [sp, #196]	; 0xc4
 1010b92:	4693      	mov	fp, r2
 1010b94:	f8cd 9018 	str.w	r9, [sp, #24]
 1010b98:	f8cd 801c 	str.w	r8, [sp, #28]
void C1219_st_7_full_write(C1219_TYPE *c1219_ptr) {
 1010b9c:	f04f 0803 	mov.w	r8, #3
				backup_ok = back_up_function[i](backup_area_id);
 1010ba0:	9804      	ldr	r0, [sp, #16]
 1010ba2:	47d0      	blx	sl
				NIC_task();
 1010ba4:	9b06      	ldr	r3, [sp, #24]
				backup_result[i] = backup_ok ? 1 : 0;
 1010ba6:	7020      	strb	r0, [r4, #0]
				backup_ok = back_up_function[i](backup_area_id);
 1010ba8:	4681      	mov	r9, r0
				NIC_task();
 1010baa:	4798      	blx	r3
				WATCHDOG_APP_vRestart();
 1010bac:	47b0      	blx	r6
				OP_task();
 1010bae:	9b05      	ldr	r3, [sp, #20]
 1010bb0:	4798      	blx	r3
				WATCHDOG_APP_vRestart();
 1010bb2:	47b0      	blx	r6
				PFAIL_APP_vTask();
 1010bb4:	9b07      	ldr	r3, [sp, #28]
 1010bb6:	4798      	blx	r3
				WATCHDOG_APP_vRestart();
 1010bb8:	47b0      	blx	r6
 1010bba:	f108 33ff 	add.w	r3, r8, #4294967295
			while( (!backup_ok) && (current_tries < 3) ) {
 1010bbe:	f1b9 0f00 	cmp.w	r9, #0
 1010bc2:	d102      	bne.n	1010bca <C1219_st_7_full_write+0x37e>
 1010bc4:	f013 08ff 	ands.w	r8, r3, #255	; 0xff
 1010bc8:	d1ea      	bne.n	1010ba0 <C1219_st_7_full_write+0x354>
		for ( uint8_t i = 0; i < j; i++) {
 1010bca:	ab31      	add	r3, sp, #196	; 0xc4
 1010bcc:	459b      	cmp	fp, r3
 1010bce:	f104 0401 	add.w	r4, r4, #1
 1010bd2:	f000 8747 	beq.w	1011a64 <C1219_st_7_full_write+0x1218>
 1010bd6:	f85b af04 	ldr.w	sl, [fp, #4]!
 1010bda:	e7df      	b.n	1010b9c <C1219_st_7_full_write+0x350>
		switch ( proc_id ) {
 1010bdc:	f1b9 0f07 	cmp.w	r9, #7
 1010be0:	f000 8240 	beq.w	1011064 <C1219_st_7_full_write+0x818>
 1010be4:	f200 8277 	bhi.w	10110d6 <C1219_st_7_full_write+0x88a>
	if (c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + SP_6_PARAMETERS_SIZE)) {
 1010be8:	6863      	ldr	r3, [r4, #4]
 1010bea:	7b9a      	ldrb	r2, [r3, #14]
 1010bec:	2a0a      	cmp	r2, #10
 1010bee:	f47f aed0 	bne.w	1010992 <C1219_st_7_full_write+0x146>
		if (((uint8_t)(c1219_ptr->c1218_dll->rx_data[8])> 0) && (((uint8_t)(c1219_ptr->c1218_dll->rx_data[8])< 15))) {
 1010bf2:	689a      	ldr	r2, [r3, #8]
 1010bf4:	7a16      	ldrb	r6, [r2, #8]
 1010bf6:	1e72      	subs	r2, r6, #1
 1010bf8:	b2d2      	uxtb	r2, r2
 1010bfa:	2a0d      	cmp	r2, #13
 1010bfc:	f201 808b 	bhi.w	1011d16 <C1219_st_7_full_write+0x14ca>
			if ( (ed_mode_temp == METERING_FLAG_bm) || (ed_mode_temp == TEST_MODE_FLAG_bm) ){
 1010c00:	2a01      	cmp	r2, #1
 1010c02:	f201 8088 	bhi.w	1011d16 <C1219_st_7_full_write+0x14ca>
				if ( ed_mode_temp == METERING_FLAG_bm ) {
 1010c06:	2e01      	cmp	r6, #1
					GRAL_APP_bEnable_metering_mode(c1219_ptr->c1218_apl.user_id, c1219_ptr->c1218_dll->uart);
 1010c08:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 1010c0c:	8960      	ldrh	r0, [r4, #10]
				if ( ed_mode_temp == METERING_FLAG_bm ) {
 1010c0e:	f001 8562 	beq.w	10126d6 <C1219_st_7_full_write+0x1e8a>
					GRAL_APP_bEnable_test_mode(c1219_ptr->c1218_apl.user_id, c1219_ptr->c1218_dll->uart);
 1010c12:	4b78      	ldr	r3, [pc, #480]	; (1010df4 <C1219_st_7_full_write+0x5a8>)
 1010c14:	4798      	blx	r3
				c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 1010c16:	6862      	ldr	r2, [r4, #4]
 1010c18:	882b      	ldrh	r3, [r5, #0]
 1010c1a:	f882 3160 	strb.w	r3, [r2, #352]	; 0x160
				c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1010c1e:	6860      	ldr	r0, [r4, #4]
				c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1010c20:	7839      	ldrb	r1, [r7, #0]
				C1218_send_ok(c1219_ptr->c1218_dll);
 1010c22:	4a5a      	ldr	r2, [pc, #360]	; (1010d8c <C1219_st_7_full_write+0x540>)
				c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1010c24:	0a1b      	lsrs	r3, r3, #8
 1010c26:	f880 3161 	strb.w	r3, [r0, #353]	; 0x161
				c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1010c2a:	6863      	ldr	r3, [r4, #4]
 1010c2c:	f883 1162 	strb.w	r1, [r3, #354]	; 0x162
				c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 1010c30:	6863      	ldr	r3, [r4, #4]
 1010c32:	2100      	movs	r1, #0
 1010c34:	f883 1163 	strb.w	r1, [r3, #355]	; 0x163
				c1219_ptr->c1218_dll->st_08_data[k++] = ed_mode_temp;
 1010c38:	6863      	ldr	r3, [r4, #4]
 1010c3a:	f883 6164 	strb.w	r6, [r3, #356]	; 0x164
		c1219_ptr->c1218_dll->st_08_length = k;
 1010c3e:	6863      	ldr	r3, [r4, #4]
 1010c40:	2105      	movs	r1, #5
 1010c42:	f8a3 11f6 	strh.w	r1, [r3, #502]	; 0x1f6
		C1218_send_ok(c1219_ptr->c1218_dll);
 1010c46:	6860      	ldr	r0, [r4, #4]
 1010c48:	4790      	blx	r2
 1010c4a:	e6a2      	b.n	1010992 <C1219_st_7_full_write+0x146>
		switch ( proc_id ) {
 1010c4c:	f640 0378 	movw	r3, #2168	; 0x878
 1010c50:	4599      	cmp	r9, r3
 1010c52:	f000 81ae 	beq.w	1010fb2 <C1219_st_7_full_write+0x766>
 1010c56:	f200 82d6 	bhi.w	1011206 <C1219_st_7_full_write+0x9ba>
 1010c5a:	f640 0371 	movw	r3, #2161	; 0x871
 1010c5e:	4599      	cmp	r9, r3
 1010c60:	f040 820d 	bne.w	101107e <C1219_st_7_full_write+0x832>
	if ( c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + MP_113_PARAMETERS_SIZE) ) {
 1010c64:	6863      	ldr	r3, [r4, #4]
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1010c66:	7839      	ldrb	r1, [r7, #0]
	if ( c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + MP_113_PARAMETERS_SIZE) ) {
 1010c68:	7b9a      	ldrb	r2, [r3, #14]
 1010c6a:	2a09      	cmp	r2, #9
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 1010c6c:	f04f 0271 	mov.w	r2, #113	; 0x71
 1010c70:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1010c74:	6862      	ldr	r2, [r4, #4]
	if ( c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + MP_113_PARAMETERS_SIZE) ) {
 1010c76:	d164      	bne.n	1010d42 <C1219_st_7_full_write+0x4f6>
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1010c78:	2008      	movs	r0, #8
 1010c7a:	f882 0161 	strb.w	r0, [r2, #353]	; 0x161
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1010c7e:	6862      	ldr	r2, [r4, #4]
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bWrite_cal_m_ia(0x20000000);
 1010c80:	4b5d      	ldr	r3, [pc, #372]	; (1010df8 <C1219_st_7_full_write+0x5ac>)
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1010c82:	f882 1162 	strb.w	r1, [r2, #354]	; 0x162
		c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 1010c86:	6862      	ldr	r2, [r4, #4]
 1010c88:	2500      	movs	r5, #0
 1010c8a:	f882 5163 	strb.w	r5, [r2, #355]	; 0x163
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bWrite_cal_m_ia(0x20000000);
 1010c8e:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 1010c92:	6866      	ldr	r6, [r4, #4]
 1010c94:	4798      	blx	r3
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bWrite_cal_m_va(0x20000000);
 1010c96:	4b59      	ldr	r3, [pc, #356]	; (1010dfc <C1219_st_7_full_write+0x5b0>)
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bWrite_cal_m_ia(0x20000000);
 1010c98:	f886 0164 	strb.w	r0, [r6, #356]	; 0x164
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bWrite_cal_m_va(0x20000000);
 1010c9c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 1010ca0:	6866      	ldr	r6, [r4, #4]
 1010ca2:	4798      	blx	r3
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bWrite_cal_ph_ia(0);
 1010ca4:	4b56      	ldr	r3, [pc, #344]	; (1010e00 <C1219_st_7_full_write+0x5b4>)
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bWrite_cal_m_va(0x20000000);
 1010ca6:	f886 0165 	strb.w	r0, [r6, #357]	; 0x165
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bWrite_cal_ph_ia(0);
 1010caa:	4628      	mov	r0, r5
 1010cac:	6866      	ldr	r6, [r4, #4]
 1010cae:	4798      	blx	r3
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bWrite_cal_m_ib(0x20000000);
 1010cb0:	4b54      	ldr	r3, [pc, #336]	; (1010e04 <C1219_st_7_full_write+0x5b8>)
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bWrite_cal_ph_ia(0);
 1010cb2:	f886 0166 	strb.w	r0, [r6, #358]	; 0x166
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bWrite_cal_m_ib(0x20000000);
 1010cb6:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 1010cba:	6866      	ldr	r6, [r4, #4]
 1010cbc:	4798      	blx	r3
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bWrite_cal_m_vb(0x20000000);
 1010cbe:	4b52      	ldr	r3, [pc, #328]	; (1010e08 <C1219_st_7_full_write+0x5bc>)
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bWrite_cal_m_ib(0x20000000);
 1010cc0:	f886 0167 	strb.w	r0, [r6, #359]	; 0x167
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bWrite_cal_m_vb(0x20000000);
 1010cc4:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 1010cc8:	6866      	ldr	r6, [r4, #4]
 1010cca:	4798      	blx	r3
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bWrite_cal_ph_ib(0);
 1010ccc:	4b4f      	ldr	r3, [pc, #316]	; (1010e0c <C1219_st_7_full_write+0x5c0>)
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bWrite_cal_m_vb(0x20000000);
 1010cce:	f886 0168 	strb.w	r0, [r6, #360]	; 0x168
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bWrite_cal_ph_ib(0);
 1010cd2:	4628      	mov	r0, r5
 1010cd4:	6866      	ldr	r6, [r4, #4]
 1010cd6:	4798      	blx	r3
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bWrite_cal_m_ic(0x20000000);
 1010cd8:	4b4d      	ldr	r3, [pc, #308]	; (1010e10 <C1219_st_7_full_write+0x5c4>)
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bWrite_cal_ph_ib(0);
 1010cda:	f886 0169 	strb.w	r0, [r6, #361]	; 0x169
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bWrite_cal_m_ic(0x20000000);
 1010cde:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 1010ce2:	6866      	ldr	r6, [r4, #4]
 1010ce4:	4798      	blx	r3
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bWrite_cal_m_vc(0x20000000);
 1010ce6:	4b4b      	ldr	r3, [pc, #300]	; (1010e14 <C1219_st_7_full_write+0x5c8>)
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bWrite_cal_m_ic(0x20000000);
 1010ce8:	f886 016a 	strb.w	r0, [r6, #362]	; 0x16a
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bWrite_cal_m_vc(0x20000000);
 1010cec:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 1010cf0:	6866      	ldr	r6, [r4, #4]
 1010cf2:	4798      	blx	r3
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bWrite_cal_ph_ic(0);
 1010cf4:	4b48      	ldr	r3, [pc, #288]	; (1010e18 <C1219_st_7_full_write+0x5cc>)
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bWrite_cal_m_vc(0x20000000);
 1010cf6:	f886 016b 	strb.w	r0, [r6, #363]	; 0x16b
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bWrite_cal_ph_ic(0);
 1010cfa:	4628      	mov	r0, r5
 1010cfc:	6865      	ldr	r5, [r4, #4]
 1010cfe:	4798      	blx	r3
 1010d00:	f885 016c 	strb.w	r0, [r5, #364]	; 0x16c
		c1219_ptr->c1218_dll->st_08_length = k;
 1010d04:	6862      	ldr	r2, [r4, #4]
		C1218_send_ok(c1219_ptr->c1218_dll);	
 1010d06:	4b21      	ldr	r3, [pc, #132]	; (1010d8c <C1219_st_7_full_write+0x540>)
		c1219_ptr->c1218_dll->st_08_length = k;
 1010d08:	210d      	movs	r1, #13
 1010d0a:	f8a2 11f6 	strh.w	r1, [r2, #502]	; 0x1f6
		C1218_send_ok(c1219_ptr->c1218_dll);	
 1010d0e:	6860      	ldr	r0, [r4, #4]
 1010d10:	4798      	blx	r3
 1010d12:	e63e      	b.n	1010992 <C1219_st_7_full_write+0x146>
		switch ( proc_id ) {
 1010d14:	f640 0365 	movw	r3, #2149	; 0x865
 1010d18:	4599      	cmp	r9, r3
 1010d1a:	f000 819c 	beq.w	1011056 <C1219_st_7_full_write+0x80a>
 1010d1e:	f200 81b2 	bhi.w	1011086 <C1219_st_7_full_write+0x83a>
 1010d22:	f640 0364 	movw	r3, #2148	; 0x864
 1010d26:	4599      	cmp	r9, r3
 1010d28:	f040 81a9 	bne.w	101107e <C1219_st_7_full_write+0x832>
	if ( c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + MP_100_PARAMETERS_SIZE)) {
 1010d2c:	6863      	ldr	r3, [r4, #4]
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1010d2e:	7839      	ldrb	r1, [r7, #0]
	if ( c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + MP_100_PARAMETERS_SIZE)) {
 1010d30:	7b9a      	ldrb	r2, [r3, #14]
 1010d32:	2a09      	cmp	r2, #9
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 1010d34:	f04f 0264 	mov.w	r2, #100	; 0x64
 1010d38:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1010d3c:	6862      	ldr	r2, [r4, #4]
	if ( c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + MP_100_PARAMETERS_SIZE)) {
 1010d3e:	f001 8000 	beq.w	1011d42 <C1219_st_7_full_write+0x14f6>
		c1219_ptr->c1218_dll->st_08_data[k++] = INVALID_PARAMETER;
		c1219_ptr->c1218_dll->st_08_length = k;
		
		C1218_send_err(c1219_ptr->c1218_dll);
 1010d42:	4b36      	ldr	r3, [pc, #216]	; (1010e1c <C1219_st_7_full_write+0x5d0>)
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1010d44:	2008      	movs	r0, #8
 1010d46:	f882 0161 	strb.w	r0, [r2, #353]	; 0x161
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1010d4a:	6862      	ldr	r2, [r4, #4]
 1010d4c:	f882 1162 	strb.w	r1, [r2, #354]	; 0x162
		c1219_ptr->c1218_dll->st_08_data[k++] = INVALID_PARAMETER;
 1010d50:	6862      	ldr	r2, [r4, #4]
 1010d52:	2102      	movs	r1, #2
 1010d54:	f882 1163 	strb.w	r1, [r2, #355]	; 0x163
		c1219_ptr->c1218_dll->st_08_length = k;
 1010d58:	6862      	ldr	r2, [r4, #4]
 1010d5a:	2104      	movs	r1, #4
 1010d5c:	f8a2 11f6 	strh.w	r1, [r2, #502]	; 0x1f6
		C1218_send_err(c1219_ptr->c1218_dll);
 1010d60:	6860      	ldr	r0, [r4, #4]
 1010d62:	4798      	blx	r3
}
 1010d64:	b039      	add	sp, #228	; 0xe4
 1010d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switch ( proc_id ) {
 1010d6a:	f640 0382 	movw	r3, #2178	; 0x882
 1010d6e:	4599      	cmp	r9, r3
 1010d70:	f040 8185 	bne.w	101107e <C1219_st_7_full_write+0x832>
	if ( c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + MP_130_PARAMETERS_SIZE ) ) {
 1010d74:	6863      	ldr	r3, [r4, #4]
 1010d76:	7b9a      	ldrb	r2, [r3, #14]
 1010d78:	2a09      	cmp	r2, #9
 1010d7a:	f000 87f7 	beq.w	1011d6c <C1219_st_7_full_write+0x1520>
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 1010d7e:	2282      	movs	r2, #130	; 0x82
 1010d80:	e622      	b.n	10109c8 <C1219_st_7_full_write+0x17c>
				C1219_mp_110_execute(c1219_ptr);
 1010d82:	1d20      	adds	r0, r4, #4
 1010d84:	4b26      	ldr	r3, [pc, #152]	; (1010e20 <C1219_st_7_full_write+0x5d4>)
 1010d86:	4798      	blx	r3
				break;
 1010d88:	e603      	b.n	1010992 <C1219_st_7_full_write+0x146>
 1010d8a:	bf00      	nop
 1010d8c:	01016445 	.word	0x01016445
 1010d90:	0101603d 	.word	0x0101603d
 1010d94:	01030b71 	.word	0x01030b71
 1010d98:	01021c41 	.word	0x01021c41
 1010d9c:	01021dc9 	.word	0x01021dc9
 1010da0:	0102223d 	.word	0x0102223d
 1010da4:	010223d1 	.word	0x010223d1
 1010da8:	010226f9 	.word	0x010226f9
 1010dac:	01022565 	.word	0x01022565
 1010db0:	0102288d 	.word	0x0102288d
 1010db4:	01022bb5 	.word	0x01022bb5
 1010db8:	01022a21 	.word	0x01022a21
 1010dbc:	01022d49 	.word	0x01022d49
 1010dc0:	01023065 	.word	0x01023065
 1010dc4:	01022edd 	.word	0x01022edd
 1010dc8:	010231ed 	.word	0x010231ed
 1010dcc:	01023515 	.word	0x01023515
 1010dd0:	01023381 	.word	0x01023381
 1010dd4:	010236a9 	.word	0x010236a9
 1010dd8:	010239d1 	.word	0x010239d1
 1010ddc:	0102383d 	.word	0x0102383d
 1010de0:	01023b31 	.word	0x01023b31
 1010de4:	01023e0d 	.word	0x01023e0d
 1010de8:	01021f51 	.word	0x01021f51
 1010dec:	01023ca5 	.word	0x01023ca5
 1010df0:	01023f81 	.word	0x01023f81
 1010df4:	0101a07d 	.word	0x0101a07d
 1010df8:	0101d8b1 	.word	0x0101d8b1
 1010dfc:	0101d959 	.word	0x0101d959
 1010e00:	0101da05 	.word	0x0101da05
 1010e04:	0101dcb5 	.word	0x0101dcb5
 1010e08:	0101dd61 	.word	0x0101dd61
 1010e0c:	0101de0d 	.word	0x0101de0d
 1010e10:	0101e0c1 	.word	0x0101e0c1
 1010e14:	0101e16d 	.word	0x0101e16d
 1010e18:	0101e219 	.word	0x0101e219
 1010e1c:	01016465 	.word	0x01016465
 1010e20:	01010595 	.word	0x01010595
 1010e24:	010244c1 	.word	0x010244c1
 1010e28:	01025bf1 	.word	0x01025bf1
 1010e2c:	01024d05 	.word	0x01024d05
 1010e30:	010220e5 	.word	0x010220e5
	if ( c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + MP_124_PARAMETERS_SIZE) ) {
 1010e34:	6863      	ldr	r3, [r4, #4]
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1010e36:	7839      	ldrb	r1, [r7, #0]
	if ( c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + MP_124_PARAMETERS_SIZE) ) {
 1010e38:	7b9a      	ldrb	r2, [r3, #14]
 1010e3a:	2a0a      	cmp	r2, #10
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 1010e3c:	f04f 027c 	mov.w	r2, #124	; 0x7c
 1010e40:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1010e44:	6862      	ldr	r2, [r4, #4]
	if ( c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + MP_124_PARAMETERS_SIZE) ) {
 1010e46:	f47f af7c 	bne.w	1010d42 <C1219_st_7_full_write+0x4f6>
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1010e4a:	2008      	movs	r0, #8
 1010e4c:	f882 0161 	strb.w	r0, [r2, #353]	; 0x161
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1010e50:	6862      	ldr	r2, [r4, #4]
		C1218_send_ok(c1219_ptr->c1218_dll);
 1010e52:	4ba4      	ldr	r3, [pc, #656]	; (10110e4 <C1219_st_7_full_write+0x898>)
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1010e54:	f882 1162 	strb.w	r1, [r2, #354]	; 0x162
		c1219_ptr->c1218_dll->st_08_data[k++] = PROC_ACCEPTED_NOT_COMPLETED;
 1010e58:	6862      	ldr	r2, [r4, #4]
 1010e5a:	f8df b308 	ldr.w	fp, [pc, #776]	; 1011164 <C1219_st_7_full_write+0x918>
 1010e5e:	f8df 8308 	ldr.w	r8, [pc, #776]	; 1011168 <C1219_st_7_full_write+0x91c>
 1010e62:	f8df 9308 	ldr.w	r9, [pc, #776]	; 101116c <C1219_st_7_full_write+0x920>
 1010e66:	4ea0      	ldr	r6, [pc, #640]	; (10110e8 <C1219_st_7_full_write+0x89c>)
 1010e68:	f04f 0101 	mov.w	r1, #1
 1010e6c:	f882 1163 	strb.w	r1, [r2, #355]	; 0x163
		c1219_ptr->c1218_dll->st_08_length = k;		
 1010e70:	6862      	ldr	r2, [r4, #4]
 1010e72:	2104      	movs	r1, #4
 1010e74:	f8a2 11f6 	strh.w	r1, [r2, #502]	; 0x1f6
		C1218_send_ok(c1219_ptr->c1218_dll);
 1010e78:	6860      	ldr	r0, [r4, #4]
 1010e7a:	4798      	blx	r3
		uint8_t backup_area_id  = c1219_ptr->c1218_dll->rx_data[PROCEDURE_PARAMETER_INDEX];
 1010e7c:	6862      	ldr	r2, [r4, #4]
		memset( &backup_result, 0, sizeof(backup_result) );
 1010e7e:	4b9b      	ldr	r3, [pc, #620]	; (10110ec <C1219_st_7_full_write+0x8a0>)
		uint8_t backup_area_id  = c1219_ptr->c1218_dll->rx_data[PROCEDURE_PARAMETER_INDEX];
 1010e80:	f8d2 e008 	ldr.w	lr, [r2, #8]
		memset( &backup_result, 0, sizeof(backup_result) );
 1010e84:	aa12      	add	r2, sp, #72	; 0x48
 1010e86:	4651      	mov	r1, sl
 1010e88:	9208      	str	r2, [sp, #32]
 1010e8a:	4610      	mov	r0, r2
 1010e8c:	221e      	movs	r2, #30
		uint8_t backup_area_id  = c1219_ptr->c1218_dll->rx_data[PROCEDURE_PARAMETER_INDEX];
 1010e8e:	f89e a008 	ldrb.w	sl, [lr, #8]
		memset( &backup_result, 0, sizeof(backup_result) );
 1010e92:	4798      	blx	r3
		meter.system_state.changing_configuration = true;
 1010e94:	4996      	ldr	r1, [pc, #600]	; (10110f0 <C1219_st_7_full_write+0x8a4>)
		restore_function[j++] = SM_APP_bRestore_st_1_from_backup;
 1010e96:	4b97      	ldr	r3, [pc, #604]	; (10110f4 <C1219_st_7_full_write+0x8a8>)
		restore_function[j++] = SM_APP_bRestore_st_6_from_backup;
 1010e98:	4a97      	ldr	r2, [pc, #604]	; (10110f8 <C1219_st_7_full_write+0x8ac>)
 1010e9a:	921b      	str	r2, [sp, #108]	; 0x6c
		meter.system_state.changing_configuration = true;
 1010e9c:	f04f 0e01 	mov.w	lr, #1
 1010ea0:	f881 e022 	strb.w	lr, [r1, #34]	; 0x22
		restore_function[j++] = SM_APP_bRestore_st_21_from_backup;
 1010ea4:	4a95      	ldr	r2, [pc, #596]	; (10110fc <C1219_st_7_full_write+0x8b0>)
		restore_function[j++] = SM_APP_bRestore_st_1_from_backup;
 1010ea6:	931a      	str	r3, [sp, #104]	; 0x68
 1010ea8:	fa1f f18a 	uxth.w	r1, sl
 1010eac:	9107      	str	r1, [sp, #28]
		restore_function[j++] = SM_APP_bRestore_st_21_from_backup;
 1010eae:	921e      	str	r2, [sp, #120]	; 0x78
 1010eb0:	9908      	ldr	r1, [sp, #32]
		restore_function[j++] = SM_APP_bRestore_st_41_from_backup;
 1010eb2:	4a93      	ldr	r2, [pc, #588]	; (1011100 <C1219_st_7_full_write+0x8b4>)
 1010eb4:	9104      	str	r1, [sp, #16]
		restore_function[j++] = SM_APP_bRestore_mt_73_from_backup;
 1010eb6:	469a      	mov	sl, r3
		restore_function[j++] = SM_APP_bRestore_st_22_from_backup;
 1010eb8:	4b92      	ldr	r3, [pc, #584]	; (1011104 <C1219_st_7_full_write+0x8b8>)
		restore_function[j++] = SM_APP_bRestore_st_27_from_backup;
 1010eba:	4993      	ldr	r1, [pc, #588]	; (1011108 <C1219_st_7_full_write+0x8bc>)
		restore_function[j++] = SM_APP_bRestore_st_22_from_backup;
 1010ebc:	931f      	str	r3, [sp, #124]	; 0x7c
		restore_function[j++] = SM_APP_bRestore_st_41_from_backup;
 1010ebe:	9221      	str	r2, [sp, #132]	; 0x84
		restore_function[j++] = SM_APP_bRestore_st_42_from_backup;
 1010ec0:	4b92      	ldr	r3, [pc, #584]	; (101110c <C1219_st_7_full_write+0x8c0>)
		restore_function[j++] = SM_APP_bRestore_st_44_from_backup;
 1010ec2:	4a93      	ldr	r2, [pc, #588]	; (1011110 <C1219_st_7_full_write+0x8c4>)
		restore_function[j++] = SM_APP_bRestore_st_27_from_backup;
 1010ec4:	9120      	str	r1, [sp, #128]	; 0x80
		restore_function[j++] = SM_APP_bRestore_st_42_from_backup;
 1010ec6:	9322      	str	r3, [sp, #136]	; 0x88
		restore_function[j++] = SM_APP_bRestore_st_43_from_backup;
 1010ec8:	4992      	ldr	r1, [pc, #584]	; (1011114 <C1219_st_7_full_write+0x8c8>)
		restore_function[j++] = SM_APP_bRestore_st_51_from_backup;
 1010eca:	4b93      	ldr	r3, [pc, #588]	; (1011118 <C1219_st_7_full_write+0x8cc>)
		restore_function[j++] = SM_APP_bRestore_st_44_from_backup;
 1010ecc:	9224      	str	r2, [sp, #144]	; 0x90
		restore_function[j++] = SM_APP_bRestore_st_54_from_backup;
 1010ece:	4a93      	ldr	r2, [pc, #588]	; (101111c <C1219_st_7_full_write+0x8d0>)
		restore_function[j++] = SM_APP_bRestore_st_43_from_backup;
 1010ed0:	9123      	str	r1, [sp, #140]	; 0x8c
		restore_function[j++] = SM_APP_bRestore_st_51_from_backup;
 1010ed2:	9325      	str	r3, [sp, #148]	; 0x94
		restore_function[j++] = SM_APP_bRestore_st_53_from_backup;
 1010ed4:	4992      	ldr	r1, [pc, #584]	; (1011120 <C1219_st_7_full_write+0x8d4>)
		restore_function[j++] = SM_APP_bRestore_st_61_from_backup;
 1010ed6:	4b93      	ldr	r3, [pc, #588]	; (1011124 <C1219_st_7_full_write+0x8d8>)
		restore_function[j++] = SM_APP_bRestore_st_54_from_backup;
 1010ed8:	9227      	str	r2, [sp, #156]	; 0x9c
		restore_function[j++] = SM_APP_bRestore_st_71_from_backup;
 1010eda:	4a93      	ldr	r2, [pc, #588]	; (1011128 <C1219_st_7_full_write+0x8dc>)
		restore_function[j++] = SM_APP_bRestore_st_53_from_backup;
 1010edc:	9126      	str	r1, [sp, #152]	; 0x98
		restore_function[j++] = SM_APP_bRestore_st_61_from_backup;
 1010ede:	9328      	str	r3, [sp, #160]	; 0xa0
		restore_function[j++] = SM_APP_bRestore_st_62_from_backup;
 1010ee0:	4992      	ldr	r1, [pc, #584]	; (101112c <C1219_st_7_full_write+0x8e0>)
		restore_function[j++] = SM_APP_bRestore_st_73_from_backup;
 1010ee2:	4b93      	ldr	r3, [pc, #588]	; (1011130 <C1219_st_7_full_write+0x8e4>)
		restore_function[j++] = SM_APP_bRestore_st_71_from_backup;
 1010ee4:	922a      	str	r2, [sp, #168]	; 0xa8
		restore_function[j++] = SM_APP_bRestore_mt_1_from_backup;
 1010ee6:	4a93      	ldr	r2, [pc, #588]	; (1011134 <C1219_st_7_full_write+0x8e8>)
		restore_function[j++] = SM_APP_bRestore_st_62_from_backup;
 1010ee8:	9129      	str	r1, [sp, #164]	; 0xa4
		restore_function[j++] = SM_APP_bRestore_st_73_from_backup;
 1010eea:	932b      	str	r3, [sp, #172]	; 0xac
		restore_function[j++] = SM_APP_bRestore_st_75_from_backup;
 1010eec:	4992      	ldr	r1, [pc, #584]	; (1011138 <C1219_st_7_full_write+0x8ec>)
		restore_function[j++] = SM_APP_bRestore_mt_3_from_backup;
 1010eee:	4b93      	ldr	r3, [pc, #588]	; (101113c <C1219_st_7_full_write+0x8f0>)
		restore_function[j++] = SM_APP_bRestore_mt_1_from_backup;
 1010ef0:	922d      	str	r2, [sp, #180]	; 0xb4
		restore_function[j++] = SM_APP_bRestore_mt_53_from_backup;
 1010ef2:	4a93      	ldr	r2, [pc, #588]	; (1011140 <C1219_st_7_full_write+0x8f4>)
		restore_function[j++] = SM_APP_bRestore_st_75_from_backup;
 1010ef4:	912c      	str	r1, [sp, #176]	; 0xb0
		restore_function[j++] = SM_APP_bRestore_mt_3_from_backup;
 1010ef6:	932e      	str	r3, [sp, #184]	; 0xb8
		restore_function[j++] = SM_APP_bRestore_mt_53_from_backup;
 1010ef8:	9230      	str	r2, [sp, #192]	; 0xc0
		restore_function[j++] = SM_APP_bRestore_st_11_from_backup;
 1010efa:	4892      	ldr	r0, [pc, #584]	; (1011144 <C1219_st_7_full_write+0x8f8>)
		restore_function[j++] = SM_APP_bRestore_st_13_from_backup;
 1010efc:	f8df e270 	ldr.w	lr, [pc, #624]	; 1011170 <C1219_st_7_full_write+0x924>
		restore_function[j++] = SM_APP_bRestore_mt_23_from_backup;
 1010f00:	4991      	ldr	r1, [pc, #580]	; (1011148 <C1219_st_7_full_write+0x8fc>)
		restore_function[j++] = SM_APP_bRestore_mt_73_from_backup;
 1010f02:	4b92      	ldr	r3, [pc, #584]	; (101114c <C1219_st_7_full_write+0x900>)
 1010f04:	9409      	str	r4, [sp, #36]	; 0x24
 1010f06:	aa1a      	add	r2, sp, #104	; 0x68
 1010f08:	9c04      	ldr	r4, [sp, #16]
		restore_function[j++] = SM_APP_bRestore_st_11_from_backup;
 1010f0a:	901c      	str	r0, [sp, #112]	; 0x70
 1010f0c:	f8cd b010 	str.w	fp, [sp, #16]
		restore_function[j++] = SM_APP_bRestore_st_13_from_backup;
 1010f10:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
		restore_function[j++] = SM_APP_bRestore_mt_23_from_backup;
 1010f14:	912f      	str	r1, [sp, #188]	; 0xbc
		restore_function[j++] = SM_APP_bRestore_mt_73_from_backup;
 1010f16:	9331      	str	r3, [sp, #196]	; 0xc4
 1010f18:	f8cd 9014 	str.w	r9, [sp, #20]
 1010f1c:	4693      	mov	fp, r2
 1010f1e:	f8cd 8018 	str.w	r8, [sp, #24]
		back_up_function[j++] = SM_APP_bBack_up_mt_73;
 1010f22:	f04f 0803 	mov.w	r8, #3
				backup_ok = restore_function[i](backup_area_id);
 1010f26:	9807      	ldr	r0, [sp, #28]
 1010f28:	47d0      	blx	sl
				NIC_task();
 1010f2a:	9b05      	ldr	r3, [sp, #20]
				backup_result[i] = backup_ok ? 1 : 0;
 1010f2c:	7020      	strb	r0, [r4, #0]
				backup_ok = restore_function[i](backup_area_id);
 1010f2e:	4681      	mov	r9, r0
				NIC_task();
 1010f30:	4798      	blx	r3
				WATCHDOG_APP_vRestart();
 1010f32:	47b0      	blx	r6
				OP_task();
 1010f34:	9b04      	ldr	r3, [sp, #16]
 1010f36:	4798      	blx	r3
				WATCHDOG_APP_vRestart();
 1010f38:	47b0      	blx	r6
				PFAIL_APP_vTask();
 1010f3a:	9b06      	ldr	r3, [sp, #24]
 1010f3c:	4798      	blx	r3
				WATCHDOG_APP_vRestart();
 1010f3e:	47b0      	blx	r6
 1010f40:	f108 33ff 	add.w	r3, r8, #4294967295
			while( (!backup_ok) && (current_tries < 3) ) {
 1010f44:	f1b9 0f00 	cmp.w	r9, #0
 1010f48:	d102      	bne.n	1010f50 <C1219_st_7_full_write+0x704>
 1010f4a:	f013 08ff 	ands.w	r8, r3, #255	; 0xff
 1010f4e:	d1ea      	bne.n	1010f26 <C1219_st_7_full_write+0x6da>
		for ( uint8_t i = 0; i < j; i++) {
 1010f50:	ab31      	add	r3, sp, #196	; 0xc4
 1010f52:	459b      	cmp	fp, r3
 1010f54:	f104 0401 	add.w	r4, r4, #1
 1010f58:	f000 85ab 	beq.w	1011ab2 <C1219_st_7_full_write+0x1266>
 1010f5c:	f85b af04 	ldr.w	sl, [fp, #4]!
 1010f60:	e7df      	b.n	1010f22 <C1219_st_7_full_write+0x6d6>
	if (c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + SP_1_PARAMETERS_SIZE)) {
 1010f62:	6863      	ldr	r3, [r4, #4]
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1010f64:	7839      	ldrb	r1, [r7, #0]
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 1010f66:	f883 9160 	strb.w	r9, [r3, #352]	; 0x160
	if (c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + SP_1_PARAMETERS_SIZE)) {
 1010f6a:	7b9a      	ldrb	r2, [r3, #14]
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1010f6c:	6863      	ldr	r3, [r4, #4]
	if (c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + SP_1_PARAMETERS_SIZE)) {
 1010f6e:	2a09      	cmp	r2, #9
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1010f70:	f883 a161 	strb.w	sl, [r3, #353]	; 0x161
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1010f74:	6862      	ldr	r2, [r4, #4]
	if (c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + SP_1_PARAMETERS_SIZE)) {
 1010f76:	f000 8773 	beq.w	1011e60 <C1219_st_7_full_write+0x1614>
		C1218_send_err(c1219_ptr->c1218_dll);
 1010f7a:	4b75      	ldr	r3, [pc, #468]	; (1011150 <C1219_st_7_full_write+0x904>)
 1010f7c:	e6e6      	b.n	1010d4c <C1219_st_7_full_write+0x500>
	if ( c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + SP_11_PARAMETERS_SIZE) ) {
 1010f7e:	6863      	ldr	r3, [r4, #4]
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1010f80:	7839      	ldrb	r1, [r7, #0]
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 1010f82:	f883 9160 	strb.w	r9, [r3, #352]	; 0x160
	if ( c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + SP_11_PARAMETERS_SIZE) ) {
 1010f86:	7b9a      	ldrb	r2, [r3, #14]
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1010f88:	6863      	ldr	r3, [r4, #4]
	if ( c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + SP_11_PARAMETERS_SIZE) ) {
 1010f8a:	2a09      	cmp	r2, #9
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1010f8c:	f883 a161 	strb.w	sl, [r3, #353]	; 0x161
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1010f90:	6862      	ldr	r2, [r4, #4]
	if ( c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + SP_11_PARAMETERS_SIZE) ) {
 1010f92:	d1f2      	bne.n	1010f7a <C1219_st_7_full_write+0x72e>
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1010f94:	f882 1162 	strb.w	r1, [r2, #354]	; 0x162
		c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 1010f98:	6862      	ldr	r2, [r4, #4]
		C1218_send_ok(c1219_ptr->c1218_dll);
 1010f9a:	4b52      	ldr	r3, [pc, #328]	; (10110e4 <C1219_st_7_full_write+0x898>)
		c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 1010f9c:	f882 a163 	strb.w	sl, [r2, #355]	; 0x163
		c1219_ptr->c1218_dll->st_08_length = k;
 1010fa0:	6862      	ldr	r2, [r4, #4]
 1010fa2:	2104      	movs	r1, #4
 1010fa4:	f8a2 11f6 	strh.w	r1, [r2, #502]	; 0x1f6
		C1218_send_ok(c1219_ptr->c1218_dll);
 1010fa8:	6860      	ldr	r0, [r4, #4]
 1010faa:	4798      	blx	r3
		SM_APP_vExecute_diagnostics_procedure();
 1010fac:	4b69      	ldr	r3, [pc, #420]	; (1011154 <C1219_st_7_full_write+0x908>)
 1010fae:	4798      	blx	r3
 1010fb0:	e4ef      	b.n	1010992 <C1219_st_7_full_write+0x146>
	if ( c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + MP_120_PARAMETERS_SIZE) ) {
 1010fb2:	6863      	ldr	r3, [r4, #4]
 1010fb4:	7b9a      	ldrb	r2, [r3, #14]
 1010fb6:	2a0c      	cmp	r2, #12
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 1010fb8:	f04f 0278 	mov.w	r2, #120	; 0x78
 1010fbc:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	if ( c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + MP_120_PARAMETERS_SIZE) ) {
 1010fc0:	f47f ad04 	bne.w	10109cc <C1219_st_7_full_write+0x180>
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1010fc4:	6863      	ldr	r3, [r4, #4]
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1010fc6:	783a      	ldrb	r2, [r7, #0]
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1010fc8:	2108      	movs	r1, #8
 1010fca:	f883 1161 	strb.w	r1, [r3, #353]	; 0x161
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1010fce:	6863      	ldr	r3, [r4, #4]
 1010fd0:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
		c1219_ptr->c1218_dll->st_08_data[k++] = PROC_ACCEPTED_NOT_COMPLETED;
 1010fd4:	6863      	ldr	r3, [r4, #4]
 1010fd6:	2201      	movs	r2, #1
 1010fd8:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
		c1219_ptr->c1218_dll->st_08_length = k;
 1010fdc:	6863      	ldr	r3, [r4, #4]
 1010fde:	2204      	movs	r2, #4
 1010fe0:	f8a3 21f6 	strh.w	r2, [r3, #502]	; 0x1f6
		table_selected  = ( c1219_ptr->c1218_dll->rx_data[TABLE_ID_INDEX + 0] << 0 );
 1010fe4:	6861      	ldr	r1, [r4, #4]
 1010fe6:	688a      	ldr	r2, [r1, #8]
		table_selected |= ( c1219_ptr->c1218_dll->rx_data[TABLE_ID_INDEX + 1] << 8 );
 1010fe8:	7a56      	ldrb	r6, [r2, #9]
 1010fea:	7a13      	ldrb	r3, [r2, #8]
		backup_area_id  = c1219_ptr->c1218_dll->rx_data[TABLE_ID_INDEX + 2];
 1010fec:	7a90      	ldrb	r0, [r2, #10]
		table_selected |= ( c1219_ptr->c1218_dll->rx_data[TABLE_ID_INDEX + 1] << 8 );
 1010fee:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
		switch (table_selected) {
 1010ff2:	b21b      	sxth	r3, r3
 1010ff4:	2b33      	cmp	r3, #51	; 0x33
 1010ff6:	f001 8396 	beq.w	1012726 <C1219_st_7_full_write+0x1eda>
 1010ffa:	f300 85e4 	bgt.w	1011bc6 <C1219_st_7_full_write+0x137a>
 1010ffe:	2b16      	cmp	r3, #22
 1011000:	f001 83b5 	beq.w	101276e <C1219_st_7_full_write+0x1f22>
 1011004:	f301 811b 	bgt.w	101223e <C1219_st_7_full_write+0x19f2>
 1011008:	2b0b      	cmp	r3, #11
 101100a:	f001 8368 	beq.w	10126de <C1219_st_7_full_write+0x1e92>
 101100e:	f301 8311 	bgt.w	1012634 <C1219_st_7_full_write+0x1de8>
 1011012:	2b01      	cmp	r3, #1
 1011014:	f001 83e3 	beq.w	10127de <C1219_st_7_full_write+0x1f92>
 1011018:	2b06      	cmp	r3, #6
 101101a:	d105      	bne.n	1011028 <C1219_st_7_full_write+0x7dc>
				is_ok = SM_APP_bBack_up_st_6(backup_area_id);
 101101c:	4b4e      	ldr	r3, [pc, #312]	; (1011158 <C1219_st_7_full_write+0x90c>)
 101101e:	4798      	blx	r3
		if (is_ok) {
 1011020:	2800      	cmp	r0, #0
 1011022:	f040 863d 	bne.w	1011ca0 <C1219_st_7_full_write+0x1454>
 1011026:	6861      	ldr	r1, [r4, #4]
			c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 1011028:	882b      	ldrh	r3, [r5, #0]
 101102a:	f881 3160 	strb.w	r3, [r1, #352]	; 0x160
			c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 101102e:	6860      	ldr	r0, [r4, #4]
			c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1011030:	7839      	ldrb	r1, [r7, #0]
			C1218_send_err(c1219_ptr->c1218_dll);
 1011032:	4a47      	ldr	r2, [pc, #284]	; (1011150 <C1219_st_7_full_write+0x904>)
			c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1011034:	0a1b      	lsrs	r3, r3, #8
 1011036:	f880 3161 	strb.w	r3, [r0, #353]	; 0x161
			c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 101103a:	6863      	ldr	r3, [r4, #4]
 101103c:	f883 1162 	strb.w	r1, [r3, #354]	; 0x162
			c1219_ptr->c1218_dll->st_08_data[k++] = PROC_CONFLICT_WITH_SET_UP;
 1011040:	6863      	ldr	r3, [r4, #4]
 1011042:	2103      	movs	r1, #3
			c1219_ptr->c1218_dll->st_08_data[k++] = INVALID_PARAMETER;
 1011044:	f883 1163 	strb.w	r1, [r3, #355]	; 0x163
			c1219_ptr->c1218_dll->st_08_length = k;
 1011048:	6863      	ldr	r3, [r4, #4]
 101104a:	2104      	movs	r1, #4
 101104c:	f8a3 11f6 	strh.w	r1, [r3, #502]	; 0x1f6
			C1218_send_err(c1219_ptr->c1218_dll);
 1011050:	6860      	ldr	r0, [r4, #4]
 1011052:	4790      	blx	r2
 1011054:	e49d      	b.n	1010992 <C1219_st_7_full_write+0x146>
	if ( c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + MP_101_PARAMETERS_SIZE) ) {
 1011056:	6863      	ldr	r3, [r4, #4]
 1011058:	7b9a      	ldrb	r2, [r3, #14]
 101105a:	2a0d      	cmp	r2, #13
 101105c:	f000 8744 	beq.w	1011ee8 <C1219_st_7_full_write+0x169c>
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 1011060:	2265      	movs	r2, #101	; 0x65
 1011062:	e4b1      	b.n	10109c8 <C1219_st_7_full_write+0x17c>
	if ( c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + SP_7_PARAMETERS_SIZE) ) {
 1011064:	6863      	ldr	r3, [r4, #4]
 1011066:	7b9a      	ldrb	r2, [r3, #14]
 1011068:	2a09      	cmp	r2, #9
 101106a:	f000 8711 	beq.w	1011e90 <C1219_st_7_full_write+0x1644>
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 101106e:	f883 9160 	strb.w	r9, [r3, #352]	; 0x160
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1011072:	6863      	ldr	r3, [r4, #4]
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1011074:	7839      	ldrb	r1, [r7, #0]
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1011076:	f883 a161 	strb.w	sl, [r3, #353]	; 0x161
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 101107a:	6862      	ldr	r2, [r4, #4]
 101107c:	e77d      	b.n	1010f7a <C1219_st_7_full_write+0x72e>
				C1218_send_iar(c1219_ptr->c1218_dll);
 101107e:	6860      	ldr	r0, [r4, #4]
 1011080:	4b36      	ldr	r3, [pc, #216]	; (101115c <C1219_st_7_full_write+0x910>)
 1011082:	4798      	blx	r3
				break;
 1011084:	e485      	b.n	1010992 <C1219_st_7_full_write+0x146>
	if ( c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + MP_102_PARAMETERS_SIZE) ) {
 1011086:	6863      	ldr	r3, [r4, #4]
 1011088:	7b9a      	ldrb	r2, [r3, #14]
 101108a:	2a0a      	cmp	r2, #10
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 101108c:	f04f 0266 	mov.w	r2, #102	; 0x66
 1011090:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	if ( c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + MP_102_PARAMETERS_SIZE) ) {
 1011094:	f47f ac9a 	bne.w	10109cc <C1219_st_7_full_write+0x180>
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1011098:	6863      	ldr	r3, [r4, #4]
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 101109a:	783a      	ldrb	r2, [r7, #0]
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 101109c:	2108      	movs	r1, #8
 101109e:	f883 1161 	strb.w	r1, [r3, #353]	; 0x161
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 10110a2:	6863      	ldr	r3, [r4, #4]
 10110a4:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
		switch ( c1219_ptr->c1218_dll->rx_data[PROCEDURE_PARAMETER_INDEX] ) {
 10110a8:	6863      	ldr	r3, [r4, #4]
 10110aa:	689a      	ldr	r2, [r3, #8]
 10110ac:	7a15      	ldrb	r5, [r2, #8]
 10110ae:	2d00      	cmp	r5, #0
 10110b0:	f001 806f 	beq.w	1012192 <C1219_st_7_full_write+0x1946>
 10110b4:	2d01      	cmp	r5, #1
 10110b6:	f041 8064 	bne.w	1012182 <C1219_st_7_full_write+0x1936>
				METROLOGY_APP_vEnable_Q_energy_pulse_mode();
 10110ba:	4b29      	ldr	r3, [pc, #164]	; (1011160 <C1219_st_7_full_write+0x914>)
 10110bc:	4798      	blx	r3
				c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 10110be:	6862      	ldr	r2, [r4, #4]
				C1218_send_ok(c1219_ptr->c1218_dll);
 10110c0:	4b08      	ldr	r3, [pc, #32]	; (10110e4 <C1219_st_7_full_write+0x898>)
				c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 10110c2:	2100      	movs	r1, #0
 10110c4:	f882 1163 	strb.w	r1, [r2, #355]	; 0x163
				C1218_send_ok(c1219_ptr->c1218_dll);
 10110c8:	6860      	ldr	r0, [r4, #4]
 10110ca:	4798      	blx	r3
		c1219_ptr->c1218_dll->st_08_length = k;
 10110cc:	6863      	ldr	r3, [r4, #4]
 10110ce:	2204      	movs	r2, #4
 10110d0:	f8a3 21f6 	strh.w	r2, [r3, #502]	; 0x1f6
 10110d4:	e45d      	b.n	1010992 <C1219_st_7_full_write+0x146>
	if ( c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + SP_8_PARAMETERS_SIZE) ) {
 10110d6:	6863      	ldr	r3, [r4, #4]
 10110d8:	7b9a      	ldrb	r2, [r3, #14]
 10110da:	2a09      	cmp	r2, #9
 10110dc:	f000 878d 	beq.w	1011ffa <C1219_st_7_full_write+0x17ae>
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 10110e0:	2208      	movs	r2, #8
 10110e2:	e44c      	b.n	101097e <C1219_st_7_full_write+0x132>
 10110e4:	01016445 	.word	0x01016445
 10110e8:	0101603d 	.word	0x0101603d
 10110ec:	01030b71 	.word	0x01030b71
 10110f0:	20016c2c 	.word	0x20016c2c
 10110f4:	01021d15 	.word	0x01021d15
 10110f8:	01021e9d 	.word	0x01021e9d
 10110fc:	0102231d 	.word	0x0102231d
 1011100:	010227d9 	.word	0x010227d9
 1011104:	010224b1 	.word	0x010224b1
 1011108:	01022645 	.word	0x01022645
 101110c:	0102296d 	.word	0x0102296d
 1011110:	01022c95 	.word	0x01022c95
 1011114:	01022b01 	.word	0x01022b01
 1011118:	01022e29 	.word	0x01022e29
 101111c:	01023139 	.word	0x01023139
 1011120:	01022fb1 	.word	0x01022fb1
 1011124:	010232cd 	.word	0x010232cd
 1011128:	010235f5 	.word	0x010235f5
 101112c:	01023461 	.word	0x01023461
 1011130:	01023789 	.word	0x01023789
 1011134:	01023a8d 	.word	0x01023a8d
 1011138:	0102391d 	.word	0x0102391d
 101113c:	01023c01 	.word	0x01023c01
 1011140:	01023edd 	.word	0x01023edd
 1011144:	01022031 	.word	0x01022031
 1011148:	01023d61 	.word	0x01023d61
 101114c:	01024061 	.word	0x01024061
 1011150:	01016465 	.word	0x01016465
 1011154:	01021b81 	.word	0x01021b81
 1011158:	01021dc9 	.word	0x01021dc9
 101115c:	010164c5 	.word	0x010164c5
 1011160:	0101e521 	.word	0x0101e521
 1011164:	010244c1 	.word	0x010244c1
 1011168:	01025bf1 	.word	0x01025bf1
 101116c:	01024d05 	.word	0x01024d05
 1011170:	010221a1 	.word	0x010221a1
	if ( c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + MP_200_PARAMETERS_SIZE)) {
 1011174:	6863      	ldr	r3, [r4, #4]
 1011176:	7b9a      	ldrb	r2, [r3, #14]
 1011178:	2a18      	cmp	r2, #24
 101117a:	f000 8760 	beq.w	101203e <C1219_st_7_full_write+0x17f2>
		k = 0;
 101117e:	2200      	movs	r2, #0
 1011180:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 1011184:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1011188:	7838      	ldrb	r0, [r7, #0]
		C1218_send_err(c1219_ptr->c1218_dll);
 101118a:	4a88      	ldr	r2, [pc, #544]	; (10113ac <C1219_st_7_full_write+0xb60>)
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 101118c:	b2c9      	uxtb	r1, r1
 101118e:	1c4d      	adds	r5, r1, #1
 1011190:	b2ed      	uxtb	r5, r5
 1011192:	f88d 5048 	strb.w	r5, [sp, #72]	; 0x48
 1011196:	440b      	add	r3, r1
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1011198:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 101119c:	25c8      	movs	r5, #200	; 0xc8
 101119e:	f883 5160 	strb.w	r5, [r3, #352]	; 0x160
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 10111a2:	b2cb      	uxtb	r3, r1
 10111a4:	1c5d      	adds	r5, r3, #1
 10111a6:	6861      	ldr	r1, [r4, #4]
 10111a8:	b2ed      	uxtb	r5, r5
 10111aa:	f88d 5048 	strb.w	r5, [sp, #72]	; 0x48
 10111ae:	4419      	add	r1, r3
 10111b0:	2508      	movs	r5, #8
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 10111b2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 10111b6:	f881 5160 	strb.w	r5, [r1, #352]	; 0x160
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 10111ba:	6861      	ldr	r1, [r4, #4]
 10111bc:	b2db      	uxtb	r3, r3
 10111be:	1c5d      	adds	r5, r3, #1
 10111c0:	440b      	add	r3, r1
 10111c2:	b2e9      	uxtb	r1, r5
 10111c4:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
 10111c8:	f883 0160 	strb.w	r0, [r3, #352]	; 0x160
		c1219_ptr->c1218_dll->st_08_data[k++] = INVALID_PARAMETER;
 10111cc:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 10111d0:	6861      	ldr	r1, [r4, #4]
 10111d2:	b2db      	uxtb	r3, r3
 10111d4:	4419      	add	r1, r3
 10111d6:	2002      	movs	r0, #2
 10111d8:	3301      	adds	r3, #1
 10111da:	f881 0160 	strb.w	r0, [r1, #352]	; 0x160
 10111de:	b2db      	uxtb	r3, r3
 10111e0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		c1219_ptr->c1218_dll->st_08_length = k;
 10111e4:	6863      	ldr	r3, [r4, #4]
 10111e6:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 10111ea:	f8a3 11f6 	strh.w	r1, [r3, #502]	; 0x1f6
		C1218_send_err(c1219_ptr->c1218_dll);
 10111ee:	6860      	ldr	r0, [r4, #4]
 10111f0:	4790      	blx	r2
 10111f2:	f7ff bbce 	b.w	1010992 <C1219_st_7_full_write+0x146>
void C1219_mp_150_execute(C1219_TYPE *c1219_ptr) {
	
	uint8_t k = 0;
	static volatile uint32_t crc;
	
	if ( c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + MP_150_PARAMETERS_SIZE) ) {
 10111f6:	6863      	ldr	r3, [r4, #4]
 10111f8:	7b9a      	ldrb	r2, [r3, #14]
 10111fa:	2a09      	cmp	r2, #9
 10111fc:	f000 86ce 	beq.w	1011f9c <C1219_st_7_full_write+0x1750>
	
		C1218_send_ok(c1219_ptr->c1218_dll);
	}
	else {
		
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 1011200:	2296      	movs	r2, #150	; 0x96
 1011202:	f7ff bbe1 	b.w	10109c8 <C1219_st_7_full_write+0x17c>
	if ( c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + MP_121_PARAMETERS_SIZE) ) {
 1011206:	6863      	ldr	r3, [r4, #4]
 1011208:	7b9a      	ldrb	r2, [r3, #14]
 101120a:	2a0c      	cmp	r2, #12
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 101120c:	f04f 0279 	mov.w	r2, #121	; 0x79
 1011210:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	if ( c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + MP_121_PARAMETERS_SIZE) ) {
 1011214:	f47f abda 	bne.w	10109cc <C1219_st_7_full_write+0x180>
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1011218:	6863      	ldr	r3, [r4, #4]
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 101121a:	783a      	ldrb	r2, [r7, #0]
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 101121c:	2108      	movs	r1, #8
 101121e:	f883 1161 	strb.w	r1, [r3, #353]	; 0x161
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1011222:	6863      	ldr	r3, [r4, #4]
 1011224:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
		c1219_ptr->c1218_dll->st_08_data[k++] = PROC_ACCEPTED_NOT_COMPLETED;
 1011228:	6863      	ldr	r3, [r4, #4]
 101122a:	2201      	movs	r2, #1
 101122c:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
		c1219_ptr->c1218_dll->st_08_length = k;
 1011230:	6863      	ldr	r3, [r4, #4]
 1011232:	2204      	movs	r2, #4
 1011234:	f8a3 21f6 	strh.w	r2, [r3, #502]	; 0x1f6
		table_selected  = ( c1219_ptr->c1218_dll->rx_data[TABLE_ID_INDEX + 0] << 0 );
 1011238:	6861      	ldr	r1, [r4, #4]
 101123a:	688a      	ldr	r2, [r1, #8]
		table_selected |= ( c1219_ptr->c1218_dll->rx_data[TABLE_ID_INDEX + 1] << 8 );
 101123c:	7a56      	ldrb	r6, [r2, #9]
 101123e:	7a13      	ldrb	r3, [r2, #8]
		backup_area_id  = c1219_ptr->c1218_dll->rx_data[TABLE_ID_INDEX + 2];
 1011240:	7a90      	ldrb	r0, [r2, #10]
		table_selected |= ( c1219_ptr->c1218_dll->rx_data[TABLE_ID_INDEX + 1] << 8 );
 1011242:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
		switch (table_selected) {
 1011246:	b21b      	sxth	r3, r3
 1011248:	2b33      	cmp	r3, #51	; 0x33
 101124a:	f001 8270 	beq.w	101272e <C1219_st_7_full_write+0x1ee2>
 101124e:	f300 8507 	bgt.w	1011c60 <C1219_st_7_full_write+0x1414>
 1011252:	2b16      	cmp	r3, #22
 1011254:	f001 8273 	beq.w	101273e <C1219_st_7_full_write+0x1ef2>
 1011258:	f301 8000 	bgt.w	101225c <C1219_st_7_full_write+0x1a10>
 101125c:	2b0b      	cmp	r3, #11
 101125e:	f001 82b6 	beq.w	10127ce <C1219_st_7_full_write+0x1f82>
 1011262:	f301 821d 	bgt.w	10126a0 <C1219_st_7_full_write+0x1e54>
 1011266:	2b01      	cmp	r3, #1
 1011268:	f001 8259 	beq.w	101271e <C1219_st_7_full_write+0x1ed2>
 101126c:	2b06      	cmp	r3, #6
 101126e:	f040 8512 	bne.w	1011c96 <C1219_st_7_full_write+0x144a>
				SM_APP_bRestore_st_6_from_backup(backup_area_id);
 1011272:	4b4f      	ldr	r3, [pc, #316]	; (10113b0 <C1219_st_7_full_write+0xb64>)
 1011274:	4798      	blx	r3
			c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 1011276:	6862      	ldr	r2, [r4, #4]
 1011278:	882b      	ldrh	r3, [r5, #0]
 101127a:	f882 3160 	strb.w	r3, [r2, #352]	; 0x160
			c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 101127e:	6860      	ldr	r0, [r4, #4]
			c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1011280:	7839      	ldrb	r1, [r7, #0]
			C1218_send_err(c1219_ptr->c1218_dll);
 1011282:	4a4a      	ldr	r2, [pc, #296]	; (10113ac <C1219_st_7_full_write+0xb60>)
			c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1011284:	0a1b      	lsrs	r3, r3, #8
 1011286:	f880 3161 	strb.w	r3, [r0, #353]	; 0x161
			c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 101128a:	6863      	ldr	r3, [r4, #4]
 101128c:	f883 1162 	strb.w	r1, [r3, #354]	; 0x162
			c1219_ptr->c1218_dll->st_08_data[k++] = INVALID_PARAMETER;
 1011290:	6863      	ldr	r3, [r4, #4]
 1011292:	2102      	movs	r1, #2
 1011294:	e6d6      	b.n	1011044 <C1219_st_7_full_write+0x7f8>
	if ( c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + SP_10_PARAMETERS_SIZE) ) {		
 1011296:	6863      	ldr	r3, [r4, #4]
 1011298:	7b9a      	ldrb	r2, [r3, #14]
 101129a:	2a0f      	cmp	r2, #15
 101129c:	f040 83d8 	bne.w	1011a50 <C1219_st_7_full_write+0x1204>
		set_mask = c1219_ptr->c1218_dll->rx_data[SET_MASK_INDEX] & SET_MASK_BM;
 10112a0:	689a      	ldr	r2, [r3, #8]
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 10112a2:	783d      	ldrb	r5, [r7, #0]
		set_mask = c1219_ptr->c1218_dll->rx_data[SET_MASK_INDEX] & SET_MASK_BM;
 10112a4:	7a17      	ldrb	r7, [r2, #8]
		if ( rtc.is_time_relative == 1 ) {
 10112a6:	78b1      	ldrb	r1, [r6, #2]
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id);
 10112a8:	220a      	movs	r2, #10
 10112aa:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 10112ae:	6860      	ldr	r0, [r4, #4]
 10112b0:	2200      	movs	r2, #0
 10112b2:	f880 2161 	strb.w	r2, [r0, #353]	; 0x161
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 10112b6:	6860      	ldr	r0, [r4, #4]
 10112b8:	f880 5162 	strb.w	r5, [r0, #354]	; 0x162
		c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 10112bc:	6860      	ldr	r0, [r4, #4]
		if ( rtc.is_time_relative == 1 ) {
 10112be:	2901      	cmp	r1, #1
		c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 10112c0:	f880 2163 	strb.w	r2, [r0, #355]	; 0x163
		if ( rtc.is_time_relative == 1 ) {
 10112c4:	f000 877d 	beq.w	10121c2 <C1219_st_7_full_write+0x1976>
			c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(rtc.utc_timestamp);
 10112c8:	6862      	ldr	r2, [r4, #4]
 10112ca:	6873      	ldr	r3, [r6, #4]
 10112cc:	f882 3164 	strb.w	r3, [r2, #356]	; 0x164
			c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(rtc.utc_timestamp >> 8);
 10112d0:	6862      	ldr	r2, [r4, #4]
 10112d2:	0a19      	lsrs	r1, r3, #8
 10112d4:	f882 1165 	strb.w	r1, [r2, #357]	; 0x165
			c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(rtc.utc_timestamp >> 16);
 10112d8:	6862      	ldr	r2, [r4, #4]
 10112da:	0c19      	lsrs	r1, r3, #16
 10112dc:	f882 1166 	strb.w	r1, [r2, #358]	; 0x166
			c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(rtc.utc_timestamp >> 24);
 10112e0:	6862      	ldr	r2, [r4, #4]
 10112e2:	0e1b      	lsrs	r3, r3, #24
 10112e4:	f882 3167 	strb.w	r3, [r2, #359]	; 0x167
		if ( (set_mask & (SET_TIME_BM |SET_DATE_BM)) == (SET_TIME_BM |SET_DATE_BM) ) {
 10112e8:	f007 0303 	and.w	r3, r7, #3
 10112ec:	2b03      	cmp	r3, #3
 10112ee:	f001 8011 	beq.w	1012314 <C1219_st_7_full_write+0x1ac8>
		if ( rtc.is_time_relative == 1 ) {
 10112f2:	78b3      	ldrb	r3, [r6, #2]
			c1219_ptr->c1218_dll->st_08_data[k++] = 0;
 10112f4:	6862      	ldr	r2, [r4, #4]
		if ( rtc.is_time_relative == 1 ) {
 10112f6:	2b01      	cmp	r3, #1
 10112f8:	f000 8755 	beq.w	10121a6 <C1219_st_7_full_write+0x195a>
			c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(rtc.utc_timestamp);
 10112fc:	6873      	ldr	r3, [r6, #4]
 10112fe:	f882 3168 	strb.w	r3, [r2, #360]	; 0x168
			c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(rtc.utc_timestamp >> 8);
 1011302:	6862      	ldr	r2, [r4, #4]
 1011304:	0a19      	lsrs	r1, r3, #8
 1011306:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
			c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(rtc.utc_timestamp >> 16);
 101130a:	6862      	ldr	r2, [r4, #4]
 101130c:	0c19      	lsrs	r1, r3, #16
 101130e:	f882 116a 	strb.w	r1, [r2, #362]	; 0x16a
			c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(rtc.utc_timestamp >> 24);
 1011312:	6862      	ldr	r2, [r4, #4]
 1011314:	0e1b      	lsrs	r3, r3, #24
 1011316:	f882 316b 	strb.w	r3, [r2, #363]	; 0x16b
		c1219_ptr->c1218_dll->st_08_length = k;
 101131a:	6862      	ldr	r2, [r4, #4]
		C1218_send_ok(c1219_ptr->c1218_dll);
 101131c:	4b25      	ldr	r3, [pc, #148]	; (10113b4 <C1219_st_7_full_write+0xb68>)
		c1219_ptr->c1218_dll->st_08_length = k;
 101131e:	210c      	movs	r1, #12
 1011320:	f8a2 11f6 	strh.w	r1, [r2, #502]	; 0x1f6
		C1218_send_ok(c1219_ptr->c1218_dll);
 1011324:	6860      	ldr	r0, [r4, #4]
 1011326:	4798      	blx	r3
 1011328:	f7ff bb33 	b.w	1010992 <C1219_st_7_full_write+0x146>
	if ( c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + MP_112_PARAMETERS_SIZE) ) {
 101132c:	6863      	ldr	r3, [r4, #4]
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 101132e:	7839      	ldrb	r1, [r7, #0]
	if ( c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + MP_112_PARAMETERS_SIZE) ) {
 1011330:	7b9a      	ldrb	r2, [r3, #14]
 1011332:	2a09      	cmp	r2, #9
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 1011334:	f04f 0270 	mov.w	r2, #112	; 0x70
 1011338:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 101133c:	6862      	ldr	r2, [r4, #4]
	if ( c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + MP_112_PARAMETERS_SIZE) ) {
 101133e:	f47f ad00 	bne.w	1010d42 <C1219_st_7_full_write+0x4f6>
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1011342:	2008      	movs	r0, #8
 1011344:	f882 0161 	strb.w	r0, [r2, #353]	; 0x161
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1011348:	6862      	ldr	r2, [r4, #4]
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bRestore_cal_m_ia_backup();
 101134a:	4b1b      	ldr	r3, [pc, #108]	; (10113b8 <C1219_st_7_full_write+0xb6c>)
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 101134c:	f882 1162 	strb.w	r1, [r2, #354]	; 0x162
		c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 1011350:	6862      	ldr	r2, [r4, #4]
 1011352:	f882 a163 	strb.w	sl, [r2, #355]	; 0x163
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bRestore_cal_m_ia_backup();
 1011356:	6865      	ldr	r5, [r4, #4]
 1011358:	4798      	blx	r3
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bRestore_cal_m_va_backup();
 101135a:	4b18      	ldr	r3, [pc, #96]	; (10113bc <C1219_st_7_full_write+0xb70>)
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bRestore_cal_m_ia_backup();
 101135c:	f885 0164 	strb.w	r0, [r5, #356]	; 0x164
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bRestore_cal_m_va_backup();
 1011360:	6865      	ldr	r5, [r4, #4]
 1011362:	4798      	blx	r3
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bRestore_cal_ph_ia_backup();
 1011364:	4b16      	ldr	r3, [pc, #88]	; (10113c0 <C1219_st_7_full_write+0xb74>)
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bRestore_cal_m_va_backup();
 1011366:	f885 0165 	strb.w	r0, [r5, #357]	; 0x165
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bRestore_cal_ph_ia_backup();
 101136a:	6865      	ldr	r5, [r4, #4]
 101136c:	4798      	blx	r3
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bRestore_cal_m_ib_backup();
 101136e:	4b15      	ldr	r3, [pc, #84]	; (10113c4 <C1219_st_7_full_write+0xb78>)
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bRestore_cal_ph_ia_backup();
 1011370:	f885 0166 	strb.w	r0, [r5, #358]	; 0x166
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bRestore_cal_m_ib_backup();
 1011374:	6865      	ldr	r5, [r4, #4]
 1011376:	4798      	blx	r3
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bRestore_cal_m_vb_backup();
 1011378:	4b13      	ldr	r3, [pc, #76]	; (10113c8 <C1219_st_7_full_write+0xb7c>)
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bRestore_cal_m_ib_backup();
 101137a:	f885 0167 	strb.w	r0, [r5, #359]	; 0x167
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bRestore_cal_m_vb_backup();
 101137e:	6865      	ldr	r5, [r4, #4]
 1011380:	4798      	blx	r3
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bRestore_cal_ph_ib_backup();
 1011382:	4b12      	ldr	r3, [pc, #72]	; (10113cc <C1219_st_7_full_write+0xb80>)
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bRestore_cal_m_vb_backup();
 1011384:	f885 0168 	strb.w	r0, [r5, #360]	; 0x168
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bRestore_cal_ph_ib_backup();
 1011388:	6865      	ldr	r5, [r4, #4]
 101138a:	4798      	blx	r3
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bRestore_cal_m_ic_backup();
 101138c:	4b10      	ldr	r3, [pc, #64]	; (10113d0 <C1219_st_7_full_write+0xb84>)
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bRestore_cal_ph_ib_backup();
 101138e:	f885 0169 	strb.w	r0, [r5, #361]	; 0x169
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bRestore_cal_m_ic_backup();
 1011392:	6865      	ldr	r5, [r4, #4]
 1011394:	4798      	blx	r3
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bRestore_cal_m_vc_backup();
 1011396:	4b0f      	ldr	r3, [pc, #60]	; (10113d4 <C1219_st_7_full_write+0xb88>)
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bRestore_cal_m_ic_backup();
 1011398:	f885 016a 	strb.w	r0, [r5, #362]	; 0x16a
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bRestore_cal_m_vc_backup();
 101139c:	6865      	ldr	r5, [r4, #4]
 101139e:	4798      	blx	r3
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bRestore_cal_ph_ic_backup();
 10113a0:	4b0d      	ldr	r3, [pc, #52]	; (10113d8 <C1219_st_7_full_write+0xb8c>)
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bRestore_cal_m_vc_backup();
 10113a2:	f885 016b 	strb.w	r0, [r5, #363]	; 0x16b
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bRestore_cal_ph_ic_backup();
 10113a6:	6865      	ldr	r5, [r4, #4]
 10113a8:	4798      	blx	r3
 10113aa:	e4a9      	b.n	1010d00 <C1219_st_7_full_write+0x4b4>
 10113ac:	01016465 	.word	0x01016465
 10113b0:	01021e9d 	.word	0x01021e9d
 10113b4:	01016445 	.word	0x01016445
 10113b8:	0101dc25 	.word	0x0101dc25
 10113bc:	0101dc55 	.word	0x0101dc55
 10113c0:	0101dc85 	.word	0x0101dc85
 10113c4:	0101e031 	.word	0x0101e031
 10113c8:	0101e061 	.word	0x0101e061
 10113cc:	0101e091 	.word	0x0101e091
 10113d0:	0101e441 	.word	0x0101e441
 10113d4:	0101e471 	.word	0x0101e471
 10113d8:	0101e4a1 	.word	0x0101e4a1
	if (c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + SP_0_PARAMETERS_SIZE)) {
 10113dc:	6862      	ldr	r2, [r4, #4]
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 10113de:	7839      	ldrb	r1, [r7, #0]
	if (c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + SP_0_PARAMETERS_SIZE)) {
 10113e0:	7b93      	ldrb	r3, [r2, #14]
 10113e2:	2b09      	cmp	r3, #9
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 10113e4:	f04f 0300 	mov.w	r3, #0
 10113e8:	f882 3160 	strb.w	r3, [r2, #352]	; 0x160
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 10113ec:	6862      	ldr	r2, [r4, #4]
 10113ee:	f882 3161 	strb.w	r3, [r2, #353]	; 0x161
	if (c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + SP_0_PARAMETERS_SIZE)) {
 10113f2:	f47f ae42 	bne.w	101107a <C1219_st_7_full_write+0x82e>
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 10113f6:	6862      	ldr	r2, [r4, #4]
		C1218_send_ok(c1219_ptr->c1218_dll);
 10113f8:	f8df a2a0 	ldr.w	sl, [pc, #672]	; 101169c <C1219_st_7_full_write+0xe50>
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 10113fc:	f882 1162 	strb.w	r1, [r2, #354]	; 0x162
		c1219_ptr->c1218_dll->st_08_data[k++] = PROC_ACCEPTED_NOT_COMPLETED;
 1011400:	6862      	ldr	r2, [r4, #4]
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1011402:	9305      	str	r3, [sp, #20]
		c1219_ptr->c1218_dll->st_08_data[k++] = PROC_ACCEPTED_NOT_COMPLETED;
 1011404:	2601      	movs	r6, #1
 1011406:	f882 6163 	strb.w	r6, [r2, #355]	; 0x163
		c1219_ptr->c1218_dll->st_08_length = k;
 101140a:	6861      	ldr	r1, [r4, #4]
		NIC_task();
 101140c:	f8df 9294 	ldr.w	r9, [pc, #660]	; 10116a4 <C1219_st_7_full_write+0xe58>
		OP_task();
 1011410:	f8df b294 	ldr.w	fp, [pc, #660]	; 10116a8 <C1219_st_7_full_write+0xe5c>
		PFAIL_APP_vTask();
 1011414:	f8df 8294 	ldr.w	r8, [pc, #660]	; 10116ac <C1219_st_7_full_write+0xe60>
		c1219_ptr->c1218_dll->st_08_length = k;
 1011418:	2204      	movs	r2, #4
 101141a:	f8a1 21f6 	strh.w	r2, [r1, #502]	; 0x1f6
		C1218_send_ok(c1219_ptr->c1218_dll);
 101141e:	6860      	ldr	r0, [r4, #4]
		c1219_ptr->c1218_dll->st_08_length = k;
 1011420:	9204      	str	r2, [sp, #16]
		C1218_send_ok(c1219_ptr->c1218_dll);
 1011422:	47d0      	blx	sl
		vTaskSuspend(tou_os.task_id);
 1011424:	487f      	ldr	r0, [pc, #508]	; (1011624 <C1219_st_7_full_write+0xdd8>)
		meter.system_state.busy = true;
 1011426:	4980      	ldr	r1, [pc, #512]	; (1011628 <C1219_st_7_full_write+0xddc>)
		vTaskSuspend(tou_os.task_id);
 1011428:	6800      	ldr	r0, [r0, #0]
 101142a:	4b80      	ldr	r3, [pc, #512]	; (101162c <C1219_st_7_full_write+0xde0>)
		meter.system_state.busy = true;
 101142c:	f881 6021 	strb.w	r6, [r1, #33]	; 0x21
		meter.system_state.changing_configuration = true;
 1011430:	f881 6022 	strb.w	r6, [r1, #34]	; 0x22
		vTaskSuspend(tou_os.task_id);
 1011434:	4798      	blx	r3
		vTaskSuspend(registers_os.storage_task_id);
 1011436:	497e      	ldr	r1, [pc, #504]	; (1011630 <C1219_st_7_full_write+0xde4>)
 1011438:	4b7c      	ldr	r3, [pc, #496]	; (101162c <C1219_st_7_full_write+0xde0>)
 101143a:	6808      	ldr	r0, [r1, #0]
		WATCHDOG_APP_vRestart();
 101143c:	4e7d      	ldr	r6, [pc, #500]	; (1011634 <C1219_st_7_full_write+0xde8>)
 101143e:	f8df a270 	ldr.w	sl, [pc, #624]	; 10116b0 <C1219_st_7_full_write+0xe64>
		vTaskSuspend(registers_os.storage_task_id);
 1011442:	4798      	blx	r3
		GRAL_APP_bSt_3_restore_default_values();
 1011444:	497c      	ldr	r1, [pc, #496]	; (1011638 <C1219_st_7_full_write+0xdec>)
 1011446:	4788      	blx	r1
		PFAIL_APP_vTask();
 1011448:	47c0      	blx	r8
		NIC_task();
 101144a:	47c8      	blx	r9
		OP_task();
 101144c:	47d8      	blx	fp
		WATCHDOG_APP_vRestart();
 101144e:	47b0      	blx	r6
		REGS_APP_bSt_11_restore_default_values();
 1011450:	497a      	ldr	r1, [pc, #488]	; (101163c <C1219_st_7_full_write+0xdf0>)
 1011452:	4788      	blx	r1
		PFAIL_APP_vTask();
 1011454:	47c0      	blx	r8
		NIC_task();
 1011456:	47c8      	blx	r9
		OP_task();
 1011458:	47d8      	blx	fp
		WATCHDOG_APP_vRestart();
 101145a:	47b0      	blx	r6
		REGS_APP_bSt_13_restore_default_values();
 101145c:	4978      	ldr	r1, [pc, #480]	; (1011640 <C1219_st_7_full_write+0xdf4>)
 101145e:	4788      	blx	r1
		PFAIL_APP_vTask();
 1011460:	47c0      	blx	r8
		NIC_task();
 1011462:	47c8      	blx	r9
		OP_task();
 1011464:	47d8      	blx	fp
		WATCHDOG_APP_vRestart();
 1011466:	47b0      	blx	r6
		REGS_APP_bSt_21_restore_default_values();
 1011468:	4976      	ldr	r1, [pc, #472]	; (1011644 <C1219_st_7_full_write+0xdf8>)
 101146a:	4788      	blx	r1
		PFAIL_APP_vTask();
 101146c:	47c0      	blx	r8
		NIC_task();
 101146e:	47c8      	blx	r9
		OP_task();
 1011470:	47d8      	blx	fp
		WATCHDOG_APP_vRestart();
 1011472:	47b0      	blx	r6
		REGS_APP_bSt_22_restore_default_values();
 1011474:	4974      	ldr	r1, [pc, #464]	; (1011648 <C1219_st_7_full_write+0xdfc>)
 1011476:	4788      	blx	r1
		PFAIL_APP_vTask();
 1011478:	47c0      	blx	r8
		NIC_task();
 101147a:	47c8      	blx	r9
		OP_task();
 101147c:	47d8      	blx	fp
		WATCHDOG_APP_vRestart();
 101147e:	47b0      	blx	r6
		REGS_APP_vClear_st_23();
 1011480:	4972      	ldr	r1, [pc, #456]	; (101164c <C1219_st_7_full_write+0xe00>)
 1011482:	4788      	blx	r1
		PFAIL_APP_vTask();
 1011484:	47c0      	blx	r8
		NIC_task();
 1011486:	47c8      	blx	r9
		OP_task();
 1011488:	47d8      	blx	fp
		WATCHDOG_APP_vRestart();
 101148a:	47b0      	blx	r6
		REGS_APP_vClear_st_24();
 101148c:	4970      	ldr	r1, [pc, #448]	; (1011650 <C1219_st_7_full_write+0xe04>)
 101148e:	4788      	blx	r1
		PFAIL_APP_vTask();
 1011490:	47c0      	blx	r8
		NIC_task();
 1011492:	47c8      	blx	r9
		OP_task();
 1011494:	47d8      	blx	fp
		WATCHDOG_APP_vRestart();
 1011496:	47b0      	blx	r6
		REGS_APP_vClear_st_25();
 1011498:	496e      	ldr	r1, [pc, #440]	; (1011654 <C1219_st_7_full_write+0xe08>)
 101149a:	4788      	blx	r1
		PFAIL_APP_vTask();
 101149c:	47c0      	blx	r8
		NIC_task();
 101149e:	47c8      	blx	r9
		OP_task();
 10114a0:	47d8      	blx	fp
		WATCHDOG_APP_vRestart();
 10114a2:	47b0      	blx	r6
		REGS_APP_vClear_st_26();
 10114a4:	496c      	ldr	r1, [pc, #432]	; (1011658 <C1219_st_7_full_write+0xe0c>)
 10114a6:	4788      	blx	r1
		PFAIL_APP_vTask();
 10114a8:	47c0      	blx	r8
		NIC_task();
 10114aa:	47c8      	blx	r9
		OP_task();
 10114ac:	47d8      	blx	fp
		WATCHDOG_APP_vRestart();
 10114ae:	47b0      	blx	r6
		REGS_APP_bSt_27_restore_default_values();
 10114b0:	496a      	ldr	r1, [pc, #424]	; (101165c <C1219_st_7_full_write+0xe10>)
 10114b2:	4788      	blx	r1
		PFAIL_APP_vTask();
 10114b4:	47c0      	blx	r8
		NIC_task();
 10114b6:	47c8      	blx	r9
		OP_task();
 10114b8:	47d8      	blx	fp
		WATCHDOG_APP_vRestart();
 10114ba:	47b0      	blx	r6
		TOU_APP_bSt_51_restore_default_values();
 10114bc:	4968      	ldr	r1, [pc, #416]	; (1011660 <C1219_st_7_full_write+0xe14>)
 10114be:	4788      	blx	r1
		PFAIL_APP_vTask();
 10114c0:	47c0      	blx	r8
		NIC_task();
 10114c2:	47c8      	blx	r9
		OP_task();
 10114c4:	47d8      	blx	fp
		WATCHDOG_APP_vRestart();
 10114c6:	47b0      	blx	r6
		TOU_APP_bSt_53_restore_default_values();
 10114c8:	4966      	ldr	r1, [pc, #408]	; (1011664 <C1219_st_7_full_write+0xe18>)
 10114ca:	4788      	blx	r1
		PFAIL_APP_vTask();
 10114cc:	47c0      	blx	r8
		NIC_task();
 10114ce:	47c8      	blx	r9
		OP_task();
 10114d0:	47d8      	blx	fp
		WATCHDOG_APP_vRestart();
 10114d2:	47b0      	blx	r6
		LP_APP_bSt_61_restore_default_values();
 10114d4:	4964      	ldr	r1, [pc, #400]	; (1011668 <C1219_st_7_full_write+0xe1c>)
 10114d6:	4788      	blx	r1
		PFAIL_APP_vTask();
 10114d8:	47c0      	blx	r8
		NIC_task();
 10114da:	47c8      	blx	r9
		OP_task();
 10114dc:	47d8      	blx	fp
		WATCHDOG_APP_vRestart();
 10114de:	47b0      	blx	r6
		LP_APP_bSt_62_restore_default_values();
 10114e0:	4962      	ldr	r1, [pc, #392]	; (101166c <C1219_st_7_full_write+0xe20>)
 10114e2:	4788      	blx	r1
		PFAIL_APP_vTask();
 10114e4:	47c0      	blx	r8
		NIC_task();
 10114e6:	47c8      	blx	r9
		OP_task();
 10114e8:	47d8      	blx	fp
		WATCHDOG_APP_vRestart();
 10114ea:	47b0      	blx	r6
		LP_APP_bSt_63_restore_default_values();
 10114ec:	4960      	ldr	r1, [pc, #384]	; (1011670 <C1219_st_7_full_write+0xe24>)
 10114ee:	4788      	blx	r1
		PFAIL_APP_vTask();
 10114f0:	47c0      	blx	r8
		NIC_task();
 10114f2:	47c8      	blx	r9
		OP_task();
 10114f4:	47d8      	blx	fp
		WATCHDOG_APP_vRestart();
 10114f6:	47b0      	blx	r6
		EVNT_APP_bSt_71_restore_default_values();
 10114f8:	495e      	ldr	r1, [pc, #376]	; (1011674 <C1219_st_7_full_write+0xe28>)
 10114fa:	4788      	blx	r1
		PFAIL_APP_vTask();
 10114fc:	47c0      	blx	r8
		NIC_task();
 10114fe:	47c8      	blx	r9
		OP_task();
 1011500:	47d8      	blx	fp
		WATCHDOG_APP_vRestart();
 1011502:	47b0      	blx	r6
		EVNT_APP_bSt_73_restore_default_values();
 1011504:	495c      	ldr	r1, [pc, #368]	; (1011678 <C1219_st_7_full_write+0xe2c>)
 1011506:	4788      	blx	r1
		PFAIL_APP_vTask();
 1011508:	47c0      	blx	r8
		NIC_task();
 101150a:	47c8      	blx	r9
		OP_task();
 101150c:	47d8      	blx	fp
		WATCHDOG_APP_vRestart();
 101150e:	47b0      	blx	r6
		EVNT_APP_vClear_st_74(c1219_ptr->c1218_apl.user_id);
 1011510:	8960      	ldrh	r0, [r4, #10]
 1011512:	495a      	ldr	r1, [pc, #360]	; (101167c <C1219_st_7_full_write+0xe30>)
 1011514:	4788      	blx	r1
		NIC_task();
 1011516:	47c8      	blx	r9
		OP_task();
 1011518:	47d8      	blx	fp
		WATCHDOG_APP_vRestart();
 101151a:	47b0      	blx	r6
		EVNT_APP_bSt_75_restore_default_values();
 101151c:	4958      	ldr	r1, [pc, #352]	; (1011680 <C1219_st_7_full_write+0xe34>)
 101151e:	4788      	blx	r1
		NIC_task();
 1011520:	47c8      	blx	r9
		OP_task();
 1011522:	47d8      	blx	fp
		WATCHDOG_APP_vRestart();
 1011524:	47b0      	blx	r6
		EVNT_APP_vClear_st_76(c1219_ptr->c1218_apl.user_id);
 1011526:	8960      	ldrh	r0, [r4, #10]
 1011528:	4956      	ldr	r1, [pc, #344]	; (1011684 <C1219_st_7_full_write+0xe38>)
 101152a:	4788      	blx	r1
		PFAIL_APP_vTask();
 101152c:	47c0      	blx	r8
		NIC_task();
 101152e:	47c8      	blx	r9
		OP_task();
 1011530:	47d8      	blx	fp
		WATCHDOG_APP_vRestart();
 1011532:	47b0      	blx	r6
		SM_APP_vMt_23_restore_default_values();
 1011534:	4954      	ldr	r1, [pc, #336]	; (1011688 <C1219_st_7_full_write+0xe3c>)
 1011536:	4788      	blx	r1
		PFAIL_APP_vTask();
 1011538:	47c0      	blx	r8
		NIC_task();
 101153a:	47c8      	blx	r9
		OP_task();
 101153c:	47d8      	blx	fp
		WATCHDOG_APP_vRestart();
 101153e:	47b0      	blx	r6
		SM_APP_vMt_53_restore_default_values();
 1011540:	4952      	ldr	r1, [pc, #328]	; (101168c <C1219_st_7_full_write+0xe40>)
 1011542:	4788      	blx	r1
		PFAIL_APP_vTask();
 1011544:	47c0      	blx	r8
		NIC_task();
 1011546:	47c8      	blx	r9
		OP_task();
 1011548:	47d8      	blx	fp
		WATCHDOG_APP_vRestart();
 101154a:	47b0      	blx	r6
		EVNT_APP_bMt_73_restore_default_values();
 101154c:	4950      	ldr	r1, [pc, #320]	; (1011690 <C1219_st_7_full_write+0xe44>)
 101154e:	4788      	blx	r1
		PFAIL_APP_vTask();
 1011550:	47c0      	blx	r8
		NIC_task();
 1011552:	47c8      	blx	r9
		OP_task();
 1011554:	47d8      	blx	fp
		WATCHDOG_APP_vRestart();
 1011556:	47b0      	blx	r6
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 1011558:	6860      	ldr	r0, [r4, #4]
 101155a:	8829      	ldrh	r1, [r5, #0]
 101155c:	f880 1160 	strb.w	r1, [r0, #352]	; 0x160
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1011560:	6860      	ldr	r0, [r4, #4]
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1011562:	783d      	ldrb	r5, [r7, #0]
		c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 1011564:	9b05      	ldr	r3, [sp, #20]
		c1219_ptr->c1218_dll->st_08_length = k;
 1011566:	9a04      	ldr	r2, [sp, #16]
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1011568:	0a09      	lsrs	r1, r1, #8
 101156a:	f880 1161 	strb.w	r1, [r0, #353]	; 0x161
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 101156e:	6861      	ldr	r1, [r4, #4]
 1011570:	f881 5162 	strb.w	r5, [r1, #354]	; 0x162
		c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 1011574:	6861      	ldr	r1, [r4, #4]
 1011576:	f881 3163 	strb.w	r3, [r1, #355]	; 0x163
		c1219_ptr->c1218_dll->st_08_length = k;
 101157a:	6863      	ldr	r3, [r4, #4]
 101157c:	4c45      	ldr	r4, [pc, #276]	; (1011694 <C1219_st_7_full_write+0xe48>)
 101157e:	f8a3 21f6 	strh.w	r2, [r3, #502]	; 0x1f6
 1011582:	e005      	b.n	1011590 <C1219_st_7_full_write+0xd44>
			NIC_task();
 1011584:	47c8      	blx	r9
			PFAIL_APP_vTask();
 1011586:	47c0      	blx	r8
			WATCHDOG_APP_vRestart();
 1011588:	47b0      	blx	r6
			OP_task();
 101158a:	47d8      	blx	fp
			PFAIL_APP_vTask();
 101158c:	47c0      	blx	r8
			WATCHDOG_APP_vRestart();
 101158e:	47b0      	blx	r6
		while ( (op_c1218_apl.communication_state != BASE_STATE) || (nic_c1218_apl.communication_state != BASE_STATE) ) {
 1011590:	f89a 3000 	ldrb.w	r3, [sl]
 1011594:	2b00      	cmp	r3, #0
 1011596:	d1f5      	bne.n	1011584 <C1219_st_7_full_write+0xd38>
 1011598:	7823      	ldrb	r3, [r4, #0]
 101159a:	2b00      	cmp	r3, #0
 101159c:	d1f2      	bne.n	1011584 <C1219_st_7_full_write+0xd38>
		mcu.restart_cause = COLD_START;
 101159e:	2203      	movs	r2, #3
		mcu.save_information = false;
 10115a0:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
		mcu.restart_cause = COLD_START;
 10115a4:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
		RST_APP_vExecute_mcu_reset(mcu);
 10115a8:	981a      	ldr	r0, [sp, #104]	; 0x68
 10115aa:	4b3b      	ldr	r3, [pc, #236]	; (1011698 <C1219_st_7_full_write+0xe4c>)
 10115ac:	4798      	blx	r3
 10115ae:	f7ff b9f0 	b.w	1010992 <C1219_st_7_full_write+0x146>
	if ( c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + MP_102_PARAMETERS_SIZE) ) {
 10115b2:	6863      	ldr	r3, [r4, #4]
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 10115b4:	7839      	ldrb	r1, [r7, #0]
	if ( c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + MP_102_PARAMETERS_SIZE) ) {
 10115b6:	7b9a      	ldrb	r2, [r3, #14]
 10115b8:	2a0a      	cmp	r2, #10
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 10115ba:	f04f 0209 	mov.w	r2, #9
 10115be:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 10115c2:	6862      	ldr	r2, [r4, #4]
	if ( c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + MP_102_PARAMETERS_SIZE) ) {
 10115c4:	f47f abbd 	bne.w	1010d42 <C1219_st_7_full_write+0x4f6>
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 10115c8:	2008      	movs	r0, #8
 10115ca:	f882 0161 	strb.w	r0, [r2, #353]	; 0x161
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 10115ce:	6862      	ldr	r2, [r4, #4]
		C1218_send_ok(c1219_ptr->c1218_dll);
 10115d0:	4b32      	ldr	r3, [pc, #200]	; (101169c <C1219_st_7_full_write+0xe50>)
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 10115d2:	f882 1162 	strb.w	r1, [r2, #354]	; 0x162
		c1219_ptr->c1218_dll->st_08_data[k++] = PROC_ACCEPTED_NOT_COMPLETED;
 10115d6:	6862      	ldr	r2, [r4, #4]
 10115d8:	2101      	movs	r1, #1
 10115da:	f882 1163 	strb.w	r1, [r2, #355]	; 0x163
		c1219_ptr->c1218_dll->st_08_length = k;
 10115de:	6862      	ldr	r2, [r4, #4]
 10115e0:	2104      	movs	r1, #4
 10115e2:	f8a2 11f6 	strh.w	r1, [r2, #502]	; 0x1f6
		C1218_send_ok(c1219_ptr->c1218_dll);
 10115e6:	6860      	ldr	r0, [r4, #4]
 10115e8:	4798      	blx	r3
		if ( !meter.ed_mode.test_mode.enabled ) {
 10115ea:	4b0f      	ldr	r3, [pc, #60]	; (1011628 <C1219_st_7_full_write+0xddc>)
 10115ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 10115f0:	b90b      	cbnz	r3, 10115f6 <C1219_st_7_full_write+0xdaa>
			REGS_APP_vReset_summations();
 10115f2:	4b2b      	ldr	r3, [pc, #172]	; (10116a0 <C1219_st_7_full_write+0xe54>)
 10115f4:	4798      	blx	r3
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 10115f6:	6862      	ldr	r2, [r4, #4]
 10115f8:	882b      	ldrh	r3, [r5, #0]
 10115fa:	f882 3160 	strb.w	r3, [r2, #352]	; 0x160
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 10115fe:	6861      	ldr	r1, [r4, #4]
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1011600:	783a      	ldrb	r2, [r7, #0]
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1011602:	0a1b      	lsrs	r3, r3, #8
 1011604:	f881 3161 	strb.w	r3, [r1, #353]	; 0x161
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1011608:	6863      	ldr	r3, [r4, #4]
 101160a:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
		c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 101160e:	6863      	ldr	r3, [r4, #4]
 1011610:	2200      	movs	r2, #0
 1011612:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
		c1219_ptr->c1218_dll->st_08_length = k;	
 1011616:	6863      	ldr	r3, [r4, #4]
 1011618:	2204      	movs	r2, #4
 101161a:	f8a3 21f6 	strh.w	r2, [r3, #502]	; 0x1f6
 101161e:	f7ff b9b8 	b.w	1010992 <C1219_st_7_full_write+0x146>
 1011622:	bf00      	nop
 1011624:	200172b4 	.word	0x200172b4
 1011628:	20016c2c 	.word	0x20016c2c
 101162c:	0102ea59 	.word	0x0102ea59
 1011630:	20017150 	.word	0x20017150
 1011634:	0101603d 	.word	0x0101603d
 1011638:	01019c99 	.word	0x01019c99
 101163c:	010264f5 	.word	0x010264f5
 1011640:	0102675d 	.word	0x0102675d
 1011644:	01026b75 	.word	0x01026b75
 1011648:	01026de9 	.word	0x01026de9
 101164c:	01027531 	.word	0x01027531
 1011650:	01027ca1 	.word	0x01027ca1
 1011654:	01027dc9 	.word	0x01027dc9
 1011658:	01027f6d 	.word	0x01027f6d
 101165c:	010281fd 	.word	0x010281fd
 1011660:	0102c355 	.word	0x0102c355
 1011664:	0102bf79 	.word	0x0102bf79
 1011668:	0101b3d1 	.word	0x0101b3d1
 101166c:	0101b661 	.word	0x0101b661
 1011670:	0101ba01 	.word	0x0101ba01
 1011674:	01018461 	.word	0x01018461
 1011678:	01018755 	.word	0x01018755
 101167c:	01018ee9 	.word	0x01018ee9
 1011680:	010191e1 	.word	0x010191e1
 1011684:	010196a9 	.word	0x010196a9
 1011688:	010206b9 	.word	0x010206b9
 101168c:	01020b4d 	.word	0x01020b4d
 1011690:	01018aa5 	.word	0x01018aa5
 1011694:	20016eec 	.word	0x20016eec
 1011698:	010159f1 	.word	0x010159f1
 101169c:	01016445 	.word	0x01016445
 10116a0:	010298fd 	.word	0x010298fd
 10116a4:	01024d05 	.word	0x01024d05
 10116a8:	010244c1 	.word	0x010244c1
 10116ac:	01025bf1 	.word	0x01025bf1
 10116b0:	20016ec8 	.word	0x20016ec8
	if ( c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + MP_125_PARAMETERS_SIZE) ) {
 10116b4:	6863      	ldr	r3, [r4, #4]
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 10116b6:	7839      	ldrb	r1, [r7, #0]
	if ( c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + MP_125_PARAMETERS_SIZE) ) {
 10116b8:	7b9a      	ldrb	r2, [r3, #14]
 10116ba:	2a09      	cmp	r2, #9
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 10116bc:	f04f 027d 	mov.w	r2, #125	; 0x7d
 10116c0:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 10116c4:	6862      	ldr	r2, [r4, #4]
	if ( c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + MP_125_PARAMETERS_SIZE) ) {
 10116c6:	f47f ab3c 	bne.w	1010d42 <C1219_st_7_full_write+0x4f6>
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 10116ca:	2008      	movs	r0, #8
 10116cc:	f882 0161 	strb.w	r0, [r2, #353]	; 0x161
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 10116d0:	6862      	ldr	r2, [r4, #4]
		C1218_send_ok(c1219_ptr->c1218_dll);
 10116d2:	4b9b      	ldr	r3, [pc, #620]	; (1011940 <C1219_st_7_full_write+0x10f4>)
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 10116d4:	f882 1162 	strb.w	r1, [r2, #354]	; 0x162
		c1219_ptr->c1218_dll->st_08_data[k++] = PROC_ACCEPTED_NOT_COMPLETED;
 10116d8:	6862      	ldr	r2, [r4, #4]
 10116da:	2101      	movs	r1, #1
 10116dc:	f882 1163 	strb.w	r1, [r2, #355]	; 0x163
		c1219_ptr->c1218_dll->st_08_length = k;
 10116e0:	6862      	ldr	r2, [r4, #4]
 10116e2:	2604      	movs	r6, #4
 10116e4:	f8a2 61f6 	strh.w	r6, [r2, #502]	; 0x1f6
		C1218_send_ok(c1219_ptr->c1218_dll);
 10116e8:	6860      	ldr	r0, [r4, #4]
 10116ea:	4798      	blx	r3
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 10116ec:	6862      	ldr	r2, [r4, #4]
 10116ee:	882b      	ldrh	r3, [r5, #0]
 10116f0:	f882 3160 	strb.w	r3, [r2, #352]	; 0x160
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 10116f4:	6861      	ldr	r1, [r4, #4]
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 10116f6:	783a      	ldrb	r2, [r7, #0]
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 10116f8:	0a1b      	lsrs	r3, r3, #8
 10116fa:	f881 3161 	strb.w	r3, [r1, #353]	; 0x161
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 10116fe:	6863      	ldr	r3, [r4, #4]
 1011700:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
		c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 1011704:	6863      	ldr	r3, [r4, #4]
 1011706:	2200      	movs	r2, #0
 1011708:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
		c1219_ptr->c1218_dll->st_08_length = k;	
 101170c:	6863      	ldr	r3, [r4, #4]
 101170e:	f8a3 61f6 	strh.w	r6, [r3, #502]	; 0x1f6
 1011712:	f7ff b93e 	b.w	1010992 <C1219_st_7_full_write+0x146>
	if ( c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + MP_126_PARAMETERS_SIZE) ) {
 1011716:	6863      	ldr	r3, [r4, #4]
 1011718:	7b9a      	ldrb	r2, [r3, #14]
 101171a:	2a09      	cmp	r2, #9
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 101171c:	f04f 027e 	mov.w	r2, #126	; 0x7e
 1011720:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	if ( c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + MP_126_PARAMETERS_SIZE) ) {
 1011724:	f47f a952 	bne.w	10109cc <C1219_st_7_full_write+0x180>
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1011728:	6863      	ldr	r3, [r4, #4]
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 101172a:	7839      	ldrb	r1, [r7, #0]
		C1218_send_ok(c1219_ptr->c1218_dll);
 101172c:	4a84      	ldr	r2, [pc, #528]	; (1011940 <C1219_st_7_full_write+0x10f4>)
		meter.system_state.busy = true;
 101172e:	f8df 8220 	ldr.w	r8, [pc, #544]	; 1011950 <C1219_st_7_full_write+0x1104>
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1011732:	2008      	movs	r0, #8
 1011734:	f883 0161 	strb.w	r0, [r3, #353]	; 0x161
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1011738:	6863      	ldr	r3, [r4, #4]
 101173a:	f883 1162 	strb.w	r1, [r3, #354]	; 0x162
		c1219_ptr->c1218_dll->st_08_data[k++] = PROC_ACCEPTED_NOT_COMPLETED;
 101173e:	6863      	ldr	r3, [r4, #4]
 1011740:	2601      	movs	r6, #1
 1011742:	f883 6163 	strb.w	r6, [r3, #355]	; 0x163
		c1219_ptr->c1218_dll->st_08_length = k;
 1011746:	6863      	ldr	r3, [r4, #4]
 1011748:	f04f 0904 	mov.w	r9, #4
 101174c:	f8a3 91f6 	strh.w	r9, [r3, #502]	; 0x1f6
		C1218_send_ok(c1219_ptr->c1218_dll);
 1011750:	6860      	ldr	r0, [r4, #4]
 1011752:	4790      	blx	r2
		EEPROM_erase_all();
 1011754:	4b7b      	ldr	r3, [pc, #492]	; (1011944 <C1219_st_7_full_write+0x10f8>)
		meter.system_state.busy = true;
 1011756:	f888 6021 	strb.w	r6, [r8, #33]	; 0x21
		meter.system_state.changing_configuration = true;
 101175a:	f888 6022 	strb.w	r6, [r8, #34]	; 0x22
		EEPROM_erase_all();
 101175e:	4798      	blx	r3
		SM_APP_vLoad_c1219_tables();
 1011760:	4b79      	ldr	r3, [pc, #484]	; (1011948 <C1219_st_7_full_write+0x10fc>)
 1011762:	4798      	blx	r3
		RST_HAL_vExecute_software_reset();
 1011764:	4b79      	ldr	r3, [pc, #484]	; (101194c <C1219_st_7_full_write+0x1100>)
 1011766:	4798      	blx	r3
		meter.system_state.busy = false;
 1011768:	f888 a021 	strb.w	sl, [r8, #33]	; 0x21
		meter.system_state.changing_configuration = false;
 101176c:	f888 a022 	strb.w	sl, [r8, #34]	; 0x22
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 1011770:	6862      	ldr	r2, [r4, #4]
 1011772:	882b      	ldrh	r3, [r5, #0]
 1011774:	f882 3160 	strb.w	r3, [r2, #352]	; 0x160
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1011778:	6861      	ldr	r1, [r4, #4]
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 101177a:	783a      	ldrb	r2, [r7, #0]
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 101177c:	0a1b      	lsrs	r3, r3, #8
 101177e:	f881 3161 	strb.w	r3, [r1, #353]	; 0x161
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1011782:	6863      	ldr	r3, [r4, #4]
 1011784:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
		c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 1011788:	6863      	ldr	r3, [r4, #4]
 101178a:	f883 a163 	strb.w	sl, [r3, #355]	; 0x163
		c1219_ptr->c1218_dll->st_08_length = k;	
 101178e:	6863      	ldr	r3, [r4, #4]
 1011790:	f8a3 91f6 	strh.w	r9, [r3, #502]	; 0x1f6
 1011794:	f7ff b8fd 	b.w	1010992 <C1219_st_7_full_write+0x146>
	if ( c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + MP_103_PARAMETERS_SIZE) ) {
 1011798:	6863      	ldr	r3, [r4, #4]
 101179a:	7b9a      	ldrb	r2, [r3, #14]
 101179c:	2a11      	cmp	r2, #17
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 101179e:	f04f 0267 	mov.w	r2, #103	; 0x67
 10117a2:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	if ( c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + MP_103_PARAMETERS_SIZE) ) {
 10117a6:	f47f a911 	bne.w	10109cc <C1219_st_7_full_write+0x180>
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 10117aa:	6863      	ldr	r3, [r4, #4]
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 10117ac:	7838      	ldrb	r0, [r7, #0]
		meter.voltage_lower_limit  = (uint32_t)(c1219_ptr->c1218_dll->rx_data[SET_LOW_VOLTAGE_INDEX + 0]);
 10117ae:	4a68      	ldr	r2, [pc, #416]	; (1011950 <C1219_st_7_full_write+0x1104>)
		SM_APP_vMt_23_write_eeprom_values();
 10117b0:	4968      	ldr	r1, [pc, #416]	; (1011954 <C1219_st_7_full_write+0x1108>)
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 10117b2:	2508      	movs	r5, #8
 10117b4:	f883 5161 	strb.w	r5, [r3, #353]	; 0x161
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 10117b8:	6863      	ldr	r3, [r4, #4]
 10117ba:	f883 0162 	strb.w	r0, [r3, #354]	; 0x162
		c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 10117be:	6863      	ldr	r3, [r4, #4]
 10117c0:	f883 a163 	strb.w	sl, [r3, #355]	; 0x163
		c1219_ptr->c1218_dll->st_08_length = k;
 10117c4:	6863      	ldr	r3, [r4, #4]
 10117c6:	2004      	movs	r0, #4
 10117c8:	f8a3 01f6 	strh.w	r0, [r3, #502]	; 0x1f6
		meter.voltage_lower_limit  = (uint32_t)(c1219_ptr->c1218_dll->rx_data[SET_LOW_VOLTAGE_INDEX + 0]);
 10117cc:	6863      	ldr	r3, [r4, #4]
 10117ce:	689b      	ldr	r3, [r3, #8]
 10117d0:	7a1b      	ldrb	r3, [r3, #8]
 10117d2:	6453      	str	r3, [r2, #68]	; 0x44
		meter.voltage_lower_limit |= (uint32_t)(c1219_ptr->c1218_dll->rx_data[SET_LOW_VOLTAGE_INDEX + 1] << 8);
 10117d4:	6860      	ldr	r0, [r4, #4]
 10117d6:	6880      	ldr	r0, [r0, #8]
 10117d8:	7a40      	ldrb	r0, [r0, #9]
 10117da:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 10117de:	6453      	str	r3, [r2, #68]	; 0x44
		meter.voltage_lower_limit |= (uint32_t)(c1219_ptr->c1218_dll->rx_data[SET_LOW_VOLTAGE_INDEX + 2] << 16);
 10117e0:	6860      	ldr	r0, [r4, #4]
 10117e2:	6880      	ldr	r0, [r0, #8]
 10117e4:	7a80      	ldrb	r0, [r0, #10]
 10117e6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 10117ea:	6453      	str	r3, [r2, #68]	; 0x44
		meter.voltage_lower_limit |= (uint32_t)(c1219_ptr->c1218_dll->rx_data[SET_LOW_VOLTAGE_INDEX + 3] << 24);
 10117ec:	6860      	ldr	r0, [r4, #4]
 10117ee:	6880      	ldr	r0, [r0, #8]
 10117f0:	7ac0      	ldrb	r0, [r0, #11]
 10117f2:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 10117f6:	6453      	str	r3, [r2, #68]	; 0x44
		meter.voltage_upper_limit  = (uint32_t)(c1219_ptr->c1218_dll->rx_data[SET_HIGH_VOLTAGE_INDEX + 0]);
 10117f8:	6863      	ldr	r3, [r4, #4]
 10117fa:	689b      	ldr	r3, [r3, #8]
 10117fc:	7b1b      	ldrb	r3, [r3, #12]
 10117fe:	6493      	str	r3, [r2, #72]	; 0x48
		meter.voltage_upper_limit |= (uint32_t)(c1219_ptr->c1218_dll->rx_data[SET_HIGH_VOLTAGE_INDEX + 1] << 8);
 1011800:	6860      	ldr	r0, [r4, #4]
 1011802:	6880      	ldr	r0, [r0, #8]
 1011804:	7b40      	ldrb	r0, [r0, #13]
 1011806:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 101180a:	6493      	str	r3, [r2, #72]	; 0x48
		meter.voltage_upper_limit |= (uint32_t)(c1219_ptr->c1218_dll->rx_data[SET_HIGH_VOLTAGE_INDEX + 2] << 16);
 101180c:	6860      	ldr	r0, [r4, #4]
 101180e:	6880      	ldr	r0, [r0, #8]
 1011810:	7b80      	ldrb	r0, [r0, #14]
 1011812:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 1011816:	6493      	str	r3, [r2, #72]	; 0x48
		meter.voltage_upper_limit |= (uint32_t)(c1219_ptr->c1218_dll->rx_data[SET_HIGH_VOLTAGE_INDEX + 3] << 24);
 1011818:	6860      	ldr	r0, [r4, #4]
 101181a:	6880      	ldr	r0, [r0, #8]
 101181c:	7bc0      	ldrb	r0, [r0, #15]
 101181e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 1011822:	6493      	str	r3, [r2, #72]	; 0x48
		SM_APP_vMt_23_write_eeprom_values();
 1011824:	4788      	blx	r1
		C1218_send_ok(c1219_ptr->c1218_dll);
 1011826:	6860      	ldr	r0, [r4, #4]
 1011828:	4b45      	ldr	r3, [pc, #276]	; (1011940 <C1219_st_7_full_write+0x10f4>)
 101182a:	4798      	blx	r3
 101182c:	f7ff b8b1 	b.w	1010992 <C1219_st_7_full_write+0x146>
	if ( c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + MP_122_PARAMETERS_SIZE) ) {
 1011830:	6863      	ldr	r3, [r4, #4]
 1011832:	7b9a      	ldrb	r2, [r3, #14]
 1011834:	2a0b      	cmp	r2, #11
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 1011836:	f04f 027a 	mov.w	r2, #122	; 0x7a
 101183a:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	if ( c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + MP_122_PARAMETERS_SIZE) ) {
 101183e:	f47f a8c5 	bne.w	10109cc <C1219_st_7_full_write+0x180>
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1011842:	6863      	ldr	r3, [r4, #4]
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1011844:	783a      	ldrb	r2, [r7, #0]
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1011846:	2108      	movs	r1, #8
 1011848:	f883 1161 	strb.w	r1, [r3, #353]	; 0x161
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 101184c:	6863      	ldr	r3, [r4, #4]
 101184e:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
		c1219_ptr->c1218_dll->st_08_data[k++] = PROC_ACCEPTED_NOT_COMPLETED;
 1011852:	6863      	ldr	r3, [r4, #4]
 1011854:	2101      	movs	r1, #1
 1011856:	f883 1163 	strb.w	r1, [r3, #355]	; 0x163
		c1219_ptr->c1218_dll->st_08_length = k;
 101185a:	6863      	ldr	r3, [r4, #4]
 101185c:	2104      	movs	r1, #4
 101185e:	f8a3 11f6 	strh.w	r1, [r3, #502]	; 0x1f6
		table_selected  = ( c1219_ptr->c1218_dll->rx_data[TABLE_ID_INDEX + 0] << 0 );
 1011862:	6861      	ldr	r1, [r4, #4]
 1011864:	688b      	ldr	r3, [r1, #8]
		table_selected |= ( c1219_ptr->c1218_dll->rx_data[TABLE_ID_INDEX + 1] << 8 );
 1011866:	7a58      	ldrb	r0, [r3, #9]
 1011868:	7a1b      	ldrb	r3, [r3, #8]
 101186a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
		switch (table_selected) {
 101186e:	b21b      	sxth	r3, r3
 1011870:	2b2c      	cmp	r3, #44	; 0x2c
 1011872:	f000 87bc 	beq.w	10127ee <C1219_st_7_full_write+0x1fa2>
 1011876:	f300 8224 	bgt.w	1011cc2 <C1219_st_7_full_write+0x1476>
 101187a:	2b17      	cmp	r3, #23
 101187c:	f000 87c0 	beq.w	1012800 <C1219_st_7_full_write+0x1fb4>
 1011880:	f300 84c1 	bgt.w	1012206 <C1219_st_7_full_write+0x19ba>
 1011884:	2b0b      	cmp	r3, #11
 1011886:	f001 800d 	beq.w	10128a4 <C1219_st_7_full_write+0x2058>
 101188a:	f300 8661 	bgt.w	1012550 <C1219_st_7_full_write+0x1d04>
 101188e:	2b03      	cmp	r3, #3
 1011890:	f000 87ca 	beq.w	1012828 <C1219_st_7_full_write+0x1fdc>
 1011894:	2b06      	cmp	r3, #6
 1011896:	f000 87c3 	beq.w	1012820 <C1219_st_7_full_write+0x1fd4>
 101189a:	2b01      	cmp	r3, #1
 101189c:	f000 87e1 	beq.w	1012862 <C1219_st_7_full_write+0x2016>
			c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 10118a0:	237a      	movs	r3, #122	; 0x7a
 10118a2:	f881 3160 	strb.w	r3, [r1, #352]	; 0x160
			c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 10118a6:	6863      	ldr	r3, [r4, #4]
 10118a8:	2108      	movs	r1, #8
 10118aa:	f883 1161 	strb.w	r1, [r3, #353]	; 0x161
			c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 10118ae:	6863      	ldr	r3, [r4, #4]
 10118b0:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
			c1219_ptr->c1218_dll->st_08_data[k++] = INVALID_PARAMETER;
 10118b4:	6863      	ldr	r3, [r4, #4]
 10118b6:	2202      	movs	r2, #2
 10118b8:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
			c1219_ptr->c1218_dll->st_08_length = k;
 10118bc:	6863      	ldr	r3, [r4, #4]
 10118be:	2204      	movs	r2, #4
 10118c0:	f8a3 21f6 	strh.w	r2, [r3, #502]	; 0x1f6
 10118c4:	6860      	ldr	r0, [r4, #4]
		C1218_send_ok(c1219_ptr->c1218_dll);
 10118c6:	4b1e      	ldr	r3, [pc, #120]	; (1011940 <C1219_st_7_full_write+0x10f4>)
 10118c8:	4798      	blx	r3
 10118ca:	f7ff b862 	b.w	1010992 <C1219_st_7_full_write+0x146>
	if ( c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + SP_9_PARAMETERS_SIZE) ) {
 10118ce:	6863      	ldr	r3, [r4, #4]
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 10118d0:	7839      	ldrb	r1, [r7, #0]
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 10118d2:	f883 9160 	strb.w	r9, [r3, #352]	; 0x160
	if ( c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + SP_9_PARAMETERS_SIZE) ) {
 10118d6:	7b9a      	ldrb	r2, [r3, #14]
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 10118d8:	6863      	ldr	r3, [r4, #4]
	if ( c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + SP_9_PARAMETERS_SIZE) ) {
 10118da:	2a0a      	cmp	r2, #10
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 10118dc:	f883 a161 	strb.w	sl, [r3, #353]	; 0x161
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 10118e0:	6862      	ldr	r2, [r4, #4]
	if ( c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + SP_9_PARAMETERS_SIZE) ) {
 10118e2:	f47f ab4a 	bne.w	1010f7a <C1219_st_7_full_write+0x72e>
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 10118e6:	f882 1162 	strb.w	r1, [r2, #354]	; 0x162
		c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 10118ea:	6862      	ldr	r2, [r4, #4]
		uint8_t curr_season = TOU_APP_ucGet_current_season();
 10118ec:	4b1a      	ldr	r3, [pc, #104]	; (1011958 <C1219_st_7_full_write+0x110c>)
		c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 10118ee:	f882 a163 	strb.w	sl, [r2, #355]	; 0x163
		c1219_ptr->c1218_dll->st_08_length = k;
 10118f2:	6862      	ldr	r2, [r4, #4]
 10118f4:	2104      	movs	r1, #4
 10118f6:	f8a2 11f6 	strh.w	r1, [r2, #502]	; 0x1f6
		uint8_t curr_season = TOU_APP_ucGet_current_season();
 10118fa:	4798      	blx	r3
		REGS_APP_vCopy_st_23();
 10118fc:	4b17      	ldr	r3, [pc, #92]	; (101195c <C1219_st_7_full_write+0x1110>)
		uint32_t timestamp = rtc.utc_timestamp;
 10118fe:	6875      	ldr	r5, [r6, #4]
		uint8_t curr_season = TOU_APP_ucGet_current_season();
 1011900:	4607      	mov	r7, r0
		REGS_APP_vCopy_st_23();
 1011902:	4798      	blx	r3
		if ( (c1219_ptr->c1218_dll->rx_data[SP_9_ACTION_FLAG_INDEX_bm] & SP_9_SELF_READ_FLAG_bm) == SP_9_SELF_READ_FLAG_bm )
 1011904:	6860      	ldr	r0, [r4, #4]
 1011906:	6883      	ldr	r3, [r0, #8]
 1011908:	7a1b      	ldrb	r3, [r3, #8]
 101190a:	0799      	lsls	r1, r3, #30
 101190c:	f100 84f8 	bmi.w	1012300 <C1219_st_7_full_write+0x1ab4>
		if ( (c1219_ptr->c1218_dll->rx_data[SP_9_ACTION_FLAG_INDEX_bm] & SP_9_DEMAND_RESET_FLAG_bm) == SP_9_DEMAND_RESET_FLAG_bm )
 1011910:	07da      	lsls	r2, r3, #31
 1011912:	f100 84e1 	bmi.w	10122d8 <C1219_st_7_full_write+0x1a8c>
		if ( (c1219_ptr->c1218_dll->rx_data[SP_9_ACTION_FLAG_INDEX_bm] & SP_9_SEASON_CHANGE_FLAG_bm) == SP_9_SEASON_CHANGE_FLAG_bm )
 1011916:	075b      	lsls	r3, r3, #29
 1011918:	d5d5      	bpl.n	10118c6 <C1219_st_7_full_write+0x107a>
			TOU_APP_vSeason_change(c1219_ptr->c1218_apl.user_id, curr_season, timestamp);
 101191a:	4639      	mov	r1, r7
 101191c:	8960      	ldrh	r0, [r4, #10]
 101191e:	4b10      	ldr	r3, [pc, #64]	; (1011960 <C1219_st_7_full_write+0x1114>)
 1011920:	462a      	mov	r2, r5
 1011922:	4798      	blx	r3
			curr_season = (c1219_ptr->c1218_dll->rx_data[SP_9_ACTION_FLAG_INDEX_bm] & SP_9_NEW_SEASON_bm) >> SP_9_NEW_SEASON_bp;
 1011924:	6862      	ldr	r2, [r4, #4]
			TOU_APP_vTask();
 1011926:	4b0f      	ldr	r3, [pc, #60]	; (1011964 <C1219_st_7_full_write+0x1118>)
			curr_season = (c1219_ptr->c1218_dll->rx_data[SP_9_ACTION_FLAG_INDEX_bm] & SP_9_NEW_SEASON_bm) >> SP_9_NEW_SEASON_bp;
 1011928:	6892      	ldr	r2, [r2, #8]
 101192a:	7a16      	ldrb	r6, [r2, #8]
 101192c:	f3c6 06c3 	ubfx	r6, r6, #3, #4
			TOU_APP_vTask();
 1011930:	4798      	blx	r3
			EVNT_APP_vRegister_event(SEASON_CHANGES, curr_season, true, c1219_ptr->c1218_apl.user_id, timestamp);
 1011932:	8963      	ldrh	r3, [r4, #10]
 1011934:	9500      	str	r5, [sp, #0]
 1011936:	4631      	mov	r1, r6
 1011938:	2201      	movs	r2, #1
 101193a:	2018      	movs	r0, #24
 101193c:	47c0      	blx	r8
 101193e:	e7c1      	b.n	10118c4 <C1219_st_7_full_write+0x1078>
 1011940:	01016445 	.word	0x01016445
 1011944:	01017519 	.word	0x01017519
 1011948:	01020be9 	.word	0x01020be9
 101194c:	010159a1 	.word	0x010159a1
 1011950:	20016c2c 	.word	0x20016c2c
 1011954:	01020621 	.word	0x01020621
 1011958:	0102d2c9 	.word	0x0102d2c9
 101195c:	01029db5 	.word	0x01029db5
 1011960:	0102c5c1 	.word	0x0102c5c1
 1011964:	0102c761 	.word	0x0102c761
	if ( c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + MP_111_PARAMETERS_SIZE) ) {
 1011968:	6863      	ldr	r3, [r4, #4]
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 101196a:	7839      	ldrb	r1, [r7, #0]
	if ( c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + MP_111_PARAMETERS_SIZE) ) {
 101196c:	7b9a      	ldrb	r2, [r3, #14]
 101196e:	2a09      	cmp	r2, #9
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 1011970:	f04f 026f 	mov.w	r2, #111	; 0x6f
 1011974:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1011978:	6862      	ldr	r2, [r4, #4]
	if ( c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + MP_111_PARAMETERS_SIZE) ) {
 101197a:	f47f a9e2 	bne.w	1010d42 <C1219_st_7_full_write+0x4f6>
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 101197e:	2008      	movs	r0, #8
 1011980:	f882 0161 	strb.w	r0, [r2, #353]	; 0x161
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1011984:	6862      	ldr	r2, [r4, #4]
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bBack_up_cal_m_ia();
 1011986:	4b9f      	ldr	r3, [pc, #636]	; (1011c04 <C1219_st_7_full_write+0x13b8>)
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1011988:	f882 1162 	strb.w	r1, [r2, #354]	; 0x162
		c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 101198c:	6862      	ldr	r2, [r4, #4]
 101198e:	2100      	movs	r1, #0
 1011990:	f882 1163 	strb.w	r1, [r2, #355]	; 0x163
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bBack_up_cal_m_ia();
 1011994:	6865      	ldr	r5, [r4, #4]
 1011996:	4798      	blx	r3
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bBack_up_cal_m_va();
 1011998:	4b9b      	ldr	r3, [pc, #620]	; (1011c08 <C1219_st_7_full_write+0x13bc>)
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bBack_up_cal_m_ia();
 101199a:	f885 0164 	strb.w	r0, [r5, #356]	; 0x164
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bBack_up_cal_m_va();
 101199e:	6865      	ldr	r5, [r4, #4]
 10119a0:	4798      	blx	r3
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bBack_up_cal_ph_ia();
 10119a2:	4b9a      	ldr	r3, [pc, #616]	; (1011c0c <C1219_st_7_full_write+0x13c0>)
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bBack_up_cal_m_va();
 10119a4:	f885 0165 	strb.w	r0, [r5, #357]	; 0x165
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bBack_up_cal_ph_ia();
 10119a8:	6865      	ldr	r5, [r4, #4]
 10119aa:	4798      	blx	r3
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bBack_up_cal_m_ib();
 10119ac:	4b98      	ldr	r3, [pc, #608]	; (1011c10 <C1219_st_7_full_write+0x13c4>)
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bBack_up_cal_ph_ia();
 10119ae:	f885 0166 	strb.w	r0, [r5, #358]	; 0x166
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bBack_up_cal_m_ib();
 10119b2:	6865      	ldr	r5, [r4, #4]
 10119b4:	4798      	blx	r3
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bBack_up_cal_m_vb();
 10119b6:	4b97      	ldr	r3, [pc, #604]	; (1011c14 <C1219_st_7_full_write+0x13c8>)
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bBack_up_cal_m_ib();
 10119b8:	f885 0167 	strb.w	r0, [r5, #359]	; 0x167
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bBack_up_cal_m_vb();
 10119bc:	6865      	ldr	r5, [r4, #4]
 10119be:	4798      	blx	r3
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bBack_up_cal_ph_ib();
 10119c0:	4b95      	ldr	r3, [pc, #596]	; (1011c18 <C1219_st_7_full_write+0x13cc>)
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bBack_up_cal_m_vb();
 10119c2:	f885 0168 	strb.w	r0, [r5, #360]	; 0x168
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bBack_up_cal_ph_ib();
 10119c6:	6865      	ldr	r5, [r4, #4]
 10119c8:	4798      	blx	r3
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bBack_up_cal_m_ic();
 10119ca:	4b94      	ldr	r3, [pc, #592]	; (1011c1c <C1219_st_7_full_write+0x13d0>)
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bBack_up_cal_ph_ib();
 10119cc:	f885 0169 	strb.w	r0, [r5, #361]	; 0x169
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bBack_up_cal_m_ic();
 10119d0:	6865      	ldr	r5, [r4, #4]
 10119d2:	4798      	blx	r3
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bBack_up_cal_m_vc();
 10119d4:	4b92      	ldr	r3, [pc, #584]	; (1011c20 <C1219_st_7_full_write+0x13d4>)
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bBack_up_cal_m_ic();
 10119d6:	f885 016a 	strb.w	r0, [r5, #362]	; 0x16a
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bBack_up_cal_m_vc();
 10119da:	6865      	ldr	r5, [r4, #4]
 10119dc:	4798      	blx	r3
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bBack_up_cal_ph_ic();
 10119de:	4b91      	ldr	r3, [pc, #580]	; (1011c24 <C1219_st_7_full_write+0x13d8>)
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bBack_up_cal_m_vc();
 10119e0:	f885 016b 	strb.w	r0, [r5, #363]	; 0x16b
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)METROLOGY_APP_bBack_up_cal_ph_ic();
 10119e4:	6865      	ldr	r5, [r4, #4]
 10119e6:	4798      	blx	r3
 10119e8:	f7ff b98a 	b.w	1010d00 <C1219_st_7_full_write+0x4b4>
	if (c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + SP_5_PARAMETERS_SIZE) ) {
 10119ec:	6863      	ldr	r3, [r4, #4]
 10119ee:	7b9a      	ldrb	r2, [r3, #14]
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 10119f0:	f883 9160 	strb.w	r9, [r3, #352]	; 0x160
	if (c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + SP_5_PARAMETERS_SIZE) ) {
 10119f4:	2a0c      	cmp	r2, #12
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 10119f6:	6863      	ldr	r3, [r4, #4]
	if (c1219_ptr->c1218_dll->rx_data_bytes == (C1218_FULL_WRITE_OVERHEAD_SIZE + PROCEDURE_OVERHEAD_SIZE + SP_5_PARAMETERS_SIZE) ) {
 10119f8:	f47f ab3c 	bne.w	1011074 <C1219_st_7_full_write+0x828>
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 10119fc:	f883 a161 	strb.w	sl, [r3, #353]	; 0x161
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1011a00:	6863      	ldr	r3, [r4, #4]
 1011a02:	783a      	ldrb	r2, [r7, #0]
 1011a04:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
		entries_read  = (uint16_t)(c1219_ptr->c1218_dll->rx_data[SP_5_ENTRIES_READ_INDEX]);
 1011a08:	6862      	ldr	r2, [r4, #4]
 1011a0a:	6893      	ldr	r3, [r2, #8]
		entries_read |= (uint16_t)(c1219_ptr->c1218_dll->rx_data[SP_5_ENTRIES_READ_INDEX + 1] << 8);
 1011a0c:	f8b3 1009 	ldrh.w	r1, [r3, #9]
 1011a10:	f8ad 1068 	strh.w	r1, [sp, #104]	; 0x68
		switch ( c1219_ptr->c1218_dll->rx_data[SP_5_LIST_INDEX] ) {
 1011a14:	7a1b      	ldrb	r3, [r3, #8]
 1011a16:	2b07      	cmp	r3, #7
 1011a18:	d020      	beq.n	1011a5c <C1219_st_7_full_write+0x1210>
 1011a1a:	f240 817f 	bls.w	1011d1c <C1219_st_7_full_write+0x14d0>
 1011a1e:	2b0b      	cmp	r3, #11
 1011a20:	d01c      	beq.n	1011a5c <C1219_st_7_full_write+0x1210>
 1011a22:	d81b      	bhi.n	1011a5c <C1219_st_7_full_write+0x1210>
 1011a24:	2b09      	cmp	r3, #9
 1011a26:	d019      	beq.n	1011a5c <C1219_st_7_full_write+0x1210>
 1011a28:	d818      	bhi.n	1011a5c <C1219_st_7_full_write+0x1210>
				EEPROM_writer( ST_76_NBR_UNREAD_ENTRIES_ADDR, &entries_read, 2 );
 1011a2a:	2202      	movs	r2, #2
 1011a2c:	a91a      	add	r1, sp, #104	; 0x68
 1011a2e:	f647 50d2 	movw	r0, #32210	; 0x7dd2
					EEPROM_writer( ST_26_NBR_UNREAD_ENTRIES_ADDR, &entries_read, 1 );
 1011a32:	4b7d      	ldr	r3, [pc, #500]	; (1011c28 <C1219_st_7_full_write+0x13dc>)
 1011a34:	4798      	blx	r3
					c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 1011a36:	6863      	ldr	r3, [r4, #4]
 1011a38:	2200      	movs	r2, #0
 1011a3a:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
		c1219_ptr->c1218_dll->st_08_length = k;
 1011a3e:	6862      	ldr	r2, [r4, #4]
		C1218_send_ok(c1219_ptr->c1218_dll);
 1011a40:	4b7a      	ldr	r3, [pc, #488]	; (1011c2c <C1219_st_7_full_write+0x13e0>)
		c1219_ptr->c1218_dll->st_08_length = k;
 1011a42:	2104      	movs	r1, #4
 1011a44:	f8a2 11f6 	strh.w	r1, [r2, #502]	; 0x1f6
		C1218_send_ok(c1219_ptr->c1218_dll);
 1011a48:	6860      	ldr	r0, [r4, #4]
 1011a4a:	4798      	blx	r3
 1011a4c:	f7fe bfa1 	b.w	1010992 <C1219_st_7_full_write+0x146>
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 1011a50:	220a      	movs	r2, #10
 1011a52:	f7fe bf94 	b.w	101097e <C1219_st_7_full_write+0x132>
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 1011a56:	2206      	movs	r2, #6
 1011a58:	f7fe bfb6 	b.w	10109c8 <C1219_st_7_full_write+0x17c>
				c1219_ptr->c1218_dll->st_08_data[k++] = INVALID_PARAMETER;
 1011a5c:	2302      	movs	r3, #2
 1011a5e:	f882 3163 	strb.w	r3, [r2, #355]	; 0x163
 1011a62:	e7ec      	b.n	1011a3e <C1219_st_7_full_write+0x11f2>
 1011a64:	9c09      	ldr	r4, [sp, #36]	; 0x24
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 1011a66:	882b      	ldrh	r3, [r5, #0]
 1011a68:	6862      	ldr	r2, [r4, #4]
		memcpy( &c1219_ptr->c1218_dll->st_08_data[k], &backup_result[0], j);
 1011a6a:	9d08      	ldr	r5, [sp, #32]
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 1011a6c:	f882 3160 	strb.w	r3, [r2, #352]	; 0x160
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1011a70:	6861      	ldr	r1, [r4, #4]
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1011a72:	783a      	ldrb	r2, [r7, #0]
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1011a74:	0a1b      	lsrs	r3, r3, #8
 1011a76:	f881 3161 	strb.w	r3, [r1, #353]	; 0x161
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1011a7a:	6863      	ldr	r3, [r4, #4]
 1011a7c:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
		c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 1011a80:	6863      	ldr	r3, [r4, #4]
 1011a82:	2200      	movs	r2, #0
 1011a84:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
		memcpy( &c1219_ptr->c1218_dll->st_08_data[k], &backup_result[0], j);
 1011a88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 1011a8a:	6867      	ldr	r7, [r4, #4]
 1011a8c:	f8c7 0164 	str.w	r0, [r7, #356]	; 0x164
 1011a90:	f8c7 1168 	str.w	r1, [r7, #360]	; 0x168
 1011a94:	cd03      	ldmia	r5!, {r0, r1}
 1011a96:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 1011a9a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 1011a9e:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
 1011aa2:	f8c7 1178 	str.w	r1, [r7, #376]	; 0x178
		c1219_ptr->c1218_dll->st_08_length = k;	
 1011aa6:	6863      	ldr	r3, [r4, #4]
 1011aa8:	221c      	movs	r2, #28
 1011aaa:	f8a3 21f6 	strh.w	r2, [r3, #502]	; 0x1f6
 1011aae:	f7fe bf70 	b.w	1010992 <C1219_st_7_full_write+0x146>
 1011ab2:	f8dd 8018 	ldr.w	r8, [sp, #24]
 1011ab6:	f8dd b010 	ldr.w	fp, [sp, #16]
 1011aba:	f8dd 9014 	ldr.w	r9, [sp, #20]
		GRAL_APP_bSt_3_restore_default_values();
 1011abe:	4b5c      	ldr	r3, [pc, #368]	; (1011c30 <C1219_st_7_full_write+0x13e4>)
 1011ac0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 1011ac2:	f8df a198 	ldr.w	sl, [pc, #408]	; 1011c5c <C1219_st_7_full_write+0x1410>
 1011ac6:	4798      	blx	r3
		NIC_task();
 1011ac8:	47c8      	blx	r9
		PFAIL_APP_vTask();
 1011aca:	47c0      	blx	r8
		WATCHDOG_APP_vRestart();
 1011acc:	47b0      	blx	r6
		OP_task();
 1011ace:	47d8      	blx	fp
		PFAIL_APP_vTask();
 1011ad0:	47c0      	blx	r8
		WATCHDOG_APP_vRestart();
 1011ad2:	47b0      	blx	r6
		REGS_APP_vClear_st_23();
 1011ad4:	4b57      	ldr	r3, [pc, #348]	; (1011c34 <C1219_st_7_full_write+0x13e8>)
 1011ad6:	4798      	blx	r3
		NIC_task();
 1011ad8:	47c8      	blx	r9
		PFAIL_APP_vTask();
 1011ada:	47c0      	blx	r8
		WATCHDOG_APP_vRestart();
 1011adc:	47b0      	blx	r6
		OP_task();
 1011ade:	47d8      	blx	fp
		PFAIL_APP_vTask();
 1011ae0:	47c0      	blx	r8
		WATCHDOG_APP_vRestart();
 1011ae2:	47b0      	blx	r6
		REGS_APP_vClear_st_24();
 1011ae4:	4b54      	ldr	r3, [pc, #336]	; (1011c38 <C1219_st_7_full_write+0x13ec>)
 1011ae6:	4798      	blx	r3
		NIC_task();
 1011ae8:	47c8      	blx	r9
		PFAIL_APP_vTask();
 1011aea:	47c0      	blx	r8
		WATCHDOG_APP_vRestart();
 1011aec:	47b0      	blx	r6
		OP_task();
 1011aee:	47d8      	blx	fp
		PFAIL_APP_vTask();
 1011af0:	47c0      	blx	r8
		WATCHDOG_APP_vRestart();
 1011af2:	47b0      	blx	r6
		REGS_APP_vClear_st_25();
 1011af4:	4b51      	ldr	r3, [pc, #324]	; (1011c3c <C1219_st_7_full_write+0x13f0>)
 1011af6:	4798      	blx	r3
		NIC_task();
 1011af8:	47c8      	blx	r9
		PFAIL_APP_vTask();
 1011afa:	47c0      	blx	r8
		WATCHDOG_APP_vRestart();
 1011afc:	47b0      	blx	r6
		OP_task();
 1011afe:	47d8      	blx	fp
		PFAIL_APP_vTask();
 1011b00:	47c0      	blx	r8
		WATCHDOG_APP_vRestart();
 1011b02:	47b0      	blx	r6
		REGS_APP_vClear_st_26();
 1011b04:	4b4e      	ldr	r3, [pc, #312]	; (1011c40 <C1219_st_7_full_write+0x13f4>)
 1011b06:	4798      	blx	r3
		NIC_task();
 1011b08:	47c8      	blx	r9
		PFAIL_APP_vTask();
 1011b0a:	47c0      	blx	r8
		WATCHDOG_APP_vRestart();
 1011b0c:	47b0      	blx	r6
		OP_task();
 1011b0e:	47d8      	blx	fp
		PFAIL_APP_vTask();
 1011b10:	47c0      	blx	r8
		WATCHDOG_APP_vRestart();
 1011b12:	47b0      	blx	r6
		LP_APP_bSt_63_restore_default_values();
 1011b14:	4b4b      	ldr	r3, [pc, #300]	; (1011c44 <C1219_st_7_full_write+0x13f8>)
 1011b16:	4798      	blx	r3
		NIC_task();
 1011b18:	47c8      	blx	r9
		PFAIL_APP_vTask();
 1011b1a:	47c0      	blx	r8
		WATCHDOG_APP_vRestart();
 1011b1c:	47b0      	blx	r6
		OP_task();
 1011b1e:	47d8      	blx	fp
		PFAIL_APP_vTask();
 1011b20:	47c0      	blx	r8
		WATCHDOG_APP_vRestart();
 1011b22:	47b0      	blx	r6
		EVNT_APP_vClear_st_74(c1219_ptr->c1218_apl.user_id);
 1011b24:	8960      	ldrh	r0, [r4, #10]
 1011b26:	4b48      	ldr	r3, [pc, #288]	; (1011c48 <C1219_st_7_full_write+0x13fc>)
 1011b28:	4798      	blx	r3
		NIC_task();
 1011b2a:	47c8      	blx	r9
		PFAIL_APP_vTask();
 1011b2c:	47c0      	blx	r8
		WATCHDOG_APP_vRestart();
 1011b2e:	47b0      	blx	r6
		OP_task();
 1011b30:	47d8      	blx	fp
		PFAIL_APP_vTask();
 1011b32:	47c0      	blx	r8
		WATCHDOG_APP_vRestart();
 1011b34:	47b0      	blx	r6
		EVNT_APP_vClear_st_76(c1219_ptr->c1218_apl.user_id);
 1011b36:	8960      	ldrh	r0, [r4, #10]
 1011b38:	4b44      	ldr	r3, [pc, #272]	; (1011c4c <C1219_st_7_full_write+0x1400>)
 1011b3a:	4798      	blx	r3
		NIC_task();
 1011b3c:	47c8      	blx	r9
		PFAIL_APP_vTask();
 1011b3e:	47c0      	blx	r8
		WATCHDOG_APP_vRestart();
 1011b40:	47b0      	blx	r6
		OP_task();
 1011b42:	47d8      	blx	fp
		PFAIL_APP_vTask();
 1011b44:	47c0      	blx	r8
		WATCHDOG_APP_vRestart();
 1011b46:	47b0      	blx	r6
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 1011b48:	6862      	ldr	r2, [r4, #4]
 1011b4a:	882b      	ldrh	r3, [r5, #0]
 1011b4c:	f882 3160 	strb.w	r3, [r2, #352]	; 0x160
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1011b50:	6861      	ldr	r1, [r4, #4]
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1011b52:	783a      	ldrb	r2, [r7, #0]
		memcpy( &c1219_ptr->c1218_dll->st_08_data[k], &backup_result[0], j);
 1011b54:	9d08      	ldr	r5, [sp, #32]
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1011b56:	0a1b      	lsrs	r3, r3, #8
 1011b58:	f881 3161 	strb.w	r3, [r1, #353]	; 0x161
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1011b5c:	6863      	ldr	r3, [r4, #4]
 1011b5e:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
		c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 1011b62:	6863      	ldr	r3, [r4, #4]
 1011b64:	2200      	movs	r2, #0
 1011b66:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
		memcpy( &c1219_ptr->c1218_dll->st_08_data[k], &backup_result[0], j);
 1011b6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 1011b6c:	6867      	ldr	r7, [r4, #4]
 1011b6e:	f8c7 0164 	str.w	r0, [r7, #356]	; 0x164
 1011b72:	f8c7 1168 	str.w	r1, [r7, #360]	; 0x168
 1011b76:	cd03      	ldmia	r5!, {r0, r1}
 1011b78:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 1011b7c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 1011b80:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
 1011b84:	f8c7 1178 	str.w	r1, [r7, #376]	; 0x178
		c1219_ptr->c1218_dll->st_08_length = k;
 1011b88:	6863      	ldr	r3, [r4, #4]
 1011b8a:	4a31      	ldr	r2, [pc, #196]	; (1011c50 <C1219_st_7_full_write+0x1404>)
 1011b8c:	f04f 0e1c 	mov.w	lr, #28
 1011b90:	f8a3 e1f6 	strh.w	lr, [r3, #502]	; 0x1f6
 1011b94:	4614      	mov	r4, r2
 1011b96:	e005      	b.n	1011ba4 <C1219_st_7_full_write+0x1358>
			NIC_task();
 1011b98:	47c8      	blx	r9
			PFAIL_APP_vTask();
 1011b9a:	47c0      	blx	r8
			WATCHDOG_APP_vRestart();
 1011b9c:	47b0      	blx	r6
			OP_task();
 1011b9e:	47d8      	blx	fp
			PFAIL_APP_vTask();
 1011ba0:	47c0      	blx	r8
			WATCHDOG_APP_vRestart();
 1011ba2:	47b0      	blx	r6
		while ( (op_c1218_apl.communication_state != BASE_STATE) || (nic_c1218_apl.communication_state != BASE_STATE) ) {
 1011ba4:	f89a 3000 	ldrb.w	r3, [sl]
 1011ba8:	2b00      	cmp	r3, #0
 1011baa:	d1f5      	bne.n	1011b98 <C1219_st_7_full_write+0x134c>
 1011bac:	7823      	ldrb	r3, [r4, #0]
 1011bae:	2b00      	cmp	r3, #0
 1011bb0:	d1f2      	bne.n	1011b98 <C1219_st_7_full_write+0x134c>
		mcu.restart_cause = COLD_START;
 1011bb2:	2203      	movs	r2, #3
		mcu.save_information = false;
 1011bb4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
		mcu.restart_cause = COLD_START;
 1011bb8:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
		RST_APP_vExecute_mcu_reset(mcu);
 1011bbc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 1011bbe:	4b25      	ldr	r3, [pc, #148]	; (1011c54 <C1219_st_7_full_write+0x1408>)
 1011bc0:	4798      	blx	r3
 1011bc2:	f7fe bee6 	b.w	1010992 <C1219_st_7_full_write+0x146>
		switch (table_selected) {
 1011bc6:	2b49      	cmp	r3, #73	; 0x49
 1011bc8:	f000 85c1 	beq.w	101274e <C1219_st_7_full_write+0x1f02>
 1011bcc:	f340 8355 	ble.w	101227a <C1219_st_7_full_write+0x1a2e>
 1011bd0:	f640 0203 	movw	r2, #2051	; 0x803
 1011bd4:	4293      	cmp	r3, r2
 1011bd6:	f000 85ea 	beq.w	10127ae <C1219_st_7_full_write+0x1f62>
 1011bda:	f340 8555 	ble.w	1012688 <C1219_st_7_full_write+0x1e3c>
 1011bde:	f640 0235 	movw	r2, #2101	; 0x835
 1011be2:	4293      	cmp	r3, r2
 1011be4:	f000 85df 	beq.w	10127a6 <C1219_st_7_full_write+0x1f5a>
 1011be8:	f640 0249 	movw	r2, #2121	; 0x849
 1011bec:	4293      	cmp	r3, r2
 1011bee:	f000 85d6 	beq.w	101279e <C1219_st_7_full_write+0x1f52>
 1011bf2:	f640 0217 	movw	r2, #2071	; 0x817
 1011bf6:	4293      	cmp	r3, r2
 1011bf8:	f47f aa16 	bne.w	1011028 <C1219_st_7_full_write+0x7dc>
				is_ok = SM_APP_bBack_up_mt_23(backup_area_id);
 1011bfc:	4b16      	ldr	r3, [pc, #88]	; (1011c58 <C1219_st_7_full_write+0x140c>)
 1011bfe:	4798      	blx	r3
 1011c00:	f7ff ba0e 	b.w	1011020 <C1219_st_7_full_write+0x7d4>
 1011c04:	0101daf1 	.word	0x0101daf1
 1011c08:	0101db55 	.word	0x0101db55
 1011c0c:	0101dbbd 	.word	0x0101dbbd
 1011c10:	0101def9 	.word	0x0101def9
 1011c14:	0101df61 	.word	0x0101df61
 1011c18:	0101dfc9 	.word	0x0101dfc9
 1011c1c:	0101e309 	.word	0x0101e309
 1011c20:	0101e371 	.word	0x0101e371
 1011c24:	0101e3d9 	.word	0x0101e3d9
 1011c28:	01017509 	.word	0x01017509
 1011c2c:	01016445 	.word	0x01016445
 1011c30:	01019c99 	.word	0x01019c99
 1011c34:	01027531 	.word	0x01027531
 1011c38:	01027ca1 	.word	0x01027ca1
 1011c3c:	01027dc9 	.word	0x01027dc9
 1011c40:	01027f6d 	.word	0x01027f6d
 1011c44:	0101ba01 	.word	0x0101ba01
 1011c48:	01018ee9 	.word	0x01018ee9
 1011c4c:	010196a9 	.word	0x010196a9
 1011c50:	20016eec 	.word	0x20016eec
 1011c54:	010159f1 	.word	0x010159f1
 1011c58:	01023ca5 	.word	0x01023ca5
 1011c5c:	20016ec8 	.word	0x20016ec8
		switch (table_selected) {
 1011c60:	2b49      	cmp	r3, #73	; 0x49
 1011c62:	f000 8558 	beq.w	1012716 <C1219_st_7_full_write+0x1eca>
 1011c66:	f340 82db 	ble.w	1012220 <C1219_st_7_full_write+0x19d4>
 1011c6a:	f640 0203 	movw	r2, #2051	; 0x803
 1011c6e:	4293      	cmp	r3, r2
 1011c70:	f000 853d 	beq.w	10126ee <C1219_st_7_full_write+0x1ea2>
 1011c74:	f340 84f2 	ble.w	101265c <C1219_st_7_full_write+0x1e10>
 1011c78:	f640 0235 	movw	r2, #2101	; 0x835
 1011c7c:	4293      	cmp	r3, r2
 1011c7e:	f000 859e 	beq.w	10127be <C1219_st_7_full_write+0x1f72>
 1011c82:	f640 0249 	movw	r2, #2121	; 0x849
 1011c86:	4293      	cmp	r3, r2
 1011c88:	f000 8541 	beq.w	101270e <C1219_st_7_full_write+0x1ec2>
 1011c8c:	f640 0217 	movw	r2, #2071	; 0x817
 1011c90:	4293      	cmp	r3, r2
 1011c92:	f000 8538 	beq.w	1012706 <C1219_st_7_full_write+0x1eba>
				C1218_send_err(c1219_ptr->c1218_dll);
 1011c96:	4608      	mov	r0, r1
 1011c98:	4bac      	ldr	r3, [pc, #688]	; (1011f4c <C1219_st_7_full_write+0x1700>)
 1011c9a:	4798      	blx	r3
 1011c9c:	f7ff baeb 	b.w	1011276 <C1219_st_7_full_write+0xa2a>
			c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 1011ca0:	6862      	ldr	r2, [r4, #4]
 1011ca2:	882b      	ldrh	r3, [r5, #0]
 1011ca4:	f882 3160 	strb.w	r3, [r2, #352]	; 0x160
			c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1011ca8:	6860      	ldr	r0, [r4, #4]
			c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1011caa:	7839      	ldrb	r1, [r7, #0]
			C1218_send_ok(c1219_ptr->c1218_dll);
 1011cac:	4aa8      	ldr	r2, [pc, #672]	; (1011f50 <C1219_st_7_full_write+0x1704>)
			c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1011cae:	0a1b      	lsrs	r3, r3, #8
 1011cb0:	f880 3161 	strb.w	r3, [r0, #353]	; 0x161
			c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1011cb4:	6863      	ldr	r3, [r4, #4]
 1011cb6:	f883 1162 	strb.w	r1, [r3, #354]	; 0x162
			c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 1011cba:	6863      	ldr	r3, [r4, #4]
 1011cbc:	2100      	movs	r1, #0
 1011cbe:	f7ff b9c1 	b.w	1011044 <C1219_st_7_full_write+0x7f8>
		switch (table_selected) {
 1011cc2:	2b4a      	cmp	r3, #74	; 0x4a
 1011cc4:	f000 8597 	beq.w	10127f6 <C1219_st_7_full_write+0x1faa>
 1011cc8:	f300 8289 	bgt.w	10121de <C1219_st_7_full_write+0x1992>
 1011ccc:	2b3e      	cmp	r3, #62	; 0x3e
 1011cce:	f000 85a3 	beq.w	1012818 <C1219_st_7_full_write+0x1fcc>
 1011cd2:	f300 8424 	bgt.w	101251e <C1219_st_7_full_write+0x1cd2>
 1011cd6:	2b35      	cmp	r3, #53	; 0x35
 1011cd8:	f000 859a 	beq.w	1012810 <C1219_st_7_full_write+0x1fc4>
 1011cdc:	2b3d      	cmp	r3, #61	; 0x3d
 1011cde:	f000 8593 	beq.w	1012808 <C1219_st_7_full_write+0x1fbc>
 1011ce2:	2b33      	cmp	r3, #51	; 0x33
 1011ce4:	f47f addc 	bne.w	10118a0 <C1219_st_7_full_write+0x1054>
				TOU_APP_bSt_51_restore_default_values();
 1011ce8:	4b9a      	ldr	r3, [pc, #616]	; (1011f54 <C1219_st_7_full_write+0x1708>)
 1011cea:	4798      	blx	r3
			c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 1011cec:	6862      	ldr	r2, [r4, #4]
 1011cee:	882b      	ldrh	r3, [r5, #0]
 1011cf0:	f882 3160 	strb.w	r3, [r2, #352]	; 0x160
			c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1011cf4:	6861      	ldr	r1, [r4, #4]
			c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1011cf6:	783a      	ldrb	r2, [r7, #0]
			c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1011cf8:	0a1b      	lsrs	r3, r3, #8
 1011cfa:	f881 3161 	strb.w	r3, [r1, #353]	; 0x161
			c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1011cfe:	6863      	ldr	r3, [r4, #4]
 1011d00:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
			c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 1011d04:	6863      	ldr	r3, [r4, #4]
 1011d06:	2200      	movs	r2, #0
 1011d08:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
			c1219_ptr->c1218_dll->st_08_length = k;
 1011d0c:	6863      	ldr	r3, [r4, #4]
 1011d0e:	2204      	movs	r2, #4
 1011d10:	f8a3 21f6 	strh.w	r2, [r3, #502]	; 0x1f6
 1011d14:	e5d6      	b.n	10118c4 <C1219_st_7_full_write+0x1078>
				c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 1011d16:	2206      	movs	r2, #6
 1011d18:	f7fe be31 	b.w	101097e <C1219_st_7_full_write+0x132>
		switch ( c1219_ptr->c1218_dll->rx_data[SP_5_LIST_INDEX] ) {
 1011d1c:	2b03      	cmp	r3, #3
 1011d1e:	f000 84d4 	beq.w	10126ca <C1219_st_7_full_write+0x1e7e>
 1011d22:	f63f ae9b 	bhi.w	1011a5c <C1219_st_7_full_write+0x1210>
 1011d26:	2b01      	cmp	r3, #1
 1011d28:	f000 84c3 	beq.w	10126b2 <C1219_st_7_full_write+0x1e66>
 1011d2c:	2b02      	cmp	r3, #2
 1011d2e:	f47f ae95 	bne.w	1011a5c <C1219_st_7_full_write+0x1210>
				if ( entries_read < 0xFF ) {
 1011d32:	29fe      	cmp	r1, #254	; 0xfe
 1011d34:	f63f ae93 	bhi.w	1011a5e <C1219_st_7_full_write+0x1212>
					EEPROM_writer( ST_26_NBR_UNREAD_ENTRIES_ADDR, &entries_read, 1 );
 1011d38:	2201      	movs	r2, #1
 1011d3a:	a91a      	add	r1, sp, #104	; 0x68
 1011d3c:	f644 0090 	movw	r0, #18576	; 0x4890
 1011d40:	e677      	b.n	1011a32 <C1219_st_7_full_write+0x11e6>
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1011d42:	2008      	movs	r0, #8
 1011d44:	f882 0161 	strb.w	r0, [r2, #353]	; 0x161
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1011d48:	6862      	ldr	r2, [r4, #4]
		C1218_send_ok(c1219_ptr->c1218_dll);
 1011d4a:	4b81      	ldr	r3, [pc, #516]	; (1011f50 <C1219_st_7_full_write+0x1704>)
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1011d4c:	f882 1162 	strb.w	r1, [r2, #354]	; 0x162
		c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 1011d50:	6862      	ldr	r2, [r4, #4]
 1011d52:	2100      	movs	r1, #0
 1011d54:	f882 1163 	strb.w	r1, [r2, #355]	; 0x163
		c1219_ptr->c1218_dll->st_08_length = k;
 1011d58:	6862      	ldr	r2, [r4, #4]
 1011d5a:	2104      	movs	r1, #4
 1011d5c:	f8a2 11f6 	strh.w	r1, [r2, #502]	; 0x1f6
		C1218_send_ok(c1219_ptr->c1218_dll);
 1011d60:	6860      	ldr	r0, [r4, #4]
 1011d62:	4798      	blx	r3
		FLASH_fwu_boot_mode();
 1011d64:	4b7c      	ldr	r3, [pc, #496]	; (1011f58 <C1219_st_7_full_write+0x170c>)
 1011d66:	4798      	blx	r3
 1011d68:	f7fe be13 	b.w	1010992 <C1219_st_7_full_write+0x146>
		eeprom_ok = SM_APP_ucGet_nonvol_mem_state();	
 1011d6c:	4b7b      	ldr	r3, [pc, #492]	; (1011f5c <C1219_st_7_full_write+0x1710>)
 1011d6e:	4798      	blx	r3
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t) (proc_id & 0x00FF);
 1011d70:	6862      	ldr	r2, [r4, #4]
 1011d72:	882b      	ldrh	r3, [r5, #0]
 1011d74:	f882 3160 	strb.w	r3, [r2, #352]	; 0x160
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t) (proc_id >> 8);
 1011d78:	6865      	ldr	r5, [r4, #4]
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1011d7a:	7839      	ldrb	r1, [r7, #0]
		C1218_send_ok(c1219_ptr->c1218_dll);
 1011d7c:	4a74      	ldr	r2, [pc, #464]	; (1011f50 <C1219_st_7_full_write+0x1704>)
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t) (proc_id >> 8);
 1011d7e:	0a1b      	lsrs	r3, r3, #8
 1011d80:	f885 3161 	strb.w	r3, [r5, #353]	; 0x161
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1011d84:	6863      	ldr	r3, [r4, #4]
 1011d86:	f883 1162 	strb.w	r1, [r3, #354]	; 0x162
		c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 1011d8a:	6863      	ldr	r3, [r4, #4]
 1011d8c:	2100      	movs	r1, #0
 1011d8e:	f883 1163 	strb.w	r1, [r3, #355]	; 0x163
		c1219_ptr->c1218_dll->st_08_data[k++] = eeprom_ok;
 1011d92:	6863      	ldr	r3, [r4, #4]
 1011d94:	f883 0164 	strb.w	r0, [r3, #356]	; 0x164
 1011d98:	f7fe bf51 	b.w	1010c3e <C1219_st_7_full_write+0x3f2>
		meter.system_state.busy = true;
 1011d9c:	4e70      	ldr	r6, [pc, #448]	; (1011f60 <C1219_st_7_full_write+0x1714>)
		REGS_APP_vClear_st_23();
 1011d9e:	4a71      	ldr	r2, [pc, #452]	; (1011f64 <C1219_st_7_full_write+0x1718>)
		meter.system_state.busy = true;
 1011da0:	2301      	movs	r3, #1
 1011da2:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
		meter.system_state.changing_configuration = true;
 1011da6:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
		REGS_APP_vClear_st_23();
 1011daa:	4790      	blx	r2
		REGS_APP_vClear_st_24();
 1011dac:	4b6e      	ldr	r3, [pc, #440]	; (1011f68 <C1219_st_7_full_write+0x171c>)
 1011dae:	4798      	blx	r3
		REGS_APP_vClear_st_25();
 1011db0:	4b6e      	ldr	r3, [pc, #440]	; (1011f6c <C1219_st_7_full_write+0x1720>)
 1011db2:	4798      	blx	r3
		REGS_APP_vClear_st_26();		
 1011db4:	4b6e      	ldr	r3, [pc, #440]	; (1011f70 <C1219_st_7_full_write+0x1724>)
 1011db6:	4798      	blx	r3
		meter.system_state.busy = false;
 1011db8:	2200      	movs	r2, #0
 1011dba:	f886 2021 	strb.w	r2, [r6, #33]	; 0x21
		meter.system_state.changing_configuration = false;
 1011dbe:	f886 2022 	strb.w	r2, [r6, #34]	; 0x22
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 1011dc2:	6861      	ldr	r1, [r4, #4]
 1011dc4:	882b      	ldrh	r3, [r5, #0]
 1011dc6:	f881 3160 	strb.w	r3, [r1, #352]	; 0x160
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1011dca:	6865      	ldr	r5, [r4, #4]
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1011dcc:	7838      	ldrb	r0, [r7, #0]
		C1218_send_ok(c1219_ptr->c1218_dll);
 1011dce:	4960      	ldr	r1, [pc, #384]	; (1011f50 <C1219_st_7_full_write+0x1704>)
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1011dd0:	0a1b      	lsrs	r3, r3, #8
 1011dd2:	f885 3161 	strb.w	r3, [r5, #353]	; 0x161
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1011dd6:	6863      	ldr	r3, [r4, #4]
 1011dd8:	f883 0162 	strb.w	r0, [r3, #354]	; 0x162
		c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 1011ddc:	6863      	ldr	r3, [r4, #4]
 1011dde:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
		c1219_ptr->c1218_dll->st_08_length = k;
 1011de2:	6863      	ldr	r3, [r4, #4]
 1011de4:	2204      	movs	r2, #4
 1011de6:	f8a3 21f6 	strh.w	r2, [r3, #502]	; 0x1f6
		C1218_send_ok(c1219_ptr->c1218_dll);
 1011dea:	6860      	ldr	r0, [r4, #4]
 1011dec:	4788      	blx	r1
 1011dee:	f7fe bdd0 	b.w	1010992 <C1219_st_7_full_write+0x146>
		setting_time_sec = (uint16_t)c1219_ptr->c1218_dll->rx_data[PROCEDURE_PARAMETER_INDEX];
 1011df2:	689b      	ldr	r3, [r3, #8]
		meter.detect_voltage_change_period = (uint32_t)TIMER_ms_to_tic(setting_time_sec * 1000);
 1011df4:	495a      	ldr	r1, [pc, #360]	; (1011f60 <C1219_st_7_full_write+0x1714>)
		setting_time_sec |= (uint16_t)c1219_ptr->c1218_dll->rx_data[PROCEDURE_PARAMETER_INDEX +1] << 8;
 1011df6:	7a5a      	ldrb	r2, [r3, #9]
 1011df8:	7a1e      	ldrb	r6, [r3, #8]
		TIMER_reset_ms_timer(SM_PHA_VOLTAGE_MONITOR_TIMER);
 1011dfa:	f8df 819c 	ldr.w	r8, [pc, #412]	; 1011f98 <C1219_st_7_full_write+0x174c>
		setting_time_sec |= (uint16_t)c1219_ptr->c1218_dll->rx_data[PROCEDURE_PARAMETER_INDEX +1] << 8;
 1011dfe:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
 1011e02:	b236      	sxth	r6, r6
 1011e04:	fa1f f986 	uxth.w	r9, r6
		meter.detect_voltage_change_period = (uint32_t)TIMER_ms_to_tic(setting_time_sec * 1000);
 1011e08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 1011e0c:	fb02 f209 	mul.w	r2, r2, r9
		TIMER_reset_ms_timer(SM_PHA_VOLTAGE_MONITOR_TIMER);
 1011e10:	2010      	movs	r0, #16
		meter.detect_voltage_change_period = (uint32_t)TIMER_ms_to_tic(setting_time_sec * 1000);
 1011e12:	64ca      	str	r2, [r1, #76]	; 0x4c
		TIMER_reset_ms_timer(SM_PHA_VOLTAGE_MONITOR_TIMER);
 1011e14:	47c0      	blx	r8
		TIMER_reset_ms_timer(SM_PHB_VOLTAGE_MONITOR_TIMER);
 1011e16:	2011      	movs	r0, #17
 1011e18:	47c0      	blx	r8
		TIMER_reset_ms_timer(SM_PHC_VOLTAGE_MONITOR_TIMER);
 1011e1a:	2012      	movs	r0, #18
 1011e1c:	47c0      	blx	r8
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 1011e1e:	6863      	ldr	r3, [r4, #4]
 1011e20:	882a      	ldrh	r2, [r5, #0]
 1011e22:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1011e26:	6863      	ldr	r3, [r4, #4]
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1011e28:	7838      	ldrb	r0, [r7, #0]
		C1218_send_ok(c1219_ptr->c1218_dll);
 1011e2a:	4949      	ldr	r1, [pc, #292]	; (1011f50 <C1219_st_7_full_write+0x1704>)
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1011e2c:	0a12      	lsrs	r2, r2, #8
 1011e2e:	f883 2161 	strb.w	r2, [r3, #353]	; 0x161
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1011e32:	6863      	ldr	r3, [r4, #4]
 1011e34:	f883 0162 	strb.w	r0, [r3, #354]	; 0x162
		c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 1011e38:	6863      	ldr	r3, [r4, #4]
 1011e3a:	2200      	movs	r2, #0
 1011e3c:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(setting_time_sec & 0x00FF);
 1011e40:	6863      	ldr	r3, [r4, #4]
 1011e42:	f883 6164 	strb.w	r6, [r3, #356]	; 0x164
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(setting_time_sec >> 8);
 1011e46:	6862      	ldr	r2, [r4, #4]
 1011e48:	ea4f 2319 	mov.w	r3, r9, lsr #8
 1011e4c:	f882 3165 	strb.w	r3, [r2, #357]	; 0x165
		c1219_ptr->c1218_dll->st_08_length = k;
 1011e50:	6863      	ldr	r3, [r4, #4]
 1011e52:	2206      	movs	r2, #6
 1011e54:	f8a3 21f6 	strh.w	r2, [r3, #502]	; 0x1f6
		C1218_send_ok(c1219_ptr->c1218_dll);
 1011e58:	6860      	ldr	r0, [r4, #4]
 1011e5a:	4788      	blx	r1
 1011e5c:	f7fe bd99 	b.w	1010992 <C1219_st_7_full_write+0x146>
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1011e60:	f882 1162 	strb.w	r1, [r2, #354]	; 0x162
		c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 1011e64:	6862      	ldr	r2, [r4, #4]
		C1218_send_ok(c1219_ptr->c1218_dll);
 1011e66:	4b3a      	ldr	r3, [pc, #232]	; (1011f50 <C1219_st_7_full_write+0x1704>)
		c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 1011e68:	f882 a163 	strb.w	sl, [r2, #355]	; 0x163
		c1219_ptr->c1218_dll->st_08_length = k;
 1011e6c:	6862      	ldr	r2, [r4, #4]
 1011e6e:	2504      	movs	r5, #4
 1011e70:	f8a2 51f6 	strh.w	r5, [r2, #502]	; 0x1f6
		C1218_send_ok(c1219_ptr->c1218_dll);
 1011e74:	6860      	ldr	r0, [r4, #4]
 1011e76:	4798      	blx	r3
		delay_ms(500);
 1011e78:	483e      	ldr	r0, [pc, #248]	; (1011f74 <C1219_st_7_full_write+0x1728>)
 1011e7a:	4b3f      	ldr	r3, [pc, #252]	; (1011f78 <C1219_st_7_full_write+0x172c>)
 1011e7c:	4798      	blx	r3
		mcu.restart_cause = WARM_START;
 1011e7e:	f88d 5069 	strb.w	r5, [sp, #105]	; 0x69
		mcu.save_information = true;
 1011e82:	f88d 9068 	strb.w	r9, [sp, #104]	; 0x68
		RST_APP_vExecute_mcu_reset(mcu);
 1011e86:	981a      	ldr	r0, [sp, #104]	; 0x68
 1011e88:	4b3c      	ldr	r3, [pc, #240]	; (1011f7c <C1219_st_7_full_write+0x1730>)
 1011e8a:	4798      	blx	r3
 1011e8c:	f7fe bd81 	b.w	1010992 <C1219_st_7_full_write+0x146>
		GRAL_APP_vClear_st_3_ed_std_status1();
 1011e90:	4b3b      	ldr	r3, [pc, #236]	; (1011f80 <C1219_st_7_full_write+0x1734>)
 1011e92:	4798      	blx	r3
		GRAL_APP_vClear_st_3_ed_std_status2();
 1011e94:	4b3b      	ldr	r3, [pc, #236]	; (1011f84 <C1219_st_7_full_write+0x1738>)
 1011e96:	4798      	blx	r3
		NIC_APP_vDeassert_attention_request();
 1011e98:	4b3b      	ldr	r3, [pc, #236]	; (1011f88 <C1219_st_7_full_write+0x173c>)
 1011e9a:	4798      	blx	r3
		uint16_t ed_std_status1 = GRAL_APP_usGet_st_3_ed_std_status1();
 1011e9c:	4b3b      	ldr	r3, [pc, #236]	; (1011f8c <C1219_st_7_full_write+0x1740>)
 1011e9e:	4798      	blx	r3
		uint8_t ed_std_status2 = GRAL_APP_ucGet_st_3_ed_std_status2();
 1011ea0:	4b3b      	ldr	r3, [pc, #236]	; (1011f90 <C1219_st_7_full_write+0x1744>)
		uint16_t ed_std_status1 = GRAL_APP_usGet_st_3_ed_std_status1();
 1011ea2:	4606      	mov	r6, r0
		uint8_t ed_std_status2 = GRAL_APP_ucGet_st_3_ed_std_status2();
 1011ea4:	4798      	blx	r3
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 1011ea6:	6863      	ldr	r3, [r4, #4]
 1011ea8:	882a      	ldrh	r2, [r5, #0]
 1011eaa:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1011eae:	6863      	ldr	r3, [r4, #4]
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1011eb0:	783d      	ldrb	r5, [r7, #0]
		C1218_send_ok(c1219_ptr->c1218_dll);
 1011eb2:	4927      	ldr	r1, [pc, #156]	; (1011f50 <C1219_st_7_full_write+0x1704>)
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1011eb4:	0a12      	lsrs	r2, r2, #8
 1011eb6:	f883 2161 	strb.w	r2, [r3, #353]	; 0x161
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1011eba:	6863      	ldr	r3, [r4, #4]
 1011ebc:	f883 5162 	strb.w	r5, [r3, #354]	; 0x162
		c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 1011ec0:	6863      	ldr	r3, [r4, #4]
 1011ec2:	f883 a163 	strb.w	sl, [r3, #355]	; 0x163
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(ed_std_status1);
 1011ec6:	6863      	ldr	r3, [r4, #4]
 1011ec8:	f883 6164 	strb.w	r6, [r3, #356]	; 0x164
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(ed_std_status1 >> 8);
 1011ecc:	6863      	ldr	r3, [r4, #4]
 1011ece:	0a36      	lsrs	r6, r6, #8
 1011ed0:	f883 6165 	strb.w	r6, [r3, #357]	; 0x165
		c1219_ptr->c1218_dll->st_08_data[k++] = ed_std_status2;
 1011ed4:	6863      	ldr	r3, [r4, #4]
 1011ed6:	f883 0166 	strb.w	r0, [r3, #358]	; 0x166
		c1219_ptr->c1218_dll->st_08_length = k;
 1011eda:	6863      	ldr	r3, [r4, #4]
 1011edc:	f8a3 91f6 	strh.w	r9, [r3, #502]	; 0x1f6
		C1218_send_ok(c1219_ptr->c1218_dll);
 1011ee0:	6860      	ldr	r0, [r4, #4]
 1011ee2:	4788      	blx	r1
 1011ee4:	f7fe bd55 	b.w	1010992 <C1219_st_7_full_write+0x146>
		new_kt_value = ((uint32_t) c1219_ptr->c1218_dll->rx_data[8]) << 24;
 1011ee8:	689a      	ldr	r2, [r3, #8]
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1011eea:	7839      	ldrb	r1, [r7, #0]
		new_kt_value = ((uint32_t) c1219_ptr->c1218_dll->rx_data[8]) << 24;
 1011eec:	7a10      	ldrb	r0, [r2, #8]
		new_kt_value |= ((uint32_t) c1219_ptr->c1218_dll->rx_data[11]);
 1011eee:	7ad6      	ldrb	r6, [r2, #11]
		new_kt_value |= ((uint32_t) c1219_ptr->c1218_dll->rx_data[9]) << 16;
 1011ef0:	7a55      	ldrb	r5, [r2, #9]
		new_kt_value |= ((uint32_t) c1219_ptr->c1218_dll->rx_data[10]) << 8;
 1011ef2:	7a92      	ldrb	r2, [r2, #10]
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t) (proc_id & 0x00FF);
 1011ef4:	2765      	movs	r7, #101	; 0x65
 1011ef6:	f883 7160 	strb.w	r7, [r3, #352]	; 0x160
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t) (proc_id >> 8);
 1011efa:	6863      	ldr	r3, [r4, #4]
 1011efc:	2708      	movs	r7, #8
 1011efe:	f883 7161 	strb.w	r7, [r3, #353]	; 0x161
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1011f02:	6863      	ldr	r3, [r4, #4]
 1011f04:	f883 1162 	strb.w	r1, [r3, #354]	; 0x162
		c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 1011f08:	6861      	ldr	r1, [r4, #4]
		C1218_send_ok(c1219_ptr->c1218_dll);
 1011f0a:	4b11      	ldr	r3, [pc, #68]	; (1011f50 <C1219_st_7_full_write+0x1704>)
		c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 1011f0c:	f881 a163 	strb.w	sl, [r1, #355]	; 0x163
		c1219_ptr->c1218_dll->st_08_length = k;
 1011f10:	6861      	ldr	r1, [r4, #4]
		new_kt_value |= ((uint32_t) c1219_ptr->c1218_dll->rx_data[9]) << 16;
 1011f12:	042d      	lsls	r5, r5, #16
 1011f14:	ea45 6500 	orr.w	r5, r5, r0, lsl #24
		c1219_ptr->c1218_dll->st_08_length = k;
 1011f18:	2004      	movs	r0, #4
 1011f1a:	f8a1 01f6 	strh.w	r0, [r1, #502]	; 0x1f6
 1011f1e:	4335      	orrs	r5, r6
		new_kt_value |= ((uint32_t) c1219_ptr->c1218_dll->rx_data[11]);
 1011f20:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
		C1218_send_ok(c1219_ptr->c1218_dll);
 1011f24:	6860      	ldr	r0, [r4, #4]
 1011f26:	4798      	blx	r3
		METROLOGY_APP_vChange_kt(new_kt_value);
 1011f28:	4628      	mov	r0, r5
 1011f2a:	4b1a      	ldr	r3, [pc, #104]	; (1011f94 <C1219_st_7_full_write+0x1748>)
 1011f2c:	4798      	blx	r3
		delay_ms(500);
 1011f2e:	4811      	ldr	r0, [pc, #68]	; (1011f74 <C1219_st_7_full_write+0x1728>)
 1011f30:	4b11      	ldr	r3, [pc, #68]	; (1011f78 <C1219_st_7_full_write+0x172c>)
 1011f32:	4798      	blx	r3
		mcu.restart_cause = KT_CONSTANT_CHANGE;
 1011f34:	2205      	movs	r2, #5
		mcu.save_information = true;
 1011f36:	2301      	movs	r3, #1
 1011f38:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
		mcu.restart_cause = KT_CONSTANT_CHANGE;
 1011f3c:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
		RST_APP_vExecute_mcu_reset(mcu);
 1011f40:	981a      	ldr	r0, [sp, #104]	; 0x68
 1011f42:	4b0e      	ldr	r3, [pc, #56]	; (1011f7c <C1219_st_7_full_write+0x1730>)
 1011f44:	4798      	blx	r3
 1011f46:	f7fe bd24 	b.w	1010992 <C1219_st_7_full_write+0x146>
 1011f4a:	bf00      	nop
 1011f4c:	01016465 	.word	0x01016465
 1011f50:	01016445 	.word	0x01016445
 1011f54:	0102c355 	.word	0x0102c355
 1011f58:	01019ad1 	.word	0x01019ad1
 1011f5c:	010213bd 	.word	0x010213bd
 1011f60:	20016c2c 	.word	0x20016c2c
 1011f64:	01027531 	.word	0x01027531
 1011f68:	01027ca1 	.word	0x01027ca1
 1011f6c:	01027dc9 	.word	0x01027dc9
 1011f70:	01027f6d 	.word	0x01027f6d
 1011f74:	0037cdb7 	.word	0x0037cdb7
 1011f78:	20000001 	.word	0x20000001
 1011f7c:	010159f1 	.word	0x010159f1
 1011f80:	0101a191 	.word	0x0101a191
 1011f84:	0101a1ad 	.word	0x0101a1ad
 1011f88:	01024c81 	.word	0x01024c81
 1011f8c:	0101a155 	.word	0x0101a155
 1011f90:	0101a161 	.word	0x0101a161
 1011f94:	0101e4d1 	.word	0x0101e4d1
 1011f98:	0102bb09 	.word	0x0102bb09
		crc = CRC_app_crc16_calc();
 1011f9c:	4bbe      	ldr	r3, [pc, #760]	; (1012298 <C1219_st_7_full_write+0x1a4c>)
 1011f9e:	4ebf      	ldr	r6, [pc, #764]	; (101229c <C1219_st_7_full_write+0x1a50>)
 1011fa0:	4798      	blx	r3
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 1011fa2:	6862      	ldr	r2, [r4, #4]
 1011fa4:	882b      	ldrh	r3, [r5, #0]
 1011fa6:	f882 3160 	strb.w	r3, [r2, #352]	; 0x160
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1011faa:	6862      	ldr	r2, [r4, #4]
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1011fac:	783f      	ldrb	r7, [r7, #0]
		crc = CRC_app_crc16_calc();
 1011fae:	6030      	str	r0, [r6, #0]
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1011fb0:	0a1b      	lsrs	r3, r3, #8
 1011fb2:	f882 3161 	strb.w	r3, [r2, #353]	; 0x161
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1011fb6:	6863      	ldr	r3, [r4, #4]
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(crc >> 16);		// LSB Calculated CRC
 1011fb8:	6831      	ldr	r1, [r6, #0]
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1011fba:	f883 7162 	strb.w	r7, [r3, #354]	; 0x162
		c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 1011fbe:	6863      	ldr	r3, [r4, #4]
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(crc >> 24);		// MSB Calculated CRC
 1011fc0:	6832      	ldr	r2, [r6, #0]
		c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 1011fc2:	f883 a163 	strb.w	sl, [r3, #355]	; 0x163
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(crc >> 16);		// LSB Calculated CRC
 1011fc6:	6860      	ldr	r0, [r4, #4]
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(crc >> 0);		// LSB Flash CRC
 1011fc8:	6837      	ldr	r7, [r6, #0]
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(crc >> 8);		// MSB Flash CRC
 1011fca:	6833      	ldr	r3, [r6, #0]
		C1218_send_ok(c1219_ptr->c1218_dll);
 1011fcc:	4db4      	ldr	r5, [pc, #720]	; (10122a0 <C1219_st_7_full_write+0x1a54>)
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(crc >> 16);		// LSB Calculated CRC
 1011fce:	0c09      	lsrs	r1, r1, #16
 1011fd0:	f880 1164 	strb.w	r1, [r0, #356]	; 0x164
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(crc >> 24);		// MSB Calculated CRC
 1011fd4:	6861      	ldr	r1, [r4, #4]
 1011fd6:	0e12      	lsrs	r2, r2, #24
 1011fd8:	f881 2165 	strb.w	r2, [r1, #357]	; 0x165
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(crc >> 0);		// LSB Flash CRC
 1011fdc:	6862      	ldr	r2, [r4, #4]
 1011fde:	f882 7166 	strb.w	r7, [r2, #358]	; 0x166
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(crc >> 8);		// MSB Flash CRC
 1011fe2:	6862      	ldr	r2, [r4, #4]
 1011fe4:	0a1b      	lsrs	r3, r3, #8
 1011fe6:	f882 3167 	strb.w	r3, [r2, #359]	; 0x167
		c1219_ptr->c1218_dll->st_08_length = k;
 1011fea:	6863      	ldr	r3, [r4, #4]
 1011fec:	2208      	movs	r2, #8
 1011fee:	f8a3 21f6 	strh.w	r2, [r3, #502]	; 0x1f6
		C1218_send_ok(c1219_ptr->c1218_dll);
 1011ff2:	6860      	ldr	r0, [r4, #4]
 1011ff4:	47a8      	blx	r5
 1011ff6:	f7fe bccc 	b.w	1010992 <C1219_st_7_full_write+0x146>
		GRAL_APP_vClear_st_3_ed_mfg_status();
 1011ffa:	4baa      	ldr	r3, [pc, #680]	; (10122a4 <C1219_st_7_full_write+0x1a58>)
 1011ffc:	4798      	blx	r3
		NIC_APP_vDeassert_attention_request();
 1011ffe:	4baa      	ldr	r3, [pc, #680]	; (10122a8 <C1219_st_7_full_write+0x1a5c>)
 1012000:	4798      	blx	r3
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 1012002:	6862      	ldr	r2, [r4, #4]
 1012004:	882b      	ldrh	r3, [r5, #0]
 1012006:	f882 3160 	strb.w	r3, [r2, #352]	; 0x160
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 101200a:	6860      	ldr	r0, [r4, #4]
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 101200c:	7839      	ldrb	r1, [r7, #0]
		GRAL_APP_vCopy_st_3_ed_mfg_status(&c1219_ptr->c1218_dll->st_08_data[k]);
 101200e:	4aa7      	ldr	r2, [pc, #668]	; (10122ac <C1219_st_7_full_write+0x1a60>)
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1012010:	0a1b      	lsrs	r3, r3, #8
 1012012:	f880 3161 	strb.w	r3, [r0, #353]	; 0x161
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1012016:	6863      	ldr	r3, [r4, #4]
 1012018:	f883 1162 	strb.w	r1, [r3, #354]	; 0x162
		c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 101201c:	6863      	ldr	r3, [r4, #4]
 101201e:	2100      	movs	r1, #0
 1012020:	f883 1163 	strb.w	r1, [r3, #355]	; 0x163
		GRAL_APP_vCopy_st_3_ed_mfg_status(&c1219_ptr->c1218_dll->st_08_data[k]);
 1012024:	6860      	ldr	r0, [r4, #4]
 1012026:	f500 70b2 	add.w	r0, r0, #356	; 0x164
 101202a:	4790      	blx	r2
		c1219_ptr->c1218_dll->st_08_length = k;
 101202c:	6862      	ldr	r2, [r4, #4]
		C1218_send_ok(c1219_ptr->c1218_dll);
 101202e:	4b9c      	ldr	r3, [pc, #624]	; (10122a0 <C1219_st_7_full_write+0x1a54>)
		c1219_ptr->c1218_dll->st_08_length = k;
 1012030:	2113      	movs	r1, #19
 1012032:	f8a2 11f6 	strh.w	r1, [r2, #502]	; 0x1f6
		C1218_send_ok(c1219_ptr->c1218_dll);
 1012036:	6860      	ldr	r0, [r4, #4]
 1012038:	4798      	blx	r3
 101203a:	f7fe bcaa 	b.w	1010992 <C1219_st_7_full_write+0x146>
		k = 0;
 101203e:	f04f 0800 	mov.w	r8, #0
 1012042:	f88d 8048 	strb.w	r8, [sp, #72]	; 0x48
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 1012046:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
		ota_image.type = c1219_ptr->c1218_dll->rx_data[PROCEDURE_PARAMETER_INDEX];
 101204a:	6898      	ldr	r0, [r3, #8]
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 101204c:	783a      	ldrb	r2, [r7, #0]
		ota_image.new_revision = c1219_ptr->c1218_dll->rx_data[PROCEDURE_PARAMETER_INDEX + 14];
 101204e:	f890 e016 	ldrb.w	lr, [r0, #22]
		ota_image.size |= ((uint32_t)c1219_ptr->c1218_dll->rx_data[PROCEDURE_PARAMETER_INDEX + 4]) << 24;
 1012052:	f8d0 9009 	ldr.w	r9, [r0, #9]
		ota_image.new_version = c1219_ptr->c1218_dll->rx_data[PROCEDURE_PARAMETER_INDEX + 13];
 1012056:	f890 c015 	ldrb.w	ip, [r0, #21]
		ota_image.type = c1219_ptr->c1218_dll->rx_data[PROCEDURE_PARAMETER_INDEX];
 101205a:	f890 b008 	ldrb.w	fp, [r0, #8]
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 101205e:	b2f6      	uxtb	r6, r6
		memcpy(&ota_image.part_number, &c1219_ptr->c1218_dll->rx_data[PROCEDURE_PARAMETER_INDEX + 5], 8 );
 1012060:	4682      	mov	sl, r0
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 1012062:	1c71      	adds	r1, r6, #1
 1012064:	b2c9      	uxtb	r1, r1
 1012066:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
		memcpy(&ota_image.part_number, &c1219_ptr->c1218_dll->rx_data[PROCEDURE_PARAMETER_INDEX + 5], 8 );
 101206a:	f85a 0f0d 	ldr.w	r0, [sl, #13]!
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 101206e:	441e      	add	r6, r3
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1012070:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
		memcpy(&ota_image.part_number, &c1219_ptr->c1218_dll->rx_data[PROCEDURE_PARAMETER_INDEX + 5], 8 );
 1012074:	f8da 1004 	ldr.w	r1, [sl, #4]
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 1012078:	f04f 0ac8 	mov.w	sl, #200	; 0xc8
 101207c:	f886 a160 	strb.w	sl, [r6, #352]	; 0x160
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1012080:	fa5f fa83 	uxtb.w	sl, r3
 1012084:	f10a 0301 	add.w	r3, sl, #1
 1012088:	b2db      	uxtb	r3, r3
 101208a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 101208e:	6863      	ldr	r3, [r4, #4]
		ota_image.type = c1219_ptr->c1218_dll->rx_data[PROCEDURE_PARAMETER_INDEX];
 1012090:	4e87      	ldr	r6, [pc, #540]	; (10122b0 <C1219_st_7_full_write+0x1a64>)
		c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1012092:	4453      	add	r3, sl
 1012094:	f04f 0a08 	mov.w	sl, #8
 1012098:	f883 a160 	strb.w	sl, [r3, #352]	; 0x160
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 101209c:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
 10120a0:	6863      	ldr	r3, [r4, #4]
		ota_image.size |= ((uint32_t)c1219_ptr->c1218_dll->rx_data[PROCEDURE_PARAMETER_INDEX + 4]) << 24;
 10120a2:	f8c6 9004 	str.w	r9, [r6, #4]
		c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 10120a6:	fa5f fa8a 	uxtb.w	sl, sl
 10120aa:	f10a 0901 	add.w	r9, sl, #1
 10120ae:	fa5f f989 	uxtb.w	r9, r9
 10120b2:	4453      	add	r3, sl
 10120b4:	f88d 9048 	strb.w	r9, [sp, #72]	; 0x48
 10120b8:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
		c1219_ptr->c1218_dll->st_08_data[k++] = PROC_ACCEPTED_NOT_COMPLETED;
 10120bc:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 10120c0:	6863      	ldr	r3, [r4, #4]
		ota_image.new_version = c1219_ptr->c1218_dll->rx_data[PROCEDURE_PARAMETER_INDEX + 13];
 10120c2:	f886 c020 	strb.w	ip, [r6, #32]
		c1219_ptr->c1218_dll->st_08_data[k++] = PROC_ACCEPTED_NOT_COMPLETED;
 10120c6:	b2d2      	uxtb	r2, r2
 10120c8:	4413      	add	r3, r2
 10120ca:	f04f 0901 	mov.w	r9, #1
 10120ce:	3201      	adds	r2, #1
 10120d0:	b2d2      	uxtb	r2, r2
 10120d2:	f883 9160 	strb.w	r9, [r3, #352]	; 0x160
 10120d6:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
		c1219_ptr->c1218_dll->st_08_length = k;
 10120da:	6863      	ldr	r3, [r4, #4]
 10120dc:	f89d c048 	ldrb.w	ip, [sp, #72]	; 0x48
		ota_image.new_revision = c1219_ptr->c1218_dll->rx_data[PROCEDURE_PARAMETER_INDEX + 14];
 10120e0:	f886 e021 	strb.w	lr, [r6, #33]	; 0x21
		memcpy(&ota_image.part_number, &c1219_ptr->c1218_dll->rx_data[PROCEDURE_PARAMETER_INDEX + 5], 8 );
 10120e4:	f106 0208 	add.w	r2, r6, #8
 10120e8:	c203      	stmia	r2!, {r0, r1}
		ota_image.type = c1219_ptr->c1218_dll->rx_data[PROCEDURE_PARAMETER_INDEX];
 10120ea:	f886 b002 	strb.w	fp, [r6, #2]
		C1218_send_ok(c1219_ptr->c1218_dll);
 10120ee:	4a6c      	ldr	r2, [pc, #432]	; (10122a0 <C1219_st_7_full_write+0x1a54>)
		c1219_ptr->c1218_dll->st_08_length = k;
 10120f0:	f8a3 c1f6 	strh.w	ip, [r3, #502]	; 0x1f6
		C1218_send_ok(c1219_ptr->c1218_dll);
 10120f4:	6860      	ldr	r0, [r4, #4]
 10120f6:	4790      	blx	r2
		FLASH_erase_image_sector();
 10120f8:	4b6e      	ldr	r3, [pc, #440]	; (10122b4 <C1219_st_7_full_write+0x1a68>)
	    ota_image.memory_busy = 1;
 10120fa:	f886 9022 	strb.w	r9, [r6, #34]	; 0x22
		FLASH_erase_image_sector();
 10120fe:	4798      	blx	r3
	    k = 0;
 1012100:	f88d 8048 	strb.w	r8, [sp, #72]	; 0x48
	    c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 1012104:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 1012108:	882b      	ldrh	r3, [r5, #0]
 101210a:	6862      	ldr	r2, [r4, #4]
	    c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 101210c:	7838      	ldrb	r0, [r7, #0]
	    ota_image.memory_busy = 0;
 101210e:	f886 8022 	strb.w	r8, [r6, #34]	; 0x22
	    c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 1012112:	b2c9      	uxtb	r1, r1
 1012114:	eb01 0509 	add.w	r5, r1, r9
 1012118:	b2ed      	uxtb	r5, r5
 101211a:	f88d 5048 	strb.w	r5, [sp, #72]	; 0x48
 101211e:	4411      	add	r1, r2
	    c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1012120:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
	    c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 1012124:	f881 3160 	strb.w	r3, [r1, #352]	; 0x160
	    c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1012128:	b2d2      	uxtb	r2, r2
 101212a:	6861      	ldr	r1, [r4, #4]
	    ota_image.initiation = 1;
 101212c:	f886 9000 	strb.w	r9, [r6]
	    c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1012130:	eb02 0509 	add.w	r5, r2, r9
 1012134:	b2ed      	uxtb	r5, r5
 1012136:	f88d 5048 	strb.w	r5, [sp, #72]	; 0x48
 101213a:	4411      	add	r1, r2
 101213c:	0a1a      	lsrs	r2, r3, #8
	    c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 101213e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	    c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1012142:	f881 2160 	strb.w	r2, [r1, #352]	; 0x160
	    c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 1012146:	6862      	ldr	r2, [r4, #4]
	    ota_image.activation = 0;
 1012148:	f886 8001 	strb.w	r8, [r6, #1]
	    c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 101214c:	b2db      	uxtb	r3, r3
 101214e:	eb03 0109 	add.w	r1, r3, r9
 1012152:	4413      	add	r3, r2
 1012154:	b2ca      	uxtb	r2, r1
 1012156:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
 101215a:	f883 0160 	strb.w	r0, [r3, #352]	; 0x160
	    c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 101215e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 1012162:	6862      	ldr	r2, [r4, #4]
 1012164:	b2db      	uxtb	r3, r3
 1012166:	441a      	add	r2, r3
 1012168:	444b      	add	r3, r9
 101216a:	f882 8160 	strb.w	r8, [r2, #352]	; 0x160
 101216e:	b2db      	uxtb	r3, r3
 1012170:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	    c1219_ptr->c1218_dll->st_08_length = k;
 1012174:	6863      	ldr	r3, [r4, #4]
 1012176:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 101217a:	f8a3 21f6 	strh.w	r2, [r3, #502]	; 0x1f6
 101217e:	f7fe bc08 	b.w	1010992 <C1219_st_7_full_write+0x146>
				c1219_ptr->c1218_dll->st_08_data[k++] = INVALID_PARAMETER;
 1012182:	2202      	movs	r2, #2
 1012184:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
				C1218_send_err(c1219_ptr->c1218_dll);
 1012188:	6860      	ldr	r0, [r4, #4]
 101218a:	4b4b      	ldr	r3, [pc, #300]	; (10122b8 <C1219_st_7_full_write+0x1a6c>)
 101218c:	4798      	blx	r3
 101218e:	f7fe bf9d 	b.w	10110cc <C1219_st_7_full_write+0x880>
				METROLOGY_APP_vEnable_P_energy_pulse_mode();
 1012192:	4b4a      	ldr	r3, [pc, #296]	; (10122bc <C1219_st_7_full_write+0x1a70>)
 1012194:	4798      	blx	r3
				c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 1012196:	6862      	ldr	r2, [r4, #4]
				C1218_send_ok(c1219_ptr->c1218_dll);
 1012198:	4b41      	ldr	r3, [pc, #260]	; (10122a0 <C1219_st_7_full_write+0x1a54>)
				c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 101219a:	f882 5163 	strb.w	r5, [r2, #355]	; 0x163
				C1218_send_ok(c1219_ptr->c1218_dll);
 101219e:	6860      	ldr	r0, [r4, #4]
 10121a0:	4798      	blx	r3
 10121a2:	f7fe bf93 	b.w	10110cc <C1219_st_7_full_write+0x880>
			c1219_ptr->c1218_dll->st_08_data[k++] = 0;
 10121a6:	2300      	movs	r3, #0
 10121a8:	f882 3168 	strb.w	r3, [r2, #360]	; 0x168
			c1219_ptr->c1218_dll->st_08_data[k++] = 0;
 10121ac:	6862      	ldr	r2, [r4, #4]
 10121ae:	f882 3169 	strb.w	r3, [r2, #361]	; 0x169
			c1219_ptr->c1218_dll->st_08_data[k++] = 0;
 10121b2:	6862      	ldr	r2, [r4, #4]
 10121b4:	f882 316a 	strb.w	r3, [r2, #362]	; 0x16a
			c1219_ptr->c1218_dll->st_08_data[k++] = 0;
 10121b8:	6862      	ldr	r2, [r4, #4]
 10121ba:	f882 316b 	strb.w	r3, [r2, #363]	; 0x16b
 10121be:	f7ff b8ac 	b.w	101131a <C1219_st_7_full_write+0xace>
			c1219_ptr->c1218_dll->st_08_data[k++] = 0;
 10121c2:	6863      	ldr	r3, [r4, #4]
 10121c4:	f883 2164 	strb.w	r2, [r3, #356]	; 0x164
			c1219_ptr->c1218_dll->st_08_data[k++] = 0;
 10121c8:	6863      	ldr	r3, [r4, #4]
 10121ca:	f883 2165 	strb.w	r2, [r3, #357]	; 0x165
			c1219_ptr->c1218_dll->st_08_data[k++] = 0;
 10121ce:	6863      	ldr	r3, [r4, #4]
 10121d0:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
			c1219_ptr->c1218_dll->st_08_data[k++] = 0;
 10121d4:	6863      	ldr	r3, [r4, #4]
 10121d6:	f883 2167 	strb.w	r2, [r3, #359]	; 0x167
 10121da:	f7ff b885 	b.w	10112e8 <C1219_st_7_full_write+0xa9c>
		switch (table_selected) {
 10121de:	f640 0004 	movw	r0, #2052	; 0x804
 10121e2:	4283      	cmp	r3, r0
 10121e4:	f000 8362 	beq.w	10128ac <C1219_st_7_full_write+0x2060>
 10121e8:	f300 81be 	bgt.w	1012568 <C1219_st_7_full_write+0x1d1c>
 10121ec:	2b4c      	cmp	r3, #76	; 0x4c
 10121ee:	f000 832b 	beq.w	1012848 <C1219_st_7_full_write+0x1ffc>
 10121f2:	f2c0 8325 	blt.w	1012840 <C1219_st_7_full_write+0x1ff4>
 10121f6:	f640 0001 	movw	r0, #2049	; 0x801
 10121fa:	4283      	cmp	r3, r0
 10121fc:	f47f ab50 	bne.w	10118a0 <C1219_st_7_full_write+0x1054>
				SM_APP_vMt_1_restore_default_values();
 1012200:	4b2f      	ldr	r3, [pc, #188]	; (10122c0 <C1219_st_7_full_write+0x1a74>)
 1012202:	4798      	blx	r3
 1012204:	e572      	b.n	1011cec <C1219_st_7_full_write+0x14a0>
		switch (table_selected) {
 1012206:	2b1b      	cmp	r3, #27
 1012208:	f000 82ed 	beq.w	10127e6 <C1219_st_7_full_write+0x1f9a>
 101220c:	f300 8194 	bgt.w	1012538 <C1219_st_7_full_write+0x1cec>
 1012210:	2b19      	cmp	r3, #25
 1012212:	f000 833b 	beq.w	101288c <C1219_st_7_full_write+0x2040>
 1012216:	f300 8335 	bgt.w	1012884 <C1219_st_7_full_write+0x2038>
				REGS_APP_vClear_st_24();
 101221a:	4b2a      	ldr	r3, [pc, #168]	; (10122c4 <C1219_st_7_full_write+0x1a78>)
 101221c:	4798      	blx	r3
 101221e:	e565      	b.n	1011cec <C1219_st_7_full_write+0x14a0>
		switch (table_selected) {
 1012220:	2b3d      	cmp	r3, #61	; 0x3d
 1012222:	f000 82ac 	beq.w	101277e <C1219_st_7_full_write+0x1f32>
 1012226:	f300 820f 	bgt.w	1012648 <C1219_st_7_full_write+0x1dfc>
 101222a:	2b35      	cmp	r3, #53	; 0x35
 101222c:	f000 82a3 	beq.w	1012776 <C1219_st_7_full_write+0x1f2a>
 1012230:	2b36      	cmp	r3, #54	; 0x36
 1012232:	f47f ad30 	bne.w	1011c96 <C1219_st_7_full_write+0x144a>
				SM_APP_bRestore_st_54_from_backup(backup_area_id);
 1012236:	4b24      	ldr	r3, [pc, #144]	; (10122c8 <C1219_st_7_full_write+0x1a7c>)
 1012238:	4798      	blx	r3
 101223a:	f7ff b81c 	b.w	1011276 <C1219_st_7_full_write+0xa2a>
		switch (table_selected) {
 101223e:	2b2a      	cmp	r3, #42	; 0x2a
 1012240:	f000 8279 	beq.w	1012736 <C1219_st_7_full_write+0x1eea>
 1012244:	f300 81b4 	bgt.w	10125b0 <C1219_st_7_full_write+0x1d64>
 1012248:	2b1b      	cmp	r3, #27
 101224a:	f000 827c 	beq.w	1012746 <C1219_st_7_full_write+0x1efa>
 101224e:	2b29      	cmp	r3, #41	; 0x29
 1012250:	f47e aeea 	bne.w	1011028 <C1219_st_7_full_write+0x7dc>
				is_ok = SM_APP_bBack_up_st_41(backup_area_id);
 1012254:	4b1d      	ldr	r3, [pc, #116]	; (10122cc <C1219_st_7_full_write+0x1a80>)
 1012256:	4798      	blx	r3
 1012258:	f7fe bee2 	b.w	1011020 <C1219_st_7_full_write+0x7d4>
		switch (table_selected) {
 101225c:	2b2a      	cmp	r3, #42	; 0x2a
 101225e:	f000 827e 	beq.w	101275e <C1219_st_7_full_write+0x1f12>
 1012262:	f300 81af 	bgt.w	10125c4 <C1219_st_7_full_write+0x1d78>
 1012266:	2b1b      	cmp	r3, #27
 1012268:	f000 8275 	beq.w	1012756 <C1219_st_7_full_write+0x1f0a>
 101226c:	2b29      	cmp	r3, #41	; 0x29
 101226e:	f47f ad12 	bne.w	1011c96 <C1219_st_7_full_write+0x144a>
				SM_APP_bRestore_st_41_from_backup(backup_area_id);
 1012272:	4b17      	ldr	r3, [pc, #92]	; (10122d0 <C1219_st_7_full_write+0x1a84>)
 1012274:	4798      	blx	r3
 1012276:	f7fe bffe 	b.w	1011276 <C1219_st_7_full_write+0xa2a>
		switch (table_selected) {
 101227a:	2b3d      	cmp	r3, #61	; 0x3d
 101227c:	f000 8287 	beq.w	101278e <C1219_st_7_full_write+0x1f42>
 1012280:	f300 81f8 	bgt.w	1012674 <C1219_st_7_full_write+0x1e28>
 1012284:	2b35      	cmp	r3, #53	; 0x35
 1012286:	f000 8236 	beq.w	10126f6 <C1219_st_7_full_write+0x1eaa>
 101228a:	2b36      	cmp	r3, #54	; 0x36
 101228c:	f47e aecc 	bne.w	1011028 <C1219_st_7_full_write+0x7dc>
				is_ok = SM_APP_bBack_up_st_54(backup_area_id);
 1012290:	4b10      	ldr	r3, [pc, #64]	; (10122d4 <C1219_st_7_full_write+0x1a88>)
 1012292:	4798      	blx	r3
 1012294:	f7fe bec4 	b.w	1011020 <C1219_st_7_full_write+0x7d4>
 1012298:	010170a5 	.word	0x010170a5
 101229c:	20000918 	.word	0x20000918
 10122a0:	01016445 	.word	0x01016445
 10122a4:	0101a1c9 	.word	0x0101a1c9
 10122a8:	01024c81 	.word	0x01024c81
 10122ac:	0101a16d 	.word	0x0101a16d
 10122b0:	20000930 	.word	0x20000930
 10122b4:	01019a81 	.word	0x01019a81
 10122b8:	01016465 	.word	0x01016465
 10122bc:	0101e579 	.word	0x0101e579
 10122c0:	01020405 	.word	0x01020405
 10122c4:	01027ca1 	.word	0x01027ca1
 10122c8:	01023139 	.word	0x01023139
 10122cc:	010226f9 	.word	0x010226f9
 10122d0:	010227d9 	.word	0x010227d9
 10122d4:	01023065 	.word	0x01023065
			REGS_APP_vDemand_reset(c1219_ptr->c1218_apl.user_id, curr_season, timestamp);
 10122d8:	462a      	mov	r2, r5
 10122da:	8960      	ldrh	r0, [r4, #10]
 10122dc:	4bbe      	ldr	r3, [pc, #760]	; (10125d8 <C1219_st_7_full_write+0x1d8c>)
 10122de:	4639      	mov	r1, r7
 10122e0:	4798      	blx	r3
			if ( c1219_ptr->c1218_dll->uart == OP_UART ) {
 10122e2:	6860      	ldr	r0, [r4, #4]
 10122e4:	4abd      	ldr	r2, [pc, #756]	; (10125dc <C1219_st_7_full_write+0x1d90>)
 10122e6:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 10122ea:	4293      	cmp	r3, r2
 10122ec:	f000 839a 	beq.w	1012a24 <C1219_st_7_full_write+0x21d8>
			else if ( c1219_ptr->c1218_dll->uart == NIC_UART ) {
 10122f0:	4abb      	ldr	r2, [pc, #748]	; (10125e0 <C1219_st_7_full_write+0x1d94>)
 10122f2:	4293      	cmp	r3, r2
 10122f4:	f000 838e 	beq.w	1012a14 <C1219_st_7_full_write+0x21c8>
 10122f8:	6883      	ldr	r3, [r0, #8]
 10122fa:	7a1b      	ldrb	r3, [r3, #8]
 10122fc:	f7ff bb0b 	b.w	1011916 <C1219_st_7_full_write+0x10ca>
			REGS_APP_vSelf_read(c1219_ptr->c1218_apl.user_id, curr_season, timestamp);
 1012300:	8960      	ldrh	r0, [r4, #10]
 1012302:	4bb8      	ldr	r3, [pc, #736]	; (10125e4 <C1219_st_7_full_write+0x1d98>)
 1012304:	462a      	mov	r2, r5
 1012306:	4639      	mov	r1, r7
 1012308:	4798      	blx	r3
 101230a:	6860      	ldr	r0, [r4, #4]
 101230c:	6883      	ldr	r3, [r0, #8]
 101230e:	7a1b      	ldrb	r3, [r3, #8]
 1012310:	f7ff bafe 	b.w	1011910 <C1219_st_7_full_write+0x10c4>
			rtc_temp.utc_timestamp = (uint32_t)c1219_ptr->c1218_dll->rx_data[TIMESTAMP_INDEX];
 1012314:	6863      	ldr	r3, [r4, #4]
			RTC_APP_vLoad_tm_zn_dst(&rtc_temp);
 1012316:	49b4      	ldr	r1, [pc, #720]	; (10125e8 <C1219_st_7_full_write+0x1d9c>)
			rtc_temp.utc_timestamp = (uint32_t)c1219_ptr->c1218_dll->rx_data[TIMESTAMP_INDEX];
 1012318:	689a      	ldr	r2, [r3, #8]
			RTC_APP_vBreak_timestamp(&rtc_temp, rtc_temp.timestamp);
 101231a:	f8df a310 	ldr.w	sl, [pc, #784]	; 101262c <C1219_st_7_full_write+0x1de0>
			rtc_temp.utc_timestamp += (uint32_t)(c1219_ptr->c1218_dll->rx_data[TIMESTAMP_INDEX + 2]) << 16;
 101231e:	7ad3      	ldrb	r3, [r2, #11]
			rtc_temp.utc_timestamp += (uint32_t)(c1219_ptr->c1218_dll->rx_data[TIMESTAMP_INDEX + 1]) << 8;
 1012320:	7a95      	ldrb	r5, [r2, #10]
			rtc_temp.utc_timestamp = (uint32_t)c1219_ptr->c1218_dll->rx_data[TIMESTAMP_INDEX];
 1012322:	7a50      	ldrb	r0, [r2, #9]
			rtc_temp.utc_timestamp += (uint32_t)(c1219_ptr->c1218_dll->rx_data[TIMESTAMP_INDEX + 3]) << 24;
 1012324:	7b12      	ldrb	r2, [r2, #12]
			rtc_temp.utc_timestamp += (uint32_t)(c1219_ptr->c1218_dll->rx_data[TIMESTAMP_INDEX + 2]) << 16;
 1012326:	041b      	lsls	r3, r3, #16
 1012328:	eb03 2305 	add.w	r3, r3, r5, lsl #8
 101232c:	4403      	add	r3, r0
			rtc_temp.utc_timestamp += (uint32_t)(c1219_ptr->c1218_dll->rx_data[TIMESTAMP_INDEX + 3]) << 24;
 101232e:	eb03 6302 	add.w	r3, r3, r2, lsl #24
			RTC_APP_vLoad_tm_zn_dst(&rtc_temp);
 1012332:	a81a      	add	r0, sp, #104	; 0x68
			rtc_temp.utc_timestamp += (uint32_t)(c1219_ptr->c1218_dll->rx_data[TIMESTAMP_INDEX + 3]) << 24;
 1012334:	931b      	str	r3, [sp, #108]	; 0x6c
			RTC_APP_vLoad_tm_zn_dst(&rtc_temp);
 1012336:	4788      	blx	r1
			rtc_temp.timestamp = rtc_temp.utc_timestamp + rtc_temp.time_zone_offset;
 1012338:	9a24      	ldr	r2, [sp, #144]	; 0x90
 101233a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 101233c:	4413      	add	r3, r2
			RTC_APP_vBreak_timestamp(&rtc_temp, rtc_temp.timestamp);
 101233e:	4619      	mov	r1, r3
 1012340:	a81a      	add	r0, sp, #104	; 0x68
			rtc_temp.timestamp = rtc_temp.utc_timestamp + rtc_temp.time_zone_offset;
 1012342:	931c      	str	r3, [sp, #112]	; 0x70
			RTC_APP_vBreak_timestamp(&rtc_temp, rtc_temp.timestamp);
 1012344:	47d0      	blx	sl
			rtc_temp.dst_applied_flag = TOU_APP_ucLoad_dst_dates(&rtc_temp);
 1012346:	4ba9      	ldr	r3, [pc, #676]	; (10125ec <C1219_st_7_full_write+0x1da0>)
 1012348:	a81a      	add	r0, sp, #104	; 0x68
 101234a:	4798      	blx	r3
			if ( (rtc_temp.timestamp >= rtc_temp.dst_to_effective) && (rtc_temp.timestamp < rtc_temp.dst_from_effective) ) {
 101234c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 101234e:	9921      	ldr	r1, [sp, #132]	; 0x84
			rtc_temp.dst_applied_flag = TOU_APP_ucLoad_dst_dates(&rtc_temp);
 1012350:	f88d 007c 	strb.w	r0, [sp, #124]	; 0x7c
			rtc_temp.is_dst = 0;
 1012354:	2200      	movs	r2, #0
			if ( (rtc_temp.timestamp >= rtc_temp.dst_to_effective) && (rtc_temp.timestamp < rtc_temp.dst_from_effective) ) {
 1012356:	428b      	cmp	r3, r1
			rtc_temp.is_dst = 0;
 1012358:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
			rtc_temp.dst_step = 0;
 101235c:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
			if ( (rtc_temp.timestamp >= rtc_temp.dst_to_effective) && (rtc_temp.timestamp < rtc_temp.dst_from_effective) ) {
 1012360:	f0c0 8121 	bcc.w	10125a6 <C1219_st_7_full_write+0x1d5a>
 1012364:	9a22      	ldr	r2, [sp, #136]	; 0x88
 1012366:	4293      	cmp	r3, r2
 1012368:	f0c0 8111 	bcc.w	101258e <C1219_st_7_full_write+0x1d42>
				rtc_temp.dst_step = 2;
 101236c:	2302      	movs	r3, #2
 101236e:	f88d 307e 	strb.w	r3, [sp, #126]	; 0x7e
			rtc_temp.is_time_relative = 0;			
 1012372:	2700      	movs	r7, #0
 1012374:	f88d 706a 	strb.w	r7, [sp, #106]	; 0x6a
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 1012378:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
 101237a:	f3bf 8f5f 	dmb	sy
			rtc = rtc_temp;
 101237e:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 1012382:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
			rtc_backup = rtc;
 1012386:	f896 b015 	ldrb.w	fp, [r6, #21]
 101238a:	f8d6 9004 	ldr.w	r9, [r6, #4]
			rtc = rtc_temp;
 101238e:	4e98      	ldr	r6, [pc, #608]	; (10125f0 <C1219_st_7_full_write+0x1da4>)
			Disable_global_interrupt();
 1012390:	f8df c29c 	ldr.w	ip, [pc, #668]	; 1012630 <C1219_st_7_full_write+0x1de4>
			rtc = rtc_temp;
 1012394:	4635      	mov	r5, r6
 1012396:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 1012398:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 101239c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 101239e:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
			Enable_global_interrupt();
 10123a2:	f04f 0e01 	mov.w	lr, #1
			Disable_global_interrupt();
 10123a6:	f88c 7000 	strb.w	r7, [ip]
			rtc.tick_count = 0;
 10123aa:	8037      	strh	r7, [r6, #0]
			rtc = rtc_temp;
 10123ac:	e885 0007 	stmia.w	r5, {r0, r1, r2}
			Enable_global_interrupt();
 10123b0:	f88c e000 	strb.w	lr, [ip]
 10123b4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
 10123b8:	b662      	cpsie	i
			EVNT_APP_vRegister_event(TIME_CHANGED_A, 0, true, c1219_ptr->c1218_apl.user_id, rtc_backup.utc_timestamp);
 10123ba:	2003      	movs	r0, #3
 10123bc:	8963      	ldrh	r3, [r4, #10]
 10123be:	f8cd 9000 	str.w	r9, [sp]
 10123c2:	4672      	mov	r2, lr
 10123c4:	4639      	mov	r1, r7
 10123c6:	47c0      	blx	r8
			if (c1219_ptr->c1218_dll->uart == OP_UART) {
 10123c8:	6863      	ldr	r3, [r4, #4]
 10123ca:	4a84      	ldr	r2, [pc, #528]	; (10125dc <C1219_st_7_full_write+0x1d90>)
 10123cc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 10123d0:	4293      	cmp	r3, r2
 10123d2:	f000 8290 	beq.w	10128f6 <C1219_st_7_full_write+0x20aa>
			else if (c1219_ptr->c1218_dll->uart == NIC_UART) {
 10123d6:	4a82      	ldr	r2, [pc, #520]	; (10125e0 <C1219_st_7_full_write+0x1d94>)
 10123d8:	4293      	cmp	r3, r2
 10123da:	f000 8336 	beq.w	1012a4a <C1219_st_7_full_write+0x21fe>
			EVNT_APP_vRegister_event(TIME_CHANGED_B, 0, true, c1219_ptr->c1218_apl.user_id, rtc.utc_timestamp);
 10123de:	6872      	ldr	r2, [r6, #4]
 10123e0:	8963      	ldrh	r3, [r4, #10]
 10123e2:	9200      	str	r2, [sp, #0]
 10123e4:	2100      	movs	r1, #0
 10123e6:	2201      	movs	r2, #1
 10123e8:	2004      	movs	r0, #4
 10123ea:	47c0      	blx	r8
			if (c1219_ptr->c1218_dll->uart == OP_UART) {
 10123ec:	6863      	ldr	r3, [r4, #4]
 10123ee:	4a7b      	ldr	r2, [pc, #492]	; (10125dc <C1219_st_7_full_write+0x1d90>)
 10123f0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 10123f4:	4293      	cmp	r3, r2
 10123f6:	f000 8320 	beq.w	1012a3a <C1219_st_7_full_write+0x21ee>
			else if (c1219_ptr->c1218_dll->uart == NIC_UART) {
 10123fa:	4a79      	ldr	r2, [pc, #484]	; (10125e0 <C1219_st_7_full_write+0x1d94>)
 10123fc:	4293      	cmp	r3, r2
 10123fe:	d02f      	beq.n	1012460 <C1219_st_7_full_write+0x1c14>
			if ( (rtc_backup.is_dst == 0) && (rtc_backup.is_dst != rtc_temp.is_dst) ) {
 1012400:	f1bb 0f00 	cmp.w	fp, #0
 1012404:	f040 815b 	bne.w	10126be <C1219_st_7_full_write+0x1e72>
 1012408:	f89d 307d 	ldrb.w	r3, [sp, #125]	; 0x7d
 101240c:	2b00      	cmp	r3, #0
 101240e:	f000 815a 	beq.w	10126c6 <C1219_st_7_full_write+0x1e7a>
				tou_os.register_dst_on = true;
 1012412:	4b78      	ldr	r3, [pc, #480]	; (10125f4 <C1219_st_7_full_write+0x1da8>)
				tou_os.user = c1219_ptr->c1218_apl.user_id;
 1012414:	8962      	ldrh	r2, [r4, #10]
 1012416:	731a      	strb	r2, [r3, #12]
				tou_os.register_dst_on = true;
 1012418:	2101      	movs	r1, #1
				tou_os.event_timestamp = rtc.utc_timestamp;
 101241a:	6872      	ldr	r2, [r6, #4]
				tou_os.register_dst_on = true;
 101241c:	7199      	strb	r1, [r3, #6]
				tou_os.event_timestamp = rtc.utc_timestamp;
 101241e:	609a      	str	r2, [r3, #8]
			TOU_APP_vTask();
 1012420:	4a75      	ldr	r2, [pc, #468]	; (10125f8 <C1219_st_7_full_write+0x1dac>)
			tou_os.rtc_change_mask = (SECOND_CHANGE_bm | MINUTE_CHANGE_bm | HOUR_CHANGE_bm | DAY_CHANGE_bm | MONTH_CHANGE_bm | YEAR_CHANGE_bm);
 1012422:	213f      	movs	r1, #63	; 0x3f
 1012424:	7159      	strb	r1, [r3, #5]
			TOU_APP_vTask();
 1012426:	4790      	blx	r2
			LP_APP_vSynchronize_clock(rtc_backup.utc_timestamp, rtc.utc_timestamp);	
 1012428:	4648      	mov	r0, r9
 101242a:	6871      	ldr	r1, [r6, #4]
 101242c:	4b73      	ldr	r3, [pc, #460]	; (10125fc <C1219_st_7_full_write+0x1db0>)
 101242e:	4798      	blx	r3
			RTC_APP_vBreak_timestamp(&rtc_temp, rtc.utc_timestamp);
 1012430:	a81a      	add	r0, sp, #104	; 0x68
 1012432:	6871      	ldr	r1, [r6, #4]
 1012434:	47d0      	blx	sl
					RX8900_APP_bWrite_date_time(rtc_temp.htime.second, rtc_temp.htime.minute, rtc_temp.htime.hour, 
 1012436:	f8bd 5074 	ldrh.w	r5, [sp, #116]	; 0x74
 101243a:	f89d 7076 	ldrb.w	r7, [sp, #118]	; 0x76
 101243e:	9502      	str	r5, [sp, #8]
 1012440:	f89d 5077 	ldrb.w	r5, [sp, #119]	; 0x77
 1012444:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 1012448:	f89d 2078 	ldrb.w	r2, [sp, #120]	; 0x78
 101244c:	f89d 1079 	ldrb.w	r1, [sp, #121]	; 0x79
 1012450:	f89d 007a 	ldrb.w	r0, [sp, #122]	; 0x7a
 1012454:	e88d 00a0 	stmia.w	sp, {r5, r7}
 1012458:	4d69      	ldr	r5, [pc, #420]	; (1012600 <C1219_st_7_full_write+0x1db4>)
 101245a:	47a8      	blx	r5
 101245c:	f7fe bf49 	b.w	10112f2 <C1219_st_7_full_write+0xaa6>
				EVNT_APP_vRegister_event(TIME_CHANGED_B_NIC, 0, false, c1219_ptr->c1218_apl.user_id, rtc.utc_timestamp);
 1012460:	6872      	ldr	r2, [r6, #4]
 1012462:	8963      	ldrh	r3, [r4, #10]
 1012464:	9200      	str	r2, [sp, #0]
 1012466:	2200      	movs	r2, #0
 1012468:	4611      	mov	r1, r2
 101246a:	2013      	movs	r0, #19
 101246c:	47c0      	blx	r8
 101246e:	e7c7      	b.n	1012400 <C1219_st_7_full_write+0x1bb4>
			memcpy(&ota_image.part_number, &c1219_ptr->c1218_dll->rx_data[PROCEDURE_PARAMETER_INDEX + 5], 8 );
 1012470:	4611      	mov	r1, r2
			ota_image.size |= ((uint32_t)c1219_ptr->c1218_dll->rx_data[PROCEDURE_PARAMETER_INDEX + 4]) << 24;
 1012472:	f8d2 a009 	ldr.w	sl, [r2, #9]
			memcpy(&ota_image.part_number, &c1219_ptr->c1218_dll->rx_data[PROCEDURE_PARAMETER_INDEX + 5], 8 );
 1012476:	f851 0f0d 	ldr.w	r0, [r1, #13]!
			ota_image.size |= ((uint32_t)c1219_ptr->c1218_dll->rx_data[PROCEDURE_PARAMETER_INDEX + 4]) << 24;
 101247a:	f8c6 a004 	str.w	sl, [r6, #4]
			c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 101247e:	f04f 0ac9 	mov.w	sl, #201	; 0xc9
			memcpy(&ota_image.part_number, &c1219_ptr->c1218_dll->rx_data[PROCEDURE_PARAMETER_INDEX + 5], 8 );
 1012482:	6849      	ldr	r1, [r1, #4]
			ota_image.new_version = c1219_ptr->c1218_dll->rx_data[PROCEDURE_PARAMETER_INDEX + 13];
 1012484:	f892 9015 	ldrb.w	r9, [r2, #21]
			ota_image.new_revision = c1219_ptr->c1218_dll->rx_data[PROCEDURE_PARAMETER_INDEX + 14];
 1012488:	f892 c016 	ldrb.w	ip, [r2, #22]
			c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 101248c:	f883 a160 	strb.w	sl, [r3, #352]	; 0x160
			c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1012490:	6863      	ldr	r3, [r4, #4]
			ota_image.new_version = c1219_ptr->c1218_dll->rx_data[PROCEDURE_PARAMETER_INDEX + 13];
 1012492:	f886 9020 	strb.w	r9, [r6, #32]
			c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 1012496:	f04f 0908 	mov.w	r9, #8
 101249a:	f883 9161 	strb.w	r9, [r3, #353]	; 0x161
			c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 101249e:	6863      	ldr	r3, [r4, #4]
 10124a0:	783a      	ldrb	r2, [r7, #0]
 10124a2:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
			c1219_ptr->c1218_dll->st_08_data[k++] = PROC_ACCEPTED_NOT_COMPLETED;
 10124a6:	6863      	ldr	r3, [r4, #4]
			C1218_send_ok(c1219_ptr->c1218_dll);
 10124a8:	4a56      	ldr	r2, [pc, #344]	; (1012604 <C1219_st_7_full_write+0x1db8>)
			c1219_ptr->c1218_dll->st_08_data[k++] = PROC_ACCEPTED_NOT_COMPLETED;
 10124aa:	f883 8163 	strb.w	r8, [r3, #355]	; 0x163
			c1219_ptr->c1218_dll->st_08_length = k;
 10124ae:	6863      	ldr	r3, [r4, #4]
			ota_image.new_revision = c1219_ptr->c1218_dll->rx_data[PROCEDURE_PARAMETER_INDEX + 14];
 10124b0:	f886 c021 	strb.w	ip, [r6, #33]	; 0x21
			c1219_ptr->c1218_dll->st_08_length = k;
 10124b4:	f04f 0904 	mov.w	r9, #4
 10124b8:	f8a3 91f6 	strh.w	r9, [r3, #502]	; 0x1f6
			memcpy(&ota_image.part_number, &c1219_ptr->c1218_dll->rx_data[PROCEDURE_PARAMETER_INDEX + 5], 8 );
 10124bc:	f106 0e08 	add.w	lr, r6, #8
 10124c0:	e8ae 0003 	stmia.w	lr!, {r0, r1}
			C1218_send_ok(c1219_ptr->c1218_dll);
 10124c4:	6860      	ldr	r0, [r4, #4]
 10124c6:	4790      	blx	r2
			crc_1 = CRC_image_crc16_calc();
 10124c8:	4b4f      	ldr	r3, [pc, #316]	; (1012608 <C1219_st_7_full_write+0x1dbc>)
 10124ca:	4798      	blx	r3
 10124cc:	4b4f      	ldr	r3, [pc, #316]	; (101260c <C1219_st_7_full_write+0x1dc0>)
			crc_2 = crc_1 & 0x0000FFFF;
 10124ce:	4950      	ldr	r1, [pc, #320]	; (1012610 <C1219_st_7_full_write+0x1dc4>)
			crc_1 = CRC_image_crc16_calc();
 10124d0:	6018      	str	r0, [r3, #0]
			crc_2 = crc_1 & 0x0000FFFF;
 10124d2:	681a      	ldr	r2, [r3, #0]
 10124d4:	b292      	uxth	r2, r2
 10124d6:	600a      	str	r2, [r1, #0]
			crc_1 >>= 16;
 10124d8:	681a      	ldr	r2, [r3, #0]
 10124da:	0c12      	lsrs	r2, r2, #16
 10124dc:	601a      	str	r2, [r3, #0]
			if ( crc_1 != crc_2 ) {
 10124de:	681a      	ldr	r2, [r3, #0]
 10124e0:	680b      	ldr	r3, [r1, #0]
 10124e2:	429a      	cmp	r2, r3
				c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id & 0x00FF);
 10124e4:	6862      	ldr	r2, [r4, #4]
 10124e6:	882b      	ldrh	r3, [r5, #0]
 10124e8:	f882 3160 	strb.w	r3, [r2, #352]	; 0x160
			if ( crc_1 != crc_2 ) {
 10124ec:	f000 81ea 	beq.w	10128c4 <C1219_st_7_full_write+0x2078>
				c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 10124f0:	6861      	ldr	r1, [r4, #4]
				c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 10124f2:	783a      	ldrb	r2, [r7, #0]
				c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 10124f4:	0a1b      	lsrs	r3, r3, #8
 10124f6:	f881 3161 	strb.w	r3, [r1, #353]	; 0x161
				c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 10124fa:	6863      	ldr	r3, [r4, #4]
 10124fc:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
				c1219_ptr->c1218_dll->st_08_data[k++] = PROC_CONFLICT_WITH_SET_UP;
 1012500:	6863      	ldr	r3, [r4, #4]
 1012502:	2203      	movs	r2, #3
 1012504:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
				c1219_ptr->c1218_dll->st_08_length = k;
 1012508:	6863      	ldr	r3, [r4, #4]
 101250a:	f8a3 91f6 	strh.w	r9, [r3, #502]	; 0x1f6
			ota_image.initiation = 0;
 101250e:	2300      	movs	r3, #0
 1012510:	7033      	strb	r3, [r6, #0]
			ota_image.type = 0;
 1012512:	70b3      	strb	r3, [r6, #2]
			ota_image.size = 0;
 1012514:	6073      	str	r3, [r6, #4]
			ota_image.memory_busy = 0;
 1012516:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
 101251a:	f7fe ba3a 	b.w	1010992 <C1219_st_7_full_write+0x146>
		switch (table_selected) {
 101251e:	2b47      	cmp	r3, #71	; 0x47
 1012520:	f000 81bc 	beq.w	101289c <C1219_st_7_full_write+0x2050>
 1012524:	2b49      	cmp	r3, #73	; 0x49
 1012526:	f000 81b5 	beq.w	1012894 <C1219_st_7_full_write+0x2048>
 101252a:	2b3f      	cmp	r3, #63	; 0x3f
 101252c:	f47f a9b8 	bne.w	10118a0 <C1219_st_7_full_write+0x1054>
				LP_APP_bSt_63_restore_default_values();
 1012530:	4b38      	ldr	r3, [pc, #224]	; (1012614 <C1219_st_7_full_write+0x1dc8>)
 1012532:	4798      	blx	r3
 1012534:	f7ff bbda 	b.w	1011cec <C1219_st_7_full_write+0x14a0>
		switch (table_selected) {
 1012538:	2b2a      	cmp	r3, #42	; 0x2a
 101253a:	f000 817d 	beq.w	1012838 <C1219_st_7_full_write+0x1fec>
 101253e:	f300 8177 	bgt.w	1012830 <C1219_st_7_full_write+0x1fe4>
 1012542:	2b29      	cmp	r3, #41	; 0x29
 1012544:	f47f a9ac 	bne.w	10118a0 <C1219_st_7_full_write+0x1054>
				SECR_APP_bSt_41_restore_default_values();
 1012548:	4b33      	ldr	r3, [pc, #204]	; (1012618 <C1219_st_7_full_write+0x1dcc>)
 101254a:	4798      	blx	r3
 101254c:	f7ff bbce 	b.w	1011cec <C1219_st_7_full_write+0x14a0>
		switch (table_selected) {
 1012550:	2b15      	cmp	r3, #21
 1012552:	f000 8182 	beq.w	101285a <C1219_st_7_full_write+0x200e>
 1012556:	f300 817c 	bgt.w	1012852 <C1219_st_7_full_write+0x2006>
 101255a:	2b0d      	cmp	r3, #13
 101255c:	f47f a9a0 	bne.w	10118a0 <C1219_st_7_full_write+0x1054>
				REGS_APP_bSt_13_restore_default_values();
 1012560:	4b2e      	ldr	r3, [pc, #184]	; (101261c <C1219_st_7_full_write+0x1dd0>)
 1012562:	4798      	blx	r3
 1012564:	f7ff bbc2 	b.w	1011cec <C1219_st_7_full_write+0x14a0>
		switch (table_selected) {
 1012568:	f640 0035 	movw	r0, #2101	; 0x835
 101256c:	4283      	cmp	r3, r0
 101256e:	f000 81a5 	beq.w	10128bc <C1219_st_7_full_write+0x2070>
 1012572:	f640 0049 	movw	r0, #2121	; 0x849
 1012576:	4283      	cmp	r3, r0
 1012578:	f000 819c 	beq.w	10128b4 <C1219_st_7_full_write+0x2068>
 101257c:	f640 0017 	movw	r0, #2071	; 0x817
 1012580:	4283      	cmp	r3, r0
 1012582:	f47f a98d 	bne.w	10118a0 <C1219_st_7_full_write+0x1054>
				SM_APP_vMt_23_restore_default_values();
 1012586:	4b26      	ldr	r3, [pc, #152]	; (1012620 <C1219_st_7_full_write+0x1dd4>)
 1012588:	4798      	blx	r3
 101258a:	f7ff bbaf 	b.w	1011cec <C1219_st_7_full_write+0x14a0>
				rtc_temp.timestamp += rtc_temp.dst_time_amount;
 101258e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 1012590:	4413      	add	r3, r2
				RTC_APP_vBreak_timestamp(&rtc_temp, rtc_temp.timestamp);
 1012592:	4619      	mov	r1, r3
				rtc_temp.is_dst = 1;
 1012594:	2201      	movs	r2, #1
				RTC_APP_vBreak_timestamp(&rtc_temp, rtc_temp.timestamp);
 1012596:	a81a      	add	r0, sp, #104	; 0x68
				rtc_temp.timestamp += rtc_temp.dst_time_amount;
 1012598:	931c      	str	r3, [sp, #112]	; 0x70
				rtc_temp.is_dst = 1;
 101259a:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
				rtc_temp.dst_step = 1;
 101259e:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
				RTC_APP_vBreak_timestamp(&rtc_temp, rtc_temp.timestamp);
 10125a2:	47d0      	blx	sl
 10125a4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
			if ( rtc_temp.timestamp >= rtc_temp.dst_from_effective ) {
 10125a6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 10125a8:	4293      	cmp	r3, r2
 10125aa:	f4ff aee2 	bcc.w	1012372 <C1219_st_7_full_write+0x1b26>
 10125ae:	e6dd      	b.n	101236c <C1219_st_7_full_write+0x1b20>
		switch (table_selected) {
 10125b0:	2b2b      	cmp	r3, #43	; 0x2b
 10125b2:	f000 80d8 	beq.w	1012766 <C1219_st_7_full_write+0x1f1a>
 10125b6:	2b2c      	cmp	r3, #44	; 0x2c
 10125b8:	f47e ad36 	bne.w	1011028 <C1219_st_7_full_write+0x7dc>
				is_ok = SM_APP_bBack_up_st_44(backup_area_id);
 10125bc:	4b19      	ldr	r3, [pc, #100]	; (1012624 <C1219_st_7_full_write+0x1dd8>)
 10125be:	4798      	blx	r3
 10125c0:	f7fe bd2e 	b.w	1011020 <C1219_st_7_full_write+0x7d4>
		switch (table_selected) {
 10125c4:	2b2b      	cmp	r3, #43	; 0x2b
 10125c6:	f000 808e 	beq.w	10126e6 <C1219_st_7_full_write+0x1e9a>
 10125ca:	2b2c      	cmp	r3, #44	; 0x2c
 10125cc:	f47f ab63 	bne.w	1011c96 <C1219_st_7_full_write+0x144a>
				SM_APP_bRestore_st_44_from_backup(backup_area_id);
 10125d0:	4b15      	ldr	r3, [pc, #84]	; (1012628 <C1219_st_7_full_write+0x1ddc>)
 10125d2:	4798      	blx	r3
 10125d4:	f7fe be4f 	b.w	1011276 <C1219_st_7_full_write+0xa2a>
 10125d8:	01029ad9 	.word	0x01029ad9
 10125dc:	48004000 	.word	0x48004000
 10125e0:	400e0600 	.word	0x400e0600
 10125e4:	01029ccd 	.word	0x01029ccd
 10125e8:	0102a369 	.word	0x0102a369
 10125ec:	0102d101 	.word	0x0102d101
 10125f0:	20017160 	.word	0x20017160
 10125f4:	200172b4 	.word	0x200172b4
 10125f8:	0102c761 	.word	0x0102c761
 10125fc:	0101c86d 	.word	0x0101c86d
 1012600:	01015ded 	.word	0x01015ded
 1012604:	01016445 	.word	0x01016445
 1012608:	01016c3d 	.word	0x01016c3d
 101260c:	2000091c 	.word	0x2000091c
 1012610:	20000920 	.word	0x20000920
 1012614:	0101ba01 	.word	0x0101ba01
 1012618:	0102aa11 	.word	0x0102aa11
 101261c:	0102675d 	.word	0x0102675d
 1012620:	010206b9 	.word	0x010206b9
 1012624:	01022bb5 	.word	0x01022bb5
 1012628:	01022c95 	.word	0x01022c95
 101262c:	01029ebd 	.word	0x01029ebd
 1012630:	2000008d 	.word	0x2000008d
		switch (table_selected) {
 1012634:	2b0d      	cmp	r3, #13
 1012636:	f000 80a6 	beq.w	1012786 <C1219_st_7_full_write+0x1f3a>
 101263a:	2b15      	cmp	r3, #21
 101263c:	f47e acf4 	bne.w	1011028 <C1219_st_7_full_write+0x7dc>
				is_ok = SM_APP_bBack_up_st_21(backup_area_id);
 1012640:	4bb1      	ldr	r3, [pc, #708]	; (1012908 <C1219_st_7_full_write+0x20bc>)
 1012642:	4798      	blx	r3
 1012644:	f7fe bcec 	b.w	1011020 <C1219_st_7_full_write+0x7d4>
		switch (table_selected) {
 1012648:	2b3e      	cmp	r3, #62	; 0x3e
 101264a:	f000 80bc 	beq.w	10127c6 <C1219_st_7_full_write+0x1f7a>
 101264e:	2b47      	cmp	r3, #71	; 0x47
 1012650:	f47f ab21 	bne.w	1011c96 <C1219_st_7_full_write+0x144a>
				SM_APP_bRestore_st_71_from_backup(backup_area_id);
 1012654:	4bad      	ldr	r3, [pc, #692]	; (101290c <C1219_st_7_full_write+0x20c0>)
 1012656:	4798      	blx	r3
 1012658:	f7fe be0d 	b.w	1011276 <C1219_st_7_full_write+0xa2a>
		switch (table_selected) {
 101265c:	2b4b      	cmp	r3, #75	; 0x4b
 101265e:	f000 809a 	beq.w	1012796 <C1219_st_7_full_write+0x1f4a>
 1012662:	f640 0201 	movw	r2, #2049	; 0x801
 1012666:	4293      	cmp	r3, r2
 1012668:	f47f ab15 	bne.w	1011c96 <C1219_st_7_full_write+0x144a>
				SM_APP_bRestore_mt_1_from_backup(backup_area_id);
 101266c:	4ba8      	ldr	r3, [pc, #672]	; (1012910 <C1219_st_7_full_write+0x20c4>)
 101266e:	4798      	blx	r3
 1012670:	f7fe be01 	b.w	1011276 <C1219_st_7_full_write+0xa2a>
		switch (table_selected) {
 1012674:	2b3e      	cmp	r3, #62	; 0x3e
 1012676:	f000 809e 	beq.w	10127b6 <C1219_st_7_full_write+0x1f6a>
 101267a:	2b47      	cmp	r3, #71	; 0x47
 101267c:	f47e acd4 	bne.w	1011028 <C1219_st_7_full_write+0x7dc>
				is_ok = SM_APP_bBack_up_st_71(backup_area_id);
 1012680:	4ba4      	ldr	r3, [pc, #656]	; (1012914 <C1219_st_7_full_write+0x20c8>)
 1012682:	4798      	blx	r3
 1012684:	f7fe bccc 	b.w	1011020 <C1219_st_7_full_write+0x7d4>
		switch (table_selected) {
 1012688:	2b4b      	cmp	r3, #75	; 0x4b
 101268a:	f000 80a4 	beq.w	10127d6 <C1219_st_7_full_write+0x1f8a>
 101268e:	f640 0201 	movw	r2, #2049	; 0x801
 1012692:	4293      	cmp	r3, r2
 1012694:	f47e acc8 	bne.w	1011028 <C1219_st_7_full_write+0x7dc>
				is_ok = SM_APP_bBack_up_mt_1(backup_area_id);
 1012698:	4b9f      	ldr	r3, [pc, #636]	; (1012918 <C1219_st_7_full_write+0x20cc>)
 101269a:	4798      	blx	r3
 101269c:	f7fe bcc0 	b.w	1011020 <C1219_st_7_full_write+0x7d4>
		switch (table_selected) {
 10126a0:	2b0d      	cmp	r3, #13
 10126a2:	d02c      	beq.n	10126fe <C1219_st_7_full_write+0x1eb2>
 10126a4:	2b15      	cmp	r3, #21
 10126a6:	f47f aaf6 	bne.w	1011c96 <C1219_st_7_full_write+0x144a>
				SM_APP_bRestore_st_21_from_backup(backup_area_id);
 10126aa:	4b9c      	ldr	r3, [pc, #624]	; (101291c <C1219_st_7_full_write+0x20d0>)
 10126ac:	4798      	blx	r3
 10126ae:	f7fe bde2 	b.w	1011276 <C1219_st_7_full_write+0xa2a>
				EEPROM_writer( ST_74_NBR_UNREAD_ENTRIES_ADDR, &entries_read, 2 );
 10126b2:	2202      	movs	r2, #2
 10126b4:	a91a      	add	r1, sp, #104	; 0x68
 10126b6:	f646 1081 	movw	r0, #27009	; 0x6981
 10126ba:	f7ff b9ba 	b.w	1011a32 <C1219_st_7_full_write+0x11e6>
			else if ( (rtc_backup.is_dst == 1) && (rtc_backup.is_dst != rtc_temp.is_dst) ) {
 10126be:	f1bb 0f01 	cmp.w	fp, #1
 10126c2:	f000 80d2 	beq.w	101286a <C1219_st_7_full_write+0x201e>
 10126c6:	4b96      	ldr	r3, [pc, #600]	; (1012920 <C1219_st_7_full_write+0x20d4>)
 10126c8:	e6aa      	b.n	1012420 <C1219_st_7_full_write+0x1bd4>
				EEPROM_writer( ST_63_NBR_UNREAD_BLOCKS_ADDR, &entries_read, 2 );
 10126ca:	2202      	movs	r2, #2
 10126cc:	a91a      	add	r1, sp, #104	; 0x68
 10126ce:	f646 1044 	movw	r0, #26948	; 0x6944
 10126d2:	f7ff b9ae 	b.w	1011a32 <C1219_st_7_full_write+0x11e6>
					GRAL_APP_bEnable_metering_mode(c1219_ptr->c1218_apl.user_id, c1219_ptr->c1218_dll->uart);
 10126d6:	4b93      	ldr	r3, [pc, #588]	; (1012924 <C1219_st_7_full_write+0x20d8>)
 10126d8:	4798      	blx	r3
 10126da:	f7fe ba9c 	b.w	1010c16 <C1219_st_7_full_write+0x3ca>
				is_ok = SM_APP_bBack_up_st_11(backup_area_id);
 10126de:	4b92      	ldr	r3, [pc, #584]	; (1012928 <C1219_st_7_full_write+0x20dc>)
 10126e0:	4798      	blx	r3
 10126e2:	f7fe bc9d 	b.w	1011020 <C1219_st_7_full_write+0x7d4>
				SM_APP_bRestore_st_43_from_backup(backup_area_id);
 10126e6:	4b91      	ldr	r3, [pc, #580]	; (101292c <C1219_st_7_full_write+0x20e0>)
 10126e8:	4798      	blx	r3
 10126ea:	f7fe bdc4 	b.w	1011276 <C1219_st_7_full_write+0xa2a>
				SM_APP_bRestore_mt_3_from_backup(backup_area_id);
 10126ee:	4b90      	ldr	r3, [pc, #576]	; (1012930 <C1219_st_7_full_write+0x20e4>)
 10126f0:	4798      	blx	r3
 10126f2:	f7fe bdc0 	b.w	1011276 <C1219_st_7_full_write+0xa2a>
				is_ok = SM_APP_bBack_up_st_53(backup_area_id);				
 10126f6:	4b8f      	ldr	r3, [pc, #572]	; (1012934 <C1219_st_7_full_write+0x20e8>)
 10126f8:	4798      	blx	r3
 10126fa:	f7fe bc91 	b.w	1011020 <C1219_st_7_full_write+0x7d4>
				SM_APP_bRestore_st_13_from_backup(backup_area_id);
 10126fe:	4b8e      	ldr	r3, [pc, #568]	; (1012938 <C1219_st_7_full_write+0x20ec>)
 1012700:	4798      	blx	r3
 1012702:	f7fe bdb8 	b.w	1011276 <C1219_st_7_full_write+0xa2a>
				SM_APP_bRestore_mt_23_from_backup(backup_area_id);
 1012706:	4b8d      	ldr	r3, [pc, #564]	; (101293c <C1219_st_7_full_write+0x20f0>)
 1012708:	4798      	blx	r3
 101270a:	f7fe bdb4 	b.w	1011276 <C1219_st_7_full_write+0xa2a>
				SM_APP_bRestore_mt_73_from_backup(backup_area_id);
 101270e:	4b8c      	ldr	r3, [pc, #560]	; (1012940 <C1219_st_7_full_write+0x20f4>)
 1012710:	4798      	blx	r3
 1012712:	f7fe bdb0 	b.w	1011276 <C1219_st_7_full_write+0xa2a>
				SM_APP_bRestore_st_73_from_backup(backup_area_id);
 1012716:	4b8b      	ldr	r3, [pc, #556]	; (1012944 <C1219_st_7_full_write+0x20f8>)
 1012718:	4798      	blx	r3
 101271a:	f7fe bdac 	b.w	1011276 <C1219_st_7_full_write+0xa2a>
				SM_APP_bRestore_st_1_from_backup(backup_area_id);
 101271e:	4b8a      	ldr	r3, [pc, #552]	; (1012948 <C1219_st_7_full_write+0x20fc>)
 1012720:	4798      	blx	r3
 1012722:	f7fe bda8 	b.w	1011276 <C1219_st_7_full_write+0xa2a>
				is_ok = SM_APP_bBack_up_st_51(backup_area_id);
 1012726:	4b89      	ldr	r3, [pc, #548]	; (101294c <C1219_st_7_full_write+0x2100>)
 1012728:	4798      	blx	r3
 101272a:	f7fe bc79 	b.w	1011020 <C1219_st_7_full_write+0x7d4>
				SM_APP_bRestore_st_51_from_backup(backup_area_id);
 101272e:	4b88      	ldr	r3, [pc, #544]	; (1012950 <C1219_st_7_full_write+0x2104>)
 1012730:	4798      	blx	r3
 1012732:	f7fe bda0 	b.w	1011276 <C1219_st_7_full_write+0xa2a>
				is_ok = SM_APP_bBack_up_st_42(backup_area_id);
 1012736:	4b87      	ldr	r3, [pc, #540]	; (1012954 <C1219_st_7_full_write+0x2108>)
 1012738:	4798      	blx	r3
 101273a:	f7fe bc71 	b.w	1011020 <C1219_st_7_full_write+0x7d4>
				SM_APP_bRestore_st_22_from_backup(backup_area_id);
 101273e:	4b86      	ldr	r3, [pc, #536]	; (1012958 <C1219_st_7_full_write+0x210c>)
 1012740:	4798      	blx	r3
 1012742:	f7fe bd98 	b.w	1011276 <C1219_st_7_full_write+0xa2a>
				is_ok = SM_APP_bBack_up_st_27(backup_area_id);
 1012746:	4b85      	ldr	r3, [pc, #532]	; (101295c <C1219_st_7_full_write+0x2110>)
 1012748:	4798      	blx	r3
 101274a:	f7fe bc69 	b.w	1011020 <C1219_st_7_full_write+0x7d4>
				is_ok = SM_APP_bBack_up_st_73(backup_area_id);
 101274e:	4b84      	ldr	r3, [pc, #528]	; (1012960 <C1219_st_7_full_write+0x2114>)
 1012750:	4798      	blx	r3
 1012752:	f7fe bc65 	b.w	1011020 <C1219_st_7_full_write+0x7d4>
				SM_APP_bRestore_st_27_from_backup(backup_area_id);
 1012756:	4b83      	ldr	r3, [pc, #524]	; (1012964 <C1219_st_7_full_write+0x2118>)
 1012758:	4798      	blx	r3
 101275a:	f7fe bd8c 	b.w	1011276 <C1219_st_7_full_write+0xa2a>
				SM_APP_bRestore_st_42_from_backup(backup_area_id);
 101275e:	4b82      	ldr	r3, [pc, #520]	; (1012968 <C1219_st_7_full_write+0x211c>)
 1012760:	4798      	blx	r3
 1012762:	f7fe bd88 	b.w	1011276 <C1219_st_7_full_write+0xa2a>
				is_ok = SM_APP_bBack_up_st_43(backup_area_id);
 1012766:	4b81      	ldr	r3, [pc, #516]	; (101296c <C1219_st_7_full_write+0x2120>)
 1012768:	4798      	blx	r3
 101276a:	f7fe bc59 	b.w	1011020 <C1219_st_7_full_write+0x7d4>
				is_ok = SM_APP_bBack_up_st_22(backup_area_id);
 101276e:	4b80      	ldr	r3, [pc, #512]	; (1012970 <C1219_st_7_full_write+0x2124>)
 1012770:	4798      	blx	r3
 1012772:	f7fe bc55 	b.w	1011020 <C1219_st_7_full_write+0x7d4>
				SM_APP_bRestore_st_53_from_backup(backup_area_id);
 1012776:	4b7f      	ldr	r3, [pc, #508]	; (1012974 <C1219_st_7_full_write+0x2128>)
 1012778:	4798      	blx	r3
 101277a:	f7fe bd7c 	b.w	1011276 <C1219_st_7_full_write+0xa2a>
				SM_APP_bRestore_st_61_from_backup(backup_area_id);
 101277e:	4b7e      	ldr	r3, [pc, #504]	; (1012978 <C1219_st_7_full_write+0x212c>)
 1012780:	4798      	blx	r3
 1012782:	f7fe bd78 	b.w	1011276 <C1219_st_7_full_write+0xa2a>
				is_ok = SM_APP_bBack_up_st_13(backup_area_id);
 1012786:	4b7d      	ldr	r3, [pc, #500]	; (101297c <C1219_st_7_full_write+0x2130>)
 1012788:	4798      	blx	r3
 101278a:	f7fe bc49 	b.w	1011020 <C1219_st_7_full_write+0x7d4>
				is_ok = SM_APP_bBack_up_st_61(backup_area_id);
 101278e:	4b7c      	ldr	r3, [pc, #496]	; (1012980 <C1219_st_7_full_write+0x2134>)
 1012790:	4798      	blx	r3
 1012792:	f7fe bc45 	b.w	1011020 <C1219_st_7_full_write+0x7d4>
				SM_APP_bRestore_st_75_from_backup(backup_area_id);
 1012796:	4b7b      	ldr	r3, [pc, #492]	; (1012984 <C1219_st_7_full_write+0x2138>)
 1012798:	4798      	blx	r3
 101279a:	f7fe bd6c 	b.w	1011276 <C1219_st_7_full_write+0xa2a>
				is_ok = SM_APP_bBack_up_mt_73(backup_area_id);
 101279e:	4b7a      	ldr	r3, [pc, #488]	; (1012988 <C1219_st_7_full_write+0x213c>)
 10127a0:	4798      	blx	r3
 10127a2:	f7fe bc3d 	b.w	1011020 <C1219_st_7_full_write+0x7d4>
				is_ok = SM_APP_bBack_up_mt_53(backup_area_id);
 10127a6:	4b79      	ldr	r3, [pc, #484]	; (101298c <C1219_st_7_full_write+0x2140>)
 10127a8:	4798      	blx	r3
 10127aa:	f7fe bc39 	b.w	1011020 <C1219_st_7_full_write+0x7d4>
				is_ok = SM_APP_bBack_up_mt_3(backup_area_id);
 10127ae:	4b78      	ldr	r3, [pc, #480]	; (1012990 <C1219_st_7_full_write+0x2144>)
 10127b0:	4798      	blx	r3
 10127b2:	f7fe bc35 	b.w	1011020 <C1219_st_7_full_write+0x7d4>
				is_ok = SM_APP_bBack_up_st_62(backup_area_id);
 10127b6:	4b77      	ldr	r3, [pc, #476]	; (1012994 <C1219_st_7_full_write+0x2148>)
 10127b8:	4798      	blx	r3
 10127ba:	f7fe bc31 	b.w	1011020 <C1219_st_7_full_write+0x7d4>
				SM_APP_bRestore_mt_53_from_backup(backup_area_id);
 10127be:	4b76      	ldr	r3, [pc, #472]	; (1012998 <C1219_st_7_full_write+0x214c>)
 10127c0:	4798      	blx	r3
 10127c2:	f7fe bd58 	b.w	1011276 <C1219_st_7_full_write+0xa2a>
				SM_APP_bRestore_st_62_from_backup(backup_area_id);
 10127c6:	4b75      	ldr	r3, [pc, #468]	; (101299c <C1219_st_7_full_write+0x2150>)
 10127c8:	4798      	blx	r3
 10127ca:	f7fe bd54 	b.w	1011276 <C1219_st_7_full_write+0xa2a>
				SM_APP_bRestore_st_11_from_backup(backup_area_id);
 10127ce:	4b74      	ldr	r3, [pc, #464]	; (10129a0 <C1219_st_7_full_write+0x2154>)
 10127d0:	4798      	blx	r3
 10127d2:	f7fe bd50 	b.w	1011276 <C1219_st_7_full_write+0xa2a>
				is_ok = SM_APP_bBack_up_st_75(backup_area_id);
 10127d6:	4b73      	ldr	r3, [pc, #460]	; (10129a4 <C1219_st_7_full_write+0x2158>)
 10127d8:	4798      	blx	r3
 10127da:	f7fe bc21 	b.w	1011020 <C1219_st_7_full_write+0x7d4>
				is_ok = SM_APP_bBack_up_st_1(backup_area_id);
 10127de:	4b72      	ldr	r3, [pc, #456]	; (10129a8 <C1219_st_7_full_write+0x215c>)
 10127e0:	4798      	blx	r3
 10127e2:	f7fe bc1d 	b.w	1011020 <C1219_st_7_full_write+0x7d4>
				REGS_APP_bSt_27_restore_default_values();
 10127e6:	4b71      	ldr	r3, [pc, #452]	; (10129ac <C1219_st_7_full_write+0x2160>)
 10127e8:	4798      	blx	r3
 10127ea:	f7ff ba7f 	b.w	1011cec <C1219_st_7_full_write+0x14a0>
				SECR_APP_bSt_44_restore_default_values();
 10127ee:	4b70      	ldr	r3, [pc, #448]	; (10129b0 <C1219_st_7_full_write+0x2164>)
 10127f0:	4798      	blx	r3
 10127f2:	f7ff ba7b 	b.w	1011cec <C1219_st_7_full_write+0x14a0>
				EVNT_APP_vClear_st_74(c1219_ptr->c1218_apl.user_id);
 10127f6:	8960      	ldrh	r0, [r4, #10]
 10127f8:	4b6e      	ldr	r3, [pc, #440]	; (10129b4 <C1219_st_7_full_write+0x2168>)
 10127fa:	4798      	blx	r3
 10127fc:	f7ff ba76 	b.w	1011cec <C1219_st_7_full_write+0x14a0>
				REGS_APP_vClear_st_23();
 1012800:	4b6d      	ldr	r3, [pc, #436]	; (10129b8 <C1219_st_7_full_write+0x216c>)
 1012802:	4798      	blx	r3
 1012804:	f7ff ba72 	b.w	1011cec <C1219_st_7_full_write+0x14a0>
				LP_APP_bSt_61_restore_default_values();
 1012808:	4b6c      	ldr	r3, [pc, #432]	; (10129bc <C1219_st_7_full_write+0x2170>)
 101280a:	4798      	blx	r3
 101280c:	f7ff ba6e 	b.w	1011cec <C1219_st_7_full_write+0x14a0>
				TOU_APP_bSt_53_restore_default_values();
 1012810:	4b6b      	ldr	r3, [pc, #428]	; (10129c0 <C1219_st_7_full_write+0x2174>)
 1012812:	4798      	blx	r3
 1012814:	f7ff ba6a 	b.w	1011cec <C1219_st_7_full_write+0x14a0>
				LP_APP_bSt_62_restore_default_values();
 1012818:	4b6a      	ldr	r3, [pc, #424]	; (10129c4 <C1219_st_7_full_write+0x2178>)
 101281a:	4798      	blx	r3
 101281c:	f7ff ba66 	b.w	1011cec <C1219_st_7_full_write+0x14a0>
				GRAL_APP_bSt_6_restore_default_values();
 1012820:	4b69      	ldr	r3, [pc, #420]	; (10129c8 <C1219_st_7_full_write+0x217c>)
 1012822:	4798      	blx	r3
 1012824:	f7ff ba62 	b.w	1011cec <C1219_st_7_full_write+0x14a0>
				GRAL_APP_bSt_3_restore_default_values();
 1012828:	4b68      	ldr	r3, [pc, #416]	; (10129cc <C1219_st_7_full_write+0x2180>)
 101282a:	4798      	blx	r3
 101282c:	f7ff ba5e 	b.w	1011cec <C1219_st_7_full_write+0x14a0>
				SECR_APP_bSt_43_restore_default_values();
 1012830:	4b67      	ldr	r3, [pc, #412]	; (10129d0 <C1219_st_7_full_write+0x2184>)
 1012832:	4798      	blx	r3
 1012834:	f7ff ba5a 	b.w	1011cec <C1219_st_7_full_write+0x14a0>
				SECR_APP_bSt_42_restore_default_values();
 1012838:	4b66      	ldr	r3, [pc, #408]	; (10129d4 <C1219_st_7_full_write+0x2188>)
 101283a:	4798      	blx	r3
 101283c:	f7ff ba56 	b.w	1011cec <C1219_st_7_full_write+0x14a0>
				EVNT_APP_bSt_75_restore_default_values();
 1012840:	4b65      	ldr	r3, [pc, #404]	; (10129d8 <C1219_st_7_full_write+0x218c>)
 1012842:	4798      	blx	r3
 1012844:	f7ff ba52 	b.w	1011cec <C1219_st_7_full_write+0x14a0>
				EVNT_APP_vClear_st_76(c1219_ptr->c1218_apl.user_id);
 1012848:	8960      	ldrh	r0, [r4, #10]
 101284a:	4b64      	ldr	r3, [pc, #400]	; (10129dc <C1219_st_7_full_write+0x2190>)
 101284c:	4798      	blx	r3
 101284e:	f7ff ba4d 	b.w	1011cec <C1219_st_7_full_write+0x14a0>
				REGS_APP_bSt_22_restore_default_values();
 1012852:	4b63      	ldr	r3, [pc, #396]	; (10129e0 <C1219_st_7_full_write+0x2194>)
 1012854:	4798      	blx	r3
 1012856:	f7ff ba49 	b.w	1011cec <C1219_st_7_full_write+0x14a0>
				REGS_APP_bSt_21_restore_default_values();
 101285a:	4b62      	ldr	r3, [pc, #392]	; (10129e4 <C1219_st_7_full_write+0x2198>)
 101285c:	4798      	blx	r3
 101285e:	f7ff ba45 	b.w	1011cec <C1219_st_7_full_write+0x14a0>
				GRAL_APP_bSt_1_restore_default_values();
 1012862:	4b61      	ldr	r3, [pc, #388]	; (10129e8 <C1219_st_7_full_write+0x219c>)
 1012864:	4798      	blx	r3
 1012866:	f7ff ba41 	b.w	1011cec <C1219_st_7_full_write+0x14a0>
			else if ( (rtc_backup.is_dst == 1) && (rtc_backup.is_dst != rtc_temp.is_dst) ) {
 101286a:	f89d 307d 	ldrb.w	r3, [sp, #125]	; 0x7d
 101286e:	2b01      	cmp	r3, #1
				tou_os.register_dst_off = true;
 1012870:	4b2b      	ldr	r3, [pc, #172]	; (1012920 <C1219_st_7_full_write+0x20d4>)
			else if ( (rtc_backup.is_dst == 1) && (rtc_backup.is_dst != rtc_temp.is_dst) ) {
 1012872:	f43f add5 	beq.w	1012420 <C1219_st_7_full_write+0x1bd4>
				tou_os.user = c1219_ptr->c1218_apl.user_id;
 1012876:	8961      	ldrh	r1, [r4, #10]
				tou_os.event_timestamp = rtc.utc_timestamp;
 1012878:	6872      	ldr	r2, [r6, #4]
				tou_os.register_dst_off = true;
 101287a:	f883 b007 	strb.w	fp, [r3, #7]
				tou_os.user = c1219_ptr->c1218_apl.user_id;
 101287e:	7319      	strb	r1, [r3, #12]
				tou_os.event_timestamp = rtc.utc_timestamp;
 1012880:	609a      	str	r2, [r3, #8]
 1012882:	e5cd      	b.n	1012420 <C1219_st_7_full_write+0x1bd4>
				REGS_APP_vClear_st_26();
 1012884:	4b59      	ldr	r3, [pc, #356]	; (10129ec <C1219_st_7_full_write+0x21a0>)
 1012886:	4798      	blx	r3
 1012888:	f7ff ba30 	b.w	1011cec <C1219_st_7_full_write+0x14a0>
				REGS_APP_vClear_st_25();
 101288c:	4b58      	ldr	r3, [pc, #352]	; (10129f0 <C1219_st_7_full_write+0x21a4>)
 101288e:	4798      	blx	r3
 1012890:	f7ff ba2c 	b.w	1011cec <C1219_st_7_full_write+0x14a0>
				EVNT_APP_bSt_73_restore_default_values();
 1012894:	4b57      	ldr	r3, [pc, #348]	; (10129f4 <C1219_st_7_full_write+0x21a8>)
 1012896:	4798      	blx	r3
 1012898:	f7ff ba28 	b.w	1011cec <C1219_st_7_full_write+0x14a0>
				EVNT_APP_bSt_71_restore_default_values();
 101289c:	4b56      	ldr	r3, [pc, #344]	; (10129f8 <C1219_st_7_full_write+0x21ac>)
 101289e:	4798      	blx	r3
 10128a0:	f7ff ba24 	b.w	1011cec <C1219_st_7_full_write+0x14a0>
				REGS_APP_bSt_11_restore_default_values();
 10128a4:	4b55      	ldr	r3, [pc, #340]	; (10129fc <C1219_st_7_full_write+0x21b0>)
 10128a6:	4798      	blx	r3
 10128a8:	f7ff ba20 	b.w	1011cec <C1219_st_7_full_write+0x14a0>
				SM_APP_vMt_4_restore_default_values();
 10128ac:	4b54      	ldr	r3, [pc, #336]	; (1012a00 <C1219_st_7_full_write+0x21b4>)
 10128ae:	4798      	blx	r3
 10128b0:	f7ff ba1c 	b.w	1011cec <C1219_st_7_full_write+0x14a0>
				EVNT_APP_bMt_73_restore_default_values();
 10128b4:	4b53      	ldr	r3, [pc, #332]	; (1012a04 <C1219_st_7_full_write+0x21b8>)
 10128b6:	4798      	blx	r3
 10128b8:	f7ff ba18 	b.w	1011cec <C1219_st_7_full_write+0x14a0>
				SM_APP_vMt_53_restore_default_values();
 10128bc:	4b52      	ldr	r3, [pc, #328]	; (1012a08 <C1219_st_7_full_write+0x21bc>)
 10128be:	4798      	blx	r3
 10128c0:	f7ff ba14 	b.w	1011cec <C1219_st_7_full_write+0x14a0>
				c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 10128c4:	6862      	ldr	r2, [r4, #4]
				c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 10128c6:	7838      	ldrb	r0, [r7, #0]
				FLASH_boot_origin(0x55);
 10128c8:	4950      	ldr	r1, [pc, #320]	; (1012a0c <C1219_st_7_full_write+0x21c0>)
				c1219_ptr->c1218_dll->st_08_data[k++] = (uint8_t)(proc_id >> 8);
 10128ca:	0a1b      	lsrs	r3, r3, #8
 10128cc:	f882 3161 	strb.w	r3, [r2, #353]	; 0x161
				c1219_ptr->c1218_dll->st_08_data[k++] = proc_seq_nbr;
 10128d0:	6863      	ldr	r3, [r4, #4]
 10128d2:	f883 0162 	strb.w	r0, [r3, #354]	; 0x162
				c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 10128d6:	6862      	ldr	r2, [r4, #4]
				ota_image.memory_busy = 0;
 10128d8:	2300      	movs	r3, #0
				c1219_ptr->c1218_dll->st_08_data[k++] = PROC_COMPLETED;
 10128da:	f882 3163 	strb.w	r3, [r2, #355]	; 0x163
				c1219_ptr->c1218_dll->st_08_length = k;
 10128de:	6862      	ldr	r2, [r4, #4]
				ota_image.memory_busy = 0;
 10128e0:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
				c1219_ptr->c1218_dll->st_08_length = k;
 10128e4:	f8a2 91f6 	strh.w	r9, [r2, #502]	; 0x1f6
				FLASH_boot_origin(0x55);
 10128e8:	2055      	movs	r0, #85	; 0x55
 10128ea:	4788      	blx	r1
				FLASH_fwu_reset();
 10128ec:	4b48      	ldr	r3, [pc, #288]	; (1012a10 <C1219_st_7_full_write+0x21c4>)
				ota_image.activation = 1;
 10128ee:	f886 8001 	strb.w	r8, [r6, #1]
				FLASH_fwu_reset();
 10128f2:	4798      	blx	r3
 10128f4:	e60b      	b.n	101250e <C1219_st_7_full_write+0x1cc2>
				EVNT_APP_vRegister_event(TIME_CHANGED_A_OP, 0, false, c1219_ptr->c1218_apl.user_id, rtc_backup.utc_timestamp);
 10128f6:	8963      	ldrh	r3, [r4, #10]
 10128f8:	f8cd 9000 	str.w	r9, [sp]
 10128fc:	463a      	mov	r2, r7
 10128fe:	4639      	mov	r1, r7
 1012900:	2010      	movs	r0, #16
 1012902:	47c0      	blx	r8
 1012904:	e56b      	b.n	10123de <C1219_st_7_full_write+0x1b92>
 1012906:	bf00      	nop
 1012908:	0102223d 	.word	0x0102223d
 101290c:	010235f5 	.word	0x010235f5
 1012910:	01023a8d 	.word	0x01023a8d
 1012914:	01023515 	.word	0x01023515
 1012918:	010239d1 	.word	0x010239d1
 101291c:	0102231d 	.word	0x0102231d
 1012920:	200172b4 	.word	0x200172b4
 1012924:	01019fcd 	.word	0x01019fcd
 1012928:	01021f51 	.word	0x01021f51
 101292c:	01022b01 	.word	0x01022b01
 1012930:	01023c01 	.word	0x01023c01
 1012934:	01022edd 	.word	0x01022edd
 1012938:	010221a1 	.word	0x010221a1
 101293c:	01023d61 	.word	0x01023d61
 1012940:	01024061 	.word	0x01024061
 1012944:	01023789 	.word	0x01023789
 1012948:	01021d15 	.word	0x01021d15
 101294c:	01022d49 	.word	0x01022d49
 1012950:	01022e29 	.word	0x01022e29
 1012954:	0102288d 	.word	0x0102288d
 1012958:	010224b1 	.word	0x010224b1
 101295c:	01022565 	.word	0x01022565
 1012960:	010236a9 	.word	0x010236a9
 1012964:	01022645 	.word	0x01022645
 1012968:	0102296d 	.word	0x0102296d
 101296c:	01022a21 	.word	0x01022a21
 1012970:	010223d1 	.word	0x010223d1
 1012974:	01022fb1 	.word	0x01022fb1
 1012978:	010232cd 	.word	0x010232cd
 101297c:	010220e5 	.word	0x010220e5
 1012980:	010231ed 	.word	0x010231ed
 1012984:	0102391d 	.word	0x0102391d
 1012988:	01023f81 	.word	0x01023f81
 101298c:	01023e0d 	.word	0x01023e0d
 1012990:	01023b31 	.word	0x01023b31
 1012994:	01023381 	.word	0x01023381
 1012998:	01023edd 	.word	0x01023edd
 101299c:	01023461 	.word	0x01023461
 10129a0:	01022031 	.word	0x01022031
 10129a4:	0102383d 	.word	0x0102383d
 10129a8:	01021c41 	.word	0x01021c41
 10129ac:	010281fd 	.word	0x010281fd
 10129b0:	0102aff1 	.word	0x0102aff1
 10129b4:	01018ee9 	.word	0x01018ee9
 10129b8:	01027531 	.word	0x01027531
 10129bc:	0101b3d1 	.word	0x0101b3d1
 10129c0:	0102bf79 	.word	0x0102bf79
 10129c4:	0101b661 	.word	0x0101b661
 10129c8:	01019dd5 	.word	0x01019dd5
 10129cc:	01019c99 	.word	0x01019c99
 10129d0:	0102ae81 	.word	0x0102ae81
 10129d4:	0102ac2d 	.word	0x0102ac2d
 10129d8:	010191e1 	.word	0x010191e1
 10129dc:	010196a9 	.word	0x010196a9
 10129e0:	01026de9 	.word	0x01026de9
 10129e4:	01026b75 	.word	0x01026b75
 10129e8:	01019ae9 	.word	0x01019ae9
 10129ec:	01027f6d 	.word	0x01027f6d
 10129f0:	01027dc9 	.word	0x01027dc9
 10129f4:	01018755 	.word	0x01018755
 10129f8:	01018461 	.word	0x01018461
 10129fc:	010264f5 	.word	0x010264f5
 1012a00:	01020785 	.word	0x01020785
 1012a04:	01018aa5 	.word	0x01018aa5
 1012a08:	01020b4d 	.word	0x01020b4d
 1012a0c:	010199f5 	.word	0x010199f5
 1012a10:	01019981 	.word	0x01019981
				EVNT_APP_vRegister_event(DEMAND_RESET_OCCURRED_NIC, 0, false, c1219_ptr->c1218_apl.user_id, timestamp);
 1012a14:	2200      	movs	r2, #0
 1012a16:	8963      	ldrh	r3, [r4, #10]
 1012a18:	9500      	str	r5, [sp, #0]
 1012a1a:	201d      	movs	r0, #29
 1012a1c:	4611      	mov	r1, r2
 1012a1e:	47c0      	blx	r8
 1012a20:	6860      	ldr	r0, [r4, #4]
 1012a22:	e469      	b.n	10122f8 <C1219_st_7_full_write+0x1aac>
				EVNT_APP_vRegister_event(DEMAND_RESET_OCCURRED_OP, 0, false, c1219_ptr->c1218_apl.user_id, timestamp);
 1012a24:	2200      	movs	r2, #0
 1012a26:	8963      	ldrh	r3, [r4, #10]
 1012a28:	9500      	str	r5, [sp, #0]
 1012a2a:	201c      	movs	r0, #28
 1012a2c:	4611      	mov	r1, r2
 1012a2e:	47c0      	blx	r8
 1012a30:	6860      	ldr	r0, [r4, #4]
 1012a32:	6883      	ldr	r3, [r0, #8]
 1012a34:	7a1b      	ldrb	r3, [r3, #8]
 1012a36:	f7fe bf6e 	b.w	1011916 <C1219_st_7_full_write+0x10ca>
				EVNT_APP_vRegister_event(TIME_CHANGED_B_OP, 0, false, c1219_ptr->c1218_apl.user_id, rtc.utc_timestamp);
 1012a3a:	6872      	ldr	r2, [r6, #4]
 1012a3c:	8963      	ldrh	r3, [r4, #10]
 1012a3e:	9200      	str	r2, [sp, #0]
 1012a40:	2200      	movs	r2, #0
 1012a42:	4611      	mov	r1, r2
 1012a44:	2011      	movs	r0, #17
 1012a46:	47c0      	blx	r8
 1012a48:	e4da      	b.n	1012400 <C1219_st_7_full_write+0x1bb4>
				EVNT_APP_vRegister_event(TIME_CHANGED_A_NIC, 0, false, c1219_ptr->c1218_apl.user_id, rtc_backup.utc_timestamp);
 1012a4a:	8963      	ldrh	r3, [r4, #10]
 1012a4c:	f8cd 9000 	str.w	r9, [sp]
 1012a50:	463a      	mov	r2, r7
 1012a52:	4639      	mov	r1, r7
 1012a54:	2012      	movs	r0, #18
 1012a56:	47c0      	blx	r8
 1012a58:	e4c1      	b.n	10123de <C1219_st_7_full_write+0x1b92>
 1012a5a:	bf00      	nop

01012a5c <C1219_full_read_service>:
void C1219_full_read_service(C1218_DLL_TYPE *c1218_dll_ptr, C1218_APL_TYPE c1218_apl) {
 1012a5c:	b084      	sub	sp, #16
 1012a5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1012a62:	b089      	sub	sp, #36	; 0x24
 1012a64:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
 1012a68:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
		if (c1219[instance].busy_instance == false) break; 
 1012a6c:	4ccc      	ldr	r4, [pc, #816]	; (1012da0 <C1219_full_read_service+0x344>)
	for ( instance = 0; instance < NBR_C1219_INSTANCES; instance++ ) {
 1012a6e:	4ecd      	ldr	r6, [pc, #820]	; (1012da4 <C1219_full_read_service+0x348>)
		if (c1219[instance].busy_instance == false) break; 
 1012a70:	7825      	ldrb	r5, [r4, #0]
 1012a72:	f8bd 704e 	ldrh.w	r7, [sp, #78]	; 0x4e
	for ( instance = 0; instance < NBR_C1219_INSTANCES; instance++ ) {
 1012a76:	2200      	movs	r2, #0
 1012a78:	7032      	strb	r2, [r6, #0]
		if (c1219[instance].busy_instance == false) break; 
 1012a7a:	b1ed      	cbz	r5, 1012ab8 <C1219_full_read_service+0x5c>
 1012a7c:	f241 72b4 	movw	r2, #6068	; 0x17b4
	for ( instance = 0; instance < NBR_C1219_INSTANCES; instance++ ) {
 1012a80:	2301      	movs	r3, #1
		if (c1219[instance].busy_instance == false) break; 
 1012a82:	5ca2      	ldrb	r2, [r4, r2]
	for ( instance = 0; instance < NBR_C1219_INSTANCES; instance++ ) {
 1012a84:	7033      	strb	r3, [r6, #0]
		if (c1219[instance].busy_instance == false) break; 
 1012a86:	b1b2      	cbz	r2, 1012ab6 <C1219_full_read_service+0x5a>
 1012a88:	f642 7368 	movw	r3, #12136	; 0x2f68
 1012a8c:	5ce3      	ldrb	r3, [r4, r3]
 1012a8e:	2b00      	cmp	r3, #0
 1012a90:	f000 81cc 	beq.w	1012e2c <C1219_full_read_service+0x3d0>
 1012a94:	f244 731c 	movw	r3, #18204	; 0x471c
 1012a98:	5ce3      	ldrb	r3, [r4, r3]
 1012a9a:	2b00      	cmp	r3, #0
 1012a9c:	f000 81ca 	beq.w	1012e34 <C1219_full_read_service+0x3d8>
	if ( c1219[instance].busy_instance == false ) {
 1012aa0:	f645 62d0 	movw	r2, #24272	; 0x5ed0
 1012aa4:	2304      	movs	r3, #4
 1012aa6:	5ca2      	ldrb	r2, [r4, r2]
 1012aa8:	7033      	strb	r3, [r6, #0]
 1012aaa:	b122      	cbz	r2, 1012ab6 <C1219_full_read_service+0x5a>
}
 1012aac:	b009      	add	sp, #36	; 0x24
 1012aae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1012ab2:	b004      	add	sp, #16
 1012ab4:	4770      	bx	lr
	if ( c1219[instance].busy_instance == false ) {
 1012ab6:	461d      	mov	r5, r3
 1012ab8:	4682      	mov	sl, r0
		c1219[instance].c1218_apl = c1218_apl;
 1012aba:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
		c1219[instance].busy_instance = true;
 1012abe:	f241 78b4 	movw	r8, #6068	; 0x17b4
 1012ac2:	fb08 f505 	mul.w	r5, r8, r5
 1012ac6:	eb04 0b05 	add.w	fp, r4, r5
		c1219[instance].c1218_apl = c1218_apl;
 1012aca:	f10b 0e08 	add.w	lr, fp, #8
 1012ace:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 1012ad2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 1012ad6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
		EVNT_APP_vRegister_event(END_DEVICE_ACCESSED_FOR_READ, 0, true, c1218_apl.user_id, rtc.utc_timestamp);
 1012ada:	f8df 9314 	ldr.w	r9, [pc, #788]	; 1012df0 <C1219_full_read_service+0x394>
		c1219[instance].c1218_apl = c1218_apl;
 1012ade:	f8dc 0000 	ldr.w	r0, [ip]
		EVNT_APP_vRegister_event(END_DEVICE_ACCESSED_FOR_READ, 0, true, c1218_apl.user_id, rtc.utc_timestamp);
 1012ae2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 1012ae6:	9300      	str	r3, [sp, #0]
		c1219[instance].busy_instance = true;
 1012ae8:	f04f 0c01 	mov.w	ip, #1
		c1219[instance].c1218_apl = c1218_apl;
 1012aec:	f8ce 0000 	str.w	r0, [lr]
		EVNT_APP_vRegister_event(END_DEVICE_ACCESSED_FOR_READ, 0, true, c1218_apl.user_id, rtc.utc_timestamp);
 1012af0:	4662      	mov	r2, ip
		c1219[instance].c1218_dll = c1218_dll_ptr;
 1012af2:	f8cb a004 	str.w	sl, [fp, #4]
		EVNT_APP_vRegister_event(END_DEVICE_ACCESSED_FOR_READ, 0, true, c1218_apl.user_id, rtc.utc_timestamp);
 1012af6:	463b      	mov	r3, r7
 1012af8:	2100      	movs	r1, #0
 1012afa:	2007      	movs	r0, #7
 1012afc:	f8df a2f4 	ldr.w	sl, [pc, #756]	; 1012df4 <C1219_full_read_service+0x398>
		c1219[instance].busy_instance = true;
 1012b00:	f804 c005 	strb.w	ip, [r4, r5]
		EVNT_APP_vRegister_event(END_DEVICE_ACCESSED_FOR_READ, 0, true, c1218_apl.user_id, rtc.utc_timestamp);
 1012b04:	47d0      	blx	sl
		if ( c1219[instance].c1218_dll->uart == OP_UART ) {
 1012b06:	f896 e000 	ldrb.w	lr, [r6]
 1012b0a:	4aa7      	ldr	r2, [pc, #668]	; (1012da8 <C1219_full_read_service+0x34c>)
 1012b0c:	fb08 430e 	mla	r3, r8, lr, r4
 1012b10:	6859      	ldr	r1, [r3, #4]
 1012b12:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
 1012b16:	4293      	cmp	r3, r2
 1012b18:	f000 8190 	beq.w	1012e3c <C1219_full_read_service+0x3e0>
		else if ( c1219[instance].c1218_dll->uart == NIC_UART ) {
 1012b1c:	4aa3      	ldr	r2, [pc, #652]	; (1012dac <C1219_full_read_service+0x350>)
 1012b1e:	4293      	cmp	r3, r2
 1012b20:	f000 819b 	beq.w	1012e5a <C1219_full_read_service+0x3fe>
		c1219[instance].table_id = 0;
 1012b24:	f241 75b4 	movw	r5, #6068	; 0x17b4
 1012b28:	fb05 4e0e 	mla	lr, r5, lr, r4
 1012b2c:	2700      	movs	r7, #0
 1012b2e:	f8ae 702c 	strh.w	r7, [lr, #44]	; 0x2c
		SECURITY_USER_INFO_TYPE user_info = {
 1012b32:	f89d 306e 	ldrb.w	r3, [sp, #110]	; 0x6e
 1012b36:	f88d 301f 	strb.w	r3, [sp, #31]
		c1219[instance].table_id |= (uint16_t)(c1219[instance].c1218_dll->rx_data[SERVICE_INDEX + 1] << 8);
 1012b3a:	688b      	ldr	r3, [r1, #8]
		if ( SECR_APP_bCheck_access_to_read_table(user_info) ) {
 1012b3c:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 1012df8 <C1219_full_read_service+0x39c>
		c1219[instance].table_id |= (uint16_t)(c1219[instance].c1218_dll->rx_data[SERVICE_INDEX + 1] << 8);
 1012b40:	785b      	ldrb	r3, [r3, #1]
		memcpy(&user_info.password, &c1218_apl.password, 20);
 1012b42:	aa12      	add	r2, sp, #72	; 0x48
		c1219[instance].table_id |= (uint16_t)(c1219[instance].c1218_dll->rx_data[SERVICE_INDEX + 1] << 8);
 1012b44:	021b      	lsls	r3, r3, #8
 1012b46:	f8ae 302c 	strh.w	r3, [lr, #44]	; 0x2c
		c1219[instance].table_id |= (uint16_t)(c1219[instance].c1218_dll->rx_data[SERVICE_INDEX + 2] << 0);
 1012b4a:	6888      	ldr	r0, [r1, #8]
		memcpy(&user_info.password, &c1218_apl.password, 20);
 1012b4c:	f852 1f12 	ldr.w	r1, [r2, #18]!
 1012b50:	f8cd 100b 	str.w	r1, [sp, #11]
 1012b54:	68d1      	ldr	r1, [r2, #12]
		c1219[instance].table_id |= (uint16_t)(c1219[instance].c1218_dll->rx_data[SERVICE_INDEX + 2] << 0);
 1012b56:	7880      	ldrb	r0, [r0, #2]
		memcpy(&user_info.password, &c1218_apl.password, 20);
 1012b58:	f8cd 1017 	str.w	r1, [sp, #23]
 1012b5c:	6911      	ldr	r1, [r2, #16]
 1012b5e:	f8cd 101b 	str.w	r1, [sp, #27]
		if ( SECR_APP_bCheck_access_to_read_table(user_info) ) {
 1012b62:	a908      	add	r1, sp, #32
		c1219[instance].table_id |= (uint16_t)(c1219[instance].c1218_dll->rx_data[SERVICE_INDEX + 2] << 0);
 1012b64:	4303      	orrs	r3, r0
		if ( SECR_APP_bCheck_access_to_read_table(user_info) ) {
 1012b66:	e911 0003 	ldmdb	r1, {r0, r1}
 1012b6a:	e88d 0003 	stmia.w	sp, {r0, r1}
			.tbl_proc_id			= (c1219[instance].table_id & TBL_PROC_NBR_bm) >> TBL_PROC_NBR_bp,
 1012b6e:	f3c3 010a 	ubfx	r1, r3, #0, #11
		SECURITY_USER_INFO_TYPE user_info = {
 1012b72:	f8ad 1008 	strh.w	r1, [sp, #8]
			.mfg_flag				= (bool)((c1219[instance].table_id & STD_VS_MFG_FLAG_bm) >> STD_VS_MFG_FLAG_bp),
 1012b76:	f3c3 21c0 	ubfx	r1, r3, #11, #1
		SECURITY_USER_INFO_TYPE user_info = {
 1012b7a:	f88d 100a 	strb.w	r1, [sp, #10]
		memcpy(&user_info.password, &c1218_apl.password, 20);
 1012b7e:	6851      	ldr	r1, [r2, #4]
 1012b80:	6892      	ldr	r2, [r2, #8]
 1012b82:	f8cd 2013 	str.w	r2, [sp, #19]
 1012b86:	f8cd 100f 	str.w	r1, [sp, #15]
		SECURITY_USER_INFO_TYPE user_info = {
 1012b8a:	aa02      	add	r2, sp, #8
		c1219[instance].table_id |= (uint16_t)(c1219[instance].c1218_dll->rx_data[SERVICE_INDEX + 2] << 0);
 1012b8c:	f8ae 302c 	strh.w	r3, [lr, #44]	; 0x2c
		if ( SECR_APP_bCheck_access_to_read_table(user_info) ) {
 1012b90:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 1012b92:	47c0      	blx	r8
 1012b94:	2800      	cmp	r0, #0
 1012b96:	d051      	beq.n	1012c3c <C1219_full_read_service+0x1e0>
			switch ( c1219[instance].table_id ) {	
 1012b98:	f896 8000 	ldrb.w	r8, [r6]
 1012b9c:	fb05 4508 	mla	r5, r5, r8, r4
 1012ba0:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 1012ba2:	2b32      	cmp	r3, #50	; 0x32
 1012ba4:	f000 838b 	beq.w	10132be <C1219_full_read_service+0x862>
 1012ba8:	d923      	bls.n	1012bf2 <C1219_full_read_service+0x196>
 1012baa:	2b4a      	cmp	r3, #74	; 0x4a
 1012bac:	f000 837c 	beq.w	10132a8 <C1219_full_read_service+0x84c>
 1012bb0:	d856      	bhi.n	1012c60 <C1219_full_read_service+0x204>
 1012bb2:	2b3d      	cmp	r3, #61	; 0x3d
 1012bb4:	f000 836d 	beq.w	1013292 <C1219_full_read_service+0x836>
 1012bb8:	f200 8099 	bhi.w	1012cee <C1219_full_read_service+0x292>
 1012bbc:	2b35      	cmp	r3, #53	; 0x35
 1012bbe:	f000 8402 	beq.w	10133c6 <C1219_full_read_service+0x96a>
 1012bc2:	f240 81a9 	bls.w	1012f18 <C1219_full_read_service+0x4bc>
 1012bc6:	2b37      	cmp	r3, #55	; 0x37
 1012bc8:	f000 83ec 	beq.w	10133a4 <C1219_full_read_service+0x948>
 1012bcc:	f080 8308 	bcs.w	10131e0 <C1219_full_read_service+0x784>
	c1219_ptr->table_size = TOU_APP_usSt_54_get_size();
 1012bd0:	4b77      	ldr	r3, [pc, #476]	; (1012db0 <C1219_full_read_service+0x354>)
 1012bd2:	4798      	blx	r3
 1012bd4:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1012bd8:	fb03 4808 	mla	r8, r3, r8, r4
	c1219_ptr->execute_table_reading = TOU_APP_bSt_54_execute_table_reading;
 1012bdc:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1012be0:	4974      	ldr	r1, [pc, #464]	; (1012db4 <C1219_full_read_service+0x358>)
	c1219_ptr->table_size = TOU_APP_usSt_54_get_size();
 1012be2:	f8a8 0038 	strh.w	r0, [r8, #56]	; 0x38
	C1219_full_read(c1219_ptr);
 1012be6:	4b74      	ldr	r3, [pc, #464]	; (1012db8 <C1219_full_read_service+0x35c>)
	c1219_ptr->execute_table_reading = TOU_APP_bSt_54_execute_table_reading;
 1012be8:	f848 1002 	str.w	r1, [r8, r2]
	C1219_full_read(c1219_ptr);
 1012bec:	4640      	mov	r0, r8
 1012bee:	4798      	blx	r3
 1012bf0:	e02a      	b.n	1012c48 <C1219_full_read_service+0x1ec>
			switch ( c1219[instance].table_id ) {	
 1012bf2:	2b14      	cmp	r3, #20
 1012bf4:	f000 83aa 	beq.w	101334c <C1219_full_read_service+0x8f0>
 1012bf8:	d85a      	bhi.n	1012cb0 <C1219_full_read_service+0x254>
 1012bfa:	2b08      	cmp	r3, #8
 1012bfc:	f000 8373 	beq.w	10132e6 <C1219_full_read_service+0x88a>
 1012c00:	f240 80fc 	bls.w	1012dfc <C1219_full_read_service+0x3a0>
 1012c04:	2b0c      	cmp	r3, #12
 1012c06:	f000 846d 	beq.w	10134e4 <C1219_full_read_service+0xa88>
 1012c0a:	f240 8149 	bls.w	1012ea0 <C1219_full_read_service+0x444>
 1012c0e:	2b0f      	cmp	r3, #15
 1012c10:	f000 8400 	beq.w	1013414 <C1219_full_read_service+0x9b8>
 1012c14:	2b10      	cmp	r3, #16
 1012c16:	f040 81fa 	bne.w	101300e <C1219_full_read_service+0x5b2>
	c1219_ptr->table_size = REGS_APP_usSt_16_get_size();
 1012c1a:	4b68      	ldr	r3, [pc, #416]	; (1012dbc <C1219_full_read_service+0x360>)
 1012c1c:	4798      	blx	r3
 1012c1e:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1012c22:	fb03 4808 	mla	r8, r3, r8, r4
	c1219_ptr->execute_table_reading = REGS_APP_bSt_16_execute_table_reading;
 1012c26:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1012c2a:	4965      	ldr	r1, [pc, #404]	; (1012dc0 <C1219_full_read_service+0x364>)
	c1219_ptr->table_size = REGS_APP_usSt_16_get_size();
 1012c2c:	f8a8 0038 	strh.w	r0, [r8, #56]	; 0x38
	C1219_full_read(c1219_ptr);
 1012c30:	4b61      	ldr	r3, [pc, #388]	; (1012db8 <C1219_full_read_service+0x35c>)
	c1219_ptr->execute_table_reading = REGS_APP_bSt_16_execute_table_reading;
 1012c32:	f848 1002 	str.w	r1, [r8, r2]
	C1219_full_read(c1219_ptr);
 1012c36:	4640      	mov	r0, r8
 1012c38:	4798      	blx	r3
 1012c3a:	e005      	b.n	1012c48 <C1219_full_read_service+0x1ec>
			C1218_send_isc(c1219[instance].c1218_dll);
 1012c3c:	7833      	ldrb	r3, [r6, #0]
 1012c3e:	4a61      	ldr	r2, [pc, #388]	; (1012dc4 <C1219_full_read_service+0x368>)
 1012c40:	fb05 4503 	mla	r5, r5, r3, r4
 1012c44:	6868      	ldr	r0, [r5, #4]
 1012c46:	4790      	blx	r2
		c1219[instance].busy_instance = false;
 1012c48:	7832      	ldrb	r2, [r6, #0]
 1012c4a:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1012c4e:	fb03 f302 	mul.w	r3, r3, r2
 1012c52:	2200      	movs	r2, #0
 1012c54:	54e2      	strb	r2, [r4, r3]
}
 1012c56:	b009      	add	sp, #36	; 0x24
 1012c58:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1012c5c:	b004      	add	sp, #16
 1012c5e:	4770      	bx	lr
			switch ( c1219[instance].table_id ) {	
 1012c60:	f640 0216 	movw	r2, #2070	; 0x816
 1012c64:	4293      	cmp	r3, r2
 1012c66:	f000 8387 	beq.w	1013378 <C1219_full_read_service+0x91c>
 1012c6a:	d876      	bhi.n	1012d5a <C1219_full_read_service+0x2fe>
 1012c6c:	f640 0201 	movw	r2, #2049	; 0x801
 1012c70:	4293      	cmp	r3, r2
 1012c72:	f000 8455 	beq.w	1013520 <C1219_full_read_service+0xac4>
 1012c76:	f240 813b 	bls.w	1012ef0 <C1219_full_read_service+0x494>
 1012c7a:	f640 0204 	movw	r2, #2052	; 0x804
 1012c7e:	4293      	cmp	r3, r2
 1012c80:	f000 843c 	beq.w	10134fc <C1219_full_read_service+0xaa0>
 1012c84:	f640 0205 	movw	r2, #2053	; 0x805
 1012c88:	4293      	cmp	r3, r2
 1012c8a:	f040 81e8 	bne.w	101305e <C1219_full_read_service+0x602>
	c1219_ptr->table_size = SM_APP_usMt_5_get_size();
 1012c8e:	4b4e      	ldr	r3, [pc, #312]	; (1012dc8 <C1219_full_read_service+0x36c>)
 1012c90:	4798      	blx	r3
 1012c92:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1012c96:	fb03 4808 	mla	r8, r3, r8, r4
	c1219_ptr->execute_table_reading = SM_APP_bMt_5_execute_table_reading;
 1012c9a:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1012c9e:	494b      	ldr	r1, [pc, #300]	; (1012dcc <C1219_full_read_service+0x370>)
	c1219_ptr->table_size = SM_APP_usMt_5_get_size();
 1012ca0:	f8a8 0038 	strh.w	r0, [r8, #56]	; 0x38
	C1219_full_read(c1219_ptr);
 1012ca4:	4b44      	ldr	r3, [pc, #272]	; (1012db8 <C1219_full_read_service+0x35c>)
	c1219_ptr->execute_table_reading = SM_APP_bMt_5_execute_table_reading;
 1012ca6:	f848 1002 	str.w	r1, [r8, r2]
	C1219_full_read(c1219_ptr);
 1012caa:	4640      	mov	r0, r8
 1012cac:	4798      	blx	r3
 1012cae:	e7cb      	b.n	1012c48 <C1219_full_read_service+0x1ec>
			switch ( c1219[instance].table_id ) {	
 1012cb0:	2b1b      	cmp	r3, #27
 1012cb2:	f000 8356 	beq.w	1013362 <C1219_full_read_service+0x906>
 1012cb6:	d835      	bhi.n	1012d24 <C1219_full_read_service+0x2c8>
 1012cb8:	2b17      	cmp	r3, #23
 1012cba:	f000 847f 	beq.w	10135bc <C1219_full_read_service+0xb60>
 1012cbe:	f240 8103 	bls.w	1012ec8 <C1219_full_read_service+0x46c>
 1012cc2:	2b19      	cmp	r3, #25
 1012cc4:	f000 8498 	beq.w	10135f8 <C1219_full_read_service+0xb9c>
 1012cc8:	f240 8484 	bls.w	10135d4 <C1219_full_read_service+0xb78>
	c1219_ptr->table_size = REGS_APP_usSt_26_get_size();
 1012ccc:	4b40      	ldr	r3, [pc, #256]	; (1012dd0 <C1219_full_read_service+0x374>)
 1012cce:	4798      	blx	r3
 1012cd0:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1012cd4:	fb03 4808 	mla	r8, r3, r8, r4
	c1219_ptr->execute_table_reading = REGS_APP_bSt_26_execute_table_reading;
 1012cd8:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1012cdc:	493d      	ldr	r1, [pc, #244]	; (1012dd4 <C1219_full_read_service+0x378>)
	c1219_ptr->table_size = REGS_APP_usSt_26_get_size();
 1012cde:	f8a8 0038 	strh.w	r0, [r8, #56]	; 0x38
	C1219_full_read(c1219_ptr);
 1012ce2:	4b35      	ldr	r3, [pc, #212]	; (1012db8 <C1219_full_read_service+0x35c>)
	c1219_ptr->execute_table_reading = REGS_APP_bSt_26_execute_table_reading;
 1012ce4:	f848 1002 	str.w	r1, [r8, r2]
	C1219_full_read(c1219_ptr);
 1012ce8:	4640      	mov	r0, r8
 1012cea:	4798      	blx	r3
 1012cec:	e7ac      	b.n	1012c48 <C1219_full_read_service+0x1ec>
			switch ( c1219[instance].table_id ) {	
 1012cee:	2b46      	cmp	r3, #70	; 0x46
 1012cf0:	f000 834d 	beq.w	101338e <C1219_full_read_service+0x932>
 1012cf4:	f240 8138 	bls.w	1012f68 <C1219_full_read_service+0x50c>
 1012cf8:	2b48      	cmp	r3, #72	; 0x48
 1012cfa:	f000 8441 	beq.w	1013580 <C1219_full_read_service+0xb24>
 1012cfe:	f240 842d 	bls.w	101355c <C1219_full_read_service+0xb00>
	c1219_ptr->table_size = EVNT_APP_usSt_73_get_size();
 1012d02:	4b35      	ldr	r3, [pc, #212]	; (1012dd8 <C1219_full_read_service+0x37c>)
 1012d04:	4798      	blx	r3
 1012d06:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1012d0a:	fb03 4808 	mla	r8, r3, r8, r4
	c1219_ptr->execute_table_reading = EVNT_APP_bSt_73_execute_table_reading;
 1012d0e:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1012d12:	4932      	ldr	r1, [pc, #200]	; (1012ddc <C1219_full_read_service+0x380>)
	c1219_ptr->table_size = EVNT_APP_usSt_73_get_size();
 1012d14:	f8a8 0038 	strh.w	r0, [r8, #56]	; 0x38
	C1219_full_read(c1219_ptr);
 1012d18:	4b27      	ldr	r3, [pc, #156]	; (1012db8 <C1219_full_read_service+0x35c>)
	c1219_ptr->execute_table_reading = EVNT_APP_bSt_73_execute_table_reading;
 1012d1a:	f848 1002 	str.w	r1, [r8, r2]
	C1219_full_read(c1219_ptr);
 1012d1e:	4640      	mov	r0, r8
 1012d20:	4798      	blx	r3
 1012d22:	e791      	b.n	1012c48 <C1219_full_read_service+0x1ec>
			switch ( c1219[instance].table_id ) {	
 1012d24:	2b29      	cmp	r3, #41	; 0x29
 1012d26:	f000 843d 	beq.w	10135a4 <C1219_full_read_service+0xb48>
 1012d2a:	f240 8109 	bls.w	1012f40 <C1219_full_read_service+0x4e4>
 1012d2e:	2b2b      	cmp	r3, #43	; 0x2b
 1012d30:	f000 8402 	beq.w	1013538 <C1219_full_read_service+0xadc>
 1012d34:	f080 81bd 	bcs.w	10130b2 <C1219_full_read_service+0x656>
	c1219_ptr->table_size = SECR_APP_usSt_42_get_size();
 1012d38:	4b29      	ldr	r3, [pc, #164]	; (1012de0 <C1219_full_read_service+0x384>)
 1012d3a:	4798      	blx	r3
 1012d3c:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1012d40:	fb03 4808 	mla	r8, r3, r8, r4
	c1219_ptr->execute_table_reading = SECR_APP_bSt_42_execute_table_reading;
 1012d44:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1012d48:	4926      	ldr	r1, [pc, #152]	; (1012de4 <C1219_full_read_service+0x388>)
	c1219_ptr->table_size = SECR_APP_usSt_42_get_size();
 1012d4a:	f8a8 0038 	strh.w	r0, [r8, #56]	; 0x38
	C1219_full_read(c1219_ptr);
 1012d4e:	4b1a      	ldr	r3, [pc, #104]	; (1012db8 <C1219_full_read_service+0x35c>)
	c1219_ptr->execute_table_reading = SECR_APP_bSt_42_execute_table_reading;
 1012d50:	f848 1002 	str.w	r1, [r8, r2]
	C1219_full_read(c1219_ptr);
 1012d54:	4640      	mov	r0, r8
 1012d56:	4798      	blx	r3
 1012d58:	e776      	b.n	1012c48 <C1219_full_read_service+0x1ec>
			switch ( c1219[instance].table_id ) {	
 1012d5a:	f640 0219 	movw	r2, #2073	; 0x819
 1012d5e:	4293      	cmp	r3, r2
 1012d60:	f000 828c 	beq.w	101327c <C1219_full_read_service+0x820>
 1012d64:	f240 8114 	bls.w	1012f90 <C1219_full_read_service+0x534>
 1012d68:	f640 0248 	movw	r2, #2120	; 0x848
 1012d6c:	4293      	cmp	r3, r2
 1012d6e:	f000 8335 	beq.w	10133dc <C1219_full_read_service+0x980>
 1012d72:	f640 0249 	movw	r2, #2121	; 0x849
 1012d76:	4293      	cmp	r3, r2
 1012d78:	f040 8258 	bne.w	101322c <C1219_full_read_service+0x7d0>
	c1219_ptr->table_size = EVNT_APP_usMt_73_get_size();
 1012d7c:	4b1a      	ldr	r3, [pc, #104]	; (1012de8 <C1219_full_read_service+0x38c>)
 1012d7e:	4798      	blx	r3
 1012d80:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1012d84:	fb03 4808 	mla	r8, r3, r8, r4
	c1219_ptr->execute_table_reading = EVNT_APP_bMt_73_execute_table_reading;
 1012d88:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1012d8c:	4917      	ldr	r1, [pc, #92]	; (1012dec <C1219_full_read_service+0x390>)
	c1219_ptr->table_size = EVNT_APP_usMt_73_get_size();
 1012d8e:	f8a8 0038 	strh.w	r0, [r8, #56]	; 0x38
	C1219_full_read(c1219_ptr);
 1012d92:	4b09      	ldr	r3, [pc, #36]	; (1012db8 <C1219_full_read_service+0x35c>)
	c1219_ptr->execute_table_reading = EVNT_APP_bMt_73_execute_table_reading;
 1012d94:	f848 1002 	str.w	r1, [r8, r2]
	C1219_full_read(c1219_ptr);
 1012d98:	4640      	mov	r0, r8
 1012d9a:	4798      	blx	r3
 1012d9c:	e754      	b.n	1012c48 <C1219_full_read_service+0x1ec>
 1012d9e:	bf00      	nop
 1012da0:	2001064c 	.word	0x2001064c
 1012da4:	20000926 	.word	0x20000926
 1012da8:	48004000 	.word	0x48004000
 1012dac:	400e0600 	.word	0x400e0600
 1012db0:	0102c301 	.word	0x0102c301
 1012db4:	0102c0cd 	.word	0x0102c0cd
 1012db8:	01010371 	.word	0x01010371
 1012dbc:	01026b39 	.word	0x01026b39
 1012dc0:	01026a8d 	.word	0x01026a8d
 1012dc4:	01016485 	.word	0x01016485
 1012dc8:	01020a4d 	.word	0x01020a4d
 1012dcc:	01020a1d 	.word	0x01020a1d
 1012dd0:	010281ad 	.word	0x010281ad
 1012dd4:	01027ff5 	.word	0x01027ff5
 1012dd8:	01019571 	.word	0x01019571
 1012ddc:	01018915 	.word	0x01018915
 1012de0:	0102ae6d 	.word	0x0102ae6d
 1012de4:	0102ada9 	.word	0x0102ada9
 1012de8:	01018d95 	.word	0x01018d95
 1012dec:	01018ca5 	.word	0x01018ca5
 1012df0:	20017160 	.word	0x20017160
 1012df4:	01019961 	.word	0x01019961
 1012df8:	0102b295 	.word	0x0102b295
			switch ( c1219[instance].table_id ) {	
 1012dfc:	2b02      	cmp	r3, #2
 1012dfe:	f000 82fe 	beq.w	10133fe <C1219_full_read_service+0x9a2>
 1012e02:	d839      	bhi.n	1012e78 <C1219_full_read_service+0x41c>
 1012e04:	2b00      	cmp	r3, #0
 1012e06:	f040 80d8 	bne.w	1012fba <C1219_full_read_service+0x55e>
	c1219_ptr->table_size = GRAL_APP_usSt_0_get_size();
 1012e0a:	4bbe      	ldr	r3, [pc, #760]	; (1013104 <C1219_full_read_service+0x6a8>)
 1012e0c:	4798      	blx	r3
 1012e0e:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1012e12:	fb03 4808 	mla	r8, r3, r8, r4
	c1219_ptr->execute_table_reading = GRAL_APP_bSt_0_execute_table_reading;
 1012e16:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1012e1a:	49bb      	ldr	r1, [pc, #748]	; (1013108 <C1219_full_read_service+0x6ac>)
	c1219_ptr->table_size = GRAL_APP_usSt_0_get_size();
 1012e1c:	f8a8 0038 	strh.w	r0, [r8, #56]	; 0x38
	C1219_full_read(c1219_ptr);
 1012e20:	4bba      	ldr	r3, [pc, #744]	; (101310c <C1219_full_read_service+0x6b0>)
	c1219_ptr->execute_table_reading = GRAL_APP_bSt_0_execute_table_reading;
 1012e22:	f848 1002 	str.w	r1, [r8, r2]
	C1219_full_read(c1219_ptr);
 1012e26:	4640      	mov	r0, r8
 1012e28:	4798      	blx	r3
 1012e2a:	e70d      	b.n	1012c48 <C1219_full_read_service+0x1ec>
	for ( instance = 0; instance < NBR_C1219_INSTANCES; instance++ ) {
 1012e2c:	2302      	movs	r3, #2
		if (c1219[instance].busy_instance == false) break; 
 1012e2e:	461d      	mov	r5, r3
 1012e30:	7033      	strb	r3, [r6, #0]
 1012e32:	e641      	b.n	1012ab8 <C1219_full_read_service+0x5c>
	for ( instance = 0; instance < NBR_C1219_INSTANCES; instance++ ) {
 1012e34:	2303      	movs	r3, #3
		if (c1219[instance].busy_instance == false) break; 
 1012e36:	461d      	mov	r5, r3
 1012e38:	7033      	strb	r3, [r6, #0]
 1012e3a:	e63d      	b.n	1012ab8 <C1219_full_read_service+0x5c>
			EVNT_APP_vRegister_event(END_DEVICE_ACCESSED_FOR_READ_OP, 0, false, c1218_apl.user_id, rtc.utc_timestamp);
 1012e3c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 1012e40:	9300      	str	r3, [sp, #0]
 1012e42:	2200      	movs	r2, #0
 1012e44:	4611      	mov	r1, r2
 1012e46:	463b      	mov	r3, r7
 1012e48:	2014      	movs	r0, #20
 1012e4a:	47d0      	blx	sl
 1012e4c:	f896 e000 	ldrb.w	lr, [r6]
 1012e50:	fb08 480e 	mla	r8, r8, lr, r4
 1012e54:	f8d8 1004 	ldr.w	r1, [r8, #4]
 1012e58:	e664      	b.n	1012b24 <C1219_full_read_service+0xc8>
			EVNT_APP_vRegister_event(END_DEVICE_ACCESSED_FOR_READ_NIC, 0, false, c1218_apl.user_id, rtc.utc_timestamp);
 1012e5a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 1012e5e:	9300      	str	r3, [sp, #0]
 1012e60:	2200      	movs	r2, #0
 1012e62:	4611      	mov	r1, r2
 1012e64:	463b      	mov	r3, r7
 1012e66:	2015      	movs	r0, #21
 1012e68:	47d0      	blx	sl
 1012e6a:	f896 e000 	ldrb.w	lr, [r6]
 1012e6e:	fb08 480e 	mla	r8, r8, lr, r4
 1012e72:	f8d8 1004 	ldr.w	r1, [r8, #4]
 1012e76:	e655      	b.n	1012b24 <C1219_full_read_service+0xc8>
			switch ( c1219[instance].table_id ) {	
 1012e78:	2b03      	cmp	r3, #3
 1012e7a:	f040 80dc 	bne.w	1013036 <C1219_full_read_service+0x5da>
	c1219_ptr->table_size = GRAL_APP_usSt_3_get_size();
 1012e7e:	4ba4      	ldr	r3, [pc, #656]	; (1013110 <C1219_full_read_service+0x6b4>)
 1012e80:	4798      	blx	r3
 1012e82:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1012e86:	fb03 4808 	mla	r8, r3, r8, r4
	c1219_ptr->execute_table_reading = GRAL_APP_bSt_3_execute_table_reading;
 1012e8a:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1012e8e:	49a1      	ldr	r1, [pc, #644]	; (1013114 <C1219_full_read_service+0x6b8>)
	c1219_ptr->table_size = GRAL_APP_usSt_3_get_size();
 1012e90:	f8a8 0038 	strh.w	r0, [r8, #56]	; 0x38
	C1219_full_read(c1219_ptr);
 1012e94:	4b9d      	ldr	r3, [pc, #628]	; (101310c <C1219_full_read_service+0x6b0>)
	c1219_ptr->execute_table_reading = GRAL_APP_bSt_3_execute_table_reading;
 1012e96:	f848 1002 	str.w	r1, [r8, r2]
	C1219_full_read(c1219_ptr);
 1012e9a:	4640      	mov	r0, r8
 1012e9c:	4798      	blx	r3
 1012e9e:	e6d3      	b.n	1012c48 <C1219_full_read_service+0x1ec>
			switch ( c1219[instance].table_id ) {	
 1012ea0:	2b0a      	cmp	r3, #10
 1012ea2:	f040 8175 	bne.w	1013190 <C1219_full_read_service+0x734>
	c1219_ptr->table_size = REGS_APP_usSt_10_get_size();
 1012ea6:	4b9c      	ldr	r3, [pc, #624]	; (1013118 <C1219_full_read_service+0x6bc>)
 1012ea8:	4798      	blx	r3
 1012eaa:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1012eae:	fb03 4808 	mla	r8, r3, r8, r4
	c1219_ptr->execute_table_reading = REGS_APP_bSt_10_execute_table_reading;
 1012eb2:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1012eb6:	4999      	ldr	r1, [pc, #612]	; (101311c <C1219_full_read_service+0x6c0>)
	c1219_ptr->table_size = REGS_APP_usSt_10_get_size();
 1012eb8:	f8a8 0038 	strh.w	r0, [r8, #56]	; 0x38
	C1219_full_read(c1219_ptr);
 1012ebc:	4b93      	ldr	r3, [pc, #588]	; (101310c <C1219_full_read_service+0x6b0>)
	c1219_ptr->execute_table_reading = REGS_APP_bSt_10_execute_table_reading;
 1012ebe:	f848 1002 	str.w	r1, [r8, r2]
	C1219_full_read(c1219_ptr);
 1012ec2:	4640      	mov	r0, r8
 1012ec4:	4798      	blx	r3
 1012ec6:	e6bf      	b.n	1012c48 <C1219_full_read_service+0x1ec>
			switch ( c1219[instance].table_id ) {	
 1012ec8:	2b15      	cmp	r3, #21
 1012eca:	f040 80de 	bne.w	101308a <C1219_full_read_service+0x62e>
	c1219_ptr->table_size = REGS_APP_usSt_21_get_size();
 1012ece:	4b94      	ldr	r3, [pc, #592]	; (1013120 <C1219_full_read_service+0x6c4>)
 1012ed0:	4798      	blx	r3
 1012ed2:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1012ed6:	fb03 4808 	mla	r8, r3, r8, r4
	c1219_ptr->execute_table_reading = REGS_APP_bSt_21_execute_table_reading;
 1012eda:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1012ede:	4991      	ldr	r1, [pc, #580]	; (1013124 <C1219_full_read_service+0x6c8>)
	c1219_ptr->table_size = REGS_APP_usSt_21_get_size();
 1012ee0:	f8a8 0038 	strh.w	r0, [r8, #56]	; 0x38
	C1219_full_read(c1219_ptr);
 1012ee4:	4b89      	ldr	r3, [pc, #548]	; (101310c <C1219_full_read_service+0x6b0>)
	c1219_ptr->execute_table_reading = REGS_APP_bSt_21_execute_table_reading;
 1012ee6:	f848 1002 	str.w	r1, [r8, r2]
	C1219_full_read(c1219_ptr);
 1012eea:	4640      	mov	r0, r8
 1012eec:	4798      	blx	r3
 1012eee:	e6ab      	b.n	1012c48 <C1219_full_read_service+0x1ec>
			switch ( c1219[instance].table_id ) {	
 1012ef0:	2b4b      	cmp	r3, #75	; 0x4b
 1012ef2:	f040 8188 	bne.w	1013206 <C1219_full_read_service+0x7aa>
	c1219_ptr->table_size = EVNT_APP_usSt_75_get_size();
 1012ef6:	4b8c      	ldr	r3, [pc, #560]	; (1013128 <C1219_full_read_service+0x6cc>)
 1012ef8:	4798      	blx	r3
 1012efa:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1012efe:	fb03 4808 	mla	r8, r3, r8, r4
	c1219_ptr->execute_table_reading = EVNT_APP_bSt_75_execute_table_reading;
 1012f02:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1012f06:	4989      	ldr	r1, [pc, #548]	; (101312c <C1219_full_read_service+0x6d0>)
	c1219_ptr->table_size = EVNT_APP_usSt_75_get_size();
 1012f08:	f8a8 0038 	strh.w	r0, [r8, #56]	; 0x38
	C1219_full_read(c1219_ptr);
 1012f0c:	4b7f      	ldr	r3, [pc, #508]	; (101310c <C1219_full_read_service+0x6b0>)
	c1219_ptr->execute_table_reading = EVNT_APP_bSt_75_execute_table_reading;
 1012f0e:	f848 1002 	str.w	r1, [r8, r2]
	C1219_full_read(c1219_ptr);
 1012f12:	4640      	mov	r0, r8
 1012f14:	4798      	blx	r3
 1012f16:	e697      	b.n	1012c48 <C1219_full_read_service+0x1ec>
			switch ( c1219[instance].table_id ) {	
 1012f18:	2b33      	cmp	r3, #51	; 0x33
 1012f1a:	f040 80de 	bne.w	10130da <C1219_full_read_service+0x67e>
	c1219_ptr->table_size = TOU_APP_usSt_51_get_size();
 1012f1e:	4b84      	ldr	r3, [pc, #528]	; (1013130 <C1219_full_read_service+0x6d4>)
 1012f20:	4798      	blx	r3
 1012f22:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1012f26:	fb03 4808 	mla	r8, r3, r8, r4
	c1219_ptr->execute_table_reading = TOU_APP_bSt_51_execute_table_reading;
 1012f2a:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1012f2e:	4981      	ldr	r1, [pc, #516]	; (1013134 <C1219_full_read_service+0x6d8>)
	c1219_ptr->table_size = TOU_APP_usSt_51_get_size();
 1012f30:	f8a8 0038 	strh.w	r0, [r8, #56]	; 0x38
	C1219_full_read(c1219_ptr);
 1012f34:	4b75      	ldr	r3, [pc, #468]	; (101310c <C1219_full_read_service+0x6b0>)
	c1219_ptr->execute_table_reading = TOU_APP_bSt_51_execute_table_reading;
 1012f36:	f848 1002 	str.w	r1, [r8, r2]
	C1219_full_read(c1219_ptr);
 1012f3a:	4640      	mov	r0, r8
 1012f3c:	4798      	blx	r3
 1012f3e:	e683      	b.n	1012c48 <C1219_full_read_service+0x1ec>
			switch ( c1219[instance].table_id ) {	
 1012f40:	2b1c      	cmp	r3, #28
 1012f42:	f040 8139 	bne.w	10131b8 <C1219_full_read_service+0x75c>
	c1219_ptr->table_size = REGS_APP_usSt_28_get_size();
 1012f46:	4b7c      	ldr	r3, [pc, #496]	; (1013138 <C1219_full_read_service+0x6dc>)
 1012f48:	4798      	blx	r3
 1012f4a:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1012f4e:	fb03 4808 	mla	r8, r3, r8, r4
	c1219_ptr->execute_table_reading = REGS_APP_bSt_28_execute_table_reading;
 1012f52:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1012f56:	4979      	ldr	r1, [pc, #484]	; (101313c <C1219_full_read_service+0x6e0>)
	c1219_ptr->table_size = REGS_APP_usSt_28_get_size();
 1012f58:	f8a8 0038 	strh.w	r0, [r8, #56]	; 0x38
	C1219_full_read(c1219_ptr);
 1012f5c:	4b6b      	ldr	r3, [pc, #428]	; (101310c <C1219_full_read_service+0x6b0>)
	c1219_ptr->execute_table_reading = REGS_APP_bSt_28_execute_table_reading;
 1012f5e:	f848 1002 	str.w	r1, [r8, r2]
	C1219_full_read(c1219_ptr);
 1012f62:	4640      	mov	r0, r8
 1012f64:	4798      	blx	r3
 1012f66:	e66f      	b.n	1012c48 <C1219_full_read_service+0x1ec>
			switch ( c1219[instance].table_id ) {	
 1012f68:	2b3e      	cmp	r3, #62	; 0x3e
 1012f6a:	f040 8174 	bne.w	1013256 <C1219_full_read_service+0x7fa>
	c1219_ptr->table_size = LP_APP_usSt_62_get_size();
 1012f6e:	4b74      	ldr	r3, [pc, #464]	; (1013140 <C1219_full_read_service+0x6e4>)
 1012f70:	4798      	blx	r3
 1012f72:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1012f76:	fb03 4808 	mla	r8, r3, r8, r4
	c1219_ptr->execute_table_reading = LP_APP_bSt_62_execute_table_reading;
 1012f7a:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1012f7e:	4971      	ldr	r1, [pc, #452]	; (1013144 <C1219_full_read_service+0x6e8>)
	c1219_ptr->table_size = LP_APP_usSt_62_get_size();
 1012f80:	f8a8 0038 	strh.w	r0, [r8, #56]	; 0x38
	C1219_full_read(c1219_ptr);
 1012f84:	4b61      	ldr	r3, [pc, #388]	; (101310c <C1219_full_read_service+0x6b0>)
	c1219_ptr->execute_table_reading = LP_APP_bSt_62_execute_table_reading;
 1012f86:	f848 1002 	str.w	r1, [r8, r2]
	C1219_full_read(c1219_ptr);
 1012f8a:	4640      	mov	r0, r8
 1012f8c:	4798      	blx	r3
 1012f8e:	e65b      	b.n	1012c48 <C1219_full_read_service+0x1ec>
			switch ( c1219[instance].table_id ) {	
 1012f90:	f640 0217 	movw	r2, #2071	; 0x817
 1012f94:	4293      	cmp	r3, r2
 1012f96:	d124      	bne.n	1012fe2 <C1219_full_read_service+0x586>
	c1219_ptr->table_size = SM_APP_usMt_23_get_size();
 1012f98:	4b6b      	ldr	r3, [pc, #428]	; (1013148 <C1219_full_read_service+0x6ec>)
 1012f9a:	4798      	blx	r3
 1012f9c:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1012fa0:	fb03 4808 	mla	r8, r3, r8, r4
	c1219_ptr->execute_table_reading = SM_APP_bMt_23_execute_table_reading;
 1012fa4:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1012fa8:	4968      	ldr	r1, [pc, #416]	; (101314c <C1219_full_read_service+0x6f0>)
	c1219_ptr->table_size = SM_APP_usMt_23_get_size();
 1012faa:	f8a8 0038 	strh.w	r0, [r8, #56]	; 0x38
	C1219_full_read(c1219_ptr);
 1012fae:	4b57      	ldr	r3, [pc, #348]	; (101310c <C1219_full_read_service+0x6b0>)
	c1219_ptr->execute_table_reading = SM_APP_bMt_23_execute_table_reading;
 1012fb0:	f848 1002 	str.w	r1, [r8, r2]
	C1219_full_read(c1219_ptr);
 1012fb4:	4640      	mov	r0, r8
 1012fb6:	4798      	blx	r3
 1012fb8:	e646      	b.n	1012c48 <C1219_full_read_service+0x1ec>
			switch ( c1219[instance].table_id ) {	
 1012fba:	2b01      	cmp	r3, #1
 1012fbc:	f040 818a 	bne.w	10132d4 <C1219_full_read_service+0x878>
	c1219_ptr->table_size = GRAL_APP_usSt_1_get_size();
 1012fc0:	4b63      	ldr	r3, [pc, #396]	; (1013150 <C1219_full_read_service+0x6f4>)
 1012fc2:	4798      	blx	r3
 1012fc4:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1012fc8:	fb03 4808 	mla	r8, r3, r8, r4
	c1219_ptr->execute_table_reading = GRAL_APP_bSt_1_execute_table_reading;
 1012fcc:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1012fd0:	4960      	ldr	r1, [pc, #384]	; (1013154 <C1219_full_read_service+0x6f8>)
	c1219_ptr->table_size = GRAL_APP_usSt_1_get_size();
 1012fd2:	f8a8 0038 	strh.w	r0, [r8, #56]	; 0x38
	C1219_full_read(c1219_ptr);
 1012fd6:	4b4d      	ldr	r3, [pc, #308]	; (101310c <C1219_full_read_service+0x6b0>)
	c1219_ptr->execute_table_reading = GRAL_APP_bSt_1_execute_table_reading;
 1012fd8:	f848 1002 	str.w	r1, [r8, r2]
	C1219_full_read(c1219_ptr);
 1012fdc:	4640      	mov	r0, r8
 1012fde:	4798      	blx	r3
 1012fe0:	e632      	b.n	1012c48 <C1219_full_read_service+0x1ec>
			switch ( c1219[instance].table_id ) {	
 1012fe2:	f640 0218 	movw	r2, #2072	; 0x818
 1012fe6:	4293      	cmp	r3, r2
 1012fe8:	f040 8174 	bne.w	10132d4 <C1219_full_read_service+0x878>
	c1219_ptr->table_size = SM_APP_usMt_24_get_size();
 1012fec:	4b5a      	ldr	r3, [pc, #360]	; (1013158 <C1219_full_read_service+0x6fc>)
 1012fee:	4798      	blx	r3
 1012ff0:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1012ff4:	fb03 4808 	mla	r8, r3, r8, r4
	c1219_ptr->execute_table_reading = SM_APP_bMt_24_execute_table_reading;
 1012ff8:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1012ffc:	4957      	ldr	r1, [pc, #348]	; (101315c <C1219_full_read_service+0x700>)
	c1219_ptr->table_size = SM_APP_usMt_24_get_size();
 1012ffe:	f8a8 0038 	strh.w	r0, [r8, #56]	; 0x38
	C1219_full_read(c1219_ptr);
 1013002:	4b42      	ldr	r3, [pc, #264]	; (101310c <C1219_full_read_service+0x6b0>)
	c1219_ptr->execute_table_reading = SM_APP_bMt_24_execute_table_reading;
 1013004:	f848 1002 	str.w	r1, [r8, r2]
	C1219_full_read(c1219_ptr);
 1013008:	4640      	mov	r0, r8
 101300a:	4798      	blx	r3
 101300c:	e61c      	b.n	1012c48 <C1219_full_read_service+0x1ec>
			switch ( c1219[instance].table_id ) {	
 101300e:	2b0d      	cmp	r3, #13
 1013010:	f040 8160 	bne.w	10132d4 <C1219_full_read_service+0x878>
	c1219_ptr->table_size = REGS_APP_usSt_13_get_size();
 1013014:	4b52      	ldr	r3, [pc, #328]	; (1013160 <C1219_full_read_service+0x704>)
 1013016:	4798      	blx	r3
 1013018:	f241 73b4 	movw	r3, #6068	; 0x17b4
 101301c:	fb03 4808 	mla	r8, r3, r8, r4
	c1219_ptr->execute_table_reading = REGS_APP_bSt_13_execute_table_reading;
 1013020:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1013024:	494f      	ldr	r1, [pc, #316]	; (1013164 <C1219_full_read_service+0x708>)
	c1219_ptr->table_size = REGS_APP_usSt_13_get_size();
 1013026:	f8a8 0038 	strh.w	r0, [r8, #56]	; 0x38
	C1219_full_read(c1219_ptr);
 101302a:	4b38      	ldr	r3, [pc, #224]	; (101310c <C1219_full_read_service+0x6b0>)
	c1219_ptr->execute_table_reading = REGS_APP_bSt_13_execute_table_reading;
 101302c:	f848 1002 	str.w	r1, [r8, r2]
	C1219_full_read(c1219_ptr);
 1013030:	4640      	mov	r0, r8
 1013032:	4798      	blx	r3
 1013034:	e608      	b.n	1012c48 <C1219_full_read_service+0x1ec>
			switch ( c1219[instance].table_id ) {	
 1013036:	2b06      	cmp	r3, #6
 1013038:	f040 814c 	bne.w	10132d4 <C1219_full_read_service+0x878>
	c1219_ptr->table_size = GRAL_APP_usSt_6_get_size();
 101303c:	4b4a      	ldr	r3, [pc, #296]	; (1013168 <C1219_full_read_service+0x70c>)
 101303e:	4798      	blx	r3
 1013040:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1013044:	fb03 4808 	mla	r8, r3, r8, r4
	c1219_ptr->execute_table_reading = GRAL_APP_bSt_6_execute_table_reading;
 1013048:	f241 72ac 	movw	r2, #6060	; 0x17ac
 101304c:	4947      	ldr	r1, [pc, #284]	; (101316c <C1219_full_read_service+0x710>)
	c1219_ptr->table_size = GRAL_APP_usSt_6_get_size();
 101304e:	f8a8 0038 	strh.w	r0, [r8, #56]	; 0x38
	C1219_full_read(c1219_ptr);
 1013052:	4b2e      	ldr	r3, [pc, #184]	; (101310c <C1219_full_read_service+0x6b0>)
	c1219_ptr->execute_table_reading = GRAL_APP_bSt_6_execute_table_reading;
 1013054:	f848 1002 	str.w	r1, [r8, r2]
	C1219_full_read(c1219_ptr);
 1013058:	4640      	mov	r0, r8
 101305a:	4798      	blx	r3
 101305c:	e5f4      	b.n	1012c48 <C1219_full_read_service+0x1ec>
			switch ( c1219[instance].table_id ) {	
 101305e:	f640 0203 	movw	r2, #2051	; 0x803
 1013062:	4293      	cmp	r3, r2
 1013064:	f040 8136 	bne.w	10132d4 <C1219_full_read_service+0x878>
	c1219_ptr->table_size = SM_APP_usMt_3_get_size();
 1013068:	4b41      	ldr	r3, [pc, #260]	; (1013170 <C1219_full_read_service+0x714>)
 101306a:	4798      	blx	r3
 101306c:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1013070:	fb03 4808 	mla	r8, r3, r8, r4
	c1219_ptr->execute_table_reading = SM_APP_bMt_3_execute_table_reading;
 1013074:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1013078:	493e      	ldr	r1, [pc, #248]	; (1013174 <C1219_full_read_service+0x718>)
	c1219_ptr->table_size = SM_APP_usMt_3_get_size();
 101307a:	f8a8 0038 	strh.w	r0, [r8, #56]	; 0x38
	C1219_full_read(c1219_ptr);
 101307e:	4b23      	ldr	r3, [pc, #140]	; (101310c <C1219_full_read_service+0x6b0>)
	c1219_ptr->execute_table_reading = SM_APP_bMt_3_execute_table_reading;
 1013080:	f848 1002 	str.w	r1, [r8, r2]
	C1219_full_read(c1219_ptr);
 1013084:	4640      	mov	r0, r8
 1013086:	4798      	blx	r3
 1013088:	e5de      	b.n	1012c48 <C1219_full_read_service+0x1ec>
			switch ( c1219[instance].table_id ) {	
 101308a:	2b16      	cmp	r3, #22
 101308c:	f040 8122 	bne.w	10132d4 <C1219_full_read_service+0x878>
	c1219_ptr->table_size = REGS_APP_usSt_22_get_size();
 1013090:	4b39      	ldr	r3, [pc, #228]	; (1013178 <C1219_full_read_service+0x71c>)
 1013092:	4798      	blx	r3
 1013094:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1013098:	fb03 4808 	mla	r8, r3, r8, r4
	c1219_ptr->execute_table_reading = REGS_APP_bSt_22_execute_table_reading;
 101309c:	f241 72ac 	movw	r2, #6060	; 0x17ac
 10130a0:	4936      	ldr	r1, [pc, #216]	; (101317c <C1219_full_read_service+0x720>)
	c1219_ptr->table_size = REGS_APP_usSt_22_get_size();
 10130a2:	f8a8 0038 	strh.w	r0, [r8, #56]	; 0x38
	C1219_full_read(c1219_ptr);
 10130a6:	4b19      	ldr	r3, [pc, #100]	; (101310c <C1219_full_read_service+0x6b0>)
	c1219_ptr->execute_table_reading = REGS_APP_bSt_22_execute_table_reading;
 10130a8:	f848 1002 	str.w	r1, [r8, r2]
	C1219_full_read(c1219_ptr);
 10130ac:	4640      	mov	r0, r8
 10130ae:	4798      	blx	r3
 10130b0:	e5ca      	b.n	1012c48 <C1219_full_read_service+0x1ec>
			switch ( c1219[instance].table_id ) {	
 10130b2:	2b2c      	cmp	r3, #44	; 0x2c
 10130b4:	f040 810e 	bne.w	10132d4 <C1219_full_read_service+0x878>
	c1219_ptr->table_size = SECR_APP_usSt_44_get_size();
 10130b8:	4b31      	ldr	r3, [pc, #196]	; (1013180 <C1219_full_read_service+0x724>)
 10130ba:	4798      	blx	r3
 10130bc:	f241 73b4 	movw	r3, #6068	; 0x17b4
 10130c0:	fb03 4808 	mla	r8, r3, r8, r4
	c1219_ptr->execute_table_reading = SECR_APP_bSt_44_execute_table_reading;
 10130c4:	f241 72ac 	movw	r2, #6060	; 0x17ac
 10130c8:	492e      	ldr	r1, [pc, #184]	; (1013184 <C1219_full_read_service+0x728>)
	c1219_ptr->table_size = SECR_APP_usSt_44_get_size();
 10130ca:	f8a8 0038 	strh.w	r0, [r8, #56]	; 0x38
	C1219_full_read(c1219_ptr);
 10130ce:	4b0f      	ldr	r3, [pc, #60]	; (101310c <C1219_full_read_service+0x6b0>)
	c1219_ptr->execute_table_reading = SECR_APP_bSt_44_execute_table_reading;
 10130d0:	f848 1002 	str.w	r1, [r8, r2]
	C1219_full_read(c1219_ptr);
 10130d4:	4640      	mov	r0, r8
 10130d6:	4798      	blx	r3
 10130d8:	e5b6      	b.n	1012c48 <C1219_full_read_service+0x1ec>
			switch ( c1219[instance].table_id ) {	
 10130da:	2b34      	cmp	r3, #52	; 0x34
 10130dc:	f040 80fa 	bne.w	10132d4 <C1219_full_read_service+0x878>
	c1219_ptr->table_size = TOU_APP_usSt_52_get_size();
 10130e0:	4b29      	ldr	r3, [pc, #164]	; (1013188 <C1219_full_read_service+0x72c>)
 10130e2:	4798      	blx	r3
 10130e4:	f241 73b4 	movw	r3, #6068	; 0x17b4
 10130e8:	fb03 4808 	mla	r8, r3, r8, r4
	c1219_ptr->execute_table_reading = TOU_APP_bSt_52_execute_table_reading;
 10130ec:	f241 72ac 	movw	r2, #6060	; 0x17ac
 10130f0:	4926      	ldr	r1, [pc, #152]	; (101318c <C1219_full_read_service+0x730>)
	c1219_ptr->table_size = TOU_APP_usSt_52_get_size();
 10130f2:	f8a8 0038 	strh.w	r0, [r8, #56]	; 0x38
	C1219_full_read(c1219_ptr);
 10130f6:	4b05      	ldr	r3, [pc, #20]	; (101310c <C1219_full_read_service+0x6b0>)
	c1219_ptr->execute_table_reading = TOU_APP_bSt_52_execute_table_reading;
 10130f8:	f848 1002 	str.w	r1, [r8, r2]
	C1219_full_read(c1219_ptr);
 10130fc:	4640      	mov	r0, r8
 10130fe:	4798      	blx	r3
 1013100:	e5a2      	b.n	1012c48 <C1219_full_read_service+0x1ec>
 1013102:	bf00      	nop
 1013104:	0101a291 	.word	0x0101a291
 1013108:	0101a52d 	.word	0x0101a52d
 101310c:	01010371 	.word	0x01010371
 1013110:	01019dd1 	.word	0x01019dd1
 1013114:	01019d91 	.word	0x01019d91
 1013118:	010264f1 	.word	0x010264f1
 101311c:	010264d1 	.word	0x010264d1
 1013120:	01026de5 	.word	0x01026de5
 1013124:	01026d21 	.word	0x01026d21
 1013128:	01019531 	.word	0x01019531
 101312c:	010193a1 	.word	0x010193a1
 1013130:	0102bf25 	.word	0x0102bf25
 1013134:	0102c471 	.word	0x0102c471
 1013138:	01028bb1 	.word	0x01028bb1
 101313c:	01028711 	.word	0x01028711
 1013140:	0101b9ed 	.word	0x0101b9ed
 1013144:	0101b895 	.word	0x0101b895
 1013148:	01020781 	.word	0x01020781
 101314c:	010206d9 	.word	0x010206d9
 1013150:	01019c25 	.word	0x01019c25
 1013154:	01019bc9 	.word	0x01019bc9
 1013158:	01021119 	.word	0x01021119
 101315c:	01020ed9 	.word	0x01020ed9
 1013160:	01026971 	.word	0x01026971
 1013164:	0102681d 	.word	0x0102681d
 1013168:	01019fc9 	.word	0x01019fc9
 101316c:	01019f81 	.word	0x01019f81
 1013170:	010205e5 	.word	0x010205e5
 1013174:	010205a5 	.word	0x010205a5
 1013178:	0102701d 	.word	0x0102701d
 101317c:	01026f41 	.word	0x01026f41
 1013180:	0102b285 	.word	0x0102b285
 1013184:	0102b1a9 	.word	0x0102b1a9
 1013188:	0102bf75 	.word	0x0102bf75
 101318c:	0102bf29 	.word	0x0102bf29
			switch ( c1219[instance].table_id ) {	
 1013190:	2b0b      	cmp	r3, #11
 1013192:	f040 809f 	bne.w	10132d4 <C1219_full_read_service+0x878>
	c1219_ptr->table_size = REGS_APP_usSt_11_get_size();
 1013196:	4ba8      	ldr	r3, [pc, #672]	; (1013438 <C1219_full_read_service+0x9dc>)
 1013198:	4798      	blx	r3
 101319a:	f241 73b4 	movw	r3, #6068	; 0x17b4
 101319e:	fb03 4808 	mla	r8, r3, r8, r4
	c1219_ptr->execute_table_reading = REGS_APP_bSt_11_execute_table_reading;
 10131a2:	f241 72ac 	movw	r2, #6060	; 0x17ac
 10131a6:	49a5      	ldr	r1, [pc, #660]	; (101343c <C1219_full_read_service+0x9e0>)
	c1219_ptr->table_size = REGS_APP_usSt_11_get_size();
 10131a8:	f8a8 0038 	strh.w	r0, [r8, #56]	; 0x38
	C1219_full_read(c1219_ptr);
 10131ac:	4ba4      	ldr	r3, [pc, #656]	; (1013440 <C1219_full_read_service+0x9e4>)
	c1219_ptr->execute_table_reading = REGS_APP_bSt_11_execute_table_reading;
 10131ae:	f848 1002 	str.w	r1, [r8, r2]
	C1219_full_read(c1219_ptr);
 10131b2:	4640      	mov	r0, r8
 10131b4:	4798      	blx	r3
 10131b6:	e547      	b.n	1012c48 <C1219_full_read_service+0x1ec>
			switch ( c1219[instance].table_id ) {	
 10131b8:	2b28      	cmp	r3, #40	; 0x28
 10131ba:	f040 808b 	bne.w	10132d4 <C1219_full_read_service+0x878>
	c1219_ptr->table_size = SECR_APP_usSt_40_get_size();
 10131be:	4ba1      	ldr	r3, [pc, #644]	; (1013444 <C1219_full_read_service+0x9e8>)
 10131c0:	4798      	blx	r3
 10131c2:	f241 73b4 	movw	r3, #6068	; 0x17b4
 10131c6:	fb03 4808 	mla	r8, r3, r8, r4
	c1219_ptr->execute_table_reading = SECR_APP_bSt_40_execute_table_reading;
 10131ca:	f241 72ac 	movw	r2, #6060	; 0x17ac
 10131ce:	499e      	ldr	r1, [pc, #632]	; (1013448 <C1219_full_read_service+0x9ec>)
	c1219_ptr->table_size = SECR_APP_usSt_40_get_size();
 10131d0:	f8a8 0038 	strh.w	r0, [r8, #56]	; 0x38
	C1219_full_read(c1219_ptr);
 10131d4:	4b9a      	ldr	r3, [pc, #616]	; (1013440 <C1219_full_read_service+0x9e4>)
	c1219_ptr->execute_table_reading = SECR_APP_bSt_40_execute_table_reading;
 10131d6:	f848 1002 	str.w	r1, [r8, r2]
	C1219_full_read(c1219_ptr);
 10131da:	4640      	mov	r0, r8
 10131dc:	4798      	blx	r3
 10131de:	e533      	b.n	1012c48 <C1219_full_read_service+0x1ec>
			switch ( c1219[instance].table_id ) {	
 10131e0:	2b3c      	cmp	r3, #60	; 0x3c
 10131e2:	d177      	bne.n	10132d4 <C1219_full_read_service+0x878>
	c1219_ptr->table_size = LP_APP_usSt_60_get_size();
 10131e4:	4b99      	ldr	r3, [pc, #612]	; (101344c <C1219_full_read_service+0x9f0>)
 10131e6:	4798      	blx	r3
 10131e8:	f241 73b4 	movw	r3, #6068	; 0x17b4
 10131ec:	fb03 4808 	mla	r8, r3, r8, r4
	c1219_ptr->execute_table_reading = LP_APP_bSt_60_execute_table_reading;
 10131f0:	f241 72ac 	movw	r2, #6060	; 0x17ac
 10131f4:	4996      	ldr	r1, [pc, #600]	; (1013450 <C1219_full_read_service+0x9f4>)
	c1219_ptr->table_size = LP_APP_usSt_60_get_size();
 10131f6:	f8a8 0038 	strh.w	r0, [r8, #56]	; 0x38
	C1219_full_read(c1219_ptr);
 10131fa:	4b91      	ldr	r3, [pc, #580]	; (1013440 <C1219_full_read_service+0x9e4>)
	c1219_ptr->execute_table_reading = LP_APP_bSt_60_execute_table_reading;
 10131fc:	f848 1002 	str.w	r1, [r8, r2]
	C1219_full_read(c1219_ptr);
 1013200:	4640      	mov	r0, r8
 1013202:	4798      	blx	r3
 1013204:	e520      	b.n	1012c48 <C1219_full_read_service+0x1ec>
			switch ( c1219[instance].table_id ) {	
 1013206:	2b4c      	cmp	r3, #76	; 0x4c
 1013208:	d164      	bne.n	10132d4 <C1219_full_read_service+0x878>
	c1219_ptr->table_size = EVNT_APP_usSt_76_get_size();
 101320a:	4b92      	ldr	r3, [pc, #584]	; (1013454 <C1219_full_read_service+0x9f8>)
 101320c:	4798      	blx	r3
 101320e:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1013212:	fb03 4808 	mla	r8, r3, r8, r4
	c1219_ptr->execute_table_reading = EVNT_APP_bSt_76_execute_table_reading;
 1013216:	f241 72ac 	movw	r2, #6060	; 0x17ac
 101321a:	498f      	ldr	r1, [pc, #572]	; (1013458 <C1219_full_read_service+0x9fc>)
	c1219_ptr->table_size = EVNT_APP_usSt_76_get_size();
 101321c:	f8a8 0038 	strh.w	r0, [r8, #56]	; 0x38
	C1219_full_read(c1219_ptr);
 1013220:	4b87      	ldr	r3, [pc, #540]	; (1013440 <C1219_full_read_service+0x9e4>)
	c1219_ptr->execute_table_reading = EVNT_APP_bSt_76_execute_table_reading;
 1013222:	f848 1002 	str.w	r1, [r8, r2]
	C1219_full_read(c1219_ptr);
 1013226:	4640      	mov	r0, r8
 1013228:	4798      	blx	r3
 101322a:	e50d      	b.n	1012c48 <C1219_full_read_service+0x1ec>
			switch ( c1219[instance].table_id ) {	
 101322c:	f640 0235 	movw	r2, #2101	; 0x835
 1013230:	4293      	cmp	r3, r2
 1013232:	d14f      	bne.n	10132d4 <C1219_full_read_service+0x878>
	c1219_ptr->table_size = SM_APP_usMt_53_get_size();
 1013234:	4b89      	ldr	r3, [pc, #548]	; (101345c <C1219_full_read_service+0xa00>)
 1013236:	4798      	blx	r3
 1013238:	f241 73b4 	movw	r3, #6068	; 0x17b4
 101323c:	fb03 4808 	mla	r8, r3, r8, r4
	c1219_ptr->execute_table_reading = SM_APP_bMt_53_execute_table_reading;
 1013240:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1013244:	4986      	ldr	r1, [pc, #536]	; (1013460 <C1219_full_read_service+0xa04>)
	c1219_ptr->table_size = SM_APP_usMt_53_get_size();
 1013246:	f8a8 0038 	strh.w	r0, [r8, #56]	; 0x38
	C1219_full_read(c1219_ptr);
 101324a:	4b7d      	ldr	r3, [pc, #500]	; (1013440 <C1219_full_read_service+0x9e4>)
	c1219_ptr->execute_table_reading = SM_APP_bMt_53_execute_table_reading;
 101324c:	f848 1002 	str.w	r1, [r8, r2]
	C1219_full_read(c1219_ptr);
 1013250:	4640      	mov	r0, r8
 1013252:	4798      	blx	r3
 1013254:	e4f8      	b.n	1012c48 <C1219_full_read_service+0x1ec>
			switch ( c1219[instance].table_id ) {	
 1013256:	2b3f      	cmp	r3, #63	; 0x3f
 1013258:	d13c      	bne.n	10132d4 <C1219_full_read_service+0x878>
	c1219_ptr->table_size = LP_APP_usSt_63_get_size();
 101325a:	4b82      	ldr	r3, [pc, #520]	; (1013464 <C1219_full_read_service+0xa08>)
 101325c:	4798      	blx	r3
 101325e:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1013262:	fb03 4808 	mla	r8, r3, r8, r4
	c1219_ptr->execute_table_reading = LP_APP_bSt_63_execute_table_reading;
 1013266:	f241 72ac 	movw	r2, #6060	; 0x17ac
 101326a:	497f      	ldr	r1, [pc, #508]	; (1013468 <C1219_full_read_service+0xa0c>)
	c1219_ptr->table_size = LP_APP_usSt_63_get_size();
 101326c:	f8a8 0038 	strh.w	r0, [r8, #56]	; 0x38
	C1219_full_read(c1219_ptr);
 1013270:	4b73      	ldr	r3, [pc, #460]	; (1013440 <C1219_full_read_service+0x9e4>)
	c1219_ptr->execute_table_reading = LP_APP_bSt_63_execute_table_reading;
 1013272:	f848 1002 	str.w	r1, [r8, r2]
	C1219_full_read(c1219_ptr);
 1013276:	4640      	mov	r0, r8
 1013278:	4798      	blx	r3
 101327a:	e4e5      	b.n	1012c48 <C1219_full_read_service+0x1ec>
	c1219_ptr->table_size = SM_APP_usMt_25_get_size();
 101327c:	4b7b      	ldr	r3, [pc, #492]	; (101346c <C1219_full_read_service+0xa10>)
 101327e:	4798      	blx	r3
	c1219_ptr->execute_table_reading = SM_APP_bMt_25_execute_table_reading;
 1013280:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1013284:	497a      	ldr	r1, [pc, #488]	; (1013470 <C1219_full_read_service+0xa14>)
	c1219_ptr->table_size = SM_APP_usMt_25_get_size();
 1013286:	8728      	strh	r0, [r5, #56]	; 0x38
	C1219_full_read(c1219_ptr);
 1013288:	4b6d      	ldr	r3, [pc, #436]	; (1013440 <C1219_full_read_service+0x9e4>)
	c1219_ptr->execute_table_reading = SM_APP_bMt_25_execute_table_reading;
 101328a:	50a9      	str	r1, [r5, r2]
	C1219_full_read(c1219_ptr);
 101328c:	4628      	mov	r0, r5
 101328e:	4798      	blx	r3
 1013290:	e4da      	b.n	1012c48 <C1219_full_read_service+0x1ec>
	c1219_ptr->table_size = LP_APP_usSt_61_get_size();
 1013292:	4b78      	ldr	r3, [pc, #480]	; (1013474 <C1219_full_read_service+0xa18>)
 1013294:	4798      	blx	r3
	c1219_ptr->execute_table_reading = LP_APP_bSt_61_execute_table_reading;
 1013296:	f241 72ac 	movw	r2, #6060	; 0x17ac
 101329a:	4977      	ldr	r1, [pc, #476]	; (1013478 <C1219_full_read_service+0xa1c>)
	c1219_ptr->table_size = LP_APP_usSt_61_get_size();
 101329c:	8728      	strh	r0, [r5, #56]	; 0x38
	C1219_full_read(c1219_ptr);
 101329e:	4b68      	ldr	r3, [pc, #416]	; (1013440 <C1219_full_read_service+0x9e4>)
	c1219_ptr->execute_table_reading = LP_APP_bSt_61_execute_table_reading;
 10132a0:	50a9      	str	r1, [r5, r2]
	C1219_full_read(c1219_ptr);
 10132a2:	4628      	mov	r0, r5
 10132a4:	4798      	blx	r3
 10132a6:	e4cf      	b.n	1012c48 <C1219_full_read_service+0x1ec>
	c1219_ptr->table_size = EVNT_APP_usSt_74_get_size();
 10132a8:	4b74      	ldr	r3, [pc, #464]	; (101347c <C1219_full_read_service+0xa20>)
 10132aa:	4798      	blx	r3
	c1219_ptr->execute_table_reading = EVNT_APP_bSt_74_execute_table_reading;
 10132ac:	f241 72ac 	movw	r2, #6060	; 0x17ac
 10132b0:	4973      	ldr	r1, [pc, #460]	; (1013480 <C1219_full_read_service+0xa24>)
	c1219_ptr->table_size = EVNT_APP_usSt_74_get_size();
 10132b2:	8728      	strh	r0, [r5, #56]	; 0x38
	C1219_full_read(c1219_ptr);
 10132b4:	4b62      	ldr	r3, [pc, #392]	; (1013440 <C1219_full_read_service+0x9e4>)
	c1219_ptr->execute_table_reading = EVNT_APP_bSt_74_execute_table_reading;
 10132b6:	50a9      	str	r1, [r5, r2]
	C1219_full_read(c1219_ptr);
 10132b8:	4628      	mov	r0, r5
 10132ba:	4798      	blx	r3
 10132bc:	e4c4      	b.n	1012c48 <C1219_full_read_service+0x1ec>
	c1219_ptr->table_size = TOU_APP_sSt_50_get_size();
 10132be:	4b71      	ldr	r3, [pc, #452]	; (1013484 <C1219_full_read_service+0xa28>)
 10132c0:	4798      	blx	r3
	c1219_ptr->execute_table_reading = TOU_APP_st_50_execute_table_reading;
 10132c2:	f241 72ac 	movw	r2, #6060	; 0x17ac
 10132c6:	4970      	ldr	r1, [pc, #448]	; (1013488 <C1219_full_read_service+0xa2c>)
	c1219_ptr->table_size = TOU_APP_sSt_50_get_size();
 10132c8:	8728      	strh	r0, [r5, #56]	; 0x38
	C1219_full_read(c1219_ptr);
 10132ca:	4b5d      	ldr	r3, [pc, #372]	; (1013440 <C1219_full_read_service+0x9e4>)
	c1219_ptr->execute_table_reading = TOU_APP_st_50_execute_table_reading;
 10132cc:	50a9      	str	r1, [r5, r2]
	C1219_full_read(c1219_ptr);
 10132ce:	4628      	mov	r0, r5
 10132d0:	4798      	blx	r3
 10132d2:	e4b9      	b.n	1012c48 <C1219_full_read_service+0x1ec>
					C1218_send_iar(c1219[instance].c1218_dll);
 10132d4:	f241 73b4 	movw	r3, #6068	; 0x17b4
 10132d8:	fb03 4808 	mla	r8, r3, r8, r4
 10132dc:	4b6b      	ldr	r3, [pc, #428]	; (101348c <C1219_full_read_service+0xa30>)
 10132de:	f8d8 0004 	ldr.w	r0, [r8, #4]
 10132e2:	4798      	blx	r3
					break;
 10132e4:	e4b0      	b.n	1012c48 <C1219_full_read_service+0x1ec>
	c1219_ptr->c1218_dll->tx_data_length = c1219_ptr->c1218_dll->st_08_length + 4;
 10132e6:	686a      	ldr	r2, [r5, #4]
	memcpy(&c1219_ptr->c1218_dll->tx_data[READ_R_DATA_INDEX], &c1219_ptr->c1218_dll->st_08_data[0], c1219_ptr->c1218_dll->st_08_length);
 10132e8:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 10134e0 <C1219_full_read_service+0xa84>
	c1219_ptr->c1218_dll->tx_data_length = c1219_ptr->c1218_dll->st_08_length + 4;
 10132ec:	f8b2 31f6 	ldrh.w	r3, [r2, #502]	; 0x1f6
 10132f0:	3304      	adds	r3, #4
 10132f2:	f8a2 30c0 	strh.w	r3, [r2, #192]	; 0xc0
	c1219_ptr->c1218_dll->tx_data[k++] = SERVICE_R_OK;									
 10132f6:	686b      	ldr	r3, [r5, #4]
 10132f8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 10132fc:	701f      	strb	r7, [r3, #0]
	c1219_ptr->c1218_dll->tx_data[k++] = (uint8_t)((c1219_ptr->c1218_dll->st_08_length & 0xFF00) >> 8);		
 10132fe:	686a      	ldr	r2, [r5, #4]
 1013300:	f8b2 31f6 	ldrh.w	r3, [r2, #502]	; 0x1f6
 1013304:	f8d2 20bc 	ldr.w	r2, [r2, #188]	; 0xbc
 1013308:	0a1b      	lsrs	r3, r3, #8
 101330a:	7053      	strb	r3, [r2, #1]
	c1219_ptr->c1218_dll->tx_data[k++] = (uint8_t)((c1219_ptr->c1218_dll->st_08_length & 0x00FF) >> 0);
 101330c:	686b      	ldr	r3, [r5, #4]
 101330e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 1013312:	f8b3 31f6 	ldrh.w	r3, [r3, #502]	; 0x1f6
 1013316:	7093      	strb	r3, [r2, #2]
	memcpy(&c1219_ptr->c1218_dll->tx_data[READ_R_DATA_INDEX], &c1219_ptr->c1218_dll->st_08_data[0], c1219_ptr->c1218_dll->st_08_length);
 1013318:	6869      	ldr	r1, [r5, #4]
 101331a:	f8d1 00bc 	ldr.w	r0, [r1, #188]	; 0xbc
 101331e:	f8b1 21f6 	ldrh.w	r2, [r1, #502]	; 0x1f6
 1013322:	3003      	adds	r0, #3
 1013324:	f501 71b0 	add.w	r1, r1, #352	; 0x160
 1013328:	47c0      	blx	r8
	k += c1219_ptr->c1218_dll->st_08_length;
 101332a:	686b      	ldr	r3, [r5, #4]
	c1219_ptr->c1218_dll->tx_data[k++] = CRC_2s_complement(&c1219_ptr->c1218_dll->tx_data[3], c1219_ptr->c1218_dll->st_08_length);
 101332c:	4a58      	ldr	r2, [pc, #352]	; (1013490 <C1219_full_read_service+0xa34>)
 101332e:	f8d3 80bc 	ldr.w	r8, [r3, #188]	; 0xbc
	k += c1219_ptr->c1218_dll->st_08_length;
 1013332:	f8b3 11f6 	ldrh.w	r1, [r3, #502]	; 0x1f6
	c1219_ptr->c1218_dll->tx_data[k++] = CRC_2s_complement(&c1219_ptr->c1218_dll->tx_data[3], c1219_ptr->c1218_dll->st_08_length);
 1013336:	f108 0003 	add.w	r0, r8, #3
	k += c1219_ptr->c1218_dll->st_08_length;
 101333a:	1ccf      	adds	r7, r1, #3
	c1219_ptr->c1218_dll->tx_data[k++] = CRC_2s_complement(&c1219_ptr->c1218_dll->tx_data[3], c1219_ptr->c1218_dll->st_08_length);
 101333c:	4790      	blx	r2
 101333e:	b2ff      	uxtb	r7, r7
	C1218_send_response(c1219_ptr->c1218_dll);
 1013340:	4b54      	ldr	r3, [pc, #336]	; (1013494 <C1219_full_read_service+0xa38>)
	c1219_ptr->c1218_dll->tx_data[k++] = CRC_2s_complement(&c1219_ptr->c1218_dll->tx_data[3], c1219_ptr->c1218_dll->st_08_length);
 1013342:	f808 0007 	strb.w	r0, [r8, r7]
	C1218_send_response(c1219_ptr->c1218_dll);
 1013346:	6868      	ldr	r0, [r5, #4]
 1013348:	4798      	blx	r3
 101334a:	e47d      	b.n	1012c48 <C1219_full_read_service+0x1ec>
	c1219_ptr->table_size = REGS_APP_usSt_20_get_size();
 101334c:	4b52      	ldr	r3, [pc, #328]	; (1013498 <C1219_full_read_service+0xa3c>)
 101334e:	4798      	blx	r3
	c1219_ptr->execute_table_reading = REGS_APP_bSt_20_execute_table_reading;
 1013350:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1013354:	4951      	ldr	r1, [pc, #324]	; (101349c <C1219_full_read_service+0xa40>)
	c1219_ptr->table_size = REGS_APP_usSt_20_get_size();
 1013356:	8728      	strh	r0, [r5, #56]	; 0x38
	C1219_full_read(c1219_ptr);
 1013358:	4b39      	ldr	r3, [pc, #228]	; (1013440 <C1219_full_read_service+0x9e4>)
	c1219_ptr->execute_table_reading = REGS_APP_bSt_20_execute_table_reading;
 101335a:	50a9      	str	r1, [r5, r2]
	C1219_full_read(c1219_ptr);
 101335c:	4628      	mov	r0, r5
 101335e:	4798      	blx	r3
 1013360:	e472      	b.n	1012c48 <C1219_full_read_service+0x1ec>
	c1219_ptr->table_size = REGS_APP_usSt_27_get_size();
 1013362:	4b4f      	ldr	r3, [pc, #316]	; (10134a0 <C1219_full_read_service+0xa44>)
 1013364:	4798      	blx	r3
	c1219_ptr->execute_table_reading = REGS_APP_bSt_27_execute_table_reading;
 1013366:	f241 72ac 	movw	r2, #6060	; 0x17ac
 101336a:	494e      	ldr	r1, [pc, #312]	; (10134a4 <C1219_full_read_service+0xa48>)
	c1219_ptr->table_size = REGS_APP_usSt_27_get_size();
 101336c:	8728      	strh	r0, [r5, #56]	; 0x38
	C1219_full_read(c1219_ptr);
 101336e:	4b34      	ldr	r3, [pc, #208]	; (1013440 <C1219_full_read_service+0x9e4>)
	c1219_ptr->execute_table_reading = REGS_APP_bSt_27_execute_table_reading;
 1013370:	50a9      	str	r1, [r5, r2]
	C1219_full_read(c1219_ptr);
 1013372:	4628      	mov	r0, r5
 1013374:	4798      	blx	r3
 1013376:	e467      	b.n	1012c48 <C1219_full_read_service+0x1ec>
	c1219_ptr->table_size = SM_APP_usMt_22_get_size();
 1013378:	4b4b      	ldr	r3, [pc, #300]	; (10134a8 <C1219_full_read_service+0xa4c>)
 101337a:	4798      	blx	r3
	c1219_ptr->execute_table_reading = SM_APP_bMt_22_execute_table_reading;
 101337c:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1013380:	494a      	ldr	r1, [pc, #296]	; (10134ac <C1219_full_read_service+0xa50>)
	c1219_ptr->table_size = SM_APP_usMt_22_get_size();
 1013382:	8728      	strh	r0, [r5, #56]	; 0x38
	C1219_full_read(c1219_ptr);
 1013384:	4b2e      	ldr	r3, [pc, #184]	; (1013440 <C1219_full_read_service+0x9e4>)
	c1219_ptr->execute_table_reading = SM_APP_bMt_22_execute_table_reading;
 1013386:	50a9      	str	r1, [r5, r2]
	C1219_full_read(c1219_ptr);
 1013388:	4628      	mov	r0, r5
 101338a:	4798      	blx	r3
 101338c:	e45c      	b.n	1012c48 <C1219_full_read_service+0x1ec>
	c1219_ptr->table_size = EVNT_APP_usSt_70_get_size();
 101338e:	4b48      	ldr	r3, [pc, #288]	; (10134b0 <C1219_full_read_service+0xa54>)
 1013390:	4798      	blx	r3
	c1219_ptr->execute_table_reading = EVNT_APP_ubSt_70_execute_table_reading;
 1013392:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1013396:	4947      	ldr	r1, [pc, #284]	; (10134b4 <C1219_full_read_service+0xa58>)
	c1219_ptr->table_size = EVNT_APP_usSt_70_get_size();
 1013398:	8728      	strh	r0, [r5, #56]	; 0x38
	C1219_full_read(c1219_ptr);
 101339a:	4b29      	ldr	r3, [pc, #164]	; (1013440 <C1219_full_read_service+0x9e4>)
	c1219_ptr->execute_table_reading = EVNT_APP_ubSt_70_execute_table_reading;
 101339c:	50a9      	str	r1, [r5, r2]
	C1219_full_read(c1219_ptr);
 101339e:	4628      	mov	r0, r5
 10133a0:	4798      	blx	r3
 10133a2:	e451      	b.n	1012c48 <C1219_full_read_service+0x1ec>
	c1219_ptr->table_size = TOU_APP_usSt_55_get_size();
 10133a4:	4b44      	ldr	r3, [pc, #272]	; (10134b8 <C1219_full_read_service+0xa5c>)
 10133a6:	4798      	blx	r3
 10133a8:	f241 73b4 	movw	r3, #6068	; 0x17b4
 10133ac:	fb03 4808 	mla	r8, r3, r8, r4
	c1219_ptr->execute_table_reading = TOU_APP_bSt_55_execute_table_reading;
 10133b0:	f241 72ac 	movw	r2, #6060	; 0x17ac
 10133b4:	4941      	ldr	r1, [pc, #260]	; (10134bc <C1219_full_read_service+0xa60>)
	c1219_ptr->table_size = TOU_APP_usSt_55_get_size();
 10133b6:	f8a8 0038 	strh.w	r0, [r8, #56]	; 0x38
	C1219_full_read(c1219_ptr);
 10133ba:	4b21      	ldr	r3, [pc, #132]	; (1013440 <C1219_full_read_service+0x9e4>)
	c1219_ptr->execute_table_reading = TOU_APP_bSt_55_execute_table_reading;
 10133bc:	f848 1002 	str.w	r1, [r8, r2]
	C1219_full_read(c1219_ptr);
 10133c0:	4640      	mov	r0, r8
 10133c2:	4798      	blx	r3
 10133c4:	e440      	b.n	1012c48 <C1219_full_read_service+0x1ec>
	c1219_ptr->table_size = TOU_APP_usSt_53_get_size();
 10133c6:	4b3e      	ldr	r3, [pc, #248]	; (10134c0 <C1219_full_read_service+0xa64>)
 10133c8:	4798      	blx	r3
	c1219_ptr->execute_table_reading = TOU_APP_bSt_53_execute_table_reading;
 10133ca:	f241 72ac 	movw	r2, #6060	; 0x17ac
 10133ce:	493d      	ldr	r1, [pc, #244]	; (10134c4 <C1219_full_read_service+0xa68>)
	c1219_ptr->table_size = TOU_APP_usSt_53_get_size();
 10133d0:	8728      	strh	r0, [r5, #56]	; 0x38
	C1219_full_read(c1219_ptr);
 10133d2:	4b1b      	ldr	r3, [pc, #108]	; (1013440 <C1219_full_read_service+0x9e4>)
	c1219_ptr->execute_table_reading = TOU_APP_bSt_53_execute_table_reading;
 10133d4:	50a9      	str	r1, [r5, r2]
	C1219_full_read(c1219_ptr);
 10133d6:	4628      	mov	r0, r5
 10133d8:	4798      	blx	r3
 10133da:	e435      	b.n	1012c48 <C1219_full_read_service+0x1ec>
	c1219_ptr->table_size = EVNT_APP_usMt_72_get_size();
 10133dc:	4b3a      	ldr	r3, [pc, #232]	; (10134c8 <C1219_full_read_service+0xa6c>)
 10133de:	4798      	blx	r3
 10133e0:	f241 73b4 	movw	r3, #6068	; 0x17b4
 10133e4:	fb03 4808 	mla	r8, r3, r8, r4
	c1219_ptr->execute_table_reading = EVNT_APP_bMt_72_execute_table_reading;
 10133e8:	f241 72ac 	movw	r2, #6060	; 0x17ac
 10133ec:	4937      	ldr	r1, [pc, #220]	; (10134cc <C1219_full_read_service+0xa70>)
	c1219_ptr->table_size = EVNT_APP_usMt_72_get_size();
 10133ee:	f8a8 0038 	strh.w	r0, [r8, #56]	; 0x38
	C1219_full_read(c1219_ptr);
 10133f2:	4b13      	ldr	r3, [pc, #76]	; (1013440 <C1219_full_read_service+0x9e4>)
	c1219_ptr->execute_table_reading = EVNT_APP_bMt_72_execute_table_reading;
 10133f4:	f848 1002 	str.w	r1, [r8, r2]
	C1219_full_read(c1219_ptr);
 10133f8:	4640      	mov	r0, r8
 10133fa:	4798      	blx	r3
 10133fc:	e424      	b.n	1012c48 <C1219_full_read_service+0x1ec>
	c1219_ptr->table_size = GRAL_APP_usSt_2_get_size();
 10133fe:	4b34      	ldr	r3, [pc, #208]	; (10134d0 <C1219_full_read_service+0xa74>)
 1013400:	4798      	blx	r3
	c1219_ptr->execute_table_reading = GRAL_APP_bSt_2_execute_table_reading;
 1013402:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1013406:	4933      	ldr	r1, [pc, #204]	; (10134d4 <C1219_full_read_service+0xa78>)
	c1219_ptr->table_size = GRAL_APP_usSt_2_get_size();
 1013408:	8728      	strh	r0, [r5, #56]	; 0x38
	C1219_full_read(c1219_ptr);
 101340a:	4b0d      	ldr	r3, [pc, #52]	; (1013440 <C1219_full_read_service+0x9e4>)
	c1219_ptr->execute_table_reading = GRAL_APP_bSt_2_execute_table_reading;
 101340c:	50a9      	str	r1, [r5, r2]
	C1219_full_read(c1219_ptr);
 101340e:	4628      	mov	r0, r5
 1013410:	4798      	blx	r3
 1013412:	e419      	b.n	1012c48 <C1219_full_read_service+0x1ec>
	c1219_ptr->table_size = REGS_APP_usSt_15_get_size();
 1013414:	4b30      	ldr	r3, [pc, #192]	; (10134d8 <C1219_full_read_service+0xa7c>)
 1013416:	4798      	blx	r3
 1013418:	f241 73b4 	movw	r3, #6068	; 0x17b4
 101341c:	fb03 4808 	mla	r8, r3, r8, r4
	c1219_ptr->execute_table_reading = REGS_APP_bSt_15_execute_table_reading;
 1013420:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1013424:	492d      	ldr	r1, [pc, #180]	; (10134dc <C1219_full_read_service+0xa80>)
	c1219_ptr->table_size = REGS_APP_usSt_15_get_size();
 1013426:	f8a8 0038 	strh.w	r0, [r8, #56]	; 0x38
	C1219_full_read(c1219_ptr);
 101342a:	4b05      	ldr	r3, [pc, #20]	; (1013440 <C1219_full_read_service+0x9e4>)
	c1219_ptr->execute_table_reading = REGS_APP_bSt_15_execute_table_reading;
 101342c:	f848 1002 	str.w	r1, [r8, r2]
	C1219_full_read(c1219_ptr);
 1013430:	4640      	mov	r0, r8
 1013432:	4798      	blx	r3
 1013434:	e408      	b.n	1012c48 <C1219_full_read_service+0x1ec>
 1013436:	bf00      	nop
 1013438:	01026711 	.word	0x01026711
 101343c:	01026671 	.word	0x01026671
 1013440:	01010371 	.word	0x01010371
 1013444:	0102aa0d 	.word	0x0102aa0d
 1013448:	0102a9f1 	.word	0x0102a9f1
 101344c:	0101b3cd 	.word	0x0101b3cd
 1013450:	0101b38d 	.word	0x0101b38d
 1013454:	01019921 	.word	0x01019921
 1013458:	0101974d 	.word	0x0101974d
 101345c:	01020ed5 	.word	0x01020ed5
 1013460:	01020e95 	.word	0x01020e95
 1013464:	0101bb25 	.word	0x0101bb25
 1013468:	0101bacd 	.word	0x0101bacd
 101346c:	01021355 	.word	0x01021355
 1013470:	0102111d 	.word	0x0102111d
 1013474:	0101b65d 	.word	0x0101b65d
 1013478:	0101b611 	.word	0x0101b611
 101347c:	0101919d 	.word	0x0101919d
 1013480:	01018f91 	.word	0x01018f91
 1013484:	0102be3d 	.word	0x0102be3d
 1013488:	0102be11 	.word	0x0102be11
 101348c:	010164c5 	.word	0x010164c5
 1013490:	01016bf5 	.word	0x01016bf5
 1013494:	0101637d 	.word	0x0101637d
 1013498:	01026b71 	.word	0x01026b71
 101349c:	01026b41 	.word	0x01026b41
 10134a0:	01028701 	.word	0x01028701
 10134a4:	01028639 	.word	0x01028639
 10134a8:	01020b49 	.word	0x01020b49
 10134ac:	01020a51 	.word	0x01020a51
 10134b0:	0101845d 	.word	0x0101845d
 10134b4:	01018435 	.word	0x01018435
 10134b8:	0102c539 	.word	0x0102c539
 10134bc:	0102c4ad 	.word	0x0102c4ad
 10134c0:	0102c0b9 	.word	0x0102c0b9
 10134c4:	0102c039 	.word	0x0102c039
 10134c8:	01018da5 	.word	0x01018da5
 10134cc:	010186f5 	.word	0x010186f5
 10134d0:	01019c95 	.word	0x01019c95
 10134d4:	01019c29 	.word	0x01019c29
 10134d8:	01026a69 	.word	0x01026a69
 10134dc:	0102698d 	.word	0x0102698d
 10134e0:	01030a3d 	.word	0x01030a3d
	c1219_ptr->table_size = REGS_APP_usSt_12_get_size();
 10134e4:	4b4d      	ldr	r3, [pc, #308]	; (101361c <C1219_full_read_service+0xbc0>)
 10134e6:	4798      	blx	r3
	c1219_ptr->execute_table_reading = REGS_APP_bSt_12_execute_table_reading;
 10134e8:	f241 72ac 	movw	r2, #6060	; 0x17ac
 10134ec:	494c      	ldr	r1, [pc, #304]	; (1013620 <C1219_full_read_service+0xbc4>)
	c1219_ptr->table_size = REGS_APP_usSt_12_get_size();
 10134ee:	8728      	strh	r0, [r5, #56]	; 0x38
	C1219_full_read(c1219_ptr);
 10134f0:	4b4c      	ldr	r3, [pc, #304]	; (1013624 <C1219_full_read_service+0xbc8>)
	c1219_ptr->execute_table_reading = REGS_APP_bSt_12_execute_table_reading;
 10134f2:	50a9      	str	r1, [r5, r2]
	C1219_full_read(c1219_ptr);
 10134f4:	4628      	mov	r0, r5
 10134f6:	4798      	blx	r3
 10134f8:	f7ff bba6 	b.w	1012c48 <C1219_full_read_service+0x1ec>
	c1219_ptr->table_size = SM_APP_usMt_4_get_size();
 10134fc:	4b4a      	ldr	r3, [pc, #296]	; (1013628 <C1219_full_read_service+0xbcc>)
 10134fe:	4798      	blx	r3
 1013500:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1013504:	fb03 4808 	mla	r8, r3, r8, r4
	c1219_ptr->execute_table_reading = SM_APP_bMt_4_execute_table_reading;
 1013508:	f241 72ac 	movw	r2, #6060	; 0x17ac
 101350c:	4947      	ldr	r1, [pc, #284]	; (101362c <C1219_full_read_service+0xbd0>)
	c1219_ptr->table_size = SM_APP_usMt_4_get_size();
 101350e:	f8a8 0038 	strh.w	r0, [r8, #56]	; 0x38
	C1219_full_read(c1219_ptr);
 1013512:	4b44      	ldr	r3, [pc, #272]	; (1013624 <C1219_full_read_service+0xbc8>)
	c1219_ptr->execute_table_reading = SM_APP_bMt_4_execute_table_reading;
 1013514:	f848 1002 	str.w	r1, [r8, r2]
	C1219_full_read(c1219_ptr);
 1013518:	4640      	mov	r0, r8
 101351a:	4798      	blx	r3
 101351c:	f7ff bb94 	b.w	1012c48 <C1219_full_read_service+0x1ec>
	c1219_ptr->table_size = SM_APP_usMt_1_get_size();
 1013520:	4b43      	ldr	r3, [pc, #268]	; (1013630 <C1219_full_read_service+0xbd4>)
 1013522:	4798      	blx	r3
	c1219_ptr->execute_table_reading = SM_APP_bMt_1_execute_table_reading;
 1013524:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1013528:	4942      	ldr	r1, [pc, #264]	; (1013634 <C1219_full_read_service+0xbd8>)
	c1219_ptr->table_size = SM_APP_usMt_1_get_size();
 101352a:	8728      	strh	r0, [r5, #56]	; 0x38
	C1219_full_read(c1219_ptr);
 101352c:	4b3d      	ldr	r3, [pc, #244]	; (1013624 <C1219_full_read_service+0xbc8>)
	c1219_ptr->execute_table_reading = SM_APP_bMt_1_execute_table_reading;
 101352e:	50a9      	str	r1, [r5, r2]
	C1219_full_read(c1219_ptr);
 1013530:	4628      	mov	r0, r5
 1013532:	4798      	blx	r3
 1013534:	f7ff bb88 	b.w	1012c48 <C1219_full_read_service+0x1ec>
	c1219_ptr->table_size = SECR_APP_usSt_43_get_size();
 1013538:	4b3f      	ldr	r3, [pc, #252]	; (1013638 <C1219_full_read_service+0xbdc>)
 101353a:	4798      	blx	r3
 101353c:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1013540:	fb03 4808 	mla	r8, r3, r8, r4
	c1219_ptr->execute_table_reading = SECR_APP_bSt_43_execute_table_reading;
 1013544:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1013548:	493c      	ldr	r1, [pc, #240]	; (101363c <C1219_full_read_service+0xbe0>)
	c1219_ptr->table_size = SECR_APP_usSt_43_get_size();
 101354a:	f8a8 0038 	strh.w	r0, [r8, #56]	; 0x38
	C1219_full_read(c1219_ptr);
 101354e:	4b35      	ldr	r3, [pc, #212]	; (1013624 <C1219_full_read_service+0xbc8>)
	c1219_ptr->execute_table_reading = SECR_APP_bSt_43_execute_table_reading;
 1013550:	f848 1002 	str.w	r1, [r8, r2]
	C1219_full_read(c1219_ptr);
 1013554:	4640      	mov	r0, r8
 1013556:	4798      	blx	r3
 1013558:	f7ff bb76 	b.w	1012c48 <C1219_full_read_service+0x1ec>
	c1219_ptr->table_size = EVNT_APP_usSt_71_get_size();
 101355c:	4b38      	ldr	r3, [pc, #224]	; (1013640 <C1219_full_read_service+0xbe4>)
 101355e:	4798      	blx	r3
 1013560:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1013564:	fb03 4808 	mla	r8, r3, r8, r4
	c1219_ptr->execute_table_reading = EVNT_APP_bSt_71_execute_table_reading;
 1013568:	f241 72ac 	movw	r2, #6060	; 0x17ac
 101356c:	4935      	ldr	r1, [pc, #212]	; (1013644 <C1219_full_read_service+0xbe8>)
	c1219_ptr->table_size = EVNT_APP_usSt_71_get_size();
 101356e:	f8a8 0038 	strh.w	r0, [r8, #56]	; 0x38
	C1219_full_read(c1219_ptr);
 1013572:	4b2c      	ldr	r3, [pc, #176]	; (1013624 <C1219_full_read_service+0xbc8>)
	c1219_ptr->execute_table_reading = EVNT_APP_bSt_71_execute_table_reading;
 1013574:	f848 1002 	str.w	r1, [r8, r2]
	C1219_full_read(c1219_ptr);
 1013578:	4640      	mov	r0, r8
 101357a:	4798      	blx	r3
 101357c:	f7ff bb64 	b.w	1012c48 <C1219_full_read_service+0x1ec>
	c1219_ptr->table_size = EVNT_APP_usSt_72_get_size();
 1013580:	4b31      	ldr	r3, [pc, #196]	; (1013648 <C1219_full_read_service+0xbec>)
 1013582:	4798      	blx	r3
 1013584:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1013588:	fb03 4808 	mla	r8, r3, r8, r4
	c1219_ptr->execute_table_reading = EVNT_APP_bSt_72_execute_table_reading;
 101358c:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1013590:	492e      	ldr	r1, [pc, #184]	; (101364c <C1219_full_read_service+0xbf0>)
	c1219_ptr->table_size = EVNT_APP_usSt_72_get_size();
 1013592:	f8a8 0038 	strh.w	r0, [r8, #56]	; 0x38
	C1219_full_read(c1219_ptr);
 1013596:	4b23      	ldr	r3, [pc, #140]	; (1013624 <C1219_full_read_service+0xbc8>)
	c1219_ptr->execute_table_reading = EVNT_APP_bSt_72_execute_table_reading;
 1013598:	f848 1002 	str.w	r1, [r8, r2]
	C1219_full_read(c1219_ptr);
 101359c:	4640      	mov	r0, r8
 101359e:	4798      	blx	r3
 10135a0:	f7ff bb52 	b.w	1012c48 <C1219_full_read_service+0x1ec>
	c1219_ptr->table_size = SECR_APP_usSt_41_get_size();
 10135a4:	4b2a      	ldr	r3, [pc, #168]	; (1013650 <C1219_full_read_service+0xbf4>)
 10135a6:	4798      	blx	r3
	c1219_ptr->execute_table_reading = SECR_APP_bSt_41_execute_table_reading;
 10135a8:	f241 72ac 	movw	r2, #6060	; 0x17ac
 10135ac:	4929      	ldr	r1, [pc, #164]	; (1013654 <C1219_full_read_service+0xbf8>)
	c1219_ptr->table_size = SECR_APP_usSt_41_get_size();
 10135ae:	8728      	strh	r0, [r5, #56]	; 0x38
	C1219_full_read(c1219_ptr);
 10135b0:	4b1c      	ldr	r3, [pc, #112]	; (1013624 <C1219_full_read_service+0xbc8>)
	c1219_ptr->execute_table_reading = SECR_APP_bSt_41_execute_table_reading;
 10135b2:	50a9      	str	r1, [r5, r2]
	C1219_full_read(c1219_ptr);
 10135b4:	4628      	mov	r0, r5
 10135b6:	4798      	blx	r3
 10135b8:	f7ff bb46 	b.w	1012c48 <C1219_full_read_service+0x1ec>
	c1219_ptr->table_size = REGS_APP_usSt_23_get_size();
 10135bc:	4b26      	ldr	r3, [pc, #152]	; (1013658 <C1219_full_read_service+0xbfc>)
 10135be:	4798      	blx	r3
	c1219_ptr->execute_table_reading = REGS_APP_bSt_23_execute_table_reading;
 10135c0:	f241 72ac 	movw	r2, #6060	; 0x17ac
 10135c4:	4925      	ldr	r1, [pc, #148]	; (101365c <C1219_full_read_service+0xc00>)
	c1219_ptr->table_size = REGS_APP_usSt_23_get_size();
 10135c6:	8728      	strh	r0, [r5, #56]	; 0x38
	C1219_full_read(c1219_ptr);
 10135c8:	4b16      	ldr	r3, [pc, #88]	; (1013624 <C1219_full_read_service+0xbc8>)
	c1219_ptr->execute_table_reading = REGS_APP_bSt_23_execute_table_reading;
 10135ca:	50a9      	str	r1, [r5, r2]
	C1219_full_read(c1219_ptr);
 10135cc:	4628      	mov	r0, r5
 10135ce:	4798      	blx	r3
 10135d0:	f7ff bb3a 	b.w	1012c48 <C1219_full_read_service+0x1ec>
	c1219_ptr->table_size = REGS_APP_usSt_24_get_size();
 10135d4:	4b22      	ldr	r3, [pc, #136]	; (1013660 <C1219_full_read_service+0xc04>)
 10135d6:	4798      	blx	r3
 10135d8:	f241 73b4 	movw	r3, #6068	; 0x17b4
 10135dc:	fb03 4808 	mla	r8, r3, r8, r4
	c1219_ptr->execute_table_reading = REGS_APP_bSt_24_execute_table_reading;
 10135e0:	f241 72ac 	movw	r2, #6060	; 0x17ac
 10135e4:	491f      	ldr	r1, [pc, #124]	; (1013664 <C1219_full_read_service+0xc08>)
	c1219_ptr->table_size = REGS_APP_usSt_24_get_size();
 10135e6:	f8a8 0038 	strh.w	r0, [r8, #56]	; 0x38
	C1219_full_read(c1219_ptr);
 10135ea:	4b0e      	ldr	r3, [pc, #56]	; (1013624 <C1219_full_read_service+0xbc8>)
	c1219_ptr->execute_table_reading = REGS_APP_bSt_24_execute_table_reading;
 10135ec:	f848 1002 	str.w	r1, [r8, r2]
	C1219_full_read(c1219_ptr);
 10135f0:	4640      	mov	r0, r8
 10135f2:	4798      	blx	r3
 10135f4:	f7ff bb28 	b.w	1012c48 <C1219_full_read_service+0x1ec>
	c1219_ptr->table_size = REGS_APP_usSt_25_get_size();
 10135f8:	4b1b      	ldr	r3, [pc, #108]	; (1013668 <C1219_full_read_service+0xc0c>)
 10135fa:	4798      	blx	r3
 10135fc:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1013600:	fb03 4808 	mla	r8, r3, r8, r4
	c1219_ptr->execute_table_reading = REGS_APP_bSt_25_execute_table_reading;
 1013604:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1013608:	4918      	ldr	r1, [pc, #96]	; (101366c <C1219_full_read_service+0xc10>)
	c1219_ptr->table_size = REGS_APP_usSt_25_get_size();
 101360a:	f8a8 0038 	strh.w	r0, [r8, #56]	; 0x38
	C1219_full_read(c1219_ptr);
 101360e:	4b05      	ldr	r3, [pc, #20]	; (1013624 <C1219_full_read_service+0xbc8>)
	c1219_ptr->execute_table_reading = REGS_APP_bSt_25_execute_table_reading;
 1013610:	f848 1002 	str.w	r1, [r8, r2]
	C1219_full_read(c1219_ptr);
 1013614:	4640      	mov	r0, r8
 1013616:	4798      	blx	r3
 1013618:	f7ff bb16 	b.w	1012c48 <C1219_full_read_service+0x1ec>
 101361c:	01026755 	.word	0x01026755
 1013620:	01026715 	.word	0x01026715
 1013624:	01010371 	.word	0x01010371
 1013628:	010209a9 	.word	0x010209a9
 101362c:	01020821 	.word	0x01020821
 1013630:	01020521 	.word	0x01020521
 1013634:	010204d5 	.word	0x010204d5
 1013638:	0102afed 	.word	0x0102afed
 101363c:	0102af7d 	.word	0x0102af7d
 1013640:	01018691 	.word	0x01018691
 1013644:	010185e9 	.word	0x010185e9
 1013648:	01018dad 	.word	0x01018dad
 101364c:	01018695 	.word	0x01018695
 1013650:	0102ac29 	.word	0x0102ac29
 1013654:	0102ab9d 	.word	0x0102ab9d
 1013658:	01027c45 	.word	0x01027c45
 101365c:	01027769 	.word	0x01027769
 1013660:	01027da1 	.word	0x01027da1
 1013664:	01027cf1 	.word	0x01027cf1
 1013668:	01027ec9 	.word	0x01027ec9
 101366c:	01027e19 	.word	0x01027e19

01013670 <C1219_pread_offset_service>:
void C1219_pread_offset_service(C1218_DLL_TYPE *c1218_dll_ptr, C1218_APL_TYPE c1218_apl) {
 1013670:	b084      	sub	sp, #16
 1013672:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1013676:	b08f      	sub	sp, #60	; 0x3c
 1013678:	ae19      	add	r6, sp, #100	; 0x64
 101367a:	e886 000e 	stmia.w	r6, {r1, r2, r3}
		if (c1219[instance].busy_instance == false) break;
 101367e:	4cb8      	ldr	r4, [pc, #736]	; (1013960 <C1219_pread_offset_service+0x2f0>)
	for ( instance = 0; instance < NBR_C1219_INSTANCES; instance++ ) {
 1013680:	4db8      	ldr	r5, [pc, #736]	; (1013964 <C1219_pread_offset_service+0x2f4>)
		if (c1219[instance].busy_instance == false) break;
 1013682:	7827      	ldrb	r7, [r4, #0]
 1013684:	f8bd 8066 	ldrh.w	r8, [sp, #102]	; 0x66
	for ( instance = 0; instance < NBR_C1219_INSTANCES; instance++ ) {
 1013688:	2200      	movs	r2, #0
 101368a:	702a      	strb	r2, [r5, #0]
		if (c1219[instance].busy_instance == false) break;
 101368c:	b1ef      	cbz	r7, 10136ca <C1219_pread_offset_service+0x5a>
 101368e:	f241 72b4 	movw	r2, #6068	; 0x17b4
	for ( instance = 0; instance < NBR_C1219_INSTANCES; instance++ ) {
 1013692:	2301      	movs	r3, #1
		if (c1219[instance].busy_instance == false) break;
 1013694:	5ca2      	ldrb	r2, [r4, r2]
	for ( instance = 0; instance < NBR_C1219_INSTANCES; instance++ ) {
 1013696:	702b      	strb	r3, [r5, #0]
		if (c1219[instance].busy_instance == false) break;
 1013698:	b1b2      	cbz	r2, 10136c8 <C1219_pread_offset_service+0x58>
 101369a:	f642 7368 	movw	r3, #12136	; 0x2f68
 101369e:	5ce3      	ldrb	r3, [r4, r3]
 10136a0:	2b00      	cmp	r3, #0
 10136a2:	f000 81cb 	beq.w	1013a3c <C1219_pread_offset_service+0x3cc>
 10136a6:	f244 731c 	movw	r3, #18204	; 0x471c
 10136aa:	5ce3      	ldrb	r3, [r4, r3]
 10136ac:	2b00      	cmp	r3, #0
 10136ae:	f000 81c9 	beq.w	1013a44 <C1219_pread_offset_service+0x3d4>
	if ( c1219[instance].busy_instance == false ) {
 10136b2:	f645 62d0 	movw	r2, #24272	; 0x5ed0
 10136b6:	2304      	movs	r3, #4
 10136b8:	5ca2      	ldrb	r2, [r4, r2]
 10136ba:	702b      	strb	r3, [r5, #0]
 10136bc:	b122      	cbz	r2, 10136c8 <C1219_pread_offset_service+0x58>
}
 10136be:	b00f      	add	sp, #60	; 0x3c
 10136c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 10136c4:	b004      	add	sp, #16
 10136c6:	4770      	bx	lr
	if ( c1219[instance].busy_instance == false ) {
 10136c8:	461f      	mov	r7, r3
 10136ca:	4684      	mov	ip, r0
		c1219[instance].c1218_apl = c1218_apl;
 10136cc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
		c1219[instance].busy_instance = true;
 10136ce:	f241 79b4 	movw	r9, #6068	; 0x17b4
 10136d2:	fb09 f707 	mul.w	r7, r9, r7
 10136d6:	eb04 0b07 	add.w	fp, r4, r7
		c1219[instance].c1218_apl = c1218_apl;
 10136da:	f10b 0e08 	add.w	lr, fp, #8
 10136de:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 10136e2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 10136e4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
		EVNT_APP_vRegister_event(END_DEVICE_ACCESSED_FOR_READ, 0, true, c1218_apl.user_id, rtc.utc_timestamp);
 10136e8:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 10139a0 <C1219_pread_offset_service+0x330>
		c1219[instance].c1218_apl = c1218_apl;
 10136ec:	6830      	ldr	r0, [r6, #0]
		EVNT_APP_vRegister_event(END_DEVICE_ACCESSED_FOR_READ, 0, true, c1218_apl.user_id, rtc.utc_timestamp);
 10136ee:	f8da 3004 	ldr.w	r3, [sl, #4]
 10136f2:	9300      	str	r3, [sp, #0]
		c1219[instance].busy_instance = true;
 10136f4:	2601      	movs	r6, #1
		EVNT_APP_vRegister_event(END_DEVICE_ACCESSED_FOR_READ, 0, true, c1218_apl.user_id, rtc.utc_timestamp);
 10136f6:	4632      	mov	r2, r6
		c1219[instance].c1218_dll = c1218_dll_ptr;
 10136f8:	f8cb c004 	str.w	ip, [fp, #4]
		EVNT_APP_vRegister_event(END_DEVICE_ACCESSED_FOR_READ, 0, true, c1218_apl.user_id, rtc.utc_timestamp);
 10136fc:	4643      	mov	r3, r8
 10136fe:	2100      	movs	r1, #0
		c1219[instance].c1218_apl = c1218_apl;
 1013700:	f8ce 0000 	str.w	r0, [lr]
		EVNT_APP_vRegister_event(END_DEVICE_ACCESSED_FOR_READ, 0, true, c1218_apl.user_id, rtc.utc_timestamp);
 1013704:	f8df b29c 	ldr.w	fp, [pc, #668]	; 10139a4 <C1219_pread_offset_service+0x334>
		c1219[instance].busy_instance = true;
 1013708:	55e6      	strb	r6, [r4, r7]
		EVNT_APP_vRegister_event(END_DEVICE_ACCESSED_FOR_READ, 0, true, c1218_apl.user_id, rtc.utc_timestamp);
 101370a:	2007      	movs	r0, #7
 101370c:	47d8      	blx	fp
		if ( c1219[instance].c1218_dll->uart == OP_UART ) {
 101370e:	782b      	ldrb	r3, [r5, #0]
 1013710:	4895      	ldr	r0, [pc, #596]	; (1013968 <C1219_pread_offset_service+0x2f8>)
 1013712:	fb09 4203 	mla	r2, r9, r3, r4
 1013716:	6851      	ldr	r1, [r2, #4]
 1013718:	f8d1 2204 	ldr.w	r2, [r1, #516]	; 0x204
 101371c:	4282      	cmp	r2, r0
 101371e:	f000 8195 	beq.w	1013a4c <C1219_pread_offset_service+0x3dc>
		else if ( c1219[instance].c1218_dll->uart == NIC_UART ) {
 1013722:	4892      	ldr	r0, [pc, #584]	; (101396c <C1219_pread_offset_service+0x2fc>)
 1013724:	4282      	cmp	r2, r0
 1013726:	f000 819f 	beq.w	1013a68 <C1219_pread_offset_service+0x3f8>
		c1219[instance].table_id = 0;
 101372a:	f241 78b4 	movw	r8, #6068	; 0x17b4
 101372e:	fb08 4303 	mla	r3, r8, r3, r4
 1013732:	f04f 0e00 	mov.w	lr, #0
 1013736:	f8a3 e02c 	strh.w	lr, [r3, #44]	; 0x2c
		SECURITY_USER_INFO_TYPE user_info = {
 101373a:	f89d 2086 	ldrb.w	r2, [sp, #134]	; 0x86
 101373e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
		c1219[instance].table_id |= (uint16_t)(c1219[instance].c1218_dll->rx_data[SERVICE_INDEX + 1] << 8);
 1013742:	688a      	ldr	r2, [r1, #8]
		if ( SECR_APP_bCheck_access_to_read_table(user_info) ) {
 1013744:	4e8a      	ldr	r6, [pc, #552]	; (1013970 <C1219_pread_offset_service+0x300>)
		c1219[instance].table_id |= (uint16_t)(c1219[instance].c1218_dll->rx_data[SERVICE_INDEX + 1] << 8);
 1013746:	7852      	ldrb	r2, [r2, #1]
 1013748:	0212      	lsls	r2, r2, #8
 101374a:	859a      	strh	r2, [r3, #44]	; 0x2c
		c1219[instance].table_id |= (uint16_t)(c1219[instance].c1218_dll->rx_data[SERVICE_INDEX + 2] << 0);
 101374c:	6888      	ldr	r0, [r1, #8]
 101374e:	7880      	ldrb	r0, [r0, #2]
		c1219[instance].offset = 0;
 1013750:	f8c3 e030 	str.w	lr, [r3, #48]	; 0x30
		c1219[instance].table_id |= (uint16_t)(c1219[instance].c1218_dll->rx_data[SERVICE_INDEX + 2] << 0);
 1013754:	4302      	orrs	r2, r0
 1013756:	859a      	strh	r2, [r3, #44]	; 0x2c
		c1219[instance].offset |= (uint32_t)(c1219[instance].c1218_dll->rx_data[SERVICE_INDEX + 3] << 16);
 1013758:	6888      	ldr	r0, [r1, #8]
 101375a:	78c7      	ldrb	r7, [r0, #3]
 101375c:	043f      	lsls	r7, r7, #16
 101375e:	631f      	str	r7, [r3, #48]	; 0x30
		c1219[instance].offset |= (uint32_t)(c1219[instance].c1218_dll->rx_data[SERVICE_INDEX + 4] <<  8);
 1013760:	6888      	ldr	r0, [r1, #8]
 1013762:	7900      	ldrb	r0, [r0, #4]
 1013764:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
 1013768:	631f      	str	r7, [r3, #48]	; 0x30
		c1219[instance].offset |= (uint32_t)(c1219[instance].c1218_dll->rx_data[SERVICE_INDEX + 5] <<  0);
 101376a:	6888      	ldr	r0, [r1, #8]
 101376c:	7940      	ldrb	r0, [r0, #5]
		c1219[instance].count = 0;
 101376e:	f8c3 e034 	str.w	lr, [r3, #52]	; 0x34
		c1219[instance].offset |= (uint32_t)(c1219[instance].c1218_dll->rx_data[SERVICE_INDEX + 5] <<  0);
 1013772:	4307      	orrs	r7, r0
 1013774:	631f      	str	r7, [r3, #48]	; 0x30
		c1219[instance].count |= (uint16_t)(c1219[instance].c1218_dll->rx_data[SERVICE_INDEX + 6] << 8);
 1013776:	6888      	ldr	r0, [r1, #8]
 1013778:	7980      	ldrb	r0, [r0, #6]
 101377a:	0200      	lsls	r0, r0, #8
 101377c:	6358      	str	r0, [r3, #52]	; 0x34
		c1219[instance].count |= (uint16_t)(c1219[instance].c1218_dll->rx_data[SERVICE_INDEX + 7] << 0);
 101377e:	688f      	ldr	r7, [r1, #8]
		memcpy(&user_info.password, &c1218_apl.password, 20);
 1013780:	a918      	add	r1, sp, #96	; 0x60
		c1219[instance].count |= (uint16_t)(c1219[instance].c1218_dll->rx_data[SERVICE_INDEX + 7] << 0);
 1013782:	f897 e007 	ldrb.w	lr, [r7, #7]
		memcpy(&user_info.password, &c1218_apl.password, 20);
 1013786:	f851 7f12 	ldr.w	r7, [r1, #18]!
		c1219[instance].count |= (uint16_t)(c1219[instance].c1218_dll->rx_data[SERVICE_INDEX + 7] << 0);
 101378a:	ea4e 0000 	orr.w	r0, lr, r0
			.tbl_proc_id			= (c1219[instance].table_id & TBL_PROC_NBR_bm) >> TBL_PROC_NBR_bp,
 101378e:	f3c2 0e0a 	ubfx	lr, r2, #0, #11
			.mfg_flag				= (bool)((c1219[instance].table_id & STD_VS_MFG_FLAG_bm) >> STD_VS_MFG_FLAG_bp),
 1013792:	f3c2 22c0 	ubfx	r2, r2, #11, #1
		c1219[instance].count |= (uint16_t)(c1219[instance].c1218_dll->rx_data[SERVICE_INDEX + 7] << 0);
 1013796:	6358      	str	r0, [r3, #52]	; 0x34
		SECURITY_USER_INFO_TYPE user_info = {
 1013798:	f8ad e020 	strh.w	lr, [sp, #32]
		memcpy(&user_info.password, &c1218_apl.password, 20);
 101379c:	688b      	ldr	r3, [r1, #8]
 101379e:	68c8      	ldr	r0, [r1, #12]
		SECURITY_USER_INFO_TYPE user_info = {
 10137a0:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
		memcpy(&user_info.password, &c1218_apl.password, 20);
 10137a4:	684a      	ldr	r2, [r1, #4]
 10137a6:	f8cd 7023 	str.w	r7, [sp, #35]	; 0x23
 10137aa:	690f      	ldr	r7, [r1, #16]
 10137ac:	f8cd 7033 	str.w	r7, [sp, #51]	; 0x33
 10137b0:	f8cd 002f 	str.w	r0, [sp, #47]	; 0x2f
		if ( SECR_APP_bCheck_access_to_read_table(user_info) ) {
 10137b4:	a90e      	add	r1, sp, #56	; 0x38
 10137b6:	e911 0003 	ldmdb	r1, {r0, r1}
 10137ba:	e88d 0003 	stmia.w	sp, {r0, r1}
		memcpy(&user_info.password, &c1218_apl.password, 20);
 10137be:	f8cd 302b 	str.w	r3, [sp, #43]	; 0x2b
 10137c2:	f8cd 2027 	str.w	r2, [sp, #39]	; 0x27
		SECURITY_USER_INFO_TYPE user_info = {
 10137c6:	ab08      	add	r3, sp, #32
		if ( SECR_APP_bCheck_access_to_read_table(user_info) ) {
 10137c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 10137ca:	47b0      	blx	r6
 10137cc:	4607      	mov	r7, r0
 10137ce:	2800      	cmp	r0, #0
 10137d0:	d04e      	beq.n	1013870 <C1219_pread_offset_service+0x200>
			switch ( c1219[instance].table_id ) {
 10137d2:	782e      	ldrb	r6, [r5, #0]
 10137d4:	fb08 4806 	mla	r8, r8, r6, r4
 10137d8:	f8b8 302c 	ldrh.w	r3, [r8, #44]	; 0x2c
 10137dc:	2b33      	cmp	r3, #51	; 0x33
 10137de:	f000 8556 	beq.w	101428e <C1219_pread_offset_service+0xc1e>
 10137e2:	d823      	bhi.n	101382c <C1219_pread_offset_service+0x1bc>
 10137e4:	2b15      	cmp	r3, #21
 10137e6:	f000 856e 	beq.w	10142c6 <C1219_pread_offset_service+0xc56>
 10137ea:	d854      	bhi.n	1013896 <C1219_pread_offset_service+0x226>
 10137ec:	2b0a      	cmp	r3, #10
 10137ee:	f000 855c 	beq.w	10142aa <C1219_pread_offset_service+0xc3a>
 10137f2:	f200 810a 	bhi.w	1013a0a <C1219_pread_offset_service+0x39a>
 10137f6:	2b02      	cmp	r3, #2
 10137f8:	f000 84d8 	beq.w	10141ac <C1219_pread_offset_service+0xb3c>
 10137fc:	f240 8142 	bls.w	1013a84 <C1219_pread_offset_service+0x414>
 1013800:	2b06      	cmp	r3, #6
 1013802:	f000 852b 	beq.w	101425c <C1219_pread_offset_service+0xbec>
 1013806:	2b08      	cmp	r3, #8
 1013808:	f040 81cd 	bne.w	1013ba6 <C1219_pread_offset_service+0x536>
	if ( (c1219_ptr->offset + (uint32_t)c1219_ptr->count) <= c1219_ptr->c1218_dll->st_08_length )
 101380c:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1013810:	fb03 4606 	mla	r6, r3, r6, r4
 1013814:	6870      	ldr	r0, [r6, #4]
 1013816:	6b73      	ldr	r3, [r6, #52]	; 0x34
 1013818:	6b32      	ldr	r2, [r6, #48]	; 0x30
 101381a:	f8b0 11f6 	ldrh.w	r1, [r0, #502]	; 0x1f6
 101381e:	441a      	add	r2, r3
 1013820:	428a      	cmp	r2, r1
 1013822:	f240 85c1 	bls.w	10143a8 <C1219_pread_offset_service+0xd38>
		C1218_send_onp(c1219_ptr->c1218_dll);
 1013826:	4b53      	ldr	r3, [pc, #332]	; (1013974 <C1219_pread_offset_service+0x304>)
 1013828:	4798      	blx	r3
 101382a:	e028      	b.n	101387e <C1219_pread_offset_service+0x20e>
			switch ( c1219[instance].table_id ) {
 101382c:	2b4a      	cmp	r3, #74	; 0x4a
 101382e:	f000 84e9 	beq.w	1014204 <C1219_pread_offset_service+0xb94>
 1013832:	d84e      	bhi.n	10138d2 <C1219_pread_offset_service+0x262>
 1013834:	2b3e      	cmp	r3, #62	; 0x3e
 1013836:	f000 84d7 	beq.w	10141e8 <C1219_pread_offset_service+0xb78>
 101383a:	f240 80ce 	bls.w	10139da <C1219_pread_offset_service+0x36a>
 101383e:	2b46      	cmp	r3, #70	; 0x46
 1013840:	f000 8486 	beq.w	1014150 <C1219_pread_offset_service+0xae0>
 1013844:	f240 8178 	bls.w	1013b38 <C1219_pread_offset_service+0x4c8>
 1013848:	2b48      	cmp	r3, #72	; 0x48
 101384a:	f000 849f 	beq.w	101418c <C1219_pread_offset_service+0xb1c>
 101384e:	f240 848d 	bls.w	101416c <C1219_pread_offset_service+0xafc>
	c1219_ptr->table_size = EVNT_APP_usSt_73_get_size();
 1013852:	4b49      	ldr	r3, [pc, #292]	; (1013978 <C1219_pread_offset_service+0x308>)
 1013854:	4798      	blx	r3
 1013856:	f241 73b4 	movw	r3, #6068	; 0x17b4
 101385a:	fb03 4606 	mla	r6, r3, r6, r4
	c1219_ptr->execute_table_reading = EVNT_APP_bSt_73_execute_table_reading;
 101385e:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1013862:	4946      	ldr	r1, [pc, #280]	; (101397c <C1219_pread_offset_service+0x30c>)
	c1219_ptr->table_size = EVNT_APP_usSt_73_get_size();
 1013864:	8730      	strh	r0, [r6, #56]	; 0x38
	C1219_pread_offset(c1219_ptr);
 1013866:	4b46      	ldr	r3, [pc, #280]	; (1013980 <C1219_pread_offset_service+0x310>)
	c1219_ptr->execute_table_reading = EVNT_APP_bSt_73_execute_table_reading;
 1013868:	50b1      	str	r1, [r6, r2]
	C1219_pread_offset(c1219_ptr);
 101386a:	4630      	mov	r0, r6
 101386c:	4798      	blx	r3
 101386e:	e006      	b.n	101387e <C1219_pread_offset_service+0x20e>
			C1218_send_isc(c1219[instance].c1218_dll);
 1013870:	782b      	ldrb	r3, [r5, #0]
 1013872:	4a44      	ldr	r2, [pc, #272]	; (1013984 <C1219_pread_offset_service+0x314>)
 1013874:	fb08 4803 	mla	r8, r8, r3, r4
 1013878:	f8d8 0004 	ldr.w	r0, [r8, #4]
 101387c:	4790      	blx	r2
		c1219[instance].busy_instance = false;
 101387e:	782a      	ldrb	r2, [r5, #0]
 1013880:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1013884:	fb03 f302 	mul.w	r3, r3, r2
 1013888:	2200      	movs	r2, #0
 101388a:	54e2      	strb	r2, [r4, r3]
}
 101388c:	b00f      	add	sp, #60	; 0x3c
 101388e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1013892:	b004      	add	sp, #16
 1013894:	4770      	bx	lr
			switch ( c1219[instance].table_id ) {
 1013896:	2b1c      	cmp	r3, #28
 1013898:	f000 843e 	beq.w	1014118 <C1219_pread_offset_service+0xaa8>
 101389c:	f240 8084 	bls.w	10139a8 <C1219_pread_offset_service+0x338>
 10138a0:	2b2a      	cmp	r3, #42	; 0x2a
 10138a2:	f000 83df 	beq.w	1014064 <C1219_pread_offset_service+0x9f4>
 10138a6:	f240 8159 	bls.w	1013b5c <C1219_pread_offset_service+0x4ec>
 10138aa:	2b2c      	cmp	r3, #44	; 0x2c
 10138ac:	f000 83f6 	beq.w	101409c <C1219_pread_offset_service+0xa2c>
 10138b0:	f080 8252 	bcs.w	1013d58 <C1219_pread_offset_service+0x6e8>
	c1219_ptr->table_size = SECR_APP_usSt_43_get_size();
 10138b4:	4b34      	ldr	r3, [pc, #208]	; (1013988 <C1219_pread_offset_service+0x318>)
 10138b6:	4798      	blx	r3
 10138b8:	f241 73b4 	movw	r3, #6068	; 0x17b4
 10138bc:	fb03 4606 	mla	r6, r3, r6, r4
	c1219_ptr->execute_table_reading = SECR_APP_bSt_43_execute_table_reading;
 10138c0:	f241 72ac 	movw	r2, #6060	; 0x17ac
 10138c4:	4931      	ldr	r1, [pc, #196]	; (101398c <C1219_pread_offset_service+0x31c>)
	c1219_ptr->table_size = SECR_APP_usSt_43_get_size();
 10138c6:	8730      	strh	r0, [r6, #56]	; 0x38
	C1219_pread_offset(c1219_ptr);
 10138c8:	4b2d      	ldr	r3, [pc, #180]	; (1013980 <C1219_pread_offset_service+0x310>)
	c1219_ptr->execute_table_reading = SECR_APP_bSt_43_execute_table_reading;
 10138ca:	50b1      	str	r1, [r6, r2]
	C1219_pread_offset(c1219_ptr);
 10138cc:	4630      	mov	r0, r6
 10138ce:	4798      	blx	r3
 10138d0:	e7d5      	b.n	101387e <C1219_pread_offset_service+0x20e>
			switch ( c1219[instance].table_id ) {
 10138d2:	f640 0216 	movw	r2, #2070	; 0x816
 10138d6:	4293      	cmp	r3, r2
 10138d8:	f000 8410 	beq.w	10140fc <C1219_pread_offset_service+0xa8c>
 10138dc:	d91f      	bls.n	101391e <C1219_pread_offset_service+0x2ae>
 10138de:	f640 0219 	movw	r2, #2073	; 0x819
 10138e2:	4293      	cmp	r3, r2
 10138e4:	f000 8350 	beq.w	1013f88 <C1219_pread_offset_service+0x918>
 10138e8:	f240 814a 	bls.w	1013b80 <C1219_pread_offset_service+0x510>
 10138ec:	f640 0248 	movw	r2, #2120	; 0x848
 10138f0:	4293      	cmp	r3, r2
 10138f2:	f000 833a 	beq.w	1013f6a <C1219_pread_offset_service+0x8fa>
 10138f6:	f640 0249 	movw	r2, #2121	; 0x849
 10138fa:	4293      	cmp	r3, r2
 10138fc:	f040 82fd 	bne.w	1013efa <C1219_pread_offset_service+0x88a>
	c1219_ptr->table_size = EVNT_APP_usMt_73_get_size();
 1013900:	4b23      	ldr	r3, [pc, #140]	; (1013990 <C1219_pread_offset_service+0x320>)
 1013902:	4798      	blx	r3
 1013904:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1013908:	fb03 4606 	mla	r6, r3, r6, r4
	c1219_ptr->execute_table_reading = EVNT_APP_bMt_73_execute_table_reading;
 101390c:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1013910:	4920      	ldr	r1, [pc, #128]	; (1013994 <C1219_pread_offset_service+0x324>)
	c1219_ptr->table_size = EVNT_APP_usMt_73_get_size();
 1013912:	8730      	strh	r0, [r6, #56]	; 0x38
	C1219_pread_offset(c1219_ptr);
 1013914:	4b1a      	ldr	r3, [pc, #104]	; (1013980 <C1219_pread_offset_service+0x310>)
	c1219_ptr->execute_table_reading = EVNT_APP_bMt_73_execute_table_reading;
 1013916:	50b1      	str	r1, [r6, r2]
	C1219_pread_offset(c1219_ptr);
 1013918:	4630      	mov	r0, r6
 101391a:	4798      	blx	r3
 101391c:	e7af      	b.n	101387e <C1219_pread_offset_service+0x20e>
			switch ( c1219[instance].table_id ) {
 101391e:	f640 0201 	movw	r2, #2049	; 0x801
 1013922:	4293      	cmp	r3, r2
 1013924:	f000 833d 	beq.w	1013fa2 <C1219_pread_offset_service+0x932>
 1013928:	f240 80f4 	bls.w	1013b14 <C1219_pread_offset_service+0x4a4>
 101392c:	f640 0204 	movw	r2, #2052	; 0x804
 1013930:	4293      	cmp	r3, r2
 1013932:	f000 8343 	beq.w	1013fbc <C1219_pread_offset_service+0x94c>
 1013936:	f640 0205 	movw	r2, #2053	; 0x805
 101393a:	4293      	cmp	r3, r2
 101393c:	f040 82c9 	bne.w	1013ed2 <C1219_pread_offset_service+0x862>
	c1219_ptr->table_size = SM_APP_usMt_5_get_size();
 1013940:	4b15      	ldr	r3, [pc, #84]	; (1013998 <C1219_pread_offset_service+0x328>)
 1013942:	4798      	blx	r3
 1013944:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1013948:	fb03 4606 	mla	r6, r3, r6, r4
	c1219_ptr->execute_table_reading = SM_APP_bMt_5_execute_table_reading;
 101394c:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1013950:	4912      	ldr	r1, [pc, #72]	; (101399c <C1219_pread_offset_service+0x32c>)
	c1219_ptr->table_size = SM_APP_usMt_5_get_size();
 1013952:	8730      	strh	r0, [r6, #56]	; 0x38
	C1219_pread_offset(c1219_ptr);
 1013954:	4b0a      	ldr	r3, [pc, #40]	; (1013980 <C1219_pread_offset_service+0x310>)
	c1219_ptr->execute_table_reading = SM_APP_bMt_5_execute_table_reading;
 1013956:	50b1      	str	r1, [r6, r2]
	C1219_pread_offset(c1219_ptr);
 1013958:	4630      	mov	r0, r6
 101395a:	4798      	blx	r3
 101395c:	e78f      	b.n	101387e <C1219_pread_offset_service+0x20e>
 101395e:	bf00      	nop
 1013960:	2001064c 	.word	0x2001064c
 1013964:	20000927 	.word	0x20000927
 1013968:	48004000 	.word	0x48004000
 101396c:	400e0600 	.word	0x400e0600
 1013970:	0102b295 	.word	0x0102b295
 1013974:	010164a5 	.word	0x010164a5
 1013978:	01019571 	.word	0x01019571
 101397c:	01018915 	.word	0x01018915
 1013980:	01010421 	.word	0x01010421
 1013984:	01016485 	.word	0x01016485
 1013988:	0102afed 	.word	0x0102afed
 101398c:	0102af7d 	.word	0x0102af7d
 1013990:	01018d95 	.word	0x01018d95
 1013994:	01018ca5 	.word	0x01018ca5
 1013998:	01020a4d 	.word	0x01020a4d
 101399c:	01020a1d 	.word	0x01020a1d
 10139a0:	20017160 	.word	0x20017160
 10139a4:	01019961 	.word	0x01019961
			switch ( c1219[instance].table_id ) {
 10139a8:	2b18      	cmp	r3, #24
 10139aa:	f000 83c3 	beq.w	1014134 <C1219_pread_offset_service+0xac4>
 10139ae:	f240 809f 	bls.w	1013af0 <C1219_pread_offset_service+0x480>
 10139b2:	2b1a      	cmp	r3, #26
 10139b4:	f000 8392 	beq.w	10140dc <C1219_pread_offset_service+0xa6c>
 10139b8:	f240 8380 	bls.w	10140bc <C1219_pread_offset_service+0xa4c>
	c1219_ptr->table_size = REGS_APP_usSt_27_get_size();
 10139bc:	4bb1      	ldr	r3, [pc, #708]	; (1013c84 <C1219_pread_offset_service+0x614>)
 10139be:	4798      	blx	r3
 10139c0:	f241 73b4 	movw	r3, #6068	; 0x17b4
 10139c4:	fb03 4606 	mla	r6, r3, r6, r4
	c1219_ptr->execute_table_reading = REGS_APP_bSt_27_execute_table_reading;
 10139c8:	f241 72ac 	movw	r2, #6060	; 0x17ac
 10139cc:	49ae      	ldr	r1, [pc, #696]	; (1013c88 <C1219_pread_offset_service+0x618>)
	c1219_ptr->table_size = REGS_APP_usSt_27_get_size();
 10139ce:	8730      	strh	r0, [r6, #56]	; 0x38
	C1219_pread_offset(c1219_ptr);
 10139d0:	4bae      	ldr	r3, [pc, #696]	; (1013c8c <C1219_pread_offset_service+0x61c>)
	c1219_ptr->execute_table_reading = REGS_APP_bSt_27_execute_table_reading;
 10139d2:	50b1      	str	r1, [r6, r2]
	C1219_pread_offset(c1219_ptr);
 10139d4:	4630      	mov	r0, r6
 10139d6:	4798      	blx	r3
 10139d8:	e751      	b.n	101387e <C1219_pread_offset_service+0x20e>
			switch ( c1219[instance].table_id ) {
 10139da:	2b36      	cmp	r3, #54	; 0x36
 10139dc:	f000 8350 	beq.w	1014080 <C1219_pread_offset_service+0xa10>
 10139e0:	d974      	bls.n	1013acc <C1219_pread_offset_service+0x45c>
 10139e2:	2b3c      	cmp	r3, #60	; 0x3c
 10139e4:	f000 83f0 	beq.w	10141c8 <C1219_pread_offset_service+0xb58>
 10139e8:	f240 8103 	bls.w	1013bf2 <C1219_pread_offset_service+0x582>
	c1219_ptr->table_size = LP_APP_usSt_61_get_size();
 10139ec:	4ba8      	ldr	r3, [pc, #672]	; (1013c90 <C1219_pread_offset_service+0x620>)
 10139ee:	4798      	blx	r3
 10139f0:	f241 73b4 	movw	r3, #6068	; 0x17b4
 10139f4:	fb03 4606 	mla	r6, r3, r6, r4
	c1219_ptr->execute_table_reading = LP_APP_bSt_61_execute_table_reading;
 10139f8:	f241 72ac 	movw	r2, #6060	; 0x17ac
 10139fc:	49a5      	ldr	r1, [pc, #660]	; (1013c94 <C1219_pread_offset_service+0x624>)
	c1219_ptr->table_size = LP_APP_usSt_61_get_size();
 10139fe:	8730      	strh	r0, [r6, #56]	; 0x38
	C1219_pread_offset(c1219_ptr);
 1013a00:	4ba2      	ldr	r3, [pc, #648]	; (1013c8c <C1219_pread_offset_service+0x61c>)
	c1219_ptr->execute_table_reading = LP_APP_bSt_61_execute_table_reading;
 1013a02:	50b1      	str	r1, [r6, r2]
	C1219_pread_offset(c1219_ptr);
 1013a04:	4630      	mov	r0, r6
 1013a06:	4798      	blx	r3
 1013a08:	e739      	b.n	101387e <C1219_pread_offset_service+0x20e>
			switch ( c1219[instance].table_id ) {
 1013a0a:	2b0d      	cmp	r3, #13
 1013a0c:	f000 8418 	beq.w	1014240 <C1219_pread_offset_service+0xbd0>
 1013a10:	d94a      	bls.n	1013aa8 <C1219_pread_offset_service+0x438>
 1013a12:	2b10      	cmp	r3, #16
 1013a14:	f000 8404 	beq.w	1014220 <C1219_pread_offset_service+0xbb0>
 1013a18:	2b14      	cmp	r3, #20
 1013a1a:	f040 80fc 	bne.w	1013c16 <C1219_pread_offset_service+0x5a6>
	c1219_ptr->table_size = REGS_APP_usSt_20_get_size();
 1013a1e:	4b9e      	ldr	r3, [pc, #632]	; (1013c98 <C1219_pread_offset_service+0x628>)
 1013a20:	4798      	blx	r3
 1013a22:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1013a26:	fb03 4606 	mla	r6, r3, r6, r4
	c1219_ptr->execute_table_reading = REGS_APP_bSt_20_execute_table_reading;
 1013a2a:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1013a2e:	499b      	ldr	r1, [pc, #620]	; (1013c9c <C1219_pread_offset_service+0x62c>)
	c1219_ptr->table_size = REGS_APP_usSt_20_get_size();
 1013a30:	8730      	strh	r0, [r6, #56]	; 0x38
	C1219_pread_offset(c1219_ptr);
 1013a32:	4b96      	ldr	r3, [pc, #600]	; (1013c8c <C1219_pread_offset_service+0x61c>)
	c1219_ptr->execute_table_reading = REGS_APP_bSt_20_execute_table_reading;
 1013a34:	50b1      	str	r1, [r6, r2]
	C1219_pread_offset(c1219_ptr);
 1013a36:	4630      	mov	r0, r6
 1013a38:	4798      	blx	r3
 1013a3a:	e720      	b.n	101387e <C1219_pread_offset_service+0x20e>
	for ( instance = 0; instance < NBR_C1219_INSTANCES; instance++ ) {
 1013a3c:	2302      	movs	r3, #2
		if (c1219[instance].busy_instance == false) break;
 1013a3e:	461f      	mov	r7, r3
 1013a40:	702b      	strb	r3, [r5, #0]
 1013a42:	e642      	b.n	10136ca <C1219_pread_offset_service+0x5a>
	for ( instance = 0; instance < NBR_C1219_INSTANCES; instance++ ) {
 1013a44:	2303      	movs	r3, #3
		if (c1219[instance].busy_instance == false) break;
 1013a46:	461f      	mov	r7, r3
 1013a48:	702b      	strb	r3, [r5, #0]
 1013a4a:	e63e      	b.n	10136ca <C1219_pread_offset_service+0x5a>
			EVNT_APP_vRegister_event(END_DEVICE_ACCESSED_FOR_READ_OP, 0, false, c1218_apl.user_id, rtc.utc_timestamp);
 1013a4c:	f8da 3004 	ldr.w	r3, [sl, #4]
 1013a50:	9300      	str	r3, [sp, #0]
 1013a52:	2200      	movs	r2, #0
 1013a54:	4643      	mov	r3, r8
 1013a56:	4611      	mov	r1, r2
 1013a58:	2014      	movs	r0, #20
 1013a5a:	47d8      	blx	fp
 1013a5c:	782b      	ldrb	r3, [r5, #0]
 1013a5e:	fb09 4903 	mla	r9, r9, r3, r4
 1013a62:	f8d9 1004 	ldr.w	r1, [r9, #4]
 1013a66:	e660      	b.n	101372a <C1219_pread_offset_service+0xba>
			EVNT_APP_vRegister_event(END_DEVICE_ACCESSED_FOR_READ_NIC, 0, false, c1218_apl.user_id, rtc.utc_timestamp);
 1013a68:	f8da 3004 	ldr.w	r3, [sl, #4]
 1013a6c:	9300      	str	r3, [sp, #0]
 1013a6e:	2200      	movs	r2, #0
 1013a70:	4643      	mov	r3, r8
 1013a72:	4611      	mov	r1, r2
 1013a74:	2015      	movs	r0, #21
 1013a76:	47d8      	blx	fp
 1013a78:	782b      	ldrb	r3, [r5, #0]
 1013a7a:	fb09 4903 	mla	r9, r9, r3, r4
 1013a7e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 1013a82:	e652      	b.n	101372a <C1219_pread_offset_service+0xba>
			switch ( c1219[instance].table_id ) {
 1013a84:	2b00      	cmp	r3, #0
 1013a86:	f040 80d8 	bne.w	1013c3a <C1219_pread_offset_service+0x5ca>
	c1219_ptr->table_size = GRAL_APP_usSt_0_get_size();
 1013a8a:	4b85      	ldr	r3, [pc, #532]	; (1013ca0 <C1219_pread_offset_service+0x630>)
 1013a8c:	4798      	blx	r3
 1013a8e:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1013a92:	fb03 4606 	mla	r6, r3, r6, r4
	c1219_ptr->execute_table_reading = GRAL_APP_bSt_0_execute_table_reading;
 1013a96:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1013a9a:	4982      	ldr	r1, [pc, #520]	; (1013ca4 <C1219_pread_offset_service+0x634>)
	c1219_ptr->table_size = GRAL_APP_usSt_0_get_size();
 1013a9c:	8730      	strh	r0, [r6, #56]	; 0x38
	C1219_pread_offset(c1219_ptr);
 1013a9e:	4b7b      	ldr	r3, [pc, #492]	; (1013c8c <C1219_pread_offset_service+0x61c>)
	c1219_ptr->execute_table_reading = GRAL_APP_bSt_0_execute_table_reading;
 1013aa0:	50b1      	str	r1, [r6, r2]
	C1219_pread_offset(c1219_ptr);
 1013aa2:	4630      	mov	r0, r6
 1013aa4:	4798      	blx	r3
 1013aa6:	e6ea      	b.n	101387e <C1219_pread_offset_service+0x20e>
			switch ( c1219[instance].table_id ) {
 1013aa8:	2b0b      	cmp	r3, #11
 1013aaa:	f040 8143 	bne.w	1013d34 <C1219_pread_offset_service+0x6c4>
	c1219_ptr->table_size = REGS_APP_usSt_11_get_size();
 1013aae:	4b7e      	ldr	r3, [pc, #504]	; (1013ca8 <C1219_pread_offset_service+0x638>)
 1013ab0:	4798      	blx	r3
 1013ab2:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1013ab6:	fb03 4606 	mla	r6, r3, r6, r4
	c1219_ptr->execute_table_reading = REGS_APP_bSt_11_execute_table_reading;
 1013aba:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1013abe:	497b      	ldr	r1, [pc, #492]	; (1013cac <C1219_pread_offset_service+0x63c>)
	c1219_ptr->table_size = REGS_APP_usSt_11_get_size();
 1013ac0:	8730      	strh	r0, [r6, #56]	; 0x38
	C1219_pread_offset(c1219_ptr);
 1013ac2:	4b72      	ldr	r3, [pc, #456]	; (1013c8c <C1219_pread_offset_service+0x61c>)
	c1219_ptr->execute_table_reading = REGS_APP_bSt_11_execute_table_reading;
 1013ac4:	50b1      	str	r1, [r6, r2]
	C1219_pread_offset(c1219_ptr);
 1013ac6:	4630      	mov	r0, r6
 1013ac8:	4798      	blx	r3
 1013aca:	e6d8      	b.n	101387e <C1219_pread_offset_service+0x20e>
			switch ( c1219[instance].table_id ) {
 1013acc:	2b34      	cmp	r3, #52	; 0x34
 1013ace:	f040 80c6 	bne.w	1013c5e <C1219_pread_offset_service+0x5ee>
	c1219_ptr->table_size = TOU_APP_usSt_52_get_size();
 1013ad2:	4b77      	ldr	r3, [pc, #476]	; (1013cb0 <C1219_pread_offset_service+0x640>)
 1013ad4:	4798      	blx	r3
 1013ad6:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1013ada:	fb03 4606 	mla	r6, r3, r6, r4
	c1219_ptr->execute_table_reading = TOU_APP_bSt_52_execute_table_reading;
 1013ade:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1013ae2:	4974      	ldr	r1, [pc, #464]	; (1013cb4 <C1219_pread_offset_service+0x644>)
	c1219_ptr->table_size = TOU_APP_usSt_52_get_size();
 1013ae4:	8730      	strh	r0, [r6, #56]	; 0x38
	C1219_pread_offset(c1219_ptr);
 1013ae6:	4b69      	ldr	r3, [pc, #420]	; (1013c8c <C1219_pread_offset_service+0x61c>)
	c1219_ptr->execute_table_reading = TOU_APP_bSt_52_execute_table_reading;
 1013ae8:	50b1      	str	r1, [r6, r2]
	C1219_pread_offset(c1219_ptr);
 1013aea:	4630      	mov	r0, r6
 1013aec:	4798      	blx	r3
 1013aee:	e6c6      	b.n	101387e <C1219_pread_offset_service+0x20e>
			switch ( c1219[instance].table_id ) {
 1013af0:	2b16      	cmp	r3, #22
 1013af2:	f040 8228 	bne.w	1013f46 <C1219_pread_offset_service+0x8d6>
	c1219_ptr->table_size = REGS_APP_usSt_22_get_size();
 1013af6:	4b70      	ldr	r3, [pc, #448]	; (1013cb8 <C1219_pread_offset_service+0x648>)
 1013af8:	4798      	blx	r3
 1013afa:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1013afe:	fb03 4606 	mla	r6, r3, r6, r4
	c1219_ptr->execute_table_reading = REGS_APP_bSt_22_execute_table_reading;
 1013b02:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1013b06:	496d      	ldr	r1, [pc, #436]	; (1013cbc <C1219_pread_offset_service+0x64c>)
	c1219_ptr->table_size = REGS_APP_usSt_22_get_size();
 1013b08:	8730      	strh	r0, [r6, #56]	; 0x38
	C1219_pread_offset(c1219_ptr);
 1013b0a:	4b60      	ldr	r3, [pc, #384]	; (1013c8c <C1219_pread_offset_service+0x61c>)
	c1219_ptr->execute_table_reading = REGS_APP_bSt_22_execute_table_reading;
 1013b0c:	50b1      	str	r1, [r6, r2]
	C1219_pread_offset(c1219_ptr);
 1013b0e:	4630      	mov	r0, r6
 1013b10:	4798      	blx	r3
 1013b12:	e6b4      	b.n	101387e <C1219_pread_offset_service+0x20e>
			switch ( c1219[instance].table_id ) {
 1013b14:	2b4b      	cmp	r3, #75	; 0x4b
 1013b16:	f040 80fb 	bne.w	1013d10 <C1219_pread_offset_service+0x6a0>
	c1219_ptr->table_size = EVNT_APP_usSt_75_get_size();
 1013b1a:	4b69      	ldr	r3, [pc, #420]	; (1013cc0 <C1219_pread_offset_service+0x650>)
 1013b1c:	4798      	blx	r3
 1013b1e:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1013b22:	fb03 4606 	mla	r6, r3, r6, r4
	c1219_ptr->execute_table_reading = EVNT_APP_bSt_75_execute_table_reading;
 1013b26:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1013b2a:	4966      	ldr	r1, [pc, #408]	; (1013cc4 <C1219_pread_offset_service+0x654>)
	c1219_ptr->table_size = EVNT_APP_usSt_75_get_size();
 1013b2c:	8730      	strh	r0, [r6, #56]	; 0x38
	C1219_pread_offset(c1219_ptr);
 1013b2e:	4b57      	ldr	r3, [pc, #348]	; (1013c8c <C1219_pread_offset_service+0x61c>)
	c1219_ptr->execute_table_reading = EVNT_APP_bSt_75_execute_table_reading;
 1013b30:	50b1      	str	r1, [r6, r2]
	C1219_pread_offset(c1219_ptr);
 1013b32:	4630      	mov	r0, r6
 1013b34:	4798      	blx	r3
 1013b36:	e6a2      	b.n	101387e <C1219_pread_offset_service+0x20e>
			switch ( c1219[instance].table_id ) {
 1013b38:	2b3f      	cmp	r3, #63	; 0x3f
 1013b3a:	f040 811f 	bne.w	1013d7c <C1219_pread_offset_service+0x70c>
	c1219_ptr->table_size = LP_APP_usSt_63_get_size();
 1013b3e:	4b62      	ldr	r3, [pc, #392]	; (1013cc8 <C1219_pread_offset_service+0x658>)
 1013b40:	4798      	blx	r3
 1013b42:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1013b46:	fb03 4606 	mla	r6, r3, r6, r4
	c1219_ptr->execute_table_reading = LP_APP_bSt_63_execute_table_reading;
 1013b4a:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1013b4e:	495f      	ldr	r1, [pc, #380]	; (1013ccc <C1219_pread_offset_service+0x65c>)
	c1219_ptr->table_size = LP_APP_usSt_63_get_size();
 1013b50:	8730      	strh	r0, [r6, #56]	; 0x38
	C1219_pread_offset(c1219_ptr);
 1013b52:	4b4e      	ldr	r3, [pc, #312]	; (1013c8c <C1219_pread_offset_service+0x61c>)
	c1219_ptr->execute_table_reading = LP_APP_bSt_63_execute_table_reading;
 1013b54:	50b1      	str	r1, [r6, r2]
	C1219_pread_offset(c1219_ptr);
 1013b56:	4630      	mov	r0, r6
 1013b58:	4798      	blx	r3
 1013b5a:	e690      	b.n	101387e <C1219_pread_offset_service+0x20e>
			switch ( c1219[instance].table_id ) {
 1013b5c:	2b28      	cmp	r3, #40	; 0x28
 1013b5e:	f040 81e0 	bne.w	1013f22 <C1219_pread_offset_service+0x8b2>
	c1219_ptr->table_size = SECR_APP_usSt_40_get_size();
 1013b62:	4b5b      	ldr	r3, [pc, #364]	; (1013cd0 <C1219_pread_offset_service+0x660>)
 1013b64:	4798      	blx	r3
 1013b66:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1013b6a:	fb03 4606 	mla	r6, r3, r6, r4
	c1219_ptr->execute_table_reading = SECR_APP_bSt_40_execute_table_reading;
 1013b6e:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1013b72:	4958      	ldr	r1, [pc, #352]	; (1013cd4 <C1219_pread_offset_service+0x664>)
	c1219_ptr->table_size = SECR_APP_usSt_40_get_size();
 1013b74:	8730      	strh	r0, [r6, #56]	; 0x38
	C1219_pread_offset(c1219_ptr);
 1013b76:	4b45      	ldr	r3, [pc, #276]	; (1013c8c <C1219_pread_offset_service+0x61c>)
	c1219_ptr->execute_table_reading = SECR_APP_bSt_40_execute_table_reading;
 1013b78:	50b1      	str	r1, [r6, r2]
	C1219_pread_offset(c1219_ptr);
 1013b7a:	4630      	mov	r0, r6
 1013b7c:	4798      	blx	r3
 1013b7e:	e67e      	b.n	101387e <C1219_pread_offset_service+0x20e>
			switch ( c1219[instance].table_id ) {
 1013b80:	f640 0217 	movw	r2, #2071	; 0x817
 1013b84:	4293      	cmp	r3, r2
 1013b86:	d120      	bne.n	1013bca <C1219_pread_offset_service+0x55a>
	c1219_ptr->table_size = SM_APP_usMt_23_get_size();
 1013b88:	4b53      	ldr	r3, [pc, #332]	; (1013cd8 <C1219_pread_offset_service+0x668>)
 1013b8a:	4798      	blx	r3
 1013b8c:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1013b90:	fb03 4606 	mla	r6, r3, r6, r4
	c1219_ptr->execute_table_reading = SM_APP_bMt_23_execute_table_reading;
 1013b94:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1013b98:	4950      	ldr	r1, [pc, #320]	; (1013cdc <C1219_pread_offset_service+0x66c>)
	c1219_ptr->table_size = SM_APP_usMt_23_get_size();
 1013b9a:	8730      	strh	r0, [r6, #56]	; 0x38
	C1219_pread_offset(c1219_ptr);
 1013b9c:	4b3b      	ldr	r3, [pc, #236]	; (1013c8c <C1219_pread_offset_service+0x61c>)
	c1219_ptr->execute_table_reading = SM_APP_bMt_23_execute_table_reading;
 1013b9e:	50b1      	str	r1, [r6, r2]
	C1219_pread_offset(c1219_ptr);
 1013ba0:	4630      	mov	r0, r6
 1013ba2:	4798      	blx	r3
 1013ba4:	e66b      	b.n	101387e <C1219_pread_offset_service+0x20e>
			switch ( c1219[instance].table_id ) {
 1013ba6:	2b03      	cmp	r3, #3
 1013ba8:	f040 8368 	bne.w	101427c <C1219_pread_offset_service+0xc0c>
	c1219_ptr->table_size = GRAL_APP_usSt_3_get_size();
 1013bac:	4b4c      	ldr	r3, [pc, #304]	; (1013ce0 <C1219_pread_offset_service+0x670>)
 1013bae:	4798      	blx	r3
 1013bb0:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1013bb4:	fb03 4606 	mla	r6, r3, r6, r4
	c1219_ptr->execute_table_reading = GRAL_APP_bSt_3_execute_table_reading;
 1013bb8:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1013bbc:	4949      	ldr	r1, [pc, #292]	; (1013ce4 <C1219_pread_offset_service+0x674>)
	c1219_ptr->table_size = GRAL_APP_usSt_3_get_size();
 1013bbe:	8730      	strh	r0, [r6, #56]	; 0x38
	C1219_pread_offset(c1219_ptr);
 1013bc0:	4b32      	ldr	r3, [pc, #200]	; (1013c8c <C1219_pread_offset_service+0x61c>)
	c1219_ptr->execute_table_reading = GRAL_APP_bSt_3_execute_table_reading;
 1013bc2:	50b1      	str	r1, [r6, r2]
	C1219_pread_offset(c1219_ptr);
 1013bc4:	4630      	mov	r0, r6
 1013bc6:	4798      	blx	r3
 1013bc8:	e659      	b.n	101387e <C1219_pread_offset_service+0x20e>
			switch ( c1219[instance].table_id ) {
 1013bca:	f640 0218 	movw	r2, #2072	; 0x818
 1013bce:	4293      	cmp	r3, r2
 1013bd0:	f040 8354 	bne.w	101427c <C1219_pread_offset_service+0xc0c>
	c1219_ptr->table_size = SM_APP_usMt_24_get_size();
 1013bd4:	4b44      	ldr	r3, [pc, #272]	; (1013ce8 <C1219_pread_offset_service+0x678>)
 1013bd6:	4798      	blx	r3
 1013bd8:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1013bdc:	fb03 4606 	mla	r6, r3, r6, r4
	c1219_ptr->execute_table_reading = SM_APP_bMt_24_execute_table_reading;
 1013be0:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1013be4:	4941      	ldr	r1, [pc, #260]	; (1013cec <C1219_pread_offset_service+0x67c>)
	c1219_ptr->table_size = SM_APP_usMt_24_get_size();
 1013be6:	8730      	strh	r0, [r6, #56]	; 0x38
	C1219_pread_offset(c1219_ptr);
 1013be8:	4b28      	ldr	r3, [pc, #160]	; (1013c8c <C1219_pread_offset_service+0x61c>)
	c1219_ptr->execute_table_reading = SM_APP_bMt_24_execute_table_reading;
 1013bea:	50b1      	str	r1, [r6, r2]
	C1219_pread_offset(c1219_ptr);
 1013bec:	4630      	mov	r0, r6
 1013bee:	4798      	blx	r3
 1013bf0:	e645      	b.n	101387e <C1219_pread_offset_service+0x20e>
			switch ( c1219[instance].table_id ) {
 1013bf2:	2b37      	cmp	r3, #55	; 0x37
 1013bf4:	f040 8342 	bne.w	101427c <C1219_pread_offset_service+0xc0c>
	c1219_ptr->table_size = TOU_APP_usSt_55_get_size();
 1013bf8:	4b3d      	ldr	r3, [pc, #244]	; (1013cf0 <C1219_pread_offset_service+0x680>)
 1013bfa:	4798      	blx	r3
 1013bfc:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1013c00:	fb03 4606 	mla	r6, r3, r6, r4
	c1219_ptr->execute_table_reading = TOU_APP_bSt_55_execute_table_reading;
 1013c04:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1013c08:	493a      	ldr	r1, [pc, #232]	; (1013cf4 <C1219_pread_offset_service+0x684>)
	c1219_ptr->table_size = TOU_APP_usSt_55_get_size();
 1013c0a:	8730      	strh	r0, [r6, #56]	; 0x38
	C1219_pread_offset(c1219_ptr);
 1013c0c:	4b1f      	ldr	r3, [pc, #124]	; (1013c8c <C1219_pread_offset_service+0x61c>)
	c1219_ptr->execute_table_reading = TOU_APP_bSt_55_execute_table_reading;
 1013c0e:	50b1      	str	r1, [r6, r2]
	C1219_pread_offset(c1219_ptr);
 1013c10:	4630      	mov	r0, r6
 1013c12:	4798      	blx	r3
 1013c14:	e633      	b.n	101387e <C1219_pread_offset_service+0x20e>
			switch ( c1219[instance].table_id ) {
 1013c16:	2b0f      	cmp	r3, #15
 1013c18:	f040 8330 	bne.w	101427c <C1219_pread_offset_service+0xc0c>
	c1219_ptr->table_size = REGS_APP_usSt_15_get_size();
 1013c1c:	4b36      	ldr	r3, [pc, #216]	; (1013cf8 <C1219_pread_offset_service+0x688>)
 1013c1e:	4798      	blx	r3
 1013c20:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1013c24:	fb03 4606 	mla	r6, r3, r6, r4
	c1219_ptr->execute_table_reading = REGS_APP_bSt_15_execute_table_reading;
 1013c28:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1013c2c:	4933      	ldr	r1, [pc, #204]	; (1013cfc <C1219_pread_offset_service+0x68c>)
	c1219_ptr->table_size = REGS_APP_usSt_15_get_size();
 1013c2e:	8730      	strh	r0, [r6, #56]	; 0x38
	C1219_pread_offset(c1219_ptr);
 1013c30:	4b16      	ldr	r3, [pc, #88]	; (1013c8c <C1219_pread_offset_service+0x61c>)
	c1219_ptr->execute_table_reading = REGS_APP_bSt_15_execute_table_reading;
 1013c32:	50b1      	str	r1, [r6, r2]
	C1219_pread_offset(c1219_ptr);
 1013c34:	4630      	mov	r0, r6
 1013c36:	4798      	blx	r3
 1013c38:	e621      	b.n	101387e <C1219_pread_offset_service+0x20e>
			switch ( c1219[instance].table_id ) {
 1013c3a:	2b01      	cmp	r3, #1
 1013c3c:	f040 831e 	bne.w	101427c <C1219_pread_offset_service+0xc0c>
	c1219_ptr->table_size = GRAL_APP_usSt_1_get_size();
 1013c40:	4b2f      	ldr	r3, [pc, #188]	; (1013d00 <C1219_pread_offset_service+0x690>)
 1013c42:	4798      	blx	r3
 1013c44:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1013c48:	fb03 4606 	mla	r6, r3, r6, r4
	c1219_ptr->execute_table_reading = GRAL_APP_bSt_1_execute_table_reading;
 1013c4c:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1013c50:	492c      	ldr	r1, [pc, #176]	; (1013d04 <C1219_pread_offset_service+0x694>)
	c1219_ptr->table_size = GRAL_APP_usSt_1_get_size();
 1013c52:	8730      	strh	r0, [r6, #56]	; 0x38
	C1219_pread_offset(c1219_ptr);
 1013c54:	4b0d      	ldr	r3, [pc, #52]	; (1013c8c <C1219_pread_offset_service+0x61c>)
	c1219_ptr->execute_table_reading = GRAL_APP_bSt_1_execute_table_reading;
 1013c56:	50b1      	str	r1, [r6, r2]
	C1219_pread_offset(c1219_ptr);
 1013c58:	4630      	mov	r0, r6
 1013c5a:	4798      	blx	r3
 1013c5c:	e60f      	b.n	101387e <C1219_pread_offset_service+0x20e>
			switch ( c1219[instance].table_id ) {
 1013c5e:	2b35      	cmp	r3, #53	; 0x35
 1013c60:	f040 830c 	bne.w	101427c <C1219_pread_offset_service+0xc0c>
	c1219_ptr->table_size = TOU_APP_usSt_53_get_size();
 1013c64:	4b28      	ldr	r3, [pc, #160]	; (1013d08 <C1219_pread_offset_service+0x698>)
 1013c66:	4798      	blx	r3
 1013c68:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1013c6c:	fb03 4606 	mla	r6, r3, r6, r4
	c1219_ptr->execute_table_reading = TOU_APP_bSt_53_execute_table_reading;
 1013c70:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1013c74:	4925      	ldr	r1, [pc, #148]	; (1013d0c <C1219_pread_offset_service+0x69c>)
	c1219_ptr->table_size = TOU_APP_usSt_53_get_size();
 1013c76:	8730      	strh	r0, [r6, #56]	; 0x38
	C1219_pread_offset(c1219_ptr);
 1013c78:	4b04      	ldr	r3, [pc, #16]	; (1013c8c <C1219_pread_offset_service+0x61c>)
	c1219_ptr->execute_table_reading = TOU_APP_bSt_53_execute_table_reading;
 1013c7a:	50b1      	str	r1, [r6, r2]
	C1219_pread_offset(c1219_ptr);
 1013c7c:	4630      	mov	r0, r6
 1013c7e:	4798      	blx	r3
 1013c80:	e5fd      	b.n	101387e <C1219_pread_offset_service+0x20e>
 1013c82:	bf00      	nop
 1013c84:	01028701 	.word	0x01028701
 1013c88:	01028639 	.word	0x01028639
 1013c8c:	01010421 	.word	0x01010421
 1013c90:	0101b65d 	.word	0x0101b65d
 1013c94:	0101b611 	.word	0x0101b611
 1013c98:	01026b71 	.word	0x01026b71
 1013c9c:	01026b41 	.word	0x01026b41
 1013ca0:	0101a291 	.word	0x0101a291
 1013ca4:	0101a52d 	.word	0x0101a52d
 1013ca8:	01026711 	.word	0x01026711
 1013cac:	01026671 	.word	0x01026671
 1013cb0:	0102bf75 	.word	0x0102bf75
 1013cb4:	0102bf29 	.word	0x0102bf29
 1013cb8:	0102701d 	.word	0x0102701d
 1013cbc:	01026f41 	.word	0x01026f41
 1013cc0:	01019531 	.word	0x01019531
 1013cc4:	010193a1 	.word	0x010193a1
 1013cc8:	0101bb25 	.word	0x0101bb25
 1013ccc:	0101bacd 	.word	0x0101bacd
 1013cd0:	0102aa0d 	.word	0x0102aa0d
 1013cd4:	0102a9f1 	.word	0x0102a9f1
 1013cd8:	01020781 	.word	0x01020781
 1013cdc:	010206d9 	.word	0x010206d9
 1013ce0:	01019dd1 	.word	0x01019dd1
 1013ce4:	01019d91 	.word	0x01019d91
 1013ce8:	01021119 	.word	0x01021119
 1013cec:	01020ed9 	.word	0x01020ed9
 1013cf0:	0102c539 	.word	0x0102c539
 1013cf4:	0102c4ad 	.word	0x0102c4ad
 1013cf8:	01026a69 	.word	0x01026a69
 1013cfc:	0102698d 	.word	0x0102698d
 1013d00:	01019c25 	.word	0x01019c25
 1013d04:	01019bc9 	.word	0x01019bc9
 1013d08:	0102c0b9 	.word	0x0102c0b9
 1013d0c:	0102c039 	.word	0x0102c039
			switch ( c1219[instance].table_id ) {
 1013d10:	2b4c      	cmp	r3, #76	; 0x4c
 1013d12:	f040 82b3 	bne.w	101427c <C1219_pread_offset_service+0xc0c>
	c1219_ptr->table_size = EVNT_APP_usSt_76_get_size();
 1013d16:	4bb1      	ldr	r3, [pc, #708]	; (1013fdc <C1219_pread_offset_service+0x96c>)
 1013d18:	4798      	blx	r3
 1013d1a:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1013d1e:	fb03 4606 	mla	r6, r3, r6, r4
	c1219_ptr->execute_table_reading = EVNT_APP_bSt_76_execute_table_reading;
 1013d22:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1013d26:	49ae      	ldr	r1, [pc, #696]	; (1013fe0 <C1219_pread_offset_service+0x970>)
	c1219_ptr->table_size = EVNT_APP_usSt_76_get_size();
 1013d28:	8730      	strh	r0, [r6, #56]	; 0x38
	C1219_pread_offset(c1219_ptr);
 1013d2a:	4bae      	ldr	r3, [pc, #696]	; (1013fe4 <C1219_pread_offset_service+0x974>)
	c1219_ptr->execute_table_reading = EVNT_APP_bSt_76_execute_table_reading;
 1013d2c:	50b1      	str	r1, [r6, r2]
	C1219_pread_offset(c1219_ptr);
 1013d2e:	4630      	mov	r0, r6
 1013d30:	4798      	blx	r3
 1013d32:	e5a4      	b.n	101387e <C1219_pread_offset_service+0x20e>
			switch ( c1219[instance].table_id ) {
 1013d34:	2b0c      	cmp	r3, #12
 1013d36:	f040 82a1 	bne.w	101427c <C1219_pread_offset_service+0xc0c>
	c1219_ptr->table_size = REGS_APP_usSt_12_get_size();
 1013d3a:	4bab      	ldr	r3, [pc, #684]	; (1013fe8 <C1219_pread_offset_service+0x978>)
 1013d3c:	4798      	blx	r3
 1013d3e:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1013d42:	fb03 4606 	mla	r6, r3, r6, r4
	c1219_ptr->execute_table_reading = REGS_APP_bSt_12_execute_table_reading;
 1013d46:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1013d4a:	49a8      	ldr	r1, [pc, #672]	; (1013fec <C1219_pread_offset_service+0x97c>)
	c1219_ptr->table_size = REGS_APP_usSt_12_get_size();
 1013d4c:	8730      	strh	r0, [r6, #56]	; 0x38
	C1219_pread_offset(c1219_ptr);
 1013d4e:	4ba5      	ldr	r3, [pc, #660]	; (1013fe4 <C1219_pread_offset_service+0x974>)
	c1219_ptr->execute_table_reading = REGS_APP_bSt_12_execute_table_reading;
 1013d50:	50b1      	str	r1, [r6, r2]
	C1219_pread_offset(c1219_ptr);
 1013d52:	4630      	mov	r0, r6
 1013d54:	4798      	blx	r3
 1013d56:	e592      	b.n	101387e <C1219_pread_offset_service+0x20e>
			switch ( c1219[instance].table_id ) {
 1013d58:	2b32      	cmp	r3, #50	; 0x32
 1013d5a:	f040 828f 	bne.w	101427c <C1219_pread_offset_service+0xc0c>
	c1219_ptr->table_size = TOU_APP_sSt_50_get_size();
 1013d5e:	4ba4      	ldr	r3, [pc, #656]	; (1013ff0 <C1219_pread_offset_service+0x980>)
 1013d60:	4798      	blx	r3
 1013d62:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1013d66:	fb03 4606 	mla	r6, r3, r6, r4
	c1219_ptr->execute_table_reading = TOU_APP_st_50_execute_table_reading;
 1013d6a:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1013d6e:	49a1      	ldr	r1, [pc, #644]	; (1013ff4 <C1219_pread_offset_service+0x984>)
	c1219_ptr->table_size = TOU_APP_sSt_50_get_size();
 1013d70:	8730      	strh	r0, [r6, #56]	; 0x38
	C1219_pread_offset(c1219_ptr);
 1013d72:	4b9c      	ldr	r3, [pc, #624]	; (1013fe4 <C1219_pread_offset_service+0x974>)
	c1219_ptr->execute_table_reading = TOU_APP_st_50_execute_table_reading;
 1013d74:	50b1      	str	r1, [r6, r2]
	C1219_pread_offset(c1219_ptr);
 1013d76:	4630      	mov	r0, r6
 1013d78:	4798      	blx	r3
 1013d7a:	e580      	b.n	101387e <C1219_pread_offset_service+0x20e>
			switch ( c1219[instance].table_id ) {
 1013d7c:	2b40      	cmp	r3, #64	; 0x40
 1013d7e:	f040 827d 	bne.w	101427c <C1219_pread_offset_service+0xc0c>
	uint32_t st_64_size = LP_APP_ulSt_64_get_size();
 1013d82:	4b9d      	ldr	r3, [pc, #628]	; (1013ff8 <C1219_pread_offset_service+0x988>)
 1013d84:	4798      	blx	r3
	if ( ( (c1219_ptr->offset + c1219_ptr->count) <= st_64_size ) && ( c1219_ptr->count <= (C1218_DLL_SIZE * C1218_NUM_PACKETS) ) )
 1013d86:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1013d8a:	fb03 4306 	mla	r3, r3, r6, r4
 1013d8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 1013d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 1013d92:	9205      	str	r2, [sp, #20]
 1013d94:	eb02 0b03 	add.w	fp, r2, r3
 1013d98:	4558      	cmp	r0, fp
 1013d9a:	f0c0 82a2 	bcc.w	10142e2 <C1219_pread_offset_service+0xc72>
 1013d9e:	f641 1284 	movw	r2, #6532	; 0x1984
 1013da2:	4293      	cmp	r3, r2
 1013da4:	f200 829d 	bhi.w	10142e2 <C1219_pread_offset_service+0xc72>
		block_size = st_64_size/st_61.nbr_blks_set1;
 1013da8:	4b94      	ldr	r3, [pc, #592]	; (1013ffc <C1219_pread_offset_service+0x98c>)
 1013daa:	4a95      	ldr	r2, [pc, #596]	; (1014000 <C1219_pread_offset_service+0x990>)
 1013dac:	8919      	ldrh	r1, [r3, #8]
 1013dae:	fbb0 f0f1 	udiv	r0, r0, r1
 1013db2:	8010      	strh	r0, [r2, #0]
		for ( i = 0; i < st_61.nbr_blks_set1; i++ )
 1013db4:	4a93      	ldr	r2, [pc, #588]	; (1014004 <C1219_pread_offset_service+0x994>)
 1013db6:	f8df 82a8 	ldr.w	r8, [pc, #680]	; 1014060 <C1219_pread_offset_service+0x9f0>
 1013dba:	2300      	movs	r3, #0
 1013dbc:	8013      	strh	r3, [r2, #0]
 1013dbe:	4a92      	ldr	r2, [pc, #584]	; (1014008 <C1219_pread_offset_service+0x998>)
 1013dc0:	2900      	cmp	r1, #0
 1013dc2:	d037      	beq.n	1013e34 <C1219_pread_offset_service+0x7c4>
 1013dc4:	b280      	uxth	r0, r0
 1013dc6:	f8b2 c000 	ldrh.w	ip, [r2]
 1013dca:	f8b8 9000 	ldrh.w	r9, [r8]
 1013dce:	9006      	str	r0, [sp, #24]
 1013dd0:	4686      	mov	lr, r0
 1013dd2:	9607      	str	r6, [sp, #28]
 1013dd4:	469a      	mov	sl, r3
 1013dd6:	4646      	mov	r6, r8
 1013dd8:	9303      	str	r3, [sp, #12]
 1013dda:	9304      	str	r3, [sp, #16]
 1013ddc:	4618      	mov	r0, r3
 1013dde:	4690      	mov	r8, r2
			if ( (c1219_ptr->offset >= (i + 0)*block_size ) && (c1219_ptr->offset <= (i + 1)*block_size ) ) { block_start = i; }
 1013de0:	9a05      	ldr	r2, [sp, #20]
 1013de2:	429a      	cmp	r2, r3
 1013de4:	f10a 0a01 	add.w	sl, sl, #1
 1013de8:	d306      	bcc.n	1013df8 <C1219_pread_offset_service+0x788>
 1013dea:	4572      	cmp	r2, lr
 1013dec:	9a04      	ldr	r2, [sp, #16]
 1013dee:	bf98      	it	ls
 1013df0:	463a      	movls	r2, r7
 1013df2:	9204      	str	r2, [sp, #16]
 1013df4:	bf98      	it	ls
 1013df6:	4681      	movls	r9, r0
 1013df8:	9a06      	ldr	r2, [sp, #24]
			if ( ( (c1219_ptr->offset + c1219_ptr->count) > (i + 0)*block_size ) && ( (c1219_ptr->offset + c1219_ptr->count) <= (i + 1)*block_size ) ) { block_end = i; }
 1013dfa:	459b      	cmp	fp, r3
 1013dfc:	4413      	add	r3, r2
 1013dfe:	d906      	bls.n	1013e0e <C1219_pread_offset_service+0x79e>
 1013e00:	45f3      	cmp	fp, lr
 1013e02:	9a03      	ldr	r2, [sp, #12]
 1013e04:	bf98      	it	ls
 1013e06:	463a      	movls	r2, r7
 1013e08:	9203      	str	r2, [sp, #12]
 1013e0a:	bf98      	it	ls
 1013e0c:	4684      	movls	ip, r0
		for ( i = 0; i < st_61.nbr_blks_set1; i++ )
 1013e0e:	fa1f f08a 	uxth.w	r0, sl
 1013e12:	9a06      	ldr	r2, [sp, #24]
 1013e14:	4281      	cmp	r1, r0
 1013e16:	4496      	add	lr, r2
 1013e18:	d8e2      	bhi.n	1013de0 <C1219_pread_offset_service+0x770>
 1013e1a:	9b04      	ldr	r3, [sp, #16]
 1013e1c:	4642      	mov	r2, r8
 1013e1e:	46b0      	mov	r8, r6
 1013e20:	9e07      	ldr	r6, [sp, #28]
 1013e22:	2b00      	cmp	r3, #0
 1013e24:	f040 82fc 	bne.w	1014420 <C1219_pread_offset_service+0xdb0>
 1013e28:	4b76      	ldr	r3, [pc, #472]	; (1014004 <C1219_pread_offset_service+0x994>)
 1013e2a:	8019      	strh	r1, [r3, #0]
 1013e2c:	9b03      	ldr	r3, [sp, #12]
 1013e2e:	b10b      	cbz	r3, 1013e34 <C1219_pread_offset_service+0x7c4>
 1013e30:	f8a2 c000 	strh.w	ip, [r2]
		if ( (st_63.lp_set_status_flags & LIST_TYPE_bm) == LIST_TYPE_bm )
 1013e34:	4b75      	ldr	r3, [pc, #468]	; (101400c <C1219_pread_offset_service+0x99c>)
 1013e36:	781b      	ldrb	r3, [r3, #0]
 1013e38:	075b      	lsls	r3, r3, #29
 1013e3a:	f140 82e5 	bpl.w	1014408 <C1219_pread_offset_service+0xd98>
			LP_APP_vGet_data_block_circ_table( block_start, (block_end - block_start + 1), &c1219_ptr->c1218_dll->tx_data[k] );
 1013e3e:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1013e42:	fb03 4306 	mla	r3, r3, r6, r4
 1013e46:	8811      	ldrh	r1, [r2, #0]
 1013e48:	685b      	ldr	r3, [r3, #4]
 1013e4a:	f8b8 0000 	ldrh.w	r0, [r8]
 1013e4e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 1013e52:	4b6f      	ldr	r3, [pc, #444]	; (1014010 <C1219_pread_offset_service+0x9a0>)
		memcpy(&c1219_ptr->c1218_dll->tx_data[READ_R_DATA_INDEX], &c1219_ptr->c1218_dll->tx_data[ READ_R_DATA_INDEX + c1219_ptr->offset], c1219_ptr->count);
 1013e54:	4f6f      	ldr	r7, [pc, #444]	; (1014014 <C1219_pread_offset_service+0x9a4>)
			LP_APP_vGet_data_block_fifo_table( block_start, (block_end - block_start + 1), &c1219_ptr->c1218_dll->tx_data[k] );
 1013e56:	3101      	adds	r1, #1
 1013e58:	1a09      	subs	r1, r1, r0
 1013e5a:	3203      	adds	r2, #3
 1013e5c:	b289      	uxth	r1, r1
 1013e5e:	4798      	blx	r3
		c1219_ptr->offset -= block_size*block_start;
 1013e60:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1013e64:	fb03 4606 	mla	r6, r3, r6, r4
 1013e68:	4b65      	ldr	r3, [pc, #404]	; (1014000 <C1219_pread_offset_service+0x990>)
 1013e6a:	f8b8 e000 	ldrh.w	lr, [r8]
 1013e6e:	6b30      	ldr	r0, [r6, #48]	; 0x30
 1013e70:	881b      	ldrh	r3, [r3, #0]
		memcpy(&c1219_ptr->c1218_dll->tx_data[READ_R_DATA_INDEX], &c1219_ptr->c1218_dll->tx_data[ READ_R_DATA_INDEX + c1219_ptr->offset], c1219_ptr->count);
 1013e72:	6871      	ldr	r1, [r6, #4]
 1013e74:	6b72      	ldr	r2, [r6, #52]	; 0x34
		c1219_ptr->offset -= block_size*block_start;
 1013e76:	fb0e 0313 	mls	r3, lr, r3, r0
 1013e7a:	6333      	str	r3, [r6, #48]	; 0x30
		memcpy(&c1219_ptr->c1218_dll->tx_data[READ_R_DATA_INDEX], &c1219_ptr->c1218_dll->tx_data[ READ_R_DATA_INDEX + c1219_ptr->offset], c1219_ptr->count);
 1013e7c:	f8d1 00bc 	ldr.w	r0, [r1, #188]	; 0xbc
 1013e80:	3303      	adds	r3, #3
 1013e82:	18c1      	adds	r1, r0, r3
 1013e84:	3003      	adds	r0, #3
 1013e86:	47b8      	blx	r7
		c1219_ptr->c1218_dll->tx_data[0] = C1218_OK;
 1013e88:	6873      	ldr	r3, [r6, #4]
		c1219_ptr->c1218_dll->tx_data[3 + c1219_ptr->count] = CRC_2s_complement(&c1219_ptr->c1218_dll->tx_data[READ_R_DATA_INDEX], c1219_ptr->count);
 1013e8a:	4a63      	ldr	r2, [pc, #396]	; (1014018 <C1219_pread_offset_service+0x9a8>)
		c1219_ptr->c1218_dll->tx_data[0] = C1218_OK;
 1013e8c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 1013e90:	2100      	movs	r1, #0
 1013e92:	7019      	strb	r1, [r3, #0]
		c1219_ptr->c1218_dll->tx_data[1] = (uint8_t)(c1219_ptr->count >> 8);
 1013e94:	6871      	ldr	r1, [r6, #4]
 1013e96:	6b73      	ldr	r3, [r6, #52]	; 0x34
 1013e98:	f8d1 10bc 	ldr.w	r1, [r1, #188]	; 0xbc
 1013e9c:	0a1b      	lsrs	r3, r3, #8
 1013e9e:	704b      	strb	r3, [r1, #1]
		c1219_ptr->c1218_dll->tx_data[2] = (uint8_t)(c1219_ptr->count >> 0);
 1013ea0:	6873      	ldr	r3, [r6, #4]
 1013ea2:	6b71      	ldr	r1, [r6, #52]	; 0x34
 1013ea4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 1013ea8:	7099      	strb	r1, [r3, #2]
		c1219_ptr->c1218_dll->tx_data[3 + c1219_ptr->count] = CRC_2s_complement(&c1219_ptr->c1218_dll->tx_data[READ_R_DATA_INDEX], c1219_ptr->count);
 1013eaa:	6871      	ldr	r1, [r6, #4]
 1013eac:	6b77      	ldr	r7, [r6, #52]	; 0x34
 1013eae:	f8d1 80bc 	ldr.w	r8, [r1, #188]	; 0xbc
 1013eb2:	b2b9      	uxth	r1, r7
 1013eb4:	f108 0003 	add.w	r0, r8, #3
 1013eb8:	4790      	blx	r2
 1013eba:	3703      	adds	r7, #3
		C1218_send_response(c1219_ptr->c1218_dll);
 1013ebc:	4a57      	ldr	r2, [pc, #348]	; (101401c <C1219_pread_offset_service+0x9ac>)
		c1219_ptr->c1218_dll->tx_data[3 + c1219_ptr->count] = CRC_2s_complement(&c1219_ptr->c1218_dll->tx_data[READ_R_DATA_INDEX], c1219_ptr->count);
 1013ebe:	f808 0007 	strb.w	r0, [r8, r7]
		c1219_ptr->c1218_dll->tx_data_length = c1219_ptr->count + 4;
 1013ec2:	6b73      	ldr	r3, [r6, #52]	; 0x34
 1013ec4:	6871      	ldr	r1, [r6, #4]
 1013ec6:	3304      	adds	r3, #4
 1013ec8:	f8a1 30c0 	strh.w	r3, [r1, #192]	; 0xc0
		C1218_send_response(c1219_ptr->c1218_dll);
 1013ecc:	6870      	ldr	r0, [r6, #4]
 1013ece:	4790      	blx	r2
 1013ed0:	e4d5      	b.n	101387e <C1219_pread_offset_service+0x20e>
			switch ( c1219[instance].table_id ) {
 1013ed2:	f640 0203 	movw	r2, #2051	; 0x803
 1013ed6:	4293      	cmp	r3, r2
 1013ed8:	f040 81d0 	bne.w	101427c <C1219_pread_offset_service+0xc0c>
	c1219_ptr->table_size = SM_APP_usMt_3_get_size();
 1013edc:	4b50      	ldr	r3, [pc, #320]	; (1014020 <C1219_pread_offset_service+0x9b0>)
 1013ede:	4798      	blx	r3
 1013ee0:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1013ee4:	fb03 4606 	mla	r6, r3, r6, r4
	c1219_ptr->execute_table_reading = SM_APP_bMt_3_execute_table_reading;
 1013ee8:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1013eec:	494d      	ldr	r1, [pc, #308]	; (1014024 <C1219_pread_offset_service+0x9b4>)
	c1219_ptr->table_size = SM_APP_usMt_3_get_size();
 1013eee:	8730      	strh	r0, [r6, #56]	; 0x38
	C1219_pread_offset(c1219_ptr);
 1013ef0:	4b3c      	ldr	r3, [pc, #240]	; (1013fe4 <C1219_pread_offset_service+0x974>)
	c1219_ptr->execute_table_reading = SM_APP_bMt_3_execute_table_reading;
 1013ef2:	50b1      	str	r1, [r6, r2]
	C1219_pread_offset(c1219_ptr);
 1013ef4:	4630      	mov	r0, r6
 1013ef6:	4798      	blx	r3
 1013ef8:	e4c1      	b.n	101387e <C1219_pread_offset_service+0x20e>
			switch ( c1219[instance].table_id ) {
 1013efa:	f640 0235 	movw	r2, #2101	; 0x835
 1013efe:	4293      	cmp	r3, r2
 1013f00:	f040 81bc 	bne.w	101427c <C1219_pread_offset_service+0xc0c>
	c1219_ptr->table_size = SM_APP_usMt_53_get_size();
 1013f04:	4b48      	ldr	r3, [pc, #288]	; (1014028 <C1219_pread_offset_service+0x9b8>)
 1013f06:	4798      	blx	r3
 1013f08:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1013f0c:	fb03 4606 	mla	r6, r3, r6, r4
	c1219_ptr->execute_table_reading = SM_APP_bMt_53_execute_table_reading;
 1013f10:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1013f14:	4945      	ldr	r1, [pc, #276]	; (101402c <C1219_pread_offset_service+0x9bc>)
	c1219_ptr->table_size = SM_APP_usMt_53_get_size();
 1013f16:	8730      	strh	r0, [r6, #56]	; 0x38
	C1219_pread_offset(c1219_ptr);
 1013f18:	4b32      	ldr	r3, [pc, #200]	; (1013fe4 <C1219_pread_offset_service+0x974>)
	c1219_ptr->execute_table_reading = SM_APP_bMt_53_execute_table_reading;
 1013f1a:	50b1      	str	r1, [r6, r2]
	C1219_pread_offset(c1219_ptr);
 1013f1c:	4630      	mov	r0, r6
 1013f1e:	4798      	blx	r3
 1013f20:	e4ad      	b.n	101387e <C1219_pread_offset_service+0x20e>
			switch ( c1219[instance].table_id ) {
 1013f22:	2b29      	cmp	r3, #41	; 0x29
 1013f24:	f040 81aa 	bne.w	101427c <C1219_pread_offset_service+0xc0c>
	c1219_ptr->table_size = SECR_APP_usSt_41_get_size();
 1013f28:	4b41      	ldr	r3, [pc, #260]	; (1014030 <C1219_pread_offset_service+0x9c0>)
 1013f2a:	4798      	blx	r3
 1013f2c:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1013f30:	fb03 4606 	mla	r6, r3, r6, r4
	c1219_ptr->execute_table_reading = SECR_APP_bSt_41_execute_table_reading;
 1013f34:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1013f38:	493e      	ldr	r1, [pc, #248]	; (1014034 <C1219_pread_offset_service+0x9c4>)
	c1219_ptr->table_size = SECR_APP_usSt_41_get_size();
 1013f3a:	8730      	strh	r0, [r6, #56]	; 0x38
	C1219_pread_offset(c1219_ptr);
 1013f3c:	4b29      	ldr	r3, [pc, #164]	; (1013fe4 <C1219_pread_offset_service+0x974>)
	c1219_ptr->execute_table_reading = SECR_APP_bSt_41_execute_table_reading;
 1013f3e:	50b1      	str	r1, [r6, r2]
	C1219_pread_offset(c1219_ptr);
 1013f40:	4630      	mov	r0, r6
 1013f42:	4798      	blx	r3
 1013f44:	e49b      	b.n	101387e <C1219_pread_offset_service+0x20e>
			switch ( c1219[instance].table_id ) {
 1013f46:	2b17      	cmp	r3, #23
 1013f48:	f040 8198 	bne.w	101427c <C1219_pread_offset_service+0xc0c>
	c1219_ptr->table_size = REGS_APP_usSt_23_get_size();
 1013f4c:	4b3a      	ldr	r3, [pc, #232]	; (1014038 <C1219_pread_offset_service+0x9c8>)
 1013f4e:	4798      	blx	r3
 1013f50:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1013f54:	fb03 4606 	mla	r6, r3, r6, r4
	c1219_ptr->execute_table_reading = REGS_APP_bSt_23_execute_table_reading;
 1013f58:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1013f5c:	4937      	ldr	r1, [pc, #220]	; (101403c <C1219_pread_offset_service+0x9cc>)
	c1219_ptr->table_size = REGS_APP_usSt_23_get_size();
 1013f5e:	8730      	strh	r0, [r6, #56]	; 0x38
	C1219_pread_offset(c1219_ptr);
 1013f60:	4b20      	ldr	r3, [pc, #128]	; (1013fe4 <C1219_pread_offset_service+0x974>)
	c1219_ptr->execute_table_reading = REGS_APP_bSt_23_execute_table_reading;
 1013f62:	50b1      	str	r1, [r6, r2]
	C1219_pread_offset(c1219_ptr);
 1013f64:	4630      	mov	r0, r6
 1013f66:	4798      	blx	r3
 1013f68:	e489      	b.n	101387e <C1219_pread_offset_service+0x20e>
	c1219_ptr->table_size = EVNT_APP_usMt_72_get_size();
 1013f6a:	4b35      	ldr	r3, [pc, #212]	; (1014040 <C1219_pread_offset_service+0x9d0>)
 1013f6c:	4798      	blx	r3
 1013f6e:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1013f72:	fb03 4606 	mla	r6, r3, r6, r4
	c1219_ptr->execute_table_reading = EVNT_APP_bMt_72_execute_table_reading;
 1013f76:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1013f7a:	4932      	ldr	r1, [pc, #200]	; (1014044 <C1219_pread_offset_service+0x9d4>)
	c1219_ptr->table_size = EVNT_APP_usMt_72_get_size();
 1013f7c:	8730      	strh	r0, [r6, #56]	; 0x38
	C1219_pread_offset(c1219_ptr);
 1013f7e:	4b19      	ldr	r3, [pc, #100]	; (1013fe4 <C1219_pread_offset_service+0x974>)
	c1219_ptr->execute_table_reading = EVNT_APP_bMt_72_execute_table_reading;
 1013f80:	50b1      	str	r1, [r6, r2]
	C1219_pread_offset(c1219_ptr);
 1013f82:	4630      	mov	r0, r6
 1013f84:	4798      	blx	r3
 1013f86:	e47a      	b.n	101387e <C1219_pread_offset_service+0x20e>
	c1219_ptr->table_size = SM_APP_usMt_25_get_size();
 1013f88:	4b2f      	ldr	r3, [pc, #188]	; (1014048 <C1219_pread_offset_service+0x9d8>)
 1013f8a:	4798      	blx	r3
	c1219_ptr->execute_table_reading = SM_APP_bMt_25_execute_table_reading;
 1013f8c:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1013f90:	492e      	ldr	r1, [pc, #184]	; (101404c <C1219_pread_offset_service+0x9dc>)
	c1219_ptr->table_size = SM_APP_usMt_25_get_size();
 1013f92:	f8a8 0038 	strh.w	r0, [r8, #56]	; 0x38
	C1219_pread_offset(c1219_ptr);
 1013f96:	4b13      	ldr	r3, [pc, #76]	; (1013fe4 <C1219_pread_offset_service+0x974>)
	c1219_ptr->execute_table_reading = SM_APP_bMt_25_execute_table_reading;
 1013f98:	f848 1002 	str.w	r1, [r8, r2]
	C1219_pread_offset(c1219_ptr);
 1013f9c:	4640      	mov	r0, r8
 1013f9e:	4798      	blx	r3
 1013fa0:	e46d      	b.n	101387e <C1219_pread_offset_service+0x20e>
	c1219_ptr->table_size = SM_APP_usMt_1_get_size();
 1013fa2:	4b2b      	ldr	r3, [pc, #172]	; (1014050 <C1219_pread_offset_service+0x9e0>)
 1013fa4:	4798      	blx	r3
	c1219_ptr->execute_table_reading = SM_APP_bMt_1_execute_table_reading;
 1013fa6:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1013faa:	492a      	ldr	r1, [pc, #168]	; (1014054 <C1219_pread_offset_service+0x9e4>)
	c1219_ptr->table_size = SM_APP_usMt_1_get_size();
 1013fac:	f8a8 0038 	strh.w	r0, [r8, #56]	; 0x38
	C1219_pread_offset(c1219_ptr);
 1013fb0:	4b0c      	ldr	r3, [pc, #48]	; (1013fe4 <C1219_pread_offset_service+0x974>)
	c1219_ptr->execute_table_reading = SM_APP_bMt_1_execute_table_reading;
 1013fb2:	f848 1002 	str.w	r1, [r8, r2]
	C1219_pread_offset(c1219_ptr);
 1013fb6:	4640      	mov	r0, r8
 1013fb8:	4798      	blx	r3
 1013fba:	e460      	b.n	101387e <C1219_pread_offset_service+0x20e>
	c1219_ptr->table_size = SM_APP_usMt_4_get_size();
 1013fbc:	4b26      	ldr	r3, [pc, #152]	; (1014058 <C1219_pread_offset_service+0x9e8>)
 1013fbe:	4798      	blx	r3
 1013fc0:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1013fc4:	fb03 4606 	mla	r6, r3, r6, r4
	c1219_ptr->execute_table_reading = SM_APP_bMt_4_execute_table_reading;
 1013fc8:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1013fcc:	4923      	ldr	r1, [pc, #140]	; (101405c <C1219_pread_offset_service+0x9ec>)
	c1219_ptr->table_size = SM_APP_usMt_4_get_size();
 1013fce:	8730      	strh	r0, [r6, #56]	; 0x38
	C1219_pread_offset(c1219_ptr);
 1013fd0:	4b04      	ldr	r3, [pc, #16]	; (1013fe4 <C1219_pread_offset_service+0x974>)
	c1219_ptr->execute_table_reading = SM_APP_bMt_4_execute_table_reading;
 1013fd2:	50b1      	str	r1, [r6, r2]
	C1219_pread_offset(c1219_ptr);
 1013fd4:	4630      	mov	r0, r6
 1013fd6:	4798      	blx	r3
 1013fd8:	e451      	b.n	101387e <C1219_pread_offset_service+0x20e>
 1013fda:	bf00      	nop
 1013fdc:	01019921 	.word	0x01019921
 1013fe0:	0101974d 	.word	0x0101974d
 1013fe4:	01010421 	.word	0x01010421
 1013fe8:	01026755 	.word	0x01026755
 1013fec:	01026715 	.word	0x01026715
 1013ff0:	0102be3d 	.word	0x0102be3d
 1013ff4:	0102be11 	.word	0x0102be11
 1013ff8:	0101bb29 	.word	0x0101bb29
 1013ffc:	200166b8 	.word	0x200166b8
 1014000:	2000090e 	.word	0x2000090e
 1014004:	20000924 	.word	0x20000924
 1014008:	2000090c 	.word	0x2000090c
 101400c:	20016744 	.word	0x20016744
 1014010:	0101c8cd 	.word	0x0101c8cd
 1014014:	01030a3d 	.word	0x01030a3d
 1014018:	01016bf5 	.word	0x01016bf5
 101401c:	0101637d 	.word	0x0101637d
 1014020:	010205e5 	.word	0x010205e5
 1014024:	010205a5 	.word	0x010205a5
 1014028:	01020ed5 	.word	0x01020ed5
 101402c:	01020e95 	.word	0x01020e95
 1014030:	0102ac29 	.word	0x0102ac29
 1014034:	0102ab9d 	.word	0x0102ab9d
 1014038:	01027c45 	.word	0x01027c45
 101403c:	01027769 	.word	0x01027769
 1014040:	01018da5 	.word	0x01018da5
 1014044:	010186f5 	.word	0x010186f5
 1014048:	01021355 	.word	0x01021355
 101404c:	0102111d 	.word	0x0102111d
 1014050:	01020521 	.word	0x01020521
 1014054:	010204d5 	.word	0x010204d5
 1014058:	010209a9 	.word	0x010209a9
 101405c:	01020821 	.word	0x01020821
 1014060:	20000910 	.word	0x20000910
	c1219_ptr->table_size = SECR_APP_usSt_42_get_size();
 1014064:	4ba3      	ldr	r3, [pc, #652]	; (10142f4 <C1219_pread_offset_service+0xc84>)
 1014066:	4798      	blx	r3
	c1219_ptr->execute_table_reading = SECR_APP_bSt_42_execute_table_reading;
 1014068:	f241 72ac 	movw	r2, #6060	; 0x17ac
 101406c:	49a2      	ldr	r1, [pc, #648]	; (10142f8 <C1219_pread_offset_service+0xc88>)
	c1219_ptr->table_size = SECR_APP_usSt_42_get_size();
 101406e:	f8a8 0038 	strh.w	r0, [r8, #56]	; 0x38
	C1219_pread_offset(c1219_ptr);
 1014072:	4ba2      	ldr	r3, [pc, #648]	; (10142fc <C1219_pread_offset_service+0xc8c>)
	c1219_ptr->execute_table_reading = SECR_APP_bSt_42_execute_table_reading;
 1014074:	f848 1002 	str.w	r1, [r8, r2]
	C1219_pread_offset(c1219_ptr);
 1014078:	4640      	mov	r0, r8
 101407a:	4798      	blx	r3
 101407c:	f7ff bbff 	b.w	101387e <C1219_pread_offset_service+0x20e>
	c1219_ptr->table_size = TOU_APP_usSt_54_get_size();
 1014080:	4b9f      	ldr	r3, [pc, #636]	; (1014300 <C1219_pread_offset_service+0xc90>)
 1014082:	4798      	blx	r3
	c1219_ptr->execute_table_reading = TOU_APP_bSt_54_execute_table_reading;
 1014084:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1014088:	499e      	ldr	r1, [pc, #632]	; (1014304 <C1219_pread_offset_service+0xc94>)
	c1219_ptr->table_size = TOU_APP_usSt_54_get_size();
 101408a:	f8a8 0038 	strh.w	r0, [r8, #56]	; 0x38
	C1219_pread_offset(c1219_ptr);
 101408e:	4b9b      	ldr	r3, [pc, #620]	; (10142fc <C1219_pread_offset_service+0xc8c>)
	c1219_ptr->execute_table_reading = TOU_APP_bSt_54_execute_table_reading;
 1014090:	f848 1002 	str.w	r1, [r8, r2]
	C1219_pread_offset(c1219_ptr);
 1014094:	4640      	mov	r0, r8
 1014096:	4798      	blx	r3
 1014098:	f7ff bbf1 	b.w	101387e <C1219_pread_offset_service+0x20e>
	c1219_ptr->table_size = SECR_APP_usSt_44_get_size();
 101409c:	4b9a      	ldr	r3, [pc, #616]	; (1014308 <C1219_pread_offset_service+0xc98>)
 101409e:	4798      	blx	r3
 10140a0:	f241 73b4 	movw	r3, #6068	; 0x17b4
 10140a4:	fb03 4606 	mla	r6, r3, r6, r4
	c1219_ptr->execute_table_reading = SECR_APP_bSt_44_execute_table_reading;
 10140a8:	f241 72ac 	movw	r2, #6060	; 0x17ac
 10140ac:	4997      	ldr	r1, [pc, #604]	; (101430c <C1219_pread_offset_service+0xc9c>)
	c1219_ptr->table_size = SECR_APP_usSt_44_get_size();
 10140ae:	8730      	strh	r0, [r6, #56]	; 0x38
	C1219_pread_offset(c1219_ptr);
 10140b0:	4b92      	ldr	r3, [pc, #584]	; (10142fc <C1219_pread_offset_service+0xc8c>)
	c1219_ptr->execute_table_reading = SECR_APP_bSt_44_execute_table_reading;
 10140b2:	50b1      	str	r1, [r6, r2]
	C1219_pread_offset(c1219_ptr);
 10140b4:	4630      	mov	r0, r6
 10140b6:	4798      	blx	r3
 10140b8:	f7ff bbe1 	b.w	101387e <C1219_pread_offset_service+0x20e>
	c1219_ptr->table_size = REGS_APP_usSt_25_get_size();
 10140bc:	4b94      	ldr	r3, [pc, #592]	; (1014310 <C1219_pread_offset_service+0xca0>)
 10140be:	4798      	blx	r3
 10140c0:	f241 73b4 	movw	r3, #6068	; 0x17b4
 10140c4:	fb03 4606 	mla	r6, r3, r6, r4
	c1219_ptr->execute_table_reading = REGS_APP_bSt_25_execute_table_reading;
 10140c8:	f241 72ac 	movw	r2, #6060	; 0x17ac
 10140cc:	4991      	ldr	r1, [pc, #580]	; (1014314 <C1219_pread_offset_service+0xca4>)
	c1219_ptr->table_size = REGS_APP_usSt_25_get_size();
 10140ce:	8730      	strh	r0, [r6, #56]	; 0x38
	C1219_pread_offset(c1219_ptr);
 10140d0:	4b8a      	ldr	r3, [pc, #552]	; (10142fc <C1219_pread_offset_service+0xc8c>)
	c1219_ptr->execute_table_reading = REGS_APP_bSt_25_execute_table_reading;
 10140d2:	50b1      	str	r1, [r6, r2]
	C1219_pread_offset(c1219_ptr);
 10140d4:	4630      	mov	r0, r6
 10140d6:	4798      	blx	r3
 10140d8:	f7ff bbd1 	b.w	101387e <C1219_pread_offset_service+0x20e>
	c1219_ptr->table_size = REGS_APP_usSt_26_get_size();
 10140dc:	4b8e      	ldr	r3, [pc, #568]	; (1014318 <C1219_pread_offset_service+0xca8>)
 10140de:	4798      	blx	r3
 10140e0:	f241 73b4 	movw	r3, #6068	; 0x17b4
 10140e4:	fb03 4606 	mla	r6, r3, r6, r4
	c1219_ptr->execute_table_reading = REGS_APP_bSt_26_execute_table_reading;
 10140e8:	f241 72ac 	movw	r2, #6060	; 0x17ac
 10140ec:	498b      	ldr	r1, [pc, #556]	; (101431c <C1219_pread_offset_service+0xcac>)
	c1219_ptr->table_size = REGS_APP_usSt_26_get_size();
 10140ee:	8730      	strh	r0, [r6, #56]	; 0x38
	C1219_pread_offset(c1219_ptr);
 10140f0:	4b82      	ldr	r3, [pc, #520]	; (10142fc <C1219_pread_offset_service+0xc8c>)
	c1219_ptr->execute_table_reading = REGS_APP_bSt_26_execute_table_reading;
 10140f2:	50b1      	str	r1, [r6, r2]
	C1219_pread_offset(c1219_ptr);
 10140f4:	4630      	mov	r0, r6
 10140f6:	4798      	blx	r3
 10140f8:	f7ff bbc1 	b.w	101387e <C1219_pread_offset_service+0x20e>
	c1219_ptr->table_size = SM_APP_usMt_22_get_size();
 10140fc:	4b88      	ldr	r3, [pc, #544]	; (1014320 <C1219_pread_offset_service+0xcb0>)
 10140fe:	4798      	blx	r3
	c1219_ptr->execute_table_reading = SM_APP_bMt_22_execute_table_reading;
 1014100:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1014104:	4987      	ldr	r1, [pc, #540]	; (1014324 <C1219_pread_offset_service+0xcb4>)
	c1219_ptr->table_size = SM_APP_usMt_22_get_size();
 1014106:	f8a8 0038 	strh.w	r0, [r8, #56]	; 0x38
	C1219_pread_offset(c1219_ptr);
 101410a:	4b7c      	ldr	r3, [pc, #496]	; (10142fc <C1219_pread_offset_service+0xc8c>)
	c1219_ptr->execute_table_reading = SM_APP_bMt_22_execute_table_reading;
 101410c:	f848 1002 	str.w	r1, [r8, r2]
	C1219_pread_offset(c1219_ptr);
 1014110:	4640      	mov	r0, r8
 1014112:	4798      	blx	r3
 1014114:	f7ff bbb3 	b.w	101387e <C1219_pread_offset_service+0x20e>
	c1219_ptr->table_size = REGS_APP_usSt_28_get_size();
 1014118:	4b83      	ldr	r3, [pc, #524]	; (1014328 <C1219_pread_offset_service+0xcb8>)
 101411a:	4798      	blx	r3
	c1219_ptr->execute_table_reading = REGS_APP_bSt_28_execute_table_reading;
 101411c:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1014120:	4982      	ldr	r1, [pc, #520]	; (101432c <C1219_pread_offset_service+0xcbc>)
	c1219_ptr->table_size = REGS_APP_usSt_28_get_size();
 1014122:	f8a8 0038 	strh.w	r0, [r8, #56]	; 0x38
	C1219_pread_offset(c1219_ptr);
 1014126:	4b75      	ldr	r3, [pc, #468]	; (10142fc <C1219_pread_offset_service+0xc8c>)
	c1219_ptr->execute_table_reading = REGS_APP_bSt_28_execute_table_reading;
 1014128:	f848 1002 	str.w	r1, [r8, r2]
	C1219_pread_offset(c1219_ptr);
 101412c:	4640      	mov	r0, r8
 101412e:	4798      	blx	r3
 1014130:	f7ff bba5 	b.w	101387e <C1219_pread_offset_service+0x20e>
	c1219_ptr->table_size = REGS_APP_usSt_24_get_size();
 1014134:	4b7e      	ldr	r3, [pc, #504]	; (1014330 <C1219_pread_offset_service+0xcc0>)
 1014136:	4798      	blx	r3
	c1219_ptr->execute_table_reading = REGS_APP_bSt_24_execute_table_reading;
 1014138:	f241 72ac 	movw	r2, #6060	; 0x17ac
 101413c:	497d      	ldr	r1, [pc, #500]	; (1014334 <C1219_pread_offset_service+0xcc4>)
	c1219_ptr->table_size = REGS_APP_usSt_24_get_size();
 101413e:	f8a8 0038 	strh.w	r0, [r8, #56]	; 0x38
	C1219_pread_offset(c1219_ptr);
 1014142:	4b6e      	ldr	r3, [pc, #440]	; (10142fc <C1219_pread_offset_service+0xc8c>)
	c1219_ptr->execute_table_reading = REGS_APP_bSt_24_execute_table_reading;
 1014144:	f848 1002 	str.w	r1, [r8, r2]
	C1219_pread_offset(c1219_ptr);
 1014148:	4640      	mov	r0, r8
 101414a:	4798      	blx	r3
 101414c:	f7ff bb97 	b.w	101387e <C1219_pread_offset_service+0x20e>
	c1219_ptr->table_size = EVNT_APP_usSt_70_get_size();
 1014150:	4b79      	ldr	r3, [pc, #484]	; (1014338 <C1219_pread_offset_service+0xcc8>)
 1014152:	4798      	blx	r3
	c1219_ptr->execute_table_reading = EVNT_APP_ubSt_70_execute_table_reading;
 1014154:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1014158:	4978      	ldr	r1, [pc, #480]	; (101433c <C1219_pread_offset_service+0xccc>)
	c1219_ptr->table_size = EVNT_APP_usSt_70_get_size();
 101415a:	f8a8 0038 	strh.w	r0, [r8, #56]	; 0x38
	C1219_pread_offset(c1219_ptr);
 101415e:	4b67      	ldr	r3, [pc, #412]	; (10142fc <C1219_pread_offset_service+0xc8c>)
	c1219_ptr->execute_table_reading = EVNT_APP_ubSt_70_execute_table_reading;
 1014160:	f848 1002 	str.w	r1, [r8, r2]
	C1219_pread_offset(c1219_ptr);
 1014164:	4640      	mov	r0, r8
 1014166:	4798      	blx	r3
 1014168:	f7ff bb89 	b.w	101387e <C1219_pread_offset_service+0x20e>
	c1219_ptr->table_size = EVNT_APP_usSt_71_get_size();
 101416c:	4b74      	ldr	r3, [pc, #464]	; (1014340 <C1219_pread_offset_service+0xcd0>)
 101416e:	4798      	blx	r3
 1014170:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1014174:	fb03 4606 	mla	r6, r3, r6, r4
	c1219_ptr->execute_table_reading = EVNT_APP_bSt_71_execute_table_reading;
 1014178:	f241 72ac 	movw	r2, #6060	; 0x17ac
 101417c:	4971      	ldr	r1, [pc, #452]	; (1014344 <C1219_pread_offset_service+0xcd4>)
	c1219_ptr->table_size = EVNT_APP_usSt_71_get_size();
 101417e:	8730      	strh	r0, [r6, #56]	; 0x38
	C1219_pread_offset(c1219_ptr);
 1014180:	4b5e      	ldr	r3, [pc, #376]	; (10142fc <C1219_pread_offset_service+0xc8c>)
	c1219_ptr->execute_table_reading = EVNT_APP_bSt_71_execute_table_reading;
 1014182:	50b1      	str	r1, [r6, r2]
	C1219_pread_offset(c1219_ptr);
 1014184:	4630      	mov	r0, r6
 1014186:	4798      	blx	r3
 1014188:	f7ff bb79 	b.w	101387e <C1219_pread_offset_service+0x20e>
	c1219_ptr->table_size = EVNT_APP_usSt_72_get_size();
 101418c:	4b6e      	ldr	r3, [pc, #440]	; (1014348 <C1219_pread_offset_service+0xcd8>)
 101418e:	4798      	blx	r3
 1014190:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1014194:	fb03 4606 	mla	r6, r3, r6, r4
	c1219_ptr->execute_table_reading = EVNT_APP_bSt_72_execute_table_reading;
 1014198:	f241 72ac 	movw	r2, #6060	; 0x17ac
 101419c:	496b      	ldr	r1, [pc, #428]	; (101434c <C1219_pread_offset_service+0xcdc>)
	c1219_ptr->table_size = EVNT_APP_usSt_72_get_size();
 101419e:	8730      	strh	r0, [r6, #56]	; 0x38
	C1219_pread_offset(c1219_ptr);
 10141a0:	4b56      	ldr	r3, [pc, #344]	; (10142fc <C1219_pread_offset_service+0xc8c>)
	c1219_ptr->execute_table_reading = EVNT_APP_bSt_72_execute_table_reading;
 10141a2:	50b1      	str	r1, [r6, r2]
	C1219_pread_offset(c1219_ptr);
 10141a4:	4630      	mov	r0, r6
 10141a6:	4798      	blx	r3
 10141a8:	f7ff bb69 	b.w	101387e <C1219_pread_offset_service+0x20e>
	c1219_ptr->table_size = GRAL_APP_usSt_2_get_size();
 10141ac:	4b68      	ldr	r3, [pc, #416]	; (1014350 <C1219_pread_offset_service+0xce0>)
 10141ae:	4798      	blx	r3
	c1219_ptr->execute_table_reading = GRAL_APP_bSt_2_execute_table_reading;
 10141b0:	f241 72ac 	movw	r2, #6060	; 0x17ac
 10141b4:	4967      	ldr	r1, [pc, #412]	; (1014354 <C1219_pread_offset_service+0xce4>)
	c1219_ptr->table_size = GRAL_APP_usSt_2_get_size();
 10141b6:	f8a8 0038 	strh.w	r0, [r8, #56]	; 0x38
	C1219_pread_offset(c1219_ptr);
 10141ba:	4b50      	ldr	r3, [pc, #320]	; (10142fc <C1219_pread_offset_service+0xc8c>)
	c1219_ptr->execute_table_reading = GRAL_APP_bSt_2_execute_table_reading;
 10141bc:	f848 1002 	str.w	r1, [r8, r2]
	C1219_pread_offset(c1219_ptr);
 10141c0:	4640      	mov	r0, r8
 10141c2:	4798      	blx	r3
 10141c4:	f7ff bb5b 	b.w	101387e <C1219_pread_offset_service+0x20e>
	c1219_ptr->table_size = LP_APP_usSt_60_get_size();
 10141c8:	4b63      	ldr	r3, [pc, #396]	; (1014358 <C1219_pread_offset_service+0xce8>)
 10141ca:	4798      	blx	r3
 10141cc:	f241 73b4 	movw	r3, #6068	; 0x17b4
 10141d0:	fb03 4606 	mla	r6, r3, r6, r4
	c1219_ptr->execute_table_reading = LP_APP_bSt_60_execute_table_reading;
 10141d4:	f241 72ac 	movw	r2, #6060	; 0x17ac
 10141d8:	4960      	ldr	r1, [pc, #384]	; (101435c <C1219_pread_offset_service+0xcec>)
	c1219_ptr->table_size = LP_APP_usSt_60_get_size();
 10141da:	8730      	strh	r0, [r6, #56]	; 0x38
	C1219_pread_offset(c1219_ptr);
 10141dc:	4b47      	ldr	r3, [pc, #284]	; (10142fc <C1219_pread_offset_service+0xc8c>)
	c1219_ptr->execute_table_reading = LP_APP_bSt_60_execute_table_reading;
 10141de:	50b1      	str	r1, [r6, r2]
	C1219_pread_offset(c1219_ptr);
 10141e0:	4630      	mov	r0, r6
 10141e2:	4798      	blx	r3
 10141e4:	f7ff bb4b 	b.w	101387e <C1219_pread_offset_service+0x20e>
	c1219_ptr->table_size = LP_APP_usSt_62_get_size();
 10141e8:	4b5d      	ldr	r3, [pc, #372]	; (1014360 <C1219_pread_offset_service+0xcf0>)
 10141ea:	4798      	blx	r3
	c1219_ptr->execute_table_reading = LP_APP_bSt_62_execute_table_reading;
 10141ec:	f241 72ac 	movw	r2, #6060	; 0x17ac
 10141f0:	495c      	ldr	r1, [pc, #368]	; (1014364 <C1219_pread_offset_service+0xcf4>)
	c1219_ptr->table_size = LP_APP_usSt_62_get_size();
 10141f2:	f8a8 0038 	strh.w	r0, [r8, #56]	; 0x38
	C1219_pread_offset(c1219_ptr);
 10141f6:	4b41      	ldr	r3, [pc, #260]	; (10142fc <C1219_pread_offset_service+0xc8c>)
	c1219_ptr->execute_table_reading = LP_APP_bSt_62_execute_table_reading;
 10141f8:	f848 1002 	str.w	r1, [r8, r2]
	C1219_pread_offset(c1219_ptr);
 10141fc:	4640      	mov	r0, r8
 10141fe:	4798      	blx	r3
 1014200:	f7ff bb3d 	b.w	101387e <C1219_pread_offset_service+0x20e>
	c1219_ptr->table_size = EVNT_APP_usSt_74_get_size();
 1014204:	4b58      	ldr	r3, [pc, #352]	; (1014368 <C1219_pread_offset_service+0xcf8>)
 1014206:	4798      	blx	r3
	c1219_ptr->execute_table_reading = EVNT_APP_bSt_74_execute_table_reading;
 1014208:	f241 72ac 	movw	r2, #6060	; 0x17ac
 101420c:	4957      	ldr	r1, [pc, #348]	; (101436c <C1219_pread_offset_service+0xcfc>)
	c1219_ptr->table_size = EVNT_APP_usSt_74_get_size();
 101420e:	f8a8 0038 	strh.w	r0, [r8, #56]	; 0x38
	C1219_pread_offset(c1219_ptr);
 1014212:	4b3a      	ldr	r3, [pc, #232]	; (10142fc <C1219_pread_offset_service+0xc8c>)
	c1219_ptr->execute_table_reading = EVNT_APP_bSt_74_execute_table_reading;
 1014214:	f848 1002 	str.w	r1, [r8, r2]
	C1219_pread_offset(c1219_ptr);
 1014218:	4640      	mov	r0, r8
 101421a:	4798      	blx	r3
 101421c:	f7ff bb2f 	b.w	101387e <C1219_pread_offset_service+0x20e>
	c1219_ptr->table_size = REGS_APP_usSt_16_get_size();
 1014220:	4b53      	ldr	r3, [pc, #332]	; (1014370 <C1219_pread_offset_service+0xd00>)
 1014222:	4798      	blx	r3
 1014224:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1014228:	fb03 4606 	mla	r6, r3, r6, r4
	c1219_ptr->execute_table_reading = REGS_APP_bSt_16_execute_table_reading;
 101422c:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1014230:	4950      	ldr	r1, [pc, #320]	; (1014374 <C1219_pread_offset_service+0xd04>)
	c1219_ptr->table_size = REGS_APP_usSt_16_get_size();
 1014232:	8730      	strh	r0, [r6, #56]	; 0x38
	C1219_pread_offset(c1219_ptr);
 1014234:	4b31      	ldr	r3, [pc, #196]	; (10142fc <C1219_pread_offset_service+0xc8c>)
	c1219_ptr->execute_table_reading = REGS_APP_bSt_16_execute_table_reading;
 1014236:	50b1      	str	r1, [r6, r2]
	C1219_pread_offset(c1219_ptr);
 1014238:	4630      	mov	r0, r6
 101423a:	4798      	blx	r3
 101423c:	f7ff bb1f 	b.w	101387e <C1219_pread_offset_service+0x20e>
	c1219_ptr->table_size = REGS_APP_usSt_13_get_size();
 1014240:	4b4d      	ldr	r3, [pc, #308]	; (1014378 <C1219_pread_offset_service+0xd08>)
 1014242:	4798      	blx	r3
	c1219_ptr->execute_table_reading = REGS_APP_bSt_13_execute_table_reading;
 1014244:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1014248:	494c      	ldr	r1, [pc, #304]	; (101437c <C1219_pread_offset_service+0xd0c>)
	c1219_ptr->table_size = REGS_APP_usSt_13_get_size();
 101424a:	f8a8 0038 	strh.w	r0, [r8, #56]	; 0x38
	C1219_pread_offset(c1219_ptr);
 101424e:	4b2b      	ldr	r3, [pc, #172]	; (10142fc <C1219_pread_offset_service+0xc8c>)
	c1219_ptr->execute_table_reading = REGS_APP_bSt_13_execute_table_reading;
 1014250:	f848 1002 	str.w	r1, [r8, r2]
	C1219_pread_offset(c1219_ptr);
 1014254:	4640      	mov	r0, r8
 1014256:	4798      	blx	r3
 1014258:	f7ff bb11 	b.w	101387e <C1219_pread_offset_service+0x20e>
	c1219_ptr->table_size = GRAL_APP_usSt_6_get_size();
 101425c:	4b48      	ldr	r3, [pc, #288]	; (1014380 <C1219_pread_offset_service+0xd10>)
 101425e:	4798      	blx	r3
 1014260:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1014264:	fb03 4606 	mla	r6, r3, r6, r4
	c1219_ptr->execute_table_reading = GRAL_APP_bSt_6_execute_table_reading;
 1014268:	f241 72ac 	movw	r2, #6060	; 0x17ac
 101426c:	4945      	ldr	r1, [pc, #276]	; (1014384 <C1219_pread_offset_service+0xd14>)
	c1219_ptr->table_size = GRAL_APP_usSt_6_get_size();
 101426e:	8730      	strh	r0, [r6, #56]	; 0x38
	C1219_pread_offset(c1219_ptr);
 1014270:	4b22      	ldr	r3, [pc, #136]	; (10142fc <C1219_pread_offset_service+0xc8c>)
	c1219_ptr->execute_table_reading = GRAL_APP_bSt_6_execute_table_reading;
 1014272:	50b1      	str	r1, [r6, r2]
	C1219_pread_offset(c1219_ptr);
 1014274:	4630      	mov	r0, r6
 1014276:	4798      	blx	r3
 1014278:	f7ff bb01 	b.w	101387e <C1219_pread_offset_service+0x20e>
					C1218_send_iar(c1219[instance].c1218_dll);
 101427c:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1014280:	fb03 4606 	mla	r6, r3, r6, r4
 1014284:	4b40      	ldr	r3, [pc, #256]	; (1014388 <C1219_pread_offset_service+0xd18>)
 1014286:	6870      	ldr	r0, [r6, #4]
 1014288:	4798      	blx	r3
					break;
 101428a:	f7ff baf8 	b.w	101387e <C1219_pread_offset_service+0x20e>
	c1219_ptr->table_size = TOU_APP_usSt_51_get_size();
 101428e:	4b3f      	ldr	r3, [pc, #252]	; (101438c <C1219_pread_offset_service+0xd1c>)
 1014290:	4798      	blx	r3
	c1219_ptr->execute_table_reading = TOU_APP_bSt_51_execute_table_reading;
 1014292:	f241 72ac 	movw	r2, #6060	; 0x17ac
 1014296:	493e      	ldr	r1, [pc, #248]	; (1014390 <C1219_pread_offset_service+0xd20>)
	c1219_ptr->table_size = TOU_APP_usSt_51_get_size();
 1014298:	f8a8 0038 	strh.w	r0, [r8, #56]	; 0x38
	C1219_pread_offset(c1219_ptr);
 101429c:	4b17      	ldr	r3, [pc, #92]	; (10142fc <C1219_pread_offset_service+0xc8c>)
	c1219_ptr->execute_table_reading = TOU_APP_bSt_51_execute_table_reading;
 101429e:	f848 1002 	str.w	r1, [r8, r2]
	C1219_pread_offset(c1219_ptr);
 10142a2:	4640      	mov	r0, r8
 10142a4:	4798      	blx	r3
 10142a6:	f7ff baea 	b.w	101387e <C1219_pread_offset_service+0x20e>
	c1219_ptr->table_size = REGS_APP_usSt_10_get_size();
 10142aa:	4b3a      	ldr	r3, [pc, #232]	; (1014394 <C1219_pread_offset_service+0xd24>)
 10142ac:	4798      	blx	r3
	c1219_ptr->execute_table_reading = REGS_APP_bSt_10_execute_table_reading;
 10142ae:	f241 72ac 	movw	r2, #6060	; 0x17ac
 10142b2:	4939      	ldr	r1, [pc, #228]	; (1014398 <C1219_pread_offset_service+0xd28>)
	c1219_ptr->table_size = REGS_APP_usSt_10_get_size();
 10142b4:	f8a8 0038 	strh.w	r0, [r8, #56]	; 0x38
	C1219_pread_offset(c1219_ptr);
 10142b8:	4b10      	ldr	r3, [pc, #64]	; (10142fc <C1219_pread_offset_service+0xc8c>)
	c1219_ptr->execute_table_reading = REGS_APP_bSt_10_execute_table_reading;
 10142ba:	f848 1002 	str.w	r1, [r8, r2]
	C1219_pread_offset(c1219_ptr);
 10142be:	4640      	mov	r0, r8
 10142c0:	4798      	blx	r3
 10142c2:	f7ff badc 	b.w	101387e <C1219_pread_offset_service+0x20e>
	c1219_ptr->table_size = REGS_APP_usSt_21_get_size();
 10142c6:	4b35      	ldr	r3, [pc, #212]	; (101439c <C1219_pread_offset_service+0xd2c>)
 10142c8:	4798      	blx	r3
	c1219_ptr->execute_table_reading = REGS_APP_bSt_21_execute_table_reading;
 10142ca:	f241 72ac 	movw	r2, #6060	; 0x17ac
 10142ce:	4934      	ldr	r1, [pc, #208]	; (10143a0 <C1219_pread_offset_service+0xd30>)
	c1219_ptr->table_size = REGS_APP_usSt_21_get_size();
 10142d0:	f8a8 0038 	strh.w	r0, [r8, #56]	; 0x38
	C1219_pread_offset(c1219_ptr);
 10142d4:	4b09      	ldr	r3, [pc, #36]	; (10142fc <C1219_pread_offset_service+0xc8c>)
	c1219_ptr->execute_table_reading = REGS_APP_bSt_21_execute_table_reading;
 10142d6:	f848 1002 	str.w	r1, [r8, r2]
	C1219_pread_offset(c1219_ptr);
 10142da:	4640      	mov	r0, r8
 10142dc:	4798      	blx	r3
 10142de:	f7ff bace 	b.w	101387e <C1219_pread_offset_service+0x20e>
		C1218_send_onp(c1219_ptr->c1218_dll);
 10142e2:	f241 73b4 	movw	r3, #6068	; 0x17b4
 10142e6:	fb03 4606 	mla	r6, r3, r6, r4
 10142ea:	4b2e      	ldr	r3, [pc, #184]	; (10143a4 <C1219_pread_offset_service+0xd34>)
 10142ec:	6870      	ldr	r0, [r6, #4]
 10142ee:	4798      	blx	r3
 10142f0:	f7ff bac5 	b.w	101387e <C1219_pread_offset_service+0x20e>
 10142f4:	0102ae6d 	.word	0x0102ae6d
 10142f8:	0102ada9 	.word	0x0102ada9
 10142fc:	01010421 	.word	0x01010421
 1014300:	0102c301 	.word	0x0102c301
 1014304:	0102c0cd 	.word	0x0102c0cd
 1014308:	0102b285 	.word	0x0102b285
 101430c:	0102b1a9 	.word	0x0102b1a9
 1014310:	01027ec9 	.word	0x01027ec9
 1014314:	01027e19 	.word	0x01027e19
 1014318:	010281ad 	.word	0x010281ad
 101431c:	01027ff5 	.word	0x01027ff5
 1014320:	01020b49 	.word	0x01020b49
 1014324:	01020a51 	.word	0x01020a51
 1014328:	01028bb1 	.word	0x01028bb1
 101432c:	01028711 	.word	0x01028711
 1014330:	01027da1 	.word	0x01027da1
 1014334:	01027cf1 	.word	0x01027cf1
 1014338:	0101845d 	.word	0x0101845d
 101433c:	01018435 	.word	0x01018435
 1014340:	01018691 	.word	0x01018691
 1014344:	010185e9 	.word	0x010185e9
 1014348:	01018dad 	.word	0x01018dad
 101434c:	01018695 	.word	0x01018695
 1014350:	01019c95 	.word	0x01019c95
 1014354:	01019c29 	.word	0x01019c29
 1014358:	0101b3cd 	.word	0x0101b3cd
 101435c:	0101b38d 	.word	0x0101b38d
 1014360:	0101b9ed 	.word	0x0101b9ed
 1014364:	0101b895 	.word	0x0101b895
 1014368:	0101919d 	.word	0x0101919d
 101436c:	01018f91 	.word	0x01018f91
 1014370:	01026b39 	.word	0x01026b39
 1014374:	01026a8d 	.word	0x01026a8d
 1014378:	01026971 	.word	0x01026971
 101437c:	0102681d 	.word	0x0102681d
 1014380:	01019fc9 	.word	0x01019fc9
 1014384:	01019f81 	.word	0x01019f81
 1014388:	010164c5 	.word	0x010164c5
 101438c:	0102bf25 	.word	0x0102bf25
 1014390:	0102c471 	.word	0x0102c471
 1014394:	010264f1 	.word	0x010264f1
 1014398:	010264d1 	.word	0x010264d1
 101439c:	01026de5 	.word	0x01026de5
 10143a0:	01026d21 	.word	0x01026d21
 10143a4:	010164a5 	.word	0x010164a5
		c1219_ptr->c1218_dll->tx_data_length = c1219_ptr->count + 4;
 10143a8:	3304      	adds	r3, #4
 10143aa:	f8a0 30c0 	strh.w	r3, [r0, #192]	; 0xc0
		c1219_ptr->c1218_dll->tx_data[k++] = SERVICE_R_OK;								
 10143ae:	6873      	ldr	r3, [r6, #4]
		memcpy(&c1219_ptr->c1218_dll->tx_data[READ_R_DATA_INDEX], &c1219_ptr->c1218_dll->st_08_data[c1219_ptr->offset], c1219_ptr->count);
 10143b0:	4f1d      	ldr	r7, [pc, #116]	; (1014428 <C1219_pread_offset_service+0xdb8>)
		c1219_ptr->c1218_dll->tx_data[k++] = SERVICE_R_OK;								
 10143b2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 10143b6:	2200      	movs	r2, #0
 10143b8:	701a      	strb	r2, [r3, #0]
		c1219_ptr->c1218_dll->tx_data[k++] = (uint8_t)((c1219_ptr->count & 0xFF00) >> 8);
 10143ba:	6872      	ldr	r2, [r6, #4]
 10143bc:	6b73      	ldr	r3, [r6, #52]	; 0x34
 10143be:	f8d2 20bc 	ldr.w	r2, [r2, #188]	; 0xbc
 10143c2:	0a1b      	lsrs	r3, r3, #8
 10143c4:	7053      	strb	r3, [r2, #1]
		c1219_ptr->c1218_dll->tx_data[k++] = (uint8_t)((c1219_ptr->count & 0x00FF) >> 0);	
 10143c6:	6873      	ldr	r3, [r6, #4]
 10143c8:	6b72      	ldr	r2, [r6, #52]	; 0x34
 10143ca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 10143ce:	709a      	strb	r2, [r3, #2]
		memcpy(&c1219_ptr->c1218_dll->tx_data[READ_R_DATA_INDEX], &c1219_ptr->c1218_dll->st_08_data[c1219_ptr->offset], c1219_ptr->count);
 10143d0:	6871      	ldr	r1, [r6, #4]
 10143d2:	6b33      	ldr	r3, [r6, #48]	; 0x30
 10143d4:	f8d1 00bc 	ldr.w	r0, [r1, #188]	; 0xbc
 10143d8:	6b72      	ldr	r2, [r6, #52]	; 0x34
 10143da:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 10143de:	4419      	add	r1, r3
 10143e0:	3003      	adds	r0, #3
 10143e2:	47b8      	blx	r7
		c1219_ptr->c1218_dll->tx_data[k++] = CRC_2s_complement(&c1219_ptr->c1218_dll->tx_data[3], c1219_ptr->count);
 10143e4:	6873      	ldr	r3, [r6, #4]
		k += c1219_ptr->count;
 10143e6:	6b71      	ldr	r1, [r6, #52]	; 0x34
		c1219_ptr->c1218_dll->tx_data[k++] = CRC_2s_complement(&c1219_ptr->c1218_dll->tx_data[3], c1219_ptr->count);
 10143e8:	f8d3 80bc 	ldr.w	r8, [r3, #188]	; 0xbc
 10143ec:	4b0f      	ldr	r3, [pc, #60]	; (101442c <C1219_pread_offset_service+0xdbc>)
 10143ee:	f108 0003 	add.w	r0, r8, #3
		k += c1219_ptr->count;
 10143f2:	1ccf      	adds	r7, r1, #3
		c1219_ptr->c1218_dll->tx_data[k++] = CRC_2s_complement(&c1219_ptr->c1218_dll->tx_data[3], c1219_ptr->count);
 10143f4:	b289      	uxth	r1, r1
 10143f6:	4798      	blx	r3
 10143f8:	b2ff      	uxtb	r7, r7
		C1218_send_response(c1219_ptr->c1218_dll);
 10143fa:	4b0d      	ldr	r3, [pc, #52]	; (1014430 <C1219_pread_offset_service+0xdc0>)
		c1219_ptr->c1218_dll->tx_data[k++] = CRC_2s_complement(&c1219_ptr->c1218_dll->tx_data[3], c1219_ptr->count);
 10143fc:	f808 0007 	strb.w	r0, [r8, r7]
		C1218_send_response(c1219_ptr->c1218_dll);
 1014400:	6870      	ldr	r0, [r6, #4]
 1014402:	4798      	blx	r3
 1014404:	f7ff ba3b 	b.w	101387e <C1219_pread_offset_service+0x20e>
			LP_APP_vGet_data_block_fifo_table( block_start, (block_end - block_start + 1), &c1219_ptr->c1218_dll->tx_data[k] );
 1014408:	f241 73b4 	movw	r3, #6068	; 0x17b4
 101440c:	fb03 4306 	mla	r3, r3, r6, r4
 1014410:	8811      	ldrh	r1, [r2, #0]
 1014412:	685b      	ldr	r3, [r3, #4]
 1014414:	f8b8 0000 	ldrh.w	r0, [r8]
 1014418:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 101441c:	4b05      	ldr	r3, [pc, #20]	; (1014434 <C1219_pread_offset_service+0xdc4>)
 101441e:	e519      	b.n	1013e54 <C1219_pread_offset_service+0x7e4>
 1014420:	f8a8 9000 	strh.w	r9, [r8]
 1014424:	e500      	b.n	1013e28 <C1219_pread_offset_service+0x7b8>
 1014426:	bf00      	nop
 1014428:	01030a3d 	.word	0x01030a3d
 101442c:	01016bf5 	.word	0x01016bf5
 1014430:	0101637d 	.word	0x0101637d
 1014434:	0101ca29 	.word	0x0101ca29

01014438 <C1219_full_write_service>:
void C1219_full_write_service(C1218_DLL_TYPE *c1218_dll_ptr, C1218_APL_TYPE c1218_apl) {	
 1014438:	b084      	sub	sp, #16
 101443a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 101443e:	b089      	sub	sp, #36	; 0x24
 1014440:	ac13      	add	r4, sp, #76	; 0x4c
 1014442:	e884 000e 	stmia.w	r4, {r1, r2, r3}
		if (c1219[instance].busy_instance == false) break;
 1014446:	4dbd      	ldr	r5, [pc, #756]	; (101473c <C1219_full_write_service+0x304>)
	for ( instance = 0; instance < NBR_C1219_INSTANCES; instance++ ) {
 1014448:	4fbd      	ldr	r7, [pc, #756]	; (1014740 <C1219_full_write_service+0x308>)
		if (c1219[instance].busy_instance == false) break;
 101444a:	782e      	ldrb	r6, [r5, #0]
 101444c:	f8bd 804e 	ldrh.w	r8, [sp, #78]	; 0x4e
	for ( instance = 0; instance < NBR_C1219_INSTANCES; instance++ ) {
 1014450:	2200      	movs	r2, #0
 1014452:	703a      	strb	r2, [r7, #0]
		if (c1219[instance].busy_instance == false) break;
 1014454:	b1ee      	cbz	r6, 1014492 <C1219_full_write_service+0x5a>
 1014456:	f241 72b4 	movw	r2, #6068	; 0x17b4
	for ( instance = 0; instance < NBR_C1219_INSTANCES; instance++ ) {
 101445a:	2301      	movs	r3, #1
		if (c1219[instance].busy_instance == false) break;
 101445c:	5caa      	ldrb	r2, [r5, r2]
	for ( instance = 0; instance < NBR_C1219_INSTANCES; instance++ ) {
 101445e:	703b      	strb	r3, [r7, #0]
		if (c1219[instance].busy_instance == false) break;
 1014460:	b1b2      	cbz	r2, 1014490 <C1219_full_write_service+0x58>
 1014462:	f642 7368 	movw	r3, #12136	; 0x2f68
 1014466:	5ceb      	ldrb	r3, [r5, r3]
 1014468:	2b00      	cmp	r3, #0
 101446a:	f000 810c 	beq.w	1014686 <C1219_full_write_service+0x24e>
 101446e:	f244 731c 	movw	r3, #18204	; 0x471c
 1014472:	5ceb      	ldrb	r3, [r5, r3]
 1014474:	2b00      	cmp	r3, #0
 1014476:	f000 810a 	beq.w	101468e <C1219_full_write_service+0x256>
	if ( c1219[instance].busy_instance == false ) {
 101447a:	f645 62d0 	movw	r2, #24272	; 0x5ed0
 101447e:	2304      	movs	r3, #4
 1014480:	5caa      	ldrb	r2, [r5, r2]
 1014482:	703b      	strb	r3, [r7, #0]
 1014484:	b122      	cbz	r2, 1014490 <C1219_full_write_service+0x58>
}
 1014486:	b009      	add	sp, #36	; 0x24
 1014488:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 101448c:	b004      	add	sp, #16
 101448e:	4770      	bx	lr
	if ( c1219[instance].busy_instance == false ) {
 1014490:	461e      	mov	r6, r3
 1014492:	4684      	mov	ip, r0
		c1219[instance].c1218_apl = c1218_apl;
 1014494:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
		c1219[instance].busy_instance = true;
 1014496:	f241 79b4 	movw	r9, #6068	; 0x17b4
 101449a:	fb09 f606 	mul.w	r6, r9, r6
 101449e:	eb05 0b06 	add.w	fp, r5, r6
		c1219[instance].c1218_apl = c1218_apl;
 10144a2:	f10b 0e08 	add.w	lr, fp, #8
 10144a6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 10144aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 10144ac:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
		EVNT_APP_vRegister_event(END_DEVICE_ACCESSED_FOR_WRITE, 0, true, c1218_apl.user_id, rtc.utc_timestamp);
 10144b0:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 101477c <C1219_full_write_service+0x344>
		c1219[instance].c1218_apl = c1218_apl;
 10144b4:	6820      	ldr	r0, [r4, #0]
		EVNT_APP_vRegister_event(END_DEVICE_ACCESSED_FOR_WRITE, 0, true, c1218_apl.user_id, rtc.utc_timestamp);
 10144b6:	f8da 3004 	ldr.w	r3, [sl, #4]
 10144ba:	9300      	str	r3, [sp, #0]
		c1219[instance].busy_instance = true;
 10144bc:	2401      	movs	r4, #1
		EVNT_APP_vRegister_event(END_DEVICE_ACCESSED_FOR_WRITE, 0, true, c1218_apl.user_id, rtc.utc_timestamp);
 10144be:	4622      	mov	r2, r4
		c1219[instance].c1218_dll = c1218_dll_ptr;
 10144c0:	f8cb c004 	str.w	ip, [fp, #4]
		EVNT_APP_vRegister_event(END_DEVICE_ACCESSED_FOR_WRITE, 0, true, c1218_apl.user_id, rtc.utc_timestamp);
 10144c4:	4643      	mov	r3, r8
 10144c6:	2100      	movs	r1, #0
		c1219[instance].c1218_apl = c1218_apl;
 10144c8:	f8ce 0000 	str.w	r0, [lr]
		EVNT_APP_vRegister_event(END_DEVICE_ACCESSED_FOR_WRITE, 0, true, c1218_apl.user_id, rtc.utc_timestamp);
 10144cc:	f8df b2b0 	ldr.w	fp, [pc, #688]	; 1014780 <C1219_full_write_service+0x348>
		c1219[instance].busy_instance = true;
 10144d0:	55ac      	strb	r4, [r5, r6]
		EVNT_APP_vRegister_event(END_DEVICE_ACCESSED_FOR_WRITE, 0, true, c1218_apl.user_id, rtc.utc_timestamp);
 10144d2:	2008      	movs	r0, #8
 10144d4:	47d8      	blx	fp
		if ( c1219[instance].c1218_dll->uart == OP_UART ) {
 10144d6:	783b      	ldrb	r3, [r7, #0]
 10144d8:	499a      	ldr	r1, [pc, #616]	; (1014744 <C1219_full_write_service+0x30c>)
 10144da:	fb09 5203 	mla	r2, r9, r3, r5
 10144de:	6850      	ldr	r0, [r2, #4]
 10144e0:	f8d0 2204 	ldr.w	r2, [r0, #516]	; 0x204
 10144e4:	428a      	cmp	r2, r1
 10144e6:	f000 80dd 	beq.w	10146a4 <C1219_full_write_service+0x26c>
		else if ( c1219[instance].c1218_dll->uart == NIC_UART ) {
 10144ea:	4997      	ldr	r1, [pc, #604]	; (1014748 <C1219_full_write_service+0x310>)
 10144ec:	428a      	cmp	r2, r1
 10144ee:	f000 80e7 	beq.w	10146c0 <C1219_full_write_service+0x288>
		c1219[instance].table_id = 0;
 10144f2:	f241 74b4 	movw	r4, #6068	; 0x17b4
 10144f6:	fb04 5303 	mla	r3, r4, r3, r5
 10144fa:	f04f 0e00 	mov.w	lr, #0
 10144fe:	f8a3 e02c 	strh.w	lr, [r3, #44]	; 0x2c
		c1219[instance].table_id |= (uint16_t)(c1219[instance].c1218_dll->rx_data[SERVICE_INDEX + 1] << 8);
 1014502:	6882      	ldr	r2, [r0, #8]
		cksum_rx = c1219[instance].c1218_dll->rx_data[SERVICE_INDEX + c1219[instance].count + 5];
 1014504:	4e91      	ldr	r6, [pc, #580]	; (101474c <C1219_full_write_service+0x314>)
		c1219[instance].table_id |= (uint16_t)(c1219[instance].c1218_dll->rx_data[SERVICE_INDEX + 1] << 8);
 1014506:	7852      	ldrb	r2, [r2, #1]
		cksum_calc = CRC_2s_complement(&c1219[instance].c1218_dll->rx_data[SERVICE_INDEX + 5], c1219[instance].count);
 1014508:	f8df c278 	ldr.w	ip, [pc, #632]	; 1014784 <C1219_full_write_service+0x34c>
 101450c:	f8df 9278 	ldr.w	r9, [pc, #632]	; 1014788 <C1219_full_write_service+0x350>
		c1219[instance].table_id |= (uint16_t)(c1219[instance].c1218_dll->rx_data[SERVICE_INDEX + 1] << 8);
 1014510:	0212      	lsls	r2, r2, #8
 1014512:	859a      	strh	r2, [r3, #44]	; 0x2c
		c1219[instance].table_id |= (uint16_t)(c1219[instance].c1218_dll->rx_data[SERVICE_INDEX + 2] << 0);
 1014514:	6881      	ldr	r1, [r0, #8]
 1014516:	7889      	ldrb	r1, [r1, #2]
		c1219[instance].count = 0;
 1014518:	f8c3 e034 	str.w	lr, [r3, #52]	; 0x34
		c1219[instance].table_id |= (uint16_t)(c1219[instance].c1218_dll->rx_data[SERVICE_INDEX + 2] << 0);
 101451c:	430a      	orrs	r2, r1
 101451e:	859a      	strh	r2, [r3, #44]	; 0x2c
		c1219[instance].count |= (uint16_t)(c1219[instance].c1218_dll->rx_data[SERVICE_INDEX + 3] << 8);
 1014520:	6881      	ldr	r1, [r0, #8]
 1014522:	78c9      	ldrb	r1, [r1, #3]
 1014524:	0209      	lsls	r1, r1, #8
 1014526:	6359      	str	r1, [r3, #52]	; 0x34
		c1219[instance].count |= (uint16_t)(c1219[instance].c1218_dll->rx_data[SERVICE_INDEX + 4] << 0);
 1014528:	6882      	ldr	r2, [r0, #8]
 101452a:	f892 e004 	ldrb.w	lr, [r2, #4]
 101452e:	ea4e 0101 	orr.w	r1, lr, r1
 1014532:	6359      	str	r1, [r3, #52]	; 0x34
		cksum_rx = c1219[instance].c1218_dll->rx_data[SERVICE_INDEX + c1219[instance].count + 5];
 1014534:	6880      	ldr	r0, [r0, #8]
 1014536:	1843      	adds	r3, r0, r1
		cksum_calc = CRC_2s_complement(&c1219[instance].c1218_dll->rx_data[SERVICE_INDEX + 5], c1219[instance].count);
 1014538:	3005      	adds	r0, #5
		cksum_rx = c1219[instance].c1218_dll->rx_data[SERVICE_INDEX + c1219[instance].count + 5];
 101453a:	795b      	ldrb	r3, [r3, #5]
 101453c:	7033      	strb	r3, [r6, #0]
		cksum_calc = CRC_2s_complement(&c1219[instance].c1218_dll->rx_data[SERVICE_INDEX + 5], c1219[instance].count);
 101453e:	47e0      	blx	ip
		EVNT_APP_vRegister_event(TABLE_WRITTEN_TO, c1219[instance].table_id, true, c1218_apl.user_id, rtc.utc_timestamp);
 1014540:	783a      	ldrb	r2, [r7, #0]
 1014542:	f8da 3004 	ldr.w	r3, [sl, #4]
 1014546:	9300      	str	r3, [sp, #0]
 1014548:	fb04 5202 	mla	r2, r4, r2, r5
 101454c:	4643      	mov	r3, r8
 101454e:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
		cksum_calc = CRC_2s_complement(&c1219[instance].c1218_dll->rx_data[SERVICE_INDEX + 5], c1219[instance].count);
 1014550:	f889 0000 	strb.w	r0, [r9]
		EVNT_APP_vRegister_event(TABLE_WRITTEN_TO, c1219[instance].table_id, true, c1218_apl.user_id, rtc.utc_timestamp);
 1014554:	2201      	movs	r2, #1
 1014556:	200a      	movs	r0, #10
 1014558:	47d8      	blx	fp
		if (cksum_rx == cksum_calc) {
 101455a:	7832      	ldrb	r2, [r6, #0]
 101455c:	f899 3000 	ldrb.w	r3, [r9]
 1014560:	429a      	cmp	r2, r3
 1014562:	d011      	beq.n	1014588 <C1219_full_write_service+0x150>
			C1218_send_err(c1219[instance].c1218_dll);
 1014564:	783b      	ldrb	r3, [r7, #0]
 1014566:	4a7a      	ldr	r2, [pc, #488]	; (1014750 <C1219_full_write_service+0x318>)
 1014568:	fb04 5403 	mla	r4, r4, r3, r5
 101456c:	6860      	ldr	r0, [r4, #4]
 101456e:	4790      	blx	r2
		c1219[instance].busy_instance = false;
 1014570:	783a      	ldrb	r2, [r7, #0]
 1014572:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1014576:	fb03 f302 	mul.w	r3, r3, r2
 101457a:	2200      	movs	r2, #0
 101457c:	54ea      	strb	r2, [r5, r3]
}
 101457e:	b009      	add	sp, #36	; 0x24
 1014580:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1014584:	b004      	add	sp, #16
 1014586:	4770      	bx	lr
			memcpy(&user_info.password, &c1218_apl.password, 20);
 1014588:	ab12      	add	r3, sp, #72	; 0x48
				.tbl_proc_id			= (c1219[instance].table_id & TBL_PROC_NBR_bm) >> TBL_PROC_NBR_bp,
 101458a:	783a      	ldrb	r2, [r7, #0]
			memcpy(&user_info.password, &c1218_apl.password, 20);
 101458c:	f853 1f12 	ldr.w	r1, [r3, #18]!
 1014590:	f8cd 100b 	str.w	r1, [sp, #11]
 1014594:	6919      	ldr	r1, [r3, #16]
 1014596:	68de      	ldr	r6, [r3, #12]
 1014598:	f8cd 101b 	str.w	r1, [sp, #27]
			SECURITY_USER_INFO_TYPE user_info = {
 101459c:	f89d 006e 	ldrb.w	r0, [sp, #110]	; 0x6e
			memcpy(&user_info.password, &c1218_apl.password, 20);
 10145a0:	6859      	ldr	r1, [r3, #4]
 10145a2:	f8cd 6017 	str.w	r6, [sp, #23]
 10145a6:	f8cd 100f 	str.w	r1, [sp, #15]
 10145aa:	689e      	ldr	r6, [r3, #8]
			SECURITY_USER_INFO_TYPE user_info = {
 10145ac:	f88d 001f 	strb.w	r0, [sp, #31]
			if ( SECR_APP_bCheck_access_to_write_table(user_info) ) {
 10145b0:	ab08      	add	r3, sp, #32
 10145b2:	e913 0003 	ldmdb	r3, {r0, r1}
				.tbl_proc_id			= (c1219[instance].table_id & TBL_PROC_NBR_bm) >> TBL_PROC_NBR_bp,
 10145b6:	fb04 5202 	mla	r2, r4, r2, r5
			memcpy(&user_info.password, &c1218_apl.password, 20);
 10145ba:	f8cd 6013 	str.w	r6, [sp, #19]
				.tbl_proc_id			= (c1219[instance].table_id & TBL_PROC_NBR_bm) >> TBL_PROC_NBR_bp,
 10145be:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
			if ( SECR_APP_bCheck_access_to_write_table(user_info) ) {
 10145c0:	4e64      	ldr	r6, [pc, #400]	; (1014754 <C1219_full_write_service+0x31c>)
 10145c2:	e88d 0003 	stmia.w	sp, {r0, r1}
				.tbl_proc_id			= (c1219[instance].table_id & TBL_PROC_NBR_bm) >> TBL_PROC_NBR_bp,
 10145c6:	f3c2 030a 	ubfx	r3, r2, #0, #11
				.mfg_flag				= (bool)((c1219[instance].table_id & STD_VS_MFG_FLAG_bm) >> STD_VS_MFG_FLAG_bp),
 10145ca:	f3c2 22c0 	ubfx	r2, r2, #11, #1
			SECURITY_USER_INFO_TYPE user_info = {
 10145ce:	f8ad 3008 	strh.w	r3, [sp, #8]
 10145d2:	f88d 200a 	strb.w	r2, [sp, #10]
 10145d6:	ab02      	add	r3, sp, #8
			if ( SECR_APP_bCheck_access_to_write_table(user_info) ) {
 10145d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 10145da:	47b0      	blx	r6
 10145dc:	2800      	cmp	r0, #0
 10145de:	d05a      	beq.n	1014696 <C1219_full_write_service+0x25e>
				switch ( c1219[instance].table_id ) {
 10145e0:	783e      	ldrb	r6, [r7, #0]
 10145e2:	fb04 5406 	mla	r4, r4, r6, r5
 10145e6:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 10145e8:	2b2c      	cmp	r3, #44	; 0x2c
 10145ea:	f000 8287 	beq.w	1014afc <C1219_full_write_service+0x6c4>
 10145ee:	d92b      	bls.n	1014648 <C1219_full_write_service+0x210>
 10145f0:	2b4a      	cmp	r3, #74	; 0x4a
 10145f2:	f000 81be 	beq.w	1014972 <C1219_full_write_service+0x53a>
 10145f6:	f240 808c 	bls.w	1014712 <C1219_full_write_service+0x2da>
 10145fa:	f640 0203 	movw	r2, #2051	; 0x803
 10145fe:	4293      	cmp	r3, r2
 1014600:	f000 811c 	beq.w	101483c <C1219_full_write_service+0x404>
 1014604:	f240 8104 	bls.w	1014810 <C1219_full_write_service+0x3d8>
 1014608:	f640 0205 	movw	r2, #2053	; 0x805
 101460c:	4293      	cmp	r3, r2
 101460e:	f000 81d9 	beq.w	10149c4 <C1219_full_write_service+0x58c>
 1014612:	f0c0 81c8 	bcc.w	10149a6 <C1219_full_write_service+0x56e>
 1014616:	f640 0235 	movw	r2, #2101	; 0x835
 101461a:	4293      	cmp	r3, r2
 101461c:	f000 81b4 	beq.w	1014988 <C1219_full_write_service+0x550>
 1014620:	f640 0249 	movw	r2, #2121	; 0x849
 1014624:	4293      	cmp	r3, r2
 1014626:	f040 8081 	bne.w	101472c <C1219_full_write_service+0x2f4>
	c1219_ptr->table_size = EVNT_APP_usMt_73_get_size();
 101462a:	4b4b      	ldr	r3, [pc, #300]	; (1014758 <C1219_full_write_service+0x320>)
 101462c:	4798      	blx	r3
 101462e:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1014632:	fb03 5606 	mla	r6, r3, r6, r5
	c1219_ptr->execute_table_writing = EVNT_APP_bMt_73_execute_table_writing;
 1014636:	f241 72b0 	movw	r2, #6064	; 0x17b0
 101463a:	4948      	ldr	r1, [pc, #288]	; (101475c <C1219_full_write_service+0x324>)
	c1219_ptr->table_size = EVNT_APP_usMt_73_get_size();
 101463c:	8730      	strh	r0, [r6, #56]	; 0x38
	C1219_full_write(c1219_ptr);
 101463e:	4b48      	ldr	r3, [pc, #288]	; (1014760 <C1219_full_write_service+0x328>)
	c1219_ptr->execute_table_writing = EVNT_APP_bMt_73_execute_table_writing;
 1014640:	50b1      	str	r1, [r6, r2]
	C1219_full_write(c1219_ptr);
 1014642:	4630      	mov	r0, r6
 1014644:	4798      	blx	r3
 1014646:	e793      	b.n	1014570 <C1219_full_write_service+0x138>
				switch ( c1219[instance].table_id ) {
 1014648:	2b17      	cmp	r3, #23
 101464a:	f000 8262 	beq.w	1014b12 <C1219_full_write_service+0x6da>
 101464e:	d845      	bhi.n	10146dc <C1219_full_write_service+0x2a4>
 1014650:	2b0b      	cmp	r3, #11
 1014652:	f000 8118 	beq.w	1014886 <C1219_full_write_service+0x44e>
 1014656:	f240 80b0 	bls.w	10147ba <C1219_full_write_service+0x382>
 101465a:	2b15      	cmp	r3, #21
 101465c:	f000 81cc 	beq.w	10149f8 <C1219_full_write_service+0x5c0>
 1014660:	f200 81bb 	bhi.w	10149da <C1219_full_write_service+0x5a2>
 1014664:	2b0d      	cmp	r3, #13
 1014666:	d161      	bne.n	101472c <C1219_full_write_service+0x2f4>
	c1219_ptr->table_size = REGS_APP_usSt_13_get_size();
 1014668:	4b3e      	ldr	r3, [pc, #248]	; (1014764 <C1219_full_write_service+0x32c>)
 101466a:	4798      	blx	r3
 101466c:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1014670:	fb03 5606 	mla	r6, r3, r6, r5
	c1219_ptr->execute_table_writing = REGS_APP_bSt_13_execute_table_writing;
 1014674:	f241 72b0 	movw	r2, #6064	; 0x17b0
 1014678:	493b      	ldr	r1, [pc, #236]	; (1014768 <C1219_full_write_service+0x330>)
	c1219_ptr->table_size = REGS_APP_usSt_13_get_size();
 101467a:	8730      	strh	r0, [r6, #56]	; 0x38
	C1219_full_write(c1219_ptr);
 101467c:	4b38      	ldr	r3, [pc, #224]	; (1014760 <C1219_full_write_service+0x328>)
	c1219_ptr->execute_table_writing = REGS_APP_bSt_13_execute_table_writing;
 101467e:	50b1      	str	r1, [r6, r2]
	C1219_full_write(c1219_ptr);
 1014680:	4630      	mov	r0, r6
 1014682:	4798      	blx	r3
 1014684:	e774      	b.n	1014570 <C1219_full_write_service+0x138>
	for ( instance = 0; instance < NBR_C1219_INSTANCES; instance++ ) {
 1014686:	2302      	movs	r3, #2
		if (c1219[instance].busy_instance == false) break;
 1014688:	461e      	mov	r6, r3
 101468a:	703b      	strb	r3, [r7, #0]
 101468c:	e701      	b.n	1014492 <C1219_full_write_service+0x5a>
	for ( instance = 0; instance < NBR_C1219_INSTANCES; instance++ ) {
 101468e:	2303      	movs	r3, #3
		if (c1219[instance].busy_instance == false) break;
 1014690:	461e      	mov	r6, r3
 1014692:	703b      	strb	r3, [r7, #0]
 1014694:	e6fd      	b.n	1014492 <C1219_full_write_service+0x5a>
				C1218_send_isc(c1219[instance].c1218_dll);
 1014696:	783b      	ldrb	r3, [r7, #0]
 1014698:	4a34      	ldr	r2, [pc, #208]	; (101476c <C1219_full_write_service+0x334>)
 101469a:	fb04 5403 	mla	r4, r4, r3, r5
 101469e:	6860      	ldr	r0, [r4, #4]
 10146a0:	4790      	blx	r2
 10146a2:	e765      	b.n	1014570 <C1219_full_write_service+0x138>
			EVNT_APP_vRegister_event(END_DEVICE_ACCESSED_FOR_WRITE_OP, 0, 0, c1218_apl.user_id, rtc.utc_timestamp);
 10146a4:	f8da 3004 	ldr.w	r3, [sl, #4]
 10146a8:	9300      	str	r3, [sp, #0]
 10146aa:	2200      	movs	r2, #0
 10146ac:	4643      	mov	r3, r8
 10146ae:	2016      	movs	r0, #22
 10146b0:	4611      	mov	r1, r2
 10146b2:	47d8      	blx	fp
 10146b4:	783b      	ldrb	r3, [r7, #0]
 10146b6:	fb09 5903 	mla	r9, r9, r3, r5
 10146ba:	f8d9 0004 	ldr.w	r0, [r9, #4]
 10146be:	e718      	b.n	10144f2 <C1219_full_write_service+0xba>
			EVNT_APP_vRegister_event(END_DEVICE_ACCESSED_FOR_WRITE_NIC, 0, 0, c1218_apl.user_id, rtc.utc_timestamp);
 10146c0:	f8da 3004 	ldr.w	r3, [sl, #4]
 10146c4:	9300      	str	r3, [sp, #0]
 10146c6:	2200      	movs	r2, #0
 10146c8:	4643      	mov	r3, r8
 10146ca:	2017      	movs	r0, #23
 10146cc:	4611      	mov	r1, r2
 10146ce:	47d8      	blx	fp
 10146d0:	783b      	ldrb	r3, [r7, #0]
 10146d2:	fb09 5903 	mla	r9, r9, r3, r5
 10146d6:	f8d9 0004 	ldr.w	r0, [r9, #4]
 10146da:	e70a      	b.n	10144f2 <C1219_full_write_service+0xba>
				switch ( c1219[instance].table_id ) {
 10146dc:	2b1b      	cmp	r3, #27
 10146de:	f000 80dd 	beq.w	101489c <C1219_full_write_service+0x464>
 10146e2:	f240 8081 	bls.w	10147e8 <C1219_full_write_service+0x3b0>
 10146e6:	2b2a      	cmp	r3, #42	; 0x2a
 10146e8:	f000 80f2 	beq.w	10148d0 <C1219_full_write_service+0x498>
 10146ec:	f200 80e1 	bhi.w	10148b2 <C1219_full_write_service+0x47a>
 10146f0:	2b29      	cmp	r3, #41	; 0x29
 10146f2:	d11b      	bne.n	101472c <C1219_full_write_service+0x2f4>
	c1219_ptr->table_size = SECR_APP_usSt_41_get_size();
 10146f4:	4b1e      	ldr	r3, [pc, #120]	; (1014770 <C1219_full_write_service+0x338>)
 10146f6:	4798      	blx	r3
 10146f8:	f241 73b4 	movw	r3, #6068	; 0x17b4
 10146fc:	fb03 5606 	mla	r6, r3, r6, r5
	c1219_ptr->execute_table_writing = SECR_APP_bSt_41_execute_table_writing;
 1014700:	f241 72b0 	movw	r2, #6064	; 0x17b0
 1014704:	491b      	ldr	r1, [pc, #108]	; (1014774 <C1219_full_write_service+0x33c>)
	c1219_ptr->table_size = SECR_APP_usSt_41_get_size();
 1014706:	8730      	strh	r0, [r6, #56]	; 0x38
	C1219_full_write(c1219_ptr);
 1014708:	4b15      	ldr	r3, [pc, #84]	; (1014760 <C1219_full_write_service+0x328>)
	c1219_ptr->execute_table_writing = SECR_APP_bSt_41_execute_table_writing;
 101470a:	50b1      	str	r1, [r6, r2]
	C1219_full_write(c1219_ptr);
 101470c:	4630      	mov	r0, r6
 101470e:	4798      	blx	r3
 1014710:	e72e      	b.n	1014570 <C1219_full_write_service+0x138>
				switch ( c1219[instance].table_id ) {
 1014712:	2b3d      	cmp	r3, #61	; 0x3d
 1014714:	f000 8108 	beq.w	1014928 <C1219_full_write_service+0x4f0>
 1014718:	d938      	bls.n	101478c <C1219_full_write_service+0x354>
 101471a:	2b47      	cmp	r3, #71	; 0x47
 101471c:	f000 811e 	beq.w	101495c <C1219_full_write_service+0x524>
 1014720:	2b49      	cmp	r3, #73	; 0x49
 1014722:	f000 810c 	beq.w	101493e <C1219_full_write_service+0x506>
 1014726:	2b3e      	cmp	r3, #62	; 0x3e
 1014728:	f000 80ef 	beq.w	101490a <C1219_full_write_service+0x4d2>
						C1218_send_iar(c1219[instance].c1218_dll);
 101472c:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1014730:	fb03 5606 	mla	r6, r3, r6, r5
 1014734:	4b10      	ldr	r3, [pc, #64]	; (1014778 <C1219_full_write_service+0x340>)
 1014736:	6870      	ldr	r0, [r6, #4]
 1014738:	4798      	blx	r3
						break;
 101473a:	e719      	b.n	1014570 <C1219_full_write_service+0x138>
 101473c:	2001064c 	.word	0x2001064c
 1014740:	20000928 	.word	0x20000928
 1014744:	48004000 	.word	0x48004000
 1014748:	400e0600 	.word	0x400e0600
 101474c:	20000914 	.word	0x20000914
 1014750:	01016465 	.word	0x01016465
 1014754:	0102b37d 	.word	0x0102b37d
 1014758:	01018d95 	.word	0x01018d95
 101475c:	01018d11 	.word	0x01018d11
 1014760:	010104e9 	.word	0x010104e9
 1014764:	01026971 	.word	0x01026971
 1014768:	010268e1 	.word	0x010268e1
 101476c:	01016485 	.word	0x01016485
 1014770:	0102ac29 	.word	0x0102ac29
 1014774:	0102abc5 	.word	0x0102abc5
 1014778:	010164c5 	.word	0x010164c5
 101477c:	20017160 	.word	0x20017160
 1014780:	01019961 	.word	0x01019961
 1014784:	01016bf5 	.word	0x01016bf5
 1014788:	20000912 	.word	0x20000912
				switch ( c1219[instance].table_id ) {
 101478c:	2b35      	cmp	r3, #53	; 0x35
 101478e:	f000 81aa 	beq.w	1014ae6 <C1219_full_write_service+0x6ae>
 1014792:	2b36      	cmp	r3, #54	; 0x36
 1014794:	f000 8198 	beq.w	1014ac8 <C1219_full_write_service+0x690>
 1014798:	2b33      	cmp	r3, #51	; 0x33
 101479a:	d1c7      	bne.n	101472c <C1219_full_write_service+0x2f4>
	c1219_ptr->table_size = TOU_APP_usSt_51_get_size();
 101479c:	4b9c      	ldr	r3, [pc, #624]	; (1014a10 <C1219_full_write_service+0x5d8>)
 101479e:	4798      	blx	r3
 10147a0:	f241 73b4 	movw	r3, #6068	; 0x17b4
 10147a4:	fb03 5606 	mla	r6, r3, r6, r5
	c1219_ptr->execute_table_writing = TOU_APP_bSt_51_execute_table_writing;
 10147a8:	f241 72b0 	movw	r2, #6064	; 0x17b0
 10147ac:	4999      	ldr	r1, [pc, #612]	; (1014a14 <C1219_full_write_service+0x5dc>)
	c1219_ptr->table_size = TOU_APP_usSt_51_get_size();
 10147ae:	8730      	strh	r0, [r6, #56]	; 0x38
	C1219_full_write(c1219_ptr);
 10147b0:	4b99      	ldr	r3, [pc, #612]	; (1014a18 <C1219_full_write_service+0x5e0>)
	c1219_ptr->execute_table_writing = TOU_APP_bSt_51_execute_table_writing;
 10147b2:	50b1      	str	r1, [r6, r2]
	C1219_full_write(c1219_ptr);
 10147b4:	4630      	mov	r0, r6
 10147b6:	4798      	blx	r3
 10147b8:	e6da      	b.n	1014570 <C1219_full_write_service+0x138>
				switch ( c1219[instance].table_id ) {
 10147ba:	2b06      	cmp	r3, #6
 10147bc:	f000 809a 	beq.w	10148f4 <C1219_full_write_service+0x4bc>
 10147c0:	2b07      	cmp	r3, #7
 10147c2:	f000 8090 	beq.w	10148e6 <C1219_full_write_service+0x4ae>
 10147c6:	2b01      	cmp	r3, #1
 10147c8:	d1b0      	bne.n	101472c <C1219_full_write_service+0x2f4>
	c1219_ptr->table_size = GRAL_APP_usSt_1_get_size();
 10147ca:	4b94      	ldr	r3, [pc, #592]	; (1014a1c <C1219_full_write_service+0x5e4>)
 10147cc:	4798      	blx	r3
 10147ce:	f241 73b4 	movw	r3, #6068	; 0x17b4
 10147d2:	fb03 5606 	mla	r6, r3, r6, r5
	c1219_ptr->execute_table_writing = GRAL_APP_bSt_1_execute_table_writing;
 10147d6:	f241 72b0 	movw	r2, #6064	; 0x17b0
 10147da:	4991      	ldr	r1, [pc, #580]	; (1014a20 <C1219_full_write_service+0x5e8>)
	c1219_ptr->table_size = GRAL_APP_usSt_1_get_size();
 10147dc:	8730      	strh	r0, [r6, #56]	; 0x38
	C1219_full_write(c1219_ptr);
 10147de:	4b8e      	ldr	r3, [pc, #568]	; (1014a18 <C1219_full_write_service+0x5e0>)
	c1219_ptr->execute_table_writing = GRAL_APP_bSt_1_execute_table_writing;
 10147e0:	50b1      	str	r1, [r6, r2]
	C1219_full_write(c1219_ptr);
 10147e2:	4630      	mov	r0, r6
 10147e4:	4798      	blx	r3
 10147e6:	e6c3      	b.n	1014570 <C1219_full_write_service+0x138>
				switch ( c1219[instance].table_id ) {
 10147e8:	2b19      	cmp	r3, #25
 10147ea:	f000 81ac 	beq.w	1014b46 <C1219_full_write_service+0x70e>
 10147ee:	f200 819b 	bhi.w	1014b28 <C1219_full_write_service+0x6f0>
	c1219_ptr->table_size = REGS_APP_usSt_24_get_size();
 10147f2:	4b8c      	ldr	r3, [pc, #560]	; (1014a24 <C1219_full_write_service+0x5ec>)
 10147f4:	4798      	blx	r3
 10147f6:	f241 73b4 	movw	r3, #6068	; 0x17b4
 10147fa:	fb03 5606 	mla	r6, r3, r6, r5
	c1219_ptr->execute_table_writing = REGS_APP_bSt_24_execute_table_writing;
 10147fe:	f241 72b0 	movw	r2, #6064	; 0x17b0
 1014802:	4989      	ldr	r1, [pc, #548]	; (1014a28 <C1219_full_write_service+0x5f0>)
	c1219_ptr->table_size = REGS_APP_usSt_24_get_size();
 1014804:	8730      	strh	r0, [r6, #56]	; 0x38
	C1219_full_write(c1219_ptr);
 1014806:	4b84      	ldr	r3, [pc, #528]	; (1014a18 <C1219_full_write_service+0x5e0>)
	c1219_ptr->execute_table_writing = REGS_APP_bSt_24_execute_table_writing;
 1014808:	50b1      	str	r1, [r6, r2]
	C1219_full_write(c1219_ptr);
 101480a:	4630      	mov	r0, r6
 101480c:	4798      	blx	r3
 101480e:	e6af      	b.n	1014570 <C1219_full_write_service+0x138>
				switch ( c1219[instance].table_id ) {
 1014810:	2b4c      	cmp	r3, #76	; 0x4c
 1014812:	d02d      	beq.n	1014870 <C1219_full_write_service+0x438>
 1014814:	d31d      	bcc.n	1014852 <C1219_full_write_service+0x41a>
 1014816:	f640 0201 	movw	r2, #2049	; 0x801
 101481a:	4293      	cmp	r3, r2
 101481c:	d186      	bne.n	101472c <C1219_full_write_service+0x2f4>
	c1219_ptr->table_size = SM_APP_usMt_1_get_size();
 101481e:	4b83      	ldr	r3, [pc, #524]	; (1014a2c <C1219_full_write_service+0x5f4>)
 1014820:	4798      	blx	r3
 1014822:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1014826:	fb03 5606 	mla	r6, r3, r6, r5
	c1219_ptr->execute_table_writing = SM_APP_bMt_1_execute_table_writing;
 101482a:	f241 72b0 	movw	r2, #6064	; 0x17b0
 101482e:	4980      	ldr	r1, [pc, #512]	; (1014a30 <C1219_full_write_service+0x5f8>)
	c1219_ptr->table_size = SM_APP_usMt_1_get_size();
 1014830:	8730      	strh	r0, [r6, #56]	; 0x38
	C1219_full_write(c1219_ptr);
 1014832:	4b79      	ldr	r3, [pc, #484]	; (1014a18 <C1219_full_write_service+0x5e0>)
	c1219_ptr->execute_table_writing = SM_APP_bMt_1_execute_table_writing;
 1014834:	50b1      	str	r1, [r6, r2]
	C1219_full_write(c1219_ptr);
 1014836:	4630      	mov	r0, r6
 1014838:	4798      	blx	r3
 101483a:	e699      	b.n	1014570 <C1219_full_write_service+0x138>
	c1219_ptr->table_size = SM_APP_usMt_3_get_size();
 101483c:	4b7d      	ldr	r3, [pc, #500]	; (1014a34 <C1219_full_write_service+0x5fc>)
 101483e:	4798      	blx	r3
	c1219_ptr->execute_table_writing = SM_APP_bMt_3_execute_table_writing;
 1014840:	f241 72b0 	movw	r2, #6064	; 0x17b0
 1014844:	497c      	ldr	r1, [pc, #496]	; (1014a38 <C1219_full_write_service+0x600>)
	c1219_ptr->table_size = SM_APP_usMt_3_get_size();
 1014846:	8720      	strh	r0, [r4, #56]	; 0x38
	C1219_full_write(c1219_ptr);
 1014848:	4b73      	ldr	r3, [pc, #460]	; (1014a18 <C1219_full_write_service+0x5e0>)
	c1219_ptr->execute_table_writing = SM_APP_bMt_3_execute_table_writing;
 101484a:	50a1      	str	r1, [r4, r2]
	C1219_full_write(c1219_ptr);
 101484c:	4620      	mov	r0, r4
 101484e:	4798      	blx	r3
 1014850:	e68e      	b.n	1014570 <C1219_full_write_service+0x138>
	c1219_ptr->table_size = EVNT_APP_usSt_75_get_size();
 1014852:	4b7a      	ldr	r3, [pc, #488]	; (1014a3c <C1219_full_write_service+0x604>)
 1014854:	4798      	blx	r3
 1014856:	f241 73b4 	movw	r3, #6068	; 0x17b4
 101485a:	fb03 5606 	mla	r6, r3, r6, r5
	c1219_ptr->execute_table_writing = EVNT_APP_bSt_75_execute_table_writing;
 101485e:	f241 72b0 	movw	r2, #6064	; 0x17b0
 1014862:	4977      	ldr	r1, [pc, #476]	; (1014a40 <C1219_full_write_service+0x608>)
	c1219_ptr->table_size = EVNT_APP_usSt_75_get_size();
 1014864:	8730      	strh	r0, [r6, #56]	; 0x38
	C1219_full_write(c1219_ptr);
 1014866:	4b6c      	ldr	r3, [pc, #432]	; (1014a18 <C1219_full_write_service+0x5e0>)
	c1219_ptr->execute_table_writing = EVNT_APP_bSt_75_execute_table_writing;
 1014868:	50b1      	str	r1, [r6, r2]
	C1219_full_write(c1219_ptr);
 101486a:	4630      	mov	r0, r6
 101486c:	4798      	blx	r3
 101486e:	e67f      	b.n	1014570 <C1219_full_write_service+0x138>
	c1219_ptr->table_size = EVNT_APP_usSt_76_get_size();
 1014870:	4b74      	ldr	r3, [pc, #464]	; (1014a44 <C1219_full_write_service+0x60c>)
 1014872:	4798      	blx	r3
	c1219_ptr->execute_table_writing = EVNT_APP_bSt_76_execute_table_writing;
 1014874:	f241 72b0 	movw	r2, #6064	; 0x17b0
 1014878:	4973      	ldr	r1, [pc, #460]	; (1014a48 <C1219_full_write_service+0x610>)
	c1219_ptr->table_size = EVNT_APP_usSt_76_get_size();
 101487a:	8720      	strh	r0, [r4, #56]	; 0x38
	C1219_full_write(c1219_ptr);
 101487c:	4b66      	ldr	r3, [pc, #408]	; (1014a18 <C1219_full_write_service+0x5e0>)
	c1219_ptr->execute_table_writing = EVNT_APP_bSt_76_execute_table_writing;
 101487e:	50a1      	str	r1, [r4, r2]
	C1219_full_write(c1219_ptr);
 1014880:	4620      	mov	r0, r4
 1014882:	4798      	blx	r3
 1014884:	e674      	b.n	1014570 <C1219_full_write_service+0x138>
	c1219_ptr->table_size = REGS_APP_usSt_11_get_size();
 1014886:	4b71      	ldr	r3, [pc, #452]	; (1014a4c <C1219_full_write_service+0x614>)
 1014888:	4798      	blx	r3
	c1219_ptr->execute_table_writing = REGS_APP_bSt_11_execute_table_writing;
 101488a:	f241 72b0 	movw	r2, #6064	; 0x17b0
 101488e:	4970      	ldr	r1, [pc, #448]	; (1014a50 <C1219_full_write_service+0x618>)
	c1219_ptr->table_size = REGS_APP_usSt_11_get_size();
 1014890:	8720      	strh	r0, [r4, #56]	; 0x38
	C1219_full_write(c1219_ptr);
 1014892:	4b61      	ldr	r3, [pc, #388]	; (1014a18 <C1219_full_write_service+0x5e0>)
	c1219_ptr->execute_table_writing = REGS_APP_bSt_11_execute_table_writing;
 1014894:	50a1      	str	r1, [r4, r2]
	C1219_full_write(c1219_ptr);
 1014896:	4620      	mov	r0, r4
 1014898:	4798      	blx	r3
 101489a:	e669      	b.n	1014570 <C1219_full_write_service+0x138>
	c1219_ptr->table_size = REGS_APP_usSt_27_get_size();
 101489c:	4b6d      	ldr	r3, [pc, #436]	; (1014a54 <C1219_full_write_service+0x61c>)
 101489e:	4798      	blx	r3
	c1219_ptr->execute_table_writing = REGS_APP_bSt_27_execute_table_writing;
 10148a0:	f241 72b0 	movw	r2, #6064	; 0x17b0
 10148a4:	496c      	ldr	r1, [pc, #432]	; (1014a58 <C1219_full_write_service+0x620>)
	c1219_ptr->table_size = REGS_APP_usSt_27_get_size();
 10148a6:	8720      	strh	r0, [r4, #56]	; 0x38
	C1219_full_write(c1219_ptr);
 10148a8:	4b5b      	ldr	r3, [pc, #364]	; (1014a18 <C1219_full_write_service+0x5e0>)
	c1219_ptr->execute_table_writing = REGS_APP_bSt_27_execute_table_writing;
 10148aa:	50a1      	str	r1, [r4, r2]
	C1219_full_write(c1219_ptr);
 10148ac:	4620      	mov	r0, r4
 10148ae:	4798      	blx	r3
 10148b0:	e65e      	b.n	1014570 <C1219_full_write_service+0x138>
	c1219_ptr->table_size = SECR_APP_usSt_43_get_size();
 10148b2:	4b6a      	ldr	r3, [pc, #424]	; (1014a5c <C1219_full_write_service+0x624>)
 10148b4:	4798      	blx	r3
 10148b6:	f241 73b4 	movw	r3, #6068	; 0x17b4
 10148ba:	fb03 5606 	mla	r6, r3, r6, r5
	c1219_ptr->execute_table_writing = SECR_APP_bSt_43_execute_table_writing;
 10148be:	f241 72b0 	movw	r2, #6064	; 0x17b0
 10148c2:	4967      	ldr	r1, [pc, #412]	; (1014a60 <C1219_full_write_service+0x628>)
	c1219_ptr->table_size = SECR_APP_usSt_43_get_size();
 10148c4:	8730      	strh	r0, [r6, #56]	; 0x38
	C1219_full_write(c1219_ptr);
 10148c6:	4b54      	ldr	r3, [pc, #336]	; (1014a18 <C1219_full_write_service+0x5e0>)
	c1219_ptr->execute_table_writing = SECR_APP_bSt_43_execute_table_writing;
 10148c8:	50b1      	str	r1, [r6, r2]
	C1219_full_write(c1219_ptr);
 10148ca:	4630      	mov	r0, r6
 10148cc:	4798      	blx	r3
 10148ce:	e64f      	b.n	1014570 <C1219_full_write_service+0x138>
	c1219_ptr->table_size = SECR_APP_usSt_42_get_size();
 10148d0:	4b64      	ldr	r3, [pc, #400]	; (1014a64 <C1219_full_write_service+0x62c>)
 10148d2:	4798      	blx	r3
	c1219_ptr->execute_table_writing = SECR_APP_bSt_42_execute_table_writing;
 10148d4:	f241 72b0 	movw	r2, #6064	; 0x17b0
 10148d8:	4963      	ldr	r1, [pc, #396]	; (1014a68 <C1219_full_write_service+0x630>)
	c1219_ptr->table_size = SECR_APP_usSt_42_get_size();
 10148da:	8720      	strh	r0, [r4, #56]	; 0x38
	C1219_full_write(c1219_ptr);
 10148dc:	4b4e      	ldr	r3, [pc, #312]	; (1014a18 <C1219_full_write_service+0x5e0>)
	c1219_ptr->execute_table_writing = SECR_APP_bSt_42_execute_table_writing;
 10148de:	50a1      	str	r1, [r4, r2]
	C1219_full_write(c1219_ptr);
 10148e0:	4620      	mov	r0, r4
 10148e2:	4798      	blx	r3
 10148e4:	e644      	b.n	1014570 <C1219_full_write_service+0x138>
						C1219_st_7_full_write(&c1219[instance]);
 10148e6:	f241 70b4 	movw	r0, #6068	; 0x17b4
 10148ea:	fb00 5006 	mla	r0, r0, r6, r5
 10148ee:	4b5f      	ldr	r3, [pc, #380]	; (1014a6c <C1219_full_write_service+0x634>)
 10148f0:	4798      	blx	r3
						break;
 10148f2:	e63d      	b.n	1014570 <C1219_full_write_service+0x138>
	c1219_ptr->table_size = GRAL_APP_usSt_6_get_size();
 10148f4:	4b5e      	ldr	r3, [pc, #376]	; (1014a70 <C1219_full_write_service+0x638>)
 10148f6:	4798      	blx	r3
	c1219_ptr->execute_table_writing = GRAL_APP_bSt_6_execute_table_writing;
 10148f8:	f241 72b0 	movw	r2, #6064	; 0x17b0
 10148fc:	495d      	ldr	r1, [pc, #372]	; (1014a74 <C1219_full_write_service+0x63c>)
	c1219_ptr->table_size = GRAL_APP_usSt_6_get_size();
 10148fe:	8720      	strh	r0, [r4, #56]	; 0x38
	C1219_full_write(c1219_ptr);
 1014900:	4b45      	ldr	r3, [pc, #276]	; (1014a18 <C1219_full_write_service+0x5e0>)
	c1219_ptr->execute_table_writing = GRAL_APP_bSt_6_execute_table_writing;
 1014902:	50a1      	str	r1, [r4, r2]
	C1219_full_write(c1219_ptr);
 1014904:	4620      	mov	r0, r4
 1014906:	4798      	blx	r3
 1014908:	e632      	b.n	1014570 <C1219_full_write_service+0x138>
	c1219_ptr->table_size = LP_APP_usSt_62_get_size();
 101490a:	4b5b      	ldr	r3, [pc, #364]	; (1014a78 <C1219_full_write_service+0x640>)
 101490c:	4798      	blx	r3
 101490e:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1014912:	fb03 5606 	mla	r6, r3, r6, r5
	c1219_ptr->execute_table_writing = LP_APP_bSt_62_execute_table_writing;
 1014916:	f241 72b0 	movw	r2, #6064	; 0x17b0
 101491a:	4958      	ldr	r1, [pc, #352]	; (1014a7c <C1219_full_write_service+0x644>)
	c1219_ptr->table_size = LP_APP_usSt_62_get_size();
 101491c:	8730      	strh	r0, [r6, #56]	; 0x38
	C1219_full_write(c1219_ptr);
 101491e:	4b3e      	ldr	r3, [pc, #248]	; (1014a18 <C1219_full_write_service+0x5e0>)
	c1219_ptr->execute_table_writing = LP_APP_bSt_62_execute_table_writing;
 1014920:	50b1      	str	r1, [r6, r2]
	C1219_full_write(c1219_ptr);
 1014922:	4630      	mov	r0, r6
 1014924:	4798      	blx	r3
 1014926:	e623      	b.n	1014570 <C1219_full_write_service+0x138>
	c1219_ptr->table_size = LP_APP_usSt_61_get_size();
 1014928:	4b55      	ldr	r3, [pc, #340]	; (1014a80 <C1219_full_write_service+0x648>)
 101492a:	4798      	blx	r3
	c1219_ptr->execute_table_writing = LP_APP_bSt_61_execute_table_writing;
 101492c:	f241 72b0 	movw	r2, #6064	; 0x17b0
 1014930:	4954      	ldr	r1, [pc, #336]	; (1014a84 <C1219_full_write_service+0x64c>)
	c1219_ptr->table_size = LP_APP_usSt_61_get_size();
 1014932:	8720      	strh	r0, [r4, #56]	; 0x38
	C1219_full_write(c1219_ptr);
 1014934:	4b38      	ldr	r3, [pc, #224]	; (1014a18 <C1219_full_write_service+0x5e0>)
	c1219_ptr->execute_table_writing = LP_APP_bSt_61_execute_table_writing;
 1014936:	50a1      	str	r1, [r4, r2]
	C1219_full_write(c1219_ptr);
 1014938:	4620      	mov	r0, r4
 101493a:	4798      	blx	r3
 101493c:	e618      	b.n	1014570 <C1219_full_write_service+0x138>
	c1219_ptr->table_size = EVNT_APP_usSt_73_get_size();
 101493e:	4b52      	ldr	r3, [pc, #328]	; (1014a88 <C1219_full_write_service+0x650>)
 1014940:	4798      	blx	r3
 1014942:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1014946:	fb03 5606 	mla	r6, r3, r6, r5
	c1219_ptr->execute_table_writing = EVNT_APP_bSt_73_execute_table_writing;
 101494a:	f241 72b0 	movw	r2, #6064	; 0x17b0
 101494e:	494f      	ldr	r1, [pc, #316]	; (1014a8c <C1219_full_write_service+0x654>)
	c1219_ptr->table_size = EVNT_APP_usSt_73_get_size();
 1014950:	8730      	strh	r0, [r6, #56]	; 0x38
	C1219_full_write(c1219_ptr);
 1014952:	4b31      	ldr	r3, [pc, #196]	; (1014a18 <C1219_full_write_service+0x5e0>)
	c1219_ptr->execute_table_writing = EVNT_APP_bSt_73_execute_table_writing;
 1014954:	50b1      	str	r1, [r6, r2]
	C1219_full_write(c1219_ptr);
 1014956:	4630      	mov	r0, r6
 1014958:	4798      	blx	r3
 101495a:	e609      	b.n	1014570 <C1219_full_write_service+0x138>
	c1219_ptr->table_size = EVNT_APP_usSt_71_get_size();
 101495c:	4b4c      	ldr	r3, [pc, #304]	; (1014a90 <C1219_full_write_service+0x658>)
 101495e:	4798      	blx	r3
	c1219_ptr->execute_table_writing = EVNT_APP_bSt_71_execute_table_writing;
 1014960:	f241 72b0 	movw	r2, #6064	; 0x17b0
 1014964:	494b      	ldr	r1, [pc, #300]	; (1014a94 <C1219_full_write_service+0x65c>)
	c1219_ptr->table_size = EVNT_APP_usSt_71_get_size();
 1014966:	8720      	strh	r0, [r4, #56]	; 0x38
	C1219_full_write(c1219_ptr);
 1014968:	4b2b      	ldr	r3, [pc, #172]	; (1014a18 <C1219_full_write_service+0x5e0>)
	c1219_ptr->execute_table_writing = EVNT_APP_bSt_71_execute_table_writing;
 101496a:	50a1      	str	r1, [r4, r2]
	C1219_full_write(c1219_ptr);
 101496c:	4620      	mov	r0, r4
 101496e:	4798      	blx	r3
 1014970:	e5fe      	b.n	1014570 <C1219_full_write_service+0x138>
	c1219_ptr->table_size = EVNT_APP_usSt_74_get_size();
 1014972:	4b49      	ldr	r3, [pc, #292]	; (1014a98 <C1219_full_write_service+0x660>)
 1014974:	4798      	blx	r3
	c1219_ptr->execute_table_writing = EVNT_APP_bSt_74_execute_table_writing;
 1014976:	f241 72b0 	movw	r2, #6064	; 0x17b0
 101497a:	4948      	ldr	r1, [pc, #288]	; (1014a9c <C1219_full_write_service+0x664>)
	c1219_ptr->table_size = EVNT_APP_usSt_74_get_size();
 101497c:	8720      	strh	r0, [r4, #56]	; 0x38
	C1219_full_write(c1219_ptr);
 101497e:	4b26      	ldr	r3, [pc, #152]	; (1014a18 <C1219_full_write_service+0x5e0>)
	c1219_ptr->execute_table_writing = EVNT_APP_bSt_74_execute_table_writing;
 1014980:	50a1      	str	r1, [r4, r2]
	C1219_full_write(c1219_ptr);
 1014982:	4620      	mov	r0, r4
 1014984:	4798      	blx	r3
 1014986:	e5f3      	b.n	1014570 <C1219_full_write_service+0x138>
	c1219_ptr->table_size = SM_APP_usMt_53_get_size();
 1014988:	4b45      	ldr	r3, [pc, #276]	; (1014aa0 <C1219_full_write_service+0x668>)
 101498a:	4798      	blx	r3
 101498c:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1014990:	fb03 5606 	mla	r6, r3, r6, r5
	c1219_ptr->execute_table_writing = SM_APP_bMt_53_execute_table_writing;
 1014994:	f241 72b0 	movw	r2, #6064	; 0x17b0
 1014998:	4942      	ldr	r1, [pc, #264]	; (1014aa4 <C1219_full_write_service+0x66c>)
	c1219_ptr->table_size = SM_APP_usMt_53_get_size();
 101499a:	8730      	strh	r0, [r6, #56]	; 0x38
	C1219_full_write(c1219_ptr);
 101499c:	4b1e      	ldr	r3, [pc, #120]	; (1014a18 <C1219_full_write_service+0x5e0>)
	c1219_ptr->execute_table_writing = SM_APP_bMt_53_execute_table_writing;
 101499e:	50b1      	str	r1, [r6, r2]
	C1219_full_write(c1219_ptr);
 10149a0:	4630      	mov	r0, r6
 10149a2:	4798      	blx	r3
 10149a4:	e5e4      	b.n	1014570 <C1219_full_write_service+0x138>
	c1219_ptr->table_size = SM_APP_usMt_4_get_size();
 10149a6:	4b40      	ldr	r3, [pc, #256]	; (1014aa8 <C1219_full_write_service+0x670>)
 10149a8:	4798      	blx	r3
 10149aa:	f241 73b4 	movw	r3, #6068	; 0x17b4
 10149ae:	fb03 5606 	mla	r6, r3, r6, r5
	c1219_ptr->execute_table_writing = SM_APP_bMt_4_execute_table_writing;
 10149b2:	f241 72b0 	movw	r2, #6064	; 0x17b0
 10149b6:	493d      	ldr	r1, [pc, #244]	; (1014aac <C1219_full_write_service+0x674>)
	c1219_ptr->table_size = SM_APP_usMt_4_get_size();
 10149b8:	8730      	strh	r0, [r6, #56]	; 0x38
	C1219_full_write(c1219_ptr);
 10149ba:	4b17      	ldr	r3, [pc, #92]	; (1014a18 <C1219_full_write_service+0x5e0>)
	c1219_ptr->execute_table_writing = SM_APP_bMt_4_execute_table_writing;
 10149bc:	50b1      	str	r1, [r6, r2]
	C1219_full_write(c1219_ptr);
 10149be:	4630      	mov	r0, r6
 10149c0:	4798      	blx	r3
 10149c2:	e5d5      	b.n	1014570 <C1219_full_write_service+0x138>
	c1219_ptr->table_size = SM_APP_usMt_5_get_size();
 10149c4:	4b3a      	ldr	r3, [pc, #232]	; (1014ab0 <C1219_full_write_service+0x678>)
 10149c6:	4798      	blx	r3
	c1219_ptr->execute_table_writing = SM_APP_bMt_5_execute_table_writing;
 10149c8:	f241 72b0 	movw	r2, #6064	; 0x17b0
 10149cc:	4939      	ldr	r1, [pc, #228]	; (1014ab4 <C1219_full_write_service+0x67c>)
	c1219_ptr->table_size = SM_APP_usMt_5_get_size();
 10149ce:	8720      	strh	r0, [r4, #56]	; 0x38
	C1219_full_write(c1219_ptr);
 10149d0:	4b11      	ldr	r3, [pc, #68]	; (1014a18 <C1219_full_write_service+0x5e0>)
	c1219_ptr->execute_table_writing = SM_APP_bMt_5_execute_table_writing;
 10149d2:	50a1      	str	r1, [r4, r2]
	C1219_full_write(c1219_ptr);
 10149d4:	4620      	mov	r0, r4
 10149d6:	4798      	blx	r3
 10149d8:	e5ca      	b.n	1014570 <C1219_full_write_service+0x138>
	c1219_ptr->table_size = REGS_APP_usSt_22_get_size();
 10149da:	4b37      	ldr	r3, [pc, #220]	; (1014ab8 <C1219_full_write_service+0x680>)
 10149dc:	4798      	blx	r3
 10149de:	f241 73b4 	movw	r3, #6068	; 0x17b4
 10149e2:	fb03 5606 	mla	r6, r3, r6, r5
	c1219_ptr->execute_table_writing = REGS_APP_bSt_22_execute_table_writing;
 10149e6:	f241 72b0 	movw	r2, #6064	; 0x17b0
 10149ea:	4934      	ldr	r1, [pc, #208]	; (1014abc <C1219_full_write_service+0x684>)
	c1219_ptr->table_size = REGS_APP_usSt_22_get_size();
 10149ec:	8730      	strh	r0, [r6, #56]	; 0x38
	C1219_full_write(c1219_ptr);
 10149ee:	4b0a      	ldr	r3, [pc, #40]	; (1014a18 <C1219_full_write_service+0x5e0>)
	c1219_ptr->execute_table_writing = REGS_APP_bSt_22_execute_table_writing;
 10149f0:	50b1      	str	r1, [r6, r2]
	C1219_full_write(c1219_ptr);
 10149f2:	4630      	mov	r0, r6
 10149f4:	4798      	blx	r3
 10149f6:	e5bb      	b.n	1014570 <C1219_full_write_service+0x138>
	c1219_ptr->table_size = REGS_APP_usSt_21_get_size();
 10149f8:	4b31      	ldr	r3, [pc, #196]	; (1014ac0 <C1219_full_write_service+0x688>)
 10149fa:	4798      	blx	r3
	c1219_ptr->execute_table_writing = REGS_APP_bSt_21_execute_table_writing;
 10149fc:	f241 72b0 	movw	r2, #6064	; 0x17b0
 1014a00:	4930      	ldr	r1, [pc, #192]	; (1014ac4 <C1219_full_write_service+0x68c>)
	c1219_ptr->table_size = REGS_APP_usSt_21_get_size();
 1014a02:	8720      	strh	r0, [r4, #56]	; 0x38
	C1219_full_write(c1219_ptr);
 1014a04:	4b04      	ldr	r3, [pc, #16]	; (1014a18 <C1219_full_write_service+0x5e0>)
	c1219_ptr->execute_table_writing = REGS_APP_bSt_21_execute_table_writing;
 1014a06:	50a1      	str	r1, [r4, r2]
	C1219_full_write(c1219_ptr);
 1014a08:	4620      	mov	r0, r4
 1014a0a:	4798      	blx	r3
 1014a0c:	e5b0      	b.n	1014570 <C1219_full_write_service+0x138>
 1014a0e:	bf00      	nop
 1014a10:	0102bf25 	.word	0x0102bf25
 1014a14:	0102beb5 	.word	0x0102beb5
 1014a18:	010104e9 	.word	0x010104e9
 1014a1c:	01019c25 	.word	0x01019c25
 1014a20:	01019c0d 	.word	0x01019c0d
 1014a24:	01027da1 	.word	0x01027da1
 1014a28:	01027d49 	.word	0x01027d49
 1014a2c:	01020521 	.word	0x01020521
 1014a30:	01020509 	.word	0x01020509
 1014a34:	010205e5 	.word	0x010205e5
 1014a38:	010205cd 	.word	0x010205cd
 1014a3c:	01019531 	.word	0x01019531
 1014a40:	010193d9 	.word	0x010193d9
 1014a44:	01019921 	.word	0x01019921
 1014a48:	01019845 	.word	0x01019845
 1014a4c:	01026711 	.word	0x01026711
 1014a50:	010266a1 	.word	0x010266a1
 1014a54:	01028701 	.word	0x01028701
 1014a58:	010286a1 	.word	0x010286a1
 1014a5c:	0102afed 	.word	0x0102afed
 1014a60:	0102afad 	.word	0x0102afad
 1014a64:	0102ae6d 	.word	0x0102ae6d
 1014a68:	0102ade5 	.word	0x0102ade5
 1014a6c:	0101084d 	.word	0x0101084d
 1014a70:	01019fc9 	.word	0x01019fc9
 1014a74:	01019f99 	.word	0x01019f99
 1014a78:	0101b9ed 	.word	0x0101b9ed
 1014a7c:	0101b8cd 	.word	0x0101b8cd
 1014a80:	0101b65d 	.word	0x0101b65d
 1014a84:	0101bc11 	.word	0x0101bc11
 1014a88:	01019571 	.word	0x01019571
 1014a8c:	0101894d 	.word	0x0101894d
 1014a90:	01018691 	.word	0x01018691
 1014a94:	0101861d 	.word	0x0101861d
 1014a98:	0101919d 	.word	0x0101919d
 1014a9c:	010190a5 	.word	0x010190a5
 1014aa0:	01020ed5 	.word	0x01020ed5
 1014aa4:	01020ebd 	.word	0x01020ebd
 1014aa8:	010209a9 	.word	0x010209a9
 1014aac:	010208e1 	.word	0x010208e1
 1014ab0:	01020a4d 	.word	0x01020a4d
 1014ab4:	01020a35 	.word	0x01020a35
 1014ab8:	0102701d 	.word	0x0102701d
 1014abc:	01026f59 	.word	0x01026f59
 1014ac0:	01026de5 	.word	0x01026de5
 1014ac4:	01026d65 	.word	0x01026d65
	c1219_ptr->table_size = TOU_APP_usSt_54_get_size();
 1014ac8:	4b24      	ldr	r3, [pc, #144]	; (1014b5c <C1219_full_write_service+0x724>)
 1014aca:	4798      	blx	r3
 1014acc:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1014ad0:	fb03 5606 	mla	r6, r3, r6, r5
	c1219_ptr->execute_table_writing = TOU_APP_bSt_54_execute_table_writing;
 1014ad4:	f241 72b0 	movw	r2, #6064	; 0x17b0
 1014ad8:	4921      	ldr	r1, [pc, #132]	; (1014b60 <C1219_full_write_service+0x728>)
	c1219_ptr->table_size = TOU_APP_usSt_54_get_size();
 1014ada:	8730      	strh	r0, [r6, #56]	; 0x38
	C1219_full_write(c1219_ptr);
 1014adc:	4b21      	ldr	r3, [pc, #132]	; (1014b64 <C1219_full_write_service+0x72c>)
	c1219_ptr->execute_table_writing = TOU_APP_bSt_54_execute_table_writing;
 1014ade:	50b1      	str	r1, [r6, r2]
	C1219_full_write(c1219_ptr);
 1014ae0:	4630      	mov	r0, r6
 1014ae2:	4798      	blx	r3
 1014ae4:	e544      	b.n	1014570 <C1219_full_write_service+0x138>
	c1219_ptr->table_size = TOU_APP_usSt_53_get_size();
 1014ae6:	4b20      	ldr	r3, [pc, #128]	; (1014b68 <C1219_full_write_service+0x730>)
 1014ae8:	4798      	blx	r3
	c1219_ptr->execute_table_writing = TOU_APP_bSt_53_execute_table_writing;
 1014aea:	f241 72b0 	movw	r2, #6064	; 0x17b0
 1014aee:	491f      	ldr	r1, [pc, #124]	; (1014b6c <C1219_full_write_service+0x734>)
	c1219_ptr->table_size = TOU_APP_usSt_53_get_size();
 1014af0:	8720      	strh	r0, [r4, #56]	; 0x38
	C1219_full_write(c1219_ptr);
 1014af2:	4b1c      	ldr	r3, [pc, #112]	; (1014b64 <C1219_full_write_service+0x72c>)
	c1219_ptr->execute_table_writing = TOU_APP_bSt_53_execute_table_writing;
 1014af4:	50a1      	str	r1, [r4, r2]
	C1219_full_write(c1219_ptr);
 1014af6:	4620      	mov	r0, r4
 1014af8:	4798      	blx	r3
 1014afa:	e539      	b.n	1014570 <C1219_full_write_service+0x138>
	c1219_ptr->table_size = SECR_APP_usSt_44_get_size();
 1014afc:	4b1c      	ldr	r3, [pc, #112]	; (1014b70 <C1219_full_write_service+0x738>)
 1014afe:	4798      	blx	r3
	c1219_ptr->execute_table_writing = SECR_APP_bSt_44_execute_table_writing;
 1014b00:	f241 72b0 	movw	r2, #6064	; 0x17b0
 1014b04:	491b      	ldr	r1, [pc, #108]	; (1014b74 <C1219_full_write_service+0x73c>)
	c1219_ptr->table_size = SECR_APP_usSt_44_get_size();
 1014b06:	8720      	strh	r0, [r4, #56]	; 0x38
	C1219_full_write(c1219_ptr);
 1014b08:	4b16      	ldr	r3, [pc, #88]	; (1014b64 <C1219_full_write_service+0x72c>)
	c1219_ptr->execute_table_writing = SECR_APP_bSt_44_execute_table_writing;
 1014b0a:	50a1      	str	r1, [r4, r2]
	C1219_full_write(c1219_ptr);
 1014b0c:	4620      	mov	r0, r4
 1014b0e:	4798      	blx	r3
 1014b10:	e52e      	b.n	1014570 <C1219_full_write_service+0x138>
	c1219_ptr->table_size = REGS_APP_usSt_23_get_size();
 1014b12:	4b19      	ldr	r3, [pc, #100]	; (1014b78 <C1219_full_write_service+0x740>)
 1014b14:	4798      	blx	r3
	c1219_ptr->execute_table_writing = REGS_APP_bSt_23_execute_table_writing;
 1014b16:	f241 72b0 	movw	r2, #6064	; 0x17b0
 1014b1a:	4918      	ldr	r1, [pc, #96]	; (1014b7c <C1219_full_write_service+0x744>)
	c1219_ptr->table_size = REGS_APP_usSt_23_get_size();
 1014b1c:	8720      	strh	r0, [r4, #56]	; 0x38
	C1219_full_write(c1219_ptr);
 1014b1e:	4b11      	ldr	r3, [pc, #68]	; (1014b64 <C1219_full_write_service+0x72c>)
	c1219_ptr->execute_table_writing = REGS_APP_bSt_23_execute_table_writing;
 1014b20:	50a1      	str	r1, [r4, r2]
	C1219_full_write(c1219_ptr);
 1014b22:	4620      	mov	r0, r4
 1014b24:	4798      	blx	r3
 1014b26:	e523      	b.n	1014570 <C1219_full_write_service+0x138>
	c1219_ptr->table_size = REGS_APP_usSt_26_get_size();
 1014b28:	4b15      	ldr	r3, [pc, #84]	; (1014b80 <C1219_full_write_service+0x748>)
 1014b2a:	4798      	blx	r3
 1014b2c:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1014b30:	fb03 5606 	mla	r6, r3, r6, r5
	c1219_ptr->execute_table_writing = REGS_APP_bSt_26_execute_table_writing;
 1014b34:	f241 72b0 	movw	r2, #6064	; 0x17b0
 1014b38:	4912      	ldr	r1, [pc, #72]	; (1014b84 <C1219_full_write_service+0x74c>)
	c1219_ptr->table_size = REGS_APP_usSt_26_get_size();
 1014b3a:	8730      	strh	r0, [r6, #56]	; 0x38
	C1219_full_write(c1219_ptr);
 1014b3c:	4b09      	ldr	r3, [pc, #36]	; (1014b64 <C1219_full_write_service+0x72c>)
	c1219_ptr->execute_table_writing = REGS_APP_bSt_26_execute_table_writing;
 1014b3e:	50b1      	str	r1, [r6, r2]
	C1219_full_write(c1219_ptr);
 1014b40:	4630      	mov	r0, r6
 1014b42:	4798      	blx	r3
 1014b44:	e514      	b.n	1014570 <C1219_full_write_service+0x138>
	c1219_ptr->table_size = REGS_APP_usSt_25_get_size();
 1014b46:	4b10      	ldr	r3, [pc, #64]	; (1014b88 <C1219_full_write_service+0x750>)
 1014b48:	4798      	blx	r3
	c1219_ptr->execute_table_writing = REGS_APP_bSt_25_execute_table_writing;
 1014b4a:	f241 72b0 	movw	r2, #6064	; 0x17b0
 1014b4e:	490f      	ldr	r1, [pc, #60]	; (1014b8c <C1219_full_write_service+0x754>)
	c1219_ptr->table_size = REGS_APP_usSt_25_get_size();
 1014b50:	8720      	strh	r0, [r4, #56]	; 0x38
	C1219_full_write(c1219_ptr);
 1014b52:	4b04      	ldr	r3, [pc, #16]	; (1014b64 <C1219_full_write_service+0x72c>)
	c1219_ptr->execute_table_writing = REGS_APP_bSt_25_execute_table_writing;
 1014b54:	50a1      	str	r1, [r4, r2]
	C1219_full_write(c1219_ptr);
 1014b56:	4620      	mov	r0, r4
 1014b58:	4798      	blx	r3
 1014b5a:	e509      	b.n	1014570 <C1219_full_write_service+0x138>
 1014b5c:	0102c301 	.word	0x0102c301
 1014b60:	0102c1dd 	.word	0x0102c1dd
 1014b64:	010104e9 	.word	0x010104e9
 1014b68:	0102c0b9 	.word	0x0102c0b9
 1014b6c:	0102c081 	.word	0x0102c081
 1014b70:	0102b285 	.word	0x0102b285
 1014b74:	0102b219 	.word	0x0102b219
 1014b78:	01027c45 	.word	0x01027c45
 1014b7c:	010279c5 	.word	0x010279c5
 1014b80:	010281ad 	.word	0x010281ad
 1014b84:	010280d9 	.word	0x010280d9
 1014b88:	01027ec9 	.word	0x01027ec9
 1014b8c:	01027e71 	.word	0x01027e71

01014b90 <C1219_pwrite_offset_service>:
void C1219_pwrite_offset_service(C1218_DLL_TYPE *c1218_dll_ptr, C1218_APL_TYPE c1218_apl) {
 1014b90:	b084      	sub	sp, #16
 1014b92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1014b96:	b089      	sub	sp, #36	; 0x24
 1014b98:	ac13      	add	r4, sp, #76	; 0x4c
 1014b9a:	e884 000e 	stmia.w	r4, {r1, r2, r3}
		if (c1219[instance].busy_instance == false) break;
 1014b9e:	4db9      	ldr	r5, [pc, #740]	; (1014e84 <C1219_pwrite_offset_service+0x2f4>)
	for ( instance = 0; instance < NBR_C1219_INSTANCES; instance++ ) {
 1014ba0:	4fb9      	ldr	r7, [pc, #740]	; (1014e88 <C1219_pwrite_offset_service+0x2f8>)
		if (c1219[instance].busy_instance == false) break;
 1014ba2:	782e      	ldrb	r6, [r5, #0]
 1014ba4:	f8bd 804e 	ldrh.w	r8, [sp, #78]	; 0x4e
	for ( instance = 0; instance < NBR_C1219_INSTANCES; instance++ ) {
 1014ba8:	2200      	movs	r2, #0
 1014baa:	703a      	strb	r2, [r7, #0]
		if (c1219[instance].busy_instance == false) break;
 1014bac:	b1ee      	cbz	r6, 1014bea <C1219_pwrite_offset_service+0x5a>
 1014bae:	f241 72b4 	movw	r2, #6068	; 0x17b4
	for ( instance = 0; instance < NBR_C1219_INSTANCES; instance++ ) {
 1014bb2:	2301      	movs	r3, #1
		if (c1219[instance].busy_instance == false) break;
 1014bb4:	5caa      	ldrb	r2, [r5, r2]
	for ( instance = 0; instance < NBR_C1219_INSTANCES; instance++ ) {
 1014bb6:	703b      	strb	r3, [r7, #0]
		if (c1219[instance].busy_instance == false) break;
 1014bb8:	b1b2      	cbz	r2, 1014be8 <C1219_pwrite_offset_service+0x58>
 1014bba:	f642 7368 	movw	r3, #12136	; 0x2f68
 1014bbe:	5ceb      	ldrb	r3, [r5, r3]
 1014bc0:	2b00      	cmp	r3, #0
 1014bc2:	f000 811a 	beq.w	1014dfa <C1219_pwrite_offset_service+0x26a>
 1014bc6:	f244 731c 	movw	r3, #18204	; 0x471c
 1014bca:	5ceb      	ldrb	r3, [r5, r3]
 1014bcc:	2b00      	cmp	r3, #0
 1014bce:	f000 8118 	beq.w	1014e02 <C1219_pwrite_offset_service+0x272>
	if ( c1219[instance].busy_instance == false ) {
 1014bd2:	f645 62d0 	movw	r2, #24272	; 0x5ed0
 1014bd6:	2304      	movs	r3, #4
 1014bd8:	5caa      	ldrb	r2, [r5, r2]
 1014bda:	703b      	strb	r3, [r7, #0]
 1014bdc:	b122      	cbz	r2, 1014be8 <C1219_pwrite_offset_service+0x58>
}
 1014bde:	b009      	add	sp, #36	; 0x24
 1014be0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1014be4:	b004      	add	sp, #16
 1014be6:	4770      	bx	lr
	if ( c1219[instance].busy_instance == false ) {
 1014be8:	461e      	mov	r6, r3
 1014bea:	4684      	mov	ip, r0
		c1219[instance].c1218_apl = c1218_apl;
 1014bec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
		c1219[instance].busy_instance = true;
 1014bee:	f241 79b4 	movw	r9, #6068	; 0x17b4
 1014bf2:	fb09 f606 	mul.w	r6, r9, r6
 1014bf6:	eb05 0b06 	add.w	fp, r5, r6
		c1219[instance].c1218_apl = c1218_apl;
 1014bfa:	f10b 0e08 	add.w	lr, fp, #8
 1014bfe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 1014c02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 1014c04:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
		EVNT_APP_vRegister_event(END_DEVICE_ACCESSED_FOR_WRITE, 0, true, c1218_apl.user_id, rtc.utc_timestamp);
 1014c08:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 1014ecc <C1219_pwrite_offset_service+0x33c>
		c1219[instance].c1218_apl = c1218_apl;
 1014c0c:	6820      	ldr	r0, [r4, #0]
		EVNT_APP_vRegister_event(END_DEVICE_ACCESSED_FOR_WRITE, 0, true, c1218_apl.user_id, rtc.utc_timestamp);
 1014c0e:	f8da 3004 	ldr.w	r3, [sl, #4]
 1014c12:	9300      	str	r3, [sp, #0]
		c1219[instance].busy_instance = true;
 1014c14:	2401      	movs	r4, #1
		EVNT_APP_vRegister_event(END_DEVICE_ACCESSED_FOR_WRITE, 0, true, c1218_apl.user_id, rtc.utc_timestamp);
 1014c16:	4622      	mov	r2, r4
		c1219[instance].c1218_dll = c1218_dll_ptr;
 1014c18:	f8cb c004 	str.w	ip, [fp, #4]
		EVNT_APP_vRegister_event(END_DEVICE_ACCESSED_FOR_WRITE, 0, true, c1218_apl.user_id, rtc.utc_timestamp);
 1014c1c:	4643      	mov	r3, r8
 1014c1e:	2100      	movs	r1, #0
		c1219[instance].c1218_apl = c1218_apl;
 1014c20:	f8ce 0000 	str.w	r0, [lr]
		EVNT_APP_vRegister_event(END_DEVICE_ACCESSED_FOR_WRITE, 0, true, c1218_apl.user_id, rtc.utc_timestamp);
 1014c24:	f8df b2a8 	ldr.w	fp, [pc, #680]	; 1014ed0 <C1219_pwrite_offset_service+0x340>
		c1219[instance].busy_instance = true;
 1014c28:	55ac      	strb	r4, [r5, r6]
		EVNT_APP_vRegister_event(END_DEVICE_ACCESSED_FOR_WRITE, 0, true, c1218_apl.user_id, rtc.utc_timestamp);
 1014c2a:	2008      	movs	r0, #8
 1014c2c:	47d8      	blx	fp
		if ( c1219[instance].c1218_dll->uart == OP_UART ) {
 1014c2e:	783b      	ldrb	r3, [r7, #0]
 1014c30:	4996      	ldr	r1, [pc, #600]	; (1014e8c <C1219_pwrite_offset_service+0x2fc>)
 1014c32:	fb09 5203 	mla	r2, r9, r3, r5
 1014c36:	6850      	ldr	r0, [r2, #4]
 1014c38:	f8d0 2204 	ldr.w	r2, [r0, #516]	; 0x204
 1014c3c:	428a      	cmp	r2, r1
 1014c3e:	f000 80eb 	beq.w	1014e18 <C1219_pwrite_offset_service+0x288>
		else if ( c1219[instance].c1218_dll->uart == NIC_UART ) {
 1014c42:	4993      	ldr	r1, [pc, #588]	; (1014e90 <C1219_pwrite_offset_service+0x300>)
 1014c44:	428a      	cmp	r2, r1
 1014c46:	f000 80f5 	beq.w	1014e34 <C1219_pwrite_offset_service+0x2a4>
		c1219[instance].table_id = 0;
 1014c4a:	f241 74b4 	movw	r4, #6068	; 0x17b4
 1014c4e:	fb04 5303 	mla	r3, r4, r3, r5
 1014c52:	f04f 0e00 	mov.w	lr, #0
 1014c56:	f8a3 e02c 	strh.w	lr, [r3, #44]	; 0x2c
		c1219[instance].table_id |= (uint16_t)(c1219[instance].c1218_dll->rx_data[SERVICE_INDEX + 1] << 8);
 1014c5a:	6882      	ldr	r2, [r0, #8]
		cksum_rx = c1219[instance].c1218_dll->rx_data[SERVICE_INDEX + c1219[instance].count + 8];
 1014c5c:	4e8d      	ldr	r6, [pc, #564]	; (1014e94 <C1219_pwrite_offset_service+0x304>)
		c1219[instance].table_id |= (uint16_t)(c1219[instance].c1218_dll->rx_data[SERVICE_INDEX + 1] << 8);
 1014c5e:	7851      	ldrb	r1, [r2, #1]
		cksum_calc = CRC_2s_complement(&c1219[instance].c1218_dll->rx_data[SERVICE_INDEX + 8], c1219[instance].count);
 1014c60:	f8df c270 	ldr.w	ip, [pc, #624]	; 1014ed4 <C1219_pwrite_offset_service+0x344>
 1014c64:	f8df 9270 	ldr.w	r9, [pc, #624]	; 1014ed8 <C1219_pwrite_offset_service+0x348>
		c1219[instance].table_id |= (uint16_t)(c1219[instance].c1218_dll->rx_data[SERVICE_INDEX + 1] << 8);
 1014c68:	0209      	lsls	r1, r1, #8
 1014c6a:	8599      	strh	r1, [r3, #44]	; 0x2c
		c1219[instance].table_id |= (uint16_t)(c1219[instance].c1218_dll->rx_data[SERVICE_INDEX + 2] << 0);
 1014c6c:	6882      	ldr	r2, [r0, #8]
 1014c6e:	7892      	ldrb	r2, [r2, #2]
		c1219[instance].offset = 0;
 1014c70:	f8c3 e030 	str.w	lr, [r3, #48]	; 0x30
		c1219[instance].table_id |= (uint16_t)(c1219[instance].c1218_dll->rx_data[SERVICE_INDEX + 2] << 0);
 1014c74:	4311      	orrs	r1, r2
 1014c76:	8599      	strh	r1, [r3, #44]	; 0x2c
		c1219[instance].offset |= (uint32_t)(c1219[instance].c1218_dll->rx_data[SERVICE_INDEX + 3] << 16);
 1014c78:	6882      	ldr	r2, [r0, #8]
 1014c7a:	78d2      	ldrb	r2, [r2, #3]
 1014c7c:	0412      	lsls	r2, r2, #16
 1014c7e:	631a      	str	r2, [r3, #48]	; 0x30
		c1219[instance].offset |= (uint32_t)(c1219[instance].c1218_dll->rx_data[SERVICE_INDEX + 4] <<  8);
 1014c80:	6881      	ldr	r1, [r0, #8]
 1014c82:	7909      	ldrb	r1, [r1, #4]
 1014c84:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 1014c88:	631a      	str	r2, [r3, #48]	; 0x30
		c1219[instance].offset |= (uint32_t)(c1219[instance].c1218_dll->rx_data[SERVICE_INDEX + 5] <<  0);
 1014c8a:	6881      	ldr	r1, [r0, #8]
 1014c8c:	7949      	ldrb	r1, [r1, #5]
		c1219[instance].count = 0;
 1014c8e:	f8c3 e034 	str.w	lr, [r3, #52]	; 0x34
		c1219[instance].offset |= (uint32_t)(c1219[instance].c1218_dll->rx_data[SERVICE_INDEX + 5] <<  0);
 1014c92:	430a      	orrs	r2, r1
 1014c94:	631a      	str	r2, [r3, #48]	; 0x30
		c1219[instance].count |= (uint16_t)(c1219[instance].c1218_dll->rx_data[SERVICE_INDEX + 6] << 8);
 1014c96:	6881      	ldr	r1, [r0, #8]
 1014c98:	7989      	ldrb	r1, [r1, #6]
 1014c9a:	0209      	lsls	r1, r1, #8
 1014c9c:	6359      	str	r1, [r3, #52]	; 0x34
		c1219[instance].count |= (uint16_t)(c1219[instance].c1218_dll->rx_data[SERVICE_INDEX + 7] << 0);
 1014c9e:	6882      	ldr	r2, [r0, #8]
 1014ca0:	f892 e007 	ldrb.w	lr, [r2, #7]
 1014ca4:	ea4e 0101 	orr.w	r1, lr, r1
 1014ca8:	6359      	str	r1, [r3, #52]	; 0x34
		cksum_rx = c1219[instance].c1218_dll->rx_data[SERVICE_INDEX + c1219[instance].count + 8];
 1014caa:	6880      	ldr	r0, [r0, #8]
 1014cac:	1843      	adds	r3, r0, r1
		cksum_calc = CRC_2s_complement(&c1219[instance].c1218_dll->rx_data[SERVICE_INDEX + 8], c1219[instance].count);
 1014cae:	3008      	adds	r0, #8
		cksum_rx = c1219[instance].c1218_dll->rx_data[SERVICE_INDEX + c1219[instance].count + 8];
 1014cb0:	7a1b      	ldrb	r3, [r3, #8]
 1014cb2:	7033      	strb	r3, [r6, #0]
		cksum_calc = CRC_2s_complement(&c1219[instance].c1218_dll->rx_data[SERVICE_INDEX + 8], c1219[instance].count);
 1014cb4:	47e0      	blx	ip
		EVNT_APP_vRegister_event(TABLE_WRITTEN_TO, c1219[instance].table_id, true, c1218_apl.user_id, rtc.utc_timestamp);
 1014cb6:	783a      	ldrb	r2, [r7, #0]
 1014cb8:	f8da 3004 	ldr.w	r3, [sl, #4]
 1014cbc:	9300      	str	r3, [sp, #0]
 1014cbe:	fb04 5202 	mla	r2, r4, r2, r5
 1014cc2:	4643      	mov	r3, r8
 1014cc4:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
		cksum_calc = CRC_2s_complement(&c1219[instance].c1218_dll->rx_data[SERVICE_INDEX + 8], c1219[instance].count);
 1014cc6:	f889 0000 	strb.w	r0, [r9]
		EVNT_APP_vRegister_event(TABLE_WRITTEN_TO, c1219[instance].table_id, true, c1218_apl.user_id, rtc.utc_timestamp);
 1014cca:	2201      	movs	r2, #1
 1014ccc:	200a      	movs	r0, #10
 1014cce:	47d8      	blx	fp
		if (cksum_rx == cksum_calc) {
 1014cd0:	7832      	ldrb	r2, [r6, #0]
 1014cd2:	f899 3000 	ldrb.w	r3, [r9]
 1014cd6:	429a      	cmp	r2, r3
 1014cd8:	d011      	beq.n	1014cfe <C1219_pwrite_offset_service+0x16e>
			C1218_send_err(c1219[instance].c1218_dll);
 1014cda:	783b      	ldrb	r3, [r7, #0]
 1014cdc:	4a6e      	ldr	r2, [pc, #440]	; (1014e98 <C1219_pwrite_offset_service+0x308>)
 1014cde:	fb04 5403 	mla	r4, r4, r3, r5
 1014ce2:	6860      	ldr	r0, [r4, #4]
 1014ce4:	4790      	blx	r2
		c1219[instance].busy_instance = false;
 1014ce6:	783a      	ldrb	r2, [r7, #0]
 1014ce8:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1014cec:	fb03 f302 	mul.w	r3, r3, r2
 1014cf0:	2200      	movs	r2, #0
 1014cf2:	54ea      	strb	r2, [r5, r3]
}
 1014cf4:	b009      	add	sp, #36	; 0x24
 1014cf6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1014cfa:	b004      	add	sp, #16
 1014cfc:	4770      	bx	lr
			memcpy(&user_info.password, &c1218_apl.password, 20);
 1014cfe:	ab12      	add	r3, sp, #72	; 0x48
				.tbl_proc_id			= (c1219[instance].table_id & TBL_PROC_NBR_bm) >> TBL_PROC_NBR_bp,
 1014d00:	783a      	ldrb	r2, [r7, #0]
			memcpy(&user_info.password, &c1218_apl.password, 20);
 1014d02:	f853 1f12 	ldr.w	r1, [r3, #18]!
 1014d06:	f8cd 100b 	str.w	r1, [sp, #11]
 1014d0a:	6919      	ldr	r1, [r3, #16]
 1014d0c:	68de      	ldr	r6, [r3, #12]
 1014d0e:	f8cd 101b 	str.w	r1, [sp, #27]
			SECURITY_USER_INFO_TYPE user_info = {
 1014d12:	f89d 006e 	ldrb.w	r0, [sp, #110]	; 0x6e
			memcpy(&user_info.password, &c1218_apl.password, 20);
 1014d16:	6859      	ldr	r1, [r3, #4]
 1014d18:	f8cd 6017 	str.w	r6, [sp, #23]
 1014d1c:	f8cd 100f 	str.w	r1, [sp, #15]
 1014d20:	689e      	ldr	r6, [r3, #8]
			SECURITY_USER_INFO_TYPE user_info = {
 1014d22:	f88d 001f 	strb.w	r0, [sp, #31]
			if ( SECR_APP_bCheck_access_to_write_table(user_info) ) {
 1014d26:	ab08      	add	r3, sp, #32
 1014d28:	e913 0003 	ldmdb	r3, {r0, r1}
				.tbl_proc_id			= (c1219[instance].table_id & TBL_PROC_NBR_bm) >> TBL_PROC_NBR_bp,
 1014d2c:	fb04 5202 	mla	r2, r4, r2, r5
			memcpy(&user_info.password, &c1218_apl.password, 20);
 1014d30:	f8cd 6013 	str.w	r6, [sp, #19]
				.tbl_proc_id			= (c1219[instance].table_id & TBL_PROC_NBR_bm) >> TBL_PROC_NBR_bp,
 1014d34:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
			if ( SECR_APP_bCheck_access_to_write_table(user_info) ) {
 1014d36:	4e59      	ldr	r6, [pc, #356]	; (1014e9c <C1219_pwrite_offset_service+0x30c>)
 1014d38:	e88d 0003 	stmia.w	sp, {r0, r1}
				.tbl_proc_id			= (c1219[instance].table_id & TBL_PROC_NBR_bm) >> TBL_PROC_NBR_bp,
 1014d3c:	f3c2 030a 	ubfx	r3, r2, #0, #11
				.mfg_flag				= (bool)((c1219[instance].table_id & STD_VS_MFG_FLAG_bm) >> STD_VS_MFG_FLAG_bp),
 1014d40:	f3c2 22c0 	ubfx	r2, r2, #11, #1
			SECURITY_USER_INFO_TYPE user_info = {
 1014d44:	f8ad 3008 	strh.w	r3, [sp, #8]
 1014d48:	f88d 200a 	strb.w	r2, [sp, #10]
 1014d4c:	ab02      	add	r3, sp, #8
			if ( SECR_APP_bCheck_access_to_write_table(user_info) ) {
 1014d4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 1014d50:	47b0      	blx	r6
 1014d52:	2800      	cmp	r0, #0
 1014d54:	d059      	beq.n	1014e0a <C1219_pwrite_offset_service+0x27a>
				switch ( c1219[instance].table_id ) {
 1014d56:	783e      	ldrb	r6, [r7, #0]
 1014d58:	fb04 5406 	mla	r4, r4, r6, r5
 1014d5c:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 1014d5e:	2b33      	cmp	r3, #51	; 0x33
 1014d60:	f000 8206 	beq.w	1015170 <C1219_pwrite_offset_service+0x5e0>
 1014d64:	d929      	bls.n	1014dba <C1219_pwrite_offset_service+0x22a>
 1014d66:	2b4b      	cmp	r3, #75	; 0x4b
 1014d68:	f000 820c 	beq.w	1015184 <C1219_pwrite_offset_service+0x5f4>
 1014d6c:	d970      	bls.n	1014e50 <C1219_pwrite_offset_service+0x2c0>
 1014d6e:	f640 0204 	movw	r2, #2052	; 0x804
 1014d72:	4293      	cmp	r3, r2
 1014d74:	f000 81aa 	beq.w	10150cc <C1219_pwrite_offset_service+0x53c>
 1014d78:	f240 8105 	bls.w	1014f86 <C1219_pwrite_offset_service+0x3f6>
 1014d7c:	f640 0235 	movw	r2, #2101	; 0x835
 1014d80:	4293      	cmp	r3, r2
 1014d82:	f000 818f 	beq.w	10150a4 <C1219_pwrite_offset_service+0x514>
 1014d86:	f240 817a 	bls.w	101507e <C1219_pwrite_offset_service+0x4ee>
 1014d8a:	f640 0249 	movw	r2, #2121	; 0x849
 1014d8e:	4293      	cmp	r3, r2
 1014d90:	f040 8113 	bne.w	1014fba <C1219_pwrite_offset_service+0x42a>
	c1219_ptr->table_size = EVNT_APP_usMt_73_get_size();
 1014d94:	4b42      	ldr	r3, [pc, #264]	; (1014ea0 <C1219_pwrite_offset_service+0x310>)
 1014d96:	4798      	blx	r3
 1014d98:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1014d9c:	fb03 5606 	mla	r6, r3, r6, r5
	c1219_ptr->execute_table_writing = EVNT_APP_bMt_73_execute_table_writing;
 1014da0:	4940      	ldr	r1, [pc, #256]	; (1014ea4 <C1219_pwrite_offset_service+0x314>)
	c1219_ptr->table_size = EVNT_APP_usMt_73_get_size();
 1014da2:	8730      	strh	r0, [r6, #56]	; 0x38
	c1219_ptr->execute_table_reading = EVNT_APP_bMt_73_execute_table_reading;
 1014da4:	4840      	ldr	r0, [pc, #256]	; (1014ea8 <C1219_pwrite_offset_service+0x318>)
 1014da6:	f241 74ac 	movw	r4, #6060	; 0x17ac
	c1219_ptr->execute_table_writing = EVNT_APP_bMt_73_execute_table_writing;
 1014daa:	f241 72b0 	movw	r2, #6064	; 0x17b0
	c1219_ptr->execute_table_reading = REGS_APP_bSt_11_execute_table_reading;
 1014dae:	5130      	str	r0, [r6, r4]
	C1219_pwrite_offset(c1219_ptr);
 1014db0:	4b3e      	ldr	r3, [pc, #248]	; (1014eac <C1219_pwrite_offset_service+0x31c>)
	c1219_ptr->execute_table_writing = REGS_APP_bSt_11_execute_table_writing;
 1014db2:	50b1      	str	r1, [r6, r2]
	C1219_pwrite_offset(c1219_ptr);
 1014db4:	4630      	mov	r0, r6
 1014db6:	4798      	blx	r3
 1014db8:	e795      	b.n	1014ce6 <C1219_pwrite_offset_service+0x156>
				switch ( c1219[instance].table_id ) {
 1014dba:	2b18      	cmp	r3, #24
 1014dbc:	f000 8146 	beq.w	101504c <C1219_pwrite_offset_service+0x4bc>
 1014dc0:	f200 808c 	bhi.w	1014edc <C1219_pwrite_offset_service+0x34c>
 1014dc4:	2b0d      	cmp	r3, #13
 1014dc6:	f000 8150 	beq.w	101506a <C1219_pwrite_offset_service+0x4da>
 1014dca:	f240 80a0 	bls.w	1014f0e <C1219_pwrite_offset_service+0x37e>
 1014dce:	2b16      	cmp	r3, #22
 1014dd0:	f000 82c2 	beq.w	1015358 <C1219_pwrite_offset_service+0x7c8>
 1014dd4:	f200 82b2 	bhi.w	101533c <C1219_pwrite_offset_service+0x7ac>
 1014dd8:	2b15      	cmp	r3, #21
 1014dda:	f040 80a1 	bne.w	1014f20 <C1219_pwrite_offset_service+0x390>
	c1219_ptr->table_size = REGS_APP_usSt_21_get_size();
 1014dde:	4b34      	ldr	r3, [pc, #208]	; (1014eb0 <C1219_pwrite_offset_service+0x320>)
 1014de0:	4798      	blx	r3
 1014de2:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1014de6:	fb03 5606 	mla	r6, r3, r6, r5
	c1219_ptr->execute_table_reading = REGS_APP_bSt_21_execute_table_reading;
 1014dea:	f241 74ac 	movw	r4, #6060	; 0x17ac
	c1219_ptr->table_size = REGS_APP_usSt_21_get_size();
 1014dee:	8730      	strh	r0, [r6, #56]	; 0x38
	c1219_ptr->execute_table_writing = REGS_APP_bSt_21_execute_table_writing;
 1014df0:	f241 72b0 	movw	r2, #6064	; 0x17b0
	c1219_ptr->execute_table_reading = REGS_APP_bSt_21_execute_table_reading;
 1014df4:	482f      	ldr	r0, [pc, #188]	; (1014eb4 <C1219_pwrite_offset_service+0x324>)
	c1219_ptr->execute_table_writing = REGS_APP_bSt_21_execute_table_writing;
 1014df6:	4930      	ldr	r1, [pc, #192]	; (1014eb8 <C1219_pwrite_offset_service+0x328>)
 1014df8:	e7d9      	b.n	1014dae <C1219_pwrite_offset_service+0x21e>
	for ( instance = 0; instance < NBR_C1219_INSTANCES; instance++ ) {
 1014dfa:	2302      	movs	r3, #2
		if (c1219[instance].busy_instance == false) break;
 1014dfc:	461e      	mov	r6, r3
 1014dfe:	703b      	strb	r3, [r7, #0]
 1014e00:	e6f3      	b.n	1014bea <C1219_pwrite_offset_service+0x5a>
	for ( instance = 0; instance < NBR_C1219_INSTANCES; instance++ ) {
 1014e02:	2303      	movs	r3, #3
		if (c1219[instance].busy_instance == false) break;
 1014e04:	461e      	mov	r6, r3
 1014e06:	703b      	strb	r3, [r7, #0]
 1014e08:	e6ef      	b.n	1014bea <C1219_pwrite_offset_service+0x5a>
				C1218_send_isc(c1219[instance].c1218_dll);
 1014e0a:	783b      	ldrb	r3, [r7, #0]
 1014e0c:	4a2b      	ldr	r2, [pc, #172]	; (1014ebc <C1219_pwrite_offset_service+0x32c>)
 1014e0e:	fb04 5403 	mla	r4, r4, r3, r5
 1014e12:	6860      	ldr	r0, [r4, #4]
 1014e14:	4790      	blx	r2
 1014e16:	e766      	b.n	1014ce6 <C1219_pwrite_offset_service+0x156>
			EVNT_APP_vRegister_event(END_DEVICE_ACCESSED_FOR_WRITE_OP, 0, 0, c1218_apl.user_id, rtc.utc_timestamp);
 1014e18:	f8da 3004 	ldr.w	r3, [sl, #4]
 1014e1c:	9300      	str	r3, [sp, #0]
 1014e1e:	2200      	movs	r2, #0
 1014e20:	4643      	mov	r3, r8
 1014e22:	2016      	movs	r0, #22
 1014e24:	4611      	mov	r1, r2
 1014e26:	47d8      	blx	fp
 1014e28:	783b      	ldrb	r3, [r7, #0]
 1014e2a:	fb09 5903 	mla	r9, r9, r3, r5
 1014e2e:	f8d9 0004 	ldr.w	r0, [r9, #4]
 1014e32:	e70a      	b.n	1014c4a <C1219_pwrite_offset_service+0xba>
			EVNT_APP_vRegister_event(END_DEVICE_ACCESSED_FOR_WRITE_NIC, 0, 0, c1218_apl.user_id, rtc.utc_timestamp);
 1014e34:	f8da 3004 	ldr.w	r3, [sl, #4]
 1014e38:	9300      	str	r3, [sp, #0]
 1014e3a:	2200      	movs	r2, #0
 1014e3c:	4643      	mov	r3, r8
 1014e3e:	2017      	movs	r0, #23
 1014e40:	4611      	mov	r1, r2
 1014e42:	47d8      	blx	fp
 1014e44:	783b      	ldrb	r3, [r7, #0]
 1014e46:	fb09 5903 	mla	r9, r9, r3, r5
 1014e4a:	f8d9 0004 	ldr.w	r0, [r9, #4]
 1014e4e:	e6fc      	b.n	1014c4a <C1219_pwrite_offset_service+0xba>
				switch ( c1219[instance].table_id ) {
 1014e50:	2b3e      	cmp	r3, #62	; 0x3e
 1014e52:	f000 8269 	beq.w	1015328 <C1219_pwrite_offset_service+0x798>
 1014e56:	d96b      	bls.n	1014f30 <C1219_pwrite_offset_service+0x3a0>
 1014e58:	2b49      	cmp	r3, #73	; 0x49
 1014e5a:	f000 814f 	beq.w	10150fc <C1219_pwrite_offset_service+0x56c>
 1014e5e:	f200 813f 	bhi.w	10150e0 <C1219_pwrite_offset_service+0x550>
 1014e62:	2b47      	cmp	r3, #71	; 0x47
 1014e64:	d15c      	bne.n	1014f20 <C1219_pwrite_offset_service+0x390>
	c1219_ptr->table_size = EVNT_APP_usSt_71_get_size();
 1014e66:	4b16      	ldr	r3, [pc, #88]	; (1014ec0 <C1219_pwrite_offset_service+0x330>)
 1014e68:	4798      	blx	r3
 1014e6a:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1014e6e:	fb03 5606 	mla	r6, r3, r6, r5
	c1219_ptr->execute_table_reading = EVNT_APP_bSt_71_execute_table_reading;
 1014e72:	f241 74ac 	movw	r4, #6060	; 0x17ac
	c1219_ptr->table_size = EVNT_APP_usSt_71_get_size();
 1014e76:	8730      	strh	r0, [r6, #56]	; 0x38
	c1219_ptr->execute_table_writing = EVNT_APP_bSt_71_execute_table_writing;
 1014e78:	f241 72b0 	movw	r2, #6064	; 0x17b0
	c1219_ptr->execute_table_reading = EVNT_APP_bSt_71_execute_table_reading;
 1014e7c:	4811      	ldr	r0, [pc, #68]	; (1014ec4 <C1219_pwrite_offset_service+0x334>)
	c1219_ptr->execute_table_writing = EVNT_APP_bSt_71_execute_table_writing;
 1014e7e:	4912      	ldr	r1, [pc, #72]	; (1014ec8 <C1219_pwrite_offset_service+0x338>)
 1014e80:	e795      	b.n	1014dae <C1219_pwrite_offset_service+0x21e>
 1014e82:	bf00      	nop
 1014e84:	2001064c 	.word	0x2001064c
 1014e88:	20000929 	.word	0x20000929
 1014e8c:	48004000 	.word	0x48004000
 1014e90:	400e0600 	.word	0x400e0600
 1014e94:	20000915 	.word	0x20000915
 1014e98:	01016465 	.word	0x01016465
 1014e9c:	0102b37d 	.word	0x0102b37d
 1014ea0:	01018d95 	.word	0x01018d95
 1014ea4:	01018d11 	.word	0x01018d11
 1014ea8:	01018ca5 	.word	0x01018ca5
 1014eac:	0101052d 	.word	0x0101052d
 1014eb0:	01026de5 	.word	0x01026de5
 1014eb4:	01026d21 	.word	0x01026d21
 1014eb8:	01026d65 	.word	0x01026d65
 1014ebc:	01016485 	.word	0x01016485
 1014ec0:	01018691 	.word	0x01018691
 1014ec4:	010185e9 	.word	0x010185e9
 1014ec8:	0101861d 	.word	0x0101861d
 1014ecc:	20017160 	.word	0x20017160
 1014ed0:	01019961 	.word	0x01019961
 1014ed4:	01016bf5 	.word	0x01016bf5
 1014ed8:	20000913 	.word	0x20000913
				switch ( c1219[instance].table_id ) {
 1014edc:	2b29      	cmp	r3, #41	; 0x29
 1014ede:	f000 80eb 	beq.w	10150b8 <C1219_pwrite_offset_service+0x528>
 1014ee2:	d93b      	bls.n	1014f5c <C1219_pwrite_offset_service+0x3cc>
 1014ee4:	2b2b      	cmp	r3, #43	; 0x2b
 1014ee6:	f000 8121 	beq.w	101512c <C1219_pwrite_offset_service+0x59c>
 1014eea:	f0c0 8111 	bcc.w	1015110 <C1219_pwrite_offset_service+0x580>
 1014eee:	2b2c      	cmp	r3, #44	; 0x2c
 1014ef0:	d116      	bne.n	1014f20 <C1219_pwrite_offset_service+0x390>
	c1219_ptr->table_size = SECR_APP_usSt_44_get_size();
 1014ef2:	4bb0      	ldr	r3, [pc, #704]	; (10151b4 <C1219_pwrite_offset_service+0x624>)
 1014ef4:	4798      	blx	r3
 1014ef6:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1014efa:	fb03 5606 	mla	r6, r3, r6, r5
	c1219_ptr->execute_table_reading = SECR_APP_bSt_44_execute_table_reading;
 1014efe:	f241 74ac 	movw	r4, #6060	; 0x17ac
	c1219_ptr->table_size = SECR_APP_usSt_44_get_size();
 1014f02:	8730      	strh	r0, [r6, #56]	; 0x38
	c1219_ptr->execute_table_writing = SECR_APP_bSt_44_execute_table_writing;
 1014f04:	f241 72b0 	movw	r2, #6064	; 0x17b0
	c1219_ptr->execute_table_reading = SECR_APP_bSt_44_execute_table_reading;
 1014f08:	48ab      	ldr	r0, [pc, #684]	; (10151b8 <C1219_pwrite_offset_service+0x628>)
	c1219_ptr->execute_table_writing = SECR_APP_bSt_44_execute_table_writing;
 1014f0a:	49ac      	ldr	r1, [pc, #688]	; (10151bc <C1219_pwrite_offset_service+0x62c>)
 1014f0c:	e74f      	b.n	1014dae <C1219_pwrite_offset_service+0x21e>
				switch ( c1219[instance].table_id ) {
 1014f0e:	2b06      	cmp	r3, #6
 1014f10:	f000 81f2 	beq.w	10152f8 <C1219_pwrite_offset_service+0x768>
 1014f14:	2b0b      	cmp	r3, #11
 1014f16:	f000 81e1 	beq.w	10152dc <C1219_pwrite_offset_service+0x74c>
 1014f1a:	2b01      	cmp	r3, #1
 1014f1c:	f000 81f6 	beq.w	101530c <C1219_pwrite_offset_service+0x77c>
						C1218_send_iar(c1219[instance].c1218_dll);
 1014f20:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1014f24:	fb03 5606 	mla	r6, r3, r6, r5
 1014f28:	4ba5      	ldr	r3, [pc, #660]	; (10151c0 <C1219_pwrite_offset_service+0x630>)
 1014f2a:	6870      	ldr	r0, [r6, #4]
 1014f2c:	4798      	blx	r3
						break;
 1014f2e:	e6da      	b.n	1014ce6 <C1219_pwrite_offset_service+0x156>
				switch ( c1219[instance].table_id ) {
 1014f30:	2b36      	cmp	r3, #54	; 0x36
 1014f32:	f000 8113 	beq.w	101515c <C1219_pwrite_offset_service+0x5cc>
 1014f36:	2b3d      	cmp	r3, #61	; 0x3d
 1014f38:	f000 8102 	beq.w	1015140 <C1219_pwrite_offset_service+0x5b0>
 1014f3c:	2b35      	cmp	r3, #53	; 0x35
 1014f3e:	d1ef      	bne.n	1014f20 <C1219_pwrite_offset_service+0x390>
	c1219_ptr->table_size = TOU_APP_usSt_53_get_size();
 1014f40:	4ba0      	ldr	r3, [pc, #640]	; (10151c4 <C1219_pwrite_offset_service+0x634>)
 1014f42:	4798      	blx	r3
 1014f44:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1014f48:	fb03 5606 	mla	r6, r3, r6, r5
	c1219_ptr->execute_table_reading = TOU_APP_bSt_53_execute_table_reading;
 1014f4c:	f241 74ac 	movw	r4, #6060	; 0x17ac
	c1219_ptr->table_size = TOU_APP_usSt_53_get_size();
 1014f50:	8730      	strh	r0, [r6, #56]	; 0x38
	c1219_ptr->execute_table_writing = TOU_APP_bSt_53_execute_table_writing;
 1014f52:	f241 72b0 	movw	r2, #6064	; 0x17b0
	c1219_ptr->execute_table_reading = TOU_APP_bSt_53_execute_table_reading;
 1014f56:	489c      	ldr	r0, [pc, #624]	; (10151c8 <C1219_pwrite_offset_service+0x638>)
	c1219_ptr->execute_table_writing = TOU_APP_bSt_53_execute_table_writing;
 1014f58:	499c      	ldr	r1, [pc, #624]	; (10151cc <C1219_pwrite_offset_service+0x63c>)
 1014f5a:	e728      	b.n	1014dae <C1219_pwrite_offset_service+0x21e>
				switch ( c1219[instance].table_id ) {
 1014f5c:	2b1a      	cmp	r3, #26
 1014f5e:	f000 81b3 	beq.w	10152c8 <C1219_pwrite_offset_service+0x738>
 1014f62:	f0c0 8119 	bcc.w	1015198 <C1219_pwrite_offset_service+0x608>
 1014f66:	2b1b      	cmp	r3, #27
 1014f68:	d1da      	bne.n	1014f20 <C1219_pwrite_offset_service+0x390>
	c1219_ptr->table_size = REGS_APP_usSt_27_get_size();
 1014f6a:	4b99      	ldr	r3, [pc, #612]	; (10151d0 <C1219_pwrite_offset_service+0x640>)
 1014f6c:	4798      	blx	r3
 1014f6e:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1014f72:	fb03 5606 	mla	r6, r3, r6, r5
	c1219_ptr->execute_table_reading = REGS_APP_bSt_27_execute_table_reading;
 1014f76:	f241 74ac 	movw	r4, #6060	; 0x17ac
	c1219_ptr->table_size = REGS_APP_usSt_27_get_size();
 1014f7a:	8730      	strh	r0, [r6, #56]	; 0x38
	c1219_ptr->execute_table_writing = REGS_APP_bSt_27_execute_table_writing;
 1014f7c:	f241 72b0 	movw	r2, #6064	; 0x17b0
	c1219_ptr->execute_table_reading = REGS_APP_bSt_27_execute_table_reading;
 1014f80:	4894      	ldr	r0, [pc, #592]	; (10151d4 <C1219_pwrite_offset_service+0x644>)
	c1219_ptr->execute_table_writing = REGS_APP_bSt_27_execute_table_writing;
 1014f82:	4995      	ldr	r1, [pc, #596]	; (10151d8 <C1219_pwrite_offset_service+0x648>)
 1014f84:	e713      	b.n	1014dae <C1219_pwrite_offset_service+0x21e>
				switch ( c1219[instance].table_id ) {
 1014f86:	f640 0201 	movw	r2, #2049	; 0x801
 1014f8a:	4293      	cmp	r3, r2
 1014f8c:	f000 81fc 	beq.w	1015388 <C1219_pwrite_offset_service+0x7f8>
 1014f90:	f640 0203 	movw	r2, #2051	; 0x803
 1014f94:	4293      	cmp	r3, r2
 1014f96:	f000 81e9 	beq.w	101536c <C1219_pwrite_offset_service+0x7dc>
 1014f9a:	2b4c      	cmp	r3, #76	; 0x4c
 1014f9c:	d1c0      	bne.n	1014f20 <C1219_pwrite_offset_service+0x390>
	c1219_ptr->table_size = EVNT_APP_usSt_76_get_size();
 1014f9e:	4b8f      	ldr	r3, [pc, #572]	; (10151dc <C1219_pwrite_offset_service+0x64c>)
 1014fa0:	4798      	blx	r3
 1014fa2:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1014fa6:	fb03 5606 	mla	r6, r3, r6, r5
	c1219_ptr->execute_table_reading = EVNT_APP_bSt_76_execute_table_reading;
 1014faa:	f241 74ac 	movw	r4, #6060	; 0x17ac
	c1219_ptr->table_size = EVNT_APP_usSt_76_get_size();
 1014fae:	8730      	strh	r0, [r6, #56]	; 0x38
	c1219_ptr->execute_table_writing = EVNT_APP_bSt_76_execute_table_writing;
 1014fb0:	f241 72b0 	movw	r2, #6064	; 0x17b0
	c1219_ptr->execute_table_reading = EVNT_APP_bSt_76_execute_table_reading;
 1014fb4:	488a      	ldr	r0, [pc, #552]	; (10151e0 <C1219_pwrite_offset_service+0x650>)
	c1219_ptr->execute_table_writing = EVNT_APP_bSt_76_execute_table_writing;
 1014fb6:	498b      	ldr	r1, [pc, #556]	; (10151e4 <C1219_pwrite_offset_service+0x654>)
 1014fb8:	e6f9      	b.n	1014dae <C1219_pwrite_offset_service+0x21e>
				switch ( c1219[instance].table_id ) {
 1014fba:	f640 02ca 	movw	r2, #2250	; 0x8ca
 1014fbe:	4293      	cmp	r3, r2
 1014fc0:	d1ae      	bne.n	1014f20 <C1219_pwrite_offset_service+0x390>
						C1219_mt_202_pwrite_offset(&c1219[instance]);
 1014fc2:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1014fc6:	fb03 5606 	mla	r6, r3, r6, r5
	table_count = (uint16_t)c1219_ptr->c1218_dll->rx_buffer[13];
 1014fca:	f8df 92ec 	ldr.w	r9, [pc, #748]	; 10152b8 <C1219_pwrite_offset_service+0x728>
	flash_offset = ((uint32_t)c1219_ptr->c1218_dll->rx_buffer[9]<<16);
 1014fce:	6873      	ldr	r3, [r6, #4]
	mt144_page = (uint32_t *) flash_offset;
 1014fd0:	f8df 82e8 	ldr.w	r8, [pc, #744]	; 10152bc <C1219_pwrite_offset_service+0x72c>
	flash_offset = flash_offset |((uint32_t)c1219_ptr->c1218_dll->rx_buffer[10]<<8);
 1014fd4:	7f9c      	ldrb	r4, [r3, #30]
	flash_offset = ((uint32_t)c1219_ptr->c1218_dll->rx_buffer[9]<<16);
 1014fd6:	7f58      	ldrb	r0, [r3, #29]
	flash_offset = flash_offset |((uint32_t)c1219_ptr->c1218_dll->rx_buffer[11]);
 1014fd8:	7fda      	ldrb	r2, [r3, #31]
	table_count = (uint16_t)c1219_ptr->c1218_dll->rx_buffer[13];
 1014fda:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 1014fde:	f8a9 3000 	strh.w	r3, [r9]
	flash_offset = flash_offset |((uint32_t)c1219_ptr->c1218_dll->rx_buffer[10]<<8);
 1014fe2:	0224      	lsls	r4, r4, #8
 1014fe4:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
		 flash_unlock(image_start_addr, image_start_addr + (TOTAL_IMAGE_SECTOR_SIZE) - 1, 0, 0);  
 1014fe8:	2300      	movs	r3, #0
	flash_offset = flash_offset |((uint32_t)c1219_ptr->c1218_dll->rx_buffer[11]);
 1014fea:	4314      	orrs	r4, r2
		 flash_unlock(image_start_addr, image_start_addr + (TOTAL_IMAGE_SECTOR_SIZE) - 1, 0, 0);  
 1014fec:	497e      	ldr	r1, [pc, #504]	; (10151e8 <C1219_pwrite_offset_service+0x658>)
 1014fee:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 10152c0 <C1219_pwrite_offset_service+0x730>
 1014ff2:	487e      	ldr	r0, [pc, #504]	; (10151ec <C1219_pwrite_offset_service+0x65c>)
 1014ff4:	461a      	mov	r2, r3
	flash_offset = flash_offset + (0x01040000);
 1014ff6:	f104 7482 	add.w	r4, r4, #17039360	; 0x1040000
	mt144_page = (uint32_t *) flash_offset;
 1014ffa:	f8c8 4000 	str.w	r4, [r8]
		 flash_unlock(image_start_addr, image_start_addr + (TOTAL_IMAGE_SECTOR_SIZE) - 1, 0, 0);  
 1014ffe:	47d0      	blx	sl
		 memcpy(&table_buffer,&c1219_ptr->c1218_dll->rx_buffer[14],table_count);
 1015000:	f8b9 4000 	ldrh.w	r4, [r9]
 1015004:	6871      	ldr	r1, [r6, #4]
 1015006:	4b7a      	ldr	r3, [pc, #488]	; (10151f0 <C1219_pwrite_offset_service+0x660>)
 1015008:	487a      	ldr	r0, [pc, #488]	; (10151f4 <C1219_pwrite_offset_service+0x664>)
 101500a:	4622      	mov	r2, r4
 101500c:	3122      	adds	r1, #34	; 0x22
 101500e:	4798      	blx	r3
		 flash_write((uint32_t)mt144_page, (void*)table_buffer, table_count, 0); 
 1015010:	4622      	mov	r2, r4
 1015012:	f8d8 0000 	ldr.w	r0, [r8]
 1015016:	4977      	ldr	r1, [pc, #476]	; (10151f4 <C1219_pwrite_offset_service+0x664>)
 1015018:	4c77      	ldr	r4, [pc, #476]	; (10151f8 <C1219_pwrite_offset_service+0x668>)
 101501a:	2300      	movs	r3, #0
 101501c:	47a0      	blx	r4
		c1219_ptr->c1218_dll->tx_data_length = 0;
 101501e:	6873      	ldr	r3, [r6, #4]
		 write_ok = true;
 1015020:	f8df e2a0 	ldr.w	lr, [pc, #672]	; 10152c4 <C1219_pwrite_offset_service+0x734>
		C1218_send_response(c1219_ptr->c1218_dll);
 1015024:	4c75      	ldr	r4, [pc, #468]	; (10151fc <C1219_pwrite_offset_service+0x66c>)
		c1219_ptr->c1218_dll->tx_data_length = 0;
 1015026:	2100      	movs	r1, #0
 1015028:	f8a3 10c0 	strh.w	r1, [r3, #192]	; 0xc0
		c1219_ptr->c1218_dll->tx_data[c1219_ptr->c1218_dll->tx_data_length++] = C1218_OK;
 101502c:	6873      	ldr	r3, [r6, #4]
 101502e:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	; 0xc0
 1015032:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 1015036:	f102 0c01 	add.w	ip, r2, #1
 101503a:	f8a3 c0c0 	strh.w	ip, [r3, #192]	; 0xc0
 101503e:	5481      	strb	r1, [r0, r2]
		 write_ok = true;
 1015040:	2301      	movs	r3, #1
		C1218_send_response(c1219_ptr->c1218_dll);
 1015042:	6870      	ldr	r0, [r6, #4]
		 write_ok = true;
 1015044:	f88e 3000 	strb.w	r3, [lr]
		C1218_send_response(c1219_ptr->c1218_dll);
 1015048:	47a0      	blx	r4
 101504a:	e64c      	b.n	1014ce6 <C1219_pwrite_offset_service+0x156>
	c1219_ptr->table_size = REGS_APP_usSt_24_get_size();
 101504c:	4b6c      	ldr	r3, [pc, #432]	; (1015200 <C1219_pwrite_offset_service+0x670>)
 101504e:	4798      	blx	r3
	c1219_ptr->execute_table_writing = REGS_APP_bSt_24_execute_table_writing;
 1015050:	496c      	ldr	r1, [pc, #432]	; (1015204 <C1219_pwrite_offset_service+0x674>)
	c1219_ptr->table_size = REGS_APP_usSt_24_get_size();
 1015052:	8720      	strh	r0, [r4, #56]	; 0x38
	c1219_ptr->execute_table_reading = REGS_APP_bSt_24_execute_table_reading;
 1015054:	486c      	ldr	r0, [pc, #432]	; (1015208 <C1219_pwrite_offset_service+0x678>)
 1015056:	f241 76ac 	movw	r6, #6060	; 0x17ac
	c1219_ptr->execute_table_writing = REGS_APP_bSt_24_execute_table_writing;
 101505a:	f241 72b0 	movw	r2, #6064	; 0x17b0
	c1219_ptr->execute_table_reading = REGS_APP_bSt_13_execute_table_reading;
 101505e:	51a0      	str	r0, [r4, r6]
	C1219_pwrite_offset(c1219_ptr);
 1015060:	4b6a      	ldr	r3, [pc, #424]	; (101520c <C1219_pwrite_offset_service+0x67c>)
	c1219_ptr->execute_table_writing = REGS_APP_bSt_13_execute_table_writing;
 1015062:	50a1      	str	r1, [r4, r2]
	C1219_pwrite_offset(c1219_ptr);
 1015064:	4620      	mov	r0, r4
 1015066:	4798      	blx	r3
 1015068:	e63d      	b.n	1014ce6 <C1219_pwrite_offset_service+0x156>
	c1219_ptr->table_size = REGS_APP_usSt_13_get_size();
 101506a:	4b69      	ldr	r3, [pc, #420]	; (1015210 <C1219_pwrite_offset_service+0x680>)
 101506c:	4798      	blx	r3
	c1219_ptr->execute_table_reading = REGS_APP_bSt_13_execute_table_reading;
 101506e:	f241 76ac 	movw	r6, #6060	; 0x17ac
	c1219_ptr->table_size = REGS_APP_usSt_13_get_size();
 1015072:	8720      	strh	r0, [r4, #56]	; 0x38
	c1219_ptr->execute_table_writing = REGS_APP_bSt_13_execute_table_writing;
 1015074:	f241 72b0 	movw	r2, #6064	; 0x17b0
	c1219_ptr->execute_table_reading = REGS_APP_bSt_13_execute_table_reading;
 1015078:	4866      	ldr	r0, [pc, #408]	; (1015214 <C1219_pwrite_offset_service+0x684>)
	c1219_ptr->execute_table_writing = REGS_APP_bSt_13_execute_table_writing;
 101507a:	4967      	ldr	r1, [pc, #412]	; (1015218 <C1219_pwrite_offset_service+0x688>)
 101507c:	e7ef      	b.n	101505e <C1219_pwrite_offset_service+0x4ce>
				switch ( c1219[instance].table_id ) {
 101507e:	f640 0205 	movw	r2, #2053	; 0x805
 1015082:	4293      	cmp	r3, r2
 1015084:	f47f af4c 	bne.w	1014f20 <C1219_pwrite_offset_service+0x390>
	c1219_ptr->table_size = SM_APP_usMt_5_get_size();
 1015088:	4b64      	ldr	r3, [pc, #400]	; (101521c <C1219_pwrite_offset_service+0x68c>)
 101508a:	4798      	blx	r3
 101508c:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1015090:	fb03 5606 	mla	r6, r3, r6, r5
	c1219_ptr->execute_table_reading = SM_APP_bMt_5_execute_table_reading;
 1015094:	f241 74ac 	movw	r4, #6060	; 0x17ac
	c1219_ptr->table_size = SM_APP_usMt_5_get_size();
 1015098:	8730      	strh	r0, [r6, #56]	; 0x38
	c1219_ptr->execute_table_writing = SM_APP_bMt_5_execute_table_writing;
 101509a:	f241 72b0 	movw	r2, #6064	; 0x17b0
	c1219_ptr->execute_table_reading = SM_APP_bMt_5_execute_table_reading;
 101509e:	4860      	ldr	r0, [pc, #384]	; (1015220 <C1219_pwrite_offset_service+0x690>)
	c1219_ptr->execute_table_writing = SM_APP_bMt_5_execute_table_writing;
 10150a0:	4960      	ldr	r1, [pc, #384]	; (1015224 <C1219_pwrite_offset_service+0x694>)
 10150a2:	e684      	b.n	1014dae <C1219_pwrite_offset_service+0x21e>
	c1219_ptr->table_size = SM_APP_usMt_53_get_size();
 10150a4:	4b60      	ldr	r3, [pc, #384]	; (1015228 <C1219_pwrite_offset_service+0x698>)
 10150a6:	4798      	blx	r3
	c1219_ptr->execute_table_reading = SM_APP_bMt_53_execute_table_reading;
 10150a8:	f241 76ac 	movw	r6, #6060	; 0x17ac
	c1219_ptr->table_size = SM_APP_usMt_53_get_size();
 10150ac:	8720      	strh	r0, [r4, #56]	; 0x38
	c1219_ptr->execute_table_writing = SM_APP_bMt_53_execute_table_writing;
 10150ae:	f241 72b0 	movw	r2, #6064	; 0x17b0
	c1219_ptr->execute_table_reading = SM_APP_bMt_53_execute_table_reading;
 10150b2:	485e      	ldr	r0, [pc, #376]	; (101522c <C1219_pwrite_offset_service+0x69c>)
	c1219_ptr->execute_table_writing = SM_APP_bMt_53_execute_table_writing;
 10150b4:	495e      	ldr	r1, [pc, #376]	; (1015230 <C1219_pwrite_offset_service+0x6a0>)
 10150b6:	e7d2      	b.n	101505e <C1219_pwrite_offset_service+0x4ce>
	c1219_ptr->table_size = SECR_APP_usSt_41_get_size();
 10150b8:	4b5e      	ldr	r3, [pc, #376]	; (1015234 <C1219_pwrite_offset_service+0x6a4>)
 10150ba:	4798      	blx	r3
	c1219_ptr->execute_table_reading = SECR_APP_bSt_41_execute_table_reading;
 10150bc:	f241 76ac 	movw	r6, #6060	; 0x17ac
	c1219_ptr->table_size = SECR_APP_usSt_41_get_size();
 10150c0:	8720      	strh	r0, [r4, #56]	; 0x38
	c1219_ptr->execute_table_writing = SECR_APP_bSt_41_execute_table_writing;
 10150c2:	f241 72b0 	movw	r2, #6064	; 0x17b0
	c1219_ptr->execute_table_reading = SECR_APP_bSt_41_execute_table_reading;
 10150c6:	485c      	ldr	r0, [pc, #368]	; (1015238 <C1219_pwrite_offset_service+0x6a8>)
	c1219_ptr->execute_table_writing = SECR_APP_bSt_41_execute_table_writing;
 10150c8:	495c      	ldr	r1, [pc, #368]	; (101523c <C1219_pwrite_offset_service+0x6ac>)
 10150ca:	e7c8      	b.n	101505e <C1219_pwrite_offset_service+0x4ce>
	c1219_ptr->table_size = SM_APP_usMt_4_get_size();
 10150cc:	4b5c      	ldr	r3, [pc, #368]	; (1015240 <C1219_pwrite_offset_service+0x6b0>)
 10150ce:	4798      	blx	r3
	c1219_ptr->execute_table_reading = SM_APP_bMt_4_execute_table_reading;
 10150d0:	f241 76ac 	movw	r6, #6060	; 0x17ac
	c1219_ptr->table_size = SM_APP_usMt_4_get_size();
 10150d4:	8720      	strh	r0, [r4, #56]	; 0x38
	c1219_ptr->execute_table_writing = SM_APP_bMt_4_execute_table_writing;
 10150d6:	f241 72b0 	movw	r2, #6064	; 0x17b0
	c1219_ptr->execute_table_reading = SM_APP_bMt_4_execute_table_reading;
 10150da:	485a      	ldr	r0, [pc, #360]	; (1015244 <C1219_pwrite_offset_service+0x6b4>)
	c1219_ptr->execute_table_writing = SM_APP_bMt_4_execute_table_writing;
 10150dc:	495a      	ldr	r1, [pc, #360]	; (1015248 <C1219_pwrite_offset_service+0x6b8>)
 10150de:	e7be      	b.n	101505e <C1219_pwrite_offset_service+0x4ce>
	c1219_ptr->table_size = EVNT_APP_usSt_74_get_size();
 10150e0:	4b5a      	ldr	r3, [pc, #360]	; (101524c <C1219_pwrite_offset_service+0x6bc>)
 10150e2:	4798      	blx	r3
 10150e4:	f241 73b4 	movw	r3, #6068	; 0x17b4
 10150e8:	fb03 5606 	mla	r6, r3, r6, r5
	c1219_ptr->execute_table_reading = EVNT_APP_bSt_74_execute_table_reading;
 10150ec:	f241 74ac 	movw	r4, #6060	; 0x17ac
	c1219_ptr->table_size = EVNT_APP_usSt_74_get_size();
 10150f0:	8730      	strh	r0, [r6, #56]	; 0x38
	c1219_ptr->execute_table_writing = EVNT_APP_bSt_74_execute_table_writing;
 10150f2:	f241 72b0 	movw	r2, #6064	; 0x17b0
	c1219_ptr->execute_table_reading = EVNT_APP_bSt_74_execute_table_reading;
 10150f6:	4856      	ldr	r0, [pc, #344]	; (1015250 <C1219_pwrite_offset_service+0x6c0>)
	c1219_ptr->execute_table_writing = EVNT_APP_bSt_74_execute_table_writing;
 10150f8:	4956      	ldr	r1, [pc, #344]	; (1015254 <C1219_pwrite_offset_service+0x6c4>)
 10150fa:	e658      	b.n	1014dae <C1219_pwrite_offset_service+0x21e>
	c1219_ptr->table_size = EVNT_APP_usSt_73_get_size();
 10150fc:	4b56      	ldr	r3, [pc, #344]	; (1015258 <C1219_pwrite_offset_service+0x6c8>)
 10150fe:	4798      	blx	r3
	c1219_ptr->execute_table_reading = EVNT_APP_bSt_73_execute_table_reading;
 1015100:	f241 76ac 	movw	r6, #6060	; 0x17ac
	c1219_ptr->table_size = EVNT_APP_usSt_73_get_size();
 1015104:	8720      	strh	r0, [r4, #56]	; 0x38
	c1219_ptr->execute_table_writing = EVNT_APP_bSt_73_execute_table_writing;
 1015106:	f241 72b0 	movw	r2, #6064	; 0x17b0
	c1219_ptr->execute_table_reading = EVNT_APP_bSt_73_execute_table_reading;
 101510a:	4854      	ldr	r0, [pc, #336]	; (101525c <C1219_pwrite_offset_service+0x6cc>)
	c1219_ptr->execute_table_writing = EVNT_APP_bSt_73_execute_table_writing;
 101510c:	4954      	ldr	r1, [pc, #336]	; (1015260 <C1219_pwrite_offset_service+0x6d0>)
 101510e:	e7a6      	b.n	101505e <C1219_pwrite_offset_service+0x4ce>
	c1219_ptr->table_size = SECR_APP_usSt_42_get_size();
 1015110:	4b54      	ldr	r3, [pc, #336]	; (1015264 <C1219_pwrite_offset_service+0x6d4>)
 1015112:	4798      	blx	r3
 1015114:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1015118:	fb03 5606 	mla	r6, r3, r6, r5
	c1219_ptr->execute_table_reading = SECR_APP_bSt_42_execute_table_reading;
 101511c:	f241 74ac 	movw	r4, #6060	; 0x17ac
	c1219_ptr->table_size = SECR_APP_usSt_42_get_size();
 1015120:	8730      	strh	r0, [r6, #56]	; 0x38
	c1219_ptr->execute_table_writing = SECR_APP_bSt_42_execute_table_writing;
 1015122:	f241 72b0 	movw	r2, #6064	; 0x17b0
	c1219_ptr->execute_table_reading = SECR_APP_bSt_42_execute_table_reading;
 1015126:	4850      	ldr	r0, [pc, #320]	; (1015268 <C1219_pwrite_offset_service+0x6d8>)
	c1219_ptr->execute_table_writing = SECR_APP_bSt_42_execute_table_writing;
 1015128:	4950      	ldr	r1, [pc, #320]	; (101526c <C1219_pwrite_offset_service+0x6dc>)
 101512a:	e640      	b.n	1014dae <C1219_pwrite_offset_service+0x21e>
	c1219_ptr->table_size = SECR_APP_usSt_43_get_size();
 101512c:	4b50      	ldr	r3, [pc, #320]	; (1015270 <C1219_pwrite_offset_service+0x6e0>)
 101512e:	4798      	blx	r3
	c1219_ptr->execute_table_reading = SECR_APP_bSt_43_execute_table_reading;
 1015130:	f241 76ac 	movw	r6, #6060	; 0x17ac
	c1219_ptr->table_size = SECR_APP_usSt_43_get_size();
 1015134:	8720      	strh	r0, [r4, #56]	; 0x38
	c1219_ptr->execute_table_writing = SECR_APP_bSt_43_execute_table_writing;
 1015136:	f241 72b0 	movw	r2, #6064	; 0x17b0
	c1219_ptr->execute_table_reading = SECR_APP_bSt_43_execute_table_reading;
 101513a:	484e      	ldr	r0, [pc, #312]	; (1015274 <C1219_pwrite_offset_service+0x6e4>)
	c1219_ptr->execute_table_writing = SECR_APP_bSt_43_execute_table_writing;
 101513c:	494e      	ldr	r1, [pc, #312]	; (1015278 <C1219_pwrite_offset_service+0x6e8>)
 101513e:	e78e      	b.n	101505e <C1219_pwrite_offset_service+0x4ce>
	c1219_ptr->table_size = LP_APP_usSt_61_get_size();
 1015140:	4b4e      	ldr	r3, [pc, #312]	; (101527c <C1219_pwrite_offset_service+0x6ec>)
 1015142:	4798      	blx	r3
 1015144:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1015148:	fb03 5606 	mla	r6, r3, r6, r5
	c1219_ptr->execute_table_reading = LP_APP_bSt_61_execute_table_reading;
 101514c:	f241 74ac 	movw	r4, #6060	; 0x17ac
	c1219_ptr->table_size = LP_APP_usSt_61_get_size();
 1015150:	8730      	strh	r0, [r6, #56]	; 0x38
	c1219_ptr->execute_table_writing = LP_APP_bSt_61_execute_table_writing;
 1015152:	f241 72b0 	movw	r2, #6064	; 0x17b0
	c1219_ptr->execute_table_reading = LP_APP_bSt_61_execute_table_reading;
 1015156:	484a      	ldr	r0, [pc, #296]	; (1015280 <C1219_pwrite_offset_service+0x6f0>)
	c1219_ptr->execute_table_writing = LP_APP_bSt_61_execute_table_writing;
 1015158:	494a      	ldr	r1, [pc, #296]	; (1015284 <C1219_pwrite_offset_service+0x6f4>)
 101515a:	e628      	b.n	1014dae <C1219_pwrite_offset_service+0x21e>
	c1219_ptr->table_size = TOU_APP_usSt_54_get_size();
 101515c:	4b4a      	ldr	r3, [pc, #296]	; (1015288 <C1219_pwrite_offset_service+0x6f8>)
 101515e:	4798      	blx	r3
	c1219_ptr->execute_table_reading = TOU_APP_bSt_54_execute_table_reading;
 1015160:	f241 76ac 	movw	r6, #6060	; 0x17ac
	c1219_ptr->table_size = TOU_APP_usSt_54_get_size();
 1015164:	8720      	strh	r0, [r4, #56]	; 0x38
	c1219_ptr->execute_table_writing = TOU_APP_bSt_54_execute_table_writing;
 1015166:	f241 72b0 	movw	r2, #6064	; 0x17b0
	c1219_ptr->execute_table_reading = TOU_APP_bSt_54_execute_table_reading;
 101516a:	4848      	ldr	r0, [pc, #288]	; (101528c <C1219_pwrite_offset_service+0x6fc>)
	c1219_ptr->execute_table_writing = TOU_APP_bSt_54_execute_table_writing;
 101516c:	4948      	ldr	r1, [pc, #288]	; (1015290 <C1219_pwrite_offset_service+0x700>)
 101516e:	e776      	b.n	101505e <C1219_pwrite_offset_service+0x4ce>
	c1219_ptr->table_size = TOU_APP_usSt_51_get_size();
 1015170:	4b48      	ldr	r3, [pc, #288]	; (1015294 <C1219_pwrite_offset_service+0x704>)
 1015172:	4798      	blx	r3
	c1219_ptr->execute_table_reading = TOU_APP_bSt_51_execute_table_reading;
 1015174:	f241 76ac 	movw	r6, #6060	; 0x17ac
	c1219_ptr->table_size = TOU_APP_usSt_51_get_size();
 1015178:	8720      	strh	r0, [r4, #56]	; 0x38
	c1219_ptr->execute_table_writing = TOU_APP_bSt_51_execute_table_writing;
 101517a:	f241 72b0 	movw	r2, #6064	; 0x17b0
	c1219_ptr->execute_table_reading = TOU_APP_bSt_51_execute_table_reading;
 101517e:	4846      	ldr	r0, [pc, #280]	; (1015298 <C1219_pwrite_offset_service+0x708>)
	c1219_ptr->execute_table_writing = TOU_APP_bSt_51_execute_table_writing;
 1015180:	4946      	ldr	r1, [pc, #280]	; (101529c <C1219_pwrite_offset_service+0x70c>)
 1015182:	e76c      	b.n	101505e <C1219_pwrite_offset_service+0x4ce>
	c1219_ptr->table_size = EVNT_APP_usSt_75_get_size();
 1015184:	4b46      	ldr	r3, [pc, #280]	; (10152a0 <C1219_pwrite_offset_service+0x710>)
 1015186:	4798      	blx	r3
	c1219_ptr->execute_table_reading = EVNT_APP_bSt_75_execute_table_reading;
 1015188:	f241 76ac 	movw	r6, #6060	; 0x17ac
	c1219_ptr->table_size = EVNT_APP_usSt_75_get_size();
 101518c:	8720      	strh	r0, [r4, #56]	; 0x38
	c1219_ptr->execute_table_writing = EVNT_APP_bSt_75_execute_table_writing;
 101518e:	f241 72b0 	movw	r2, #6064	; 0x17b0
	c1219_ptr->execute_table_reading = EVNT_APP_bSt_75_execute_table_reading;
 1015192:	4844      	ldr	r0, [pc, #272]	; (10152a4 <C1219_pwrite_offset_service+0x714>)
	c1219_ptr->execute_table_writing = EVNT_APP_bSt_75_execute_table_writing;
 1015194:	4944      	ldr	r1, [pc, #272]	; (10152a8 <C1219_pwrite_offset_service+0x718>)
 1015196:	e762      	b.n	101505e <C1219_pwrite_offset_service+0x4ce>
	c1219_ptr->table_size = REGS_APP_usSt_25_get_size();
 1015198:	4b44      	ldr	r3, [pc, #272]	; (10152ac <C1219_pwrite_offset_service+0x71c>)
 101519a:	4798      	blx	r3
 101519c:	f241 73b4 	movw	r3, #6068	; 0x17b4
 10151a0:	fb03 5606 	mla	r6, r3, r6, r5
	c1219_ptr->execute_table_reading = REGS_APP_bSt_25_execute_table_reading;
 10151a4:	f241 74ac 	movw	r4, #6060	; 0x17ac
	c1219_ptr->table_size = REGS_APP_usSt_25_get_size();
 10151a8:	8730      	strh	r0, [r6, #56]	; 0x38
	c1219_ptr->execute_table_writing = REGS_APP_bSt_25_execute_table_writing;
 10151aa:	f241 72b0 	movw	r2, #6064	; 0x17b0
	c1219_ptr->execute_table_reading = REGS_APP_bSt_25_execute_table_reading;
 10151ae:	4840      	ldr	r0, [pc, #256]	; (10152b0 <C1219_pwrite_offset_service+0x720>)
	c1219_ptr->execute_table_writing = REGS_APP_bSt_25_execute_table_writing;
 10151b0:	4940      	ldr	r1, [pc, #256]	; (10152b4 <C1219_pwrite_offset_service+0x724>)
 10151b2:	e5fc      	b.n	1014dae <C1219_pwrite_offset_service+0x21e>
 10151b4:	0102b285 	.word	0x0102b285
 10151b8:	0102b1a9 	.word	0x0102b1a9
 10151bc:	0102b219 	.word	0x0102b219
 10151c0:	010164c5 	.word	0x010164c5
 10151c4:	0102c0b9 	.word	0x0102c0b9
 10151c8:	0102c039 	.word	0x0102c039
 10151cc:	0102c081 	.word	0x0102c081
 10151d0:	01028701 	.word	0x01028701
 10151d4:	01028639 	.word	0x01028639
 10151d8:	010286a1 	.word	0x010286a1
 10151dc:	01019921 	.word	0x01019921
 10151e0:	0101974d 	.word	0x0101974d
 10151e4:	01019845 	.word	0x01019845
 10151e8:	0107ffff 	.word	0x0107ffff
 10151ec:	01050000 	.word	0x01050000
 10151f0:	01030a3d 	.word	0x01030a3d
 10151f4:	2000095c 	.word	0x2000095c
 10151f8:	0102da21 	.word	0x0102da21
 10151fc:	0101637d 	.word	0x0101637d
 1015200:	01027da1 	.word	0x01027da1
 1015204:	01027d49 	.word	0x01027d49
 1015208:	01027cf1 	.word	0x01027cf1
 101520c:	0101052d 	.word	0x0101052d
 1015210:	01026971 	.word	0x01026971
 1015214:	0102681d 	.word	0x0102681d
 1015218:	010268e1 	.word	0x010268e1
 101521c:	01020a4d 	.word	0x01020a4d
 1015220:	01020a1d 	.word	0x01020a1d
 1015224:	01020a35 	.word	0x01020a35
 1015228:	01020ed5 	.word	0x01020ed5
 101522c:	01020e95 	.word	0x01020e95
 1015230:	01020ebd 	.word	0x01020ebd
 1015234:	0102ac29 	.word	0x0102ac29
 1015238:	0102ab9d 	.word	0x0102ab9d
 101523c:	0102abc5 	.word	0x0102abc5
 1015240:	010209a9 	.word	0x010209a9
 1015244:	01020821 	.word	0x01020821
 1015248:	010208e1 	.word	0x010208e1
 101524c:	0101919d 	.word	0x0101919d
 1015250:	01018f91 	.word	0x01018f91
 1015254:	010190a5 	.word	0x010190a5
 1015258:	01019571 	.word	0x01019571
 101525c:	01018915 	.word	0x01018915
 1015260:	0101894d 	.word	0x0101894d
 1015264:	0102ae6d 	.word	0x0102ae6d
 1015268:	0102ada9 	.word	0x0102ada9
 101526c:	0102ade5 	.word	0x0102ade5
 1015270:	0102afed 	.word	0x0102afed
 1015274:	0102af7d 	.word	0x0102af7d
 1015278:	0102afad 	.word	0x0102afad
 101527c:	0101b65d 	.word	0x0101b65d
 1015280:	0101b611 	.word	0x0101b611
 1015284:	0101bc11 	.word	0x0101bc11
 1015288:	0102c301 	.word	0x0102c301
 101528c:	0102c0cd 	.word	0x0102c0cd
 1015290:	0102c1dd 	.word	0x0102c1dd
 1015294:	0102bf25 	.word	0x0102bf25
 1015298:	0102c471 	.word	0x0102c471
 101529c:	0102beb5 	.word	0x0102beb5
 10152a0:	01019531 	.word	0x01019531
 10152a4:	010193a1 	.word	0x010193a1
 10152a8:	010193d9 	.word	0x010193d9
 10152ac:	01027ec9 	.word	0x01027ec9
 10152b0:	01027e19 	.word	0x01027e19
 10152b4:	01027e71 	.word	0x01027e71
 10152b8:	200009dc 	.word	0x200009dc
 10152bc:	2000092c 	.word	0x2000092c
 10152c0:	0102db35 	.word	0x0102db35
 10152c4:	200009de 	.word	0x200009de
	c1219_ptr->table_size = REGS_APP_usSt_26_get_size();
 10152c8:	4b34      	ldr	r3, [pc, #208]	; (101539c <C1219_pwrite_offset_service+0x80c>)
 10152ca:	4798      	blx	r3
	c1219_ptr->execute_table_reading = REGS_APP_bSt_26_execute_table_reading;
 10152cc:	f241 76ac 	movw	r6, #6060	; 0x17ac
	c1219_ptr->table_size = REGS_APP_usSt_26_get_size();
 10152d0:	8720      	strh	r0, [r4, #56]	; 0x38
	c1219_ptr->execute_table_writing = REGS_APP_bSt_26_execute_table_writing;
 10152d2:	f241 72b0 	movw	r2, #6064	; 0x17b0
	c1219_ptr->execute_table_reading = REGS_APP_bSt_26_execute_table_reading;
 10152d6:	4832      	ldr	r0, [pc, #200]	; (10153a0 <C1219_pwrite_offset_service+0x810>)
	c1219_ptr->execute_table_writing = REGS_APP_bSt_26_execute_table_writing;
 10152d8:	4932      	ldr	r1, [pc, #200]	; (10153a4 <C1219_pwrite_offset_service+0x814>)
 10152da:	e6c0      	b.n	101505e <C1219_pwrite_offset_service+0x4ce>
	c1219_ptr->table_size = REGS_APP_usSt_11_get_size();
 10152dc:	4b32      	ldr	r3, [pc, #200]	; (10153a8 <C1219_pwrite_offset_service+0x818>)
 10152de:	4798      	blx	r3
 10152e0:	f241 73b4 	movw	r3, #6068	; 0x17b4
 10152e4:	fb03 5606 	mla	r6, r3, r6, r5
	c1219_ptr->execute_table_reading = REGS_APP_bSt_11_execute_table_reading;
 10152e8:	f241 74ac 	movw	r4, #6060	; 0x17ac
	c1219_ptr->table_size = REGS_APP_usSt_11_get_size();
 10152ec:	8730      	strh	r0, [r6, #56]	; 0x38
	c1219_ptr->execute_table_writing = REGS_APP_bSt_11_execute_table_writing;
 10152ee:	f241 72b0 	movw	r2, #6064	; 0x17b0
	c1219_ptr->execute_table_reading = REGS_APP_bSt_11_execute_table_reading;
 10152f2:	482e      	ldr	r0, [pc, #184]	; (10153ac <C1219_pwrite_offset_service+0x81c>)
	c1219_ptr->execute_table_writing = REGS_APP_bSt_11_execute_table_writing;
 10152f4:	492e      	ldr	r1, [pc, #184]	; (10153b0 <C1219_pwrite_offset_service+0x820>)
 10152f6:	e55a      	b.n	1014dae <C1219_pwrite_offset_service+0x21e>
	c1219_ptr->table_size = GRAL_APP_usSt_6_get_size();
 10152f8:	4b2e      	ldr	r3, [pc, #184]	; (10153b4 <C1219_pwrite_offset_service+0x824>)
 10152fa:	4798      	blx	r3
	c1219_ptr->execute_table_reading = GRAL_APP_bSt_6_execute_table_reading;
 10152fc:	f241 76ac 	movw	r6, #6060	; 0x17ac
	c1219_ptr->table_size = GRAL_APP_usSt_6_get_size();
 1015300:	8720      	strh	r0, [r4, #56]	; 0x38
	c1219_ptr->execute_table_writing = GRAL_APP_bSt_6_execute_table_writing;
 1015302:	f241 72b0 	movw	r2, #6064	; 0x17b0
	c1219_ptr->execute_table_reading = GRAL_APP_bSt_6_execute_table_reading;
 1015306:	482c      	ldr	r0, [pc, #176]	; (10153b8 <C1219_pwrite_offset_service+0x828>)
	c1219_ptr->execute_table_writing = GRAL_APP_bSt_6_execute_table_writing;
 1015308:	492c      	ldr	r1, [pc, #176]	; (10153bc <C1219_pwrite_offset_service+0x82c>)
 101530a:	e6a8      	b.n	101505e <C1219_pwrite_offset_service+0x4ce>
	c1219_ptr->table_size = GRAL_APP_usSt_1_get_size();
 101530c:	4b2c      	ldr	r3, [pc, #176]	; (10153c0 <C1219_pwrite_offset_service+0x830>)
 101530e:	4798      	blx	r3
 1015310:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1015314:	fb03 5606 	mla	r6, r3, r6, r5
	c1219_ptr->execute_table_reading = GRAL_APP_bSt_1_execute_table_reading;
 1015318:	f241 74ac 	movw	r4, #6060	; 0x17ac
	c1219_ptr->table_size = GRAL_APP_usSt_1_get_size();
 101531c:	8730      	strh	r0, [r6, #56]	; 0x38
	c1219_ptr->execute_table_writing = GRAL_APP_bSt_1_execute_table_writing;
 101531e:	f241 72b0 	movw	r2, #6064	; 0x17b0
	c1219_ptr->execute_table_reading = GRAL_APP_bSt_1_execute_table_reading;
 1015322:	4828      	ldr	r0, [pc, #160]	; (10153c4 <C1219_pwrite_offset_service+0x834>)
	c1219_ptr->execute_table_writing = GRAL_APP_bSt_1_execute_table_writing;
 1015324:	4928      	ldr	r1, [pc, #160]	; (10153c8 <C1219_pwrite_offset_service+0x838>)
 1015326:	e542      	b.n	1014dae <C1219_pwrite_offset_service+0x21e>
	c1219_ptr->table_size = LP_APP_usSt_62_get_size();
 1015328:	4b28      	ldr	r3, [pc, #160]	; (10153cc <C1219_pwrite_offset_service+0x83c>)
 101532a:	4798      	blx	r3
	c1219_ptr->execute_table_reading = LP_APP_bSt_62_execute_table_reading;
 101532c:	f241 76ac 	movw	r6, #6060	; 0x17ac
	c1219_ptr->table_size = LP_APP_usSt_62_get_size();
 1015330:	8720      	strh	r0, [r4, #56]	; 0x38
	c1219_ptr->execute_table_writing = LP_APP_bSt_62_execute_table_writing;
 1015332:	f241 72b0 	movw	r2, #6064	; 0x17b0
	c1219_ptr->execute_table_reading = LP_APP_bSt_62_execute_table_reading;
 1015336:	4826      	ldr	r0, [pc, #152]	; (10153d0 <C1219_pwrite_offset_service+0x840>)
	c1219_ptr->execute_table_writing = LP_APP_bSt_62_execute_table_writing;
 1015338:	4926      	ldr	r1, [pc, #152]	; (10153d4 <C1219_pwrite_offset_service+0x844>)
 101533a:	e690      	b.n	101505e <C1219_pwrite_offset_service+0x4ce>
	c1219_ptr->table_size = REGS_APP_usSt_23_get_size();
 101533c:	4b26      	ldr	r3, [pc, #152]	; (10153d8 <C1219_pwrite_offset_service+0x848>)
 101533e:	4798      	blx	r3
 1015340:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1015344:	fb03 5606 	mla	r6, r3, r6, r5
	c1219_ptr->execute_table_reading = REGS_APP_bSt_23_execute_table_reading;
 1015348:	f241 74ac 	movw	r4, #6060	; 0x17ac
	c1219_ptr->table_size = REGS_APP_usSt_23_get_size();
 101534c:	8730      	strh	r0, [r6, #56]	; 0x38
	c1219_ptr->execute_table_writing = REGS_APP_bSt_23_execute_table_writing;
 101534e:	f241 72b0 	movw	r2, #6064	; 0x17b0
	c1219_ptr->execute_table_reading = REGS_APP_bSt_23_execute_table_reading;
 1015352:	4822      	ldr	r0, [pc, #136]	; (10153dc <C1219_pwrite_offset_service+0x84c>)
	c1219_ptr->execute_table_writing = REGS_APP_bSt_23_execute_table_writing;
 1015354:	4922      	ldr	r1, [pc, #136]	; (10153e0 <C1219_pwrite_offset_service+0x850>)
 1015356:	e52a      	b.n	1014dae <C1219_pwrite_offset_service+0x21e>
	c1219_ptr->table_size = REGS_APP_usSt_22_get_size();
 1015358:	4b22      	ldr	r3, [pc, #136]	; (10153e4 <C1219_pwrite_offset_service+0x854>)
 101535a:	4798      	blx	r3
	c1219_ptr->execute_table_reading = REGS_APP_bSt_22_execute_table_reading;
 101535c:	f241 76ac 	movw	r6, #6060	; 0x17ac
	c1219_ptr->table_size = REGS_APP_usSt_22_get_size();
 1015360:	8720      	strh	r0, [r4, #56]	; 0x38
	c1219_ptr->execute_table_writing = REGS_APP_bSt_22_execute_table_writing;
 1015362:	f241 72b0 	movw	r2, #6064	; 0x17b0
	c1219_ptr->execute_table_reading = REGS_APP_bSt_22_execute_table_reading;
 1015366:	4820      	ldr	r0, [pc, #128]	; (10153e8 <C1219_pwrite_offset_service+0x858>)
	c1219_ptr->execute_table_writing = REGS_APP_bSt_22_execute_table_writing;
 1015368:	4920      	ldr	r1, [pc, #128]	; (10153ec <C1219_pwrite_offset_service+0x85c>)
 101536a:	e678      	b.n	101505e <C1219_pwrite_offset_service+0x4ce>
	c1219_ptr->table_size = SM_APP_usMt_3_get_size();
 101536c:	4b20      	ldr	r3, [pc, #128]	; (10153f0 <C1219_pwrite_offset_service+0x860>)
 101536e:	4798      	blx	r3
 1015370:	f241 73b4 	movw	r3, #6068	; 0x17b4
 1015374:	fb03 5606 	mla	r6, r3, r6, r5
	c1219_ptr->execute_table_reading = SM_APP_bMt_3_execute_table_reading;
 1015378:	f241 74ac 	movw	r4, #6060	; 0x17ac
	c1219_ptr->table_size = SM_APP_usMt_3_get_size();
 101537c:	8730      	strh	r0, [r6, #56]	; 0x38
	c1219_ptr->execute_table_writing = SM_APP_bMt_3_execute_table_writing;
 101537e:	f241 72b0 	movw	r2, #6064	; 0x17b0
	c1219_ptr->execute_table_reading = SM_APP_bMt_3_execute_table_reading;
 1015382:	481c      	ldr	r0, [pc, #112]	; (10153f4 <C1219_pwrite_offset_service+0x864>)
	c1219_ptr->execute_table_writing = SM_APP_bMt_3_execute_table_writing;
 1015384:	491c      	ldr	r1, [pc, #112]	; (10153f8 <C1219_pwrite_offset_service+0x868>)
 1015386:	e512      	b.n	1014dae <C1219_pwrite_offset_service+0x21e>
	c1219_ptr->table_size = SM_APP_usMt_1_get_size();
 1015388:	4b1c      	ldr	r3, [pc, #112]	; (10153fc <C1219_pwrite_offset_service+0x86c>)
 101538a:	4798      	blx	r3
	c1219_ptr->execute_table_reading = SM_APP_bMt_1_execute_table_reading;
 101538c:	f241 76ac 	movw	r6, #6060	; 0x17ac
	c1219_ptr->table_size = SM_APP_usMt_1_get_size();
 1015390:	8720      	strh	r0, [r4, #56]	; 0x38
	c1219_ptr->execute_table_writing = SM_APP_bMt_1_execute_table_writing;
 1015392:	f241 72b0 	movw	r2, #6064	; 0x17b0
	c1219_ptr->execute_table_reading = SM_APP_bMt_1_execute_table_reading;
 1015396:	481a      	ldr	r0, [pc, #104]	; (1015400 <C1219_pwrite_offset_service+0x870>)
	c1219_ptr->execute_table_writing = SM_APP_bMt_1_execute_table_writing;
 1015398:	491a      	ldr	r1, [pc, #104]	; (1015404 <C1219_pwrite_offset_service+0x874>)
 101539a:	e660      	b.n	101505e <C1219_pwrite_offset_service+0x4ce>
 101539c:	010281ad 	.word	0x010281ad
 10153a0:	01027ff5 	.word	0x01027ff5
 10153a4:	010280d9 	.word	0x010280d9
 10153a8:	01026711 	.word	0x01026711
 10153ac:	01026671 	.word	0x01026671
 10153b0:	010266a1 	.word	0x010266a1
 10153b4:	01019fc9 	.word	0x01019fc9
 10153b8:	01019f81 	.word	0x01019f81
 10153bc:	01019f99 	.word	0x01019f99
 10153c0:	01019c25 	.word	0x01019c25
 10153c4:	01019bc9 	.word	0x01019bc9
 10153c8:	01019c0d 	.word	0x01019c0d
 10153cc:	0101b9ed 	.word	0x0101b9ed
 10153d0:	0101b895 	.word	0x0101b895
 10153d4:	0101b8cd 	.word	0x0101b8cd
 10153d8:	01027c45 	.word	0x01027c45
 10153dc:	01027769 	.word	0x01027769
 10153e0:	010279c5 	.word	0x010279c5
 10153e4:	0102701d 	.word	0x0102701d
 10153e8:	01026f41 	.word	0x01026f41
 10153ec:	01026f59 	.word	0x01026f59
 10153f0:	010205e5 	.word	0x010205e5
 10153f4:	010205a5 	.word	0x010205a5
 10153f8:	010205cd 	.word	0x010205cd
 10153fc:	01020521 	.word	0x01020521
 1015400:	010204d5 	.word	0x010204d5
 1015404:	01020509 	.word	0x01020509

01015408 <I2C_HAL_vIo_configure>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
void I2C_HAL_vIo_configure(void) {	
 1015408:	b5f0      	push	{r4, r5, r6, r7, lr}
 * \retval void
 ******************************************************************************
 */
void I2C_HAL_vTwi_enable_pio_mode(void) {

	REG_PIOA_PDR &= ~PIO_PDR_P24;
 101540a:	4b3a      	ldr	r3, [pc, #232]	; (10154f4 <I2C_HAL_vIo_configure+0xec>)
	REG_PIOA_PDR &= ~PIO_PDR_P25;
	
	REG_PIOA_PER |= PIO_PER_P24;
 101540c:	4c3a      	ldr	r4, [pc, #232]	; (10154f8 <I2C_HAL_vIo_configure+0xf0>)
	REG_PIOA_PDR &= ~PIO_PDR_P24;
 101540e:	681a      	ldr	r2, [r3, #0]
	delay_us(10);
 1015410:	4e3a      	ldr	r6, [pc, #232]	; (10154fc <I2C_HAL_vIo_configure+0xf4>)
	REG_PIOA_PDR &= ~PIO_PDR_P24;
 1015412:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 1015416:	601a      	str	r2, [r3, #0]
	REG_PIOA_PDR &= ~PIO_PDR_P25;
 1015418:	681a      	ldr	r2, [r3, #0]
 101541a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 101541e:	601a      	str	r2, [r3, #0]
	REG_PIOA_PER |= PIO_PER_P24;
 1015420:	6823      	ldr	r3, [r4, #0]
 1015422:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 1015426:	6023      	str	r3, [r4, #0]
	REG_PIOA_PER |= PIO_PER_P25;
 1015428:	6823      	ldr	r3, [r4, #0]
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 101542a:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 101542e:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
 1015432:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 1015436:	432b      	orrs	r3, r5
 1015438:	6023      	str	r3, [r4, #0]
void I2C_HAL_vIo_configure(void) {	
 101543a:	b085      	sub	sp, #20
 101543c:	6125      	str	r5, [r4, #16]
	delay_us(10);
 101543e:	204a      	movs	r0, #74	; 0x4a
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 1015440:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 1015444:	6127      	str	r7, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 1015446:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 101544a:	6122      	str	r2, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 101544c:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
 1015450:	6327      	str	r7, [r4, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 1015452:	6127      	str	r7, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 1015454:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 1015458:	6125      	str	r5, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 101545a:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
 101545e:	6327      	str	r7, [r4, #48]	; 0x30
 1015460:	6325      	str	r5, [r4, #48]	; 0x30
 1015462:	47b0      	blx	r6
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
 1015464:	6367      	str	r7, [r4, #52]	; 0x34
	delay_us(10);
 1015466:	204a      	movs	r0, #74	; 0x4a
 1015468:	47b0      	blx	r6
 101546a:	6365      	str	r5, [r4, #52]	; 0x34
	delay_us(10);
 101546c:	204a      	movs	r0, #74	; 0x4a
 101546e:	47b0      	blx	r6
  __ASM volatile ("nop");
 1015470:	bf00      	nop
 1015472:	bf00      	nop
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
 1015474:	6167      	str	r7, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 1015476:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
 101547a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	while(ioport_get_pin_level(I2C_SDA_PIN) == false) {
 101547c:	01d9      	lsls	r1, r3, #7
 101547e:	d409      	bmi.n	1015494 <I2C_HAL_vIo_configure+0x8c>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
 1015480:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 1015482:	019a      	lsls	r2, r3, #6
		port->PIO_CODR = mask;
 1015484:	bf4c      	ite	mi
 1015486:	6365      	strmi	r5, [r4, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
 1015488:	6325      	strpl	r5, [r4, #48]	; 0x30
		delay_us(10);
 101548a:	204a      	movs	r0, #74	; 0x4a
 101548c:	47b0      	blx	r6
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
 101548e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	while(ioport_get_pin_level(I2C_SDA_PIN) == false) {
 1015490:	01db      	lsls	r3, r3, #7
 1015492:	d5f5      	bpl.n	1015480 <I2C_HAL_vIo_configure+0x78>
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
 1015494:	4b18      	ldr	r3, [pc, #96]	; (10154f8 <I2C_HAL_vIo_configure+0xf0>)
	REG_PIOA_PDR |= PIO_PDR_P24;
 1015496:	4a17      	ldr	r2, [pc, #92]	; (10154f4 <I2C_HAL_vIo_configure+0xec>)
	pmc_enable_periph_clk( ID_TWI0 );
 1015498:	4c19      	ldr	r4, [pc, #100]	; (1015500 <I2C_HAL_vIo_configure+0xf8>)
	opt.master_clk = I2C_TWI_MASTER_CLK;
 101549a:	4d1a      	ldr	r5, [pc, #104]	; (1015504 <I2C_HAL_vIo_configure+0xfc>)
 101549c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 10154a0:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
 10154a4:	6158      	str	r0, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 10154a6:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 10154aa:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 10154ac:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
	REG_PIOA_PDR |= PIO_PDR_P24;
 10154b0:	6811      	ldr	r1, [r2, #0]
 10154b2:	4301      	orrs	r1, r0
 10154b4:	6011      	str	r1, [r2, #0]
	REG_PIOA_PDR |= PIO_PDR_P25;
 10154b6:	6811      	ldr	r1, [r2, #0]
 10154b8:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 10154bc:	6011      	str	r1, [r2, #0]
	REG_PIOA_PER &= ~PIO_PER_P24;
 10154be:	681a      	ldr	r2, [r3, #0]
 10154c0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 10154c4:	601a      	str	r2, [r3, #0]
	REG_PIOA_PER &= ~PIO_PER_P25;
 10154c6:	681a      	ldr	r2, [r3, #0]
 10154c8:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 10154cc:	601a      	str	r2, [r3, #0]
	pmc_enable_periph_clk( ID_TWI0 );
 10154ce:	2013      	movs	r0, #19
 10154d0:	47a0      	blx	r4
	PDC_TWI0->PERIPH_PTCR = PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN;
 10154d2:	4a0d      	ldr	r2, [pc, #52]	; (1015508 <I2C_HAL_vIo_configure+0x100>)
	opt.speed = I2C_TWI_FAST_MODE_SPEED;
 10154d4:	4c0d      	ldr	r4, [pc, #52]	; (101550c <I2C_HAL_vIo_configure+0x104>)
	twi_master_init(I2C_TWI, &opt);
 10154d6:	4b0e      	ldr	r3, [pc, #56]	; (1015510 <I2C_HAL_vIo_configure+0x108>)
 10154d8:	480e      	ldr	r0, [pc, #56]	; (1015514 <I2C_HAL_vIo_configure+0x10c>)
	PDC_TWI0->PERIPH_PTCR = PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN;
 10154da:	f240 1101 	movw	r1, #257	; 0x101
 10154de:	6211      	str	r1, [r2, #32]
	opt.smbus = 0;
 10154e0:	2200      	movs	r2, #0
	twi_master_init(I2C_TWI, &opt);
 10154e2:	a901      	add	r1, sp, #4
	opt.master_clk = I2C_TWI_MASTER_CLK;
 10154e4:	9501      	str	r5, [sp, #4]
	opt.speed = I2C_TWI_FAST_MODE_SPEED;
 10154e6:	9402      	str	r4, [sp, #8]
	opt.smbus = 0;
 10154e8:	f88d 200d 	strb.w	r2, [sp, #13]
	twi_master_init(I2C_TWI, &opt);
 10154ec:	4798      	blx	r3
}
 10154ee:	b005      	add	sp, #20
 10154f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 10154f2:	bf00      	nop
 10154f4:	400e0e04 	.word	0x400e0e04
 10154f8:	400e0e00 	.word	0x400e0e00
 10154fc:	20000001 	.word	0x20000001
 1015500:	0102d841 	.word	0x0102d841
 1015504:	061a8000 	.word	0x061a8000
 1015508:	40018100 	.word	0x40018100
 101550c:	00061a80 	.word	0x00061a80
 1015510:	010101a5 	.word	0x010101a5
 1015514:	40018000 	.word	0x40018000

01015518 <I2C_HAL_vInitialize>:
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
 1015518:	4a05      	ldr	r2, [pc, #20]	; (1015530 <I2C_HAL_vInitialize+0x18>)
void I2C_HAL_vInitialize(void) {
 101551a:	b508      	push	{r3, lr}
 101551c:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
	I2C_HAL_vIo_configure();
 1015520:	4b04      	ldr	r3, [pc, #16]	; (1015534 <I2C_HAL_vInitialize+0x1c>)
 1015522:	6311      	str	r1, [r2, #48]	; 0x30
 1015524:	4798      	blx	r3
	i2c_over_attemps = 0;
 1015526:	4b04      	ldr	r3, [pc, #16]	; (1015538 <I2C_HAL_vInitialize+0x20>)
 1015528:	2200      	movs	r2, #0
 101552a:	801a      	strh	r2, [r3, #0]
 101552c:	bd08      	pop	{r3, pc}
 101552e:	bf00      	nop
 1015530:	400e0e00 	.word	0x400e0e00
 1015534:	01015409 	.word	0x01015409
 1015538:	200009e0 	.word	0x200009e0

0101553c <I2C_HAL_bEeprom_writer>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool I2C_HAL_bEeprom_writer(uint32_t address, void* data_pointer, unsigned int data_length) {
 101553c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	bool write_ok = false;

	if ( !i2c_busy ) {
 1015540:	4b63      	ldr	r3, [pc, #396]	; (10156d0 <I2C_HAL_bEeprom_writer+0x194>)
bool I2C_HAL_bEeprom_writer(uint32_t address, void* data_pointer, unsigned int data_length) {
 1015542:	b0c9      	sub	sp, #292	; 0x124
	if ( !i2c_busy ) {
 1015544:	781b      	ldrb	r3, [r3, #0]
bool I2C_HAL_bEeprom_writer(uint32_t address, void* data_pointer, unsigned int data_length) {
 1015546:	9002      	str	r0, [sp, #8]
 1015548:	9203      	str	r2, [sp, #12]
	if ( !i2c_busy ) {
 101554a:	2b00      	cmp	r3, #0
 101554c:	f040 80b7 	bne.w	10156be <I2C_HAL_bEeprom_writer+0x182>
		volatile unsigned int wr_bytes;
	
		/* --------------------------------------------------------------------- */
		/* Determine size of first block write                                   */
		/* --------------------------------------------------------------------- */
		wr_bytes = 256 - (address & 0x000000FF);			/* get maximum size for first write */
 1015550:	b2c3      	uxtb	r3, r0
 1015552:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 1015556:	9307      	str	r3, [sp, #28]
	
		if ( data_length < wr_bytes )                       /* sync to page boudary */
 1015558:	9b07      	ldr	r3, [sp, #28]
		i2c_busy = true;
 101555a:	485d      	ldr	r0, [pc, #372]	; (10156d0 <I2C_HAL_bEeprom_writer+0x194>)
 101555c:	f8df a190 	ldr.w	sl, [pc, #400]	; 10156f0 <I2C_HAL_bEeprom_writer+0x1b4>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
 1015560:	f8df b190 	ldr.w	fp, [pc, #400]	; 10156f4 <I2C_HAL_bEeprom_writer+0x1b8>
 1015564:	460f      	mov	r7, r1
 1015566:	4611      	mov	r1, r2
		if ( data_length < wr_bytes )                       /* sync to page boudary */
 1015568:	428b      	cmp	r3, r1
		i2c_busy = true;
 101556a:	f04f 0201 	mov.w	r2, #1
 101556e:	7002      	strb	r2, [r0, #0]
		{
			wr_bytes = data_length;                         /* yes, then just write the request amount */
 1015570:	bf88      	it	hi
 1015572:	9107      	strhi	r1, [sp, #28]
		/* --------------------------------------------------------------------- */
		do {
			
			write_ok = true;
		
			for ( tries = 0; tries < 5; tries++ ) {
 1015574:	2200      	movs	r2, #0
 1015576:	f88d 2017 	strb.w	r2, [sp, #23]
 101557a:	f89d 2017 	ldrb.w	r2, [sp, #23]
 101557e:	2a04      	cmp	r2, #4
 1015580:	f200 8094 	bhi.w	10156ac <I2C_HAL_bEeprom_writer+0x170>
 1015584:	9a02      	ldr	r2, [sp, #8]
 1015586:	f3c2 4602 	ubfx	r6, r2, #16, #3
 101558a:	f046 0350 	orr.w	r3, r6, #80	; 0x50
 101558e:	4619      	mov	r1, r3
 1015590:	f3c2 2807 	ubfx	r8, r2, #8, #8
 1015594:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 1015598:	2301      	movs	r3, #1
						
				// Configure the TWI data
				i2c_twi_package.chip = I2C_EEPROM_CHIP_ADDR(address);
				i2c_twi_package.addr[0] = (uint8_t)(address >> 8);
				i2c_twi_package.addr[1] = (uint8_t)(address);
				i2c_twi_package.addr_length = 2;
 101559a:	f8cd 8000 	str.w	r8, [sp]
 101559e:	4625      	mov	r5, r4
 10155a0:	fa5f f982 	uxtb.w	r9, r2
			for ( tries = 0; tries < 5; tries++ ) {
 10155a4:	9301      	str	r3, [sp, #4]
 10155a6:	ae08      	add	r6, sp, #32
				i2c_twi_package.addr_length = 2;
 10155a8:	4688      	mov	r8, r1
 10155aa:	f8cb 5034 	str.w	r5, [fp, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 10155ae:	f8cb 5010 	str.w	r5, [fp, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 10155b2:	f8cb 50a0 	str.w	r5, [fp, #160]	; 0xa0
				i2c_twi_package.length = wr_bytes; // Data size
 10155b6:	9b07      	ldr	r3, [sp, #28]
				i2c_twi_package.addr[0] = (uint8_t)(address >> 8);
 10155b8:	f89d 2000 	ldrb.w	r2, [sp]
 10155bc:	f88a 2000 	strb.w	r2, [sl]
				i2c_twi_package.length = wr_bytes; // Data size
 10155c0:	f8ca 300c 	str.w	r3, [sl, #12]
				i2c_twi_package.addr_length = 2;
 10155c4:	2202      	movs	r2, #2
				i2c_twi_package.buffer = (void*)data_pointer;
			
				if ( twi_master_write(TWI0, &i2c_twi_package) != TWI_SUCCESS ) {
 10155c6:	4651      	mov	r1, sl
 10155c8:	4842      	ldr	r0, [pc, #264]	; (10156d4 <I2C_HAL_bEeprom_writer+0x198>)
 10155ca:	4b43      	ldr	r3, [pc, #268]	; (10156d8 <I2C_HAL_bEeprom_writer+0x19c>)
				i2c_twi_package.chip = I2C_EEPROM_CHIP_ADDR(address);
 10155cc:	f88a 8010 	strb.w	r8, [sl, #16]
				i2c_twi_package.addr[1] = (uint8_t)(address);
 10155d0:	f88a 9001 	strb.w	r9, [sl, #1]
				i2c_twi_package.addr_length = 2;
 10155d4:	f8ca 2004 	str.w	r2, [sl, #4]
				i2c_twi_package.buffer = (void*)data_pointer;
 10155d8:	f8ca 7008 	str.w	r7, [sl, #8]
				if ( twi_master_write(TWI0, &i2c_twi_package) != TWI_SUCCESS ) {
 10155dc:	4798      	blx	r3
 10155de:	2800      	cmp	r0, #0
 10155e0:	d161      	bne.n	10156a6 <I2C_HAL_bEeprom_writer+0x16a>
					I2C_HAL_vIo_configure();
				}
				delay_ms(10);
 10155e2:	483e      	ldr	r0, [pc, #248]	; (10156dc <I2C_HAL_bEeprom_writer+0x1a0>)
 10155e4:	4b3e      	ldr	r3, [pc, #248]	; (10156e0 <I2C_HAL_bEeprom_writer+0x1a4>)
 10155e6:	4798      	blx	r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
 10155e8:	f8cb 4030 	str.w	r4, [fp, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 10155ec:	f8cb 4010 	str.w	r4, [fp, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 10155f0:	f8cb 40a0 	str.w	r4, [fp, #160]	; 0xa0
				// Configure the TWI data
				i2c_twi_package.chip = I2C_EEPROM_CHIP_ADDR(address);
				i2c_twi_package.addr[0] = (uint8_t)(address >> 8);
				i2c_twi_package.addr[1] = (uint8_t)(address);
				i2c_twi_package.addr_length = 2;
				i2c_twi_package.length = wr_bytes; // Data size
 10155f4:	9b07      	ldr	r3, [sp, #28]
				i2c_twi_package.addr[0] = (uint8_t)(address >> 8);
 10155f6:	f89d 2000 	ldrb.w	r2, [sp]
 10155fa:	f88a 2000 	strb.w	r2, [sl]
				i2c_twi_package.length = wr_bytes; // Data size
 10155fe:	f8ca 300c 	str.w	r3, [sl, #12]
				i2c_twi_package.addr_length = 2;
 1015602:	2202      	movs	r2, #2
				i2c_twi_package.buffer = (void*) &temp_data;
	
				if ( twi_master_read(TWI0, &i2c_twi_package) != TWI_SUCCESS ) {
 1015604:	4651      	mov	r1, sl
 1015606:	4833      	ldr	r0, [pc, #204]	; (10156d4 <I2C_HAL_bEeprom_writer+0x198>)
 1015608:	4b36      	ldr	r3, [pc, #216]	; (10156e4 <I2C_HAL_bEeprom_writer+0x1a8>)
				i2c_twi_package.chip = I2C_EEPROM_CHIP_ADDR(address);
 101560a:	f88a 8010 	strb.w	r8, [sl, #16]
				i2c_twi_package.addr[1] = (uint8_t)(address);
 101560e:	f88a 9001 	strb.w	r9, [sl, #1]
				i2c_twi_package.addr_length = 2;
 1015612:	f8ca 2004 	str.w	r2, [sl, #4]
				i2c_twi_package.buffer = (void*) &temp_data;
 1015616:	f8ca 6008 	str.w	r6, [sl, #8]
				if ( twi_master_read(TWI0, &i2c_twi_package) != TWI_SUCCESS ) {
 101561a:	4798      	blx	r3
 101561c:	2800      	cmp	r0, #0
 101561e:	d13f      	bne.n	10156a0 <I2C_HAL_bEeprom_writer+0x164>
					I2C_HAL_vIo_configure();
				}
	
				for ( i = 0; i < wr_bytes; i++) {
 1015620:	2300      	movs	r3, #0
 1015622:	9306      	str	r3, [sp, #24]
 1015624:	9906      	ldr	r1, [sp, #24]
 1015626:	9b07      	ldr	r3, [sp, #28]
 1015628:	4299      	cmp	r1, r3
 101562a:	d213      	bcs.n	1015654 <I2C_HAL_bEeprom_writer+0x118>

					if ( data[i] != temp_data[i] ) {
 101562c:	9b06      	ldr	r3, [sp, #24]
 101562e:	5cf9      	ldrb	r1, [r7, r3]
 1015630:	9b06      	ldr	r3, [sp, #24]
 1015632:	5cf3      	ldrb	r3, [r6, r3]
 1015634:	4299      	cmp	r1, r3
 1015636:	d006      	beq.n	1015646 <I2C_HAL_bEeprom_writer+0x10a>
 1015638:	e00e      	b.n	1015658 <I2C_HAL_bEeprom_writer+0x11c>
 101563a:	9b06      	ldr	r3, [sp, #24]
 101563c:	5cfa      	ldrb	r2, [r7, r3]
 101563e:	9b06      	ldr	r3, [sp, #24]
 1015640:	5cf3      	ldrb	r3, [r6, r3]
 1015642:	429a      	cmp	r2, r3
 1015644:	d108      	bne.n	1015658 <I2C_HAL_bEeprom_writer+0x11c>
				for ( i = 0; i < wr_bytes; i++) {
 1015646:	9b06      	ldr	r3, [sp, #24]
 1015648:	3301      	adds	r3, #1
 101564a:	9306      	str	r3, [sp, #24]
 101564c:	9a06      	ldr	r2, [sp, #24]
 101564e:	9b07      	ldr	r3, [sp, #28]
 1015650:	429a      	cmp	r2, r3
 1015652:	d3f2      	bcc.n	101563a <I2C_HAL_bEeprom_writer+0xfe>
						write_ok = false;
						break;
					}
				}

				if ( write_ok == true ) {
 1015654:	9b01      	ldr	r3, [sp, #4]
 1015656:	bb4b      	cbnz	r3, 10156ac <I2C_HAL_bEeprom_writer+0x170>
			for ( tries = 0; tries < 5; tries++ ) {
 1015658:	f89d 3017 	ldrb.w	r3, [sp, #23]
 101565c:	3301      	adds	r3, #1
 101565e:	b2db      	uxtb	r3, r3
 1015660:	f88d 3017 	strb.w	r3, [sp, #23]
 1015664:	f89d 3017 	ldrb.w	r3, [sp, #23]
 1015668:	2200      	movs	r2, #0
 101566a:	2b04      	cmp	r3, #4
 101566c:	9201      	str	r2, [sp, #4]
 101566e:	d99c      	bls.n	10155aa <I2C_HAL_bEeprom_writer+0x6e>
 1015670:	4610      	mov	r0, r2
					break;
				}
			}
			
			address  += wr_bytes;                                       /* bump the pointers by amount written */
 1015672:	9907      	ldr	r1, [sp, #28]
			data_pointer  += wr_bytes;
			data = data_pointer;
			data_length -= wr_bytes;                                    /* number of bytes left */
 1015674:	9b03      	ldr	r3, [sp, #12]
			data_pointer  += wr_bytes;
 1015676:	9a07      	ldr	r2, [sp, #28]
			data_length -= wr_bytes;                                    /* number of bytes left */
 1015678:	9c07      	ldr	r4, [sp, #28]
 101567a:	1b1b      	subs	r3, r3, r4
			address  += wr_bytes;                                       /* bump the pointers by amount written */
 101567c:	9c02      	ldr	r4, [sp, #8]
			data_length -= wr_bytes;                                    /* number of bytes left */
 101567e:	9303      	str	r3, [sp, #12]
			address  += wr_bytes;                                       /* bump the pointers by amount written */
 1015680:	440c      	add	r4, r1
		
			if ( 256 > data_length ) {
 1015682:	2bff      	cmp	r3, #255	; 0xff
			address  += wr_bytes;                                       /* bump the pointers by amount written */
 1015684:	9402      	str	r4, [sp, #8]
			data_pointer  += wr_bytes;
 1015686:	4417      	add	r7, r2
			if ( 256 > data_length ) {
 1015688:	d812      	bhi.n	10156b0 <I2C_HAL_bEeprom_writer+0x174>

				wr_bytes = data_length;
 101568a:	9307      	str	r3, [sp, #28]
			} 
			else {
				wr_bytes = 256;
			}
		}
		while ( (data_length > 0) && (write_ok == true) );
 101568c:	b113      	cbz	r3, 1015694 <I2C_HAL_bEeprom_writer+0x158>
 101568e:	2800      	cmp	r0, #0
 1015690:	f47f af70 	bne.w	1015574 <I2C_HAL_bEeprom_writer+0x38>

		i2c_busy = false;
 1015694:	4a0e      	ldr	r2, [pc, #56]	; (10156d0 <I2C_HAL_bEeprom_writer+0x194>)
 1015696:	2300      	movs	r3, #0
 1015698:	7013      	strb	r3, [r2, #0]
	else {
		i2c_over_attemps++;
	}
	
	return write_ok;
}
 101569a:	b049      	add	sp, #292	; 0x124
 101569c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					I2C_HAL_vIo_configure();
 10156a0:	4b11      	ldr	r3, [pc, #68]	; (10156e8 <I2C_HAL_bEeprom_writer+0x1ac>)
 10156a2:	4798      	blx	r3
 10156a4:	e7bc      	b.n	1015620 <I2C_HAL_bEeprom_writer+0xe4>
					I2C_HAL_vIo_configure();
 10156a6:	4b10      	ldr	r3, [pc, #64]	; (10156e8 <I2C_HAL_bEeprom_writer+0x1ac>)
 10156a8:	4798      	blx	r3
 10156aa:	e79a      	b.n	10155e2 <I2C_HAL_bEeprom_writer+0xa6>
			write_ok = true;
 10156ac:	2001      	movs	r0, #1
 10156ae:	e7e0      	b.n	1015672 <I2C_HAL_bEeprom_writer+0x136>
				wr_bytes = 256;
 10156b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 10156b4:	9207      	str	r2, [sp, #28]
		while ( (data_length > 0) && (write_ok == true) );
 10156b6:	2800      	cmp	r0, #0
 10156b8:	f47f af5c 	bne.w	1015574 <I2C_HAL_bEeprom_writer+0x38>
 10156bc:	e7ea      	b.n	1015694 <I2C_HAL_bEeprom_writer+0x158>
		i2c_over_attemps++;
 10156be:	4a0b      	ldr	r2, [pc, #44]	; (10156ec <I2C_HAL_bEeprom_writer+0x1b0>)
 10156c0:	8813      	ldrh	r3, [r2, #0]
	bool write_ok = false;
 10156c2:	2000      	movs	r0, #0
		i2c_over_attemps++;
 10156c4:	3301      	adds	r3, #1
 10156c6:	8013      	strh	r3, [r2, #0]
}
 10156c8:	b049      	add	sp, #292	; 0x124
 10156ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 10156ce:	bf00      	nop
 10156d0:	200009df 	.word	0x200009df
 10156d4:	40018000 	.word	0x40018000
 10156d8:	010102c1 	.word	0x010102c1
 10156dc:	00011db7 	.word	0x00011db7
 10156e0:	20000001 	.word	0x20000001
 10156e4:	010101f5 	.word	0x010101f5
 10156e8:	01015409 	.word	0x01015409
 10156ec:	200009e0 	.word	0x200009e0
 10156f0:	200009e4 	.word	0x200009e4
 10156f4:	400e0e00 	.word	0x400e0e00

010156f8 <I2C_HAL_bEeprom_reader>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool I2C_HAL_bEeprom_reader(uint32_t address, void* data_pointer, unsigned int data_length) {
 10156f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	bool read_ok = false;

	if ( !i2c_busy ) {
 10156fc:	4b21      	ldr	r3, [pc, #132]	; (1015784 <I2C_HAL_bEeprom_reader+0x8c>)
 10156fe:	781d      	ldrb	r5, [r3, #0]
bool I2C_HAL_bEeprom_reader(uint32_t address, void* data_pointer, unsigned int data_length) {
 1015700:	b083      	sub	sp, #12
	if ( !i2c_busy ) {
 1015702:	2d00      	cmp	r5, #0
 1015704:	d135      	bne.n	1015772 <I2C_HAL_bEeprom_reader+0x7a>
 1015706:	9200      	str	r2, [sp, #0]
 1015708:	4e1f      	ldr	r6, [pc, #124]	; (1015788 <I2C_HAL_bEeprom_reader+0x90>)
			i2c_twi_package.addr[1] = (uint8_t)(address);
			i2c_twi_package.addr_length = 2;
			i2c_twi_package.length = data_length; // Data size
			i2c_twi_package.buffer = (void*) data_pointer;
		
			if ( twi_master_read(TWI0, &i2c_twi_package) == TWI_SUCCESS ) {
 101570a:	f8df a094 	ldr.w	sl, [pc, #148]	; 10157a0 <I2C_HAL_bEeprom_reader+0xa8>
 101570e:	9501      	str	r5, [sp, #4]
		i2c_busy = true;
 1015710:	2201      	movs	r2, #1
 1015712:	f3c0 4702 	ubfx	r7, r0, #16, #3
 1015716:	701a      	strb	r2, [r3, #0]
 1015718:	2314      	movs	r3, #20
 101571a:	468b      	mov	fp, r1
			if ( twi_master_read(TWI0, &i2c_twi_package) == TWI_SUCCESS ) {
 101571c:	46b1      	mov	r9, r6
 101571e:	f047 0750 	orr.w	r7, r7, #80	; 0x50
 1015722:	f3c0 2807 	ubfx	r8, r0, #8, #8
 1015726:	b2c4      	uxtb	r4, r0
 1015728:	461d      	mov	r5, r3
			i2c_twi_package.addr_length = 2;
 101572a:	2302      	movs	r3, #2
			i2c_twi_package.length = data_length; // Data size
 101572c:	9a00      	ldr	r2, [sp, #0]
			i2c_twi_package.addr_length = 2;
 101572e:	6073      	str	r3, [r6, #4]
			if ( twi_master_read(TWI0, &i2c_twi_package) == TWI_SUCCESS ) {
 1015730:	4649      	mov	r1, r9
 1015732:	4650      	mov	r0, sl
 1015734:	4b15      	ldr	r3, [pc, #84]	; (101578c <I2C_HAL_bEeprom_reader+0x94>)
			i2c_twi_package.chip = I2C_EEPROM_CHIP_ADDR(address);
 1015736:	7437      	strb	r7, [r6, #16]
			i2c_twi_package.addr[0] = (uint8_t)(address >> 8);
 1015738:	f886 8000 	strb.w	r8, [r6]
			i2c_twi_package.addr[1] = (uint8_t)(address);
 101573c:	7074      	strb	r4, [r6, #1]
			i2c_twi_package.length = data_length; // Data size
 101573e:	60f2      	str	r2, [r6, #12]
			i2c_twi_package.buffer = (void*) data_pointer;
 1015740:	f8c6 b008 	str.w	fp, [r6, #8]
			if ( twi_master_read(TWI0, &i2c_twi_package) == TWI_SUCCESS ) {
 1015744:	4798      	blx	r3
 1015746:	b938      	cbnz	r0, 1015758 <I2C_HAL_bEeprom_reader+0x60>
 1015748:	2501      	movs	r5, #1
	
		if ( read_ok == false ) {
			I2C_HAL_vIo_configure();
		}

		i2c_busy = false;
 101574a:	4a0e      	ldr	r2, [pc, #56]	; (1015784 <I2C_HAL_bEeprom_reader+0x8c>)
 101574c:	2300      	movs	r3, #0
	else {
		i2c_over_attemps++;
	}
	
	return read_ok;
}
 101574e:	4628      	mov	r0, r5
		i2c_busy = false;
 1015750:	7013      	strb	r3, [r2, #0]
}
 1015752:	b003      	add	sp, #12
 1015754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				I2C_HAL_vIo_configure();
 1015758:	4b0d      	ldr	r3, [pc, #52]	; (1015790 <I2C_HAL_bEeprom_reader+0x98>)
 101575a:	4798      	blx	r3
 101575c:	3d01      	subs	r5, #1
				delay_ms(10);
 101575e:	480d      	ldr	r0, [pc, #52]	; (1015794 <I2C_HAL_bEeprom_reader+0x9c>)
 1015760:	4b0d      	ldr	r3, [pc, #52]	; (1015798 <I2C_HAL_bEeprom_reader+0xa0>)
 1015762:	4798      	blx	r3
		while ( (nbr_retries < 20) && (read_ok == false) ) {
 1015764:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 1015768:	d1df      	bne.n	101572a <I2C_HAL_bEeprom_reader+0x32>
			I2C_HAL_vIo_configure();
 101576a:	4b09      	ldr	r3, [pc, #36]	; (1015790 <I2C_HAL_bEeprom_reader+0x98>)
 101576c:	9d01      	ldr	r5, [sp, #4]
 101576e:	4798      	blx	r3
 1015770:	e7eb      	b.n	101574a <I2C_HAL_bEeprom_reader+0x52>
		i2c_over_attemps++;
 1015772:	4a0a      	ldr	r2, [pc, #40]	; (101579c <I2C_HAL_bEeprom_reader+0xa4>)
 1015774:	8813      	ldrh	r3, [r2, #0]
	bool read_ok = false;
 1015776:	2500      	movs	r5, #0
		i2c_over_attemps++;
 1015778:	3301      	adds	r3, #1
}
 101577a:	4628      	mov	r0, r5
		i2c_over_attemps++;
 101577c:	8013      	strh	r3, [r2, #0]
}
 101577e:	b003      	add	sp, #12
 1015780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1015784:	200009df 	.word	0x200009df
 1015788:	200009e4 	.word	0x200009e4
 101578c:	010101f5 	.word	0x010101f5
 1015790:	01015409 	.word	0x01015409
 1015794:	00011db7 	.word	0x00011db7
 1015798:	20000001 	.word	0x20000001
 101579c:	200009e0 	.word	0x200009e0
 10157a0:	40018000 	.word	0x40018000

010157a4 <I2C_HAL_bRtc_writer>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool I2C_HAL_bRtc_writer(uint32_t address, void* data_pointer, unsigned int data_length) {
 10157a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	bool write_ok;

	if ( !i2c_busy ) {
 10157a8:	4b4d      	ldr	r3, [pc, #308]	; (10158e0 <I2C_HAL_bRtc_writer+0x13c>)
 10157aa:	781b      	ldrb	r3, [r3, #0]
bool I2C_HAL_bRtc_writer(uint32_t address, void* data_pointer, unsigned int data_length) {
 10157ac:	b0c7      	sub	sp, #284	; 0x11c
 10157ae:	e88d 0005 	stmia.w	sp, {r0, r2}
	if ( !i2c_busy ) {
 10157b2:	2b00      	cmp	r3, #0
 10157b4:	f040 808b 	bne.w	10158ce <I2C_HAL_bRtc_writer+0x12a>
		volatile unsigned int wr_bytes;
	
		/* --------------------------------------------------------------------- */
		/* Determine size of first block write                                   */
		/* --------------------------------------------------------------------- */
		wr_bytes = 256 - (address & 0x000000FF);			/* get maximum size for first write */
 10157b8:	b2c3      	uxtb	r3, r0
 10157ba:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 10157be:	9305      	str	r3, [sp, #20]
	
		if ( data_length < wr_bytes ) {                      /* sync to page boudary */
 10157c0:	9b05      	ldr	r3, [sp, #20]
		i2c_busy = true;
 10157c2:	4847      	ldr	r0, [pc, #284]	; (10158e0 <I2C_HAL_bRtc_writer+0x13c>)
 10157c4:	f8df b134 	ldr.w	fp, [pc, #308]	; 10158fc <I2C_HAL_bRtc_writer+0x158>
 10157c8:	f8df a134 	ldr.w	sl, [pc, #308]	; 1015900 <I2C_HAL_bRtc_writer+0x15c>
 10157cc:	460c      	mov	r4, r1
 10157ce:	4611      	mov	r1, r2
		if ( data_length < wr_bytes ) {                      /* sync to page boudary */
 10157d0:	428b      	cmp	r3, r1
		i2c_busy = true;
 10157d2:	f04f 0201 	mov.w	r2, #1
 10157d6:	7002      	strb	r2, [r0, #0]
		
			wr_bytes = data_length;                         /* yes, then just write the request amount */
 10157d8:	bf88      	it	hi
 10157da:	9105      	strhi	r1, [sp, #20]
 10157dc:	46a1      	mov	r9, r4
		/* --------------------------------------------------------------------- */
		do {
		
			write_ok = true;
		
			for ( tries = 0; tries < 5; tries++ ) {
 10157de:	2200      	movs	r2, #0
 10157e0:	f88d 200f 	strb.w	r2, [sp, #15]
 10157e4:	f89d 200f 	ldrb.w	r2, [sp, #15]
 10157e8:	2a04      	cmp	r2, #4
 10157ea:	d868      	bhi.n	10158be <I2C_HAL_bRtc_writer+0x11a>
				i2c_twi_package.addr[0] = (uint8_t)(address);
				i2c_twi_package.addr_length = 1;
				i2c_twi_package.length = wr_bytes; // Data size
				i2c_twi_package.buffer = (void*)data_pointer;
			
				if ( twi_master_write(TWI0, &i2c_twi_package) != TWI_SUCCESS ) {
 10157ec:	4f3d      	ldr	r7, [pc, #244]	; (10158e4 <I2C_HAL_bRtc_writer+0x140>)
 10157ee:	f89d 6000 	ldrb.w	r6, [sp]
			for ( tries = 0; tries < 5; tries++ ) {
 10157f2:	2401      	movs	r4, #1
 10157f4:	f10d 0818 	add.w	r8, sp, #24
				i2c_twi_package.chip = 0x32;
 10157f8:	2532      	movs	r5, #50	; 0x32
				i2c_twi_package.length = wr_bytes; // Data size
 10157fa:	9b05      	ldr	r3, [sp, #20]
 10157fc:	f8cb 300c 	str.w	r3, [fp, #12]
				i2c_twi_package.addr_length = 1;
 1015800:	2201      	movs	r2, #1
				if ( twi_master_write(TWI0, &i2c_twi_package) != TWI_SUCCESS ) {
 1015802:	4659      	mov	r1, fp
 1015804:	4638      	mov	r0, r7
 1015806:	4b38      	ldr	r3, [pc, #224]	; (10158e8 <I2C_HAL_bRtc_writer+0x144>)
				i2c_twi_package.chip = 0x32;
 1015808:	f88b 5010 	strb.w	r5, [fp, #16]
				i2c_twi_package.addr[0] = (uint8_t)(address);
 101580c:	f88b 6000 	strb.w	r6, [fp]
				i2c_twi_package.buffer = (void*)data_pointer;
 1015810:	f8cb 9008 	str.w	r9, [fp, #8]
				i2c_twi_package.addr_length = 1;
 1015814:	f8cb 2004 	str.w	r2, [fp, #4]
				if ( twi_master_write(TWI0, &i2c_twi_package) != TWI_SUCCESS ) {
 1015818:	4798      	blx	r3
 101581a:	2800      	cmp	r0, #0
 101581c:	d14c      	bne.n	10158b8 <I2C_HAL_bRtc_writer+0x114>
					I2C_HAL_vIo_configure();
				}
				delay_ms(10);
 101581e:	4833      	ldr	r0, [pc, #204]	; (10158ec <I2C_HAL_bRtc_writer+0x148>)
 1015820:	47d0      	blx	sl
			
				// Configure the TWI data
				i2c_twi_package.chip = 0x32;
				i2c_twi_package.addr[0] = (uint8_t)(address);
				i2c_twi_package.addr_length = 1;
				i2c_twi_package.length = wr_bytes; // Data size
 1015822:	9b05      	ldr	r3, [sp, #20]
 1015824:	f8cb 300c 	str.w	r3, [fp, #12]
				i2c_twi_package.addr_length = 1;
 1015828:	2201      	movs	r2, #1
				i2c_twi_package.buffer = (void*) &temp_data;
			
				if ( twi_master_read(TWI0, &i2c_twi_package) != TWI_SUCCESS ) {
 101582a:	4659      	mov	r1, fp
 101582c:	4638      	mov	r0, r7
 101582e:	4b30      	ldr	r3, [pc, #192]	; (10158f0 <I2C_HAL_bRtc_writer+0x14c>)
				i2c_twi_package.chip = 0x32;
 1015830:	f88b 5010 	strb.w	r5, [fp, #16]
				i2c_twi_package.addr[0] = (uint8_t)(address);
 1015834:	f88b 6000 	strb.w	r6, [fp]
				i2c_twi_package.buffer = (void*) &temp_data;
 1015838:	f8cb 8008 	str.w	r8, [fp, #8]
				i2c_twi_package.addr_length = 1;
 101583c:	f8cb 2004 	str.w	r2, [fp, #4]
				if ( twi_master_read(TWI0, &i2c_twi_package) != TWI_SUCCESS ) {
 1015840:	4798      	blx	r3
 1015842:	2800      	cmp	r0, #0
 1015844:	d135      	bne.n	10158b2 <I2C_HAL_bRtc_writer+0x10e>
					I2C_HAL_vIo_configure();
				}
			
				for ( i = 0; i < wr_bytes; i++) {
 1015846:	2300      	movs	r3, #0
 1015848:	e009      	b.n	101585e <I2C_HAL_bRtc_writer+0xba>

					if ( data[i] != temp_data[i] ) {
 101584a:	9b04      	ldr	r3, [sp, #16]
 101584c:	f819 2003 	ldrb.w	r2, [r9, r3]
 1015850:	9b04      	ldr	r3, [sp, #16]
 1015852:	f818 3003 	ldrb.w	r3, [r8, r3]
 1015856:	429a      	cmp	r2, r3
 1015858:	d107      	bne.n	101586a <I2C_HAL_bRtc_writer+0xc6>
				for ( i = 0; i < wr_bytes; i++) {
 101585a:	9b04      	ldr	r3, [sp, #16]
 101585c:	3301      	adds	r3, #1
 101585e:	9304      	str	r3, [sp, #16]
 1015860:	9a04      	ldr	r2, [sp, #16]
 1015862:	9b05      	ldr	r3, [sp, #20]
 1015864:	429a      	cmp	r2, r3
 1015866:	d3f0      	bcc.n	101584a <I2C_HAL_bRtc_writer+0xa6>
						write_ok = false;
						break;
					}
				}

				if ( write_ok == true ) {
 1015868:	bb4c      	cbnz	r4, 10158be <I2C_HAL_bRtc_writer+0x11a>
			for ( tries = 0; tries < 5; tries++ ) {
 101586a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 101586e:	3301      	adds	r3, #1
 1015870:	b2db      	uxtb	r3, r3
 1015872:	f88d 300f 	strb.w	r3, [sp, #15]
 1015876:	f89d 300f 	ldrb.w	r3, [sp, #15]
 101587a:	2b04      	cmp	r3, #4
 101587c:	f04f 0400 	mov.w	r4, #0
 1015880:	d9bb      	bls.n	10157fa <I2C_HAL_bRtc_writer+0x56>
					break;
				}
			}
		
			address  += wr_bytes;                                       /* bump the pointers by amount written */
 1015882:	9905      	ldr	r1, [sp, #20]
			data_pointer  += wr_bytes;
			data = data_pointer;
			data_length -= wr_bytes;                                    /* number of bytes left */
 1015884:	9b01      	ldr	r3, [sp, #4]
			data_pointer  += wr_bytes;
 1015886:	9a05      	ldr	r2, [sp, #20]
			data_length -= wr_bytes;                                    /* number of bytes left */
 1015888:	9805      	ldr	r0, [sp, #20]
 101588a:	1a1b      	subs	r3, r3, r0
			address  += wr_bytes;                                       /* bump the pointers by amount written */
 101588c:	9800      	ldr	r0, [sp, #0]
			data_length -= wr_bytes;                                    /* number of bytes left */
 101588e:	9301      	str	r3, [sp, #4]
			address  += wr_bytes;                                       /* bump the pointers by amount written */
 1015890:	4408      	add	r0, r1
		
			if ( 256 > data_length ) {
 1015892:	2bff      	cmp	r3, #255	; 0xff
			address  += wr_bytes;                                       /* bump the pointers by amount written */
 1015894:	9000      	str	r0, [sp, #0]
			data_pointer  += wr_bytes;
 1015896:	4491      	add	r9, r2
			if ( 256 > data_length ) {
 1015898:	d813      	bhi.n	10158c2 <I2C_HAL_bRtc_writer+0x11e>

				wr_bytes = data_length;
 101589a:	9305      	str	r3, [sp, #20]
			}
			else {
				wr_bytes = 256;
			}
		}
		while ( (data_length > 0) && (write_ok == true) );
 101589c:	b10b      	cbz	r3, 10158a2 <I2C_HAL_bRtc_writer+0xfe>
 101589e:	2c00      	cmp	r4, #0
 10158a0:	d19d      	bne.n	10157de <I2C_HAL_bRtc_writer+0x3a>
 10158a2:	4625      	mov	r5, r4

		i2c_busy = false;
 10158a4:	4a0e      	ldr	r2, [pc, #56]	; (10158e0 <I2C_HAL_bRtc_writer+0x13c>)
 10158a6:	2300      	movs	r3, #0
	else {
		i2c_over_attemps++;
	}
	
	return write_ok;
}
 10158a8:	4628      	mov	r0, r5
		i2c_busy = false;
 10158aa:	7013      	strb	r3, [r2, #0]
}
 10158ac:	b047      	add	sp, #284	; 0x11c
 10158ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					I2C_HAL_vIo_configure();
 10158b2:	4b10      	ldr	r3, [pc, #64]	; (10158f4 <I2C_HAL_bRtc_writer+0x150>)
 10158b4:	4798      	blx	r3
 10158b6:	e7c6      	b.n	1015846 <I2C_HAL_bRtc_writer+0xa2>
					I2C_HAL_vIo_configure();
 10158b8:	4b0e      	ldr	r3, [pc, #56]	; (10158f4 <I2C_HAL_bRtc_writer+0x150>)
 10158ba:	4798      	blx	r3
 10158bc:	e7af      	b.n	101581e <I2C_HAL_bRtc_writer+0x7a>
			write_ok = true;
 10158be:	2401      	movs	r4, #1
 10158c0:	e7df      	b.n	1015882 <I2C_HAL_bRtc_writer+0xde>
				wr_bytes = 256;
 10158c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 10158c6:	9205      	str	r2, [sp, #20]
		while ( (data_length > 0) && (write_ok == true) );
 10158c8:	2c00      	cmp	r4, #0
 10158ca:	d188      	bne.n	10157de <I2C_HAL_bRtc_writer+0x3a>
 10158cc:	e7e9      	b.n	10158a2 <I2C_HAL_bRtc_writer+0xfe>
		i2c_over_attemps++;
 10158ce:	4a0a      	ldr	r2, [pc, #40]	; (10158f8 <I2C_HAL_bRtc_writer+0x154>)
 10158d0:	8813      	ldrh	r3, [r2, #0]
}
 10158d2:	4628      	mov	r0, r5
		i2c_over_attemps++;
 10158d4:	3301      	adds	r3, #1
 10158d6:	8013      	strh	r3, [r2, #0]
}
 10158d8:	b047      	add	sp, #284	; 0x11c
 10158da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 10158de:	bf00      	nop
 10158e0:	200009df 	.word	0x200009df
 10158e4:	40018000 	.word	0x40018000
 10158e8:	010102c1 	.word	0x010102c1
 10158ec:	00011db7 	.word	0x00011db7
 10158f0:	010101f5 	.word	0x010101f5
 10158f4:	01015409 	.word	0x01015409
 10158f8:	200009e0 	.word	0x200009e0
 10158fc:	200009e4 	.word	0x200009e4
 1015900:	20000001 	.word	0x20000001

01015904 <I2C_HAL_bRtc_reader>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool I2C_HAL_bRtc_reader(uint32_t address, void* data_pointer, unsigned int data_length) {
 1015904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	bool read_ok = false;

	if ( !i2c_busy ) {
 1015908:	4b1d      	ldr	r3, [pc, #116]	; (1015980 <I2C_HAL_bRtc_reader+0x7c>)
 101590a:	781e      	ldrb	r6, [r3, #0]
bool I2C_HAL_bRtc_reader(uint32_t address, void* data_pointer, unsigned int data_length) {
 101590c:	b083      	sub	sp, #12
	if ( !i2c_busy ) {
 101590e:	bb76      	cbnz	r6, 101596e <I2C_HAL_bRtc_reader+0x6a>
 1015910:	4690      	mov	r8, r2
 1015912:	4f1c      	ldr	r7, [pc, #112]	; (1015984 <I2C_HAL_bRtc_reader+0x80>)
			i2c_twi_package.addr[0] = (uint8_t)(address);
			i2c_twi_package.addr_length = 1;
			i2c_twi_package.length = data_length; // Data size
			i2c_twi_package.buffer = (void*) data_pointer;
		
			if ( twi_master_read(TWI0, &i2c_twi_package) == TWI_SUCCESS ) {
 1015914:	f8df a084 	ldr.w	sl, [pc, #132]	; 101599c <I2C_HAL_bRtc_reader+0x98>
 1015918:	9601      	str	r6, [sp, #4]
		i2c_busy = true;
 101591a:	2201      	movs	r2, #1
 101591c:	701a      	strb	r2, [r3, #0]
 101591e:	2314      	movs	r3, #20
 1015920:	468b      	mov	fp, r1
 1015922:	b2c5      	uxtb	r5, r0
			if ( twi_master_read(TWI0, &i2c_twi_package) == TWI_SUCCESS ) {
 1015924:	46b9      	mov	r9, r7
 1015926:	461e      	mov	r6, r3
			i2c_twi_package.chip = 0x32;
 1015928:	2332      	movs	r3, #50	; 0x32
			i2c_twi_package.addr_length = 1;
 101592a:	2401      	movs	r4, #1
			i2c_twi_package.chip = 0x32;
 101592c:	743b      	strb	r3, [r7, #16]
			if ( twi_master_read(TWI0, &i2c_twi_package) == TWI_SUCCESS ) {
 101592e:	4649      	mov	r1, r9
 1015930:	4650      	mov	r0, sl
 1015932:	4b15      	ldr	r3, [pc, #84]	; (1015988 <I2C_HAL_bRtc_reader+0x84>)
			i2c_twi_package.addr[0] = (uint8_t)(address);
 1015934:	703d      	strb	r5, [r7, #0]
			i2c_twi_package.length = data_length; // Data size
 1015936:	f8c7 800c 	str.w	r8, [r7, #12]
			i2c_twi_package.buffer = (void*) data_pointer;
 101593a:	f8c7 b008 	str.w	fp, [r7, #8]
			i2c_twi_package.addr_length = 1;
 101593e:	607c      	str	r4, [r7, #4]
			if ( twi_master_read(TWI0, &i2c_twi_package) == TWI_SUCCESS ) {
 1015940:	4798      	blx	r3
 1015942:	b938      	cbnz	r0, 1015954 <I2C_HAL_bRtc_reader+0x50>
 1015944:	4626      	mov	r6, r4
	
		if ( read_ok == false ) {
			I2C_HAL_vIo_configure();
		}

		i2c_busy = false;
 1015946:	4a0e      	ldr	r2, [pc, #56]	; (1015980 <I2C_HAL_bRtc_reader+0x7c>)
 1015948:	2300      	movs	r3, #0
	else {
		i2c_over_attemps++;
	}
	
	return read_ok;
}
 101594a:	4630      	mov	r0, r6
		i2c_busy = false;
 101594c:	7013      	strb	r3, [r2, #0]
}
 101594e:	b003      	add	sp, #12
 1015950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				I2C_HAL_vIo_configure();
 1015954:	4b0d      	ldr	r3, [pc, #52]	; (101598c <I2C_HAL_bRtc_reader+0x88>)
 1015956:	4798      	blx	r3
 1015958:	3e01      	subs	r6, #1
				delay_ms(10);
 101595a:	480d      	ldr	r0, [pc, #52]	; (1015990 <I2C_HAL_bRtc_reader+0x8c>)
 101595c:	4b0d      	ldr	r3, [pc, #52]	; (1015994 <I2C_HAL_bRtc_reader+0x90>)
 101595e:	4798      	blx	r3
		while ( (nbr_retries < 20) && (read_ok == false) ) {
 1015960:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 1015964:	d1e0      	bne.n	1015928 <I2C_HAL_bRtc_reader+0x24>
			I2C_HAL_vIo_configure();
 1015966:	4b09      	ldr	r3, [pc, #36]	; (101598c <I2C_HAL_bRtc_reader+0x88>)
 1015968:	9e01      	ldr	r6, [sp, #4]
 101596a:	4798      	blx	r3
 101596c:	e7eb      	b.n	1015946 <I2C_HAL_bRtc_reader+0x42>
		i2c_over_attemps++;
 101596e:	4a0a      	ldr	r2, [pc, #40]	; (1015998 <I2C_HAL_bRtc_reader+0x94>)
 1015970:	8813      	ldrh	r3, [r2, #0]
	bool read_ok = false;
 1015972:	2600      	movs	r6, #0
		i2c_over_attemps++;
 1015974:	3301      	adds	r3, #1
}
 1015976:	4630      	mov	r0, r6
		i2c_over_attemps++;
 1015978:	8013      	strh	r3, [r2, #0]
}
 101597a:	b003      	add	sp, #12
 101597c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1015980:	200009df 	.word	0x200009df
 1015984:	200009e4 	.word	0x200009e4
 1015988:	010101f5 	.word	0x010101f5
 101598c:	01015409 	.word	0x01015409
 1015990:	00011db7 	.word	0x00011db7
 1015994:	20000001 	.word	0x20000001
 1015998:	200009e0 	.word	0x200009e0
 101599c:	40018000 	.word	0x40018000

010159a0 <RST_HAL_vExecute_software_reset>:
 ******************************************************************************
 */
void RST_HAL_vExecute_software_reset(void) {

	/* Write key password */
	RSTC->RSTC_CPMR = 0xA5000000;
 10159a0:	4b03      	ldr	r3, [pc, #12]	; (10159b0 <RST_HAL_vExecute_software_reset+0x10>)
	
	/* Start reset */
	RSTC->RSTC_CR = 0xA500000D;
 10159a2:	4a04      	ldr	r2, [pc, #16]	; (10159b4 <RST_HAL_vExecute_software_reset+0x14>)
	RSTC->RSTC_CPMR = 0xA5000000;
 10159a4:	f04f 4125 	mov.w	r1, #2768240640	; 0xa5000000
 10159a8:	60d9      	str	r1, [r3, #12]
	RSTC->RSTC_CR = 0xA500000D;
 10159aa:	601a      	str	r2, [r3, #0]
 10159ac:	4770      	bx	lr
 10159ae:	bf00      	nop
 10159b0:	400e1400 	.word	0x400e1400
 10159b4:	a500000d 	.word	0xa500000d

010159b8 <RST_APP_vSave_information.part.0>:
void RST_APP_vSave_information(void) {
 10159b8:	b510      	push	{r4, lr}
		REGS_APP_vStore_summations();
 10159ba:	4b07      	ldr	r3, [pc, #28]	; (10159d8 <RST_APP_vSave_information.part.0+0x20>)
 10159bc:	4798      	blx	r3
		REGS_APP_vStore_demands();
 10159be:	4b07      	ldr	r3, [pc, #28]	; (10159dc <RST_APP_vSave_information.part.0+0x24>)
 10159c0:	4798      	blx	r3
		LP_APP_vPower_fail_detection();
 10159c2:	4b07      	ldr	r3, [pc, #28]	; (10159e0 <RST_APP_vSave_information.part.0+0x28>)
 10159c4:	4798      	blx	r3
		TOU_APP_vWrite_eeprom_current_season();
 10159c6:	4b07      	ldr	r3, [pc, #28]	; (10159e4 <RST_APP_vSave_information.part.0+0x2c>)
 10159c8:	4798      	blx	r3
		GRAL_APP_vStore_st_3_ed_std_status1();
 10159ca:	4b07      	ldr	r3, [pc, #28]	; (10159e8 <RST_APP_vSave_information.part.0+0x30>)
 10159cc:	4798      	blx	r3
		GRAL_APP_vStore_st_3_ed_mfg_status();
 10159ce:	4b07      	ldr	r3, [pc, #28]	; (10159ec <RST_APP_vSave_information.part.0+0x34>)
}
 10159d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		GRAL_APP_vStore_st_3_ed_mfg_status();
 10159d4:	4718      	bx	r3
 10159d6:	bf00      	nop
 10159d8:	01029795 	.word	0x01029795
 10159dc:	01028c85 	.word	0x01028c85
 10159e0:	0101c8b1 	.word	0x0101c8b1
 10159e4:	0102c5ad 	.word	0x0102c5ad
 10159e8:	0101a1f1 	.word	0x0101a1f1
 10159ec:	0101a205 	.word	0x0101a205

010159f0 <RST_APP_vExecute_mcu_reset>:
void RST_APP_vExecute_mcu_reset(SYSTEM_RESTART_TYPE mcu) {
 10159f0:	b530      	push	{r4, r5, lr}
	if ( meter.power_failure == false )
 10159f2:	4c88      	ldr	r4, [pc, #544]	; (1015c14 <RST_APP_vExecute_mcu_reset+0x224>)
void RST_APP_vExecute_mcu_reset(SYSTEM_RESTART_TYPE mcu) {
 10159f4:	b085      	sub	sp, #20
	if ( meter.power_failure == false )
 10159f6:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
void RST_APP_vExecute_mcu_reset(SYSTEM_RESTART_TYPE mcu) {
 10159fa:	9001      	str	r0, [sp, #4]
	if ( meter.power_failure == false )
 10159fc:	b13b      	cbz	r3, 1015a0e <RST_APP_vExecute_mcu_reset+0x1e>
	RSTC->RSTC_CPMR = 0xA5000000;
 10159fe:	4b86      	ldr	r3, [pc, #536]	; (1015c18 <RST_APP_vExecute_mcu_reset+0x228>)
	RSTC->RSTC_CR = 0xA500000D;
 1015a00:	4a86      	ldr	r2, [pc, #536]	; (1015c1c <RST_APP_vExecute_mcu_reset+0x22c>)
	RSTC->RSTC_CPMR = 0xA5000000;
 1015a02:	f04f 4125 	mov.w	r1, #2768240640	; 0xa5000000
 1015a06:	60d9      	str	r1, [r3, #12]
	RSTC->RSTC_CR = 0xA500000D;
 1015a08:	601a      	str	r2, [r3, #0]
}
 1015a0a:	b005      	add	sp, #20
 1015a0c:	bd30      	pop	{r4, r5, pc}
		TIMER_start_ms_timer(SAVE_INFORMATION_TIMER, TIMER_ms_to_tic(5000), RST_HAL_vExecute_software_reset);
 1015a0e:	4b84      	ldr	r3, [pc, #528]	; (1015c20 <RST_APP_vExecute_mcu_reset+0x230>)
 1015a10:	4a84      	ldr	r2, [pc, #528]	; (1015c24 <RST_APP_vExecute_mcu_reset+0x234>)
 1015a12:	f241 3188 	movw	r1, #5000	; 0x1388
 1015a16:	2015      	movs	r0, #21
 1015a18:	4798      	blx	r3
		if (mcu.save_information == true) {
 1015a1a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 1015a1e:	b13b      	cbz	r3, 1015a30 <RST_APP_vExecute_mcu_reset+0x40>
	if ( (!meter.system_state.changing_configuration) && (!meter.system_state.initialiting) ) {
 1015a20:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 1015a24:	b923      	cbnz	r3, 1015a30 <RST_APP_vExecute_mcu_reset+0x40>
 1015a26:	f894 3020 	ldrb.w	r3, [r4, #32]
 1015a2a:	2b00      	cmp	r3, #0
 1015a2c:	f000 8096 	beq.w	1015b5c <RST_APP_vExecute_mcu_reset+0x16c>
		switch ((uint16_t)mcu.restart_cause) {
 1015a30:	f89d 3005 	ldrb.w	r3, [sp, #5]
 1015a34:	2b06      	cmp	r3, #6
 1015a36:	d8e2      	bhi.n	10159fe <RST_APP_vExecute_mcu_reset+0xe>
 1015a38:	e8df f003 	tbb	[pc, r3]
 1015a3c:	4e38220c 	.word	0x4e38220c
 1015a40:	7a64      	.short	0x7a64
 1015a42:	04          	.byte	0x04
 1015a43:	00          	.byte	0x00
				switch ((uint16_t)mcu.fault) {
 1015a44:	f89d 3006 	ldrb.w	r3, [sp, #6]
 1015a48:	2b03      	cmp	r3, #3
 1015a4a:	d8d8      	bhi.n	10159fe <RST_APP_vExecute_mcu_reset+0xe>
 1015a4c:	e8df f003 	tbb	[pc, r3]
 1015a50:	899fb5cb 	.word	0x899fb5cb
				aux = 0;
 1015a54:	ac04      	add	r4, sp, #16
 1015a56:	2300      	movs	r3, #0
 1015a58:	f824 3d02 	strh.w	r3, [r4, #-2]!
				EEPROM_reader( MT_4_MCU_RESET_POWER_FAILURE_ADDR, (uint8_t*) &aux, 2 );
 1015a5c:	2202      	movs	r2, #2
 1015a5e:	4621      	mov	r1, r4
 1015a60:	4b71      	ldr	r3, [pc, #452]	; (1015c28 <RST_APP_vExecute_mcu_reset+0x238>)
				EEPROM_writer( MT_4_MCU_RESET_POWER_FAILURE_ADDR, (uint8_t*) &aux, 2 );
 1015a62:	4d72      	ldr	r5, [pc, #456]	; (1015c2c <RST_APP_vExecute_mcu_reset+0x23c>)
				EEPROM_reader( MT_4_MCU_RESET_POWER_FAILURE_ADDR, (uint8_t*) &aux, 2 );
 1015a64:	f249 2020 	movw	r0, #37408	; 0x9220
 1015a68:	4798      	blx	r3
				aux++;
 1015a6a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
				EEPROM_writer( MT_4_MCU_RESET_POWER_FAILURE_ADDR, (uint8_t*) &aux, 2 );
 1015a6e:	4621      	mov	r1, r4
				aux++;
 1015a70:	3301      	adds	r3, #1
				EEPROM_writer( MT_4_MCU_RESET_POWER_FAILURE_ADDR, (uint8_t*) &aux, 2 );
 1015a72:	2202      	movs	r2, #2
 1015a74:	f249 2020 	movw	r0, #37408	; 0x9220
				aux++;
 1015a78:	f8ad 300e 	strh.w	r3, [sp, #14]
				EEPROM_writer( MT_4_MCU_RESET_POWER_FAILURE_ADDR, (uint8_t*) &aux, 2 );
 1015a7c:	47a8      	blx	r5
				break;
 1015a7e:	e7be      	b.n	10159fe <RST_APP_vExecute_mcu_reset+0xe>
				aux = 0;
 1015a80:	ac04      	add	r4, sp, #16
 1015a82:	2300      	movs	r3, #0
 1015a84:	f824 3d02 	strh.w	r3, [r4, #-2]!
				EEPROM_reader( MT_4_MCU_RESET_FIRMWARE_UPDATE_ADDR, (uint8_t*) &aux, 2 );
 1015a88:	2202      	movs	r2, #2
 1015a8a:	4621      	mov	r1, r4
 1015a8c:	4b66      	ldr	r3, [pc, #408]	; (1015c28 <RST_APP_vExecute_mcu_reset+0x238>)
				EEPROM_writer( MT_4_MCU_RESET_FIRMWARE_UPDATE_ADDR, (uint8_t*) &aux, 2 );
 1015a8e:	4d67      	ldr	r5, [pc, #412]	; (1015c2c <RST_APP_vExecute_mcu_reset+0x23c>)
				EEPROM_reader( MT_4_MCU_RESET_FIRMWARE_UPDATE_ADDR, (uint8_t*) &aux, 2 );
 1015a90:	f249 2022 	movw	r0, #37410	; 0x9222
 1015a94:	4798      	blx	r3
				aux++;
 1015a96:	f8bd 300e 	ldrh.w	r3, [sp, #14]
				EEPROM_writer( MT_4_MCU_RESET_FIRMWARE_UPDATE_ADDR, (uint8_t*) &aux, 2 );
 1015a9a:	4621      	mov	r1, r4
				aux++;
 1015a9c:	3301      	adds	r3, #1
				EEPROM_writer( MT_4_MCU_RESET_FIRMWARE_UPDATE_ADDR, (uint8_t*) &aux, 2 );
 1015a9e:	2202      	movs	r2, #2
 1015aa0:	f249 2022 	movw	r0, #37410	; 0x9222
				aux++;
 1015aa4:	f8ad 300e 	strh.w	r3, [sp, #14]
				EEPROM_writer( MT_4_MCU_RESET_FIRMWARE_UPDATE_ADDR, (uint8_t*) &aux, 2 );
 1015aa8:	47a8      	blx	r5
				break;
 1015aaa:	e7a8      	b.n	10159fe <RST_APP_vExecute_mcu_reset+0xe>
				aux = 0;
 1015aac:	ac04      	add	r4, sp, #16
 1015aae:	2300      	movs	r3, #0
 1015ab0:	f824 3d02 	strh.w	r3, [r4, #-2]!
				EEPROM_reader( MT_4_MCU_RESET_WATCH_DOG_ADDR, (uint8_t*) &aux, 2 );
 1015ab4:	2202      	movs	r2, #2
 1015ab6:	4621      	mov	r1, r4
 1015ab8:	4b5b      	ldr	r3, [pc, #364]	; (1015c28 <RST_APP_vExecute_mcu_reset+0x238>)
				EEPROM_writer( MT_4_MCU_RESET_WATCH_DOG_ADDR, (uint8_t*) &aux, 2 );
 1015aba:	4d5c      	ldr	r5, [pc, #368]	; (1015c2c <RST_APP_vExecute_mcu_reset+0x23c>)
				EEPROM_reader( MT_4_MCU_RESET_WATCH_DOG_ADDR, (uint8_t*) &aux, 2 );
 1015abc:	f249 2024 	movw	r0, #37412	; 0x9224
 1015ac0:	4798      	blx	r3
				aux++;
 1015ac2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
				EEPROM_writer( MT_4_MCU_RESET_WATCH_DOG_ADDR, (uint8_t*) &aux, 2 );
 1015ac6:	4621      	mov	r1, r4
				aux++;
 1015ac8:	3301      	adds	r3, #1
				EEPROM_writer( MT_4_MCU_RESET_WATCH_DOG_ADDR, (uint8_t*) &aux, 2 );
 1015aca:	2202      	movs	r2, #2
 1015acc:	f249 2024 	movw	r0, #37412	; 0x9224
				aux++;
 1015ad0:	f8ad 300e 	strh.w	r3, [sp, #14]
				EEPROM_writer( MT_4_MCU_RESET_WATCH_DOG_ADDR, (uint8_t*) &aux, 2 );
 1015ad4:	47a8      	blx	r5
				break;
 1015ad6:	e792      	b.n	10159fe <RST_APP_vExecute_mcu_reset+0xe>
				aux = 0;
 1015ad8:	ac04      	add	r4, sp, #16
 1015ada:	2300      	movs	r3, #0
 1015adc:	f824 3d02 	strh.w	r3, [r4, #-2]!
				EEPROM_reader( MT_4_MCU_RESET_COLD_START_ADDR, (uint8_t*) &aux, 2 );
 1015ae0:	2202      	movs	r2, #2
 1015ae2:	4621      	mov	r1, r4
 1015ae4:	4b50      	ldr	r3, [pc, #320]	; (1015c28 <RST_APP_vExecute_mcu_reset+0x238>)
				EEPROM_writer( MT_4_MCU_RESET_COLD_START_ADDR, (uint8_t*) &aux, 2 );
 1015ae6:	4d51      	ldr	r5, [pc, #324]	; (1015c2c <RST_APP_vExecute_mcu_reset+0x23c>)
				EEPROM_reader( MT_4_MCU_RESET_COLD_START_ADDR, (uint8_t*) &aux, 2 );
 1015ae8:	f249 2026 	movw	r0, #37414	; 0x9226
 1015aec:	4798      	blx	r3
				aux++;
 1015aee:	f8bd 300e 	ldrh.w	r3, [sp, #14]
				EEPROM_writer( MT_4_MCU_RESET_COLD_START_ADDR, (uint8_t*) &aux, 2 );
 1015af2:	4621      	mov	r1, r4
				aux++;
 1015af4:	3301      	adds	r3, #1
				EEPROM_writer( MT_4_MCU_RESET_COLD_START_ADDR, (uint8_t*) &aux, 2 );
 1015af6:	2202      	movs	r2, #2
 1015af8:	f249 2026 	movw	r0, #37414	; 0x9226
				aux++;
 1015afc:	f8ad 300e 	strh.w	r3, [sp, #14]
				EEPROM_writer( MT_4_MCU_RESET_COLD_START_ADDR, (uint8_t*) &aux, 2 );
 1015b00:	47a8      	blx	r5
				break;
 1015b02:	e77c      	b.n	10159fe <RST_APP_vExecute_mcu_reset+0xe>
				aux = 0;
 1015b04:	ac04      	add	r4, sp, #16
 1015b06:	2300      	movs	r3, #0
 1015b08:	f824 3d02 	strh.w	r3, [r4, #-2]!
				EEPROM_reader( MT_4_MCU_RESET_WARM_START_ADDR, (uint8_t*) &aux, 2 );
 1015b0c:	2202      	movs	r2, #2
 1015b0e:	4621      	mov	r1, r4
 1015b10:	4b45      	ldr	r3, [pc, #276]	; (1015c28 <RST_APP_vExecute_mcu_reset+0x238>)
				EEPROM_writer( MT_4_MCU_RESET_WARM_START_ADDR, (uint8_t*) &aux, 2 );
 1015b12:	4d46      	ldr	r5, [pc, #280]	; (1015c2c <RST_APP_vExecute_mcu_reset+0x23c>)
				EEPROM_reader( MT_4_MCU_RESET_WARM_START_ADDR, (uint8_t*) &aux, 2 );
 1015b14:	f249 2028 	movw	r0, #37416	; 0x9228
 1015b18:	4798      	blx	r3
				aux++;
 1015b1a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
				EEPROM_writer( MT_4_MCU_RESET_WARM_START_ADDR, (uint8_t*) &aux, 2 );
 1015b1e:	4621      	mov	r1, r4
				aux++;
 1015b20:	3301      	adds	r3, #1
				EEPROM_writer( MT_4_MCU_RESET_WARM_START_ADDR, (uint8_t*) &aux, 2 );
 1015b22:	2202      	movs	r2, #2
 1015b24:	f249 2028 	movw	r0, #37416	; 0x9228
				aux++;
 1015b28:	f8ad 300e 	strh.w	r3, [sp, #14]
				EEPROM_writer( MT_4_MCU_RESET_WARM_START_ADDR, (uint8_t*) &aux, 2 );
 1015b2c:	47a8      	blx	r5
				break;
 1015b2e:	e766      	b.n	10159fe <RST_APP_vExecute_mcu_reset+0xe>
				aux = 0;
 1015b30:	ac04      	add	r4, sp, #16
 1015b32:	2300      	movs	r3, #0
 1015b34:	f824 3d02 	strh.w	r3, [r4, #-2]!
				EEPROM_reader( MT_4_MCU_RESET_KT_CONSTANT_CHANGE_ADDR, (uint8_t*) &aux, 2 );
 1015b38:	2202      	movs	r2, #2
 1015b3a:	4621      	mov	r1, r4
 1015b3c:	4b3a      	ldr	r3, [pc, #232]	; (1015c28 <RST_APP_vExecute_mcu_reset+0x238>)
				EEPROM_writer( MT_4_MCU_RESET_KT_CONSTANT_CHANGE_ADDR, (uint8_t*) &aux, 2 );
 1015b3e:	4d3b      	ldr	r5, [pc, #236]	; (1015c2c <RST_APP_vExecute_mcu_reset+0x23c>)
				EEPROM_reader( MT_4_MCU_RESET_KT_CONSTANT_CHANGE_ADDR, (uint8_t*) &aux, 2 );
 1015b40:	f249 202c 	movw	r0, #37420	; 0x922c
 1015b44:	4798      	blx	r3
				aux++;
 1015b46:	f8bd 300e 	ldrh.w	r3, [sp, #14]
				EEPROM_writer( MT_4_MCU_RESET_KT_CONSTANT_CHANGE_ADDR, (uint8_t*) &aux, 2 );
 1015b4a:	4621      	mov	r1, r4
				aux++;
 1015b4c:	3301      	adds	r3, #1
				EEPROM_writer( MT_4_MCU_RESET_KT_CONSTANT_CHANGE_ADDR, (uint8_t*) &aux, 2 );
 1015b4e:	2202      	movs	r2, #2
 1015b50:	f249 202c 	movw	r0, #37420	; 0x922c
				aux++;
 1015b54:	f8ad 300e 	strh.w	r3, [sp, #14]
				EEPROM_writer( MT_4_MCU_RESET_KT_CONSTANT_CHANGE_ADDR, (uint8_t*) &aux, 2 );
 1015b58:	47a8      	blx	r5
				break;
 1015b5a:	e750      	b.n	10159fe <RST_APP_vExecute_mcu_reset+0xe>
 1015b5c:	4b34      	ldr	r3, [pc, #208]	; (1015c30 <RST_APP_vExecute_mcu_reset+0x240>)
 1015b5e:	4798      	blx	r3
 1015b60:	e766      	b.n	1015a30 <RST_APP_vExecute_mcu_reset+0x40>
						aux = 0;
 1015b62:	ac04      	add	r4, sp, #16
 1015b64:	2300      	movs	r3, #0
 1015b66:	f824 3d02 	strh.w	r3, [r4, #-2]!
						EEPROM_reader( MT_4_MCU_RESET_STACK_OVERFLOW_COUNTER_ADDR, (uint8_t*) &aux, 2 );
 1015b6a:	2202      	movs	r2, #2
 1015b6c:	4621      	mov	r1, r4
 1015b6e:	4b2e      	ldr	r3, [pc, #184]	; (1015c28 <RST_APP_vExecute_mcu_reset+0x238>)
						EEPROM_writer( MT_4_MCU_RESET_STACK_OVERFLOW_COUNTER_ADDR, (uint8_t*) &aux, 2 );
 1015b70:	4d2e      	ldr	r5, [pc, #184]	; (1015c2c <RST_APP_vExecute_mcu_reset+0x23c>)
						EEPROM_reader( MT_4_MCU_RESET_STACK_OVERFLOW_COUNTER_ADDR, (uint8_t*) &aux, 2 );
 1015b72:	f249 2034 	movw	r0, #37428	; 0x9234
 1015b76:	4798      	blx	r3
						aux++;
 1015b78:	f8bd 300e 	ldrh.w	r3, [sp, #14]
						EEPROM_writer( MT_4_MCU_RESET_STACK_OVERFLOW_COUNTER_ADDR, (uint8_t*) &aux, 2 );
 1015b7c:	4621      	mov	r1, r4
						aux++;
 1015b7e:	3301      	adds	r3, #1
						EEPROM_writer( MT_4_MCU_RESET_STACK_OVERFLOW_COUNTER_ADDR, (uint8_t*) &aux, 2 );
 1015b80:	2202      	movs	r2, #2
 1015b82:	f249 2034 	movw	r0, #37428	; 0x9234
						aux++;
 1015b86:	f8ad 300e 	strh.w	r3, [sp, #14]
						EEPROM_writer( MT_4_MCU_RESET_STACK_OVERFLOW_COUNTER_ADDR, (uint8_t*) &aux, 2 );
 1015b8a:	47a8      	blx	r5
						break;
 1015b8c:	e737      	b.n	10159fe <RST_APP_vExecute_mcu_reset+0xe>
						aux = 0;
 1015b8e:	ac04      	add	r4, sp, #16
 1015b90:	2300      	movs	r3, #0
 1015b92:	f824 3d02 	strh.w	r3, [r4, #-2]!
						EEPROM_reader( MT_4_MCU_RESET_ASSERT_TRIGGERED_COUNTER_ADDR, (uint8_t*) &aux, 2 );
 1015b96:	2202      	movs	r2, #2
 1015b98:	4621      	mov	r1, r4
 1015b9a:	4b23      	ldr	r3, [pc, #140]	; (1015c28 <RST_APP_vExecute_mcu_reset+0x238>)
						EEPROM_writer( MT_4_MCU_RESET_ASSERT_TRIGGERED_COUNTER_ADDR, (uint8_t*) &aux, 2 );
 1015b9c:	4d23      	ldr	r5, [pc, #140]	; (1015c2c <RST_APP_vExecute_mcu_reset+0x23c>)
						EEPROM_reader( MT_4_MCU_RESET_ASSERT_TRIGGERED_COUNTER_ADDR, (uint8_t*) &aux, 2 );
 1015b9e:	f249 2032 	movw	r0, #37426	; 0x9232
 1015ba2:	4798      	blx	r3
						aux++;
 1015ba4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
						EEPROM_writer( MT_4_MCU_RESET_ASSERT_TRIGGERED_COUNTER_ADDR, (uint8_t*) &aux, 2 );
 1015ba8:	4621      	mov	r1, r4
						aux++;
 1015baa:	3301      	adds	r3, #1
						EEPROM_writer( MT_4_MCU_RESET_ASSERT_TRIGGERED_COUNTER_ADDR, (uint8_t*) &aux, 2 );
 1015bac:	2202      	movs	r2, #2
 1015bae:	f249 2032 	movw	r0, #37426	; 0x9232
						aux++;
 1015bb2:	f8ad 300e 	strh.w	r3, [sp, #14]
						EEPROM_writer( MT_4_MCU_RESET_ASSERT_TRIGGERED_COUNTER_ADDR, (uint8_t*) &aux, 2 );
 1015bb6:	47a8      	blx	r5
						break;
 1015bb8:	e721      	b.n	10159fe <RST_APP_vExecute_mcu_reset+0xe>
						aux = 0;
 1015bba:	ac04      	add	r4, sp, #16
 1015bbc:	2300      	movs	r3, #0
 1015bbe:	f824 3d02 	strh.w	r3, [r4, #-2]!
						EEPROM_reader( MT_4_MCU_RESET_DUMMY_HANDLER_COUNTER_ADDR, (uint8_t*) &aux, 2 );
 1015bc2:	2202      	movs	r2, #2
 1015bc4:	4621      	mov	r1, r4
 1015bc6:	4b18      	ldr	r3, [pc, #96]	; (1015c28 <RST_APP_vExecute_mcu_reset+0x238>)
						EEPROM_writer( MT_4_MCU_RESET_DUMMY_HANDLER_COUNTER_ADDR, (uint8_t*) &aux, 2 );
 1015bc8:	4d18      	ldr	r5, [pc, #96]	; (1015c2c <RST_APP_vExecute_mcu_reset+0x23c>)
						EEPROM_reader( MT_4_MCU_RESET_DUMMY_HANDLER_COUNTER_ADDR, (uint8_t*) &aux, 2 );
 1015bca:	f249 2030 	movw	r0, #37424	; 0x9230
 1015bce:	4798      	blx	r3
						aux++;
 1015bd0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
						EEPROM_writer( MT_4_MCU_RESET_DUMMY_HANDLER_COUNTER_ADDR, (uint8_t*) &aux, 2 );
 1015bd4:	4621      	mov	r1, r4
						aux++;
 1015bd6:	3301      	adds	r3, #1
						EEPROM_writer( MT_4_MCU_RESET_DUMMY_HANDLER_COUNTER_ADDR, (uint8_t*) &aux, 2 );
 1015bd8:	2202      	movs	r2, #2
 1015bda:	f249 2030 	movw	r0, #37424	; 0x9230
						aux++;
 1015bde:	f8ad 300e 	strh.w	r3, [sp, #14]
						EEPROM_writer( MT_4_MCU_RESET_DUMMY_HANDLER_COUNTER_ADDR, (uint8_t*) &aux, 2 );
 1015be2:	47a8      	blx	r5
						break;
 1015be4:	e70b      	b.n	10159fe <RST_APP_vExecute_mcu_reset+0xe>
						aux = 0;
 1015be6:	ac04      	add	r4, sp, #16
 1015be8:	2300      	movs	r3, #0
 1015bea:	f824 3d02 	strh.w	r3, [r4, #-2]!
						EEPROM_reader( MT_4_MCU_RESET_VLISTINSERT_COUNTER_ADDR, (uint8_t*) &aux, 2 );
 1015bee:	2202      	movs	r2, #2
 1015bf0:	4621      	mov	r1, r4
 1015bf2:	4b0d      	ldr	r3, [pc, #52]	; (1015c28 <RST_APP_vExecute_mcu_reset+0x238>)
						EEPROM_writer( MT_4_MCU_RESET_VLISTINSERT_COUNTER_ADDR, (uint8_t*) &aux, 2 );
 1015bf4:	4d0d      	ldr	r5, [pc, #52]	; (1015c2c <RST_APP_vExecute_mcu_reset+0x23c>)
						EEPROM_reader( MT_4_MCU_RESET_VLISTINSERT_COUNTER_ADDR, (uint8_t*) &aux, 2 );
 1015bf6:	f249 202e 	movw	r0, #37422	; 0x922e
 1015bfa:	4798      	blx	r3
						aux++;
 1015bfc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
						EEPROM_writer( MT_4_MCU_RESET_VLISTINSERT_COUNTER_ADDR, (uint8_t*) &aux, 2 );
 1015c00:	4621      	mov	r1, r4
						aux++;
 1015c02:	3301      	adds	r3, #1
						EEPROM_writer( MT_4_MCU_RESET_VLISTINSERT_COUNTER_ADDR, (uint8_t*) &aux, 2 );
 1015c04:	2202      	movs	r2, #2
 1015c06:	f249 202e 	movw	r0, #37422	; 0x922e
						aux++;
 1015c0a:	f8ad 300e 	strh.w	r3, [sp, #14]
						EEPROM_writer( MT_4_MCU_RESET_VLISTINSERT_COUNTER_ADDR, (uint8_t*) &aux, 2 );
 1015c0e:	47a8      	blx	r5
						break;
 1015c10:	e6f5      	b.n	10159fe <RST_APP_vExecute_mcu_reset+0xe>
 1015c12:	bf00      	nop
 1015c14:	20016c2c 	.word	0x20016c2c
 1015c18:	400e1400 	.word	0x400e1400
 1015c1c:	a500000d 	.word	0xa500000d
 1015c20:	0102ba8d 	.word	0x0102ba8d
 1015c24:	010159a1 	.word	0x010159a1
 1015c28:	01017511 	.word	0x01017511
 1015c2c:	01017509 	.word	0x01017509
 1015c30:	010159b9 	.word	0x010159b9

01015c34 <RST_APP_vSave_information>:
	if ( (!meter.system_state.changing_configuration) && (!meter.system_state.initialiting) ) {
 1015c34:	4b04      	ldr	r3, [pc, #16]	; (1015c48 <RST_APP_vSave_information+0x14>)
 1015c36:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 1015c3a:	b912      	cbnz	r2, 1015c42 <RST_APP_vSave_information+0xe>
 1015c3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 1015c40:	b103      	cbz	r3, 1015c44 <RST_APP_vSave_information+0x10>
 1015c42:	4770      	bx	lr
 1015c44:	4b01      	ldr	r3, [pc, #4]	; (1015c4c <RST_APP_vSave_information+0x18>)
 1015c46:	4718      	bx	r3
 1015c48:	20016c2c 	.word	0x20016c2c
 1015c4c:	010159b9 	.word	0x010159b9

01015c50 <RX8900_APP_bRead_date_time>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool RX8900_APP_bRead_date_time(uint32_t *p_second, uint32_t *p_minute, uint32_t *p_hour, uint32_t *p_day_of_week, uint32_t *p_day, uint32_t *p_month, uint32_t *p_year) {
 1015c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 1015c54:	b084      	sub	sp, #16
	
	static bool rx8900_read = false;

	uint8_t flag_reg = 0;
 1015c56:	ad04      	add	r5, sp, #16
 1015c58:	2400      	movs	r4, #0
 1015c5a:	f805 4d09 	strb.w	r4, [r5, #-9]!
bool RX8900_APP_bRead_date_time(uint32_t *p_second, uint32_t *p_minute, uint32_t *p_hour, uint32_t *p_day_of_week, uint32_t *p_day, uint32_t *p_month, uint32_t *p_year) {
 1015c5e:	4681      	mov	r9, r0
 1015c60:	4688      	mov	r8, r1
 1015c62:	4617      	mov	r7, r2

	rx8900_read = I2C_HAL_bRtc_reader(RX8900_BR_FLAG_REGISTER_ADDR, &flag_reg, 1);  
 1015c64:	4629      	mov	r1, r5
 1015c66:	2201      	movs	r2, #1
 1015c68:	200e      	movs	r0, #14
 1015c6a:	4e5e      	ldr	r6, [pc, #376]	; (1015de4 <RX8900_APP_bRead_date_time+0x194>)
 1015c6c:	4d5e      	ldr	r5, [pc, #376]	; (1015de8 <RX8900_APP_bRead_date_time+0x198>)
bool RX8900_APP_bRead_date_time(uint32_t *p_second, uint32_t *p_minute, uint32_t *p_hour, uint32_t *p_day_of_week, uint32_t *p_day, uint32_t *p_month, uint32_t *p_year) {
 1015c6e:	469a      	mov	sl, r3
	rx8900_read = I2C_HAL_bRtc_reader(RX8900_BR_FLAG_REGISTER_ADDR, &flag_reg, 1);  
 1015c70:	47b0      	blx	r6
 1015c72:	7028      	strb	r0, [r5, #0]

	if ( rx8900_read ) {
 1015c74:	b1b0      	cbz	r0, 1015ca4 <RX8900_APP_bRead_date_time+0x54>

		if ( !(flag_reg & FLAG_REGISTER_VLF_bm) ) {
 1015c76:	f89d 0007 	ldrb.w	r0, [sp, #7]
 1015c7a:	f010 0302 	ands.w	r3, r0, #2
 1015c7e:	d014      	beq.n	1015caa <RX8900_APP_bRead_date_time+0x5a>
			rx8900_read = false;
			*p_second = 0;
			*p_minute = 0;
			*p_hour = 0;
			*p_day_of_week = 0;
			*p_day = 1;
 1015c80:	990c      	ldr	r1, [sp, #48]	; 0x30
			*p_second = 0;
 1015c82:	f8c9 4000 	str.w	r4, [r9]
			*p_day = 1;
 1015c86:	2301      	movs	r3, #1
			*p_minute = 0;
 1015c88:	f8c8 4000 	str.w	r4, [r8]
			*p_hour = 0;
 1015c8c:	603c      	str	r4, [r7, #0]
			*p_day_of_week = 0;
 1015c8e:	f8ca 4000 	str.w	r4, [sl]
			*p_day = 1;
 1015c92:	600b      	str	r3, [r1, #0]
			*p_month = 1;
 1015c94:	990d      	ldr	r1, [sp, #52]	; 0x34
			rx8900_read = false;
 1015c96:	702c      	strb	r4, [r5, #0]
			*p_month = 1;
 1015c98:	600b      	str	r3, [r1, #0]
			*p_year = 2000;
 1015c9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 1015c9c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 1015ca0:	4620      	mov	r0, r4
 1015ca2:	601a      	str	r2, [r3, #0]
		}
	}

	return rx8900_read;
}
 1015ca4:	b004      	add	sp, #16
 1015ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			rx8900_read = I2C_HAL_bRtc_reader(RX8900_BR_SEC_ADDR, &date_time[0], 8);
 1015caa:	a902      	add	r1, sp, #8
 1015cac:	4618      	mov	r0, r3
 1015cae:	2208      	movs	r2, #8
			memset(&date_time, 0, sizeof(date_time));
 1015cb0:	9302      	str	r3, [sp, #8]
 1015cb2:	9303      	str	r3, [sp, #12]
			rx8900_read = I2C_HAL_bRtc_reader(RX8900_BR_SEC_ADDR, &date_time[0], 8);
 1015cb4:	47b0      	blx	r6
 1015cb6:	7028      	strb	r0, [r5, #0]
			if ( rx8900_read  ) {
 1015cb8:	2800      	cmp	r0, #0
 1015cba:	d0f3      	beq.n	1015ca4 <RX8900_APP_bRead_date_time+0x54>
				if (p_second) {
 1015cbc:	f1b9 0f00 	cmp.w	r9, #0
 1015cc0:	d009      	beq.n	1015cd6 <RX8900_APP_bRead_date_time+0x86>
					*p_second = (date_time[0] >> BCD_SHIFT) * BCD_FACTOR + (date_time[0] & BCD_MASK);
 1015cc2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 1015cc6:	220a      	movs	r2, #10
 1015cc8:	0919      	lsrs	r1, r3, #4
 1015cca:	f003 030f 	and.w	r3, r3, #15
 1015cce:	fb12 3301 	smlabb	r3, r2, r1, r3
 1015cd2:	f8c9 3000 	str.w	r3, [r9]
				if (p_minute) {
 1015cd6:	f1b8 0f00 	cmp.w	r8, #0
 1015cda:	d009      	beq.n	1015cf0 <RX8900_APP_bRead_date_time+0xa0>
					*p_minute = (date_time[1] >> BCD_SHIFT) * BCD_FACTOR + (date_time[1] & BCD_MASK);
 1015cdc:	f89d 3009 	ldrb.w	r3, [sp, #9]
 1015ce0:	220a      	movs	r2, #10
 1015ce2:	0919      	lsrs	r1, r3, #4
 1015ce4:	f003 030f 	and.w	r3, r3, #15
 1015ce8:	fb12 3301 	smlabb	r3, r2, r1, r3
 1015cec:	f8c8 3000 	str.w	r3, [r8]
				if (p_hour) {
 1015cf0:	b147      	cbz	r7, 1015d04 <RX8900_APP_bRead_date_time+0xb4>
					*p_hour = (date_time[2] >> BCD_SHIFT) * BCD_FACTOR + (date_time[2] & BCD_MASK);
 1015cf2:	f89d 300a 	ldrb.w	r3, [sp, #10]
 1015cf6:	220a      	movs	r2, #10
 1015cf8:	0919      	lsrs	r1, r3, #4
 1015cfa:	f003 030f 	and.w	r3, r3, #15
 1015cfe:	fb12 3301 	smlabb	r3, r2, r1, r3
 1015d02:	603b      	str	r3, [r7, #0]
				if (p_day_of_week) {
 1015d04:	f1ba 0f00 	cmp.w	sl, #0
 1015d08:	d029      	beq.n	1015d5e <RX8900_APP_bRead_date_time+0x10e>
					*p_day_of_week = date_time[3];
 1015d0a:	f89d 200b 	ldrb.w	r2, [sp, #11]
					switch ( date_time[3] ) {
 1015d0e:	1e53      	subs	r3, r2, #1
 1015d10:	2b3f      	cmp	r3, #63	; 0x3f
 1015d12:	d864      	bhi.n	1015dde <RX8900_APP_bRead_date_time+0x18e>
 1015d14:	e8df f003 	tbb	[pc, r3]
 1015d18:	57635b5f 	.word	0x57635b5f
 1015d1c:	53636363 	.word	0x53636363
 1015d20:	63636363 	.word	0x63636363
 1015d24:	4f636363 	.word	0x4f636363
 1015d28:	63636363 	.word	0x63636363
 1015d2c:	63636363 	.word	0x63636363
 1015d30:	63636363 	.word	0x63636363
 1015d34:	4b636363 	.word	0x4b636363
 1015d38:	63636363 	.word	0x63636363
 1015d3c:	63636363 	.word	0x63636363
 1015d40:	63636363 	.word	0x63636363
 1015d44:	63636363 	.word	0x63636363
 1015d48:	63636363 	.word	0x63636363
 1015d4c:	63636363 	.word	0x63636363
 1015d50:	63636363 	.word	0x63636363
 1015d54:	20636363 	.word	0x20636363
							*p_day_of_week = 6;
 1015d58:	2306      	movs	r3, #6
 1015d5a:	f8ca 3000 	str.w	r3, [sl]
				if (p_day) {
 1015d5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 1015d60:	b14b      	cbz	r3, 1015d76 <RX8900_APP_bRead_date_time+0x126>
					*p_day = (date_time[4] >> BCD_SHIFT) * BCD_FACTOR + (date_time[4] & BCD_MASK);
 1015d62:	f89d 300c 	ldrb.w	r3, [sp, #12]
 1015d66:	220a      	movs	r2, #10
 1015d68:	0919      	lsrs	r1, r3, #4
 1015d6a:	f003 030f 	and.w	r3, r3, #15
 1015d6e:	fb12 3301 	smlabb	r3, r2, r1, r3
 1015d72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 1015d74:	6013      	str	r3, [r2, #0]
				if (p_month) {
 1015d76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 1015d78:	b14b      	cbz	r3, 1015d8e <RX8900_APP_bRead_date_time+0x13e>
					*p_month = (date_time[5] >> BCD_SHIFT) * BCD_FACTOR + (date_time[5] & BCD_MASK);
 1015d7a:	f89d 300d 	ldrb.w	r3, [sp, #13]
 1015d7e:	220a      	movs	r2, #10
 1015d80:	0919      	lsrs	r1, r3, #4
 1015d82:	f003 030f 	and.w	r3, r3, #15
 1015d86:	fb12 3301 	smlabb	r3, r2, r1, r3
 1015d8a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 1015d8c:	6013      	str	r3, [r2, #0]
				if (p_year) {
 1015d8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 1015d90:	2b00      	cmp	r3, #0
 1015d92:	d087      	beq.n	1015ca4 <RX8900_APP_bRead_date_time+0x54>
					*p_year = (date_time[6] >> BCD_SHIFT) * BCD_FACTOR + (date_time[6] & BCD_MASK) + 2000;
 1015d94:	f89d 300e 	ldrb.w	r3, [sp, #14]
 1015d98:	f003 010f 	and.w	r1, r3, #15
 1015d9c:	220a      	movs	r2, #10
 1015d9e:	f501 61fa 	add.w	r1, r1, #2000	; 0x7d0
 1015da2:	091b      	lsrs	r3, r3, #4
 1015da4:	fb12 1303 	smlabb	r3, r2, r3, r1
 1015da8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 1015daa:	6013      	str	r3, [r2, #0]
 1015dac:	e77a      	b.n	1015ca4 <RX8900_APP_bRead_date_time+0x54>
							*p_day_of_week = 5;
 1015dae:	2305      	movs	r3, #5
 1015db0:	f8ca 3000 	str.w	r3, [sl]
							break;
 1015db4:	e7d3      	b.n	1015d5e <RX8900_APP_bRead_date_time+0x10e>
							*p_day_of_week = 4;
 1015db6:	2304      	movs	r3, #4
 1015db8:	f8ca 3000 	str.w	r3, [sl]
							break;
 1015dbc:	e7cf      	b.n	1015d5e <RX8900_APP_bRead_date_time+0x10e>
							*p_day_of_week = 3;
 1015dbe:	2303      	movs	r3, #3
 1015dc0:	f8ca 3000 	str.w	r3, [sl]
							break;
 1015dc4:	e7cb      	b.n	1015d5e <RX8900_APP_bRead_date_time+0x10e>
							*p_day_of_week = 2;
 1015dc6:	2302      	movs	r3, #2
 1015dc8:	f8ca 3000 	str.w	r3, [sl]
							break;
 1015dcc:	e7c7      	b.n	1015d5e <RX8900_APP_bRead_date_time+0x10e>
							*p_day_of_week = 1;
 1015dce:	2301      	movs	r3, #1
 1015dd0:	f8ca 3000 	str.w	r3, [sl]
							break;
 1015dd4:	e7c3      	b.n	1015d5e <RX8900_APP_bRead_date_time+0x10e>
							*p_day_of_week = 0;
 1015dd6:	2300      	movs	r3, #0
 1015dd8:	f8ca 3000 	str.w	r3, [sl]
							break;
 1015ddc:	e7bf      	b.n	1015d5e <RX8900_APP_bRead_date_time+0x10e>
					*p_day_of_week = date_time[3];
 1015dde:	f8ca 2000 	str.w	r2, [sl]
 1015de2:	e7bc      	b.n	1015d5e <RX8900_APP_bRead_date_time+0x10e>
 1015de4:	01015905 	.word	0x01015905
 1015de8:	200009f8 	.word	0x200009f8

01015dec <RX8900_APP_bWrite_date_time>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool RX8900_APP_bWrite_date_time(uint32_t second, uint32_t minute, uint32_t hour, uint32_t day_of_week, uint32_t day, uint32_t month, uint32_t year) {
 1015dec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 1015df0:	b085      	sub	sp, #20
	static bool rx8900_write = false;

	uint8_t flag_reg = 0;
	uint8_t time_mask_ok = 0;
	uint8_t date_time[8];
	memset(&date_time, 0, sizeof(date_time));
 1015df2:	2600      	movs	r6, #0
	
	/* Second */
	if ( second < 60 ) {
 1015df4:	283b      	cmp	r0, #59	; 0x3b
	memset(&date_time, 0, sizeof(date_time));
 1015df6:	9603      	str	r6, [sp, #12]
 1015df8:	9602      	str	r6, [sp, #8]
bool RX8900_APP_bWrite_date_time(uint32_t second, uint32_t minute, uint32_t hour, uint32_t day_of_week, uint32_t day, uint32_t month, uint32_t year) {
 1015dfa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 1015dfc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	if ( second < 60 ) {
 1015dfe:	d873      	bhi.n	1015ee8 <RX8900_APP_bWrite_date_time+0xfc>
		date_time[0] = ( (second / BCD_FACTOR) << 4 ) | ( (second % BCD_FACTOR) << 0 );
 1015e00:	f1a6 3633 	sub.w	r6, r6, #858993459	; 0x33333333
 1015e04:	fba6 7600 	umull	r7, r6, r6, r0
 1015e08:	08f6      	lsrs	r6, r6, #3
 1015e0a:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 1015e0e:	eba0 0047 	sub.w	r0, r0, r7, lsl #1
 1015e12:	ea40 1006 	orr.w	r0, r0, r6, lsl #4
 1015e16:	f88d 0008 	strb.w	r0, [sp, #8]
		time_mask_ok |= 0x01;
 1015e1a:	2001      	movs	r0, #1
	}
	
	/* Minute */
	if ( minute < 60 ) {
 1015e1c:	293b      	cmp	r1, #59	; 0x3b
 1015e1e:	d80d      	bhi.n	1015e3c <RX8900_APP_bWrite_date_time+0x50>
		date_time[1] = ( (minute / BCD_FACTOR) << 4 ) | ( (minute % BCD_FACTOR) << 0 );
 1015e20:	4e66      	ldr	r6, [pc, #408]	; (1015fbc <RX8900_APP_bWrite_date_time+0x1d0>)
 1015e22:	fba6 7601 	umull	r7, r6, r6, r1
 1015e26:	08f6      	lsrs	r6, r6, #3
 1015e28:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 1015e2c:	eba1 0147 	sub.w	r1, r1, r7, lsl #1
 1015e30:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
		time_mask_ok |= 0x02;
 1015e34:	f040 0002 	orr.w	r0, r0, #2
		date_time[1] = ( (minute / BCD_FACTOR) << 4 ) | ( (minute % BCD_FACTOR) << 0 );
 1015e38:	f88d 1009 	strb.w	r1, [sp, #9]
	}

	/* Hour */
	if ( hour < 24 ) {
 1015e3c:	2a17      	cmp	r2, #23
 1015e3e:	d80d      	bhi.n	1015e5c <RX8900_APP_bWrite_date_time+0x70>
		date_time[2] = ( (hour / BCD_FACTOR) << 4 ) | ( (hour % BCD_FACTOR) << 0 );
 1015e40:	495e      	ldr	r1, [pc, #376]	; (1015fbc <RX8900_APP_bWrite_date_time+0x1d0>)
 1015e42:	fba1 6102 	umull	r6, r1, r1, r2
 1015e46:	08c9      	lsrs	r1, r1, #3
 1015e48:	eb01 0681 	add.w	r6, r1, r1, lsl #2
 1015e4c:	eba2 0246 	sub.w	r2, r2, r6, lsl #1
 1015e50:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
		time_mask_ok |= 0x04;
 1015e54:	f040 0004 	orr.w	r0, r0, #4
		date_time[2] = ( (hour / BCD_FACTOR) << 4 ) | ( (hour % BCD_FACTOR) << 0 );
 1015e58:	f88d 200a 	strb.w	r2, [sp, #10]
	}
	
	/* Day of Week */
	if ( day_of_week < 7 ) {
 1015e5c:	2b06      	cmp	r3, #6
 1015e5e:	d806      	bhi.n	1015e6e <RX8900_APP_bWrite_date_time+0x82>
		date_time[3] = 1 << day_of_week;
 1015e60:	2201      	movs	r2, #1
 1015e62:	fa02 f303 	lsl.w	r3, r2, r3
		time_mask_ok |= 0x08;
 1015e66:	f040 0008 	orr.w	r0, r0, #8
		date_time[3] = 1 << day_of_week;
 1015e6a:	f88d 300b 	strb.w	r3, [sp, #11]
 1015e6e:	2d0c      	cmp	r5, #12
 1015e70:	d80f      	bhi.n	1015e92 <RX8900_APP_bWrite_date_time+0xa6>
 1015e72:	2301      	movs	r3, #1
 1015e74:	40ab      	lsls	r3, r5
 1015e76:	f241 52aa 	movw	r2, #5546	; 0x15aa
 1015e7a:	4213      	tst	r3, r2
 1015e7c:	d136      	bne.n	1015eec <RX8900_APP_bWrite_date_time+0x100>
 1015e7e:	f413 6f25 	tst.w	r3, #2640	; 0xa50
 1015e82:	d17a      	bne.n	1015f7a <RX8900_APP_bWrite_date_time+0x18e>
 1015e84:	075e      	lsls	r6, r3, #29
 1015e86:	d504      	bpl.n	1015e92 <RX8900_APP_bWrite_date_time+0xa6>
			}
			break;

		case 2:
			
			if ( (year > 2000) && (year < 2099) ) {
 1015e88:	f46f 61fa 	mvn.w	r1, #2000	; 0x7d0
 1015e8c:	1863      	adds	r3, r4, r1
 1015e8e:	2b61      	cmp	r3, #97	; 0x61
 1015e90:	d977      	bls.n	1015f82 <RX8900_APP_bWrite_date_time+0x196>
		default:
			break;
	}
	
	/* Month */
	if ( (month > 0) && (month < 13) ) {
 1015e92:	1e6b      	subs	r3, r5, #1
 1015e94:	2b0b      	cmp	r3, #11
 1015e96:	d80d      	bhi.n	1015eb4 <RX8900_APP_bWrite_date_time+0xc8>
		date_time[5] = ( (month / BCD_FACTOR) << 4 ) | ( (month % BCD_FACTOR) << 0 );
 1015e98:	4b48      	ldr	r3, [pc, #288]	; (1015fbc <RX8900_APP_bWrite_date_time+0x1d0>)
 1015e9a:	fba3 2305 	umull	r2, r3, r3, r5
 1015e9e:	08db      	lsrs	r3, r3, #3
 1015ea0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 1015ea4:	eba5 0542 	sub.w	r5, r5, r2, lsl #1
 1015ea8:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
		time_mask_ok |= 0x20;
 1015eac:	f040 0020 	orr.w	r0, r0, #32
		date_time[5] = ( (month / BCD_FACTOR) << 4 ) | ( (month % BCD_FACTOR) << 0 );
 1015eb0:	f88d 500d 	strb.w	r5, [sp, #13]
	}
	
	/* Year */
	if ( (year >= 2000) && (year <= 2099) ) {
 1015eb4:	f5a4 63fa 	sub.w	r3, r4, #2000	; 0x7d0
 1015eb8:	2b63      	cmp	r3, #99	; 0x63
 1015eba:	d80f      	bhi.n	1015edc <RX8900_APP_bWrite_date_time+0xf0>
		year -= 2000;
		date_time[6] = ( (year / BCD_FACTOR) << 4 ) | ( (year % BCD_FACTOR) << 0 );
 1015ebc:	4a3f      	ldr	r2, [pc, #252]	; (1015fbc <RX8900_APP_bWrite_date_time+0x1d0>)
 1015ebe:	fba2 1203 	umull	r1, r2, r2, r3
 1015ec2:	08d2      	lsrs	r2, r2, #3
 1015ec4:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 1015ec8:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
		time_mask_ok |= 0x40;
	}
	
	if ( time_mask_ok == 0x7F ) {
 1015ecc:	f040 0040 	orr.w	r0, r0, #64	; 0x40
		date_time[6] = ( (year / BCD_FACTOR) << 4 ) | ( (year % BCD_FACTOR) << 0 );
 1015ed0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
	if ( time_mask_ok == 0x7F ) {
 1015ed4:	287f      	cmp	r0, #127	; 0x7f
		date_time[6] = ( (year / BCD_FACTOR) << 4 ) | ( (year % BCD_FACTOR) << 0 );
 1015ed6:	f88d 300e 	strb.w	r3, [sp, #14]
	if ( time_mask_ok == 0x7F ) {
 1015eda:	d01b      	beq.n	1015f14 <RX8900_APP_bWrite_date_time+0x128>
 1015edc:	4b38      	ldr	r3, [pc, #224]	; (1015fc0 <RX8900_APP_bWrite_date_time+0x1d4>)
 1015ede:	781c      	ldrb	r4, [r3, #0]
			}
		}
	}

	return rx8900_write;
}
 1015ee0:	4620      	mov	r0, r4
 1015ee2:	b005      	add	sp, #20
 1015ee4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t time_mask_ok = 0;
 1015ee8:	4630      	mov	r0, r6
 1015eea:	e797      	b.n	1015e1c <RX8900_APP_bWrite_date_time+0x30>
			if ( day <= 31 ) {
 1015eec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 1015eee:	2b1f      	cmp	r3, #31
 1015ef0:	d8cf      	bhi.n	1015e92 <RX8900_APP_bWrite_date_time+0xa6>
						date_time[4] = ( (day / BCD_FACTOR) << 4 ) | ( (day % BCD_FACTOR) << 0 );
 1015ef2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 1015ef4:	4b31      	ldr	r3, [pc, #196]	; (1015fbc <RX8900_APP_bWrite_date_time+0x1d0>)
 1015ef6:	990c      	ldr	r1, [sp, #48]	; 0x30
 1015ef8:	fba3 2302 	umull	r2, r3, r3, r2
 1015efc:	08db      	lsrs	r3, r3, #3
 1015efe:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 1015f02:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
 1015f06:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
						time_mask_ok |= 0x10;
 1015f0a:	f040 0010 	orr.w	r0, r0, #16
						date_time[4] = ( (day / BCD_FACTOR) << 4 ) | ( (day % BCD_FACTOR) << 0 );
 1015f0e:	f88d 300c 	strb.w	r3, [sp, #12]
 1015f12:	e7be      	b.n	1015e92 <RX8900_APP_bWrite_date_time+0xa6>
		rx8900_write = I2C_HAL_bRtc_writer(RX8900_BR_SEC_ADDR, &date_time[0], 7);
 1015f14:	2207      	movs	r2, #7
 1015f16:	a902      	add	r1, sp, #8
 1015f18:	2000      	movs	r0, #0
 1015f1a:	4e2a      	ldr	r6, [pc, #168]	; (1015fc4 <RX8900_APP_bWrite_date_time+0x1d8>)
 1015f1c:	4d28      	ldr	r5, [pc, #160]	; (1015fc0 <RX8900_APP_bWrite_date_time+0x1d4>)
 1015f1e:	47b0      	blx	r6
 1015f20:	4604      	mov	r4, r0
 1015f22:	7028      	strb	r0, [r5, #0]
		if ( rx8900_write ) {
 1015f24:	2800      	cmp	r0, #0
 1015f26:	d0db      	beq.n	1015ee0 <RX8900_APP_bWrite_date_time+0xf4>
				uint8_t flag_reg = 0xFF;
 1015f28:	af04      	add	r7, sp, #16
			I2C_HAL_bRtc_reader(RX8900_BR_SEC_ADDR, &date_time[0], 7);
 1015f2a:	f8df 809c 	ldr.w	r8, [pc, #156]	; 1015fc8 <RX8900_APP_bWrite_date_time+0x1dc>
 1015f2e:	a902      	add	r1, sp, #8
 1015f30:	2207      	movs	r2, #7
				uint8_t flag_reg = 0xFF;
 1015f32:	f04f 09ff 	mov.w	r9, #255	; 0xff
			I2C_HAL_bRtc_reader(RX8900_BR_SEC_ADDR, &date_time[0], 7);
 1015f36:	2000      	movs	r0, #0
 1015f38:	47c0      	blx	r8
				uint8_t flag_reg = 0xFF;
 1015f3a:	f807 9d09 	strb.w	r9, [r7, #-9]!
				rx8900_write = false;
 1015f3e:	2300      	movs	r3, #0
				I2C_HAL_bRtc_reader(RX8900_BR_FLAG_REGISTER_ADDR, &flag_reg, 1);
 1015f40:	4639      	mov	r1, r7
 1015f42:	2201      	movs	r2, #1
 1015f44:	200e      	movs	r0, #14
				rx8900_write = false;
 1015f46:	702b      	strb	r3, [r5, #0]
				I2C_HAL_bRtc_reader(RX8900_BR_FLAG_REGISTER_ADDR, &flag_reg, 1);
 1015f48:	47c0      	blx	r8
				flag_reg &= ~FLAG_REGISTER_VLF_bm;
 1015f4a:	f89d 3007 	ldrb.w	r3, [sp, #7]
				I2C_HAL_bRtc_writer(RX8900_BR_FLAG_REGISTER_ADDR, &flag_reg, 1);
 1015f4e:	4639      	mov	r1, r7
				flag_reg &= ~FLAG_REGISTER_VLF_bm;
 1015f50:	f023 0302 	bic.w	r3, r3, #2
				I2C_HAL_bRtc_writer(RX8900_BR_FLAG_REGISTER_ADDR, &flag_reg, 1);
 1015f54:	2201      	movs	r2, #1
 1015f56:	200e      	movs	r0, #14
				flag_reg &= ~FLAG_REGISTER_VLF_bm;
 1015f58:	f88d 3007 	strb.w	r3, [sp, #7]
				I2C_HAL_bRtc_writer(RX8900_BR_FLAG_REGISTER_ADDR, &flag_reg, 1);
 1015f5c:	47b0      	blx	r6
				I2C_HAL_bRtc_reader(RX8900_BR_FLAG_REGISTER_ADDR, &flag_reg, 1);
 1015f5e:	4639      	mov	r1, r7
 1015f60:	2201      	movs	r2, #1
 1015f62:	200e      	movs	r0, #14
				flag_reg = 0xFF;
 1015f64:	f88d 9007 	strb.w	r9, [sp, #7]
				I2C_HAL_bRtc_reader(RX8900_BR_FLAG_REGISTER_ADDR, &flag_reg, 1);
 1015f68:	47c0      	blx	r8
				if ( !(flag_reg & FLAG_REGISTER_VLF_bm) ) {
 1015f6a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 1015f6e:	079b      	lsls	r3, r3, #30
					rx8900_write = true;
 1015f70:	bf56      	itet	pl
 1015f72:	2301      	movpl	r3, #1
 1015f74:	782c      	ldrbmi	r4, [r5, #0]
 1015f76:	702b      	strbpl	r3, [r5, #0]
 1015f78:	e7b2      	b.n	1015ee0 <RX8900_APP_bWrite_date_time+0xf4>
			if ( day <= 30 ) {
 1015f7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 1015f7c:	2b1e      	cmp	r3, #30
 1015f7e:	d888      	bhi.n	1015e92 <RX8900_APP_bWrite_date_time+0xa6>
 1015f80:	e7b7      	b.n	1015ef2 <RX8900_APP_bWrite_date_time+0x106>
				year -= 2000;
 1015f82:	f5a4 64fa 	sub.w	r4, r4, #2000	; 0x7d0
				if ( (year % 4) == 0 ) {
 1015f86:	07a2      	lsls	r2, r4, #30
					if ( day <= 29 ) {
 1015f88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
				if ( (year % 4) == 0 ) {
 1015f8a:	d102      	bne.n	1015f92 <RX8900_APP_bWrite_date_time+0x1a6>
					if ( day <= 29 ) {
 1015f8c:	2b1d      	cmp	r3, #29
 1015f8e:	d880      	bhi.n	1015e92 <RX8900_APP_bWrite_date_time+0xa6>
 1015f90:	e7af      	b.n	1015ef2 <RX8900_APP_bWrite_date_time+0x106>
					if ( day <= 28 ) {
 1015f92:	2b1c      	cmp	r3, #28
 1015f94:	f63f af7d 	bhi.w	1015e92 <RX8900_APP_bWrite_date_time+0xa6>
						date_time[4] = ( (day / BCD_FACTOR) << 4 ) | ( (day % BCD_FACTOR) << 0 );
 1015f98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 1015f9a:	4b08      	ldr	r3, [pc, #32]	; (1015fbc <RX8900_APP_bWrite_date_time+0x1d0>)
 1015f9c:	990c      	ldr	r1, [sp, #48]	; 0x30
 1015f9e:	fba3 2302 	umull	r2, r3, r3, r2
 1015fa2:	08da      	lsrs	r2, r3, #3
 1015fa4:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 1015fa8:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
 1015fac:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
						time_mask_ok |= 0x10;
 1015fb0:	f040 0010 	orr.w	r0, r0, #16
						date_time[4] = ( (day / BCD_FACTOR) << 4 ) | ( (day % BCD_FACTOR) << 0 );
 1015fb4:	f88d 300c 	strb.w	r3, [sp, #12]
 1015fb8:	e76b      	b.n	1015e92 <RX8900_APP_bWrite_date_time+0xa6>
 1015fba:	bf00      	nop
 1015fbc:	cccccccd 	.word	0xcccccccd
 1015fc0:	200009f9 	.word	0x200009f9
 1015fc4:	010157a5 	.word	0x010157a5
 1015fc8:	01015905 	.word	0x01015905

01015fcc <RX8900_APP_ucDisable_vdd_monitor_pmos_sw_off>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool RX8900_APP_ucDisable_vdd_monitor_pmos_sw_off(void) {
 1015fcc:	b500      	push	{lr}
 1015fce:	b083      	sub	sp, #12
	uint8_t bkup_reg = 0;

	bkup_reg |= (uint8_t)(0 << BACKUP_REGISTER_BKSMP0_bp);
	bkup_reg |= (uint8_t)(0 << BACKUP_REGISTER_BKSMP1_bp);
	bkup_reg |= (uint8_t)(1 << BACKUP_REGISTER_SWOFF_bp);
	bkup_reg |= (uint8_t)(1 << BACKUP_REGISTER_VDETOFF_bp);
 1015fd0:	a902      	add	r1, sp, #8
 1015fd2:	230c      	movs	r3, #12
 1015fd4:	f801 3d01 	strb.w	r3, [r1, #-1]!

	return I2C_HAL_bRtc_writer(RX8900_ER_BACKUP_FUNTION_ADDR, &bkup_reg, 1);
 1015fd8:	2201      	movs	r2, #1
 1015fda:	4b03      	ldr	r3, [pc, #12]	; (1015fe8 <RX8900_APP_ucDisable_vdd_monitor_pmos_sw_off+0x1c>)
 1015fdc:	2018      	movs	r0, #24
 1015fde:	4798      	blx	r3
}
 1015fe0:	b003      	add	sp, #12
 1015fe2:	f85d fb04 	ldr.w	pc, [sp], #4
 1015fe6:	bf00      	nop
 1015fe8:	010157a5 	.word	0x010157a5

01015fec <WATCHDOG_HAL_vInitialize>:
void WATCHDOG_HAL_vInitialize(void) {
	
	uint32_t wdt_mode, timeout_value;

	/* Get timeout value. */
	timeout_value = wdt_get_timeout_value(WATCHDOG_TIMEOUT_PERIOD, BOARD_FREQ_SLCK_XTAL);
 1015fec:	4b0d      	ldr	r3, [pc, #52]	; (1016024 <WATCHDOG_HAL_vInitialize+0x38>)
 1015fee:	480e      	ldr	r0, [pc, #56]	; (1016028 <WATCHDOG_HAL_vInitialize+0x3c>)
void WATCHDOG_HAL_vInitialize(void) {
 1015ff0:	b510      	push	{r4, lr}
	timeout_value = wdt_get_timeout_value(WATCHDOG_TIMEOUT_PERIOD, BOARD_FREQ_SLCK_XTAL);
 1015ff2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 1015ff6:	4798      	blx	r3
	
	if (timeout_value == WDT_INVALID_ARGUMENT) {
 1015ff8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 1015ffc:	4298      	cmp	r0, r3
 1015ffe:	d100      	bne.n	1016002 <WATCHDOG_HAL_vInitialize+0x16>
 1016000:	e7fe      	b.n	1016000 <WATCHDOG_HAL_vInitialize+0x14>
				WDT_MR_WDRPROC		|  /* WDT fault resets processor only. */
				WDT_MR_WDDBGHLT		|  /* WDT stops in debug state. */
				WDT_MR_WDIDLEHLT	;  /* WDT stops in idle state. */
				
	/* Initialize WDT with the given parameters. */
	wdt_init(WDT, wdt_mode, timeout_value, timeout_value);
 1016002:	b283      	uxth	r3, r0
 1016004:	461a      	mov	r2, r3
 1016006:	4909      	ldr	r1, [pc, #36]	; (101602c <WATCHDOG_HAL_vInitialize+0x40>)
 1016008:	4809      	ldr	r0, [pc, #36]	; (1016030 <WATCHDOG_HAL_vInitialize+0x44>)
 101600a:	4c0a      	ldr	r4, [pc, #40]	; (1016034 <WATCHDOG_HAL_vInitialize+0x48>)
 101600c:	47a0      	blx	r4

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 101600e:	4b0a      	ldr	r3, [pc, #40]	; (1016038 <WATCHDOG_HAL_vInitialize+0x4c>)
 1016010:	2210      	movs	r2, #16
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 1016012:	2100      	movs	r1, #0
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 1016014:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 1016018:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 101601c:	f883 1304 	strb.w	r1, [r3, #772]	; 0x304
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 1016020:	601a      	str	r2, [r3, #0]
 1016022:	bd10      	pop	{r4, pc}
 1016024:	0102d949 	.word	0x0102d949
 1016028:	004c4b40 	.word	0x004c4b40
 101602c:	30005000 	.word	0x30005000
 1016030:	400e1450 	.word	0x400e1450
 1016034:	0102d971 	.word	0x0102d971
 1016038:	e000e100 	.word	0xe000e100

0101603c <WATCHDOG_APP_vRestart>:
 * \retval
 ******************************************************************************
 */
void WATCHDOG_HAL_vRestart(void) {
	
	wdt_restart(WDT);
 101603c:	4801      	ldr	r0, [pc, #4]	; (1016044 <WATCHDOG_APP_vRestart+0x8>)
 101603e:	4b02      	ldr	r3, [pc, #8]	; (1016048 <WATCHDOG_APP_vRestart+0xc>)
 1016040:	4718      	bx	r3
 1016042:	bf00      	nop
 1016044:	400e1450 	.word	0x400e1450
 1016048:	0102d98d 	.word	0x0102d98d

0101604c <WATCHDOG_APP_vHandler>:
 * \param 
 *	Pointer
 * \retval
 ******************************************************************************
 */
void WATCHDOG_APP_vHandler(void) {
 101604c:	b510      	push	{r4, lr}
	return wdt_get_status(WDT);
 101604e:	4b0e      	ldr	r3, [pc, #56]	; (1016088 <WATCHDOG_APP_vHandler+0x3c>)
 1016050:	480e      	ldr	r0, [pc, #56]	; (101608c <WATCHDOG_APP_vHandler+0x40>)
	
	static uint32_t wtd_status;

	/* Clear status bit to acknowledge interrupt by dummy read. */
	wtd_status = WATCHDOG_HAL_ulGet_status();
 1016052:	4c0f      	ldr	r4, [pc, #60]	; (1016090 <WATCHDOG_APP_vHandler+0x44>)
void WATCHDOG_APP_vHandler(void) {
 1016054:	b082      	sub	sp, #8
	return wdt_get_status(WDT);
 1016056:	4798      	blx	r3
	wdt_restart(WDT);
 1016058:	4b0e      	ldr	r3, [pc, #56]	; (1016094 <WATCHDOG_APP_vHandler+0x48>)
	wtd_status = WATCHDOG_HAL_ulGet_status();
 101605a:	6020      	str	r0, [r4, #0]
	wdt_restart(WDT);
 101605c:	480b      	ldr	r0, [pc, #44]	; (101608c <WATCHDOG_APP_vHandler+0x40>)
 101605e:	4798      	blx	r3
	
	/* Restart the WDT counter. */
	WATCHDOG_APP_vRestart();
	
	if ( (wtd_status & RSWDT_SR_WDUNF) == RSWDT_SR_WDUNF )
 1016060:	6823      	ldr	r3, [r4, #0]
 1016062:	07db      	lsls	r3, r3, #31
 1016064:	d50e      	bpl.n	1016084 <WATCHDOG_APP_vHandler+0x38>
  __ASM volatile ("cpsid i");
 1016066:	b672      	cpsid	i
  __ASM volatile ("dmb");
 1016068:	f3bf 8f5f 	dmb	sy
	{
		Disable_global_interrupt();
		SYSTEM_RESTART_TYPE mcu;
		mcu.restart_cause = WATCH_DOG;
 101606c:	2202      	movs	r2, #2
		mcu.save_information = true;
 101606e:	2301      	movs	r3, #1
		mcu.restart_cause = WATCH_DOG;
 1016070:	f88d 2005 	strb.w	r2, [sp, #5]
		mcu.save_information = true;
 1016074:	f88d 3004 	strb.w	r3, [sp, #4]
		Disable_global_interrupt();
 1016078:	4a07      	ldr	r2, [pc, #28]	; (1016098 <WATCHDOG_APP_vHandler+0x4c>)
		RST_APP_vExecute_mcu_reset(mcu);
 101607a:	9801      	ldr	r0, [sp, #4]
 101607c:	4b07      	ldr	r3, [pc, #28]	; (101609c <WATCHDOG_APP_vHandler+0x50>)
		Disable_global_interrupt();
 101607e:	2100      	movs	r1, #0
 1016080:	7011      	strb	r1, [r2, #0]
		RST_APP_vExecute_mcu_reset(mcu);
 1016082:	4798      	blx	r3
	}
}
 1016084:	b002      	add	sp, #8
 1016086:	bd10      	pop	{r4, pc}
 1016088:	0102d9a9 	.word	0x0102d9a9
 101608c:	400e1450 	.word	0x400e1450
 1016090:	200009fc 	.word	0x200009fc
 1016094:	0102d98d 	.word	0x0102d98d
 1016098:	2000008d 	.word	0x2000008d
 101609c:	010159f1 	.word	0x010159f1

010160a0 <WDT_Handler>:
 * \retval
 ******************************************************************************
 */
void WDT_Handler(void) {
	
	WATCHDOG_APP_vHandler();
 10160a0:	4b00      	ldr	r3, [pc, #0]	; (10160a4 <WDT_Handler+0x4>)
 10160a2:	4718      	bx	r3
 10160a4:	0101604d 	.word	0x0101604d

010160a8 <rtc_set_hour_mode>:
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
 10160a8:	6843      	ldr	r3, [r0, #4]
	if (ul_mode) {
 10160aa:	b919      	cbnz	r1, 10160b4 <rtc_set_hour_mode+0xc>
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
 10160ac:	f023 0301 	bic.w	r3, r3, #1
 10160b0:	6043      	str	r3, [r0, #4]
 10160b2:	4770      	bx	lr
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
 10160b4:	f043 0301 	orr.w	r3, r3, #1
 10160b8:	6043      	str	r3, [r0, #4]
 10160ba:	4770      	bx	lr

010160bc <rtc_enable_interrupt>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtc_enable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
	p_rtc->RTC_IER = ul_sources;
 10160bc:	6201      	str	r1, [r0, #32]
 10160be:	4770      	bx	lr

010160c0 <rtc_disable_interrupt>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be disabled.
 */
void rtc_disable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
	p_rtc->RTC_IDR = ul_sources;
 10160c0:	6241      	str	r1, [r0, #36]	; 0x24
 10160c2:	4770      	bx	lr

010160c4 <rtc_get_status>:
 *
 * \return Status of the RTC.
 */
uint32_t rtc_get_status(Rtc *p_rtc)
{
	return (p_rtc->RTC_SR);
 10160c4:	6980      	ldr	r0, [r0, #24]
}
 10160c6:	4770      	bx	lr

010160c8 <rtc_clear_status>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_clear Some flag bits which will be cleared.
 */
void rtc_clear_status(Rtc *p_rtc, uint32_t ul_clear)
{
	p_rtc->RTC_SCCR = ul_clear;
 10160c8:	61c1      	str	r1, [r0, #28]
 10160ca:	4770      	bx	lr

010160cc <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
 10160cc:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
 10160ce:	23ac      	movs	r3, #172	; 0xac
 10160d0:	6003      	str	r3, [r0, #0]
{
 10160d2:	4602      	mov	r2, r0
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
 10160d4:	680b      	ldr	r3, [r1, #0]
 10160d6:	6848      	ldr	r0, [r1, #4]
 10160d8:	fbb3 f3f0 	udiv	r3, r3, r0
 10160dc:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
 10160de:	1e5c      	subs	r4, r3, #1
 10160e0:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 10160e4:	4284      	cmp	r4, r0
 10160e6:	d80b      	bhi.n	1016100 <uart_init+0x34>
		return 1;

	p_uart->UART_BRGR = cd;
 10160e8:	6213      	str	r3, [r2, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
 10160ea:	688b      	ldr	r3, [r1, #8]
 10160ec:	6053      	str	r3, [r2, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
 10160ee:	f240 2102 	movw	r1, #514	; 0x202

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
 10160f2:	2350      	movs	r3, #80	; 0x50
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
 10160f4:	f8c2 1120 	str.w	r1, [r2, #288]	; 0x120
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
 10160f8:	6013      	str	r3, [r2, #0]

	return 0;
 10160fa:	2000      	movs	r0, #0
}
 10160fc:	bc10      	pop	{r4}
 10160fe:	4770      	bx	lr
		return 1;
 1016100:	2001      	movs	r0, #1
}
 1016102:	bc10      	pop	{r4}
 1016104:	4770      	bx	lr
 1016106:	bf00      	nop

01016108 <uart_enable>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable(Uart *p_uart)
{
	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
 1016108:	2350      	movs	r3, #80	; 0x50
 101610a:	6003      	str	r3, [r0, #0]
 101610c:	4770      	bx	lr
 101610e:	bf00      	nop

01016110 <uart_enable_interrupt>:
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be enabled.
 */
void uart_enable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
	p_uart->UART_IER = ul_sources;
 1016110:	6081      	str	r1, [r0, #8]
 1016112:	4770      	bx	lr

01016114 <uart_get_status>:
 *
 * \return The current UART status.
 */
uint32_t uart_get_status(Uart *p_uart)
{
	return p_uart->UART_SR;
 1016114:	6940      	ldr	r0, [r0, #20]
}
 1016116:	4770      	bx	lr

01016118 <uart_get_pdc_base>:
#else
#error "Unsupported device"
#endif

#if (SAM3S || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	if (p_uart == UART1)
 1016118:	4903      	ldr	r1, [pc, #12]	; (1016128 <uart_get_pdc_base+0x10>)
		p_pdc_base = PDC_UART1;
 101611a:	4a04      	ldr	r2, [pc, #16]	; (101612c <uart_get_pdc_base+0x14>)
 101611c:	4b04      	ldr	r3, [pc, #16]	; (1016130 <uart_get_pdc_base+0x18>)
	if (p_uart == UART2)
		p_pdc_base = PDC_UART2;
#endif

	return p_pdc_base;
}
 101611e:	4288      	cmp	r0, r1
 1016120:	bf14      	ite	ne
 1016122:	4610      	movne	r0, r2
 1016124:	4618      	moveq	r0, r3
 1016126:	4770      	bx	lr
 1016128:	48004000 	.word	0x48004000
 101612c:	400e0700 	.word	0x400e0700
 1016130:	48004100 	.word	0x48004100

01016134 <C1218_send_response.part.0>:
 * \param *c1218
 *	Pointer to ram memory location where packet is stored.
 * \retval void
 ******************************************************************************
 */
void C1218_send_response(C1218_DLL_TYPE *c1218)
 1016134:	b538      	push	{r3, r4, r5, lr}
		c1218->tx_eop = false;
		c1218->tx_buffer_bytes = 0;
		
		c1218->tx_buffer[C1218_STP_INDEX] = C1218_STP;
		c1218->tx_buffer[C1218_IDENTITY_INDEX] = c1218->rx_buffer[C1218_IDENTITY_INDEX];
		c1218->tx_buffer[C1218_CTRL_INDEX] = (c1218->tx_buffer[C1218_CTRL_INDEX] & 0b00100000) ^ 0b00100000;
 1016136:	f890 10ca 	ldrb.w	r1, [r0, #202]	; 0xca
		c1218->tx_buffer[C1218_SEQ_NBR_INDEX] = 0;
		c1218->tx_data_bytes_remaining = c1218->tx_data_length;
 101613a:	f8b0 30c0 	ldrh.w	r3, [r0, #192]	; 0xc0
void C1218_send_response(C1218_DLL_TYPE *c1218)
 101613e:	4604      	mov	r4, r0
		c1218->interrupt_context = true;
 1016140:	2201      	movs	r2, #1
		c1218->tx_buffer[C1218_CTRL_INDEX] = (c1218->tx_buffer[C1218_CTRL_INDEX] & 0b00100000) ^ 0b00100000;
 1016142:	43c9      	mvns	r1, r1
		c1218->tx_buffer[C1218_IDENTITY_INDEX] = c1218->rx_buffer[C1218_IDENTITY_INDEX];
 1016144:	7d40      	ldrb	r0, [r0, #21]
		c1218->interrupt_context = true;
 1016146:	f884 2209 	strb.w	r2, [r4, #521]	; 0x209
		c1218->tx_buffer[C1218_STP_INDEX] = C1218_STP;
 101614a:	25ee      	movs	r5, #238	; 0xee
		c1218->tx_error = 0;
 101614c:	2200      	movs	r2, #0
		c1218->tx_buffer[C1218_CTRL_INDEX] = (c1218->tx_buffer[C1218_CTRL_INDEX] & 0b00100000) ^ 0b00100000;
 101614e:	f001 0120 	and.w	r1, r1, #32
		c1218->tx_data_offset = 0;

		if ( c1218->tx_data_length > (C1218_DLL_SIZE) )
 1016152:	2b8e      	cmp	r3, #142	; 0x8e
		c1218->tx_buffer[C1218_STP_INDEX] = C1218_STP;
 1016154:	f884 50c8 	strb.w	r5, [r4, #200]	; 0xc8
		c1218->tx_buffer[C1218_IDENTITY_INDEX] = c1218->rx_buffer[C1218_IDENTITY_INDEX];
 1016158:	f884 00c9 	strb.w	r0, [r4, #201]	; 0xc9
		c1218->tx_buffer[C1218_CTRL_INDEX] = (c1218->tx_buffer[C1218_CTRL_INDEX] & 0b00100000) ^ 0b00100000;
 101615c:	f884 10ca 	strb.w	r1, [r4, #202]	; 0xca
		c1218->tx_data_bytes_remaining = c1218->tx_data_length;
 1016160:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
		c1218->tx_error = 0;
 1016164:	f884 20ba 	strb.w	r2, [r4, #186]	; 0xba
		c1218->tx_eop = false;
 1016168:	f884 20bb 	strb.w	r2, [r4, #187]	; 0xbb
		c1218->tx_buffer_bytes = 0;
 101616c:	f8a4 215e 	strh.w	r2, [r4, #350]	; 0x15e
		c1218->tx_buffer[C1218_SEQ_NBR_INDEX] = 0;
 1016170:	f884 20cb 	strb.w	r2, [r4, #203]	; 0xcb
		c1218->tx_data_offset = 0;
 1016174:	f8a4 20c6 	strh.w	r2, [r4, #198]	; 0xc6
		if ( c1218->tx_data_length > (C1218_DLL_SIZE) )
 1016178:	d845      	bhi.n	1016206 <C1218_send_response.part.0+0xd2>
 101617a:	1d9d      	adds	r5, r3, #6
 101617c:	461a      	mov	r2, r3
 101617e:	b2ad      	uxth	r5, r5
 1016180:	b2db      	uxtb	r3, r3
				// The number doesn't divide perfectly by divisor
				c1218->tx_buffer[C1218_SEQ_NBR_INDEX] = 1 + (c1218->tx_data_length - c1218->tx_data_bytes_remaining) / C1218_DLL_SIZE;
			}
		}
		
		c1218->tx_buffer[C1218_LENGTH_H_INDEX] = (uint8_t)(c1218->tx_data_bytes_remaining >> 8);
 1016182:	2100      	movs	r1, #0
		c1218->tx_buffer[C1218_LENGTH_L_INDEX] = (uint8_t)(c1218->tx_data_bytes_remaining & 0x00FF);
 1016184:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
		c1218->tx_buffer[C1218_LENGTH_H_INDEX] = (uint8_t)(c1218->tx_data_bytes_remaining >> 8);
 1016188:	f884 10cc 	strb.w	r1, [r4, #204]	; 0xcc
			
		memcpy(&c1218->tx_buffer[C1218_DATA_INDEX], (const void*)&c1218->tx_data[0], (unsigned int)c1218->tx_data_bytes_remaining);
 101618c:	4b2f      	ldr	r3, [pc, #188]	; (101624c <C1218_send_response.part.0+0x118>)
 101618e:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
 1016192:	f104 00ce 	add.w	r0, r4, #206	; 0xce
 1016196:	4798      	blx	r3
		crc_calc = CRC_crc16((uint8_t*)c1218->tx_buffer, c1218->tx_data_bytes_remaining + 6);
 1016198:	4629      	mov	r1, r5
 101619a:	4b2d      	ldr	r3, [pc, #180]	; (1016250 <C1218_send_response.part.0+0x11c>)
 101619c:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
 10161a0:	4798      	blx	r3
		
		c1218->tx_buffer[c1218->tx_data_bytes_remaining + 6] = (uint8_t)(crc_calc >> 8);
 10161a2:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
 10161a6:	4423      	add	r3, r4
 10161a8:	0a02      	lsrs	r2, r0, #8
 10161aa:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
		c1218->tx_buffer[c1218->tx_data_bytes_remaining + 7] = (uint8_t)(crc_calc & 0x00FF);
 10161ae:	f883 00cf 	strb.w	r0, [r3, #207]	; 0xcf
 10161b2:	f8d4 1204 	ldr.w	r1, [r4, #516]	; 0x204
 10161b6:	f643 2399 	movw	r3, #15001	; 0x3a99
 10161ba:	e001      	b.n	10161c0 <C1218_send_response.part.0+0x8c>
	
		/* Start sending first data byte.
			* Wait until it is possible to put data into UART_THR register.
			* NOTE: If UART_THR Register never becomes empty this will be a DEADLOCK. */ 
		while( (c1218->uart->UART_SR & UART_SR_TXRDY) == 0 ) {
			if (!timeout--) {
 10161bc:	3b01      	subs	r3, #1
 10161be:	d03f      	beq.n	1016240 <C1218_send_response.part.0+0x10c>
		while( (c1218->uart->UART_SR & UART_SR_TXRDY) == 0 ) {
 10161c0:	694a      	ldr	r2, [r1, #20]
 10161c2:	0792      	lsls	r2, r2, #30
 10161c4:	d5fa      	bpl.n	10161bc <C1218_send_response.part.0+0x88>
				break;
			}
		}
			
		c1218->ongoing_transmission = true;
		c1218->uart->UART_THR = c1218->tx_buffer[c1218->tx_buffer_bytes];
 10161c6:	f8b4 315e 	ldrh.w	r3, [r4, #350]	; 0x15e
		
		c1218->uart->UART_IER = UART_IER_TXRDY; // uart enable TXRDY interrupt
		
		c1218->tx_state = C1218_TX_STP;
		
		TIMER_start_ms_timer(c1218->tx_timer, C1218_INTER_CHARACTER_TIMEOUT, null_action);
 10161ca:	4a22      	ldr	r2, [pc, #136]	; (1016254 <C1218_send_response.part.0+0x120>)
 10161cc:	4d22      	ldr	r5, [pc, #136]	; (1016258 <C1218_send_response.part.0+0x124>)
		c1218->ongoing_transmission = true;
 10161ce:	2001      	movs	r0, #1
		c1218->uart->UART_THR = c1218->tx_buffer[c1218->tx_buffer_bytes];
 10161d0:	4423      	add	r3, r4
		c1218->ongoing_transmission = true;
 10161d2:	f884 0208 	strb.w	r0, [r4, #520]	; 0x208
		c1218->uart->UART_THR = c1218->tx_buffer[c1218->tx_buffer_bytes];
 10161d6:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 10161da:	61cb      	str	r3, [r1, #28]
		c1218->tx_buffer_bytes++;
 10161dc:	f8b4 315e 	ldrh.w	r3, [r4, #350]	; 0x15e
		c1218->uart->UART_IER = UART_IER_TXRDY; // uart enable TXRDY interrupt
 10161e0:	f8d4 1204 	ldr.w	r1, [r4, #516]	; 0x204
		c1218->tx_buffer_bytes++;
 10161e4:	4403      	add	r3, r0
		c1218->uart->UART_IER = UART_IER_TXRDY; // uart enable TXRDY interrupt
 10161e6:	2002      	movs	r0, #2
		c1218->tx_buffer_bytes++;
 10161e8:	f8a4 315e 	strh.w	r3, [r4, #350]	; 0x15e
		c1218->uart->UART_IER = UART_IER_TXRDY; // uart enable TXRDY interrupt
 10161ec:	6088      	str	r0, [r1, #8]
		c1218->tx_state = C1218_TX_STP;
 10161ee:	230c      	movs	r3, #12
 10161f0:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
		TIMER_start_ms_timer(c1218->tx_timer, C1218_INTER_CHARACTER_TIMEOUT, null_action);
 10161f4:	f894 00b9 	ldrb.w	r0, [r4, #185]	; 0xb9
 10161f8:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 10161fc:	47a8      	blx	r5
		c1218->interrupt_context = false;
 10161fe:	2300      	movs	r3, #0
 1016200:	f884 3209 	strb.w	r3, [r4, #521]	; 0x209
 1016204:	bd38      	pop	{r3, r4, r5, pc}
			if ( (c1218->tx_data_length - c1218->tx_data_bytes_remaining) % C1218_DLL_SIZE == 0)
 1016206:	4a15      	ldr	r2, [pc, #84]	; (101625c <C1218_send_response.part.0+0x128>)
 1016208:	3b8e      	subs	r3, #142	; 0x8e
 101620a:	fb82 0203 	smull	r0, r2, r2, r3
 101620e:	441a      	add	r2, r3
 1016210:	17d8      	asrs	r0, r3, #31
 1016212:	ebc0 10e2 	rsb	r0, r0, r2, asr #7
			c1218->tx_data_bytes_remaining = C1218_DLL_SIZE;
 1016216:	228e      	movs	r2, #142	; 0x8e
			c1218->tx_buffer[C1218_CTRL_INDEX] |= 0b11000000;
 1016218:	f061 013f 	orn	r1, r1, #63	; 0x3f
			if ( (c1218->tx_data_length - c1218->tx_data_bytes_remaining) % C1218_DLL_SIZE == 0)
 101621c:	fb02 3310 	mls	r3, r2, r0, r3
			c1218->tx_buffer[C1218_CTRL_INDEX] |= 0b11000000;
 1016220:	f884 10ca 	strb.w	r1, [r4, #202]	; 0xca
			c1218->tx_data_bytes_remaining = C1218_DLL_SIZE;
 1016224:	f8a4 20c4 	strh.w	r2, [r4, #196]	; 0xc4
			if ( (c1218->tx_data_length - c1218->tx_data_bytes_remaining) % C1218_DLL_SIZE == 0)
 1016228:	b923      	cbnz	r3, 1016234 <C1218_send_response.part.0+0x100>
				c1218->tx_buffer[C1218_SEQ_NBR_INDEX] = 1 + (c1218->tx_data_length - c1218->tx_data_bytes_remaining) / C1218_DLL_SIZE;
 101622a:	f884 00cb 	strb.w	r0, [r4, #203]	; 0xcb
 101622e:	4613      	mov	r3, r2
 1016230:	2594      	movs	r5, #148	; 0x94
 1016232:	e7a6      	b.n	1016182 <C1218_send_response.part.0+0x4e>
 1016234:	3001      	adds	r0, #1
 1016236:	f884 00cb 	strb.w	r0, [r4, #203]	; 0xcb
 101623a:	4613      	mov	r3, r2
 101623c:	2594      	movs	r5, #148	; 0x94
 101623e:	e7a0      	b.n	1016182 <C1218_send_response.part.0+0x4e>
				c1218->io_configure();
 1016240:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 1016244:	4798      	blx	r3
 1016246:	f8d4 1204 	ldr.w	r1, [r4, #516]	; 0x204
 101624a:	e7bc      	b.n	10161c6 <C1218_send_response.part.0+0x92>
 101624c:	01030a3d 	.word	0x01030a3d
 1016250:	01016b5d 	.word	0x01016b5d
 1016254:	0102ba4d 	.word	0x0102ba4d
 1016258:	0102ba8d 	.word	0x0102ba8d
 101625c:	e6c2b449 	.word	0xe6c2b449

01016260 <C1218_send_next_packet.part.1>:
void C1218_send_next_packet(C1218_DLL_TYPE *c1218)
{
	uint16_t crc_calc;
	uint32_t timeout = 15000;
	
	if( (c1218->tx_state == C1218_TX_IDLE) && (c1218->tx_buffer[C1218_SEQ_NBR_INDEX] > 0) )
 1016260:	f890 30cb 	ldrb.w	r3, [r0, #203]	; 0xcb
 1016264:	2b00      	cmp	r3, #0
 1016266:	d079      	beq.n	101635c <C1218_send_next_packet.part.1+0xfc>
void C1218_send_next_packet(C1218_DLL_TYPE *c1218)
 1016268:	b570      	push	{r4, r5, r6, lr}
		c1218->tx_buffer_bytes = 0;
		
		c1218->tx_data_offset += C1218_DLL_SIZE;
		c1218->tx_buffer[C1218_STP_INDEX] = C1218_STP;
		c1218->tx_buffer[C1218_IDENTITY_INDEX] = c1218->rx_buffer[C1218_IDENTITY_INDEX];
		c1218->tx_buffer[C1218_CTRL_INDEX] = (c1218->tx_buffer[C1218_CTRL_INDEX] & 0b00100000) ^ 0b00100000;
 101626a:	f890 20ca 	ldrb.w	r2, [r0, #202]	; 0xca
		c1218->tx_data_offset += C1218_DLL_SIZE;
 101626e:	f8b0 50c6 	ldrh.w	r5, [r0, #198]	; 0xc6
		c1218->tx_buffer[C1218_IDENTITY_INDEX] = c1218->rx_buffer[C1218_IDENTITY_INDEX];
 1016272:	7d41      	ldrb	r1, [r0, #21]
 1016274:	f880 10c9 	strb.w	r1, [r0, #201]	; 0xc9
		c1218->tx_buffer[C1218_CTRL_INDEX] = (c1218->tx_buffer[C1218_CTRL_INDEX] & 0b00100000) ^ 0b00100000;
 1016278:	43d2      	mvns	r2, r2
		c1218->tx_buffer[C1218_CTRL_INDEX] |= 0b10000000;
		c1218->tx_buffer[C1218_SEQ_NBR_INDEX]--;
 101627a:	3b01      	subs	r3, #1
		c1218->tx_buffer[C1218_CTRL_INDEX] = (c1218->tx_buffer[C1218_CTRL_INDEX] & 0b00100000) ^ 0b00100000;
 101627c:	f002 0220 	and.w	r2, r2, #32
		c1218->tx_data_offset += C1218_DLL_SIZE;
 1016280:	358e      	adds	r5, #142	; 0x8e
		c1218->tx_error = 0;
 1016282:	2100      	movs	r1, #0
		c1218->tx_buffer[C1218_SEQ_NBR_INDEX]--;
 1016284:	b2db      	uxtb	r3, r3
		c1218->tx_buffer[C1218_CTRL_INDEX] |= 0b10000000;
 1016286:	f062 027f 	orn	r2, r2, #127	; 0x7f
		c1218->tx_data_offset += C1218_DLL_SIZE;
 101628a:	b2ad      	uxth	r5, r5
		c1218->interrupt_context = true;
 101628c:	2601      	movs	r6, #1
		c1218->tx_buffer[C1218_STP_INDEX] = C1218_STP;
 101628e:	24ee      	movs	r4, #238	; 0xee
		c1218->tx_buffer[C1218_SEQ_NBR_INDEX]--;
 1016290:	f880 30cb 	strb.w	r3, [r0, #203]	; 0xcb
		c1218->tx_buffer[C1218_CTRL_INDEX] |= 0b10000000;
 1016294:	f880 20ca 	strb.w	r2, [r0, #202]	; 0xca
		c1218->tx_data_offset += C1218_DLL_SIZE;
 1016298:	f8a0 50c6 	strh.w	r5, [r0, #198]	; 0xc6
		c1218->interrupt_context = true;
 101629c:	f880 6209 	strb.w	r6, [r0, #521]	; 0x209
		c1218->tx_error = 0;
 10162a0:	f880 10ba 	strb.w	r1, [r0, #186]	; 0xba
		c1218->tx_eop = false;
 10162a4:	f880 10bb 	strb.w	r1, [r0, #187]	; 0xbb
		c1218->tx_buffer_bytes = 0;
 10162a8:	f8a0 115e 	strh.w	r1, [r0, #350]	; 0x15e
		c1218->tx_buffer[C1218_STP_INDEX] = C1218_STP;
 10162ac:	f880 40c8 	strb.w	r4, [r0, #200]	; 0xc8
		
		if ( c1218->tx_buffer[C1218_SEQ_NBR_INDEX] > 0 )
 10162b0:	2b00      	cmp	r3, #0
 10162b2:	d14d      	bne.n	1016350 <C1218_send_next_packet.part.1+0xf0>
		{
			c1218->tx_data_bytes_remaining = C1218_DLL_SIZE;
		}
		else
		{
			c1218->tx_data_bytes_remaining = c1218->tx_data_length - c1218->tx_data_offset;
 10162b4:	f8b0 30c0 	ldrh.w	r3, [r0, #192]	; 0xc0
 10162b8:	1b5b      	subs	r3, r3, r5
 10162ba:	b29b      	uxth	r3, r3
 10162bc:	1d9e      	adds	r6, r3, #6
 10162be:	461a      	mov	r2, r3
 10162c0:	f8a0 30c4 	strh.w	r3, [r0, #196]	; 0xc4
 10162c4:	0a19      	lsrs	r1, r3, #8
 10162c6:	b2b6      	uxth	r6, r6
 10162c8:	b2db      	uxtb	r3, r3
 10162ca:	4604      	mov	r4, r0
		}
		
		c1218->tx_buffer[C1218_LENGTH_H_INDEX] = (uint8_t)(c1218->tx_data_bytes_remaining >> 8);
		c1218->tx_buffer[C1218_LENGTH_L_INDEX] = (uint8_t)(c1218->tx_data_bytes_remaining & 0x00FF);
			
		memcpy(&c1218->tx_buffer[C1218_DATA_INDEX], &c1218->tx_data[c1218->tx_data_offset], (unsigned int)c1218->tx_data_bytes_remaining);
 10162cc:	f8d0 00bc 	ldr.w	r0, [r0, #188]	; 0xbc
		c1218->tx_buffer[C1218_LENGTH_H_INDEX] = (uint8_t)(c1218->tx_data_bytes_remaining >> 8);
 10162d0:	f884 10cc 	strb.w	r1, [r4, #204]	; 0xcc
		c1218->tx_buffer[C1218_LENGTH_L_INDEX] = (uint8_t)(c1218->tx_data_bytes_remaining & 0x00FF);
 10162d4:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
		memcpy(&c1218->tx_buffer[C1218_DATA_INDEX], &c1218->tx_data[c1218->tx_data_offset], (unsigned int)c1218->tx_data_bytes_remaining);
 10162d8:	1941      	adds	r1, r0, r5
 10162da:	4b24      	ldr	r3, [pc, #144]	; (101636c <C1218_send_next_packet.part.1+0x10c>)
 10162dc:	f104 00ce 	add.w	r0, r4, #206	; 0xce
 10162e0:	4798      	blx	r3
		crc_calc = CRC_crc16((uint8_t*)c1218->tx_buffer, c1218->tx_data_bytes_remaining + 6);
 10162e2:	4631      	mov	r1, r6
 10162e4:	4b22      	ldr	r3, [pc, #136]	; (1016370 <C1218_send_next_packet.part.1+0x110>)
 10162e6:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
 10162ea:	4798      	blx	r3
		
		c1218->tx_buffer[c1218->tx_data_bytes_remaining + 6] = (uint8_t)(crc_calc >> 8);
 10162ec:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
 10162f0:	4423      	add	r3, r4
 10162f2:	0a02      	lsrs	r2, r0, #8
 10162f4:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
		c1218->tx_buffer[c1218->tx_data_bytes_remaining + 7] = (uint8_t)(crc_calc & 0x00FF);
 10162f8:	f883 00cf 	strb.w	r0, [r3, #207]	; 0xcf
 10162fc:	f8d4 1204 	ldr.w	r1, [r4, #516]	; 0x204
 1016300:	f643 2399 	movw	r3, #15001	; 0x3a99
 1016304:	e001      	b.n	101630a <C1218_send_next_packet.part.1+0xaa>
		
			/* Start sending first data byte.
			* Wait until it is possible to put data into UART_THR register.
			* NOTE: If UART_THR Register never becomes empty this will be a DEADLOCK. */
		while( (c1218->uart->UART_SR & UART_SR_TXRDY) == 0 ) {
			if (!timeout--) {
 1016306:	3b01      	subs	r3, #1
 1016308:	d029      	beq.n	101635e <C1218_send_next_packet.part.1+0xfe>
		while( (c1218->uart->UART_SR & UART_SR_TXRDY) == 0 ) {
 101630a:	694a      	ldr	r2, [r1, #20]
 101630c:	0792      	lsls	r2, r2, #30
 101630e:	d5fa      	bpl.n	1016306 <C1218_send_next_packet.part.1+0xa6>
				break;
			}
		}
		
		c1218->ongoing_transmission = true;
		c1218->uart->UART_THR = c1218->tx_buffer[c1218->tx_buffer_bytes];
 1016310:	f8b4 315e 	ldrh.w	r3, [r4, #350]	; 0x15e
		
		c1218->uart->UART_IER = UART_IER_TXRDY; // uart enable TXRDY interrupt
		
		c1218->tx_state = C1218_TX_STP;
		
		TIMER_start_ms_timer(c1218->tx_timer, C1218_INTER_CHARACTER_TIMEOUT, null_action);
 1016314:	4a17      	ldr	r2, [pc, #92]	; (1016374 <C1218_send_next_packet.part.1+0x114>)
 1016316:	4d18      	ldr	r5, [pc, #96]	; (1016378 <C1218_send_next_packet.part.1+0x118>)
		c1218->ongoing_transmission = true;
 1016318:	2001      	movs	r0, #1
		c1218->uart->UART_THR = c1218->tx_buffer[c1218->tx_buffer_bytes];
 101631a:	4423      	add	r3, r4
		c1218->ongoing_transmission = true;
 101631c:	f884 0208 	strb.w	r0, [r4, #520]	; 0x208
		c1218->uart->UART_THR = c1218->tx_buffer[c1218->tx_buffer_bytes];
 1016320:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 1016324:	61cb      	str	r3, [r1, #28]
		c1218->tx_buffer_bytes++;
 1016326:	f8b4 315e 	ldrh.w	r3, [r4, #350]	; 0x15e
		c1218->uart->UART_IER = UART_IER_TXRDY; // uart enable TXRDY interrupt
 101632a:	f8d4 1204 	ldr.w	r1, [r4, #516]	; 0x204
		c1218->tx_buffer_bytes++;
 101632e:	4403      	add	r3, r0
		c1218->uart->UART_IER = UART_IER_TXRDY; // uart enable TXRDY interrupt
 1016330:	2002      	movs	r0, #2
		c1218->tx_buffer_bytes++;
 1016332:	f8a4 315e 	strh.w	r3, [r4, #350]	; 0x15e
		c1218->uart->UART_IER = UART_IER_TXRDY; // uart enable TXRDY interrupt
 1016336:	6088      	str	r0, [r1, #8]
		c1218->tx_state = C1218_TX_STP;
 1016338:	230c      	movs	r3, #12
 101633a:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
		TIMER_start_ms_timer(c1218->tx_timer, C1218_INTER_CHARACTER_TIMEOUT, null_action);
 101633e:	f894 00b9 	ldrb.w	r0, [r4, #185]	; 0xb9
 1016342:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 1016346:	47a8      	blx	r5
		c1218->interrupt_context = false;
 1016348:	2300      	movs	r3, #0
 101634a:	f884 3209 	strb.w	r3, [r4, #521]	; 0x209
 101634e:	bd70      	pop	{r4, r5, r6, pc}
			c1218->tx_data_bytes_remaining = C1218_DLL_SIZE;
 1016350:	238e      	movs	r3, #142	; 0x8e
 1016352:	461a      	mov	r2, r3
 1016354:	f8a0 30c4 	strh.w	r3, [r0, #196]	; 0xc4
 1016358:	2694      	movs	r6, #148	; 0x94
 101635a:	e7b6      	b.n	10162ca <C1218_send_next_packet.part.1+0x6a>
 101635c:	4770      	bx	lr
				c1218->io_configure();
 101635e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 1016362:	4798      	blx	r3
 1016364:	f8d4 1204 	ldr.w	r1, [r4, #516]	; 0x204
 1016368:	e7d2      	b.n	1016310 <C1218_send_next_packet.part.1+0xb0>
 101636a:	bf00      	nop
 101636c:	01030a3d 	.word	0x01030a3d
 1016370:	01016b5d 	.word	0x01016b5d
 1016374:	0102ba4d 	.word	0x0102ba4d
 1016378:	0102ba8d 	.word	0x0102ba8d

0101637c <C1218_send_response>:
	if( c1218->tx_state == C1218_TX_IDLE )
 101637c:	f890 30b8 	ldrb.w	r3, [r0, #184]	; 0xb8
 1016380:	2b0b      	cmp	r3, #11
 1016382:	d000      	beq.n	1016386 <C1218_send_response+0xa>
 1016384:	4770      	bx	lr
 1016386:	4b01      	ldr	r3, [pc, #4]	; (101638c <C1218_send_response+0x10>)
 1016388:	4718      	bx	r3
 101638a:	bf00      	nop
 101638c:	01016135 	.word	0x01016135

01016390 <C1218_resend_packet>:
 * \param 
 * \retval
 ******************************************************************************
 */
void C1218_resend_packet(C1218_DLL_TYPE *c1218)
{
 1016390:	b538      	push	{r3, r4, r5, lr}
	uint32_t timeout = 15000;
	
	if( c1218->tx_state == C1218_TX_IDLE )
 1016392:	f890 30b8 	ldrb.w	r3, [r0, #184]	; 0xb8
 1016396:	2b0b      	cmp	r3, #11
 1016398:	d000      	beq.n	101639c <C1218_resend_packet+0xc>
 101639a:	bd38      	pop	{r3, r4, r5, pc}
 101639c:	f8b0 30cc 	ldrh.w	r3, [r0, #204]	; 0xcc
		c1218->tx_buffer_bytes = 0;
		
		c1218->tx_data_bytes_remaining  = (uint16_t)(c1218->tx_buffer[C1218_LENGTH_H_INDEX] << 8); 
		c1218->tx_data_bytes_remaining |= (uint16_t)(c1218->tx_buffer[C1218_LENGTH_L_INDEX] << 0);
		
		uint16_t crc_calc = CRC_crc16((uint8_t*)c1218->tx_buffer, c1218->tx_data_bytes_remaining + 6);
 10163a0:	4d25      	ldr	r5, [pc, #148]	; (1016438 <C1218_resend_packet+0xa8>)
 10163a2:	4604      	mov	r4, r0
 10163a4:	ba5b      	rev16	r3, r3
		c1218->tx_error = 0;
 10163a6:	2200      	movs	r2, #0
		uint16_t crc_calc = CRC_crc16((uint8_t*)c1218->tx_buffer, c1218->tx_data_bytes_remaining + 6);
 10163a8:	1d99      	adds	r1, r3, #6
		c1218->interrupt_context = true;
 10163aa:	2001      	movs	r0, #1
		c1218->tx_data_bytes_remaining |= (uint16_t)(c1218->tx_buffer[C1218_LENGTH_L_INDEX] << 0);
 10163ac:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
		uint16_t crc_calc = CRC_crc16((uint8_t*)c1218->tx_buffer, c1218->tx_data_bytes_remaining + 6);
 10163b0:	b289      	uxth	r1, r1
		c1218->interrupt_context = true;
 10163b2:	f884 0209 	strb.w	r0, [r4, #521]	; 0x209
		c1218->tx_error = 0;
 10163b6:	f884 20ba 	strb.w	r2, [r4, #186]	; 0xba
		c1218->tx_eop = false;	
 10163ba:	f884 20bb 	strb.w	r2, [r4, #187]	; 0xbb
		c1218->tx_buffer_bytes = 0;
 10163be:	f8a4 215e 	strh.w	r2, [r4, #350]	; 0x15e
		uint16_t crc_calc = CRC_crc16((uint8_t*)c1218->tx_buffer, c1218->tx_data_bytes_remaining + 6);
 10163c2:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
 10163c6:	47a8      	blx	r5
		
		c1218->tx_buffer[c1218->tx_data_bytes_remaining + 6] = (uint8_t)(crc_calc >> 8);
 10163c8:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
 10163cc:	4423      	add	r3, r4
 10163ce:	0a02      	lsrs	r2, r0, #8
 10163d0:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
		c1218->tx_buffer[c1218->tx_data_bytes_remaining + 7] = (uint8_t)(crc_calc & 0x00FF);
 10163d4:	f883 00cf 	strb.w	r0, [r3, #207]	; 0xcf
 10163d8:	f8d4 1204 	ldr.w	r1, [r4, #516]	; 0x204
	
		/* Start sending first data byte.
			* Wait until it is possible to put data into UART_THR register.
			* NOTE: If UART_THR Register never becomes empty this will be a DEADLOCK. */ 
		while( (c1218->uart->UART_SR & UART_SR_TXRDY) == 0 ) {
 10163dc:	f643 2399 	movw	r3, #15001	; 0x3a99
 10163e0:	e001      	b.n	10163e6 <C1218_resend_packet+0x56>
			if (!timeout--) {
 10163e2:	3b01      	subs	r3, #1
 10163e4:	d022      	beq.n	101642c <C1218_resend_packet+0x9c>
		while( (c1218->uart->UART_SR & UART_SR_TXRDY) == 0 ) {
 10163e6:	694a      	ldr	r2, [r1, #20]
 10163e8:	0792      	lsls	r2, r2, #30
 10163ea:	d5fa      	bpl.n	10163e2 <C1218_resend_packet+0x52>
				break;
			}
		}
			
		c1218->ongoing_transmission = true;
		c1218->uart->UART_THR = c1218->tx_buffer[c1218->tx_buffer_bytes];
 10163ec:	f8b4 315e 	ldrh.w	r3, [r4, #350]	; 0x15e
		
		c1218->uart->UART_IER = UART_IER_TXRDY; // uart enable TXRDY interrupt
		
		c1218->tx_state = C1218_TX_STP;
		
		TIMER_start_ms_timer(c1218->tx_timer, C1218_INTER_CHARACTER_TIMEOUT, null_action);
 10163f0:	4a12      	ldr	r2, [pc, #72]	; (101643c <C1218_resend_packet+0xac>)
 10163f2:	4d13      	ldr	r5, [pc, #76]	; (1016440 <C1218_resend_packet+0xb0>)
		c1218->ongoing_transmission = true;
 10163f4:	2001      	movs	r0, #1
		c1218->uart->UART_THR = c1218->tx_buffer[c1218->tx_buffer_bytes];
 10163f6:	4423      	add	r3, r4
		c1218->ongoing_transmission = true;
 10163f8:	f884 0208 	strb.w	r0, [r4, #520]	; 0x208
		c1218->uart->UART_THR = c1218->tx_buffer[c1218->tx_buffer_bytes];
 10163fc:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 1016400:	61cb      	str	r3, [r1, #28]
		c1218->tx_buffer_bytes++;
 1016402:	f8b4 315e 	ldrh.w	r3, [r4, #350]	; 0x15e
		c1218->uart->UART_IER = UART_IER_TXRDY; // uart enable TXRDY interrupt
 1016406:	f8d4 1204 	ldr.w	r1, [r4, #516]	; 0x204
		c1218->tx_buffer_bytes++;
 101640a:	4403      	add	r3, r0
		c1218->uart->UART_IER = UART_IER_TXRDY; // uart enable TXRDY interrupt
 101640c:	2002      	movs	r0, #2
		c1218->tx_buffer_bytes++;
 101640e:	f8a4 315e 	strh.w	r3, [r4, #350]	; 0x15e
		c1218->uart->UART_IER = UART_IER_TXRDY; // uart enable TXRDY interrupt
 1016412:	6088      	str	r0, [r1, #8]
		c1218->tx_state = C1218_TX_STP;
 1016414:	230c      	movs	r3, #12
 1016416:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
		TIMER_start_ms_timer(c1218->tx_timer, C1218_INTER_CHARACTER_TIMEOUT, null_action);
 101641a:	f894 00b9 	ldrb.w	r0, [r4, #185]	; 0xb9
 101641e:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 1016422:	47a8      	blx	r5
		c1218->interrupt_context = false;
 1016424:	2300      	movs	r3, #0
 1016426:	f884 3209 	strb.w	r3, [r4, #521]	; 0x209
 101642a:	bd38      	pop	{r3, r4, r5, pc}
				c1218->io_configure();
 101642c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 1016430:	4798      	blx	r3
 1016432:	f8d4 1204 	ldr.w	r1, [r4, #516]	; 0x204
				break;
 1016436:	e7d9      	b.n	10163ec <C1218_resend_packet+0x5c>
 1016438:	01016b5d 	.word	0x01016b5d
 101643c:	0102ba4d 	.word	0x0102ba4d
 1016440:	0102ba8d 	.word	0x0102ba8d

01016444 <C1218_send_ok>:
 * \retval
 ******************************************************************************
 */
void C1218_send_ok(C1218_DLL_TYPE *c1218)
{
	c1218->tx_data_length = 1;
 1016444:	2101      	movs	r1, #1
	c1218->tx_data[0] = C1218_OK;
 1016446:	f8d0 20bc 	ldr.w	r2, [r0, #188]	; 0xbc
	c1218->tx_data_length = 1;
 101644a:	f8a0 10c0 	strh.w	r1, [r0, #192]	; 0xc0
	c1218->tx_data[0] = C1218_OK;
 101644e:	2100      	movs	r1, #0
 1016450:	7011      	strb	r1, [r2, #0]
	if( c1218->tx_state == C1218_TX_IDLE )
 1016452:	f890 30b8 	ldrb.w	r3, [r0, #184]	; 0xb8
 1016456:	2b0b      	cmp	r3, #11
 1016458:	d000      	beq.n	101645c <C1218_send_ok+0x18>
 101645a:	4770      	bx	lr
 101645c:	4b00      	ldr	r3, [pc, #0]	; (1016460 <C1218_send_ok+0x1c>)
 101645e:	4718      	bx	r3
 1016460:	01016135 	.word	0x01016135

01016464 <C1218_send_err>:
 ******************************************************************************
 */
void C1218_send_err(C1218_DLL_TYPE *c1218)
{
	c1218->tx_data_length = 1;
	c1218->tx_data[0] = C1218_ERR;
 1016464:	f8d0 10bc 	ldr.w	r1, [r0, #188]	; 0xbc
	c1218->tx_data_length = 1;
 1016468:	2201      	movs	r2, #1
 101646a:	f8a0 20c0 	strh.w	r2, [r0, #192]	; 0xc0
	c1218->tx_data[0] = C1218_ERR;
 101646e:	700a      	strb	r2, [r1, #0]
	if( c1218->tx_state == C1218_TX_IDLE )
 1016470:	f890 30b8 	ldrb.w	r3, [r0, #184]	; 0xb8
 1016474:	2b0b      	cmp	r3, #11
 1016476:	d000      	beq.n	101647a <C1218_send_err+0x16>
 1016478:	4770      	bx	lr
 101647a:	4b01      	ldr	r3, [pc, #4]	; (1016480 <C1218_send_err+0x1c>)
 101647c:	4718      	bx	r3
 101647e:	bf00      	nop
 1016480:	01016135 	.word	0x01016135

01016484 <C1218_send_isc>:
 * \retval
 ******************************************************************************
 */
void C1218_send_isc(C1218_DLL_TYPE *c1218)
{
	c1218->tx_data_length = 1;
 1016484:	2101      	movs	r1, #1
	c1218->tx_data[0] = C1218_ISC;
 1016486:	f8d0 20bc 	ldr.w	r2, [r0, #188]	; 0xbc
	c1218->tx_data_length = 1;
 101648a:	f8a0 10c0 	strh.w	r1, [r0, #192]	; 0xc0
	c1218->tx_data[0] = C1218_ISC;
 101648e:	2103      	movs	r1, #3
 1016490:	7011      	strb	r1, [r2, #0]
	if( c1218->tx_state == C1218_TX_IDLE )
 1016492:	f890 30b8 	ldrb.w	r3, [r0, #184]	; 0xb8
 1016496:	2b0b      	cmp	r3, #11
 1016498:	d000      	beq.n	101649c <C1218_send_isc+0x18>
 101649a:	4770      	bx	lr
 101649c:	4b00      	ldr	r3, [pc, #0]	; (10164a0 <C1218_send_isc+0x1c>)
 101649e:	4718      	bx	r3
 10164a0:	01016135 	.word	0x01016135

010164a4 <C1218_send_onp>:
 * \retval
 ******************************************************************************
 */
void C1218_send_onp(C1218_DLL_TYPE *c1218)
{
	c1218->tx_data_length = 1;
 10164a4:	2101      	movs	r1, #1
	c1218->tx_data[0] = C1218_ONP;
 10164a6:	f8d0 20bc 	ldr.w	r2, [r0, #188]	; 0xbc
	c1218->tx_data_length = 1;
 10164aa:	f8a0 10c0 	strh.w	r1, [r0, #192]	; 0xc0
	c1218->tx_data[0] = C1218_ONP;
 10164ae:	2104      	movs	r1, #4
 10164b0:	7011      	strb	r1, [r2, #0]
	if( c1218->tx_state == C1218_TX_IDLE )
 10164b2:	f890 30b8 	ldrb.w	r3, [r0, #184]	; 0xb8
 10164b6:	2b0b      	cmp	r3, #11
 10164b8:	d000      	beq.n	10164bc <C1218_send_onp+0x18>
 10164ba:	4770      	bx	lr
 10164bc:	4b00      	ldr	r3, [pc, #0]	; (10164c0 <C1218_send_onp+0x1c>)
 10164be:	4718      	bx	r3
 10164c0:	01016135 	.word	0x01016135

010164c4 <C1218_send_iar>:
 * \retval
 ******************************************************************************
 */
void C1218_send_iar(C1218_DLL_TYPE *c1218)
{
	c1218->tx_data_length = 1;
 10164c4:	2101      	movs	r1, #1
	c1218->tx_data[0] = C1218_IAR;
 10164c6:	f8d0 20bc 	ldr.w	r2, [r0, #188]	; 0xbc
	c1218->tx_data_length = 1;
 10164ca:	f8a0 10c0 	strh.w	r1, [r0, #192]	; 0xc0
	c1218->tx_data[0] = C1218_IAR;
 10164ce:	2105      	movs	r1, #5
 10164d0:	7011      	strb	r1, [r2, #0]
	if( c1218->tx_state == C1218_TX_IDLE )
 10164d2:	f890 30b8 	ldrb.w	r3, [r0, #184]	; 0xb8
 10164d6:	2b0b      	cmp	r3, #11
 10164d8:	d000      	beq.n	10164dc <C1218_send_iar+0x18>
 10164da:	4770      	bx	lr
 10164dc:	4b00      	ldr	r3, [pc, #0]	; (10164e0 <C1218_send_iar+0x1c>)
 10164de:	4718      	bx	r3
 10164e0:	01016135 	.word	0x01016135

010164e4 <C1218_send_bsy>:
 * \retval
 ******************************************************************************
 */
void C1218_send_bsy(C1218_DLL_TYPE *c1218)
{
	c1218->tx_data_length = 1;
 10164e4:	2101      	movs	r1, #1
	c1218->tx_data[0] = C1218_BSY;
 10164e6:	f8d0 20bc 	ldr.w	r2, [r0, #188]	; 0xbc
	c1218->tx_data_length = 1;
 10164ea:	f8a0 10c0 	strh.w	r1, [r0, #192]	; 0xc0
	c1218->tx_data[0] = C1218_BSY;
 10164ee:	2106      	movs	r1, #6
 10164f0:	7011      	strb	r1, [r2, #0]
	if( c1218->tx_state == C1218_TX_IDLE )
 10164f2:	f890 30b8 	ldrb.w	r3, [r0, #184]	; 0xb8
 10164f6:	2b0b      	cmp	r3, #11
 10164f8:	d000      	beq.n	10164fc <C1218_send_bsy+0x18>
 10164fa:	4770      	bx	lr
 10164fc:	4b00      	ldr	r3, [pc, #0]	; (1016500 <C1218_send_bsy+0x1c>)
 10164fe:	4718      	bx	r3
 1016500:	01016135 	.word	0x01016135

01016504 <C1218_send_dlk>:
 * \retval
 ******************************************************************************
 */
void C1218_send_dlk(C1218_DLL_TYPE *c1218)
{
	c1218->tx_data_length = 1;
 1016504:	2101      	movs	r1, #1
	c1218->tx_data[0] = C1218_DLK;
 1016506:	f8d0 20bc 	ldr.w	r2, [r0, #188]	; 0xbc
	c1218->tx_data_length = 1;
 101650a:	f8a0 10c0 	strh.w	r1, [r0, #192]	; 0xc0
	c1218->tx_data[0] = C1218_DLK;
 101650e:	2108      	movs	r1, #8
 1016510:	7011      	strb	r1, [r2, #0]
	if( c1218->tx_state == C1218_TX_IDLE )
 1016512:	f890 30b8 	ldrb.w	r3, [r0, #184]	; 0xb8
 1016516:	2b0b      	cmp	r3, #11
 1016518:	d000      	beq.n	101651c <C1218_send_dlk+0x18>
 101651a:	4770      	bx	lr
 101651c:	4b00      	ldr	r3, [pc, #0]	; (1016520 <C1218_send_dlk+0x1c>)
 101651e:	4718      	bx	r3
 1016520:	01016135 	.word	0x01016135

01016524 <C1218_send_isss>:
 * \retval
 ******************************************************************************
 */
void C1218_send_isss(C1218_DLL_TYPE *c1218)
{
	c1218->tx_data_length = 1;
 1016524:	2101      	movs	r1, #1
	c1218->tx_data[0] = C1218_ISSS;
 1016526:	f8d0 20bc 	ldr.w	r2, [r0, #188]	; 0xbc
	c1218->tx_data_length = 1;
 101652a:	f8a0 10c0 	strh.w	r1, [r0, #192]	; 0xc0
	c1218->tx_data[0] = C1218_ISSS;
 101652e:	210a      	movs	r1, #10
 1016530:	7011      	strb	r1, [r2, #0]
	if( c1218->tx_state == C1218_TX_IDLE )
 1016532:	f890 30b8 	ldrb.w	r3, [r0, #184]	; 0xb8
 1016536:	2b0b      	cmp	r3, #11
 1016538:	d000      	beq.n	101653c <C1218_send_isss+0x18>
 101653a:	4770      	bx	lr
 101653c:	4b00      	ldr	r3, [pc, #0]	; (1016540 <C1218_send_isss+0x1c>)
 101653e:	4718      	bx	r3
 1016540:	01016135 	.word	0x01016135

01016544 <C1218_tx_int_handler>:
 * \retval	None
 *
 ******************************************************************************
 */
void C1218_tx_int_handler(C1218_DLL_TYPE *c1218)
{
 1016544:	b538      	push	{r3, r4, r5, lr}
    c1218->interrupt_context = true;
 1016546:	2301      	movs	r3, #1
{
 1016548:	4604      	mov	r4, r0
    c1218->interrupt_context = true;
 101654a:	f880 3209 	strb.w	r3, [r0, #521]	; 0x209
	c1218->ongoing_transmission = true;
 101654e:	f880 3208 	strb.w	r3, [r0, #520]	; 0x208
	
	TIMER_reset_ms_timer(c1218->tx_timer);
 1016552:	4b6b      	ldr	r3, [pc, #428]	; (1016700 <C1218_tx_int_handler+0x1bc>)
 1016554:	f890 00b9 	ldrb.w	r0, [r0, #185]	; 0xb9
 1016558:	4798      	blx	r3
	
	switch( c1218->tx_state )
 101655a:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
 101655e:	3b0c      	subs	r3, #12
 1016560:	2b07      	cmp	r3, #7
 1016562:	f200 80b8 	bhi.w	10166d6 <C1218_tx_int_handler+0x192>
 1016566:	e8df f003 	tbb	[pc, r3]
 101656a:	5235      	.short	0x5235
 101656c:	5c86487c 	.word	0x5c86487c
 1016570:	0490      	.short	0x0490
 1016572:	f8d4 2204 	ldr.w	r2, [r4, #516]	; 0x204
			break;
		
		case C1218_TX_CRC_H:
			/* Wait until it is possible to put data into UART_THR register.
			 * NOTE: If UART_THR Register never becomes empty this will be a DEADLOCK. */ 
			while( (c1218->uart->UART_SR & UART_SR_TXEMPTY) == 0 ) {}
 1016576:	6953      	ldr	r3, [r2, #20]
 1016578:	059b      	lsls	r3, r3, #22
 101657a:	d5fc      	bpl.n	1016576 <C1218_tx_int_handler+0x32>
			c1218->uart->UART_THR = c1218->tx_buffer[c1218->tx_buffer_bytes];
 101657c:	f8b4 315e 	ldrh.w	r3, [r4, #350]	; 0x15e
 1016580:	4423      	add	r3, r4
 1016582:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 1016586:	61d3      	str	r3, [r2, #28]
			c1218->tx_buffer_bytes++;
 1016588:	f8b4 315e 	ldrh.w	r3, [r4, #350]	; 0x15e
			if ( c1218->tx_buffer[C1218_SEQ_NBR_INDEX] == 0 )
 101658c:	f894 20cb 	ldrb.w	r2, [r4, #203]	; 0xcb
			c1218->tx_buffer_bytes++;
 1016590:	3301      	adds	r3, #1
 1016592:	f8a4 315e 	strh.w	r3, [r4, #350]	; 0x15e
			if ( c1218->tx_buffer[C1218_SEQ_NBR_INDEX] == 0 )
 1016596:	b912      	cbnz	r2, 101659e <C1218_tx_int_handler+0x5a>
			{
				c1218->tx_eop = true;
 1016598:	2301      	movs	r3, #1
 101659a:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
			}
			c1218->ongoing_transmission = false;
			c1218->tx_state = C1218_TX_IDLE;
			c1218->uart->UART_IDR = UART_IDR_TXRDY; // uart disable TXRDY interrupt
 101659e:	f8d4 2204 	ldr.w	r2, [r4, #516]	; 0x204
			c1218->uart->UART_IDR = UART_IDR_TXEMPTY;
			c1218->wait_for_ack = true;
			TIMER_start_ms_timer(c1218->response_timeout_timer, C1218_RESPONSE_TIMEOUT, c1218->tx_retry);
 10165a2:	4b58      	ldr	r3, [pc, #352]	; (1016704 <C1218_tx_int_handler+0x1c0>)
			c1218->ongoing_transmission = false;
 10165a4:	2500      	movs	r5, #0
			c1218->tx_state = C1218_TX_IDLE;
 10165a6:	200b      	movs	r0, #11
			c1218->uart->UART_IDR = UART_IDR_TXRDY; // uart disable TXRDY interrupt
 10165a8:	2102      	movs	r1, #2
			c1218->tx_state = C1218_TX_IDLE;
 10165aa:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
			c1218->ongoing_transmission = false;
 10165ae:	f884 5208 	strb.w	r5, [r4, #520]	; 0x208
			c1218->uart->UART_IDR = UART_IDR_TXRDY; // uart disable TXRDY interrupt
 10165b2:	60d1      	str	r1, [r2, #12]
			c1218->uart->UART_IDR = UART_IDR_TXEMPTY;
 10165b4:	f8d4 2204 	ldr.w	r2, [r4, #516]	; 0x204
 10165b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 10165bc:	60d1      	str	r1, [r2, #12]
			c1218->wait_for_ack = true;
 10165be:	2101      	movs	r1, #1
 10165c0:	f884 1200 	strb.w	r1, [r4, #512]	; 0x200
			TIMER_start_ms_timer(c1218->response_timeout_timer, C1218_RESPONSE_TIMEOUT, c1218->tx_retry);
 10165c4:	f8d4 21fc 	ldr.w	r2, [r4, #508]	; 0x1fc
 10165c8:	f894 0202 	ldrb.w	r0, [r4, #514]	; 0x202
 10165cc:	f640 31b8 	movw	r1, #3000	; 0xbb8
 10165d0:	4798      	blx	r3
			break;
 10165d2:	e06d      	b.n	10166b0 <C1218_tx_int_handler+0x16c>
			if ( (c1218->tx_buffer[C1218_STP_INDEX] == C1218_STP) && (meter.power_failure == false) )
 10165d4:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
 10165d8:	2bee      	cmp	r3, #238	; 0xee
 10165da:	d178      	bne.n	10166ce <C1218_tx_int_handler+0x18a>
 10165dc:	4b4a      	ldr	r3, [pc, #296]	; (1016708 <C1218_tx_int_handler+0x1c4>)
 10165de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 10165e2:	2b00      	cmp	r3, #0
 10165e4:	d173      	bne.n	10166ce <C1218_tx_int_handler+0x18a>
 10165e6:	f8d4 2204 	ldr.w	r2, [r4, #516]	; 0x204
				while( (c1218->uart->UART_SR & UART_SR_TXRDY) == 0 ) {}
 10165ea:	6953      	ldr	r3, [r2, #20]
 10165ec:	079d      	lsls	r5, r3, #30
 10165ee:	d5fc      	bpl.n	10165ea <C1218_tx_int_handler+0xa6>
				c1218->uart->UART_THR = c1218->tx_buffer[c1218->tx_buffer_bytes];
 10165f0:	f8b4 315e 	ldrh.w	r3, [r4, #350]	; 0x15e
				c1218->tx_state = C1218_TX_IDENTITY;
 10165f4:	210d      	movs	r1, #13
				c1218->uart->UART_THR = c1218->tx_buffer[c1218->tx_buffer_bytes];
 10165f6:	4423      	add	r3, r4
 10165f8:	e050      	b.n	101669c <C1218_tx_int_handler+0x158>
 10165fa:	f8d4 2204 	ldr.w	r2, [r4, #516]	; 0x204
			while( (c1218->uart->UART_SR & UART_SR_TXRDY) == 0 ) {}
 10165fe:	6953      	ldr	r3, [r2, #20]
 1016600:	079b      	lsls	r3, r3, #30
 1016602:	d5fc      	bpl.n	10165fe <C1218_tx_int_handler+0xba>
			c1218->uart->UART_THR = c1218->tx_buffer[c1218->tx_buffer_bytes];
 1016604:	f8b4 315e 	ldrh.w	r3, [r4, #350]	; 0x15e
			c1218->tx_state = C1218_TX_LENGTH_H;
 1016608:	2110      	movs	r1, #16
			c1218->uart->UART_THR = c1218->tx_buffer[c1218->tx_buffer_bytes];
 101660a:	4423      	add	r3, r4
 101660c:	e046      	b.n	101669c <C1218_tx_int_handler+0x158>
 101660e:	f8d4 2204 	ldr.w	r2, [r4, #516]	; 0x204
			while( (c1218->uart->UART_SR & UART_SR_TXRDY) == 0 ) {}
 1016612:	6953      	ldr	r3, [r2, #20]
 1016614:	0798      	lsls	r0, r3, #30
 1016616:	d5fc      	bpl.n	1016612 <C1218_tx_int_handler+0xce>
			c1218->uart->UART_THR = c1218->tx_buffer[c1218->tx_buffer_bytes];
 1016618:	f8b4 315e 	ldrh.w	r3, [r4, #350]	; 0x15e
			c1218->tx_state = C1218_TX_CTRL;
 101661c:	210e      	movs	r1, #14
			c1218->uart->UART_THR = c1218->tx_buffer[c1218->tx_buffer_bytes];
 101661e:	4423      	add	r3, r4
 1016620:	e03c      	b.n	101669c <C1218_tx_int_handler+0x158>
			if ( c1218->tx_data_bytes_remaining > 0 )
 1016622:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
 1016626:	2b00      	cmp	r3, #0
 1016628:	d042      	beq.n	10166b0 <C1218_tx_int_handler+0x16c>
 101662a:	f8d4 2204 	ldr.w	r2, [r4, #516]	; 0x204
				while( (c1218->uart->UART_SR & UART_SR_TXRDY) == 0 ) {}
 101662e:	6953      	ldr	r3, [r2, #20]
 1016630:	0798      	lsls	r0, r3, #30
 1016632:	d5fc      	bpl.n	101662e <C1218_tx_int_handler+0xea>
				c1218->uart->UART_THR = c1218->tx_buffer[c1218->tx_buffer_bytes];
 1016634:	f8b4 315e 	ldrh.w	r3, [r4, #350]	; 0x15e
 1016638:	4423      	add	r3, r4
 101663a:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 101663e:	61d3      	str	r3, [r2, #28]
				c1218->tx_data_bytes_remaining--;
 1016640:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
				c1218->tx_buffer_bytes++;
 1016644:	f8b4 215e 	ldrh.w	r2, [r4, #350]	; 0x15e
				c1218->tx_data_bytes_remaining--;
 1016648:	3b01      	subs	r3, #1
 101664a:	b29b      	uxth	r3, r3
				c1218->tx_buffer_bytes++;
 101664c:	3201      	adds	r2, #1
				c1218->tx_data_bytes_remaining--;
 101664e:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
				c1218->tx_buffer_bytes++;
 1016652:	f8a4 215e 	strh.w	r2, [r4, #350]	; 0x15e
				if ( c1218->tx_data_bytes_remaining == 0 )
 1016656:	2b00      	cmp	r3, #0
 1016658:	d14d      	bne.n	10166f6 <C1218_tx_int_handler+0x1b2>
      				c1218->tx_state = C1218_TX_DATA;
 101665a:	2312      	movs	r3, #18
 101665c:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
 1016660:	e026      	b.n	10166b0 <C1218_tx_int_handler+0x16c>
 1016662:	f8d4 2204 	ldr.w	r2, [r4, #516]	; 0x204
			while( (c1218->uart->UART_SR & UART_SR_TXRDY) == 0 ) {}
 1016666:	6953      	ldr	r3, [r2, #20]
 1016668:	0799      	lsls	r1, r3, #30
 101666a:	d5fc      	bpl.n	1016666 <C1218_tx_int_handler+0x122>
			c1218->uart->UART_THR = c1218->tx_buffer[c1218->tx_buffer_bytes];
 101666c:	f8b4 315e 	ldrh.w	r3, [r4, #350]	; 0x15e
			c1218->tx_state = C1218_TX_SEQ_NBR;
 1016670:	210f      	movs	r1, #15
			c1218->uart->UART_THR = c1218->tx_buffer[c1218->tx_buffer_bytes];
 1016672:	4423      	add	r3, r4
 1016674:	e012      	b.n	101669c <C1218_tx_int_handler+0x158>
 1016676:	f8d4 2204 	ldr.w	r2, [r4, #516]	; 0x204
			while( (c1218->uart->UART_SR & UART_SR_TXRDY) == 0 ) {}
 101667a:	6953      	ldr	r3, [r2, #20]
 101667c:	079d      	lsls	r5, r3, #30
 101667e:	d5fc      	bpl.n	101667a <C1218_tx_int_handler+0x136>
			c1218->uart->UART_THR = c1218->tx_buffer[c1218->tx_buffer_bytes];
 1016680:	f8b4 315e 	ldrh.w	r3, [r4, #350]	; 0x15e
			c1218->tx_state = C1218_TX_LENGTH_L;
 1016684:	2111      	movs	r1, #17
			c1218->uart->UART_THR = c1218->tx_buffer[c1218->tx_buffer_bytes];
 1016686:	4423      	add	r3, r4
 1016688:	e008      	b.n	101669c <C1218_tx_int_handler+0x158>
 101668a:	f8d4 2204 	ldr.w	r2, [r4, #516]	; 0x204
			while( (c1218->uart->UART_SR & UART_SR_TXRDY) == 0 ) {}
 101668e:	6953      	ldr	r3, [r2, #20]
 1016690:	0799      	lsls	r1, r3, #30
 1016692:	d5fc      	bpl.n	101668e <C1218_tx_int_handler+0x14a>
			c1218->uart->UART_THR = c1218->tx_buffer[c1218->tx_buffer_bytes];
 1016694:	f8b4 315e 	ldrh.w	r3, [r4, #350]	; 0x15e
			c1218->tx_state = C1218_TX_CRC_H;
 1016698:	2113      	movs	r1, #19
			c1218->uart->UART_THR = c1218->tx_buffer[c1218->tx_buffer_bytes];
 101669a:	4423      	add	r3, r4
			c1218->uart->UART_THR = c1218->tx_buffer[c1218->tx_buffer_bytes];
 101669c:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 10166a0:	61d3      	str	r3, [r2, #28]
			c1218->tx_buffer_bytes++;
 10166a2:	f8b4 315e 	ldrh.w	r3, [r4, #350]	; 0x15e
			c1218->tx_state = C1218_TX_CTRL;
 10166a6:	f884 10b8 	strb.w	r1, [r4, #184]	; 0xb8
			c1218->tx_buffer_bytes++;
 10166aa:	3301      	adds	r3, #1
 10166ac:	f8a4 315e 	strh.w	r3, [r4, #350]	; 0x15e
			c1218->uart->UART_IDR = UART_IDR_TXRDY; // uart disable TXRDY interrupt
			c1218->uart->UART_IDR = UART_IDR_TXEMPTY;
			break;
	}

	if ( c1218->ongoing_transmission == true )
 10166b0:	f894 3208 	ldrb.w	r3, [r4, #520]	; 0x208
 10166b4:	b13b      	cbz	r3, 10166c6 <C1218_tx_int_handler+0x182>
	{
		TIMER_start_ms_timer(c1218->tx_timer, C1218_INTER_CHARACTER_TIMEOUT,  c1218->tx_abort);
 10166b6:	f8d4 21f8 	ldr.w	r2, [r4, #504]	; 0x1f8
 10166ba:	f894 00b9 	ldrb.w	r0, [r4, #185]	; 0xb9
 10166be:	4b11      	ldr	r3, [pc, #68]	; (1016704 <C1218_tx_int_handler+0x1c0>)
 10166c0:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 10166c4:	4798      	blx	r3
	}
	
	c1218->interrupt_context = false;
 10166c6:	2300      	movs	r3, #0
 10166c8:	f884 3209 	strb.w	r3, [r4, #521]	; 0x209
 10166cc:	bd38      	pop	{r3, r4, r5, pc}
				c1218->tx_abort();
 10166ce:	f8d4 31f8 	ldr.w	r3, [r4, #504]	; 0x1f8
 10166d2:	4798      	blx	r3
 10166d4:	e7ec      	b.n	10166b0 <C1218_tx_int_handler+0x16c>
			c1218->uart->UART_IDR = UART_IDR_TXRDY; // uart disable TXRDY interrupt
 10166d6:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
 10166da:	2202      	movs	r2, #2
			c1218->ongoing_transmission = false;
 10166dc:	2000      	movs	r0, #0
			c1218->tx_state = C1218_TX_IDLE;
 10166de:	210b      	movs	r1, #11
			c1218->ongoing_transmission = false;
 10166e0:	f884 0208 	strb.w	r0, [r4, #520]	; 0x208
			c1218->tx_state = C1218_TX_IDLE;
 10166e4:	f884 10b8 	strb.w	r1, [r4, #184]	; 0xb8
			c1218->uart->UART_IDR = UART_IDR_TXRDY; // uart disable TXRDY interrupt
 10166e8:	60da      	str	r2, [r3, #12]
			c1218->uart->UART_IDR = UART_IDR_TXEMPTY;
 10166ea:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
 10166ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 10166f2:	60da      	str	r2, [r3, #12]
			break;
 10166f4:	e7dc      	b.n	10166b0 <C1218_tx_int_handler+0x16c>
				c1218->tx_state = C1218_TX_LENGTH_L;
 10166f6:	2311      	movs	r3, #17
 10166f8:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
 10166fc:	e7d8      	b.n	10166b0 <C1218_tx_int_handler+0x16c>
 10166fe:	bf00      	nop
 1016700:	0102bb09 	.word	0x0102bb09
 1016704:	0102ba8d 	.word	0x0102ba8d
 1016708:	20016c2c 	.word	0x20016c2c

0101670c <C1218_rx_int_handler>:
 * \retval	None
 *
 ******************************************************************************
 */
void C1218_rx_int_handler(C1218_DLL_TYPE *c1218)
{
 101670c:	b570      	push	{r4, r5, r6, lr}
	volatile uint8_t data;
	volatile uint16_t crc_rx;
	volatile uint16_t crc_calc;
	
    c1218->interrupt_context = true;
 101670e:	2301      	movs	r3, #1
{
 1016710:	4604      	mov	r4, r0
    c1218->interrupt_context = true;
 1016712:	f880 3209 	strb.w	r3, [r0, #521]	; 0x209
	c1218->ongoing_transmission = true;
 1016716:	f880 3208 	strb.w	r3, [r0, #520]	; 0x208
{
 101671a:	b082      	sub	sp, #8
	
	TIMER_reset_ms_timer(c1218->rx_timer);
 101671c:	7940      	ldrb	r0, [r0, #5]
 101671e:	4dbc      	ldr	r5, [pc, #752]	; (1016a10 <C1218_rx_int_handler+0x304>)
 1016720:	47a8      	blx	r5
    data = c1218->uart->UART_RHR;
 1016722:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204

    switch( c1218->rx_state )
 1016726:	7922      	ldrb	r2, [r4, #4]
    data = c1218->uart->UART_RHR;
 1016728:	699b      	ldr	r3, [r3, #24]
 101672a:	b2db      	uxtb	r3, r3
 101672c:	f88d 3003 	strb.w	r3, [sp, #3]
    switch( c1218->rx_state )
 1016730:	2a08      	cmp	r2, #8
 1016732:	f200 80ea 	bhi.w	101690a <C1218_rx_int_handler+0x1fe>
 1016736:	e8df f002 	tbb	[pc, r2]
 101673a:	dc4a      	.short	0xdc4a
 101673c:	c45c9176 	.word	0xc45c9176
 1016740:	b69d      	.short	0xb69d
 1016742:	05          	.byte	0x05
 1016743:	00          	.byte	0x00
			c1218->rx_buffer_bytes++;
			c1218->rx_state = C1218_RX_CRC_H;
			break;
		
		case C1218_RX_CRC_H:
			if (c1218->rx_buffer_bytes < C1218_PACKET_SIZE + C1218_PACKET_OVERHEAD)
 1016744:	f8b4 10aa 	ldrh.w	r1, [r4, #170]	; 0xaa
 1016748:	299d      	cmp	r1, #157	; 0x9d
 101674a:	d803      	bhi.n	1016754 <C1218_rx_int_handler+0x48>
			{
				c1218->rx_buffer[c1218->rx_buffer_bytes] = data;
 101674c:	1863      	adds	r3, r4, r1
 101674e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 1016752:	751a      	strb	r2, [r3, #20]
			}
			c1218->rx_buffer_bytes++;
 1016754:	1c4b      	adds	r3, r1, #1
 1016756:	b29b      	uxth	r3, r3
			
			crc_rx = (uint16_t)(c1218->rx_buffer[c1218->rx_buffer_bytes - 2] << 8);
 1016758:	18e0      	adds	r0, r4, r3
			c1218->rx_buffer_bytes++;
 101675a:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			crc_rx = (uint16_t)(c1218->rx_buffer[c1218->rx_buffer_bytes - 2] << 8);
 101675e:	7c82      	ldrb	r2, [r0, #18]
			crc_rx = crc_rx | (uint16_t)(c1218->rx_buffer[c1218->rx_buffer_bytes - 1]);
 1016760:	7cc0      	ldrb	r0, [r0, #19]

			crc_calc = CRC_crc16((uint8_t*)c1218->rx_buffer, c1218->rx_buffer_bytes - 2);
 1016762:	4dac      	ldr	r5, [pc, #688]	; (1016a14 <C1218_rx_int_handler+0x308>)
			crc_rx = (uint16_t)(c1218->rx_buffer[c1218->rx_buffer_bytes - 2] << 8);
 1016764:	0212      	lsls	r2, r2, #8
 1016766:	f8ad 2004 	strh.w	r2, [sp, #4]
			crc_rx = crc_rx | (uint16_t)(c1218->rx_buffer[c1218->rx_buffer_bytes - 1]);
 101676a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
			crc_calc = CRC_crc16((uint8_t*)c1218->rx_buffer, c1218->rx_buffer_bytes - 2);
 101676e:	3901      	subs	r1, #1
			crc_rx = crc_rx | (uint16_t)(c1218->rx_buffer[c1218->rx_buffer_bytes - 1]);
 1016770:	b29b      	uxth	r3, r3
 1016772:	4303      	orrs	r3, r0
			crc_calc = CRC_crc16((uint8_t*)c1218->rx_buffer, c1218->rx_buffer_bytes - 2);
 1016774:	b289      	uxth	r1, r1
 1016776:	f104 0014 	add.w	r0, r4, #20
			crc_rx = crc_rx | (uint16_t)(c1218->rx_buffer[c1218->rx_buffer_bytes - 1]);
 101677a:	f8ad 3004 	strh.w	r3, [sp, #4]
			crc_calc = CRC_crc16((uint8_t*)c1218->rx_buffer, c1218->rx_buffer_bytes - 2);
 101677e:	47a8      	blx	r5
 1016780:	f8ad 0006 	strh.w	r0, [sp, #6]
			
			if (crc_rx == crc_calc)
 1016784:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 1016788:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 101678c:	b292      	uxth	r2, r2
 101678e:	b29b      	uxth	r3, r3
 1016790:	429a      	cmp	r2, r3
 1016792:	f000 80f6 	beq.w	1016982 <C1218_rx_int_handler+0x276>
					}
				}					
			}
			else
			{
				c1218->rx_error = 1;
 1016796:	2301      	movs	r3, #1
 1016798:	71a3      	strb	r3, [r4, #6]
 101679a:	f8d4 1204 	ldr.w	r1, [r4, #516]	; 0x204
 101679e:	f643 2399 	movw	r3, #15001	; 0x3a99
 10167a2:	e002      	b.n	10167aa <C1218_rx_int_handler+0x9e>
		if (!timeout--) {
 10167a4:	3b01      	subs	r3, #1
 10167a6:	f000 810b 	beq.w	10169c0 <C1218_rx_int_handler+0x2b4>
	while( (c1218->uart->UART_SR & UART_SR_TXRDY) == 0 ) {
 10167aa:	694a      	ldr	r2, [r1, #20]
 10167ac:	0792      	lsls	r2, r2, #30
 10167ae:	d5f9      	bpl.n	10167a4 <C1218_rx_int_handler+0x98>
	c1218->uart->UART_THR = C1218_NOK;
 10167b0:	2315      	movs	r3, #21
 10167b2:	61cb      	str	r3, [r1, #28]
				C1218_send_nok(c1218);
			}
			
			if ( c1218->rx_buffer[C1218_SEQ_NBR_INDEX] == 0 )
 10167b4:	7de3      	ldrb	r3, [r4, #23]
 10167b6:	2b00      	cmp	r3, #0
 10167b8:	f000 80c2 	beq.w	1016940 <C1218_rx_int_handler+0x234>
				{
					portYIELD();
				}
			}
			
			c1218->ongoing_transmission = false;
 10167bc:	2300      	movs	r3, #0
 10167be:	f884 3208 	strb.w	r3, [r4, #520]	; 0x208
			c1218->rx_state = C1218_RX_IDLE;
 10167c2:	7123      	strb	r3, [r4, #4]
	if ( c1218->ongoing_transmission == true )
	{
		TIMER_start_ms_timer(c1218->rx_timer, C1218_INTER_CHARACTER_TIMEOUT, c1218->rx_abort);
	}
	
    c1218->interrupt_context = false;
 10167c4:	2300      	movs	r3, #0
 10167c6:	f884 3209 	strb.w	r3, [r4, #521]	; 0x209
}
 10167ca:	b002      	add	sp, #8
 10167cc:	bd70      	pop	{r4, r5, r6, pc}
			if ( (data == C1218_STP) /*&& (c1218->wait_for_ack == false)*/ && (meter.power_failure == false))
 10167ce:	f89d 3003 	ldrb.w	r3, [sp, #3]
 10167d2:	2bee      	cmp	r3, #238	; 0xee
 10167d4:	f000 80c2 	beq.w	101695c <C1218_rx_int_handler+0x250>
			else if ( (data == C1218_ACK) && (c1218->wait_for_ack == true) )
 10167d8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 10167dc:	2b06      	cmp	r3, #6
 10167de:	f000 80e8 	beq.w	10169b2 <C1218_rx_int_handler+0x2a6>
			else if ( (data == C1218_NOK) && (c1218->wait_for_ack == true) )
 10167e2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 10167e6:	2b15      	cmp	r3, #21
 10167e8:	f000 809b 	beq.w	1016922 <C1218_rx_int_handler+0x216>
				c1218->rx_state = C1218_RX_IDLE;
 10167ec:	2300      	movs	r3, #0
 10167ee:	7123      	strb	r3, [r4, #4]
 10167f0:	e00a      	b.n	1016808 <C1218_rx_int_handler+0xfc>
			c1218->rx_buffer[c1218->rx_buffer_bytes] = data;
 10167f2:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 10167f6:	f89d 0003 	ldrb.w	r0, [sp, #3]
 10167fa:	18e1      	adds	r1, r4, r3
			c1218->rx_state = C1218_RX_LENGTH_H;
 10167fc:	2205      	movs	r2, #5
			c1218->rx_buffer_bytes++;
 10167fe:	3301      	adds	r3, #1
			c1218->rx_buffer[c1218->rx_buffer_bytes] = data;
 1016800:	7508      	strb	r0, [r1, #20]
			c1218->rx_buffer_bytes++;
 1016802:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			c1218->rx_state = C1218_RX_LENGTH_H;
 1016806:	7122      	strb	r2, [r4, #4]
	if ( c1218->ongoing_transmission == true )
 1016808:	f894 3208 	ldrb.w	r3, [r4, #520]	; 0x208
 101680c:	b133      	cbz	r3, 101681c <C1218_rx_int_handler+0x110>
		TIMER_start_ms_timer(c1218->rx_timer, C1218_INTER_CHARACTER_TIMEOUT, c1218->rx_abort);
 101680e:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 1016812:	7960      	ldrb	r0, [r4, #5]
 1016814:	4b80      	ldr	r3, [pc, #512]	; (1016a18 <C1218_rx_int_handler+0x30c>)
 1016816:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 101681a:	4798      	blx	r3
    c1218->interrupt_context = false;
 101681c:	2300      	movs	r3, #0
 101681e:	f884 3209 	strb.w	r3, [r4, #521]	; 0x209
}
 1016822:	b002      	add	sp, #8
 1016824:	bd70      	pop	{r4, r5, r6, pc}
			c1218->rx_buffer[c1218->rx_buffer_bytes] = data;
 1016826:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 101682a:	f89d 0003 	ldrb.w	r0, [sp, #3]
			if ( (data == 0) || (data == 0x20) || ((data & 0b11000000) == 0b11000000) )
 101682e:	f89d 2003 	ldrb.w	r2, [sp, #3]
			c1218->rx_buffer[c1218->rx_buffer_bytes] = data;
 1016832:	18e1      	adds	r1, r4, r3
			c1218->rx_buffer_bytes++;
 1016834:	3301      	adds	r3, #1
			c1218->rx_buffer[c1218->rx_buffer_bytes] = data;
 1016836:	7508      	strb	r0, [r1, #20]
			c1218->rx_buffer_bytes++;
 1016838:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			if ( (data == 0) || (data == 0x20) || ((data & 0b11000000) == 0b11000000) )
 101683c:	b14a      	cbz	r2, 1016852 <C1218_rx_int_handler+0x146>
 101683e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 1016842:	2b20      	cmp	r3, #32
 1016844:	d005      	beq.n	1016852 <C1218_rx_int_handler+0x146>
 1016846:	f89d 3003 	ldrb.w	r3, [sp, #3]
 101684a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 101684e:	2bc0      	cmp	r3, #192	; 0xc0
 1016850:	d101      	bne.n	1016856 <C1218_rx_int_handler+0x14a>
				c1218->rx_data_offset = 0;
 1016852:	2300      	movs	r3, #0
 1016854:	8263      	strh	r3, [r4, #18]
			c1218->rx_state = C1218_RX_CTRL;
 1016856:	2303      	movs	r3, #3
 1016858:	7123      	strb	r3, [r4, #4]
			break;
 101685a:	e7d5      	b.n	1016808 <C1218_rx_int_handler+0xfc>
			c1218->rx_buffer[c1218->rx_buffer_bytes] = data;
 101685c:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 1016860:	f89d 0003 	ldrb.w	r0, [sp, #3]
 1016864:	18e1      	adds	r1, r4, r3
			c1218->rx_state = C1218_RX_SEQ_NBR;
 1016866:	2204      	movs	r2, #4
			c1218->rx_buffer_bytes++;
 1016868:	3301      	adds	r3, #1
			c1218->rx_buffer[c1218->rx_buffer_bytes] = data;
 101686a:	7508      	strb	r0, [r1, #20]
			c1218->rx_buffer_bytes++;
 101686c:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			c1218->rx_state = C1218_RX_SEQ_NBR;
 1016870:	7122      	strb	r2, [r4, #4]
			break;
 1016872:	e7c9      	b.n	1016808 <C1218_rx_int_handler+0xfc>
	        if (c1218->rx_data_bytes_remaining > 0)
 1016874:	8a23      	ldrh	r3, [r4, #16]
 1016876:	2b00      	cmp	r3, #0
 1016878:	d0c6      	beq.n	1016808 <C1218_rx_int_handler+0xfc>
				if (c1218->rx_buffer_bytes < C1218_PACKET_SIZE + C1218_PACKET_OVERHEAD)
 101687a:	f8b4 20aa 	ldrh.w	r2, [r4, #170]	; 0xaa
 101687e:	2a9d      	cmp	r2, #157	; 0x9d
 1016880:	d803      	bhi.n	101688a <C1218_rx_int_handler+0x17e>
					c1218->rx_buffer[c1218->rx_buffer_bytes] = data;
 1016882:	18a1      	adds	r1, r4, r2
 1016884:	f89d 0003 	ldrb.w	r0, [sp, #3]
 1016888:	7508      	strb	r0, [r1, #20]
				c1218->rx_data_bytes++;
 101688a:	7ba1      	ldrb	r1, [r4, #14]
	            c1218->rx_data_bytes_remaining--;
 101688c:	3b01      	subs	r3, #1
 101688e:	b29b      	uxth	r3, r3
			    c1218->rx_buffer_bytes++;
 1016890:	3201      	adds	r2, #1
				c1218->rx_data_bytes++;
 1016892:	3101      	adds	r1, #1
	            c1218->rx_data_bytes_remaining--;
 1016894:	8223      	strh	r3, [r4, #16]
			    c1218->rx_buffer_bytes++;
 1016896:	f8a4 20aa 	strh.w	r2, [r4, #170]	; 0xaa
				c1218->rx_data_bytes++;
 101689a:	73a1      	strb	r1, [r4, #14]
				if (c1218->rx_data_bytes_remaining == 0)
 101689c:	2b00      	cmp	r3, #0
 101689e:	d13d      	bne.n	101691c <C1218_rx_int_handler+0x210>
				    c1218->rx_state = C1218_RX_DATA;
 10168a0:	2307      	movs	r3, #7
 10168a2:	7123      	strb	r3, [r4, #4]
 10168a4:	e7b0      	b.n	1016808 <C1218_rx_int_handler+0xfc>
			if (c1218->rx_buffer_bytes < (C1218_PACKET_SIZE + C1218_PACKET_OVERHEAD))
 10168a6:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 10168aa:	2b9d      	cmp	r3, #157	; 0x9d
 10168ac:	d803      	bhi.n	10168b6 <C1218_rx_int_handler+0x1aa>
				c1218->rx_buffer[c1218->rx_buffer_bytes] = data;
 10168ae:	18e2      	adds	r2, r4, r3
 10168b0:	f89d 1003 	ldrb.w	r1, [sp, #3]
 10168b4:	7511      	strb	r1, [r2, #20]
			c1218->rx_buffer_bytes++;
 10168b6:	3301      	adds	r3, #1
			c1218->rx_state = C1218_RX_CRC_H;
 10168b8:	2208      	movs	r2, #8
			c1218->rx_buffer_bytes++;
 10168ba:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			c1218->rx_state = C1218_RX_CRC_H;
 10168be:	7122      	strb	r2, [r4, #4]
			break;
 10168c0:	e7a2      	b.n	1016808 <C1218_rx_int_handler+0xfc>
		if (c1218->rx_buffer_bytes < C1218_PACKET_SIZE + C1218_PACKET_OVERHEAD)
 10168c2:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 10168c6:	2b9d      	cmp	r3, #157	; 0x9d
 10168c8:	d803      	bhi.n	10168d2 <C1218_rx_int_handler+0x1c6>
			c1218->rx_buffer[c1218->rx_buffer_bytes] = data;
 10168ca:	18e2      	adds	r2, r4, r3
 10168cc:	f89d 1003 	ldrb.w	r1, [sp, #3]
 10168d0:	7511      	strb	r1, [r2, #20]
			c1218->rx_buffer_bytes++;
 10168d2:	3301      	adds	r3, #1
 10168d4:	b29b      	uxth	r3, r3
			c1218->rx_data_bytes_remaining = (uint16_t)(c1218->rx_buffer[c1218->rx_buffer_bytes - 2] << 8);
 10168d6:	18e2      	adds	r2, r4, r3
			c1218->rx_data_bytes = 0;
 10168d8:	2100      	movs	r1, #0
			c1218->rx_buffer_bytes++;
 10168da:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			c1218->rx_data_bytes = 0;
 10168de:	73a1      	strb	r1, [r4, #14]
			c1218->rx_data_bytes_remaining = (uint16_t)(c1218->rx_buffer[c1218->rx_buffer_bytes - 2] << 8);
 10168e0:	7c91      	ldrb	r1, [r2, #18]
			c1218->rx_data_bytes_remaining |= (uint16_t)(c1218->rx_buffer[c1218->rx_buffer_bytes - 1]);
 10168e2:	7cd3      	ldrb	r3, [r2, #19]
			c1218->rx_state = C1218_RX_LENGTH_L;
 10168e4:	2206      	movs	r2, #6
			c1218->rx_data_bytes_remaining |= (uint16_t)(c1218->rx_buffer[c1218->rx_buffer_bytes - 1]);
 10168e6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 10168ea:	8223      	strh	r3, [r4, #16]
			c1218->rx_data_length = c1218->rx_data_bytes_remaining;
 10168ec:	81a3      	strh	r3, [r4, #12]
			c1218->rx_state = C1218_RX_LENGTH_L;
 10168ee:	7122      	strb	r2, [r4, #4]
			break;
 10168f0:	e78a      	b.n	1016808 <C1218_rx_int_handler+0xfc>
			c1218->rx_buffer[c1218->rx_buffer_bytes] = data;
 10168f2:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 10168f6:	f89d 0003 	ldrb.w	r0, [sp, #3]
 10168fa:	18e1      	adds	r1, r4, r3
			c1218->rx_state = C1218_RX_IDENTITY;
 10168fc:	2202      	movs	r2, #2
			c1218->rx_buffer_bytes++;
 10168fe:	3301      	adds	r3, #1
			c1218->rx_buffer[c1218->rx_buffer_bytes] = data;
 1016900:	7508      	strb	r0, [r1, #20]
			c1218->rx_buffer_bytes++;
 1016902:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			c1218->rx_state = C1218_RX_IDENTITY;
 1016906:	7122      	strb	r2, [r4, #4]
			break;
 1016908:	e77e      	b.n	1016808 <C1218_rx_int_handler+0xfc>
			c1218->rx_state = C1218_RX_IDLE;
 101690a:	2300      	movs	r3, #0
 101690c:	7123      	strb	r3, [r4, #4]
			c1218->ongoing_transmission = false;
 101690e:	f884 3208 	strb.w	r3, [r4, #520]	; 0x208
    c1218->interrupt_context = false;
 1016912:	2300      	movs	r3, #0
 1016914:	f884 3209 	strb.w	r3, [r4, #521]	; 0x209
}
 1016918:	b002      	add	sp, #8
 101691a:	bd70      	pop	{r4, r5, r6, pc}
				c1218->rx_state = C1218_RX_LENGTH_L;
 101691c:	2306      	movs	r3, #6
 101691e:	7123      	strb	r3, [r4, #4]
 1016920:	e772      	b.n	1016808 <C1218_rx_int_handler+0xfc>
			else if ( (data == C1218_NOK) && (c1218->wait_for_ack == true) )
 1016922:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 1016926:	2b00      	cmp	r3, #0
 1016928:	f43f af60 	beq.w	10167ec <C1218_rx_int_handler+0xe0>
				TIMER_reset_ms_timer(c1218->response_timeout_timer);
 101692c:	f894 0202 	ldrb.w	r0, [r4, #514]	; 0x202
 1016930:	47a8      	blx	r5
				c1218->tx_retry();
 1016932:	f8d4 31fc 	ldr.w	r3, [r4, #508]	; 0x1fc
 1016936:	4798      	blx	r3
				c1218->tx_nbr_retries = 0;
 1016938:	2300      	movs	r3, #0
 101693a:	f884 3201 	strb.w	r3, [r4, #513]	; 0x201
 101693e:	e763      	b.n	1016808 <C1218_rx_int_handler+0xfc>
				c1218->rx_eop = true;
 1016940:	2301      	movs	r3, #1
 1016942:	71e3      	strb	r3, [r4, #7]
				SM_APP_vExecute_mfg_service(c1218);
 1016944:	4620      	mov	r0, r4
 1016946:	4b35      	ldr	r3, [pc, #212]	; (1016a1c <C1218_rx_int_handler+0x310>)
 1016948:	4798      	blx	r3
				xYieldRequired = xTaskResumeFromISR(c1218->os_task_id);
 101694a:	6820      	ldr	r0, [r4, #0]
 101694c:	4b34      	ldr	r3, [pc, #208]	; (1016a20 <C1218_rx_int_handler+0x314>)
 101694e:	4798      	blx	r3
				if ( xYieldRequired == pdTRUE )
 1016950:	2801      	cmp	r0, #1
 1016952:	f47f af33 	bne.w	10167bc <C1218_rx_int_handler+0xb0>
					portYIELD();
 1016956:	4b33      	ldr	r3, [pc, #204]	; (1016a24 <C1218_rx_int_handler+0x318>)
 1016958:	4798      	blx	r3
 101695a:	e72f      	b.n	10167bc <C1218_rx_int_handler+0xb0>
			if ( (data == C1218_STP) /*&& (c1218->wait_for_ack == false)*/ && (meter.power_failure == false))
 101695c:	4b32      	ldr	r3, [pc, #200]	; (1016a28 <C1218_rx_int_handler+0x31c>)
 101695e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 1016962:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 1016966:	2b00      	cmp	r3, #0
 1016968:	f47f af36 	bne.w	10167d8 <C1218_rx_int_handler+0xcc>
				c1218->rx_buffer_bytes++;
 101696c:	2301      	movs	r3, #1
				c1218->rx_buffer[c1218->rx_buffer_bytes] = data;
 101696e:	f89d 1003 	ldrb.w	r1, [sp, #3]
				c1218->rx_data_length = 0;
 1016972:	81a2      	strh	r2, [r4, #12]
				c1218->rx_data_bytes_remaining = 0;
 1016974:	8222      	strh	r2, [r4, #16]
				c1218->rx_error = 0;
 1016976:	71a2      	strb	r2, [r4, #6]
				c1218->rx_buffer[c1218->rx_buffer_bytes] = data;
 1016978:	7521      	strb	r1, [r4, #20]
				c1218->rx_buffer_bytes++;
 101697a:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
				c1218->rx_state = C1218_RX_STP;
 101697e:	7123      	strb	r3, [r4, #4]
 1016980:	e742      	b.n	1016808 <C1218_rx_int_handler+0xfc>
				if ( (c1218->rx_buffer[C1218_CTRL_INDEX] & 0b10000000) == 0b10000000 )
 1016982:	7da3      	ldrb	r3, [r4, #22]
 1016984:	0618      	lsls	r0, r3, #24
 1016986:	d421      	bmi.n	10169cc <C1218_rx_int_handler+0x2c0>
					if ( (c1218->rx_data_offset + c1218->rx_data_bytes) < (C1218_NUM_PACKETS*C1218_PACKET_SIZE) )
 1016988:	8a61      	ldrh	r1, [r4, #18]
 101698a:	7ba2      	ldrb	r2, [r4, #14]
 101698c:	f641 20f3 	movw	r0, #6899	; 0x1af3
 1016990:	188b      	adds	r3, r1, r2
 1016992:	4283      	cmp	r3, r0
 1016994:	dd62      	ble.n	1016a5c <C1218_rx_int_handler+0x350>
						c1218->rx_error = 1;
 1016996:	2201      	movs	r2, #1
						c1218->rx_data_offset += c1218->rx_data_bytes;
 1016998:	8263      	strh	r3, [r4, #18]
						c1218->rx_error = 1;
 101699a:	71a2      	strb	r2, [r4, #6]
 101699c:	f8d4 1204 	ldr.w	r1, [r4, #516]	; 0x204
 10169a0:	f643 2399 	movw	r3, #15001	; 0x3a99
 10169a4:	e001      	b.n	10169aa <C1218_rx_int_handler+0x29e>
		if (!timeout--) {
 10169a6:	3b01      	subs	r3, #1
 10169a8:	d00a      	beq.n	10169c0 <C1218_rx_int_handler+0x2b4>
	while( (c1218->uart->UART_SR & UART_SR_TXRDY) == 0 ) {
 10169aa:	694a      	ldr	r2, [r1, #20]
 10169ac:	0790      	lsls	r0, r2, #30
 10169ae:	d5fa      	bpl.n	10169a6 <C1218_rx_int_handler+0x29a>
 10169b0:	e6fe      	b.n	10167b0 <C1218_rx_int_handler+0xa4>
			else if ( (data == C1218_ACK) && (c1218->wait_for_ack == true) )
 10169b2:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 10169b6:	2b00      	cmp	r3, #0
 10169b8:	d138      	bne.n	1016a2c <C1218_rx_int_handler+0x320>
			else if ( (data == C1218_NOK) && (c1218->wait_for_ack == true) )
 10169ba:	f89d 3003 	ldrb.w	r3, [sp, #3]
 10169be:	e715      	b.n	10167ec <C1218_rx_int_handler+0xe0>
			c1218->io_configure();
 10169c0:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 10169c4:	4798      	blx	r3
 10169c6:	f8d4 1204 	ldr.w	r1, [r4, #516]	; 0x204
 10169ca:	e6f1      	b.n	10167b0 <C1218_rx_int_handler+0xa4>
					if ( (c1218->rx_buffer[C1218_CTRL_INDEX] & 0b01000000) == 0b01000000 )
 10169cc:	0659      	lsls	r1, r3, #25
 10169ce:	d55e      	bpl.n	1016a8e <C1218_rx_int_handler+0x382>
						if ( (c1218->rx_data_offset + c1218->rx_data_bytes) < (C1218_NUM_PACKETS*C1218_PACKET_SIZE) )
 10169d0:	8a60      	ldrh	r0, [r4, #18]
 10169d2:	7ba2      	ldrb	r2, [r4, #14]
						c1218->rx_buffer_previous_identity = c1218->rx_buffer[C1218_IDENTITY_INDEX];
 10169d4:	7d61      	ldrb	r1, [r4, #21]
 10169d6:	f884 10ae 	strb.w	r1, [r4, #174]	; 0xae
						if ( (c1218->rx_data_offset + c1218->rx_data_bytes) < (C1218_NUM_PACKETS*C1218_PACKET_SIZE) )
 10169da:	f641 25f3 	movw	r5, #6899	; 0x1af3
 10169de:	1881      	adds	r1, r0, r2
						c1218->rx_buffer_previous_crc = crc_rx;
 10169e0:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 10169e4:	f8a4 60ac 	strh.w	r6, [r4, #172]	; 0xac
						c1218->rx_buffer_previous_toggle_bit = c1218->rx_buffer[C1218_CTRL_INDEX] & 0b00100000;
 10169e8:	f003 0320 	and.w	r3, r3, #32
						if ( (c1218->rx_data_offset + c1218->rx_data_bytes) < (C1218_NUM_PACKETS*C1218_PACKET_SIZE) )
 10169ec:	42a9      	cmp	r1, r5
						c1218->rx_buffer_previous_toggle_bit = c1218->rx_buffer[C1218_CTRL_INDEX] & 0b00100000;
 10169ee:	f884 30af 	strb.w	r3, [r4, #175]	; 0xaf
						if ( (c1218->rx_data_offset + c1218->rx_data_bytes) < (C1218_NUM_PACKETS*C1218_PACKET_SIZE) )
 10169f2:	dd6c      	ble.n	1016ace <C1218_rx_int_handler+0x3c2>
							c1218->rx_error = 1;							
 10169f4:	2301      	movs	r3, #1
							c1218->rx_data_offset += c1218->rx_data_bytes;	
 10169f6:	8261      	strh	r1, [r4, #18]
							c1218->rx_error = 1;							
 10169f8:	71a3      	strb	r3, [r4, #6]
 10169fa:	f8d4 1204 	ldr.w	r1, [r4, #516]	; 0x204
{
 10169fe:	f643 2399 	movw	r3, #15001	; 0x3a99
 1016a02:	e001      	b.n	1016a08 <C1218_rx_int_handler+0x2fc>
		if (!timeout--) {
 1016a04:	3b01      	subs	r3, #1
 1016a06:	d0db      	beq.n	10169c0 <C1218_rx_int_handler+0x2b4>
	while( (c1218->uart->UART_SR & UART_SR_TXRDY) == 0 ) {
 1016a08:	694a      	ldr	r2, [r1, #20]
 1016a0a:	0796      	lsls	r6, r2, #30
 1016a0c:	d5fa      	bpl.n	1016a04 <C1218_rx_int_handler+0x2f8>
 1016a0e:	e6cf      	b.n	10167b0 <C1218_rx_int_handler+0xa4>
 1016a10:	0102bb09 	.word	0x0102bb09
 1016a14:	01016b5d 	.word	0x01016b5d
 1016a18:	0102ba8d 	.word	0x0102ba8d
 1016a1c:	01021359 	.word	0x01021359
 1016a20:	0102eb75 	.word	0x0102eb75
 1016a24:	0102ddbd 	.word	0x0102ddbd
 1016a28:	20016c2c 	.word	0x20016c2c
				c1218->wait_for_ack = false;
 1016a2c:	2300      	movs	r3, #0
 1016a2e:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
				c1218->tx_nbr_retries = 0;
 1016a32:	f884 3201 	strb.w	r3, [r4, #513]	; 0x201
				c1218->ongoing_transmission = false;
 1016a36:	f884 3208 	strb.w	r3, [r4, #520]	; 0x208
				TIMER_reset_ms_timer(c1218->response_timeout_timer);
 1016a3a:	f894 0202 	ldrb.w	r0, [r4, #514]	; 0x202
 1016a3e:	47a8      	blx	r5
				if ( c1218->tx_buffer[C1218_SEQ_NBR_INDEX] > 0 )
 1016a40:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
 1016a44:	2b00      	cmp	r3, #0
 1016a46:	f43f aedf 	beq.w	1016808 <C1218_rx_int_handler+0xfc>
	if( (c1218->tx_state == C1218_TX_IDLE) && (c1218->tx_buffer[C1218_SEQ_NBR_INDEX] > 0) )
 1016a4a:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
 1016a4e:	2b0b      	cmp	r3, #11
 1016a50:	f47f aeda 	bne.w	1016808 <C1218_rx_int_handler+0xfc>
 1016a54:	4620      	mov	r0, r4
 1016a56:	4b3f      	ldr	r3, [pc, #252]	; (1016b54 <C1218_rx_int_handler+0x448>)
 1016a58:	4798      	blx	r3
 1016a5a:	e6d5      	b.n	1016808 <C1218_rx_int_handler+0xfc>
						memcpy(&c1218->rx_data[c1218->rx_data_offset], &c1218->rx_buffer[C1218_DATA_INDEX], c1218->rx_data_bytes);
 1016a5c:	68a0      	ldr	r0, [r4, #8]
 1016a5e:	4b3e      	ldr	r3, [pc, #248]	; (1016b58 <C1218_rx_int_handler+0x44c>)
 1016a60:	4408      	add	r0, r1
 1016a62:	f104 011a 	add.w	r1, r4, #26
 1016a66:	4798      	blx	r3
						c1218->rx_data_offset += c1218->rx_data_bytes;
 1016a68:	8a62      	ldrh	r2, [r4, #18]
 1016a6a:	7ba3      	ldrb	r3, [r4, #14]
 1016a6c:	f8d4 1204 	ldr.w	r1, [r4, #516]	; 0x204
 1016a70:	4413      	add	r3, r2
						c1218->rx_error = 0;
 1016a72:	2200      	movs	r2, #0
						c1218->rx_data_offset += c1218->rx_data_bytes;
 1016a74:	8263      	strh	r3, [r4, #18]
						c1218->rx_error = 0;
 1016a76:	71a2      	strb	r2, [r4, #6]
 1016a78:	f643 2399 	movw	r3, #15001	; 0x3a99
 1016a7c:	e001      	b.n	1016a82 <C1218_rx_int_handler+0x376>
		if (!timeout--) {
 1016a7e:	3b01      	subs	r3, #1
 1016a80:	d01f      	beq.n	1016ac2 <C1218_rx_int_handler+0x3b6>
	while( (c1218->uart->UART_SR & UART_SR_TXRDY) == 0 ) {
 1016a82:	694a      	ldr	r2, [r1, #20]
 1016a84:	0795      	lsls	r5, r2, #30
 1016a86:	d5fa      	bpl.n	1016a7e <C1218_rx_int_handler+0x372>
	c1218->uart->UART_THR = C1218_ACK;
 1016a88:	2306      	movs	r3, #6
 1016a8a:	61cb      	str	r3, [r1, #28]
 1016a8c:	e692      	b.n	10167b4 <C1218_rx_int_handler+0xa8>
						if ( (c1218->rx_buffer_previous_identity == c1218->rx_buffer[C1218_IDENTITY_INDEX]) &&
 1016a8e:	7d61      	ldrb	r1, [r4, #21]
 1016a90:	f894 20ae 	ldrb.w	r2, [r4, #174]	; 0xae
 1016a94:	428a      	cmp	r2, r1
 1016a96:	d04a      	beq.n	1016b2e <C1218_rx_int_handler+0x422>
							if ( (c1218->rx_data_offset + c1218->rx_data_bytes) < (C1218_NUM_PACKETS*C1218_PACKET_SIZE) )//fix_added
 1016a98:	8a60      	ldrh	r0, [r4, #18]
 1016a9a:	7ba2      	ldrb	r2, [r4, #14]
 1016a9c:	f641 26f3 	movw	r6, #6899	; 0x1af3
 1016aa0:	1885      	adds	r5, r0, r2
 1016aa2:	42b5      	cmp	r5, r6
 1016aa4:	dd2a      	ble.n	1016afc <C1218_rx_int_handler+0x3f0>
								c1218->rx_buffer_previous_toggle_bit = c1218->rx_buffer[C1218_CTRL_INDEX] & 0b00100000;//fix_added
 1016aa6:	f003 0320 	and.w	r3, r3, #32
								c1218->rx_error = 1;
 1016aaa:	2001      	movs	r0, #1
								c1218->rx_buffer_previous_crc = crc_rx;
 1016aac:	f8bd 2004 	ldrh.w	r2, [sp, #4]
								c1218->rx_buffer_previous_toggle_bit = c1218->rx_buffer[C1218_CTRL_INDEX] & 0b00100000;//fix_added
 1016ab0:	f884 30af 	strb.w	r3, [r4, #175]	; 0xaf
								c1218->rx_data_offset += c1218->rx_data_bytes;
 1016ab4:	8265      	strh	r5, [r4, #18]
								c1218->rx_buffer_previous_identity = c1218->rx_buffer[C1218_IDENTITY_INDEX];//fix_added
 1016ab6:	f884 10ae 	strb.w	r1, [r4, #174]	; 0xae
								c1218->rx_error = 1;
 1016aba:	71a0      	strb	r0, [r4, #6]
								c1218->rx_buffer_previous_crc = crc_rx;
 1016abc:	f8a4 20ac 	strh.w	r2, [r4, #172]	; 0xac
 1016ac0:	e79b      	b.n	10169fa <C1218_rx_int_handler+0x2ee>
			c1218->io_configure();
 1016ac2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 1016ac6:	4798      	blx	r3
 1016ac8:	f8d4 1204 	ldr.w	r1, [r4, #516]	; 0x204
 1016acc:	e7dc      	b.n	1016a88 <C1218_rx_int_handler+0x37c>
							memcpy(&c1218->rx_data[c1218->rx_data_offset], &c1218->rx_buffer[C1218_DATA_INDEX], c1218->rx_data_bytes);
 1016ace:	68a1      	ldr	r1, [r4, #8]
 1016ad0:	4b21      	ldr	r3, [pc, #132]	; (1016b58 <C1218_rx_int_handler+0x44c>)
 1016ad2:	4408      	add	r0, r1
 1016ad4:	f104 011a 	add.w	r1, r4, #26
 1016ad8:	4798      	blx	r3
							c1218->rx_data_offset += c1218->rx_data_bytes;
 1016ada:	8a61      	ldrh	r1, [r4, #18]
 1016adc:	7ba3      	ldrb	r3, [r4, #14]
							c1218->rx_error = 0;
 1016ade:	2200      	movs	r2, #0
							c1218->rx_data_offset += c1218->rx_data_bytes;
 1016ae0:	440b      	add	r3, r1
 1016ae2:	8263      	strh	r3, [r4, #18]
							c1218->rx_error = 0;
 1016ae4:	71a2      	strb	r2, [r4, #6]
 1016ae6:	f8d4 1204 	ldr.w	r1, [r4, #516]	; 0x204
{
 1016aea:	f643 2399 	movw	r3, #15001	; 0x3a99
 1016aee:	e001      	b.n	1016af4 <C1218_rx_int_handler+0x3e8>
		if (!timeout--) {
 1016af0:	3b01      	subs	r3, #1
 1016af2:	d0e6      	beq.n	1016ac2 <C1218_rx_int_handler+0x3b6>
	while( (c1218->uart->UART_SR & UART_SR_TXRDY) == 0 ) {
 1016af4:	694a      	ldr	r2, [r1, #20]
 1016af6:	0792      	lsls	r2, r2, #30
 1016af8:	d5fa      	bpl.n	1016af0 <C1218_rx_int_handler+0x3e4>
 1016afa:	e7c5      	b.n	1016a88 <C1218_rx_int_handler+0x37c>
								memcpy(&c1218->rx_data[c1218->rx_data_offset], &c1218->rx_buffer[C1218_DATA_INDEX], c1218->rx_data_bytes);
 1016afc:	68a1      	ldr	r1, [r4, #8]
 1016afe:	4b16      	ldr	r3, [pc, #88]	; (1016b58 <C1218_rx_int_handler+0x44c>)
 1016b00:	4408      	add	r0, r1
 1016b02:	f104 011a 	add.w	r1, r4, #26
 1016b06:	4798      	blx	r3
								c1218->rx_data_offset += c1218->rx_data_bytes;
 1016b08:	8a60      	ldrh	r0, [r4, #18]
 1016b0a:	7ba2      	ldrb	r2, [r4, #14]
								c1218->rx_buffer_previous_toggle_bit = c1218->rx_buffer[C1218_CTRL_INDEX] & 0b00100000;
 1016b0c:	7da3      	ldrb	r3, [r4, #22]
								c1218->rx_buffer_previous_identity = c1218->rx_buffer[C1218_IDENTITY_INDEX];
 1016b0e:	7d65      	ldrb	r5, [r4, #21]
								c1218->rx_buffer_previous_crc = crc_rx;
 1016b10:	f8bd 1004 	ldrh.w	r1, [sp, #4]
								c1218->rx_buffer_previous_identity = c1218->rx_buffer[C1218_IDENTITY_INDEX];
 1016b14:	f884 50ae 	strb.w	r5, [r4, #174]	; 0xae
								c1218->rx_data_offset += c1218->rx_data_bytes;
 1016b18:	4402      	add	r2, r0
								c1218->rx_buffer_previous_toggle_bit = c1218->rx_buffer[C1218_CTRL_INDEX] & 0b00100000;
 1016b1a:	f003 0320 	and.w	r3, r3, #32
								c1218->rx_error = 0;
 1016b1e:	2000      	movs	r0, #0
								c1218->rx_data_offset += c1218->rx_data_bytes;
 1016b20:	8262      	strh	r2, [r4, #18]
								c1218->rx_buffer_previous_toggle_bit = c1218->rx_buffer[C1218_CTRL_INDEX] & 0b00100000;
 1016b22:	f884 30af 	strb.w	r3, [r4, #175]	; 0xaf
								c1218->rx_error = 0;
 1016b26:	71a0      	strb	r0, [r4, #6]
								c1218->rx_buffer_previous_crc = crc_rx;
 1016b28:	f8a4 10ac 	strh.w	r1, [r4, #172]	; 0xac
 1016b2c:	e7db      	b.n	1016ae6 <C1218_rx_int_handler+0x3da>
						if ( (c1218->rx_buffer_previous_identity == c1218->rx_buffer[C1218_IDENTITY_INDEX]) &&
 1016b2e:	f894 00af 	ldrb.w	r0, [r4, #175]	; 0xaf
 1016b32:	f003 0220 	and.w	r2, r3, #32
 1016b36:	4290      	cmp	r0, r2
 1016b38:	d1ae      	bne.n	1016a98 <C1218_rx_int_handler+0x38c>
							 (c1218->rx_buffer_previous_crc == crc_rx) )
 1016b3a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
						     (c1218->rx_buffer_previous_toggle_bit == (c1218->rx_buffer[C1218_CTRL_INDEX] & 0b00100000)) &&
 1016b3e:	f8b4 00ac 	ldrh.w	r0, [r4, #172]	; 0xac
							 (c1218->rx_buffer_previous_crc == crc_rx) )
 1016b42:	b292      	uxth	r2, r2
						     (c1218->rx_buffer_previous_toggle_bit == (c1218->rx_buffer[C1218_CTRL_INDEX] & 0b00100000)) &&
 1016b44:	4290      	cmp	r0, r2
 1016b46:	d1a7      	bne.n	1016a98 <C1218_rx_int_handler+0x38c>
  __ASM volatile ("nop");
 1016b48:	bf00      	nop
					if(c1218->rx_error == 0)
 1016b4a:	79a3      	ldrb	r3, [r4, #6]
 1016b4c:	2b00      	cmp	r3, #0
 1016b4e:	d0ca      	beq.n	1016ae6 <C1218_rx_int_handler+0x3da>
 1016b50:	e753      	b.n	10169fa <C1218_rx_int_handler+0x2ee>
 1016b52:	bf00      	nop
 1016b54:	01016261 	.word	0x01016261
 1016b58:	01030a3d 	.word	0x01030a3d

01016b5c <CRC_crc16>:
uint16_t CRC_crc16(const uint8_t *pData, uint16_t num_bytes)
{  
  static volatile uint16_t crc; 
  static volatile uint8_t i, byte, temp;
	
    crc = 0xffff;    // Reset crc
 1016b5c:	4a21      	ldr	r2, [pc, #132]	; (1016be4 <CRC_crc16+0x88>)
{  
 1016b5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 1016b60:	3901      	subs	r1, #1
    crc = 0xffff;    // Reset crc
 1016b62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 1016b66:	4c20      	ldr	r4, [pc, #128]	; (1016be8 <CRC_crc16+0x8c>)
 1016b68:	4d20      	ldr	r5, [pc, #128]	; (1016bec <CRC_crc16+0x90>)
 1016b6a:	4e21      	ldr	r6, [pc, #132]	; (1016bf0 <CRC_crc16+0x94>)
 1016b6c:	8013      	strh	r3, [r2, #0]
 1016b6e:	fa10 f781 	uxtah	r7, r0, r1
    do 
    { 
        for (i = 0, byte = *pData++; i < 8; i++, byte >>= 1) 
 1016b72:	f04f 0e00 	mov.w	lr, #0
 1016b76:	3801      	subs	r0, #1
        { 
            temp = (uint8_t) ((uint8_t) crc & (uint8_t) 0x01); 
            crc >>= 1; 
            if (temp ^ (byte & 0x01)) 
            crc ^= 0x8408; 
 1016b78:	f248 4108 	movw	r1, #33800	; 0x8408
        for (i = 0, byte = *pData++; i < 8; i++, byte >>= 1) 
 1016b7c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 1016b80:	f884 e000 	strb.w	lr, [r4]
 1016b84:	702b      	strb	r3, [r5, #0]
 1016b86:	7823      	ldrb	r3, [r4, #0]
 1016b88:	2b07      	cmp	r3, #7
 1016b8a:	d81c      	bhi.n	1016bc6 <CRC_crc16+0x6a>
            temp = (uint8_t) ((uint8_t) crc & (uint8_t) 0x01); 
 1016b8c:	8813      	ldrh	r3, [r2, #0]
 1016b8e:	f003 0301 	and.w	r3, r3, #1
 1016b92:	7033      	strb	r3, [r6, #0]
            crc >>= 1; 
 1016b94:	8813      	ldrh	r3, [r2, #0]
 1016b96:	f3c3 034e 	ubfx	r3, r3, #1, #15
 1016b9a:	8013      	strh	r3, [r2, #0]
            if (temp ^ (byte & 0x01)) 
 1016b9c:	f896 c000 	ldrb.w	ip, [r6]
 1016ba0:	782b      	ldrb	r3, [r5, #0]
 1016ba2:	f003 0301 	and.w	r3, r3, #1
 1016ba6:	4563      	cmp	r3, ip
 1016ba8:	d003      	beq.n	1016bb2 <CRC_crc16+0x56>
            crc ^= 0x8408; 
 1016baa:	8813      	ldrh	r3, [r2, #0]
 1016bac:	b29b      	uxth	r3, r3
 1016bae:	404b      	eors	r3, r1
 1016bb0:	8013      	strh	r3, [r2, #0]
        for (i = 0, byte = *pData++; i < 8; i++, byte >>= 1) 
 1016bb2:	7823      	ldrb	r3, [r4, #0]
 1016bb4:	3301      	adds	r3, #1
 1016bb6:	b2db      	uxtb	r3, r3
 1016bb8:	7023      	strb	r3, [r4, #0]
 1016bba:	782b      	ldrb	r3, [r5, #0]
 1016bbc:	085b      	lsrs	r3, r3, #1
 1016bbe:	702b      	strb	r3, [r5, #0]
 1016bc0:	7823      	ldrb	r3, [r4, #0]
 1016bc2:	2b07      	cmp	r3, #7
 1016bc4:	d9e2      	bls.n	1016b8c <CRC_crc16+0x30>
        }
    } 
    while (--num_bytes); 
 1016bc6:	42b8      	cmp	r0, r7
 1016bc8:	d1d8      	bne.n	1016b7c <CRC_crc16+0x20>
  
  crc = ~((crc << 8) | (crc >> 8));
 1016bca:	8811      	ldrh	r1, [r2, #0]
 1016bcc:	8813      	ldrh	r3, [r2, #0]
 1016bce:	b289      	uxth	r1, r1
 1016bd0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 1016bd4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 1016bd8:	43db      	mvns	r3, r3
 1016bda:	b29b      	uxth	r3, r3
 1016bdc:	8013      	strh	r3, [r2, #0]
  return crc;
 1016bde:	8810      	ldrh	r0, [r2, #0]
}
 1016be0:	b280      	uxth	r0, r0
 1016be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1016be4:	20000a0c 	.word	0x20000a0c
 1016be8:	20000a58 	.word	0x20000a58
 1016bec:	20000a08 	.word	0x20000a08
 1016bf0:	20000a62 	.word	0x20000a62

01016bf4 <CRC_2s_complement>:
 * \param num_bytes The length of the data
 * \retval crc The CRC of the data
 ******************************************************************************
 */
uint8_t CRC_2s_complement(const uint8_t *pData, uint16_t num_bytes)
{  
 1016bf4:	b430      	push	{r4, r5}
	static volatile uint8_t crc; 
	static volatile uint16_t i;
	
    crc = 0;    // Reset crc

    for (i = 0; i < num_bytes; i++) 
 1016bf6:	4a0f      	ldr	r2, [pc, #60]	; (1016c34 <CRC_2s_complement+0x40>)
    crc = 0;    // Reset crc
 1016bf8:	4c0f      	ldr	r4, [pc, #60]	; (1016c38 <CRC_2s_complement+0x44>)
 1016bfa:	2300      	movs	r3, #0
 1016bfc:	7023      	strb	r3, [r4, #0]
    for (i = 0; i < num_bytes; i++) 
 1016bfe:	8013      	strh	r3, [r2, #0]
 1016c00:	8813      	ldrh	r3, [r2, #0]
 1016c02:	b29b      	uxth	r3, r3
 1016c04:	4299      	cmp	r1, r3
 1016c06:	d90d      	bls.n	1016c24 <CRC_2s_complement+0x30>
    { 
        crc += *pData++;
 1016c08:	7823      	ldrb	r3, [r4, #0]
 1016c0a:	f810 5b01 	ldrb.w	r5, [r0], #1
 1016c0e:	442b      	add	r3, r5
 1016c10:	b2db      	uxtb	r3, r3
 1016c12:	7023      	strb	r3, [r4, #0]
    for (i = 0; i < num_bytes; i++) 
 1016c14:	8813      	ldrh	r3, [r2, #0]
 1016c16:	3301      	adds	r3, #1
 1016c18:	b29b      	uxth	r3, r3
 1016c1a:	8013      	strh	r3, [r2, #0]
 1016c1c:	8813      	ldrh	r3, [r2, #0]
 1016c1e:	b29b      	uxth	r3, r3
 1016c20:	428b      	cmp	r3, r1
 1016c22:	d3f1      	bcc.n	1016c08 <CRC_2s_complement+0x14>
    }

	crc = 0xFF - crc + 1;
 1016c24:	7823      	ldrb	r3, [r4, #0]
 1016c26:	425b      	negs	r3, r3
 1016c28:	b2db      	uxtb	r3, r3
 1016c2a:	7023      	strb	r3, [r4, #0]
	return crc;
 1016c2c:	7820      	ldrb	r0, [r4, #0]
}
 1016c2e:	bc30      	pop	{r4, r5}
	return crc;
 1016c30:	b2c0      	uxtb	r0, r0
}
 1016c32:	4770      	bx	lr
 1016c34:	20000a5a 	.word	0x20000a5a
 1016c38:	20000a0e 	.word	0x20000a0e

01016c3c <CRC_image_crc16_calc>:
 * \param num_bytes The length of the data
 * \retval crc The CRC of the data
 ******************************************************************************
 */
extern uint32_t CRC_image_crc16_calc(void)
{
 1016c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    static uint32_t data_count;
	static uint32_t flash_null_values_counter= 0x00000000;

    //***verify update integrity        
    data_count = 0x6000; /*24 pages 1kbyte*/
    app_address = IMAGE_APP_START_ADDR;
 1016c40:	4bd3      	ldr	r3, [pc, #844]	; (1016f90 <CRC_image_crc16_calc+0x354>)
 1016c42:	f8df 838c 	ldr.w	r8, [pc, #908]	; 1016fd0 <CRC_image_crc16_calc+0x394>
    data_count = 0x6000; /*24 pages 1kbyte*/
 1016c46:	4ad3      	ldr	r2, [pc, #844]	; (1016f94 <CRC_image_crc16_calc+0x358>)
    app_address = IMAGE_APP_START_ADDR;
 1016c48:	f8c3 8000 	str.w	r8, [r3]
    data_count = 0x6000; /*24 pages 1kbyte*/
 1016c4c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 1016c50:	6013      	str	r3, [r2, #0]
 1016c52:	4ad1      	ldr	r2, [pc, #836]	; (1016f98 <CRC_image_crc16_calc+0x35c>)
    data_flash  = (*(__IO uint32_t *)app_address);   
 1016c54:	4fd1      	ldr	r7, [pc, #836]	; (1016f9c <CRC_image_crc16_calc+0x360>)
 1016c56:	f8d8 5000 	ldr.w	r5, [r8]
 1016c5a:	7812      	ldrb	r2, [r2, #0]
 1016c5c:	603d      	str	r5, [r7, #0]
{
 1016c5e:	b087      	sub	sp, #28
	
	do_crc_task = true;
    last_turn = false;
 1016c60:	4fcf      	ldr	r7, [pc, #828]	; (1016fa0 <CRC_image_crc16_calc+0x364>)
 1016c62:	9202      	str	r2, [sp, #8]
 1016c64:	4acf      	ldr	r2, [pc, #828]	; (1016fa4 <CRC_image_crc16_calc+0x368>)
	crc = 0xffff;
 1016c66:	4bd0      	ldr	r3, [pc, #832]	; (1016fa8 <CRC_image_crc16_calc+0x36c>)
 1016c68:	6812      	ldr	r2, [r2, #0]
 1016c6a:	9201      	str	r2, [sp, #4]
    last_turn = false;
 1016c6c:	f04f 0c00 	mov.w	ip, #0
 1016c70:	f887 c000 	strb.w	ip, [r7]
	do_crc_task = true;
 1016c74:	4fcd      	ldr	r7, [pc, #820]	; (1016fac <CRC_image_crc16_calc+0x370>)
		     }
		   }
		  
		   else
		   {
		      end_app[0] = end_app[4];
 1016c76:	4cce      	ldr	r4, [pc, #824]	; (1016fb0 <CRC_image_crc16_calc+0x374>)
		     for(j=0;j<4;j++)
 1016c78:	4ece      	ldr	r6, [pc, #824]	; (1016fb4 <CRC_image_crc16_calc+0x378>)
 1016c7a:	4acf      	ldr	r2, [pc, #828]	; (1016fb8 <CRC_image_crc16_calc+0x37c>)
 1016c7c:	49cf      	ldr	r1, [pc, #828]	; (1016fbc <CRC_image_crc16_calc+0x380>)
 1016c7e:	48d0      	ldr	r0, [pc, #832]	; (1016fc0 <CRC_image_crc16_calc+0x384>)
	crc = 0xffff;
 1016c80:	f8cd c014 	str.w	ip, [sp, #20]
 1016c84:	f64f 75ff 	movw	r5, #65535	; 0xffff
	do_crc_task = true;
 1016c88:	f04f 0e01 	mov.w	lr, #1
	crc = 0xffff;
 1016c8c:	801d      	strh	r5, [r3, #0]
 1016c8e:	46e2      	mov	sl, ip
 1016c90:	f8cd c010 	str.w	ip, [sp, #16]
 1016c94:	f8cd c000 	str.w	ip, [sp]
	do_crc_task = true;
 1016c98:	f887 e000 	strb.w	lr, [r7]
		             crc ^= 0x8408;               
 1016c9c:	f248 4508 	movw	r5, #33800	; 0x8408
 1016ca0:	46c3      	mov	fp, r8
		 data_flash  = (*(__IO uint32_t *)app_address); 
 1016ca2:	4fbe      	ldr	r7, [pc, #760]	; (1016f9c <CRC_image_crc16_calc+0x360>)
 1016ca4:	f8db e000 	ldr.w	lr, [fp]
 1016ca8:	f8c7 e000 	str.w	lr, [r7]
		 flash_buffer[3]= (uint8_t)(data_flash >> 24);
 1016cac:	f8d7 e000 	ldr.w	lr, [r7]
		 flash_buffer[2]= (uint8_t)(data_flash >> 16);
 1016cb0:	f8d7 c000 	ldr.w	ip, [r7]
		 flash_buffer[1]= (uint8_t)(data_flash >> 8);       
 1016cb4:	f8d7 8000 	ldr.w	r8, [r7]
		 flash_buffer[0]= (uint8_t)(data_flash); 
 1016cb8:	f8d7 9000 	ldr.w	r9, [r7]
		 flash_buffer[3]= (uint8_t)(data_flash >> 24);
 1016cbc:	4fc1      	ldr	r7, [pc, #772]	; (1016fc4 <CRC_image_crc16_calc+0x388>)
 1016cbe:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
		 flash_buffer[2]= (uint8_t)(data_flash >> 16);
 1016cc2:	f3cc 4c07 	ubfx	ip, ip, #16, #8
		 flash_buffer[1]= (uint8_t)(data_flash >> 8);       
 1016cc6:	f3c8 2807 	ubfx	r8, r8, #8, #8
		 flash_buffer[0]= (uint8_t)(data_flash); 
 1016cca:	fa5f f989 	uxtb.w	r9, r9
		 flash_buffer[3]= (uint8_t)(data_flash >> 24);
 1016cce:	f887 e003 	strb.w	lr, [r7, #3]
		 flash_buffer[2]= (uint8_t)(data_flash >> 16);
 1016cd2:	f887 c002 	strb.w	ip, [r7, #2]
		 flash_buffer[1]= (uint8_t)(data_flash >> 8);       
 1016cd6:	f887 8001 	strb.w	r8, [r7, #1]
		 flash_buffer[0]= (uint8_t)(data_flash); 
 1016cda:	f887 9000 	strb.w	r9, [r7]
		  if(last_turn == false)
 1016cde:	9f00      	ldr	r7, [sp, #0]
 1016ce0:	2f00      	cmp	r7, #0
 1016ce2:	f040 8116 	bne.w	1016f12 <CRC_image_crc16_calc+0x2d6>
		     for(j=0;j<4;j++)
 1016ce6:	7037      	strb	r7, [r6, #0]
 1016ce8:	f896 e000 	ldrb.w	lr, [r6]
 1016cec:	f1be 0f03 	cmp.w	lr, #3
 1016cf0:	f200 809d 	bhi.w	1016e2e <CRC_image_crc16_calc+0x1f2>
		          for (i = 0, byte = flash_buffer[j] ; i < 8; i++, byte >>= 1) 
 1016cf4:	f8dd 9000 	ldr.w	r9, [sp]
 1016cf8:	f882 9000 	strb.w	r9, [r2]
 1016cfc:	f896 e000 	ldrb.w	lr, [r6]
 1016d00:	4fb0      	ldr	r7, [pc, #704]	; (1016fc4 <CRC_image_crc16_calc+0x388>)
 1016d02:	f817 e00e 	ldrb.w	lr, [r7, lr]
 1016d06:	f881 e000 	strb.w	lr, [r1]
 1016d0a:	f892 e000 	ldrb.w	lr, [r2]
 1016d0e:	f1be 0f07 	cmp.w	lr, #7
 1016d12:	d82e      	bhi.n	1016d72 <CRC_image_crc16_calc+0x136>
		             temp = (uint8_t) ((uint8_t) crc & (uint8_t) 0x01); 
 1016d14:	f8b3 e000 	ldrh.w	lr, [r3]
 1016d18:	f00e 0e01 	and.w	lr, lr, #1
 1016d1c:	f880 e000 	strb.w	lr, [r0]
		             crc >>= 1; 
 1016d20:	f8b3 e000 	ldrh.w	lr, [r3]
 1016d24:	f3ce 0e4e 	ubfx	lr, lr, #1, #15
 1016d28:	f8a3 e000 	strh.w	lr, [r3]
		             if (temp ^ (byte & 0x01)) 
 1016d2c:	f890 c000 	ldrb.w	ip, [r0]
 1016d30:	f891 e000 	ldrb.w	lr, [r1]
 1016d34:	f00e 0e01 	and.w	lr, lr, #1
 1016d38:	45f4      	cmp	ip, lr
 1016d3a:	d007      	beq.n	1016d4c <CRC_image_crc16_calc+0x110>
		             crc ^= 0x8408;               
 1016d3c:	f8b3 e000 	ldrh.w	lr, [r3]
 1016d40:	fa1f fe8e 	uxth.w	lr, lr
 1016d44:	ea8e 0e05 	eor.w	lr, lr, r5
 1016d48:	f8a3 e000 	strh.w	lr, [r3]
		          for (i = 0, byte = flash_buffer[j] ; i < 8; i++, byte >>= 1) 
 1016d4c:	f892 e000 	ldrb.w	lr, [r2]
 1016d50:	f10e 0e01 	add.w	lr, lr, #1
 1016d54:	fa5f fe8e 	uxtb.w	lr, lr
 1016d58:	f882 e000 	strb.w	lr, [r2]
 1016d5c:	f891 e000 	ldrb.w	lr, [r1]
 1016d60:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
 1016d64:	f881 e000 	strb.w	lr, [r1]
 1016d68:	f892 e000 	ldrb.w	lr, [r2]
 1016d6c:	f1be 0f07 	cmp.w	lr, #7
 1016d70:	d9d0      	bls.n	1016d14 <CRC_image_crc16_calc+0xd8>
		          end_app[0] = end_app[1];
 1016d72:	f894 e001 	ldrb.w	lr, [r4, #1]
		          end_app[7] = flash_buffer[j];
 1016d76:	4f93      	ldr	r7, [pc, #588]	; (1016fc4 <CRC_image_crc16_calc+0x388>)
		          end_app[0] = end_app[1];
 1016d78:	fa5f fe8e 	uxtb.w	lr, lr
 1016d7c:	f884 e000 	strb.w	lr, [r4]
				  end_app[1] = end_app[2];
 1016d80:	f894 e002 	ldrb.w	lr, [r4, #2]
 1016d84:	fa5f fe8e 	uxtb.w	lr, lr
 1016d88:	f884 e001 	strb.w	lr, [r4, #1]
				  end_app[2] = end_app[3];
 1016d8c:	f894 e003 	ldrb.w	lr, [r4, #3]
 1016d90:	fa5f fe8e 	uxtb.w	lr, lr
 1016d94:	f884 e002 	strb.w	lr, [r4, #2]
				  end_app[3] = end_app[4];
 1016d98:	f894 e004 	ldrb.w	lr, [r4, #4]
 1016d9c:	fa5f fe8e 	uxtb.w	lr, lr
 1016da0:	f884 e003 	strb.w	lr, [r4, #3]
				  end_app[4] = end_app[5];
 1016da4:	f894 e005 	ldrb.w	lr, [r4, #5]
 1016da8:	fa5f fe8e 	uxtb.w	lr, lr
 1016dac:	f884 e004 	strb.w	lr, [r4, #4]
		          end_app[5] = end_app[6];
 1016db0:	f894 e006 	ldrb.w	lr, [r4, #6]
 1016db4:	fa5f fe8e 	uxtb.w	lr, lr
 1016db8:	f884 e005 	strb.w	lr, [r4, #5]
		          end_app[6] = end_app[7];
 1016dbc:	f894 e007 	ldrb.w	lr, [r4, #7]
 1016dc0:	fa5f fe8e 	uxtb.w	lr, lr
 1016dc4:	f884 e006 	strb.w	lr, [r4, #6]
		          end_app[7] = flash_buffer[j];
 1016dc8:	f896 e000 	ldrb.w	lr, [r6]
 1016dcc:	f817 e00e 	ldrb.w	lr, [r7, lr]
 1016dd0:	f884 e007 	strb.w	lr, [r4, #7]
		          if ((end_app[0] == ' ') &(end_app[1] == ' ') & (end_app[2] == 'E') && (end_app[3] == 'N') && (end_app[4] == 'D') && (end_app[5] == 'A') && (end_app[6] == 'P') && (end_app[7] == 'P'))
 1016dd4:	f894 e000 	ldrb.w	lr, [r4]
 1016dd8:	f894 8001 	ldrb.w	r8, [r4, #1]
 1016ddc:	f894 c002 	ldrb.w	ip, [r4, #2]
 1016de0:	f1be 0f20 	cmp.w	lr, #32
 1016de4:	bf08      	it	eq
 1016de6:	f1b8 0f20 	cmpeq.w	r8, #32
 1016dea:	bf0c      	ite	eq
 1016dec:	f04f 0e01 	moveq.w	lr, #1
 1016df0:	f04f 0e00 	movne.w	lr, #0
 1016df4:	f1bc 0f45 	cmp.w	ip, #69	; 0x45
 1016df8:	bf14      	ite	ne
 1016dfa:	f04f 0e00 	movne.w	lr, #0
 1016dfe:	f00e 0e01 	andeq.w	lr, lr, #1
 1016e02:	f1be 0f00 	cmp.w	lr, #0
 1016e06:	d004      	beq.n	1016e12 <CRC_image_crc16_calc+0x1d6>
 1016e08:	f894 c003 	ldrb.w	ip, [r4, #3]
 1016e0c:	f1bc 0f4e 	cmp.w	ip, #78	; 0x4e
 1016e10:	d045      	beq.n	1016e9e <CRC_image_crc16_calc+0x262>
		     for(j=0;j<4;j++)
 1016e12:	f896 e000 	ldrb.w	lr, [r6]
 1016e16:	f10e 0e01 	add.w	lr, lr, #1
 1016e1a:	fa5f fe8e 	uxtb.w	lr, lr
 1016e1e:	f886 e000 	strb.w	lr, [r6]
 1016e22:	f896 e000 	ldrb.w	lr, [r6]
 1016e26:	f1be 0f03 	cmp.w	lr, #3
 1016e2a:	f67f af65 	bls.w	1016cf8 <CRC_image_crc16_calc+0xbc>
			          last_turn = true;
 1016e2e:	f04f 0c01 	mov.w	ip, #1
		   }
		          
		app_address = app_address + 4;
		data_count = data_count - 4;
		
		if (data_flash == 0xFFFFFFFF)
 1016e32:	4f5a      	ldr	r7, [pc, #360]	; (1016f9c <CRC_image_crc16_calc+0x360>)
 1016e34:	f8d7 8000 	ldr.w	r8, [r7]
		app_address = app_address + 4;
 1016e38:	f10b 0b04 	add.w	fp, fp, #4
 1016e3c:	f1cb 7e82 	rsb	lr, fp, #17039360	; 0x1040000
		if (data_flash == 0xFFFFFFFF)
 1016e40:	f1b8 3fff 	cmp.w	r8, #4294967295
 1016e44:	f50e 3eb0 	add.w	lr, lr, #90112	; 0x16000
 1016e48:	f000 80c4 	beq.w	1016fd4 <CRC_image_crc16_calc+0x398>
		{
		  flash_null_values_counter++;
		}  
		else
		{
		  flash_null_values_counter = 0;
 1016e4c:	2700      	movs	r7, #0
 1016e4e:	9701      	str	r7, [sp, #4]
			 crc16_flash_calc = crc16_flash_calc | 0x00;
		     crc16_flash_calc = crc16_flash_calc | 0x00;
			 return crc16_flash_calc;
		}
	}
	while ( (do_crc_task == true) && (app_address < IMAGE_APP_END_ADDR));
 1016e50:	f1bc 0f00 	cmp.w	ip, #0
 1016e54:	f000 80f3 	beq.w	101703e <CRC_image_crc16_calc+0x402>
 1016e58:	f1bb 7f84 	cmp.w	fp, #17301504	; 0x1080000
 1016e5c:	f47f af21 	bne.w	1016ca2 <CRC_image_crc16_calc+0x66>
 1016e60:	9b04      	ldr	r3, [sp, #16]
 1016e62:	2b00      	cmp	r3, #0
 1016e64:	f040 8100 	bne.w	1017068 <CRC_image_crc16_calc+0x42c>
 1016e68:	9b05      	ldr	r3, [sp, #20]
 1016e6a:	b11b      	cbz	r3, 1016e74 <CRC_image_crc16_calc+0x238>
 1016e6c:	4b4a      	ldr	r3, [pc, #296]	; (1016f98 <CRC_image_crc16_calc+0x35c>)
 1016e6e:	f89d 2008 	ldrb.w	r2, [sp, #8]
 1016e72:	701a      	strb	r2, [r3, #0]
 1016e74:	f1ba 0f00 	cmp.w	sl, #0
 1016e78:	d002      	beq.n	1016e80 <CRC_image_crc16_calc+0x244>
 1016e7a:	4a4c      	ldr	r2, [pc, #304]	; (1016fac <CRC_image_crc16_calc+0x370>)
 1016e7c:	2301      	movs	r3, #1
 1016e7e:	7013      	strb	r3, [r2, #0]
 1016e80:	4948      	ldr	r1, [pc, #288]	; (1016fa4 <CRC_image_crc16_calc+0x368>)
 1016e82:	9801      	ldr	r0, [sp, #4]
 1016e84:	6008      	str	r0, [r1, #0]
 1016e86:	4942      	ldr	r1, [pc, #264]	; (1016f90 <CRC_image_crc16_calc+0x354>)
 1016e88:	4b4f      	ldr	r3, [pc, #316]	; (1016fc8 <CRC_image_crc16_calc+0x38c>)
 1016e8a:	f04f 7284 	mov.w	r2, #17301504	; 0x1080000
 1016e8e:	600a      	str	r2, [r1, #0]
 1016e90:	4a40      	ldr	r2, [pc, #256]	; (1016f94 <CRC_image_crc16_calc+0x358>)
 1016e92:	6013      	str	r3, [r2, #0]
	return crc16_flash_calc;	
 1016e94:	4b4d      	ldr	r3, [pc, #308]	; (1016fcc <CRC_image_crc16_calc+0x390>)
 1016e96:	6818      	ldr	r0, [r3, #0]
}
 1016e98:	b007      	add	sp, #28
 1016e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		          if ((end_app[0] == ' ') &(end_app[1] == ' ') & (end_app[2] == 'E') && (end_app[3] == 'N') && (end_app[4] == 'D') && (end_app[5] == 'A') && (end_app[6] == 'P') && (end_app[7] == 'P'))
 1016e9e:	f894 c004 	ldrb.w	ip, [r4, #4]
 1016ea2:	f1bc 0f44 	cmp.w	ip, #68	; 0x44
 1016ea6:	d1b4      	bne.n	1016e12 <CRC_image_crc16_calc+0x1d6>
 1016ea8:	f894 c005 	ldrb.w	ip, [r4, #5]
 1016eac:	f1bc 0f41 	cmp.w	ip, #65	; 0x41
 1016eb0:	d1af      	bne.n	1016e12 <CRC_image_crc16_calc+0x1d6>
 1016eb2:	f894 c006 	ldrb.w	ip, [r4, #6]
 1016eb6:	f1bc 0f50 	cmp.w	ip, #80	; 0x50
 1016eba:	d1aa      	bne.n	1016e12 <CRC_image_crc16_calc+0x1d6>
 1016ebc:	f894 c007 	ldrb.w	ip, [r4, #7]
 1016ec0:	f1bc 0f50 	cmp.w	ip, #80	; 0x50
 1016ec4:	d1a5      	bne.n	1016e12 <CRC_image_crc16_calc+0x1d6>
			          crc = ~((crc << 8) | (crc >> 8));
 1016ec6:	f8b3 8000 	ldrh.w	r8, [r3]
 1016eca:	f8b3 c000 	ldrh.w	ip, [r3]
			          crc16_flash_calc = (uint32_t)(((uint32_t)crc)<<16);
 1016ece:	4f3f      	ldr	r7, [pc, #252]	; (1016fcc <CRC_image_crc16_calc+0x390>)
			          j=4;
 1016ed0:	f8cd e014 	str.w	lr, [sp, #20]
			          crc = ~((crc << 8) | (crc >> 8));
 1016ed4:	fa1f f888 	uxth.w	r8, r8
 1016ed8:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 1016edc:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
 1016ee0:	ea6f 0c0c 	mvn.w	ip, ip
 1016ee4:	fa1f fc8c 	uxth.w	ip, ip
 1016ee8:	f8a3 c000 	strh.w	ip, [r3]
			          crc16_flash_calc = (uint32_t)(((uint32_t)crc)<<16);
 1016eec:	f8b3 c000 	ldrh.w	ip, [r3]
			          j=4;
 1016ef0:	f8cd e010 	str.w	lr, [sp, #16]
			          crc16_flash_calc = (uint32_t)(((uint32_t)crc)<<16);
 1016ef4:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 1016ef8:	f8c7 c000 	str.w	ip, [r7]
			          var_1 = j;
 1016efc:	f896 c000 	ldrb.w	ip, [r6]
			          last_turn = true;
 1016f00:	f8cd e000 	str.w	lr, [sp]
			          j=4;
 1016f04:	f04f 0704 	mov.w	r7, #4
 1016f08:	7037      	strb	r7, [r6, #0]
			          var_1 = j;
 1016f0a:	fa5f f78c 	uxtb.w	r7, ip
 1016f0e:	9702      	str	r7, [sp, #8]
 1016f10:	e77f      	b.n	1016e12 <CRC_image_crc16_calc+0x1d6>
		      end_app[0] = end_app[4];
 1016f12:	f894 a004 	ldrb.w	sl, [r4, #4]
 1016f16:	fa5f fa8a 	uxtb.w	sl, sl
 1016f1a:	f884 a000 	strb.w	sl, [r4]
			  end_app[1] = end_app[5];
 1016f1e:	f894 a005 	ldrb.w	sl, [r4, #5]
 1016f22:	fa5f fa8a 	uxtb.w	sl, sl
 1016f26:	f884 a001 	strb.w	sl, [r4, #1]
			  end_app[2] = end_app[6];
 1016f2a:	f894 a006 	ldrb.w	sl, [r4, #6]
 1016f2e:	fa5f fa8a 	uxtb.w	sl, sl
 1016f32:	f884 a002 	strb.w	sl, [r4, #2]
			  end_app[3] = end_app[7];
 1016f36:	f894 a007 	ldrb.w	sl, [r4, #7]
 1016f3a:	fa5f f78a 	uxtb.w	r7, sl
 1016f3e:	9703      	str	r7, [sp, #12]
		      crc16_flash_calc = crc16_flash_calc | (uint32_t)((uint32_t) end_app[var_1+3]<<8);
 1016f40:	9f02      	ldr	r7, [sp, #8]
 1016f42:	f107 0a03 	add.w	sl, r7, #3
			  end_app[3] = end_app[7];
 1016f46:	f89d 700c 	ldrb.w	r7, [sp, #12]
 1016f4a:	70e7      	strb	r7, [r4, #3]
		      crc16_flash_calc = crc16_flash_calc | (uint32_t)((uint32_t) end_app[var_1+3]<<8);
 1016f4c:	4f1f      	ldr	r7, [pc, #124]	; (1016fcc <CRC_image_crc16_calc+0x390>)
			  end_app[4] = flash_buffer[0];
 1016f4e:	f884 9004 	strb.w	r9, [r4, #4]
		      end_app[5] = flash_buffer[1];
 1016f52:	f884 8005 	strb.w	r8, [r4, #5]
		      end_app[6] = flash_buffer[2];
 1016f56:	f884 c006 	strb.w	ip, [r4, #6]
		      end_app[7] = flash_buffer[3];
 1016f5a:	f884 e007 	strb.w	lr, [r4, #7]
		      crc16_flash_calc = crc16_flash_calc | (uint32_t)((uint32_t) end_app[var_1+3]<<8);
 1016f5e:	f814 800a 	ldrb.w	r8, [r4, sl]
 1016f62:	f8d7 c000 	ldr.w	ip, [r7]
		      crc16_flash_calc = crc16_flash_calc | (uint32_t) end_app[var_1+2];
 1016f66:	9f02      	ldr	r7, [sp, #8]
 1016f68:	f8dd a000 	ldr.w	sl, [sp]
 1016f6c:	f107 0e02 	add.w	lr, r7, #2
		      crc16_flash_calc = crc16_flash_calc | (uint32_t)((uint32_t) end_app[var_1+3]<<8);
 1016f70:	4f16      	ldr	r7, [pc, #88]	; (1016fcc <CRC_image_crc16_calc+0x390>)
 1016f72:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
 1016f76:	f8c7 c000 	str.w	ip, [r7]
		      crc16_flash_calc = crc16_flash_calc | (uint32_t) end_app[var_1+2];
 1016f7a:	f814 e00e 	ldrb.w	lr, [r4, lr]
 1016f7e:	f8d7 c000 	ldr.w	ip, [r7]
 1016f82:	ea4e 0e0c 	orr.w	lr, lr, ip
 1016f86:	f8c7 e000 	str.w	lr, [r7]
		      do_crc_task = false;              
 1016f8a:	f04f 0c00 	mov.w	ip, #0
 1016f8e:	e750      	b.n	1016e32 <CRC_image_crc16_calc+0x1f6>
 1016f90:	20000a00 	.word	0x20000a00
 1016f94:	20000a1c 	.word	0x20000a1c
 1016f98:	20000a65 	.word	0x20000a65
 1016f9c:	20000a24 	.word	0x20000a24
 1016fa0:	20000a60 	.word	0x20000a60
 1016fa4:	20000a50 	.word	0x20000a50
 1016fa8:	20000a10 	.word	0x20000a10
 1016fac:	20000a2c 	.word	0x20000a2c
 1016fb0:	20000a30 	.word	0x20000a30
 1016fb4:	20000a5e 	.word	0x20000a5e
 1016fb8:	20000a5c 	.word	0x20000a5c
 1016fbc:	20000a09 	.word	0x20000a09
 1016fc0:	20000a63 	.word	0x20000a63
 1016fc4:	20000a48 	.word	0x20000a48
 1016fc8:	fffd6000 	.word	0xfffd6000
 1016fcc:	20000a14 	.word	0x20000a14
 1016fd0:	01050000 	.word	0x01050000
		  flash_null_values_counter++;
 1016fd4:	9f01      	ldr	r7, [sp, #4]
 1016fd6:	3701      	adds	r7, #1
		if (flash_null_values_counter >= 0x80)
 1016fd8:	2f7f      	cmp	r7, #127	; 0x7f
		  flash_null_values_counter++;
 1016fda:	9701      	str	r7, [sp, #4]
		if (flash_null_values_counter >= 0x80)
 1016fdc:	f67f af38 	bls.w	1016e50 <CRC_image_crc16_calc+0x214>
 1016fe0:	9a04      	ldr	r2, [sp, #16]
 1016fe2:	465c      	mov	r4, fp
 1016fe4:	2a00      	cmp	r2, #0
 1016fe6:	d144      	bne.n	1017072 <CRC_image_crc16_calc+0x436>
 1016fe8:	9a05      	ldr	r2, [sp, #20]
 1016fea:	b11a      	cbz	r2, 1016ff4 <CRC_image_crc16_calc+0x3b8>
 1016fec:	4a26      	ldr	r2, [pc, #152]	; (1017088 <CRC_image_crc16_calc+0x44c>)
 1016fee:	f89d 1008 	ldrb.w	r1, [sp, #8]
 1016ff2:	7011      	strb	r1, [r2, #0]
 1016ff4:	f1ba 0f00 	cmp.w	sl, #0
 1016ff8:	d002      	beq.n	1017000 <CRC_image_crc16_calc+0x3c4>
 1016ffa:	4a24      	ldr	r2, [pc, #144]	; (101708c <CRC_image_crc16_calc+0x450>)
 1016ffc:	f882 c000 	strb.w	ip, [r2]
			 crc = ~((crc << 8) | (crc >> 8));
 1017000:	8819      	ldrh	r1, [r3, #0]
 1017002:	881a      	ldrh	r2, [r3, #0]
 1017004:	4822      	ldr	r0, [pc, #136]	; (1017090 <CRC_image_crc16_calc+0x454>)
 1017006:	b289      	uxth	r1, r1
 1017008:	f3c2 2207 	ubfx	r2, r2, #8, #8
 101700c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 1017010:	43d2      	mvns	r2, r2
 1017012:	b292      	uxth	r2, r2
 1017014:	801a      	strh	r2, [r3, #0]
 1017016:	4a1f      	ldr	r2, [pc, #124]	; (1017094 <CRC_image_crc16_calc+0x458>)
		     crc16_flash_calc = (uint32_t)(((uint32_t)crc)<<16);
 1017018:	881b      	ldrh	r3, [r3, #0]
 101701a:	f8c2 e000 	str.w	lr, [r2]
 101701e:	4a1e      	ldr	r2, [pc, #120]	; (1017098 <CRC_image_crc16_calc+0x45c>)
 1017020:	6004      	str	r4, [r0, #0]
 1017022:	041b      	lsls	r3, r3, #16
 1017024:	6013      	str	r3, [r2, #0]
			 crc16_flash_calc = crc16_flash_calc | 0x00;
 1017026:	6813      	ldr	r3, [r2, #0]
 1017028:	6013      	str	r3, [r2, #0]
		     crc16_flash_calc = crc16_flash_calc | 0x00;
 101702a:	6813      	ldr	r3, [r2, #0]
 101702c:	6013      	str	r3, [r2, #0]
 101702e:	4b1b      	ldr	r3, [pc, #108]	; (101709c <CRC_image_crc16_calc+0x460>)
 1017030:	9a01      	ldr	r2, [sp, #4]
 1017032:	601a      	str	r2, [r3, #0]
	return crc16_flash_calc;	
 1017034:	4b18      	ldr	r3, [pc, #96]	; (1017098 <CRC_image_crc16_calc+0x45c>)
 1017036:	6818      	ldr	r0, [r3, #0]
}
 1017038:	b007      	add	sp, #28
 101703a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 101703e:	9b04      	ldr	r3, [sp, #16]
 1017040:	465c      	mov	r4, fp
 1017042:	b9db      	cbnz	r3, 101707c <CRC_image_crc16_calc+0x440>
 1017044:	9b05      	ldr	r3, [sp, #20]
 1017046:	b11b      	cbz	r3, 1017050 <CRC_image_crc16_calc+0x414>
 1017048:	4b0f      	ldr	r3, [pc, #60]	; (1017088 <CRC_image_crc16_calc+0x44c>)
 101704a:	f89d 2008 	ldrb.w	r2, [sp, #8]
 101704e:	701a      	strb	r2, [r3, #0]
 1017050:	f1ba 0f00 	cmp.w	sl, #0
 1017054:	d002      	beq.n	101705c <CRC_image_crc16_calc+0x420>
 1017056:	4a0d      	ldr	r2, [pc, #52]	; (101708c <CRC_image_crc16_calc+0x450>)
 1017058:	2300      	movs	r3, #0
 101705a:	7013      	strb	r3, [r2, #0]
 101705c:	4b0c      	ldr	r3, [pc, #48]	; (1017090 <CRC_image_crc16_calc+0x454>)
 101705e:	601c      	str	r4, [r3, #0]
 1017060:	4b0c      	ldr	r3, [pc, #48]	; (1017094 <CRC_image_crc16_calc+0x458>)
 1017062:	f8c3 e000 	str.w	lr, [r3]
 1017066:	e7e2      	b.n	101702e <CRC_image_crc16_calc+0x3f2>
 1017068:	4b0d      	ldr	r3, [pc, #52]	; (10170a0 <CRC_image_crc16_calc+0x464>)
 101706a:	f89d 2000 	ldrb.w	r2, [sp]
 101706e:	701a      	strb	r2, [r3, #0]
 1017070:	e6fa      	b.n	1016e68 <CRC_image_crc16_calc+0x22c>
 1017072:	4a0b      	ldr	r2, [pc, #44]	; (10170a0 <CRC_image_crc16_calc+0x464>)
 1017074:	f89d 1000 	ldrb.w	r1, [sp]
 1017078:	7011      	strb	r1, [r2, #0]
 101707a:	e7b5      	b.n	1016fe8 <CRC_image_crc16_calc+0x3ac>
 101707c:	4b08      	ldr	r3, [pc, #32]	; (10170a0 <CRC_image_crc16_calc+0x464>)
 101707e:	f89d 2000 	ldrb.w	r2, [sp]
 1017082:	701a      	strb	r2, [r3, #0]
 1017084:	e7de      	b.n	1017044 <CRC_image_crc16_calc+0x408>
 1017086:	bf00      	nop
 1017088:	20000a65 	.word	0x20000a65
 101708c:	20000a2c 	.word	0x20000a2c
 1017090:	20000a00 	.word	0x20000a00
 1017094:	20000a1c 	.word	0x20000a1c
 1017098:	20000a14 	.word	0x20000a14
 101709c:	20000a50 	.word	0x20000a50
 10170a0:	20000a60 	.word	0x20000a60

010170a4 <CRC_app_crc16_calc>:
 * \param num_bytes The length of the data
 * \retval crc The CRC of the data
 ******************************************************************************
 */
extern uint32_t CRC_app_crc16_calc(void)
{
 10170a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    static uint32_t data_count;
	static uint32_t flash_null_values_counter= 0x00000000;

    //***verify update integrity        
    data_count = 0x6000; /*24 pages 1kbyte*/
    app_address = MAIN_APP_START_ADDR;
 10170a8:	4ace      	ldr	r2, [pc, #824]	; (10173e4 <CRC_app_crc16_calc+0x340>)
 10170aa:	f8df c378 	ldr.w	ip, [pc, #888]	; 1017424 <CRC_app_crc16_calc+0x380>
    data_count = 0x6000; /*24 pages 1kbyte*/
 10170ae:	49ce      	ldr	r1, [pc, #824]	; (10173e8 <CRC_app_crc16_calc+0x344>)
    app_address = MAIN_APP_START_ADDR;
 10170b0:	f8c2 c000 	str.w	ip, [r2]
    data_count = 0x6000; /*24 pages 1kbyte*/
 10170b4:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 10170b8:	600a      	str	r2, [r1, #0]
 10170ba:	4acc      	ldr	r2, [pc, #816]	; (10173ec <CRC_app_crc16_calc+0x348>)
    data_flash  = (*(__IO uint32_t *)app_address);   
	
	do_crc_task = true;
    last_turn = false;
 10170bc:	4fcc      	ldr	r7, [pc, #816]	; (10173f0 <CRC_app_crc16_calc+0x34c>)
 10170be:	7812      	ldrb	r2, [r2, #0]
	crc = 0xffff;
 10170c0:	4bcc      	ldr	r3, [pc, #816]	; (10173f4 <CRC_app_crc16_calc+0x350>)
		     }
		   }
		  
		   else
		   {
		      end_app[0] = end_app[4];
 10170c2:	4ccd      	ldr	r4, [pc, #820]	; (10173f8 <CRC_app_crc16_calc+0x354>)
		     for(j=0;j<4;j++)
 10170c4:	4ecd      	ldr	r6, [pc, #820]	; (10173fc <CRC_app_crc16_calc+0x358>)
 10170c6:	49ce      	ldr	r1, [pc, #824]	; (1017400 <CRC_app_crc16_calc+0x35c>)
 10170c8:	48ce      	ldr	r0, [pc, #824]	; (1017404 <CRC_app_crc16_calc+0x360>)
{
 10170ca:	b089      	sub	sp, #36	; 0x24
    last_turn = false;
 10170cc:	2500      	movs	r5, #0
 10170ce:	9204      	str	r2, [sp, #16]
 10170d0:	4acd      	ldr	r2, [pc, #820]	; (1017408 <CRC_app_crc16_calc+0x364>)
 10170d2:	6812      	ldr	r2, [r2, #0]
 10170d4:	9203      	str	r2, [sp, #12]
    data_flash  = (*(__IO uint32_t *)app_address);   
 10170d6:	f8dc e000 	ldr.w	lr, [ip]
    last_turn = false;
 10170da:	703d      	strb	r5, [r7, #0]
	do_crc_task = true;
 10170dc:	4fcb      	ldr	r7, [pc, #812]	; (101740c <CRC_app_crc16_calc+0x368>)
 10170de:	4acc      	ldr	r2, [pc, #816]	; (1017410 <CRC_app_crc16_calc+0x36c>)
	crc = 0xffff;
 10170e0:	f8cd c004 	str.w	ip, [sp, #4]
 10170e4:	46aa      	mov	sl, r5
	do_crc_task = true;
 10170e6:	f04f 0e01 	mov.w	lr, #1
	crc = 0xffff;
 10170ea:	f64f 75ff 	movw	r5, #65535	; 0xffff
 10170ee:	801d      	strh	r5, [r3, #0]
 10170f0:	f8cd a01c 	str.w	sl, [sp, #28]
 10170f4:	f8cd a018 	str.w	sl, [sp, #24]
 10170f8:	f8cd a008 	str.w	sl, [sp, #8]
	do_crc_task = true;
 10170fc:	f887 e000 	strb.w	lr, [r7]
		             crc ^= 0x8408;               
 1017100:	f248 4508 	movw	r5, #33800	; 0x8408
		 data_flash  = (*(__IO uint32_t *)app_address); 
 1017104:	9f01      	ldr	r7, [sp, #4]
 1017106:	f8d7 b000 	ldr.w	fp, [r7]
		 flash_buffer[3]= (uint8_t)(data_flash >> 24);
 101710a:	4fc2      	ldr	r7, [pc, #776]	; (1017414 <CRC_app_crc16_calc+0x370>)
 101710c:	ea4f 6e1b 	mov.w	lr, fp, lsr #24
		 flash_buffer[2]= (uint8_t)(data_flash >> 16);
 1017110:	f3cb 4c07 	ubfx	ip, fp, #16, #8
		 flash_buffer[1]= (uint8_t)(data_flash >> 8);       
 1017114:	f3cb 2807 	ubfx	r8, fp, #8, #8
		 flash_buffer[0]= (uint8_t)(data_flash); 
 1017118:	fa5f f98b 	uxtb.w	r9, fp
		 flash_buffer[3]= (uint8_t)(data_flash >> 24);
 101711c:	f887 e003 	strb.w	lr, [r7, #3]
		 flash_buffer[2]= (uint8_t)(data_flash >> 16);
 1017120:	f887 c002 	strb.w	ip, [r7, #2]
		 flash_buffer[1]= (uint8_t)(data_flash >> 8);       
 1017124:	f887 8001 	strb.w	r8, [r7, #1]
		 flash_buffer[0]= (uint8_t)(data_flash); 
 1017128:	f887 9000 	strb.w	r9, [r7]
		  if(last_turn == false)
 101712c:	9f02      	ldr	r7, [sp, #8]
 101712e:	2f00      	cmp	r7, #0
 1017130:	f040 8118 	bne.w	1017364 <CRC_app_crc16_calc+0x2c0>
		     for(j=0;j<4;j++)
 1017134:	7037      	strb	r7, [r6, #0]
 1017136:	f896 e000 	ldrb.w	lr, [r6]
 101713a:	f1be 0f03 	cmp.w	lr, #3
 101713e:	f200 809d 	bhi.w	101727c <CRC_app_crc16_calc+0x1d8>
		          for (i = 0, byte = flash_buffer[j] ; i < 8; i++, byte >>= 1) 
 1017142:	f8dd 9008 	ldr.w	r9, [sp, #8]
 1017146:	f882 9000 	strb.w	r9, [r2]
 101714a:	f896 e000 	ldrb.w	lr, [r6]
 101714e:	4fb1      	ldr	r7, [pc, #708]	; (1017414 <CRC_app_crc16_calc+0x370>)
 1017150:	f817 e00e 	ldrb.w	lr, [r7, lr]
 1017154:	f881 e000 	strb.w	lr, [r1]
 1017158:	f892 e000 	ldrb.w	lr, [r2]
 101715c:	f1be 0f07 	cmp.w	lr, #7
 1017160:	d82e      	bhi.n	10171c0 <CRC_app_crc16_calc+0x11c>
		             temp = (uint8_t) ((uint8_t) crc & (uint8_t) 0x01); 
 1017162:	f8b3 e000 	ldrh.w	lr, [r3]
 1017166:	f00e 0e01 	and.w	lr, lr, #1
 101716a:	f880 e000 	strb.w	lr, [r0]
		             crc >>= 1; 
 101716e:	f8b3 e000 	ldrh.w	lr, [r3]
 1017172:	f3ce 0e4e 	ubfx	lr, lr, #1, #15
 1017176:	f8a3 e000 	strh.w	lr, [r3]
		             if (temp ^ (byte & 0x01)) 
 101717a:	f890 c000 	ldrb.w	ip, [r0]
 101717e:	f891 e000 	ldrb.w	lr, [r1]
 1017182:	f00e 0e01 	and.w	lr, lr, #1
 1017186:	45f4      	cmp	ip, lr
 1017188:	d007      	beq.n	101719a <CRC_app_crc16_calc+0xf6>
		             crc ^= 0x8408;               
 101718a:	f8b3 e000 	ldrh.w	lr, [r3]
 101718e:	fa1f fe8e 	uxth.w	lr, lr
 1017192:	ea8e 0e05 	eor.w	lr, lr, r5
 1017196:	f8a3 e000 	strh.w	lr, [r3]
		          for (i = 0, byte = flash_buffer[j] ; i < 8; i++, byte >>= 1) 
 101719a:	f892 e000 	ldrb.w	lr, [r2]
 101719e:	f10e 0e01 	add.w	lr, lr, #1
 10171a2:	fa5f fe8e 	uxtb.w	lr, lr
 10171a6:	f882 e000 	strb.w	lr, [r2]
 10171aa:	f891 e000 	ldrb.w	lr, [r1]
 10171ae:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
 10171b2:	f881 e000 	strb.w	lr, [r1]
 10171b6:	f892 e000 	ldrb.w	lr, [r2]
 10171ba:	f1be 0f07 	cmp.w	lr, #7
 10171be:	d9d0      	bls.n	1017162 <CRC_app_crc16_calc+0xbe>
		          end_app[0] = end_app[1];
 10171c0:	f894 e001 	ldrb.w	lr, [r4, #1]
		          end_app[7] = flash_buffer[j];
 10171c4:	4f93      	ldr	r7, [pc, #588]	; (1017414 <CRC_app_crc16_calc+0x370>)
		          end_app[0] = end_app[1];
 10171c6:	fa5f fe8e 	uxtb.w	lr, lr
 10171ca:	f884 e000 	strb.w	lr, [r4]
				  end_app[1] = end_app[2];
 10171ce:	f894 e002 	ldrb.w	lr, [r4, #2]
 10171d2:	fa5f fe8e 	uxtb.w	lr, lr
 10171d6:	f884 e001 	strb.w	lr, [r4, #1]
				  end_app[2] = end_app[3];
 10171da:	f894 e003 	ldrb.w	lr, [r4, #3]
 10171de:	fa5f fe8e 	uxtb.w	lr, lr
 10171e2:	f884 e002 	strb.w	lr, [r4, #2]
				  end_app[3] = end_app[4];
 10171e6:	f894 e004 	ldrb.w	lr, [r4, #4]
 10171ea:	fa5f fe8e 	uxtb.w	lr, lr
 10171ee:	f884 e003 	strb.w	lr, [r4, #3]
				  end_app[4] = end_app[5];
 10171f2:	f894 e005 	ldrb.w	lr, [r4, #5]
 10171f6:	fa5f fe8e 	uxtb.w	lr, lr
 10171fa:	f884 e004 	strb.w	lr, [r4, #4]
		          end_app[5] = end_app[6];
 10171fe:	f894 e006 	ldrb.w	lr, [r4, #6]
 1017202:	fa5f fe8e 	uxtb.w	lr, lr
 1017206:	f884 e005 	strb.w	lr, [r4, #5]
		          end_app[6] = end_app[7];
 101720a:	f894 e007 	ldrb.w	lr, [r4, #7]
 101720e:	fa5f fe8e 	uxtb.w	lr, lr
 1017212:	f884 e006 	strb.w	lr, [r4, #6]
		          end_app[7] = flash_buffer[j];
 1017216:	f896 e000 	ldrb.w	lr, [r6]
 101721a:	f817 e00e 	ldrb.w	lr, [r7, lr]
 101721e:	f884 e007 	strb.w	lr, [r4, #7]
		         if ((end_app[0] == ' ') &(end_app[1] == ' ') & (end_app[2] == 'E') && (end_app[3] == 'N') && (end_app[4] == 'D') && (end_app[5] == 'A') && (end_app[6] == 'P') && (end_app[7] == 'P'))
 1017222:	f894 e000 	ldrb.w	lr, [r4]
 1017226:	f894 8001 	ldrb.w	r8, [r4, #1]
 101722a:	f894 c002 	ldrb.w	ip, [r4, #2]
 101722e:	f1be 0f20 	cmp.w	lr, #32
 1017232:	bf08      	it	eq
 1017234:	f1b8 0f20 	cmpeq.w	r8, #32
 1017238:	bf0c      	ite	eq
 101723a:	f04f 0e01 	moveq.w	lr, #1
 101723e:	f04f 0e00 	movne.w	lr, #0
 1017242:	f1bc 0f45 	cmp.w	ip, #69	; 0x45
 1017246:	bf14      	ite	ne
 1017248:	f04f 0e00 	movne.w	lr, #0
 101724c:	f00e 0e01 	andeq.w	lr, lr, #1
 1017250:	f1be 0f00 	cmp.w	lr, #0
 1017254:	d004      	beq.n	1017260 <CRC_app_crc16_calc+0x1bc>
 1017256:	f894 c003 	ldrb.w	ip, [r4, #3]
 101725a:	f1bc 0f4e 	cmp.w	ip, #78	; 0x4e
 101725e:	d047      	beq.n	10172f0 <CRC_app_crc16_calc+0x24c>
		     for(j=0;j<4;j++)
 1017260:	f896 e000 	ldrb.w	lr, [r6]
 1017264:	f10e 0e01 	add.w	lr, lr, #1
 1017268:	fa5f fe8e 	uxtb.w	lr, lr
 101726c:	f886 e000 	strb.w	lr, [r6]
 1017270:	f896 e000 	ldrb.w	lr, [r6]
 1017274:	f1be 0f03 	cmp.w	lr, #3
 1017278:	f67f af65 	bls.w	1017146 <CRC_app_crc16_calc+0xa2>
		            last_turn = true;
 101727c:	f04f 0c01 	mov.w	ip, #1
		      
		      crc16_flash_calc = crc16_flash_calc | (uint32_t)((uint32_t) end_app[var_1+3]<<8);
		      crc16_flash_calc = crc16_flash_calc | (uint32_t) end_app[var_1+2];
		   }
		          
		app_address = app_address + 4;
 1017280:	9f01      	ldr	r7, [sp, #4]
 1017282:	3704      	adds	r7, #4
 1017284:	f1c7 7e80 	rsb	lr, r7, #16777216	; 0x1000000
		data_count = data_count - 4;
		
		if (data_flash == 0xFFFFFFFF)
 1017288:	f1bb 3fff 	cmp.w	fp, #4294967295
		app_address = app_address + 4;
 101728c:	9701      	str	r7, [sp, #4]
 101728e:	f50e 3eb0 	add.w	lr, lr, #90112	; 0x16000
		if (data_flash == 0xFFFFFFFF)
 1017292:	f000 80c9 	beq.w	1017428 <CRC_app_crc16_calc+0x384>
		{
		  flash_null_values_counter++;
		}  
		else
		{
		  flash_null_values_counter = 0;
 1017296:	2700      	movs	r7, #0
 1017298:	9703      	str	r7, [sp, #12]
			 crc16_flash_calc = crc16_flash_calc | 0x00;
		     crc16_flash_calc = crc16_flash_calc | 0x00;
			 return crc16_flash_calc;
		}
	}
	while ( (do_crc_task == true) && (app_address < MAIN_APP_END_ADDR));
 101729a:	f1bc 0f00 	cmp.w	ip, #0
 101729e:	f000 80fc 	beq.w	101749a <CRC_app_crc16_calc+0x3f6>
 10172a2:	9f01      	ldr	r7, [sp, #4]
 10172a4:	f1b7 7f82 	cmp.w	r7, #17039360	; 0x1040000
 10172a8:	f47f af2c 	bne.w	1017104 <CRC_app_crc16_calc+0x60>
 10172ac:	9b06      	ldr	r3, [sp, #24]
 10172ae:	4659      	mov	r1, fp
 10172b0:	2b00      	cmp	r3, #0
 10172b2:	f040 810a 	bne.w	10174ca <CRC_app_crc16_calc+0x426>
 10172b6:	9b07      	ldr	r3, [sp, #28]
 10172b8:	b11b      	cbz	r3, 10172c2 <CRC_app_crc16_calc+0x21e>
 10172ba:	4b4c      	ldr	r3, [pc, #304]	; (10173ec <CRC_app_crc16_calc+0x348>)
 10172bc:	f89d 2010 	ldrb.w	r2, [sp, #16]
 10172c0:	701a      	strb	r2, [r3, #0]
 10172c2:	4b55      	ldr	r3, [pc, #340]	; (1017418 <CRC_app_crc16_calc+0x374>)
 10172c4:	6019      	str	r1, [r3, #0]
 10172c6:	f1ba 0f00 	cmp.w	sl, #0
 10172ca:	d002      	beq.n	10172d2 <CRC_app_crc16_calc+0x22e>
 10172cc:	4a4f      	ldr	r2, [pc, #316]	; (101740c <CRC_app_crc16_calc+0x368>)
 10172ce:	2301      	movs	r3, #1
 10172d0:	7013      	strb	r3, [r2, #0]
 10172d2:	494d      	ldr	r1, [pc, #308]	; (1017408 <CRC_app_crc16_calc+0x364>)
 10172d4:	9803      	ldr	r0, [sp, #12]
 10172d6:	6008      	str	r0, [r1, #0]
 10172d8:	4942      	ldr	r1, [pc, #264]	; (10173e4 <CRC_app_crc16_calc+0x340>)
 10172da:	4b50      	ldr	r3, [pc, #320]	; (101741c <CRC_app_crc16_calc+0x378>)
 10172dc:	f04f 7282 	mov.w	r2, #17039360	; 0x1040000
 10172e0:	600a      	str	r2, [r1, #0]
 10172e2:	4a41      	ldr	r2, [pc, #260]	; (10173e8 <CRC_app_crc16_calc+0x344>)
 10172e4:	6013      	str	r3, [r2, #0]
	return crc16_flash_calc;	
 10172e6:	4b4e      	ldr	r3, [pc, #312]	; (1017420 <CRC_app_crc16_calc+0x37c>)
 10172e8:	6818      	ldr	r0, [r3, #0]
}
 10172ea:	b009      	add	sp, #36	; 0x24
 10172ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		         if ((end_app[0] == ' ') &(end_app[1] == ' ') & (end_app[2] == 'E') && (end_app[3] == 'N') && (end_app[4] == 'D') && (end_app[5] == 'A') && (end_app[6] == 'P') && (end_app[7] == 'P'))
 10172f0:	f894 c004 	ldrb.w	ip, [r4, #4]
 10172f4:	f1bc 0f44 	cmp.w	ip, #68	; 0x44
 10172f8:	d1b2      	bne.n	1017260 <CRC_app_crc16_calc+0x1bc>
 10172fa:	f894 c005 	ldrb.w	ip, [r4, #5]
 10172fe:	f1bc 0f41 	cmp.w	ip, #65	; 0x41
 1017302:	d1ad      	bne.n	1017260 <CRC_app_crc16_calc+0x1bc>
 1017304:	f894 c006 	ldrb.w	ip, [r4, #6]
 1017308:	f1bc 0f50 	cmp.w	ip, #80	; 0x50
 101730c:	d1a8      	bne.n	1017260 <CRC_app_crc16_calc+0x1bc>
 101730e:	f894 c007 	ldrb.w	ip, [r4, #7]
 1017312:	f1bc 0f50 	cmp.w	ip, #80	; 0x50
 1017316:	d1a3      	bne.n	1017260 <CRC_app_crc16_calc+0x1bc>
		            crc = ~((crc << 8) | (crc >> 8));
 1017318:	f8b3 8000 	ldrh.w	r8, [r3]
 101731c:	f8b3 c000 	ldrh.w	ip, [r3]
		            crc16_flash_calc = (uint32_t)(((uint32_t)crc)<<16);
 1017320:	4f3f      	ldr	r7, [pc, #252]	; (1017420 <CRC_app_crc16_calc+0x37c>)
		            j=4;
 1017322:	f8cd e01c 	str.w	lr, [sp, #28]
		            crc = ~((crc << 8) | (crc >> 8));
 1017326:	fa1f f888 	uxth.w	r8, r8
 101732a:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 101732e:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
 1017332:	ea6f 0c0c 	mvn.w	ip, ip
 1017336:	fa1f fc8c 	uxth.w	ip, ip
 101733a:	f8a3 c000 	strh.w	ip, [r3]
		            crc16_flash_calc = (uint32_t)(((uint32_t)crc)<<16);
 101733e:	f8b3 c000 	ldrh.w	ip, [r3]
		            j=4;
 1017342:	f8cd e018 	str.w	lr, [sp, #24]
		            crc16_flash_calc = (uint32_t)(((uint32_t)crc)<<16);
 1017346:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 101734a:	f8c7 c000 	str.w	ip, [r7]
		            var_1 = j;                     
 101734e:	f896 c000 	ldrb.w	ip, [r6]
		            last_turn = true;
 1017352:	f8cd e008 	str.w	lr, [sp, #8]
		            j=4;
 1017356:	f04f 0704 	mov.w	r7, #4
 101735a:	7037      	strb	r7, [r6, #0]
		            var_1 = j;                     
 101735c:	fa5f f78c 	uxtb.w	r7, ip
 1017360:	9704      	str	r7, [sp, #16]
 1017362:	e77d      	b.n	1017260 <CRC_app_crc16_calc+0x1bc>
		      end_app[0] = end_app[4];
 1017364:	f894 a004 	ldrb.w	sl, [r4, #4]
 1017368:	fa5f fa8a 	uxtb.w	sl, sl
 101736c:	f884 a000 	strb.w	sl, [r4]
			  end_app[1] = end_app[5];
 1017370:	f894 a005 	ldrb.w	sl, [r4, #5]
 1017374:	fa5f fa8a 	uxtb.w	sl, sl
 1017378:	f884 a001 	strb.w	sl, [r4, #1]
			  end_app[2] = end_app[6];
 101737c:	f894 a006 	ldrb.w	sl, [r4, #6]
 1017380:	fa5f fa8a 	uxtb.w	sl, sl
 1017384:	f884 a002 	strb.w	sl, [r4, #2]
			  end_app[3] = end_app[7];
 1017388:	f894 a007 	ldrb.w	sl, [r4, #7]
 101738c:	fa5f f78a 	uxtb.w	r7, sl
 1017390:	9705      	str	r7, [sp, #20]
		      crc16_flash_calc = crc16_flash_calc | (uint32_t)((uint32_t) end_app[var_1+3]<<8);
 1017392:	9f04      	ldr	r7, [sp, #16]
 1017394:	f107 0a03 	add.w	sl, r7, #3
			  end_app[3] = end_app[7];
 1017398:	f89d 7014 	ldrb.w	r7, [sp, #20]
 101739c:	70e7      	strb	r7, [r4, #3]
		      crc16_flash_calc = crc16_flash_calc | (uint32_t)((uint32_t) end_app[var_1+3]<<8);
 101739e:	4f20      	ldr	r7, [pc, #128]	; (1017420 <CRC_app_crc16_calc+0x37c>)
			  end_app[4] = flash_buffer[0];
 10173a0:	f884 9004 	strb.w	r9, [r4, #4]
		      end_app[5] = flash_buffer[1];
 10173a4:	f884 8005 	strb.w	r8, [r4, #5]
		      end_app[6] = flash_buffer[2];
 10173a8:	f884 c006 	strb.w	ip, [r4, #6]
		      end_app[7] = flash_buffer[3];
 10173ac:	f884 e007 	strb.w	lr, [r4, #7]
		      crc16_flash_calc = crc16_flash_calc | (uint32_t)((uint32_t) end_app[var_1+3]<<8);
 10173b0:	f814 800a 	ldrb.w	r8, [r4, sl]
 10173b4:	f8d7 c000 	ldr.w	ip, [r7]
		      crc16_flash_calc = crc16_flash_calc | (uint32_t) end_app[var_1+2];
 10173b8:	9f04      	ldr	r7, [sp, #16]
 10173ba:	f8dd a008 	ldr.w	sl, [sp, #8]
 10173be:	f107 0e02 	add.w	lr, r7, #2
		      crc16_flash_calc = crc16_flash_calc | (uint32_t)((uint32_t) end_app[var_1+3]<<8);
 10173c2:	4f17      	ldr	r7, [pc, #92]	; (1017420 <CRC_app_crc16_calc+0x37c>)
 10173c4:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
 10173c8:	f8c7 c000 	str.w	ip, [r7]
		      crc16_flash_calc = crc16_flash_calc | (uint32_t) end_app[var_1+2];
 10173cc:	f814 e00e 	ldrb.w	lr, [r4, lr]
 10173d0:	f8d7 c000 	ldr.w	ip, [r7]
 10173d4:	ea4e 0e0c 	orr.w	lr, lr, ip
 10173d8:	f8c7 e000 	str.w	lr, [r7]
		      do_crc_task = false;              
 10173dc:	f04f 0c00 	mov.w	ip, #0
 10173e0:	e74e      	b.n	1017280 <CRC_app_crc16_calc+0x1dc>
 10173e2:	bf00      	nop
 10173e4:	20000a04 	.word	0x20000a04
 10173e8:	20000a20 	.word	0x20000a20
 10173ec:	20000a66 	.word	0x20000a66
 10173f0:	20000a61 	.word	0x20000a61
 10173f4:	20000a12 	.word	0x20000a12
 10173f8:	20000a3c 	.word	0x20000a3c
 10173fc:	20000a5f 	.word	0x20000a5f
 1017400:	20000a0a 	.word	0x20000a0a
 1017404:	20000a64 	.word	0x20000a64
 1017408:	20000a54 	.word	0x20000a54
 101740c:	20000a2d 	.word	0x20000a2d
 1017410:	20000a5d 	.word	0x20000a5d
 1017414:	20000a4c 	.word	0x20000a4c
 1017418:	20000a28 	.word	0x20000a28
 101741c:	fffd6000 	.word	0xfffd6000
 1017420:	20000a18 	.word	0x20000a18
 1017424:	01010000 	.word	0x01010000
		  flash_null_values_counter++;
 1017428:	9f03      	ldr	r7, [sp, #12]
 101742a:	3701      	adds	r7, #1
		if (flash_null_values_counter >= 0x80)
 101742c:	2f7f      	cmp	r7, #127	; 0x7f
		  flash_null_values_counter++;
 101742e:	9703      	str	r7, [sp, #12]
		if (flash_null_values_counter >= 0x80)
 1017430:	f67f af33 	bls.w	101729a <CRC_app_crc16_calc+0x1f6>
 1017434:	9a06      	ldr	r2, [sp, #24]
 1017436:	2a00      	cmp	r2, #0
 1017438:	d14c      	bne.n	10174d4 <CRC_app_crc16_calc+0x430>
 101743a:	9a07      	ldr	r2, [sp, #28]
 101743c:	b11a      	cbz	r2, 1017446 <CRC_app_crc16_calc+0x3a2>
 101743e:	4a2a      	ldr	r2, [pc, #168]	; (10174e8 <CRC_app_crc16_calc+0x444>)
 1017440:	f89d 1010 	ldrb.w	r1, [sp, #16]
 1017444:	7011      	strb	r1, [r2, #0]
 1017446:	4a29      	ldr	r2, [pc, #164]	; (10174ec <CRC_app_crc16_calc+0x448>)
 1017448:	f04f 31ff 	mov.w	r1, #4294967295
 101744c:	6011      	str	r1, [r2, #0]
 101744e:	f1ba 0f00 	cmp.w	sl, #0
 1017452:	d002      	beq.n	101745a <CRC_app_crc16_calc+0x3b6>
 1017454:	4a26      	ldr	r2, [pc, #152]	; (10174f0 <CRC_app_crc16_calc+0x44c>)
 1017456:	f882 c000 	strb.w	ip, [r2]
			 crc = ~((crc << 8) | (crc >> 8));
 101745a:	8819      	ldrh	r1, [r3, #0]
 101745c:	881a      	ldrh	r2, [r3, #0]
 101745e:	4825      	ldr	r0, [pc, #148]	; (10174f4 <CRC_app_crc16_calc+0x450>)
 1017460:	9c01      	ldr	r4, [sp, #4]
 1017462:	6004      	str	r4, [r0, #0]
 1017464:	b289      	uxth	r1, r1
 1017466:	f3c2 2207 	ubfx	r2, r2, #8, #8
 101746a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 101746e:	43d2      	mvns	r2, r2
 1017470:	b292      	uxth	r2, r2
 1017472:	801a      	strh	r2, [r3, #0]
 1017474:	4a20      	ldr	r2, [pc, #128]	; (10174f8 <CRC_app_crc16_calc+0x454>)
		     crc16_flash_calc = (uint32_t)(((uint32_t)crc)<<16);
 1017476:	881b      	ldrh	r3, [r3, #0]
 1017478:	f8c2 e000 	str.w	lr, [r2]
 101747c:	4a1f      	ldr	r2, [pc, #124]	; (10174fc <CRC_app_crc16_calc+0x458>)
 101747e:	041b      	lsls	r3, r3, #16
 1017480:	6013      	str	r3, [r2, #0]
			 crc16_flash_calc = crc16_flash_calc | 0x00;
 1017482:	6813      	ldr	r3, [r2, #0]
 1017484:	6013      	str	r3, [r2, #0]
		     crc16_flash_calc = crc16_flash_calc | 0x00;
 1017486:	6813      	ldr	r3, [r2, #0]
 1017488:	6013      	str	r3, [r2, #0]
 101748a:	4b1d      	ldr	r3, [pc, #116]	; (1017500 <CRC_app_crc16_calc+0x45c>)
 101748c:	9a03      	ldr	r2, [sp, #12]
 101748e:	601a      	str	r2, [r3, #0]
	return crc16_flash_calc;	
 1017490:	4b1a      	ldr	r3, [pc, #104]	; (10174fc <CRC_app_crc16_calc+0x458>)
 1017492:	6818      	ldr	r0, [r3, #0]
}
 1017494:	b009      	add	sp, #36	; 0x24
 1017496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 101749a:	9b06      	ldr	r3, [sp, #24]
 101749c:	4659      	mov	r1, fp
 101749e:	b9f3      	cbnz	r3, 10174de <CRC_app_crc16_calc+0x43a>
 10174a0:	9b07      	ldr	r3, [sp, #28]
 10174a2:	b11b      	cbz	r3, 10174ac <CRC_app_crc16_calc+0x408>
 10174a4:	4b10      	ldr	r3, [pc, #64]	; (10174e8 <CRC_app_crc16_calc+0x444>)
 10174a6:	f89d 2010 	ldrb.w	r2, [sp, #16]
 10174aa:	701a      	strb	r2, [r3, #0]
 10174ac:	4b0f      	ldr	r3, [pc, #60]	; (10174ec <CRC_app_crc16_calc+0x448>)
 10174ae:	6019      	str	r1, [r3, #0]
 10174b0:	f1ba 0f00 	cmp.w	sl, #0
 10174b4:	d002      	beq.n	10174bc <CRC_app_crc16_calc+0x418>
 10174b6:	4a0e      	ldr	r2, [pc, #56]	; (10174f0 <CRC_app_crc16_calc+0x44c>)
 10174b8:	2300      	movs	r3, #0
 10174ba:	7013      	strb	r3, [r2, #0]
 10174bc:	4b0d      	ldr	r3, [pc, #52]	; (10174f4 <CRC_app_crc16_calc+0x450>)
 10174be:	9a01      	ldr	r2, [sp, #4]
 10174c0:	601a      	str	r2, [r3, #0]
 10174c2:	4b0d      	ldr	r3, [pc, #52]	; (10174f8 <CRC_app_crc16_calc+0x454>)
 10174c4:	f8c3 e000 	str.w	lr, [r3]
 10174c8:	e7df      	b.n	101748a <CRC_app_crc16_calc+0x3e6>
 10174ca:	4b0e      	ldr	r3, [pc, #56]	; (1017504 <CRC_app_crc16_calc+0x460>)
 10174cc:	f89d 2008 	ldrb.w	r2, [sp, #8]
 10174d0:	701a      	strb	r2, [r3, #0]
 10174d2:	e6f0      	b.n	10172b6 <CRC_app_crc16_calc+0x212>
 10174d4:	4a0b      	ldr	r2, [pc, #44]	; (1017504 <CRC_app_crc16_calc+0x460>)
 10174d6:	f89d 1008 	ldrb.w	r1, [sp, #8]
 10174da:	7011      	strb	r1, [r2, #0]
 10174dc:	e7ad      	b.n	101743a <CRC_app_crc16_calc+0x396>
 10174de:	4b09      	ldr	r3, [pc, #36]	; (1017504 <CRC_app_crc16_calc+0x460>)
 10174e0:	f89d 2008 	ldrb.w	r2, [sp, #8]
 10174e4:	701a      	strb	r2, [r3, #0]
 10174e6:	e7db      	b.n	10174a0 <CRC_app_crc16_calc+0x3fc>
 10174e8:	20000a66 	.word	0x20000a66
 10174ec:	20000a28 	.word	0x20000a28
 10174f0:	20000a2d 	.word	0x20000a2d
 10174f4:	20000a04 	.word	0x20000a04
 10174f8:	20000a20 	.word	0x20000a20
 10174fc:	20000a18 	.word	0x20000a18
 1017500:	20000a54 	.word	0x20000a54
 1017504:	20000a61 	.word	0x20000a61

01017508 <EEPROM_writer>:
 * \retval void
 ******************************************************************************
 */
bool EEPROM_writer(uint32_t address, void* data_pointer, unsigned int data_length) {

	return I2C_HAL_bEeprom_writer(address, data_pointer, data_length);
 1017508:	4b00      	ldr	r3, [pc, #0]	; (101750c <EEPROM_writer+0x4>)
 101750a:	4718      	bx	r3
 101750c:	0101553d 	.word	0x0101553d

01017510 <EEPROM_reader>:
 * \retval void
 ******************************************************************************
 */
bool EEPROM_reader(uint32_t address, void* data_pointer, unsigned int data_length) {

	return I2C_HAL_bEeprom_reader(address, data_pointer, data_length);
 1017510:	4b00      	ldr	r3, [pc, #0]	; (1017514 <EEPROM_reader+0x4>)
 1017512:	4718      	bx	r3
 1017514:	010156f9 	.word	0x010156f9

01017518 <EEPROM_erase_all>:
 * \param void
 * \retval void
 ******************************************************************************
 */
void EEPROM_erase_all(void)
{
 1017518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 101751c:	b0c0      	sub	sp, #256	; 0x100
	uint8_t data[256];
	static uint32_t addr;
	
	memset(&data, 0xFF, (unsigned int)sizeof(data));
 101751e:	4668      	mov	r0, sp
 1017520:	f44f 7280 	mov.w	r2, #256	; 0x100
 1017524:	21ff      	movs	r1, #255	; 0xff
 1017526:	4b13      	ldr	r3, [pc, #76]	; (1017574 <EEPROM_erase_all+0x5c>)

	for ( addr = EXT_EEPROM_DATA_START_ADDR; addr <= EXT_EEPROM_DATA_END_ADDR; addr += 256 )
 1017528:	f8df a05c 	ldr.w	sl, [pc, #92]	; 1017588 <EEPROM_erase_all+0x70>
 101752c:	f8df 905c 	ldr.w	r9, [pc, #92]	; 101758c <EEPROM_erase_all+0x74>
 1017530:	4c11      	ldr	r4, [pc, #68]	; (1017578 <EEPROM_erase_all+0x60>)
 1017532:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1017590 <EEPROM_erase_all+0x78>
 1017536:	4f11      	ldr	r7, [pc, #68]	; (101757c <EEPROM_erase_all+0x64>)
 1017538:	4e11      	ldr	r6, [pc, #68]	; (1017580 <EEPROM_erase_all+0x68>)
 101753a:	4d12      	ldr	r5, [pc, #72]	; (1017584 <EEPROM_erase_all+0x6c>)
	memset(&data, 0xFF, (unsigned int)sizeof(data));
 101753c:	4798      	blx	r3
	for ( addr = EXT_EEPROM_DATA_START_ADDR; addr <= EXT_EEPROM_DATA_END_ADDR; addr += 256 )
 101753e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 1017542:	f8ca 0000 	str.w	r0, [sl]
	return I2C_HAL_bEeprom_writer(address, data_pointer, data_length);
 1017546:	f44f 7280 	mov.w	r2, #256	; 0x100
 101754a:	4669      	mov	r1, sp
 101754c:	47c8      	blx	r9
	{
		EEPROM_writer( addr, data, (unsigned int)256 );
		WATCHDOG_APP_vRestart();
 101754e:	47a0      	blx	r4
		
		NIC_task();
 1017550:	47c0      	blx	r8
		WATCHDOG_APP_vRestart();
 1017552:	47a0      	blx	r4
		
		OP_task();
 1017554:	47b8      	blx	r7
		WATCHDOG_APP_vRestart();
 1017556:	47a0      	blx	r4

		PFAIL_APP_vTask();
 1017558:	47b0      	blx	r6
		WATCHDOG_APP_vRestart();
 101755a:	47a0      	blx	r4
	for ( addr = EXT_EEPROM_DATA_START_ADDR; addr <= EXT_EEPROM_DATA_END_ADDR; addr += 256 )
 101755c:	f8da 0000 	ldr.w	r0, [sl]
 1017560:	f500 7080 	add.w	r0, r0, #256	; 0x100
 1017564:	42a8      	cmp	r0, r5
 1017566:	f8ca 0000 	str.w	r0, [sl]
 101756a:	d9ec      	bls.n	1017546 <EEPROM_erase_all+0x2e>
	}
}
 101756c:	b040      	add	sp, #256	; 0x100
 101756e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 1017572:	bf00      	nop
 1017574:	01030b71 	.word	0x01030b71
 1017578:	0101603d 	.word	0x0101603d
 101757c:	010244c1 	.word	0x010244c1
 1017580:	01025bf1 	.word	0x01025bf1
 1017584:	0007ffff 	.word	0x0007ffff
 1017588:	20000a68 	.word	0x20000a68
 101758c:	0101553d 	.word	0x0101553d
 1017590:	01024d05 	.word	0x01024d05

01017594 <EVNT_APP_bSt_71_validate_data>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool EVNT_APP_bSt_71_validate_data(ST_70_TYPE *st_71_structure) {
 1017594:	b430      	push	{r4, r5}
 1017596:	2301      	movs	r3, #1
 1017598:	7804      	ldrb	r4, [r0, #0]
	
	bool is_ok = true;
 101759a:	4619      	mov	r1, r3
	uint8_t i;
	
	for ( i = 0; i < 8; i++) {
		if ( ( ( (MAX_LOG_FLAGS >> i) & 0x01 ) == 0 ) && ( ( (st_71_structure->log_flags >> i) & 0x01 ) == 1 ) ) {
 101759c:	251f      	movs	r5, #31
 101759e:	fa45 f203 	asr.w	r2, r5, r3
 10175a2:	07d2      	lsls	r2, r2, #31
 10175a4:	d405      	bmi.n	10175b2 <EVNT_APP_bSt_71_validate_data+0x1e>
 10175a6:	fa44 f203 	asr.w	r2, r4, r3
			is_ok = false;	
 10175aa:	f012 0f01 	tst.w	r2, #1
 10175ae:	bf18      	it	ne
 10175b0:	2100      	movne	r1, #0
 10175b2:	3301      	adds	r3, #1
	for ( i = 0; i < 8; i++) {
 10175b4:	2b08      	cmp	r3, #8
 10175b6:	d1f2      	bne.n	101759e <EVNT_APP_bSt_71_validate_data+0xa>
		}
	}
	st_71_structure->log_flags &= MAX_LOG_FLAGS;
	
	if (st_71_structure->nbr_std_events > MAX_NBR_STD_EVENTS) {
 10175b8:	7843      	ldrb	r3, [r0, #1]
	st_71_structure->log_flags &= MAX_LOG_FLAGS;
 10175ba:	f004 041f 	and.w	r4, r4, #31
	if (st_71_structure->nbr_std_events > MAX_NBR_STD_EVENTS) {
 10175be:	2b0a      	cmp	r3, #10
	st_71_structure->log_flags &= MAX_LOG_FLAGS;
 10175c0:	7004      	strb	r4, [r0, #0]
	if (st_71_structure->nbr_std_events > MAX_NBR_STD_EVENTS) {
 10175c2:	d902      	bls.n	10175ca <EVNT_APP_bSt_71_validate_data+0x36>
		st_71_structure->nbr_std_events = MAX_NBR_STD_EVENTS;
 10175c4:	230a      	movs	r3, #10
 10175c6:	7043      	strb	r3, [r0, #1]
		is_ok = false;
 10175c8:	2100      	movs	r1, #0
	}
	
	if (st_71_structure->nbr_mfg_events > MAX_NBR_MFG_EVENTS) {
 10175ca:	7883      	ldrb	r3, [r0, #2]
 10175cc:	2b05      	cmp	r3, #5
 10175ce:	d902      	bls.n	10175d6 <EVNT_APP_bSt_71_validate_data+0x42>
		st_71_structure->nbr_mfg_events = MAX_NBR_MFG_EVENTS;
 10175d0:	2305      	movs	r3, #5
 10175d2:	7083      	strb	r3, [r0, #2]
		is_ok = false;
 10175d4:	2100      	movs	r1, #0
	}
	
	if (st_71_structure->hist_data_length > MAX_HIST_DATA_LENGTH) {
 10175d6:	78c3      	ldrb	r3, [r0, #3]
 10175d8:	2b02      	cmp	r3, #2
 10175da:	d902      	bls.n	10175e2 <EVNT_APP_bSt_71_validate_data+0x4e>
		st_71_structure->hist_data_length = MAX_HIST_DATA_LENGTH;
 10175dc:	2302      	movs	r3, #2
 10175de:	70c3      	strb	r3, [r0, #3]
		is_ok = false;
 10175e0:	2100      	movs	r1, #0
	}
	
	if (st_71_structure->event_data_length > MAX_EVENT_DATA_LENGTH ) {
 10175e2:	7903      	ldrb	r3, [r0, #4]
 10175e4:	2b02      	cmp	r3, #2
 10175e6:	d902      	bls.n	10175ee <EVNT_APP_bSt_71_validate_data+0x5a>
		st_71_structure->event_data_length = MAX_EVENT_DATA_LENGTH;
 10175e8:	2302      	movs	r3, #2
 10175ea:	7103      	strb	r3, [r0, #4]
		is_ok = false;
 10175ec:	2100      	movs	r1, #0
	}
	
	if (st_71_structure->nbr_history_entries > MAX_NBR_HISTORY_ENTRIES) {
 10175ee:	88c3      	ldrh	r3, [r0, #6]
 10175f0:	2bff      	cmp	r3, #255	; 0xff
 10175f2:	d902      	bls.n	10175fa <EVNT_APP_bSt_71_validate_data+0x66>
		st_71_structure->nbr_history_entries = MAX_NBR_HISTORY_ENTRIES;
 10175f4:	23ff      	movs	r3, #255	; 0xff
 10175f6:	80c3      	strh	r3, [r0, #6]
		is_ok = false;
 10175f8:	2100      	movs	r1, #0
	}
	
	if (st_71_structure->nbr_event_entries > MAX_NBR_EVENT_ENTRIES) {
 10175fa:	8903      	ldrh	r3, [r0, #8]
 10175fc:	2bff      	cmp	r3, #255	; 0xff
 10175fe:	d902      	bls.n	1017606 <EVNT_APP_bSt_71_validate_data+0x72>
		st_71_structure->nbr_event_entries = MAX_NBR_EVENT_ENTRIES;
 1017600:	23ff      	movs	r3, #255	; 0xff
 1017602:	8103      	strh	r3, [r0, #8]
		is_ok = false;
 1017604:	2100      	movs	r1, #0
	}
	
	return is_ok;
}
 1017606:	4608      	mov	r0, r1
 1017608:	bc30      	pop	{r4, r5}
 101760a:	4770      	bx	lr

0101760c <EVNT_APP_bMt_73_validate_data>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool EVNT_APP_bMt_73_validate_data(MT_73_TYPE *mt_73_structure) {
 101760c:	b430      	push	{r4, r5}
	
	bool is_ok = true;
	uint8_t i;
	uint8_t aux_set[MAX_NBR_OCTETS_SET];
	
	for ( i = 0; i < st_71.nbr_std_events; i++ ) {
 101760e:	4d14      	ldr	r5, [pc, #80]	; (1017660 <EVNT_APP_bMt_73_validate_data+0x54>)
 1017610:	786b      	ldrb	r3, [r5, #1]
 1017612:	b183      	cbz	r3, 1017636 <EVNT_APP_bMt_73_validate_data+0x2a>
 1017614:	4913      	ldr	r1, [pc, #76]	; (1017664 <EVNT_APP_bMt_73_validate_data+0x58>)
 1017616:	2300      	movs	r3, #0
 1017618:	2b09      	cmp	r3, #9
 101761a:	bf98      	it	ls
 101761c:	780a      	ldrbls	r2, [r1, #0]
		mt_73_structure->std_alarms_monitored_flags[i] &= MT_72_STD_ALARMS_SUPPORTED(i);
 101761e:	5cc4      	ldrb	r4, [r0, r3]
	for ( i = 0; i < st_71.nbr_std_events; i++ ) {
 1017620:	bf88      	it	hi
 1017622:	2200      	movhi	r2, #0
		mt_73_structure->std_alarms_monitored_flags[i] &= MT_72_STD_ALARMS_SUPPORTED(i);
 1017624:	4022      	ands	r2, r4
 1017626:	54c2      	strb	r2, [r0, r3]
	for ( i = 0; i < st_71.nbr_std_events; i++ ) {
 1017628:	3301      	adds	r3, #1
 101762a:	786a      	ldrb	r2, [r5, #1]
 101762c:	b2db      	uxtb	r3, r3
 101762e:	429a      	cmp	r2, r3
 1017630:	f101 0101 	add.w	r1, r1, #1
 1017634:	d8f0      	bhi.n	1017618 <EVNT_APP_bMt_73_validate_data+0xc>
	}
	
	for ( i = 0; i < st_71.nbr_mfg_events; i++ ) {
 1017636:	78ac      	ldrb	r4, [r5, #2]
 1017638:	b17c      	cbz	r4, 101765a <EVNT_APP_bMt_73_validate_data+0x4e>
 101763a:	4d0b      	ldr	r5, [pc, #44]	; (1017668 <EVNT_APP_bMt_73_validate_data+0x5c>)
 101763c:	300a      	adds	r0, #10
 101763e:	2300      	movs	r3, #0
 1017640:	2b09      	cmp	r3, #9
 1017642:	bf98      	it	ls
 1017644:	5d5a      	ldrbls	r2, [r3, r5]
		mt_73_structure->mfg_alarms_monitored_flags[i] &= MT_72_MFG_ALARMS_SUPPORTED(i);
 1017646:	7801      	ldrb	r1, [r0, #0]
	for ( i = 0; i < st_71.nbr_mfg_events; i++ ) {
 1017648:	bf88      	it	hi
 101764a:	2200      	movhi	r2, #0
 101764c:	3301      	adds	r3, #1
		mt_73_structure->mfg_alarms_monitored_flags[i] &= MT_72_MFG_ALARMS_SUPPORTED(i);
 101764e:	400a      	ands	r2, r1
	for ( i = 0; i < st_71.nbr_mfg_events; i++ ) {
 1017650:	b2d9      	uxtb	r1, r3
 1017652:	428c      	cmp	r4, r1
		mt_73_structure->mfg_alarms_monitored_flags[i] &= MT_72_MFG_ALARMS_SUPPORTED(i);
 1017654:	f800 2b01 	strb.w	r2, [r0], #1
	for ( i = 0; i < st_71.nbr_mfg_events; i++ ) {
 1017658:	d8f2      	bhi.n	1017640 <EVNT_APP_bMt_73_validate_data+0x34>
	}

	return is_ok;
}
 101765a:	2001      	movs	r0, #1
 101765c:	bc30      	pop	{r4, r5}
 101765e:	4770      	bx	lr
 1017660:	200165dc 	.word	0x200165dc
 1017664:	0103157c 	.word	0x0103157c
 1017668:	01031588 	.word	0x01031588

0101766c <EVNT_APP_bSt_74_validate_data>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool EVNT_APP_bSt_74_validate_data(ST_74_TYPE *st_74_structure) {
 101766c:	4603      	mov	r3, r0
	
	st_74_structure->event_flags &= ~(uint8_t)(ORDER_FLAG_bm);
	st_74_structure->event_flags |= (uint8_t)(LIST_TYPE_FLAG_bm);
	st_74_structure->event_flags &= ~(uint8_t)(INHIBIT_OVERFLOW_FLAG_bm);
	
	if (st_74_structure->nbr_valid_entries >= st_71.nbr_history_entries) {
 101766e:	4816      	ldr	r0, [pc, #88]	; (10176c8 <EVNT_APP_bSt_74_validate_data+0x5c>)
	st_74_structure->event_flags &= ~(uint8_t)(INHIBIT_OVERFLOW_FLAG_bm);
 1017670:	781a      	ldrb	r2, [r3, #0]
	if (st_74_structure->nbr_valid_entries >= st_71.nbr_history_entries) {
 1017672:	8859      	ldrh	r1, [r3, #2]
	st_74_structure->event_flags &= ~(uint8_t)(INHIBIT_OVERFLOW_FLAG_bm);
 1017674:	f022 0209 	bic.w	r2, r2, #9
 1017678:	f042 0204 	orr.w	r2, r2, #4
 101767c:	701a      	strb	r2, [r3, #0]
	if (st_74_structure->nbr_valid_entries >= st_71.nbr_history_entries) {
 101767e:	88c2      	ldrh	r2, [r0, #6]
 1017680:	4291      	cmp	r1, r2
 1017682:	d309      	bcc.n	1017698 <EVNT_APP_bSt_74_validate_data+0x2c>
		
		st_74_structure->nbr_valid_entries = (st_71.nbr_history_entries - 1);
 1017684:	1e51      	subs	r1, r2, #1
 1017686:	b289      	uxth	r1, r1
 1017688:	8059      	strh	r1, [r3, #2]
		is_ok = false;
		
		if (st_71.nbr_history_entries == 0) {
 101768a:	88c2      	ldrh	r2, [r0, #6]
 101768c:	b982      	cbnz	r2, 10176b0 <EVNT_APP_bSt_74_validate_data+0x44>
			st_74_structure->nbr_valid_entries = 0;
 101768e:	805a      	strh	r2, [r3, #2]
		
		st_74_structure->last_entry_element = (st_74_structure->nbr_valid_entries - 1);
		is_ok = false;
		
		if (st_74_structure->nbr_valid_entries == 0) {
			st_74_structure->last_entry_element = 0;
 1017690:	2200      	movs	r2, #0
 1017692:	809a      	strh	r2, [r3, #4]
			is_ok = true;
 1017694:	2001      	movs	r0, #1
 1017696:	e004      	b.n	10176a2 <EVNT_APP_bSt_74_validate_data+0x36>
	if (st_74_structure->last_entry_element >= st_74_structure->nbr_valid_entries) {
 1017698:	889a      	ldrh	r2, [r3, #4]
 101769a:	428a      	cmp	r2, r1
	bool is_ok = true;
 101769c:	f04f 0001 	mov.w	r0, #1
	if (st_74_structure->last_entry_element >= st_74_structure->nbr_valid_entries) {
 10176a0:	d20b      	bcs.n	10176ba <EVNT_APP_bSt_74_validate_data+0x4e>
		}
	}
	
	if (st_74_structure->nbr_unread_entries >= MAX_NBR_HISTORY_ENTRIES) {
 10176a2:	899a      	ldrh	r2, [r3, #12]
 10176a4:	2afe      	cmp	r2, #254	; 0xfe
 10176a6:	d902      	bls.n	10176ae <EVNT_APP_bSt_74_validate_data+0x42>
		st_74_structure->nbr_unread_entries = MAX_NBR_HISTORY_ENTRIES;
 10176a8:	22ff      	movs	r2, #255	; 0xff
 10176aa:	819a      	strh	r2, [r3, #12]
		is_ok = false;
 10176ac:	2000      	movs	r0, #0
	}
	
	return is_ok;
}
 10176ae:	4770      	bx	lr
	if (st_74_structure->last_entry_element >= st_74_structure->nbr_valid_entries) {
 10176b0:	889a      	ldrh	r2, [r3, #4]
 10176b2:	428a      	cmp	r2, r1
		is_ok = false;
 10176b4:	f04f 0000 	mov.w	r0, #0
	if (st_74_structure->last_entry_element >= st_74_structure->nbr_valid_entries) {
 10176b8:	d3f3      	bcc.n	10176a2 <EVNT_APP_bSt_74_validate_data+0x36>
 10176ba:	1e4a      	subs	r2, r1, #1
 10176bc:	b292      	uxth	r2, r2
		if (st_74_structure->nbr_valid_entries == 0) {
 10176be:	2900      	cmp	r1, #0
 10176c0:	d0e6      	beq.n	1017690 <EVNT_APP_bSt_74_validate_data+0x24>
		st_74_structure->last_entry_element = (st_74_structure->nbr_valid_entries - 1);
 10176c2:	809a      	strh	r2, [r3, #4]
		is_ok = false;
 10176c4:	2000      	movs	r0, #0
 10176c6:	e7ec      	b.n	10176a2 <EVNT_APP_bSt_74_validate_data+0x36>
 10176c8:	200165dc 	.word	0x200165dc

010176cc <EVNT_APP_bSt_76_validate_data>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool EVNT_APP_bSt_76_validate_data(ST_74_TYPE *st_76_structure) {
 10176cc:	4603      	mov	r3, r0
	
	st_76_structure->event_flags &= ~(uint8_t)(ORDER_FLAG_bm);
	st_76_structure->event_flags |= (uint8_t)(LIST_TYPE_FLAG_bm);
	st_76_structure->event_flags &= ~(uint8_t)(INHIBIT_OVERFLOW_FLAG_bm);
	
	if (st_76_structure->nbr_valid_entries >= st_71.nbr_event_entries) {
 10176ce:	4816      	ldr	r0, [pc, #88]	; (1017728 <EVNT_APP_bSt_76_validate_data+0x5c>)
	st_76_structure->event_flags &= ~(uint8_t)(INHIBIT_OVERFLOW_FLAG_bm);
 10176d0:	781a      	ldrb	r2, [r3, #0]
	if (st_76_structure->nbr_valid_entries >= st_71.nbr_event_entries) {
 10176d2:	8859      	ldrh	r1, [r3, #2]
	st_76_structure->event_flags &= ~(uint8_t)(INHIBIT_OVERFLOW_FLAG_bm);
 10176d4:	f022 0209 	bic.w	r2, r2, #9
 10176d8:	f042 0204 	orr.w	r2, r2, #4
 10176dc:	701a      	strb	r2, [r3, #0]
	if (st_76_structure->nbr_valid_entries >= st_71.nbr_event_entries) {
 10176de:	8902      	ldrh	r2, [r0, #8]
 10176e0:	4291      	cmp	r1, r2
 10176e2:	d309      	bcc.n	10176f8 <EVNT_APP_bSt_76_validate_data+0x2c>
		
		st_76_structure->nbr_valid_entries = (st_71.nbr_event_entries - 1);
 10176e4:	1e51      	subs	r1, r2, #1
 10176e6:	b289      	uxth	r1, r1
 10176e8:	8059      	strh	r1, [r3, #2]
		is_ok = false;
		
		if (st_71.nbr_event_entries == 0) {
 10176ea:	8902      	ldrh	r2, [r0, #8]
 10176ec:	b982      	cbnz	r2, 1017710 <EVNT_APP_bSt_76_validate_data+0x44>
			st_76_structure->nbr_valid_entries = 0;
 10176ee:	805a      	strh	r2, [r3, #2]
		
		st_76_structure->last_entry_element = (st_76_structure->nbr_valid_entries - 1);
		is_ok = false;
		
		if (st_76_structure->nbr_valid_entries == 0) {
			st_76_structure->last_entry_element = 0;
 10176f0:	2200      	movs	r2, #0
 10176f2:	809a      	strh	r2, [r3, #4]
			is_ok = true;
 10176f4:	2001      	movs	r0, #1
 10176f6:	e004      	b.n	1017702 <EVNT_APP_bSt_76_validate_data+0x36>
	if (st_76_structure->last_entry_element >= st_76_structure->nbr_valid_entries) {
 10176f8:	889a      	ldrh	r2, [r3, #4]
 10176fa:	428a      	cmp	r2, r1
	bool is_ok = true;
 10176fc:	f04f 0001 	mov.w	r0, #1
	if (st_76_structure->last_entry_element >= st_76_structure->nbr_valid_entries) {
 1017700:	d20b      	bcs.n	101771a <EVNT_APP_bSt_76_validate_data+0x4e>
		}
	}
	
	if (st_76_structure->nbr_unread_entries >= MAX_NBR_EVENT_ENTRIES) {
 1017702:	899a      	ldrh	r2, [r3, #12]
 1017704:	2afe      	cmp	r2, #254	; 0xfe
 1017706:	d902      	bls.n	101770e <EVNT_APP_bSt_76_validate_data+0x42>
		st_76_structure->nbr_unread_entries = MAX_NBR_EVENT_ENTRIES;
 1017708:	22ff      	movs	r2, #255	; 0xff
 101770a:	819a      	strh	r2, [r3, #12]
		is_ok = false;
 101770c:	2000      	movs	r0, #0
	}
	
	return is_ok;
}
 101770e:	4770      	bx	lr
	if (st_76_structure->last_entry_element >= st_76_structure->nbr_valid_entries) {
 1017710:	889a      	ldrh	r2, [r3, #4]
 1017712:	428a      	cmp	r2, r1
		is_ok = false;
 1017714:	f04f 0000 	mov.w	r0, #0
	if (st_76_structure->last_entry_element >= st_76_structure->nbr_valid_entries) {
 1017718:	d3f3      	bcc.n	1017702 <EVNT_APP_bSt_76_validate_data+0x36>
 101771a:	1e4a      	subs	r2, r1, #1
 101771c:	b292      	uxth	r2, r2
		if (st_76_structure->nbr_valid_entries == 0) {
 101771e:	2900      	cmp	r1, #0
 1017720:	d0e6      	beq.n	10176f0 <EVNT_APP_bSt_76_validate_data+0x24>
		st_76_structure->last_entry_element = (st_76_structure->nbr_valid_entries - 1);
 1017722:	809a      	strh	r2, [r3, #4]
		is_ok = false;
 1017724:	2000      	movs	r0, #0
 1017726:	e7ec      	b.n	1017702 <EVNT_APP_bSt_76_validate_data+0x36>
 1017728:	200165dc 	.word	0x200165dc

0101772c <EVNT_APP_vRegister_event_in_st_74>:
*
* \param void
* \retval void
******************************************************************************
*/
void EVNT_APP_vRegister_event_in_st_74(EVENT_ALARM_TYPE xEvent) {
 101772c:	b5f0      	push	{r4, r5, r6, r7, lr}

	/* Number of valid entries in the ST_74 array */
	if (st_74.nbr_valid_entries < st_71.nbr_history_entries) {
 101772e:	4c3b      	ldr	r4, [pc, #236]	; (101781c <EVNT_APP_vRegister_event_in_st_74+0xf0>)
 1017730:	4e3b      	ldr	r6, [pc, #236]	; (1017820 <EVNT_APP_vRegister_event_in_st_74+0xf4>)
 1017732:	8865      	ldrh	r5, [r4, #2]
 1017734:	88f7      	ldrh	r7, [r6, #6]
void EVNT_APP_vRegister_event_in_st_74(EVENT_ALARM_TYPE xEvent) {
 1017736:	b087      	sub	sp, #28
	if (st_74.nbr_valid_entries < st_71.nbr_history_entries) {
 1017738:	42bd      	cmp	r5, r7
void EVNT_APP_vRegister_event_in_st_74(EVENT_ALARM_TYPE xEvent) {
 101773a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
	if (st_74.nbr_valid_entries < st_71.nbr_history_entries) {
 101773e:	d264      	bcs.n	101780a <EVNT_APP_vRegister_event_in_st_74+0xde>
		st_74.nbr_valid_entries++;
 1017740:	3501      	adds	r5, #1
 1017742:	b2ad      	uxth	r5, r5
	else {
		st_74.nbr_valid_entries = st_71.nbr_history_entries;
	}
	
	/* Update last entry element and last entry sequence number in the ST_74 array */
	if (st_74.nbr_valid_entries <= 1) {
 1017744:	2d01      	cmp	r5, #1
		st_74.nbr_valid_entries++;
 1017746:	8065      	strh	r5, [r4, #2]
	if (st_74.nbr_valid_entries <= 1) {
 1017748:	d963      	bls.n	1017812 <EVNT_APP_vRegister_event_in_st_74+0xe6>
		st_74.last_entry_seq_nbr = 0;
		st_74.nbr_unread_entries = 0;
	}
	else {
		
		st_74.last_entry_element++;
 101774a:	88a3      	ldrh	r3, [r4, #4]
		st_74.last_entry_seq_nbr++;
 101774c:	68a1      	ldr	r1, [r4, #8]
		st_74.nbr_unread_entries++;
 101774e:	89a2      	ldrh	r2, [r4, #12]
		st_74.last_entry_element++;
 1017750:	3301      	adds	r3, #1
 1017752:	b29b      	uxth	r3, r3
		st_74.last_entry_seq_nbr++;
 1017754:	3101      	adds	r1, #1
		st_74.nbr_unread_entries++;
 1017756:	3201      	adds	r2, #1
		
		if (st_74.last_entry_element >= st_71.nbr_history_entries) {
 1017758:	429f      	cmp	r7, r3
		st_74.last_entry_element++;
 101775a:	80a3      	strh	r3, [r4, #4]
		st_74.last_entry_seq_nbr++;
 101775c:	60a1      	str	r1, [r4, #8]
		st_74.nbr_unread_entries++;
 101775e:	81a2      	strh	r2, [r4, #12]
		if (st_74.last_entry_element >= st_71.nbr_history_entries) {
 1017760:	d802      	bhi.n	1017768 <EVNT_APP_vRegister_event_in_st_74+0x3c>
			st_74.last_entry_element = 0;
 1017762:	2300      	movs	r3, #0
 1017764:	80a3      	strh	r3, [r4, #4]
			st_74.nbr_unread_entries = 0;
 1017766:	81a3      	strh	r3, [r4, #12]
		}
	}
	
	uint16_t history_code = 0;
	history_code = (xEvent.code << TBL_PROC_NBR_bp) & TBL_PROC_NBR_bm;
	history_code |= xEvent.is_std ? (0 << STD_VS_MFG_FLAG_bp) : (1 << STD_VS_MFG_FLAG_bp);
 1017768:	f89d 3004 	ldrb.w	r3, [sp, #4]
	history_code = (xEvent.code << TBL_PROC_NBR_bp) & TBL_PROC_NBR_bm;
 101776c:	f89d 2000 	ldrb.w	r2, [sp]
	
	EEPROM_writer( ST_74_NBR_VALID_ENTRIES_ADDR, &st_74.nbr_valid_entries, 2 );
 1017770:	4d2c      	ldr	r5, [pc, #176]	; (1017824 <EVNT_APP_vRegister_event_in_st_74+0xf8>)
 1017772:	492d      	ldr	r1, [pc, #180]	; (1017828 <EVNT_APP_vRegister_event_in_st_74+0xfc>)
	history_code |= xEvent.is_std ? (0 << STD_VS_MFG_FLAG_bp) : (1 << STD_VS_MFG_FLAG_bp);
 1017774:	2b00      	cmp	r3, #0
 1017776:	bf0c      	ite	eq
 1017778:	f44f 6300 	moveq.w	r3, #2048	; 0x800
 101777c:	2300      	movne	r3, #0
 101777e:	4313      	orrs	r3, r2
	EEPROM_writer( ST_74_NBR_VALID_ENTRIES_ADDR, &st_74.nbr_valid_entries, 2 );
 1017780:	f646 1079 	movw	r0, #27001	; 0x6979
 1017784:	2202      	movs	r2, #2
	history_code |= xEvent.is_std ? (0 << STD_VS_MFG_FLAG_bp) : (1 << STD_VS_MFG_FLAG_bp);
 1017786:	f8ad 3016 	strh.w	r3, [sp, #22]
	EEPROM_writer( ST_74_NBR_VALID_ENTRIES_ADDR, &st_74.nbr_valid_entries, 2 );
 101778a:	47a8      	blx	r5
	EEPROM_writer( ST_74_LAST_ENTRY_ELEMENT_ADDR, &st_74.last_entry_element, 2 );
 101778c:	2202      	movs	r2, #2
 101778e:	4927      	ldr	r1, [pc, #156]	; (101782c <EVNT_APP_vRegister_event_in_st_74+0x100>)
 1017790:	f646 107b 	movw	r0, #27003	; 0x697b
 1017794:	47a8      	blx	r5
	EEPROM_writer( ST_74_LAST_ENTRY_SEQ_NBR_ADDR, &st_74.last_entry_seq_nbr, 4 );
 1017796:	2204      	movs	r2, #4
 1017798:	4925      	ldr	r1, [pc, #148]	; (1017830 <EVNT_APP_vRegister_event_in_st_74+0x104>)
 101779a:	f646 107d 	movw	r0, #27005	; 0x697d
 101779e:	47a8      	blx	r5
	EEPROM_writer( ST_74_HISTORY_TIME_ADDR + 4*st_74.last_entry_element, &xEvent.timestamp, 4 );
 10177a0:	88a0      	ldrh	r0, [r4, #4]
 10177a2:	f646 1383 	movw	r3, #27011	; 0x6983
 10177a6:	a902      	add	r1, sp, #8
 10177a8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 10177ac:	2204      	movs	r2, #4
 10177ae:	47a8      	blx	r5
	EEPROM_writer( ST_74_EVENT_NUMBER_ADDR + 2*st_74.last_entry_element, &xEvent.event_number, 2 );
 10177b0:	88a0      	ldrh	r0, [r4, #4]
 10177b2:	f646 537f 	movw	r3, #28031	; 0x6d7f
 10177b6:	a903      	add	r1, sp, #12
 10177b8:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 10177bc:	2202      	movs	r2, #2
 10177be:	47a8      	blx	r5
	EEPROM_writer( ST_74_HISTORY_SEQ_NBR_ADDR + 2*st_74.last_entry_element, &st_74.last_entry_seq_nbr, 2 );
 10177c0:	88a0      	ldrh	r0, [r4, #4]
 10177c2:	491b      	ldr	r1, [pc, #108]	; (1017830 <EVNT_APP_vRegister_event_in_st_74+0x104>)
 10177c4:	f646 737d 	movw	r3, #28541	; 0x6f7d
 10177c8:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 10177cc:	2202      	movs	r2, #2
 10177ce:	47a8      	blx	r5
	EEPROM_writer( ST_74_USER_ID_ADDR + 2*st_74.last_entry_element, &xEvent.user_id, 2 );	
 10177d0:	88a0      	ldrh	r0, [r4, #4]
 10177d2:	f247 137b 	movw	r3, #29051	; 0x717b
 10177d6:	f10d 0106 	add.w	r1, sp, #6
 10177da:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 10177de:	2202      	movs	r2, #2
 10177e0:	47a8      	blx	r5
	EEPROM_writer( ST_74_HISTORY_CODE_ADDR + 2*st_74.last_entry_element, &history_code, 2 );
 10177e2:	88a0      	ldrh	r0, [r4, #4]
 10177e4:	f247 3379 	movw	r3, #29561	; 0x7379
 10177e8:	f10d 0116 	add.w	r1, sp, #22
 10177ec:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 10177f0:	2202      	movs	r2, #2
 10177f2:	47a8      	blx	r5
	EEPROM_writer( ST_74_HISTORY_ARGUMENT_ADDR + 2*st_74.last_entry_element, &xEvent.argument, 2 );		
 10177f4:	88a0      	ldrh	r0, [r4, #4]
 10177f6:	f247 5377 	movw	r3, #30071	; 0x7577
 10177fa:	2202      	movs	r2, #2
 10177fc:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 1017800:	eb0d 0102 	add.w	r1, sp, r2
 1017804:	47a8      	blx	r5
}
 1017806:	b007      	add	sp, #28
 1017808:	bdf0      	pop	{r4, r5, r6, r7, pc}
		st_74.nbr_valid_entries = st_71.nbr_history_entries;
 101780a:	463d      	mov	r5, r7
	if (st_74.nbr_valid_entries <= 1) {
 101780c:	2d01      	cmp	r5, #1
		st_74.nbr_valid_entries = st_71.nbr_history_entries;
 101780e:	8067      	strh	r7, [r4, #2]
	if (st_74.nbr_valid_entries <= 1) {
 1017810:	d89b      	bhi.n	101774a <EVNT_APP_vRegister_event_in_st_74+0x1e>
		st_74.last_entry_element = 0;
 1017812:	2300      	movs	r3, #0
 1017814:	80a3      	strh	r3, [r4, #4]
		st_74.last_entry_seq_nbr = 0;
 1017816:	60a3      	str	r3, [r4, #8]
		st_74.nbr_unread_entries = 0;
 1017818:	81a3      	strh	r3, [r4, #12]
 101781a:	e7a5      	b.n	1017768 <EVNT_APP_vRegister_event_in_st_74+0x3c>
 101781c:	20000a70 	.word	0x20000a70
 1017820:	200165dc 	.word	0x200165dc
 1017824:	01017509 	.word	0x01017509
 1017828:	20000a72 	.word	0x20000a72
 101782c:	20000a74 	.word	0x20000a74
 1017830:	20000a78 	.word	0x20000a78

01017834 <EVNT_APP_vRegister_event_in_st_76>:
*
* \param void
* \retval void
******************************************************************************
*/
void EVNT_APP_vRegister_event_in_st_76(EVENT_ALARM_TYPE xEvent) {
 1017834:	b5f0      	push	{r4, r5, r6, r7, lr}
		
	/* Number of valid entries in the ST_76 array */
	if (st_76.nbr_valid_entries < st_71.nbr_event_entries) {
 1017836:	4c3b      	ldr	r4, [pc, #236]	; (1017924 <EVNT_APP_vRegister_event_in_st_76+0xf0>)
 1017838:	4e3b      	ldr	r6, [pc, #236]	; (1017928 <EVNT_APP_vRegister_event_in_st_76+0xf4>)
 101783a:	8865      	ldrh	r5, [r4, #2]
 101783c:	8937      	ldrh	r7, [r6, #8]
void EVNT_APP_vRegister_event_in_st_76(EVENT_ALARM_TYPE xEvent) {
 101783e:	b087      	sub	sp, #28
	if (st_76.nbr_valid_entries < st_71.nbr_event_entries) {
 1017840:	42bd      	cmp	r5, r7
void EVNT_APP_vRegister_event_in_st_76(EVENT_ALARM_TYPE xEvent) {
 1017842:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
	if (st_76.nbr_valid_entries < st_71.nbr_event_entries) {
 1017846:	d264      	bcs.n	1017912 <EVNT_APP_vRegister_event_in_st_76+0xde>
		st_76.nbr_valid_entries++;
 1017848:	3501      	adds	r5, #1
 101784a:	b2ad      	uxth	r5, r5
	else {
		st_76.nbr_valid_entries = st_71.nbr_event_entries;
	}
	
	/* Update last entry element and last entry sequence number in the ST_76 array */
	if (st_76.nbr_valid_entries <= 1) {
 101784c:	2d01      	cmp	r5, #1
		st_76.nbr_valid_entries++;
 101784e:	8065      	strh	r5, [r4, #2]
	if (st_76.nbr_valid_entries <= 1) {
 1017850:	d963      	bls.n	101791a <EVNT_APP_vRegister_event_in_st_76+0xe6>
		st_76.last_entry_seq_nbr = 0;
		st_76.nbr_unread_entries = 0;
	}
	else {
		
		st_76.last_entry_element++;
 1017852:	88a3      	ldrh	r3, [r4, #4]
		st_76.last_entry_seq_nbr++;
 1017854:	68a1      	ldr	r1, [r4, #8]
		st_76.nbr_unread_entries++;
 1017856:	89a2      	ldrh	r2, [r4, #12]
		st_76.last_entry_element++;
 1017858:	3301      	adds	r3, #1
 101785a:	b29b      	uxth	r3, r3
		st_76.last_entry_seq_nbr++;
 101785c:	3101      	adds	r1, #1
		st_76.nbr_unread_entries++;
 101785e:	3201      	adds	r2, #1
		
		if (st_76.last_entry_element >= st_71.nbr_event_entries) {
 1017860:	429f      	cmp	r7, r3
		st_76.last_entry_element++;
 1017862:	80a3      	strh	r3, [r4, #4]
		st_76.last_entry_seq_nbr++;
 1017864:	60a1      	str	r1, [r4, #8]
		st_76.nbr_unread_entries++;
 1017866:	81a2      	strh	r2, [r4, #12]
		if (st_76.last_entry_element >= st_71.nbr_event_entries) {
 1017868:	d802      	bhi.n	1017870 <EVNT_APP_vRegister_event_in_st_76+0x3c>
			st_76.last_entry_element = 0;
 101786a:	2300      	movs	r3, #0
 101786c:	80a3      	strh	r3, [r4, #4]
			st_76.nbr_unread_entries = 0;
 101786e:	81a3      	strh	r3, [r4, #12]
		}
	}
	
	uint16_t event_code = 0;
	event_code = (xEvent.code << TBL_PROC_NBR_bp) & TBL_PROC_NBR_bm;
	event_code |= xEvent.is_std ? (0 << STD_VS_MFG_FLAG_bp) : (1 << STD_VS_MFG_FLAG_bp);
 1017870:	f89d 3004 	ldrb.w	r3, [sp, #4]
	event_code = (xEvent.code << TBL_PROC_NBR_bp) & TBL_PROC_NBR_bm;
 1017874:	f89d 2000 	ldrb.w	r2, [sp]
	
	EEPROM_writer( ST_76_NBR_VALID_ENTRIES_ADDR, &st_76.nbr_valid_entries, 2 );
 1017878:	4d2c      	ldr	r5, [pc, #176]	; (101792c <EVNT_APP_vRegister_event_in_st_76+0xf8>)
 101787a:	492d      	ldr	r1, [pc, #180]	; (1017930 <EVNT_APP_vRegister_event_in_st_76+0xfc>)
	event_code |= xEvent.is_std ? (0 << STD_VS_MFG_FLAG_bp) : (1 << STD_VS_MFG_FLAG_bp);
 101787c:	2b00      	cmp	r3, #0
 101787e:	bf0c      	ite	eq
 1017880:	f44f 6300 	moveq.w	r3, #2048	; 0x800
 1017884:	2300      	movne	r3, #0
 1017886:	4313      	orrs	r3, r2
	EEPROM_writer( ST_76_NBR_VALID_ENTRIES_ADDR, &st_76.nbr_valid_entries, 2 );
 1017888:	f647 50ca 	movw	r0, #32202	; 0x7dca
 101788c:	2202      	movs	r2, #2
	event_code |= xEvent.is_std ? (0 << STD_VS_MFG_FLAG_bp) : (1 << STD_VS_MFG_FLAG_bp);
 101788e:	f8ad 3016 	strh.w	r3, [sp, #22]
	EEPROM_writer( ST_76_NBR_VALID_ENTRIES_ADDR, &st_76.nbr_valid_entries, 2 );
 1017892:	47a8      	blx	r5
	EEPROM_writer( ST_76_LAST_ENTRY_ELEMENT_ADDR, &st_76.last_entry_element, 2 );
 1017894:	2202      	movs	r2, #2
 1017896:	4927      	ldr	r1, [pc, #156]	; (1017934 <EVNT_APP_vRegister_event_in_st_76+0x100>)
 1017898:	f647 50cc 	movw	r0, #32204	; 0x7dcc
 101789c:	47a8      	blx	r5
	EEPROM_writer( ST_76_LAST_ENTRY_SEQ_NBR_ADDR, &st_76.last_entry_seq_nbr, 4 );
 101789e:	2204      	movs	r2, #4
 10178a0:	4925      	ldr	r1, [pc, #148]	; (1017938 <EVNT_APP_vRegister_event_in_st_76+0x104>)
 10178a2:	f647 50ce 	movw	r0, #32206	; 0x7dce
 10178a6:	47a8      	blx	r5
	EEPROM_writer( ST_76_EVENT_TIME_ADDR + 4*st_76.last_entry_element, &xEvent.timestamp, 4 );
 10178a8:	88a0      	ldrh	r0, [r4, #4]
 10178aa:	f500 50fb 	add.w	r0, r0, #8032	; 0x1f60
 10178ae:	3015      	adds	r0, #21
 10178b0:	a902      	add	r1, sp, #8
 10178b2:	2204      	movs	r2, #4
 10178b4:	0080      	lsls	r0, r0, #2
 10178b6:	47a8      	blx	r5
	EEPROM_writer( ST_76_EVENT_NUMBER_ADDR + 2*st_76.last_entry_element, &xEvent.event_number, 2 );
 10178b8:	88a0      	ldrh	r0, [r4, #4]
 10178ba:	f500 4081 	add.w	r0, r0, #16512	; 0x4080
 10178be:	3068      	adds	r0, #104	; 0x68
 10178c0:	a903      	add	r1, sp, #12
 10178c2:	2202      	movs	r2, #2
 10178c4:	0040      	lsls	r0, r0, #1
 10178c6:	47a8      	blx	r5
	EEPROM_writer( ST_76_EVENT_SEQ_NBR_ADDR + 2*st_76.last_entry_element, &st_76.last_entry_seq_nbr, 2 );
 10178c8:	88a0      	ldrh	r0, [r4, #4]
 10178ca:	491b      	ldr	r1, [pc, #108]	; (1017938 <EVNT_APP_vRegister_event_in_st_76+0x104>)
 10178cc:	f500 4083 	add.w	r0, r0, #16768	; 0x4180
 10178d0:	3067      	adds	r0, #103	; 0x67
 10178d2:	2202      	movs	r2, #2
 10178d4:	0040      	lsls	r0, r0, #1
 10178d6:	47a8      	blx	r5
	EEPROM_writer( ST_76_USER_ID_ADDR + 2*st_76.last_entry_element, &xEvent.user_id, 2 );
 10178d8:	88a0      	ldrh	r0, [r4, #4]
 10178da:	f500 4085 	add.w	r0, r0, #17024	; 0x4280
 10178de:	3066      	adds	r0, #102	; 0x66
 10178e0:	f10d 0106 	add.w	r1, sp, #6
 10178e4:	2202      	movs	r2, #2
 10178e6:	0040      	lsls	r0, r0, #1
 10178e8:	47a8      	blx	r5
	EEPROM_writer( ST_76_EVENT_CODE_ADDR + 2*st_76.last_entry_element, &event_code, 2 );
 10178ea:	88a0      	ldrh	r0, [r4, #4]
 10178ec:	f500 4087 	add.w	r0, r0, #17280	; 0x4380
 10178f0:	3065      	adds	r0, #101	; 0x65
 10178f2:	f10d 0116 	add.w	r1, sp, #22
 10178f6:	2202      	movs	r2, #2
 10178f8:	0040      	lsls	r0, r0, #1
 10178fa:	47a8      	blx	r5
	EEPROM_writer( ST_76_EVENT_ARGUMENT_ADDR + 2*st_76.last_entry_element, &xEvent.argument, 2 );	
 10178fc:	88a0      	ldrh	r0, [r4, #4]
 10178fe:	f500 4089 	add.w	r0, r0, #17536	; 0x4480
 1017902:	2202      	movs	r2, #2
 1017904:	3064      	adds	r0, #100	; 0x64
 1017906:	eb0d 0102 	add.w	r1, sp, r2
 101790a:	0040      	lsls	r0, r0, #1
 101790c:	47a8      	blx	r5
}
 101790e:	b007      	add	sp, #28
 1017910:	bdf0      	pop	{r4, r5, r6, r7, pc}
		st_76.nbr_valid_entries = st_71.nbr_event_entries;
 1017912:	463d      	mov	r5, r7
	if (st_76.nbr_valid_entries <= 1) {
 1017914:	2d01      	cmp	r5, #1
		st_76.nbr_valid_entries = st_71.nbr_event_entries;
 1017916:	8067      	strh	r7, [r4, #2]
	if (st_76.nbr_valid_entries <= 1) {
 1017918:	d89b      	bhi.n	1017852 <EVNT_APP_vRegister_event_in_st_76+0x1e>
		st_76.last_entry_element = 0;
 101791a:	2300      	movs	r3, #0
 101791c:	80a3      	strh	r3, [r4, #4]
		st_76.last_entry_seq_nbr = 0;
 101791e:	60a3      	str	r3, [r4, #8]
		st_76.nbr_unread_entries = 0;
 1017920:	81a3      	strh	r3, [r4, #12]
 1017922:	e7a5      	b.n	1017870 <EVNT_APP_vRegister_event_in_st_76+0x3c>
 1017924:	20000aa0 	.word	0x20000aa0
 1017928:	200165dc 	.word	0x200165dc
 101792c:	01017509 	.word	0x01017509
 1017930:	20000aa2 	.word	0x20000aa2
 1017934:	20000aa4 	.word	0x20000aa4
 1017938:	20000aa8 	.word	0x20000aa8

0101793c <EVNT_APP_vSt_71_read_eeprom_values>:
void EVNT_APP_vSt_71_read_eeprom_values(ST_70_TYPE *st_71_structure) {	
 101793c:	b570      	push	{r4, r5, r6, lr}
	EEPROM_reader( ST_71_LOG_FLAGS_ADDR, &st_71_structure->log_flags, 1 );
 101793e:	4601      	mov	r1, r0
void EVNT_APP_vSt_71_read_eeprom_values(ST_70_TYPE *st_71_structure) {	
 1017940:	4605      	mov	r5, r0
	EEPROM_reader( ST_71_LOG_FLAGS_ADDR, &st_71_structure->log_flags, 1 );
 1017942:	4c13      	ldr	r4, [pc, #76]	; (1017990 <EVNT_APP_vSt_71_read_eeprom_values+0x54>)
 1017944:	2201      	movs	r2, #1
 1017946:	f640 6021 	movw	r0, #3617	; 0xe21
 101794a:	47a0      	blx	r4
	EEPROM_reader( ST_71_NBR_STD_EVENTS_ADDR, &st_71_structure->nbr_std_events, 1 );
 101794c:	1c69      	adds	r1, r5, #1
 101794e:	2201      	movs	r2, #1
 1017950:	f640 6022 	movw	r0, #3618	; 0xe22
 1017954:	47a0      	blx	r4
	EEPROM_reader( ST_71_NBR_MFG_EVENTS_ADDR, &st_71_structure->nbr_mfg_events, 1 );
 1017956:	1ca9      	adds	r1, r5, #2
 1017958:	2201      	movs	r2, #1
 101795a:	f640 6023 	movw	r0, #3619	; 0xe23
 101795e:	47a0      	blx	r4
	EEPROM_reader( ST_71_HIST_DATA_LENGTH_ADDR, &st_71_structure->hist_data_length, 1 );
 1017960:	1ce9      	adds	r1, r5, #3
 1017962:	2201      	movs	r2, #1
 1017964:	f640 6024 	movw	r0, #3620	; 0xe24
 1017968:	47a0      	blx	r4
	EEPROM_reader( ST_71_EVENT_DATA_LENGTH_ADDR, &st_71_structure->event_data_length, 1 );
 101796a:	1d29      	adds	r1, r5, #4
 101796c:	2201      	movs	r2, #1
 101796e:	f640 6025 	movw	r0, #3621	; 0xe25
 1017972:	47a0      	blx	r4
	EEPROM_reader( ST_71_NBR_HISTORY_ENTRIES_ADDR, &st_71_structure->nbr_history_entries, 2 );
 1017974:	1da9      	adds	r1, r5, #6
 1017976:	2202      	movs	r2, #2
 1017978:	f640 6026 	movw	r0, #3622	; 0xe26
 101797c:	47a0      	blx	r4
	EEPROM_reader( ST_71_NBR_EVENT_ENTRIES_ADDR, &st_71_structure->nbr_event_entries, 2 );
 101797e:	f105 0108 	add.w	r1, r5, #8
 1017982:	4623      	mov	r3, r4
 1017984:	2202      	movs	r2, #2
 1017986:	f640 6028 	movw	r0, #3624	; 0xe28
}
 101798a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	EEPROM_reader( ST_71_NBR_EVENT_ENTRIES_ADDR, &st_71_structure->nbr_event_entries, 2 );
 101798e:	4718      	bx	r3
 1017990:	01017511 	.word	0x01017511

01017994 <EVNT_APP_vMt_73_read_eeprom_values>:
void EVNT_APP_vMt_73_read_eeprom_values(MT_73_TYPE *mt_73_structure) { 	
 1017994:	b570      	push	{r4, r5, r6, lr}
	EEPROM_reader( MT_73_STD_ALARMS_MONITORED_FLAGS_ADDR, &mt_73_structure->std_alarms_monitored_flags, st_71.nbr_std_events );
 1017996:	4e08      	ldr	r6, [pc, #32]	; (10179b8 <EVNT_APP_vMt_73_read_eeprom_values+0x24>)
 1017998:	4c08      	ldr	r4, [pc, #32]	; (10179bc <EVNT_APP_vMt_73_read_eeprom_values+0x28>)
 101799a:	7872      	ldrb	r2, [r6, #1]
void EVNT_APP_vMt_73_read_eeprom_values(MT_73_TYPE *mt_73_structure) { 	
 101799c:	4605      	mov	r5, r0
	EEPROM_reader( MT_73_STD_ALARMS_MONITORED_FLAGS_ADDR, &mt_73_structure->std_alarms_monitored_flags, st_71.nbr_std_events );
 101799e:	4601      	mov	r1, r0
 10179a0:	f241 00e7 	movw	r0, #4327	; 0x10e7
 10179a4:	47a0      	blx	r4
	EEPROM_reader( MT_73_MFG_ALARMS_MONITORED_FLAGS_ADDR, &mt_73_structure->mfg_alarms_monitored_flags, st_71.nbr_mfg_events );
 10179a6:	78b2      	ldrb	r2, [r6, #2]
 10179a8:	f105 010a 	add.w	r1, r5, #10
 10179ac:	4623      	mov	r3, r4
 10179ae:	f241 00f1 	movw	r0, #4337	; 0x10f1
}
 10179b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	EEPROM_reader( MT_73_MFG_ALARMS_MONITORED_FLAGS_ADDR, &mt_73_structure->mfg_alarms_monitored_flags, st_71.nbr_mfg_events );
 10179b6:	4718      	bx	r3
 10179b8:	200165dc 	.word	0x200165dc
 10179bc:	01017511 	.word	0x01017511

010179c0 <EVNT_APP_vLoad_event_number>:
void EVNT_APP_vLoad_event_number(void) {
 10179c0:	b510      	push	{r4, lr}
 10179c2:	b082      	sub	sp, #8
	uint16_t event_nbr_st_74 = 0;
 10179c4:	2300      	movs	r3, #0
	EEPROM_reader( ST_74_LAST_ENTRY_ELEMENT_ADDR, &last_entry_element, 2 );
 10179c6:	f10d 0102 	add.w	r1, sp, #2
 10179ca:	2202      	movs	r2, #2
 10179cc:	f646 107b 	movw	r0, #27003	; 0x697b
 10179d0:	4c1d      	ldr	r4, [pc, #116]	; (1017a48 <EVNT_APP_vLoad_event_number+0x88>)
	uint16_t event_nbr_st_74 = 0;
 10179d2:	f8ad 3004 	strh.w	r3, [sp, #4]
	uint16_t event_nbr_st_76 = 0;
 10179d6:	f8ad 3006 	strh.w	r3, [sp, #6]
	EEPROM_reader( ST_74_LAST_ENTRY_ELEMENT_ADDR, &last_entry_element, 2 );
 10179da:	47a0      	blx	r4
	if ( (last_entry_element > 0) && (last_entry_element <= st_71.nbr_event_entries) ) {
 10179dc:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 10179e0:	b118      	cbz	r0, 10179ea <EVNT_APP_vLoad_event_number+0x2a>
 10179e2:	4b1a      	ldr	r3, [pc, #104]	; (1017a4c <EVNT_APP_vLoad_event_number+0x8c>)
 10179e4:	891b      	ldrh	r3, [r3, #8]
 10179e6:	4283      	cmp	r3, r0
 10179e8:	d225      	bcs.n	1017a36 <EVNT_APP_vLoad_event_number+0x76>
	EEPROM_reader( ST_76_LAST_ENTRY_ELEMENT_ADDR, &last_entry_element, 2 );
 10179ea:	f10d 0102 	add.w	r1, sp, #2
 10179ee:	2202      	movs	r2, #2
 10179f0:	f647 50cc 	movw	r0, #32204	; 0x7dcc
 10179f4:	47a0      	blx	r4
	if ( (last_entry_element > 0) && (last_entry_element <= st_71.nbr_history_entries) ) {
 10179f6:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 10179fa:	b118      	cbz	r0, 1017a04 <EVNT_APP_vLoad_event_number+0x44>
 10179fc:	4b13      	ldr	r3, [pc, #76]	; (1017a4c <EVNT_APP_vLoad_event_number+0x8c>)
 10179fe:	88db      	ldrh	r3, [r3, #6]
 1017a00:	4283      	cmp	r3, r0
 1017a02:	d20f      	bcs.n	1017a24 <EVNT_APP_vLoad_event_number+0x64>
	if (event_nbr_st_74 > event_nbr_st_76) {
 1017a04:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 1017a08:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 1017a0c:	4293      	cmp	r3, r2
 1017a0e:	d801      	bhi.n	1017a14 <EVNT_APP_vLoad_event_number+0x54>
	else if (event_nbr_st_74 < event_nbr_st_76) {
 1017a10:	d304      	bcc.n	1017a1c <EVNT_APP_vLoad_event_number+0x5c>
	else if (event_nbr_st_74 == event_nbr_st_76) {
 1017a12:	d101      	bne.n	1017a18 <EVNT_APP_vLoad_event_number+0x58>
		event_number = event_nbr_st_74;
 1017a14:	4a0e      	ldr	r2, [pc, #56]	; (1017a50 <EVNT_APP_vLoad_event_number+0x90>)
 1017a16:	8013      	strh	r3, [r2, #0]
}
 1017a18:	b002      	add	sp, #8
 1017a1a:	bd10      	pop	{r4, pc}
		event_number = event_nbr_st_76;
 1017a1c:	4b0c      	ldr	r3, [pc, #48]	; (1017a50 <EVNT_APP_vLoad_event_number+0x90>)
 1017a1e:	801a      	strh	r2, [r3, #0]
}
 1017a20:	b002      	add	sp, #8
 1017a22:	bd10      	pop	{r4, pc}
		EEPROM_reader( ST_76_EVENT_NUMBER_ADDR + 2*(last_entry_element - 1), &event_nbr_st_76, 2 );
 1017a24:	f500 4081 	add.w	r0, r0, #16512	; 0x4080
 1017a28:	3067      	adds	r0, #103	; 0x67
 1017a2a:	2202      	movs	r2, #2
 1017a2c:	f10d 0106 	add.w	r1, sp, #6
 1017a30:	0040      	lsls	r0, r0, #1
 1017a32:	47a0      	blx	r4
 1017a34:	e7e6      	b.n	1017a04 <EVNT_APP_vLoad_event_number+0x44>
		EEPROM_reader( ST_74_EVENT_NUMBER_ADDR + 2*(last_entry_element - 1), &event_nbr_st_74, 2 );
 1017a36:	0040      	lsls	r0, r0, #1
 1017a38:	f500 40da 	add.w	r0, r0, #27904	; 0x6d00
 1017a3c:	2202      	movs	r2, #2
 1017a3e:	a901      	add	r1, sp, #4
 1017a40:	307d      	adds	r0, #125	; 0x7d
 1017a42:	47a0      	blx	r4
 1017a44:	e7d1      	b.n	10179ea <EVNT_APP_vLoad_event_number+0x2a>
 1017a46:	bf00      	nop
 1017a48:	01017511 	.word	0x01017511
 1017a4c:	200165dc 	.word	0x200165dc
 1017a50:	20000a6c 	.word	0x20000a6c

01017a54 <EVNT_APP_vSt_73_read_eeprom_values>:
void EVNT_APP_vSt_73_read_eeprom_values(ST_73_TYPE *st_73_structure) { 	
 1017a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	EEPROM_reader( ST_73_STD_EVENTS_MONITORED_FLAGS_ADDR, &st_73_structure->std_events_monitored_flags, st_71.nbr_std_events );
 1017a58:	f8df 9094 	ldr.w	r9, [pc, #148]	; 1017af0 <EVNT_APP_vSt_73_read_eeprom_values+0x9c>
 1017a5c:	4c20      	ldr	r4, [pc, #128]	; (1017ae0 <EVNT_APP_vSt_73_read_eeprom_values+0x8c>)
 1017a5e:	f899 2001 	ldrb.w	r2, [r9, #1]
	EEPROM_reader( ST_73_STD_TBLS_MONITORED_FLAGS_ADDR, &st_73_structure->std_tbls_monitored_flags, DIM_STD_TBLS_USED );
 1017a62:	4e20      	ldr	r6, [pc, #128]	; (1017ae4 <EVNT_APP_vSt_73_read_eeprom_values+0x90>)
	EEPROM_reader( ST_73_MFG_TBLS_MONITORED_FLAGS_ADDR, &st_73_structure->mfg_tbls_monitored_flags, DIM_MFG_TBLS_USED );
 1017a64:	4f20      	ldr	r7, [pc, #128]	; (1017ae8 <EVNT_APP_vSt_73_read_eeprom_values+0x94>)
	EEPROM_reader( ST_73_STD_PROC_MONITORED_FLAGS_ADDR, &st_73_structure->std_proc_monitored_flags, DIM_STD_PROC_USED );
 1017a66:	f8df 808c 	ldr.w	r8, [pc, #140]	; 1017af4 <EVNT_APP_vSt_73_read_eeprom_values+0xa0>
void EVNT_APP_vSt_73_read_eeprom_values(ST_73_TYPE *st_73_structure) { 	
 1017a6a:	4605      	mov	r5, r0
	EEPROM_reader( ST_73_STD_EVENTS_MONITORED_FLAGS_ADDR, &st_73_structure->std_events_monitored_flags, st_71.nbr_std_events );
 1017a6c:	4601      	mov	r1, r0
 1017a6e:	f640 6031 	movw	r0, #3633	; 0xe31
 1017a72:	47a0      	blx	r4
	EEPROM_reader( ST_73_MFG_EVENTS_MONITORED_FLAGS_ADDR, &st_73_structure->mfg_events_monitored_flags, st_71.nbr_mfg_events );
 1017a74:	f899 2002 	ldrb.w	r2, [r9, #2]
 1017a78:	f105 010a 	add.w	r1, r5, #10
 1017a7c:	f640 603b 	movw	r0, #3643	; 0xe3b
 1017a80:	47a0      	blx	r4
	EEPROM_reader( ST_73_STD_TBLS_MONITORED_FLAGS_ADDR, &st_73_structure->std_tbls_monitored_flags, DIM_STD_TBLS_USED );
 1017a82:	47b0      	blx	r6
 1017a84:	f105 010f 	add.w	r1, r5, #15
 1017a88:	4602      	mov	r2, r0
 1017a8a:	f44f 6064 	mov.w	r0, #3648	; 0xe40
 1017a8e:	47a0      	blx	r4
	EEPROM_reader( ST_73_MFG_TBLS_MONITORED_FLAGS_ADDR, &st_73_structure->mfg_tbls_monitored_flags, DIM_MFG_TBLS_USED );
 1017a90:	47b0      	blx	r6
 1017a92:	4681      	mov	r9, r0
 1017a94:	47b8      	blx	r7
 1017a96:	f105 0137 	add.w	r1, r5, #55	; 0x37
 1017a9a:	4602      	mov	r2, r0
 1017a9c:	f509 6064 	add.w	r0, r9, #3648	; 0xe40
 1017aa0:	47a0      	blx	r4
	EEPROM_reader( ST_73_STD_PROC_MONITORED_FLAGS_ADDR, &st_73_structure->std_proc_monitored_flags, DIM_STD_PROC_USED );
 1017aa2:	47b0      	blx	r6
 1017aa4:	4681      	mov	r9, r0
 1017aa6:	47b8      	blx	r7
 1017aa8:	4682      	mov	sl, r0
 1017aaa:	47c0      	blx	r8
 1017aac:	f509 6964 	add.w	r9, r9, #3648	; 0xe40
 1017ab0:	4602      	mov	r2, r0
 1017ab2:	f105 015f 	add.w	r1, r5, #95	; 0x5f
 1017ab6:	eb09 000a 	add.w	r0, r9, sl
 1017aba:	47a0      	blx	r4
	EEPROM_reader( ST_73_MFG_PROC_MONITORED_FLAGS_ADDR, &st_73_structure->mfg_proc_monitored_flags, DIM_MFG_PROC_USED );
 1017abc:	47b0      	blx	r6
 1017abe:	4606      	mov	r6, r0
 1017ac0:	47b8      	blx	r7
 1017ac2:	f506 6664 	add.w	r6, r6, #3648	; 0xe40
 1017ac6:	4406      	add	r6, r0
 1017ac8:	47c0      	blx	r8
 1017aca:	4b08      	ldr	r3, [pc, #32]	; (1017aec <EVNT_APP_vSt_73_read_eeprom_values+0x98>)
 1017acc:	4607      	mov	r7, r0
 1017ace:	4798      	blx	r3
 1017ad0:	f105 0187 	add.w	r1, r5, #135	; 0x87
 1017ad4:	4602      	mov	r2, r0
 1017ad6:	4623      	mov	r3, r4
 1017ad8:	19b8      	adds	r0, r7, r6
}
 1017ada:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	EEPROM_reader( ST_73_MFG_PROC_MONITORED_FLAGS_ADDR, &st_73_structure->mfg_proc_monitored_flags, DIM_MFG_PROC_USED );
 1017ade:	4718      	bx	r3
 1017ae0:	01017511 	.word	0x01017511
 1017ae4:	0101ab11 	.word	0x0101ab11
 1017ae8:	0101ab6d 	.word	0x0101ab6d
 1017aec:	0101abe9 	.word	0x0101abe9
 1017af0:	200165dc 	.word	0x200165dc
 1017af4:	0101abad 	.word	0x0101abad

01017af8 <EVNT_APP_vSt_75_read_eeprom_values>:
void EVNT_APP_vSt_75_read_eeprom_values(ST_73_TYPE *st_75_structure) { 	
 1017af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	EEPROM_reader( ST_75_STD_EVENTS_MONITORED_FLAGS_ADDR, &st_75_structure->std_events_monitored_flags, st_71.nbr_std_events );
 1017afc:	f8df 9094 	ldr.w	r9, [pc, #148]	; 1017b94 <EVNT_APP_vSt_75_read_eeprom_values+0x9c>
 1017b00:	4c20      	ldr	r4, [pc, #128]	; (1017b84 <EVNT_APP_vSt_75_read_eeprom_values+0x8c>)
 1017b02:	f899 2001 	ldrb.w	r2, [r9, #1]
	EEPROM_reader( ST_75_STD_TBLS_MONITORED_FLAGS_ADDR, &st_75_structure->std_tbls_monitored_flags, DIM_STD_TBLS_USED );
 1017b06:	4e20      	ldr	r6, [pc, #128]	; (1017b88 <EVNT_APP_vSt_75_read_eeprom_values+0x90>)
	EEPROM_reader( ST_75_MFG_TBLS_MONITORED_FLAGS_ADDR, &st_75_structure->mfg_tbls_monitored_flags, DIM_MFG_TBLS_USED );
 1017b08:	4f20      	ldr	r7, [pc, #128]	; (1017b8c <EVNT_APP_vSt_75_read_eeprom_values+0x94>)
	EEPROM_reader( ST_75_STD_PROC_MONITORED_FLAGS_ADDR, &st_75_structure->std_proc_monitored_flags, DIM_STD_PROC_USED );
 1017b0a:	f8df 808c 	ldr.w	r8, [pc, #140]	; 1017b98 <EVNT_APP_vSt_75_read_eeprom_values+0xa0>
void EVNT_APP_vSt_75_read_eeprom_values(ST_73_TYPE *st_75_structure) { 	
 1017b0e:	4605      	mov	r5, r0
	EEPROM_reader( ST_75_STD_EVENTS_MONITORED_FLAGS_ADDR, &st_75_structure->std_events_monitored_flags, st_71.nbr_std_events );
 1017b10:	4601      	mov	r1, r0
 1017b12:	f640 60b5 	movw	r0, #3765	; 0xeb5
 1017b16:	47a0      	blx	r4
	EEPROM_reader( ST_75_MFG_EVENTS_MONITORED_FLAGS_ADDR, &st_75_structure->mfg_events_monitored_flags, st_71.nbr_mfg_events );
 1017b18:	f899 2002 	ldrb.w	r2, [r9, #2]
 1017b1c:	f105 010a 	add.w	r1, r5, #10
 1017b20:	f640 60bf 	movw	r0, #3775	; 0xebf
 1017b24:	47a0      	blx	r4
	EEPROM_reader( ST_75_STD_TBLS_MONITORED_FLAGS_ADDR, &st_75_structure->std_tbls_monitored_flags, DIM_STD_TBLS_USED );
 1017b26:	47b0      	blx	r6
 1017b28:	f105 010f 	add.w	r1, r5, #15
 1017b2c:	4602      	mov	r2, r0
 1017b2e:	f640 60c4 	movw	r0, #3780	; 0xec4
 1017b32:	47a0      	blx	r4
	EEPROM_reader( ST_75_MFG_TBLS_MONITORED_FLAGS_ADDR, &st_75_structure->mfg_tbls_monitored_flags, DIM_MFG_TBLS_USED );
 1017b34:	47b0      	blx	r6
 1017b36:	4681      	mov	r9, r0
 1017b38:	47b8      	blx	r7
 1017b3a:	f105 0137 	add.w	r1, r5, #55	; 0x37
 1017b3e:	4602      	mov	r2, r0
 1017b40:	f609 60c4 	addw	r0, r9, #3780	; 0xec4
 1017b44:	47a0      	blx	r4
	EEPROM_reader( ST_75_STD_PROC_MONITORED_FLAGS_ADDR, &st_75_structure->std_proc_monitored_flags, DIM_STD_PROC_USED );
 1017b46:	47b0      	blx	r6
 1017b48:	4681      	mov	r9, r0
 1017b4a:	47b8      	blx	r7
 1017b4c:	4682      	mov	sl, r0
 1017b4e:	47c0      	blx	r8
 1017b50:	f609 69c4 	addw	r9, r9, #3780	; 0xec4
 1017b54:	4602      	mov	r2, r0
 1017b56:	f105 015f 	add.w	r1, r5, #95	; 0x5f
 1017b5a:	eb09 000a 	add.w	r0, r9, sl
 1017b5e:	47a0      	blx	r4
	EEPROM_reader( ST_75_MFG_PROC_MONITORED_FLAGS_ADDR, &st_75_structure->mfg_proc_monitored_flags, DIM_MFG_PROC_USED );
 1017b60:	47b0      	blx	r6
 1017b62:	4606      	mov	r6, r0
 1017b64:	47b8      	blx	r7
 1017b66:	f606 66c4 	addw	r6, r6, #3780	; 0xec4
 1017b6a:	4406      	add	r6, r0
 1017b6c:	47c0      	blx	r8
 1017b6e:	4b08      	ldr	r3, [pc, #32]	; (1017b90 <EVNT_APP_vSt_75_read_eeprom_values+0x98>)
 1017b70:	4607      	mov	r7, r0
 1017b72:	4798      	blx	r3
 1017b74:	f105 0187 	add.w	r1, r5, #135	; 0x87
 1017b78:	4602      	mov	r2, r0
 1017b7a:	4623      	mov	r3, r4
 1017b7c:	19b8      	adds	r0, r7, r6
}
 1017b7e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	EEPROM_reader( ST_75_MFG_PROC_MONITORED_FLAGS_ADDR, &st_75_structure->mfg_proc_monitored_flags, DIM_MFG_PROC_USED );
 1017b82:	4718      	bx	r3
 1017b84:	01017511 	.word	0x01017511
 1017b88:	0101ab11 	.word	0x0101ab11
 1017b8c:	0101ab6d 	.word	0x0101ab6d
 1017b90:	0101abe9 	.word	0x0101abe9
 1017b94:	200165dc 	.word	0x200165dc
 1017b98:	0101abad 	.word	0x0101abad

01017b9c <EVNT_APP_vSt_73_to_array>:
void EVNT_APP_vSt_75_to_array(ST_73_TYPE st_75_source, uint8_t *table_buffer) {
 1017b9c:	b084      	sub	sp, #16
 1017b9e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for ( i = 0; i < st_71.nbr_std_events; i++ ) {
 1017ba2:	4e3e      	ldr	r6, [pc, #248]	; (1017c9c <EVNT_APP_vSt_73_to_array+0x100>)
void EVNT_APP_vSt_75_to_array(ST_73_TYPE st_75_source, uint8_t *table_buffer) {
 1017ba4:	9d34      	ldr	r5, [sp, #208]	; 0xd0
	for ( i = 0; i < st_71.nbr_std_events; i++ ) {
 1017ba6:	7874      	ldrb	r4, [r6, #1]
void EVNT_APP_vSt_75_to_array(ST_73_TYPE st_75_source, uint8_t *table_buffer) {
 1017ba8:	af08      	add	r7, sp, #32
 1017baa:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
	for ( i = 0; i < st_71.nbr_std_events; i++ ) {
 1017bae:	2c00      	cmp	r4, #0
 1017bb0:	d070      	beq.n	1017c94 <EVNT_APP_vSt_73_to_array+0xf8>
 1017bb2:	2300      	movs	r3, #0
		table_buffer[k++] = st_75_source.std_events_monitored_flags[i];
 1017bb4:	aa08      	add	r2, sp, #32
 1017bb6:	5cd2      	ldrb	r2, [r2, r3]
 1017bb8:	54ea      	strb	r2, [r5, r3]
 1017bba:	3301      	adds	r3, #1
	for ( i = 0; i < st_71.nbr_std_events; i++ ) {
 1017bbc:	7872      	ldrb	r2, [r6, #1]
		table_buffer[k++] = st_75_source.std_events_monitored_flags[i];
 1017bbe:	b299      	uxth	r1, r3
	for ( i = 0; i < st_71.nbr_std_events; i++ ) {
 1017bc0:	428a      	cmp	r2, r1
 1017bc2:	460b      	mov	r3, r1
 1017bc4:	d8f6      	bhi.n	1017bb4 <EVNT_APP_vSt_73_to_array+0x18>
	for ( i = 0; i < st_71.nbr_mfg_events; i++ ) {
 1017bc6:	78b3      	ldrb	r3, [r6, #2]
 1017bc8:	2b00      	cmp	r3, #0
 1017bca:	d065      	beq.n	1017c98 <EVNT_APP_vSt_73_to_array+0xfc>
 1017bcc:	2200      	movs	r2, #0
		table_buffer[k++] = st_75_source.mfg_events_monitored_flags[i];
 1017bce:	ab08      	add	r3, sp, #32
 1017bd0:	4413      	add	r3, r2
	for ( i = 0; i < st_71.nbr_mfg_events; i++ ) {
 1017bd2:	3201      	adds	r2, #1
		table_buffer[k++] = st_75_source.mfg_events_monitored_flags[i];
 1017bd4:	7a9b      	ldrb	r3, [r3, #10]
 1017bd6:	546b      	strb	r3, [r5, r1]
	for ( i = 0; i < st_71.nbr_mfg_events; i++ ) {
 1017bd8:	78b3      	ldrb	r3, [r6, #2]
		table_buffer[k++] = st_75_source.mfg_events_monitored_flags[i];
 1017bda:	1c4f      	adds	r7, r1, #1
	for ( i = 0; i < st_71.nbr_mfg_events; i++ ) {
 1017bdc:	b292      	uxth	r2, r2
		table_buffer[k++] = st_75_source.mfg_events_monitored_flags[i];
 1017bde:	b2bf      	uxth	r7, r7
	for ( i = 0; i < st_71.nbr_mfg_events; i++ ) {
 1017be0:	4293      	cmp	r3, r2
		table_buffer[k++] = st_75_source.mfg_events_monitored_flags[i];
 1017be2:	4639      	mov	r1, r7
	for ( i = 0; i < st_71.nbr_mfg_events; i++ ) {
 1017be4:	d8f3      	bhi.n	1017bce <EVNT_APP_vSt_73_to_array+0x32>
 1017be6:	2400      	movs	r4, #0
 1017be8:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 1017ca0 <EVNT_APP_vSt_73_to_array+0x104>
 1017bec:	e001      	b.n	1017bf2 <EVNT_APP_vSt_73_to_array+0x56>
		table_buffer[k++] = st_75_source.std_tbls_monitored_flags[i];
 1017bee:	7bdb      	ldrb	r3, [r3, #15]
 1017bf0:	55ab      	strb	r3, [r5, r6]
	for ( i = 0; i < DIM_STD_TBLS_USED; i++ ) {
 1017bf2:	47c8      	blx	r9
 1017bf4:	fa1f f884 	uxth.w	r8, r4
 1017bf8:	b280      	uxth	r0, r0
 1017bfa:	eb08 0607 	add.w	r6, r8, r7
		table_buffer[k++] = st_75_source.std_tbls_monitored_flags[i];
 1017bfe:	ab08      	add	r3, sp, #32
	for ( i = 0; i < DIM_STD_TBLS_USED; i++ ) {
 1017c00:	4580      	cmp	r8, r0
		table_buffer[k++] = st_75_source.std_tbls_monitored_flags[i];
 1017c02:	fa13 f384 	uxtah	r3, r3, r4
 1017c06:	b2b6      	uxth	r6, r6
 1017c08:	f104 0401 	add.w	r4, r4, #1
	for ( i = 0; i < DIM_STD_TBLS_USED; i++ ) {
 1017c0c:	d3ef      	bcc.n	1017bee <EVNT_APP_vSt_73_to_array+0x52>
 1017c0e:	2400      	movs	r4, #0
 1017c10:	f8df 9090 	ldr.w	r9, [pc, #144]	; 1017ca4 <EVNT_APP_vSt_73_to_array+0x108>
 1017c14:	e002      	b.n	1017c1c <EVNT_APP_vSt_73_to_array+0x80>
		table_buffer[k++] = st_75_source.mfg_tbls_monitored_flags[i];
 1017c16:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 1017c1a:	55eb      	strb	r3, [r5, r7]
	for ( i = 0; i < DIM_MFG_TBLS_USED; i++ ) {
 1017c1c:	47c8      	blx	r9
 1017c1e:	fa1f f884 	uxth.w	r8, r4
 1017c22:	b280      	uxth	r0, r0
 1017c24:	eb06 0708 	add.w	r7, r6, r8
		table_buffer[k++] = st_75_source.mfg_tbls_monitored_flags[i];
 1017c28:	ab08      	add	r3, sp, #32
	for ( i = 0; i < DIM_MFG_TBLS_USED; i++ ) {
 1017c2a:	4580      	cmp	r8, r0
		table_buffer[k++] = st_75_source.mfg_tbls_monitored_flags[i];
 1017c2c:	fa13 f384 	uxtah	r3, r3, r4
 1017c30:	b2bf      	uxth	r7, r7
 1017c32:	f104 0401 	add.w	r4, r4, #1
	for ( i = 0; i < DIM_MFG_TBLS_USED; i++ ) {
 1017c36:	d3ee      	bcc.n	1017c16 <EVNT_APP_vSt_73_to_array+0x7a>
 1017c38:	2400      	movs	r4, #0
 1017c3a:	f8df 906c 	ldr.w	r9, [pc, #108]	; 1017ca8 <EVNT_APP_vSt_73_to_array+0x10c>
 1017c3e:	e002      	b.n	1017c46 <EVNT_APP_vSt_73_to_array+0xaa>
		table_buffer[k++] = st_75_source.std_proc_monitored_flags[i];
 1017c40:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 1017c44:	55ab      	strb	r3, [r5, r6]
	for ( i = 0; i < DIM_STD_PROC_USED; i++ ) {
 1017c46:	47c8      	blx	r9
 1017c48:	fa1f f884 	uxth.w	r8, r4
 1017c4c:	b280      	uxth	r0, r0
 1017c4e:	eb08 0607 	add.w	r6, r8, r7
		table_buffer[k++] = st_75_source.std_proc_monitored_flags[i];
 1017c52:	ab08      	add	r3, sp, #32
	for ( i = 0; i < DIM_STD_PROC_USED; i++ ) {
 1017c54:	4580      	cmp	r8, r0
		table_buffer[k++] = st_75_source.std_proc_monitored_flags[i];
 1017c56:	fa13 f384 	uxtah	r3, r3, r4
 1017c5a:	b2b6      	uxth	r6, r6
 1017c5c:	f104 0401 	add.w	r4, r4, #1
	for ( i = 0; i < DIM_STD_PROC_USED; i++ ) {
 1017c60:	d3ee      	bcc.n	1017c40 <EVNT_APP_vSt_73_to_array+0xa4>
 1017c62:	2400      	movs	r4, #0
 1017c64:	f8df 8044 	ldr.w	r8, [pc, #68]	; 1017cac <EVNT_APP_vSt_73_to_array+0x110>
 1017c68:	e003      	b.n	1017c72 <EVNT_APP_vSt_73_to_array+0xd6>
		table_buffer[k++] = st_75_source.mfg_proc_monitored_flags[i];
 1017c6a:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 1017c6e:	f805 3009 	strb.w	r3, [r5, r9]
 1017c72:	b2a7      	uxth	r7, r4
 1017c74:	19bb      	adds	r3, r7, r6
 1017c76:	fa1f f983 	uxth.w	r9, r3
	for ( i = 0; i < DIM_MFG_PROC_USED; i++ ) {
 1017c7a:	47c0      	blx	r8
 1017c7c:	b280      	uxth	r0, r0
		table_buffer[k++] = st_75_source.mfg_proc_monitored_flags[i];
 1017c7e:	ab08      	add	r3, sp, #32
	for ( i = 0; i < DIM_MFG_PROC_USED; i++ ) {
 1017c80:	4287      	cmp	r7, r0
		table_buffer[k++] = st_75_source.mfg_proc_monitored_flags[i];
 1017c82:	fa13 f384 	uxtah	r3, r3, r4
 1017c86:	f104 0401 	add.w	r4, r4, #1
	for ( i = 0; i < DIM_MFG_PROC_USED; i++ ) {
 1017c8a:	d3ee      	bcc.n	1017c6a <EVNT_APP_vSt_73_to_array+0xce>
}
 1017c8c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 1017c90:	b004      	add	sp, #16
 1017c92:	4770      	bx	lr
	for ( i = 0; i < st_71.nbr_std_events; i++ ) {
 1017c94:	4621      	mov	r1, r4
 1017c96:	e796      	b.n	1017bc6 <EVNT_APP_vSt_73_to_array+0x2a>
	for ( i = 0; i < st_71.nbr_mfg_events; i++ ) {
 1017c98:	460f      	mov	r7, r1
 1017c9a:	e7a4      	b.n	1017be6 <EVNT_APP_vSt_73_to_array+0x4a>
 1017c9c:	200165dc 	.word	0x200165dc
 1017ca0:	0101ab11 	.word	0x0101ab11
 1017ca4:	0101ab6d 	.word	0x0101ab6d
 1017ca8:	0101abad 	.word	0x0101abad
 1017cac:	0101abe9 	.word	0x0101abe9

01017cb0 <EVNT_APP_bSt_73_validate_data>:
bool EVNT_APP_bSt_75_validate_data(ST_73_TYPE *st_75_structure) {
 1017cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
	for ( i = 0; i < st_71.nbr_std_events; i++ ) {
 1017cb2:	4d49      	ldr	r5, [pc, #292]	; (1017dd8 <EVNT_APP_bSt_73_validate_data+0x128>)
 1017cb4:	786b      	ldrb	r3, [r5, #1]
bool EVNT_APP_bSt_75_validate_data(ST_73_TYPE *st_75_structure) {
 1017cb6:	b08b      	sub	sp, #44	; 0x2c
 1017cb8:	4604      	mov	r4, r0
	for ( i = 0; i < st_71.nbr_std_events; i++ ) {
 1017cba:	b183      	cbz	r3, 1017cde <EVNT_APP_bSt_73_validate_data+0x2e>
 1017cbc:	4947      	ldr	r1, [pc, #284]	; (1017ddc <EVNT_APP_bSt_73_validate_data+0x12c>)
 1017cbe:	2300      	movs	r3, #0
 1017cc0:	2b09      	cmp	r3, #9
 1017cc2:	bf98      	it	ls
 1017cc4:	780a      	ldrbls	r2, [r1, #0]
		st_75_structure->std_events_monitored_flags[i] &= ST_72_STD_EVENTS_SUPPORTED(i);
 1017cc6:	5ce0      	ldrb	r0, [r4, r3]
	for ( i = 0; i < st_71.nbr_std_events; i++ ) {
 1017cc8:	bf88      	it	hi
 1017cca:	2200      	movhi	r2, #0
		st_75_structure->std_events_monitored_flags[i] &= ST_72_STD_EVENTS_SUPPORTED(i);
 1017ccc:	4002      	ands	r2, r0
 1017cce:	54e2      	strb	r2, [r4, r3]
	for ( i = 0; i < st_71.nbr_std_events; i++ ) {
 1017cd0:	3301      	adds	r3, #1
 1017cd2:	786a      	ldrb	r2, [r5, #1]
 1017cd4:	b2db      	uxtb	r3, r3
 1017cd6:	429a      	cmp	r2, r3
 1017cd8:	f101 0101 	add.w	r1, r1, #1
 1017cdc:	d8f0      	bhi.n	1017cc0 <EVNT_APP_bSt_73_validate_data+0x10>
	for ( i = 0; i < st_71.nbr_mfg_events; i++ ) {
 1017cde:	78ad      	ldrb	r5, [r5, #2]
 1017ce0:	b165      	cbz	r5, 1017cfc <EVNT_APP_bSt_73_validate_data+0x4c>
 1017ce2:	4e3f      	ldr	r6, [pc, #252]	; (1017de0 <EVNT_APP_bSt_73_validate_data+0x130>)
 1017ce4:	f104 010a 	add.w	r1, r4, #10
 1017ce8:	2300      	movs	r3, #0
		st_75_structure->mfg_events_monitored_flags[i] &= ST_72_MFG_EVENTS_SUPPORTED(i);
 1017cea:	5cf0      	ldrb	r0, [r6, r3]
 1017cec:	780a      	ldrb	r2, [r1, #0]
 1017cee:	3301      	adds	r3, #1
 1017cf0:	4002      	ands	r2, r0
	for ( i = 0; i < st_71.nbr_mfg_events; i++ ) {
 1017cf2:	b2d8      	uxtb	r0, r3
 1017cf4:	4285      	cmp	r5, r0
		st_75_structure->mfg_events_monitored_flags[i] &= ST_72_MFG_EVENTS_SUPPORTED(i);
 1017cf6:	f801 2b01 	strb.w	r2, [r1], #1
	for ( i = 0; i < st_71.nbr_mfg_events; i++ ) {
 1017cfa:	d8f6      	bhi.n	1017cea <EVNT_APP_bSt_73_validate_data+0x3a>
	memset( &aux_set, 0, sizeof(aux_set) );
 1017cfc:	2228      	movs	r2, #40	; 0x28
 1017cfe:	2100      	movs	r1, #0
 1017d00:	4668      	mov	r0, sp
 1017d02:	4e38      	ldr	r6, [pc, #224]	; (1017de4 <EVNT_APP_bSt_73_validate_data+0x134>)
 1017d04:	4f38      	ldr	r7, [pc, #224]	; (1017de8 <EVNT_APP_bSt_73_validate_data+0x138>)
 1017d06:	47b0      	blx	r6
	GRAL_APP_vLoad_std_tbls_write(&aux_set[0]);
 1017d08:	4668      	mov	r0, sp
 1017d0a:	4b38      	ldr	r3, [pc, #224]	; (1017dec <EVNT_APP_bSt_73_validate_data+0x13c>)
 1017d0c:	4798      	blx	r3
	for ( i = 0; i < DIM_STD_TBLS_USED; i++ ) {
 1017d0e:	2500      	movs	r5, #0
 1017d10:	e004      	b.n	1017d1c <EVNT_APP_bSt_73_validate_data+0x6c>
		st_75_structure->std_tbls_monitored_flags[i] &= aux_set[i];
 1017d12:	7bd3      	ldrb	r3, [r2, #15]
 1017d14:	f811 1c28 	ldrb.w	r1, [r1, #-40]
 1017d18:	400b      	ands	r3, r1
 1017d1a:	73d3      	strb	r3, [r2, #15]
	for ( i = 0; i < DIM_STD_TBLS_USED; i++ ) {
 1017d1c:	47b8      	blx	r7
 1017d1e:	b2eb      	uxtb	r3, r5
		st_75_structure->std_tbls_monitored_flags[i] &= aux_set[i];
 1017d20:	a90a      	add	r1, sp, #40	; 0x28
	for ( i = 0; i < DIM_STD_TBLS_USED; i++ ) {
 1017d22:	4283      	cmp	r3, r0
		st_75_structure->std_tbls_monitored_flags[i] &= aux_set[i];
 1017d24:	eb04 0203 	add.w	r2, r4, r3
 1017d28:	4419      	add	r1, r3
 1017d2a:	f105 0501 	add.w	r5, r5, #1
	for ( i = 0; i < DIM_STD_TBLS_USED; i++ ) {
 1017d2e:	d3f0      	bcc.n	1017d12 <EVNT_APP_bSt_73_validate_data+0x62>
	memset( &aux_set, 0, sizeof(aux_set) );
 1017d30:	2228      	movs	r2, #40	; 0x28
 1017d32:	2100      	movs	r1, #0
 1017d34:	4668      	mov	r0, sp
 1017d36:	47b0      	blx	r6
	GRAL_APP_vLoad_mfg_tbls_write(&aux_set[0]);
 1017d38:	4668      	mov	r0, sp
 1017d3a:	4b2d      	ldr	r3, [pc, #180]	; (1017df0 <EVNT_APP_bSt_73_validate_data+0x140>)
 1017d3c:	4f2d      	ldr	r7, [pc, #180]	; (1017df4 <EVNT_APP_bSt_73_validate_data+0x144>)
 1017d3e:	4798      	blx	r3
	for ( i = 0; i < DIM_MFG_TBLS_USED; i++ ) {
 1017d40:	2500      	movs	r5, #0
 1017d42:	e006      	b.n	1017d52 <EVNT_APP_bSt_73_validate_data+0xa2>
		st_75_structure->mfg_tbls_monitored_flags[i] &= aux_set[i];
 1017d44:	f892 3037 	ldrb.w	r3, [r2, #55]	; 0x37
 1017d48:	f811 1c28 	ldrb.w	r1, [r1, #-40]
 1017d4c:	400b      	ands	r3, r1
 1017d4e:	f882 3037 	strb.w	r3, [r2, #55]	; 0x37
	for ( i = 0; i < DIM_MFG_TBLS_USED; i++ ) {
 1017d52:	47b8      	blx	r7
 1017d54:	b2eb      	uxtb	r3, r5
		st_75_structure->mfg_tbls_monitored_flags[i] &= aux_set[i];
 1017d56:	a90a      	add	r1, sp, #40	; 0x28
	for ( i = 0; i < DIM_MFG_TBLS_USED; i++ ) {
 1017d58:	4283      	cmp	r3, r0
		st_75_structure->mfg_tbls_monitored_flags[i] &= aux_set[i];
 1017d5a:	eb04 0203 	add.w	r2, r4, r3
 1017d5e:	4419      	add	r1, r3
 1017d60:	f105 0501 	add.w	r5, r5, #1
	for ( i = 0; i < DIM_MFG_TBLS_USED; i++ ) {
 1017d64:	d3ee      	bcc.n	1017d44 <EVNT_APP_bSt_73_validate_data+0x94>
	memset( &aux_set, 0, sizeof(aux_set) );
 1017d66:	2228      	movs	r2, #40	; 0x28
 1017d68:	2100      	movs	r1, #0
 1017d6a:	4668      	mov	r0, sp
 1017d6c:	47b0      	blx	r6
	GRAL_APP_vLoad_std_proc_used(&aux_set[0]);
 1017d6e:	4668      	mov	r0, sp
 1017d70:	4b21      	ldr	r3, [pc, #132]	; (1017df8 <EVNT_APP_bSt_73_validate_data+0x148>)
 1017d72:	4f22      	ldr	r7, [pc, #136]	; (1017dfc <EVNT_APP_bSt_73_validate_data+0x14c>)
 1017d74:	4798      	blx	r3
	for ( i = 0; i < DIM_STD_PROC_USED; i++ ) {
 1017d76:	2500      	movs	r5, #0
 1017d78:	e006      	b.n	1017d88 <EVNT_APP_bSt_73_validate_data+0xd8>
		st_75_structure->std_proc_monitored_flags[i] &= aux_set[i];
 1017d7a:	f892 305f 	ldrb.w	r3, [r2, #95]	; 0x5f
 1017d7e:	f811 1c28 	ldrb.w	r1, [r1, #-40]
 1017d82:	400b      	ands	r3, r1
 1017d84:	f882 305f 	strb.w	r3, [r2, #95]	; 0x5f
	for ( i = 0; i < DIM_STD_PROC_USED; i++ ) {
 1017d88:	47b8      	blx	r7
 1017d8a:	b2eb      	uxtb	r3, r5
		st_75_structure->std_proc_monitored_flags[i] &= aux_set[i];
 1017d8c:	a90a      	add	r1, sp, #40	; 0x28
	for ( i = 0; i < DIM_STD_PROC_USED; i++ ) {
 1017d8e:	4283      	cmp	r3, r0
		st_75_structure->std_proc_monitored_flags[i] &= aux_set[i];
 1017d90:	eb04 0203 	add.w	r2, r4, r3
 1017d94:	4419      	add	r1, r3
 1017d96:	f105 0501 	add.w	r5, r5, #1
	for ( i = 0; i < DIM_STD_PROC_USED; i++ ) {
 1017d9a:	d3ee      	bcc.n	1017d7a <EVNT_APP_bSt_73_validate_data+0xca>
	memset( &aux_set, 0, sizeof(aux_set) );
 1017d9c:	2228      	movs	r2, #40	; 0x28
 1017d9e:	2100      	movs	r1, #0
 1017da0:	4668      	mov	r0, sp
 1017da2:	47b0      	blx	r6
	GRAL_APP_vLoad_mfg_proc_used(&aux_set[0]);
 1017da4:	4668      	mov	r0, sp
 1017da6:	4b16      	ldr	r3, [pc, #88]	; (1017e00 <EVNT_APP_bSt_73_validate_data+0x150>)
 1017da8:	4e16      	ldr	r6, [pc, #88]	; (1017e04 <EVNT_APP_bSt_73_validate_data+0x154>)
 1017daa:	4798      	blx	r3
	for ( i = 0; i < DIM_MFG_PROC_USED; i++ ) {
 1017dac:	2500      	movs	r5, #0
 1017dae:	e006      	b.n	1017dbe <EVNT_APP_bSt_73_validate_data+0x10e>
		st_75_structure->mfg_proc_monitored_flags[i] &= aux_set[i];
 1017db0:	f892 3087 	ldrb.w	r3, [r2, #135]	; 0x87
 1017db4:	f811 1c28 	ldrb.w	r1, [r1, #-40]
 1017db8:	400b      	ands	r3, r1
 1017dba:	f882 3087 	strb.w	r3, [r2, #135]	; 0x87
	for ( i = 0; i < DIM_MFG_PROC_USED; i++ ) {
 1017dbe:	47b0      	blx	r6
 1017dc0:	b2eb      	uxtb	r3, r5
		st_75_structure->mfg_proc_monitored_flags[i] &= aux_set[i];
 1017dc2:	a90a      	add	r1, sp, #40	; 0x28
	for ( i = 0; i < DIM_MFG_PROC_USED; i++ ) {
 1017dc4:	4283      	cmp	r3, r0
		st_75_structure->mfg_proc_monitored_flags[i] &= aux_set[i];
 1017dc6:	eb04 0203 	add.w	r2, r4, r3
 1017dca:	4419      	add	r1, r3
 1017dcc:	f105 0501 	add.w	r5, r5, #1
	for ( i = 0; i < DIM_MFG_PROC_USED; i++ ) {
 1017dd0:	d3ee      	bcc.n	1017db0 <EVNT_APP_bSt_73_validate_data+0x100>
}
 1017dd2:	2001      	movs	r0, #1
 1017dd4:	b00b      	add	sp, #44	; 0x2c
 1017dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1017dd8:	200165dc 	.word	0x200165dc
 1017ddc:	01031570 	.word	0x01031570
 1017de0:	01031588 	.word	0x01031588
 1017de4:	01030b71 	.word	0x01030b71
 1017de8:	0101ab11 	.word	0x0101ab11
 1017dec:	0101a49d 	.word	0x0101a49d
 1017df0:	0101a4d5 	.word	0x0101a4d5
 1017df4:	0101ab6d 	.word	0x0101ab6d
 1017df8:	0101a43d 	.word	0x0101a43d
 1017dfc:	0101abad 	.word	0x0101abad
 1017e00:	0101a451 	.word	0x0101a451
 1017e04:	0101abe9 	.word	0x0101abe9

01017e08 <EVNT_APP_vRegister_event.part.1>:
void EVNT_APP_vRegister_event(uint8_t code, uint16_t argument, bool is_std, uint16_t user_id, uint32_t timestamp) {
 1017e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 1017e0c:	b084      	sub	sp, #16
 1017e0e:	4688      	mov	r8, r1
 1017e10:	4615      	mov	r5, r2
 1017e12:	990c      	ldr	r1, [sp, #48]	; 0x30
		EVENT_ALARM_TYPE xEvent = {
 1017e14:	9102      	str	r1, [sp, #8]
 1017e16:	2200      	movs	r2, #0
 1017e18:	9201      	str	r2, [sp, #4]
 1017e1a:	9200      	str	r2, [sp, #0]
 1017e1c:	466e      	mov	r6, sp
void EVNT_APP_vRegister_event(uint8_t code, uint16_t argument, bool is_std, uint16_t user_id, uint32_t timestamp) {
 1017e1e:	4604      	mov	r4, r0
		EVENT_ALARM_TYPE xEvent = {
 1017e20:	9203      	str	r2, [sp, #12]
 1017e22:	f88d 0000 	strb.w	r0, [sp]
 1017e26:	f8ad 8002 	strh.w	r8, [sp, #2]
 1017e2a:	f88d 5004 	strb.w	r5, [sp, #4]
 1017e2e:	f8ad 3006 	strh.w	r3, [sp, #6]
		if ( is_std ) {
 1017e32:	b1ed      	cbz	r5, 1017e70 <EVNT_APP_vRegister_event.part.1+0x68>
	octet_nbr = (code / 8);
 1017e34:	ea4f 09d0 	mov.w	r9, r0, lsr #3
	if ( (st_73.std_events_monitored_flags[octet_nbr] & elements_mask) == elements_mask ) {
 1017e38:	4bb4      	ldr	r3, [pc, #720]	; (101810c <EVNT_APP_vRegister_event.part.1+0x304>)
	elements_mask = 1 << (code - 8*octet_nbr);
 1017e3a:	eba0 07c9 	sub.w	r7, r0, r9, lsl #3
 1017e3e:	2101      	movs	r1, #1
 1017e40:	fa01 f707 	lsl.w	r7, r1, r7
	if ( (st_73.std_events_monitored_flags[octet_nbr] & elements_mask) == elements_mask ) {
 1017e44:	f813 0009 	ldrb.w	r0, [r3, r9]
	elements_mask = 1 << (code - 8*octet_nbr);
 1017e48:	b2ff      	uxtb	r7, r7
	if ( (st_73.std_events_monitored_flags[octet_nbr] & elements_mask) == elements_mask ) {
 1017e4a:	ea37 0000 	bics.w	r0, r7, r0
 1017e4e:	d032      	beq.n	1017eb6 <EVNT_APP_vRegister_event.part.1+0xae>
	bool registered = false;
 1017e50:	4615      	mov	r5, r2
	if ( (st_75.std_events_monitored_flags[octet_nbr] & elements_mask ) == elements_mask ) {
 1017e52:	4baf      	ldr	r3, [pc, #700]	; (1018110 <EVNT_APP_vRegister_event.part.1+0x308>)
 1017e54:	f813 2009 	ldrb.w	r2, [r3, r9]
 1017e58:	ea37 0202 	bics.w	r2, r7, r2
 1017e5c:	d054      	beq.n	1017f08 <EVNT_APP_vRegister_event.part.1+0x100>
	if ( (mt_73.std_alarms_monitored_flags[octet_nbr] & elements_mask) == elements_mask ) {
 1017e5e:	4bad      	ldr	r3, [pc, #692]	; (1018114 <EVNT_APP_vRegister_event.part.1+0x30c>)
 1017e60:	f813 3009 	ldrb.w	r3, [r3, r9]
 1017e64:	ea37 0303 	bics.w	r3, r7, r3
 1017e68:	d061      	beq.n	1017f2e <EVNT_APP_vRegister_event.part.1+0x126>
}
 1017e6a:	b004      	add	sp, #16
 1017e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if ( (st_73.mfg_events_monitored_flags[octet_nbr] & elements_mask) == elements_mask ) {
 1017e70:	4ba6      	ldr	r3, [pc, #664]	; (101810c <EVNT_APP_vRegister_event.part.1+0x304>)
	octet_nbr = (code / 8);
 1017e72:	08c7      	lsrs	r7, r0, #3
	if ( (st_73.mfg_events_monitored_flags[octet_nbr] & elements_mask) == elements_mask ) {
 1017e74:	443b      	add	r3, r7
	elements_mask = 1 << (code - 8*octet_nbr);
 1017e76:	eba0 04c7 	sub.w	r4, r0, r7, lsl #3
 1017e7a:	2201      	movs	r2, #1
 1017e7c:	fa02 f404 	lsl.w	r4, r2, r4
	if ( (st_73.mfg_events_monitored_flags[octet_nbr] & elements_mask) == elements_mask ) {
 1017e80:	7a9b      	ldrb	r3, [r3, #10]
	elements_mask = 1 << (code - 8*octet_nbr);
 1017e82:	b2e4      	uxtb	r4, r4
	if ( (st_73.mfg_events_monitored_flags[octet_nbr] & elements_mask) == elements_mask ) {
 1017e84:	ea34 0303 	bics.w	r3, r4, r3
 1017e88:	d05d      	beq.n	1017f46 <EVNT_APP_vRegister_event.part.1+0x13e>
	if ( (st_75.mfg_events_monitored_flags[octet_nbr] & elements_mask ) == elements_mask ) {
 1017e8a:	4ba1      	ldr	r3, [pc, #644]	; (1018110 <EVNT_APP_vRegister_event.part.1+0x308>)
 1017e8c:	443b      	add	r3, r7
 1017e8e:	7a9b      	ldrb	r3, [r3, #10]
 1017e90:	ea34 0303 	bics.w	r3, r4, r3
 1017e94:	d06a      	beq.n	1017f6c <EVNT_APP_vRegister_event.part.1+0x164>
	if ( (mt_73.mfg_alarms_monitored_flags[octet_nbr] & elements_mask) == elements_mask ) {
 1017e96:	4b9f      	ldr	r3, [pc, #636]	; (1018114 <EVNT_APP_vRegister_event.part.1+0x30c>)
 1017e98:	443b      	add	r3, r7
 1017e9a:	7a9b      	ldrb	r3, [r3, #10]
 1017e9c:	ea34 0303 	bics.w	r3, r4, r3
 1017ea0:	d1e3      	bne.n	1017e6a <EVNT_APP_vRegister_event.part.1+0x62>
	st_3.ed_mfg_status[MAX_NBR_STD_EVENTS + octet_nbr] |= elements_mask;
 1017ea2:	4b9d      	ldr	r3, [pc, #628]	; (1018118 <EVNT_APP_vRegister_event.part.1+0x310>)
	NIC_APP_vAssert_attention_request();
 1017ea4:	4a9d      	ldr	r2, [pc, #628]	; (101811c <EVNT_APP_vRegister_event.part.1+0x314>)
	st_3.ed_mfg_status[MAX_NBR_STD_EVENTS + octet_nbr] |= elements_mask;
 1017ea6:	443b      	add	r3, r7
 1017ea8:	7959      	ldrb	r1, [r3, #5]
 1017eaa:	430c      	orrs	r4, r1
 1017eac:	715c      	strb	r4, [r3, #5]
}
 1017eae:	b004      	add	sp, #16
 1017eb0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	NIC_APP_vAssert_attention_request();
 1017eb4:	4710      	bx	r2
				switch (code) {
 1017eb6:	2c09      	cmp	r4, #9
 1017eb8:	d06e      	beq.n	1017f98 <EVNT_APP_vRegister_event.part.1+0x190>
 1017eba:	2c0a      	cmp	r4, #10
 1017ebc:	f040 80a6 	bne.w	101800c <EVNT_APP_vRegister_event.part.1+0x204>
	if ( (table_ida_bfld & STD_VS_MFG_FLAG_bm) == 0 ) {
 1017ec0:	f418 6400 	ands.w	r4, r8, #2048	; 0x800
		octet_nbr = ( (table_ida_bfld & TBL_PROC_NBR_bm) / 8 );
 1017ec4:	f3c8 080a 	ubfx	r8, r8, #0, #11
		if ( (st_73.std_tbls_monitored_flags[octet_nbr] & elements_mask) == elements_mask ) {
 1017ec8:	eb03 03d8 	add.w	r3, r3, r8, lsr #3
	if ( (table_ida_bfld & STD_VS_MFG_FLAG_bm) == 0 ) {
 1017ecc:	f040 80d2 	bne.w	1018074 <EVNT_APP_vRegister_event.part.1+0x26c>
		elements_mask = 1 << ( (table_ida_bfld & TBL_PROC_NBR_bm) - 8*octet_nbr);
 1017ed0:	f008 0207 	and.w	r2, r8, #7
		if ( (st_73.std_tbls_monitored_flags[octet_nbr] & elements_mask) == elements_mask ) {
 1017ed4:	7bdb      	ldrb	r3, [r3, #15]
		elements_mask = 1 << ( (table_ida_bfld & TBL_PROC_NBR_bm) - 8*octet_nbr);
 1017ed6:	4091      	lsls	r1, r2
 1017ed8:	b2c9      	uxtb	r1, r1
		if ( (st_73.std_tbls_monitored_flags[octet_nbr] & elements_mask) == elements_mask ) {
 1017eda:	ea31 0303 	bics.w	r3, r1, r3
 1017ede:	f000 80e8 	beq.w	10180b2 <EVNT_APP_vRegister_event.part.1+0x2aa>
	if ( (st_75.std_events_monitored_flags[octet_nbr] & elements_mask ) == elements_mask ) {
 1017ee2:	4b8b      	ldr	r3, [pc, #556]	; (1018110 <EVNT_APP_vRegister_event.part.1+0x308>)
 1017ee4:	f813 2009 	ldrb.w	r2, [r3, r9]
 1017ee8:	ea37 0202 	bics.w	r2, r7, r2
 1017eec:	d1b7      	bne.n	1017e5e <EVNT_APP_vRegister_event.part.1+0x56>
	bool registered = false;
 1017eee:	4625      	mov	r5, r4
		if ( (st_75.std_tbls_monitored_flags[octet_nbr] & elements_mask) == elements_mask ) {
 1017ef0:	eb03 02d8 	add.w	r2, r3, r8, lsr #3
		elements_mask = 1 << ( (table_ida_bfld & TBL_PROC_NBR_bm) - 8*octet_nbr);
 1017ef4:	f008 0807 	and.w	r8, r8, #7
 1017ef8:	2301      	movs	r3, #1
		if ( (st_75.std_tbls_monitored_flags[octet_nbr] & elements_mask) == elements_mask ) {
 1017efa:	7bd2      	ldrb	r2, [r2, #15]
		elements_mask = 1 << ( (table_ida_bfld & TBL_PROC_NBR_bm) - 8*octet_nbr);
 1017efc:	fa03 f308 	lsl.w	r3, r3, r8
 1017f00:	b2db      	uxtb	r3, r3
		if ( (st_75.std_tbls_monitored_flags[octet_nbr] & elements_mask) == elements_mask ) {
 1017f02:	4393      	bics	r3, r2
 1017f04:	d1ab      	bne.n	1017e5e <EVNT_APP_vRegister_event.part.1+0x56>
 1017f06:	e06d      	b.n	1017fe4 <EVNT_APP_vRegister_event.part.1+0x1dc>
				switch (code) {
 1017f08:	2c09      	cmp	r4, #9
 1017f0a:	d079      	beq.n	1018000 <EVNT_APP_vRegister_event.part.1+0x1f8>
 1017f0c:	2c0a      	cmp	r4, #10
 1017f0e:	f000 808a 	beq.w	1018026 <EVNT_APP_vRegister_event.part.1+0x21e>
						event_number += registered ? 0 : 1;
 1017f12:	4b83      	ldr	r3, [pc, #524]	; (1018120 <EVNT_APP_vRegister_event.part.1+0x318>)
						EVNT_APP_vRegister_event_in_st_76(xEvent);
 1017f14:	4c83      	ldr	r4, [pc, #524]	; (1018124 <EVNT_APP_vRegister_event.part.1+0x31c>)
						event_number += registered ? 0 : 1;
 1017f16:	881a      	ldrh	r2, [r3, #0]
 1017f18:	f085 0501 	eor.w	r5, r5, #1
 1017f1c:	4415      	add	r5, r2
 1017f1e:	b2ad      	uxth	r5, r5
						xEvent.event_number = event_number;
 1017f20:	f8ad 500c 	strh.w	r5, [sp, #12]
						event_number += registered ? 0 : 1;
 1017f24:	801d      	strh	r5, [r3, #0]
						EVNT_APP_vRegister_event_in_st_76(xEvent);
 1017f26:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 1017f2a:	47a0      	blx	r4
 1017f2c:	e797      	b.n	1017e5e <EVNT_APP_vRegister_event.part.1+0x56>
	st_3.ed_mfg_status[octet_nbr] |= elements_mask;
 1017f2e:	4b7e      	ldr	r3, [pc, #504]	; (1018128 <EVNT_APP_vRegister_event.part.1+0x320>)
	NIC_APP_vAssert_attention_request();
 1017f30:	4a7a      	ldr	r2, [pc, #488]	; (101811c <EVNT_APP_vRegister_event.part.1+0x314>)
	st_3.ed_mfg_status[octet_nbr] |= elements_mask;
 1017f32:	4499      	add	r9, r3
 1017f34:	f899 3005 	ldrb.w	r3, [r9, #5]
 1017f38:	431f      	orrs	r7, r3
 1017f3a:	f889 7005 	strb.w	r7, [r9, #5]
}
 1017f3e:	b004      	add	sp, #16
 1017f40:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	NIC_APP_vAssert_attention_request();
 1017f44:	4710      	bx	r2
				event_number += registered ? 0 : 1;
 1017f46:	4976      	ldr	r1, [pc, #472]	; (1018120 <EVNT_APP_vRegister_event.part.1+0x318>)
				EVNT_APP_vRegister_event_in_st_74(xEvent);
 1017f48:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 101812c <EVNT_APP_vRegister_event.part.1+0x324>
				event_number += registered ? 0 : 1;
 1017f4c:	880b      	ldrh	r3, [r1, #0]
 1017f4e:	3301      	adds	r3, #1
 1017f50:	b29b      	uxth	r3, r3
				xEvent.event_number = event_number;
 1017f52:	f8ad 300c 	strh.w	r3, [sp, #12]
				event_number += registered ? 0 : 1;
 1017f56:	800b      	strh	r3, [r1, #0]
				registered = true;
 1017f58:	4615      	mov	r5, r2
				EVNT_APP_vRegister_event_in_st_74(xEvent);
 1017f5a:	e89d 000f 	ldmia.w	sp, {r0, r1, r2, r3}
 1017f5e:	47c0      	blx	r8
	if ( (st_75.mfg_events_monitored_flags[octet_nbr] & elements_mask ) == elements_mask ) {
 1017f60:	4b6b      	ldr	r3, [pc, #428]	; (1018110 <EVNT_APP_vRegister_event.part.1+0x308>)
 1017f62:	443b      	add	r3, r7
 1017f64:	7a9b      	ldrb	r3, [r3, #10]
 1017f66:	ea34 0303 	bics.w	r3, r4, r3
 1017f6a:	d194      	bne.n	1017e96 <EVNT_APP_vRegister_event.part.1+0x8e>
				event_number += registered ? 0 : 1;
 1017f6c:	4b6c      	ldr	r3, [pc, #432]	; (1018120 <EVNT_APP_vRegister_event.part.1+0x318>)
				EVNT_APP_vRegister_event_in_st_76(xEvent);
 1017f6e:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 1018124 <EVNT_APP_vRegister_event.part.1+0x31c>
				event_number += registered ? 0 : 1;
 1017f72:	881a      	ldrh	r2, [r3, #0]
 1017f74:	f085 0501 	eor.w	r5, r5, #1
 1017f78:	4415      	add	r5, r2
 1017f7a:	b2ad      	uxth	r5, r5
				xEvent.event_number = event_number;
 1017f7c:	f8ad 500c 	strh.w	r5, [sp, #12]
				event_number += registered ? 0 : 1;
 1017f80:	801d      	strh	r5, [r3, #0]
				EVNT_APP_vRegister_event_in_st_76(xEvent);
 1017f82:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 1017f86:	47c0      	blx	r8
	if ( (mt_73.mfg_alarms_monitored_flags[octet_nbr] & elements_mask) == elements_mask ) {
 1017f88:	4b62      	ldr	r3, [pc, #392]	; (1018114 <EVNT_APP_vRegister_event.part.1+0x30c>)
 1017f8a:	443b      	add	r3, r7
 1017f8c:	7a9b      	ldrb	r3, [r3, #10]
 1017f8e:	ea34 0303 	bics.w	r3, r4, r3
 1017f92:	f47f af6a 	bne.w	1017e6a <EVNT_APP_vRegister_event.part.1+0x62>
 1017f96:	e784      	b.n	1017ea2 <EVNT_APP_vRegister_event.part.1+0x9a>
	if ( (table_idc_bfld & STD_VS_MFG_FLAG_bm) == 0 ) {
 1017f98:	f418 6400 	ands.w	r4, r8, #2048	; 0x800
		octet_nbr = ( (table_idc_bfld & TBL_PROC_NBR_bm) / 8 );
 1017f9c:	f3c8 080a 	ubfx	r8, r8, #0, #11
		if ( (st_73.std_proc_monitored_flags[octet_nbr] & elements_mask) == elements_mask ) {
 1017fa0:	eb03 03d8 	add.w	r3, r3, r8, lsr #3
	if ( (table_idc_bfld & STD_VS_MFG_FLAG_bm) == 0 ) {
 1017fa4:	d047      	beq.n	1018036 <EVNT_APP_vRegister_event.part.1+0x22e>
		elements_mask = 1 << ( (table_idc_bfld & TBL_PROC_NBR_bm) - 8*octet_nbr);
 1017fa6:	f008 0007 	and.w	r0, r8, #7
		if ( (st_73.mfg_proc_monitored_flags[octet_nbr] & elements_mask) == elements_mask ) {
 1017faa:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
		elements_mask = 1 << ( (table_idc_bfld & TBL_PROC_NBR_bm) - 8*octet_nbr);
 1017fae:	4081      	lsls	r1, r0
 1017fb0:	b2c9      	uxtb	r1, r1
		if ( (st_73.mfg_proc_monitored_flags[octet_nbr] & elements_mask) == elements_mask ) {
 1017fb2:	ea31 0303 	bics.w	r3, r1, r3
 1017fb6:	f000 8093 	beq.w	10180e0 <EVNT_APP_vRegister_event.part.1+0x2d8>
	if ( (st_75.std_events_monitored_flags[octet_nbr] & elements_mask ) == elements_mask ) {
 1017fba:	4b55      	ldr	r3, [pc, #340]	; (1018110 <EVNT_APP_vRegister_event.part.1+0x308>)
 1017fbc:	f813 1009 	ldrb.w	r1, [r3, r9]
 1017fc0:	ea37 0101 	bics.w	r1, r7, r1
 1017fc4:	f47f af4b 	bne.w	1017e5e <EVNT_APP_vRegister_event.part.1+0x56>
	bool registered = false;
 1017fc8:	4615      	mov	r5, r2
		if ( (st_75.mfg_proc_monitored_flags[octet_nbr] & elements_mask) == elements_mask ) {
 1017fca:	eb03 02d8 	add.w	r2, r3, r8, lsr #3
		elements_mask = 1 << ( (table_idc_bfld & TBL_PROC_NBR_bm) - 8*octet_nbr);
 1017fce:	f008 0807 	and.w	r8, r8, #7
 1017fd2:	2301      	movs	r3, #1
		if ( (st_75.mfg_proc_monitored_flags[octet_nbr] & elements_mask) == elements_mask ) {
 1017fd4:	f892 2087 	ldrb.w	r2, [r2, #135]	; 0x87
		elements_mask = 1 << ( (table_idc_bfld & TBL_PROC_NBR_bm) - 8*octet_nbr);
 1017fd8:	fa03 f308 	lsl.w	r3, r3, r8
 1017fdc:	b2db      	uxtb	r3, r3
		if ( (st_75.mfg_proc_monitored_flags[octet_nbr] & elements_mask) == elements_mask ) {
 1017fde:	4393      	bics	r3, r2
 1017fe0:	f47f af3d 	bne.w	1017e5e <EVNT_APP_vRegister_event.part.1+0x56>
							event_number += registered ? 0 : 1;
 1017fe4:	4a4e      	ldr	r2, [pc, #312]	; (1018120 <EVNT_APP_vRegister_event.part.1+0x318>)
							EVNT_APP_vRegister_event_in_st_76(xEvent);
 1017fe6:	4c4f      	ldr	r4, [pc, #316]	; (1018124 <EVNT_APP_vRegister_event.part.1+0x31c>)
							event_number += registered ? 0 : 1;
 1017fe8:	8811      	ldrh	r1, [r2, #0]
 1017fea:	f085 0301 	eor.w	r3, r5, #1
 1017fee:	440b      	add	r3, r1
 1017ff0:	b29b      	uxth	r3, r3
							xEvent.event_number = event_number;
 1017ff2:	f8ad 300c 	strh.w	r3, [sp, #12]
							event_number += registered ? 0 : 1;
 1017ff6:	8013      	strh	r3, [r2, #0]
							EVNT_APP_vRegister_event_in_st_76(xEvent);
 1017ff8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 1017ffc:	47a0      	blx	r4
 1017ffe:	e72e      	b.n	1017e5e <EVNT_APP_vRegister_event.part.1+0x56>
 1018000:	f408 6400 	and.w	r4, r8, #2048	; 0x800
 1018004:	f3c8 080a 	ubfx	r8, r8, #0, #11
	if ( (table_idc_bfld & STD_VS_MFG_FLAG_bm) == 0 ) {
 1018008:	b334      	cbz	r4, 1018058 <EVNT_APP_vRegister_event.part.1+0x250>
 101800a:	e7de      	b.n	1017fca <EVNT_APP_vRegister_event.part.1+0x1c2>
						event_number += registered ? 0 : 1;
 101800c:	4a44      	ldr	r2, [pc, #272]	; (1018120 <EVNT_APP_vRegister_event.part.1+0x318>)
						EVNT_APP_vRegister_event_in_st_74(xEvent);
 101800e:	f8df a11c 	ldr.w	sl, [pc, #284]	; 101812c <EVNT_APP_vRegister_event.part.1+0x324>
						event_number += registered ? 0 : 1;
 1018012:	8813      	ldrh	r3, [r2, #0]
 1018014:	3301      	adds	r3, #1
 1018016:	b29b      	uxth	r3, r3
						xEvent.event_number = event_number;
 1018018:	f8ad 300c 	strh.w	r3, [sp, #12]
						event_number += registered ? 0 : 1;
 101801c:	8013      	strh	r3, [r2, #0]
						EVNT_APP_vRegister_event_in_st_74(xEvent);
 101801e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 1018022:	47d0      	blx	sl
 1018024:	e715      	b.n	1017e52 <EVNT_APP_vRegister_event.part.1+0x4a>
 1018026:	f408 6400 	and.w	r4, r8, #2048	; 0x800
 101802a:	f3c8 080a 	ubfx	r8, r8, #0, #11
	if ( (table_ida_bfld & STD_VS_MFG_FLAG_bm) == 0 ) {
 101802e:	2c00      	cmp	r4, #0
 1018030:	f43f af5e 	beq.w	1017ef0 <EVNT_APP_vRegister_event.part.1+0xe8>
 1018034:	e02f      	b.n	1018096 <EVNT_APP_vRegister_event.part.1+0x28e>
		elements_mask = 1 << ( (table_idc_bfld & TBL_PROC_NBR_bm) - 8*octet_nbr);
 1018036:	f008 0207 	and.w	r2, r8, #7
		if ( (st_73.std_proc_monitored_flags[octet_nbr] & elements_mask) == elements_mask ) {
 101803a:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
		elements_mask = 1 << ( (table_idc_bfld & TBL_PROC_NBR_bm) - 8*octet_nbr);
 101803e:	4091      	lsls	r1, r2
 1018040:	b2c9      	uxtb	r1, r1
		if ( (st_73.std_proc_monitored_flags[octet_nbr] & elements_mask) == elements_mask ) {
 1018042:	ea31 0303 	bics.w	r3, r1, r3
 1018046:	d04b      	beq.n	10180e0 <EVNT_APP_vRegister_event.part.1+0x2d8>
	if ( (st_75.std_events_monitored_flags[octet_nbr] & elements_mask ) == elements_mask ) {
 1018048:	4b31      	ldr	r3, [pc, #196]	; (1018110 <EVNT_APP_vRegister_event.part.1+0x308>)
 101804a:	f813 2009 	ldrb.w	r2, [r3, r9]
 101804e:	ea37 0202 	bics.w	r2, r7, r2
 1018052:	f47f af04 	bne.w	1017e5e <EVNT_APP_vRegister_event.part.1+0x56>
	bool registered = false;
 1018056:	4625      	mov	r5, r4
		if ( (st_75.std_proc_monitored_flags[octet_nbr] & elements_mask) == elements_mask ) {
 1018058:	eb03 02d8 	add.w	r2, r3, r8, lsr #3
		elements_mask = 1 << ( (table_idc_bfld & TBL_PROC_NBR_bm) - 8*octet_nbr);
 101805c:	f008 0807 	and.w	r8, r8, #7
 1018060:	2301      	movs	r3, #1
		if ( (st_75.std_proc_monitored_flags[octet_nbr] & elements_mask) == elements_mask ) {
 1018062:	f892 205f 	ldrb.w	r2, [r2, #95]	; 0x5f
		elements_mask = 1 << ( (table_idc_bfld & TBL_PROC_NBR_bm) - 8*octet_nbr);
 1018066:	fa03 f308 	lsl.w	r3, r3, r8
 101806a:	b2db      	uxtb	r3, r3
		if ( (st_75.std_proc_monitored_flags[octet_nbr] & elements_mask) == elements_mask ) {
 101806c:	4393      	bics	r3, r2
 101806e:	f47f aef6 	bne.w	1017e5e <EVNT_APP_vRegister_event.part.1+0x56>
 1018072:	e7b7      	b.n	1017fe4 <EVNT_APP_vRegister_event.part.1+0x1dc>
		elements_mask = 1 << ( (table_ida_bfld & TBL_PROC_NBR_bm) - 8*octet_nbr);
 1018074:	f008 0007 	and.w	r0, r8, #7
		if ( (st_73.mfg_tbls_monitored_flags[octet_nbr] & elements_mask) == elements_mask ) {
 1018078:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
		elements_mask = 1 << ( (table_ida_bfld & TBL_PROC_NBR_bm) - 8*octet_nbr);
 101807c:	4081      	lsls	r1, r0
 101807e:	b2c9      	uxtb	r1, r1
		if ( (st_73.mfg_tbls_monitored_flags[octet_nbr] & elements_mask) == elements_mask ) {
 1018080:	ea31 0303 	bics.w	r3, r1, r3
 1018084:	d015      	beq.n	10180b2 <EVNT_APP_vRegister_event.part.1+0x2aa>
	if ( (st_75.std_events_monitored_flags[octet_nbr] & elements_mask ) == elements_mask ) {
 1018086:	4b22      	ldr	r3, [pc, #136]	; (1018110 <EVNT_APP_vRegister_event.part.1+0x308>)
 1018088:	f813 1009 	ldrb.w	r1, [r3, r9]
 101808c:	ea37 0101 	bics.w	r1, r7, r1
 1018090:	f47f aee5 	bne.w	1017e5e <EVNT_APP_vRegister_event.part.1+0x56>
	bool registered = false;
 1018094:	4615      	mov	r5, r2
		if ( (st_75.mfg_tbls_monitored_flags[octet_nbr] & elements_mask) == elements_mask ) {
 1018096:	eb03 02d8 	add.w	r2, r3, r8, lsr #3
		elements_mask = 1 << ( (table_ida_bfld & TBL_PROC_NBR_bm) - 8*octet_nbr);
 101809a:	f008 0807 	and.w	r8, r8, #7
 101809e:	2301      	movs	r3, #1
		if ( (st_75.mfg_tbls_monitored_flags[octet_nbr] & elements_mask) == elements_mask ) {
 10180a0:	f892 2037 	ldrb.w	r2, [r2, #55]	; 0x37
		elements_mask = 1 << ( (table_ida_bfld & TBL_PROC_NBR_bm) - 8*octet_nbr);
 10180a4:	fa03 f308 	lsl.w	r3, r3, r8
 10180a8:	b2db      	uxtb	r3, r3
		if ( (st_75.mfg_tbls_monitored_flags[octet_nbr] & elements_mask) == elements_mask ) {
 10180aa:	4393      	bics	r3, r2
 10180ac:	f47f aed7 	bne.w	1017e5e <EVNT_APP_vRegister_event.part.1+0x56>
 10180b0:	e798      	b.n	1017fe4 <EVNT_APP_vRegister_event.part.1+0x1dc>
							event_number += registered ? 0 : 1;
 10180b2:	4a1b      	ldr	r2, [pc, #108]	; (1018120 <EVNT_APP_vRegister_event.part.1+0x318>)
							EVNT_APP_vRegister_event_in_st_74(xEvent);
 10180b4:	f8df a074 	ldr.w	sl, [pc, #116]	; 101812c <EVNT_APP_vRegister_event.part.1+0x324>
							event_number += registered ? 0 : 1;
 10180b8:	8813      	ldrh	r3, [r2, #0]
 10180ba:	3301      	adds	r3, #1
 10180bc:	b29b      	uxth	r3, r3
							xEvent.event_number = event_number;
 10180be:	f8ad 300c 	strh.w	r3, [sp, #12]
							event_number += registered ? 0 : 1;
 10180c2:	8013      	strh	r3, [r2, #0]
							EVNT_APP_vRegister_event_in_st_74(xEvent);
 10180c4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 10180c8:	47d0      	blx	sl
	if ( (st_75.std_events_monitored_flags[octet_nbr] & elements_mask ) == elements_mask ) {
 10180ca:	4b11      	ldr	r3, [pc, #68]	; (1018110 <EVNT_APP_vRegister_event.part.1+0x308>)
 10180cc:	f813 2009 	ldrb.w	r2, [r3, r9]
 10180d0:	ea37 0202 	bics.w	r2, r7, r2
 10180d4:	f47f aec3 	bne.w	1017e5e <EVNT_APP_vRegister_event.part.1+0x56>
	if ( (table_ida_bfld & STD_VS_MFG_FLAG_bm) == 0 ) {
 10180d8:	2c00      	cmp	r4, #0
 10180da:	f43f af09 	beq.w	1017ef0 <EVNT_APP_vRegister_event.part.1+0xe8>
 10180de:	e7da      	b.n	1018096 <EVNT_APP_vRegister_event.part.1+0x28e>
							event_number += registered ? 0 : 1;
 10180e0:	4a0f      	ldr	r2, [pc, #60]	; (1018120 <EVNT_APP_vRegister_event.part.1+0x318>)
							EVNT_APP_vRegister_event_in_st_74(xEvent);
 10180e2:	f8df a048 	ldr.w	sl, [pc, #72]	; 101812c <EVNT_APP_vRegister_event.part.1+0x324>
							event_number += registered ? 0 : 1;
 10180e6:	8813      	ldrh	r3, [r2, #0]
 10180e8:	3301      	adds	r3, #1
 10180ea:	b29b      	uxth	r3, r3
							xEvent.event_number = event_number;
 10180ec:	f8ad 300c 	strh.w	r3, [sp, #12]
							event_number += registered ? 0 : 1;
 10180f0:	8013      	strh	r3, [r2, #0]
							EVNT_APP_vRegister_event_in_st_74(xEvent);
 10180f2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 10180f6:	47d0      	blx	sl
	if ( (st_75.std_events_monitored_flags[octet_nbr] & elements_mask ) == elements_mask ) {
 10180f8:	4b05      	ldr	r3, [pc, #20]	; (1018110 <EVNT_APP_vRegister_event.part.1+0x308>)
 10180fa:	f813 2009 	ldrb.w	r2, [r3, r9]
 10180fe:	ea37 0202 	bics.w	r2, r7, r2
 1018102:	f47f aeac 	bne.w	1017e5e <EVNT_APP_vRegister_event.part.1+0x56>
	if ( (table_idc_bfld & STD_VS_MFG_FLAG_bm) == 0 ) {
 1018106:	2c00      	cmp	r4, #0
 1018108:	d0a6      	beq.n	1018058 <EVNT_APP_vRegister_event.part.1+0x250>
 101810a:	e75e      	b.n	1017fca <EVNT_APP_vRegister_event.part.1+0x1c2>
 101810c:	2001651c 	.word	0x2001651c
 1018110:	200165ec 	.word	0x200165ec
 1018114:	200165cc 	.word	0x200165cc
 1018118:	200166ae 	.word	0x200166ae
 101811c:	01024c71 	.word	0x01024c71
 1018120:	20000a6c 	.word	0x20000a6c
 1018124:	01017835 	.word	0x01017835
 1018128:	200166a4 	.word	0x200166a4
 101812c:	0101772d 	.word	0x0101772d

01018130 <EVNT_APP_vSt_76_write_eeprom_values.constprop.3>:
void EVNT_APP_vSt_76_write_eeprom_values(ST_74_TYPE *st_76_structure) {
 1018130:	b570      	push	{r4, r5, r6, lr}
	EEPROM_writer( ST_76_EVENT_FLAGS_ADDR, &st_76_structure->event_flags, 1 );
 1018132:	4d14      	ldr	r5, [pc, #80]	; (1018184 <EVNT_APP_vSt_76_write_eeprom_values.constprop.3+0x54>)
	SM_APP_vChange_table_state(ST_76_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
 1018134:	4e14      	ldr	r6, [pc, #80]	; (1018188 <EVNT_APP_vSt_76_write_eeprom_values.constprop.3+0x58>)
	EEPROM_writer( ST_76_EVENT_FLAGS_ADDR, &st_76_structure->event_flags, 1 );
 1018136:	4c15      	ldr	r4, [pc, #84]	; (101818c <EVNT_APP_vSt_76_write_eeprom_values.constprop.3+0x5c>)
	SM_APP_vChange_table_state(ST_76_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
 1018138:	21ff      	movs	r1, #255	; 0xff
 101813a:	f647 50c8 	movw	r0, #32200	; 0x7dc8
 101813e:	47b0      	blx	r6
	EEPROM_writer( ST_76_EVENT_FLAGS_ADDR, &st_76_structure->event_flags, 1 );
 1018140:	4629      	mov	r1, r5
 1018142:	2201      	movs	r2, #1
 1018144:	f647 50c9 	movw	r0, #32201	; 0x7dc9
 1018148:	47a0      	blx	r4
	EEPROM_writer( ST_76_NBR_VALID_ENTRIES_ADDR, &st_76_structure->nbr_valid_entries, 2 );
 101814a:	1ca9      	adds	r1, r5, #2
 101814c:	2202      	movs	r2, #2
 101814e:	f647 50ca 	movw	r0, #32202	; 0x7dca
 1018152:	47a0      	blx	r4
	EEPROM_writer( ST_76_LAST_ENTRY_ELEMENT_ADDR, &st_76_structure->last_entry_element, 2 );
 1018154:	1d29      	adds	r1, r5, #4
 1018156:	2202      	movs	r2, #2
 1018158:	f647 50cc 	movw	r0, #32204	; 0x7dcc
 101815c:	47a0      	blx	r4
	EEPROM_writer( ST_76_LAST_ENTRY_SEQ_NBR_ADDR, &st_76_structure->last_entry_seq_nbr, 4 );
 101815e:	f105 0108 	add.w	r1, r5, #8
 1018162:	2204      	movs	r2, #4
 1018164:	f647 50ce 	movw	r0, #32206	; 0x7dce
 1018168:	47a0      	blx	r4
	EEPROM_writer( ST_76_NBR_UNREAD_ENTRIES_ADDR, &st_76_structure->nbr_unread_entries, 2 );
 101816a:	f105 010c 	add.w	r1, r5, #12
 101816e:	2202      	movs	r2, #2
 1018170:	f647 50d2 	movw	r0, #32210	; 0x7dd2
 1018174:	47a0      	blx	r4
	SM_APP_vChange_table_state(ST_76_PROG_STATE_ADDR, C1219_TABLE_FULL);
 1018176:	4633      	mov	r3, r6
 1018178:	2145      	movs	r1, #69	; 0x45
 101817a:	f647 50c8 	movw	r0, #32200	; 0x7dc8
}
 101817e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	SM_APP_vChange_table_state(ST_76_PROG_STATE_ADDR, C1219_TABLE_FULL);
 1018182:	4718      	bx	r3
 1018184:	20000aa0 	.word	0x20000aa0
 1018188:	010203e9 	.word	0x010203e9
 101818c:	01017509 	.word	0x01017509

01018190 <EVNT_APP_vSt_75_write_eeprom_values.constprop.4>:
void EVNT_APP_vSt_75_write_eeprom_values(ST_73_TYPE *st_75_structure) {
 1018190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	EEPROM_writer( ST_75_STD_EVENTS_MONITORED_FLAGS_ADDR, &st_75_structure->std_events_monitored_flags, st_71.nbr_std_events );
 1018194:	4d27      	ldr	r5, [pc, #156]	; (1018234 <EVNT_APP_vSt_75_write_eeprom_values.constprop.4+0xa4>)
 1018196:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 1018248 <EVNT_APP_vSt_75_write_eeprom_values.constprop.4+0xb8>
	SM_APP_vChange_table_state(ST_75_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
 101819a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 101824c <EVNT_APP_vSt_75_write_eeprom_values.constprop.4+0xbc>
	EEPROM_writer( ST_75_STD_EVENTS_MONITORED_FLAGS_ADDR, &st_75_structure->std_events_monitored_flags, st_71.nbr_std_events );
 101819e:	4c26      	ldr	r4, [pc, #152]	; (1018238 <EVNT_APP_vSt_75_write_eeprom_values.constprop.4+0xa8>)
	EEPROM_writer( ST_75_STD_TBLS_MONITORED_FLAGS_ADDR, &st_75_structure->std_tbls_monitored_flags, DIM_STD_TBLS_USED );
 10181a0:	4e26      	ldr	r6, [pc, #152]	; (101823c <EVNT_APP_vSt_75_write_eeprom_values.constprop.4+0xac>)
	EEPROM_writer( ST_75_MFG_TBLS_MONITORED_FLAGS_ADDR, &st_75_structure->mfg_tbls_monitored_flags, DIM_MFG_TBLS_USED );
 10181a2:	4f27      	ldr	r7, [pc, #156]	; (1018240 <EVNT_APP_vSt_75_write_eeprom_values.constprop.4+0xb0>)
	EEPROM_writer( ST_75_STD_PROC_MONITORED_FLAGS_ADDR, &st_75_structure->std_proc_monitored_flags, DIM_STD_PROC_USED );
 10181a4:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 1018250 <EVNT_APP_vSt_75_write_eeprom_values.constprop.4+0xc0>
void EVNT_APP_vSt_75_write_eeprom_values(ST_73_TYPE *st_75_structure) {
 10181a8:	b081      	sub	sp, #4
	SM_APP_vChange_table_state(ST_75_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
 10181aa:	21ff      	movs	r1, #255	; 0xff
 10181ac:	f640 60b2 	movw	r0, #3762	; 0xeb2
 10181b0:	47c8      	blx	r9
	EEPROM_writer( ST_75_STD_EVENTS_MONITORED_FLAGS_ADDR, &st_75_structure->std_events_monitored_flags, st_71.nbr_std_events );
 10181b2:	f89a 2001 	ldrb.w	r2, [sl, #1]
 10181b6:	4629      	mov	r1, r5
 10181b8:	f640 60b5 	movw	r0, #3765	; 0xeb5
 10181bc:	47a0      	blx	r4
	EEPROM_writer( ST_75_MFG_EVENTS_MONITORED_FLAGS_ADDR, &st_75_structure->mfg_events_monitored_flags, st_71.nbr_mfg_events );
 10181be:	f89a 2002 	ldrb.w	r2, [sl, #2]
 10181c2:	f105 010a 	add.w	r1, r5, #10
 10181c6:	f640 60bf 	movw	r0, #3775	; 0xebf
 10181ca:	47a0      	blx	r4
	EEPROM_writer( ST_75_STD_TBLS_MONITORED_FLAGS_ADDR, &st_75_structure->std_tbls_monitored_flags, DIM_STD_TBLS_USED );
 10181cc:	47b0      	blx	r6
 10181ce:	f105 010f 	add.w	r1, r5, #15
 10181d2:	4602      	mov	r2, r0
 10181d4:	f640 60c4 	movw	r0, #3780	; 0xec4
 10181d8:	47a0      	blx	r4
	EEPROM_writer( ST_75_MFG_TBLS_MONITORED_FLAGS_ADDR, &st_75_structure->mfg_tbls_monitored_flags, DIM_MFG_TBLS_USED );
 10181da:	47b0      	blx	r6
 10181dc:	4682      	mov	sl, r0
 10181de:	47b8      	blx	r7
 10181e0:	f105 0137 	add.w	r1, r5, #55	; 0x37
 10181e4:	4602      	mov	r2, r0
 10181e6:	f60a 60c4 	addw	r0, sl, #3780	; 0xec4
 10181ea:	47a0      	blx	r4
	EEPROM_writer( ST_75_STD_PROC_MONITORED_FLAGS_ADDR, &st_75_structure->std_proc_monitored_flags, DIM_STD_PROC_USED );
 10181ec:	47b0      	blx	r6
 10181ee:	4682      	mov	sl, r0
 10181f0:	47b8      	blx	r7
 10181f2:	4683      	mov	fp, r0
 10181f4:	47c0      	blx	r8
 10181f6:	f60a 6ac4 	addw	sl, sl, #3780	; 0xec4
 10181fa:	4602      	mov	r2, r0
 10181fc:	f105 015f 	add.w	r1, r5, #95	; 0x5f
 1018200:	eb0a 000b 	add.w	r0, sl, fp
 1018204:	47a0      	blx	r4
	EEPROM_writer( ST_75_MFG_PROC_MONITORED_FLAGS_ADDR, &st_75_structure->mfg_proc_monitored_flags, DIM_MFG_PROC_USED );
 1018206:	47b0      	blx	r6
 1018208:	4606      	mov	r6, r0
 101820a:	47b8      	blx	r7
 101820c:	f606 66c4 	addw	r6, r6, #3780	; 0xec4
 1018210:	4406      	add	r6, r0
 1018212:	47c0      	blx	r8
 1018214:	4b0b      	ldr	r3, [pc, #44]	; (1018244 <EVNT_APP_vSt_75_write_eeprom_values.constprop.4+0xb4>)
 1018216:	4607      	mov	r7, r0
 1018218:	4798      	blx	r3
 101821a:	f105 0187 	add.w	r1, r5, #135	; 0x87
 101821e:	4602      	mov	r2, r0
 1018220:	19b8      	adds	r0, r7, r6
 1018222:	47a0      	blx	r4
	SM_APP_vChange_table_state(ST_75_PROG_STATE_ADDR, C1219_TABLE_FULL);
 1018224:	2145      	movs	r1, #69	; 0x45
 1018226:	f640 60b2 	movw	r0, #3762	; 0xeb2
 101822a:	464b      	mov	r3, r9
}
 101822c:	b001      	add	sp, #4
 101822e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	SM_APP_vChange_table_state(ST_75_PROG_STATE_ADDR, C1219_TABLE_FULL);
 1018232:	4718      	bx	r3
 1018234:	200165ec 	.word	0x200165ec
 1018238:	01017509 	.word	0x01017509
 101823c:	0101ab11 	.word	0x0101ab11
 1018240:	0101ab6d 	.word	0x0101ab6d
 1018244:	0101abe9 	.word	0x0101abe9
 1018248:	200165dc 	.word	0x200165dc
 101824c:	010203e9 	.word	0x010203e9
 1018250:	0101abad 	.word	0x0101abad

01018254 <EVNT_APP_vSt_74_write_eeprom_values.constprop.6>:
void EVNT_APP_vSt_74_write_eeprom_values(ST_74_TYPE *st_74_structure) {
 1018254:	b570      	push	{r4, r5, r6, lr}
	EEPROM_writer( ST_74_HIST_FLAGS_ADDR, &st_74_structure->event_flags, 1 );
 1018256:	4d14      	ldr	r5, [pc, #80]	; (10182a8 <EVNT_APP_vSt_74_write_eeprom_values.constprop.6+0x54>)
	SM_APP_vChange_table_state(ST_74_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
 1018258:	4e14      	ldr	r6, [pc, #80]	; (10182ac <EVNT_APP_vSt_74_write_eeprom_values.constprop.6+0x58>)
	EEPROM_writer( ST_74_HIST_FLAGS_ADDR, &st_74_structure->event_flags, 1 );
 101825a:	4c15      	ldr	r4, [pc, #84]	; (10182b0 <EVNT_APP_vSt_74_write_eeprom_values.constprop.6+0x5c>)
	SM_APP_vChange_table_state(ST_74_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
 101825c:	21ff      	movs	r1, #255	; 0xff
 101825e:	f646 1077 	movw	r0, #26999	; 0x6977
 1018262:	47b0      	blx	r6
	EEPROM_writer( ST_74_HIST_FLAGS_ADDR, &st_74_structure->event_flags, 1 );
 1018264:	4629      	mov	r1, r5
 1018266:	2201      	movs	r2, #1
 1018268:	f646 1078 	movw	r0, #27000	; 0x6978
 101826c:	47a0      	blx	r4
	EEPROM_writer( ST_74_NBR_VALID_ENTRIES_ADDR, &st_74_structure->nbr_valid_entries, 2 );
 101826e:	1ca9      	adds	r1, r5, #2
 1018270:	2202      	movs	r2, #2
 1018272:	f646 1079 	movw	r0, #27001	; 0x6979
 1018276:	47a0      	blx	r4
	EEPROM_writer( ST_74_LAST_ENTRY_ELEMENT_ADDR, &st_74_structure->last_entry_element, 2 );
 1018278:	1d29      	adds	r1, r5, #4
 101827a:	2202      	movs	r2, #2
 101827c:	f646 107b 	movw	r0, #27003	; 0x697b
 1018280:	47a0      	blx	r4
	EEPROM_writer( ST_74_LAST_ENTRY_SEQ_NBR_ADDR, &st_74_structure->last_entry_seq_nbr, 4 );
 1018282:	f105 0108 	add.w	r1, r5, #8
 1018286:	2204      	movs	r2, #4
 1018288:	f646 107d 	movw	r0, #27005	; 0x697d
 101828c:	47a0      	blx	r4
	EEPROM_writer( ST_74_NBR_UNREAD_ENTRIES_ADDR, &st_74_structure->nbr_unread_entries, 2 );
 101828e:	f105 010c 	add.w	r1, r5, #12
 1018292:	2202      	movs	r2, #2
 1018294:	f646 1081 	movw	r0, #27009	; 0x6981
 1018298:	47a0      	blx	r4
	SM_APP_vChange_table_state(ST_74_PROG_STATE_ADDR, C1219_TABLE_FULL);
 101829a:	4633      	mov	r3, r6
 101829c:	2145      	movs	r1, #69	; 0x45
 101829e:	f646 1077 	movw	r0, #26999	; 0x6977
}
 10182a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	SM_APP_vChange_table_state(ST_74_PROG_STATE_ADDR, C1219_TABLE_FULL);
 10182a6:	4718      	bx	r3
 10182a8:	20000a70 	.word	0x20000a70
 10182ac:	010203e9 	.word	0x010203e9
 10182b0:	01017509 	.word	0x01017509

010182b4 <EVNT_APP_vMt_73_write_eeprom_values.constprop.7>:
void EVNT_APP_vMt_73_write_eeprom_values(MT_73_TYPE *mt_73_structure) {
 10182b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	EEPROM_writer( MT_73_STD_ALARMS_MONITORED_FLAGS_ADDR, &mt_73_structure->std_alarms_monitored_flags, st_71.nbr_std_events );
 10182b8:	4f0c      	ldr	r7, [pc, #48]	; (10182ec <EVNT_APP_vMt_73_write_eeprom_values.constprop.7+0x38>)
 10182ba:	4e0d      	ldr	r6, [pc, #52]	; (10182f0 <EVNT_APP_vMt_73_write_eeprom_values.constprop.7+0x3c>)
	SM_APP_vChange_table_state(MT_73_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
 10182bc:	4c0d      	ldr	r4, [pc, #52]	; (10182f4 <EVNT_APP_vMt_73_write_eeprom_values.constprop.7+0x40>)
	EEPROM_writer( MT_73_STD_ALARMS_MONITORED_FLAGS_ADDR, &mt_73_structure->std_alarms_monitored_flags, st_71.nbr_std_events );
 10182be:	4d0e      	ldr	r5, [pc, #56]	; (10182f8 <EVNT_APP_vMt_73_write_eeprom_values.constprop.7+0x44>)
	SM_APP_vChange_table_state(MT_73_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
 10182c0:	21ff      	movs	r1, #255	; 0xff
 10182c2:	f241 00e4 	movw	r0, #4324	; 0x10e4
 10182c6:	47a0      	blx	r4
	EEPROM_writer( MT_73_STD_ALARMS_MONITORED_FLAGS_ADDR, &mt_73_structure->std_alarms_monitored_flags, st_71.nbr_std_events );
 10182c8:	787a      	ldrb	r2, [r7, #1]
 10182ca:	4631      	mov	r1, r6
 10182cc:	f241 00e7 	movw	r0, #4327	; 0x10e7
 10182d0:	47a8      	blx	r5
	EEPROM_writer( MT_73_MFG_ALARMS_MONITORED_FLAGS_ADDR, &mt_73_structure->mfg_alarms_monitored_flags, st_71.nbr_mfg_events );
 10182d2:	f106 010a 	add.w	r1, r6, #10
 10182d6:	78ba      	ldrb	r2, [r7, #2]
 10182d8:	f241 00f1 	movw	r0, #4337	; 0x10f1
 10182dc:	47a8      	blx	r5
	SM_APP_vChange_table_state(MT_73_PROG_STATE_ADDR, C1219_TABLE_FULL);
 10182de:	4623      	mov	r3, r4
 10182e0:	2145      	movs	r1, #69	; 0x45
 10182e2:	f241 00e4 	movw	r0, #4324	; 0x10e4
}
 10182e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	SM_APP_vChange_table_state(MT_73_PROG_STATE_ADDR, C1219_TABLE_FULL);
 10182ea:	4718      	bx	r3
 10182ec:	200165dc 	.word	0x200165dc
 10182f0:	200165cc 	.word	0x200165cc
 10182f4:	010203e9 	.word	0x010203e9
 10182f8:	01017509 	.word	0x01017509

010182fc <EVNT_APP_vSt_73_write_eeprom_values.constprop.9>:
void EVNT_APP_vSt_73_write_eeprom_values(ST_73_TYPE *st_73_structure) {
 10182fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	EEPROM_writer( ST_73_STD_EVENTS_MONITORED_FLAGS_ADDR, &st_73_structure->std_events_monitored_flags, st_71.nbr_std_events );
 1018300:	4d27      	ldr	r5, [pc, #156]	; (10183a0 <EVNT_APP_vSt_73_write_eeprom_values.constprop.9+0xa4>)
 1018302:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 10183b4 <EVNT_APP_vSt_73_write_eeprom_values.constprop.9+0xb8>
	SM_APP_vChange_table_state(ST_73_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
 1018306:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 10183b8 <EVNT_APP_vSt_73_write_eeprom_values.constprop.9+0xbc>
	EEPROM_writer( ST_73_STD_EVENTS_MONITORED_FLAGS_ADDR, &st_73_structure->std_events_monitored_flags, st_71.nbr_std_events );
 101830a:	4c26      	ldr	r4, [pc, #152]	; (10183a4 <EVNT_APP_vSt_73_write_eeprom_values.constprop.9+0xa8>)
	EEPROM_writer( ST_73_STD_TBLS_MONITORED_FLAGS_ADDR, &st_73_structure->std_tbls_monitored_flags, DIM_STD_TBLS_USED );
 101830c:	4e26      	ldr	r6, [pc, #152]	; (10183a8 <EVNT_APP_vSt_73_write_eeprom_values.constprop.9+0xac>)
	EEPROM_writer( ST_73_MFG_TBLS_MONITORED_FLAGS_ADDR, &st_73_structure->mfg_tbls_monitored_flags, DIM_MFG_TBLS_USED );
 101830e:	4f27      	ldr	r7, [pc, #156]	; (10183ac <EVNT_APP_vSt_73_write_eeprom_values.constprop.9+0xb0>)
	EEPROM_writer( ST_73_STD_PROC_MONITORED_FLAGS_ADDR, &st_73_structure->std_proc_monitored_flags, DIM_STD_PROC_USED );
 1018310:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 10183bc <EVNT_APP_vSt_73_write_eeprom_values.constprop.9+0xc0>
void EVNT_APP_vSt_73_write_eeprom_values(ST_73_TYPE *st_73_structure) {
 1018314:	b081      	sub	sp, #4
	SM_APP_vChange_table_state(ST_73_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
 1018316:	21ff      	movs	r1, #255	; 0xff
 1018318:	f640 602e 	movw	r0, #3630	; 0xe2e
 101831c:	47c8      	blx	r9
	EEPROM_writer( ST_73_STD_EVENTS_MONITORED_FLAGS_ADDR, &st_73_structure->std_events_monitored_flags, st_71.nbr_std_events );
 101831e:	f89a 2001 	ldrb.w	r2, [sl, #1]
 1018322:	4629      	mov	r1, r5
 1018324:	f640 6031 	movw	r0, #3633	; 0xe31
 1018328:	47a0      	blx	r4
	EEPROM_writer( ST_73_MFG_EVENTS_MONITORED_FLAGS_ADDR, &st_73_structure->mfg_events_monitored_flags, st_71.nbr_mfg_events );
 101832a:	f89a 2002 	ldrb.w	r2, [sl, #2]
 101832e:	f105 010a 	add.w	r1, r5, #10
 1018332:	f640 603b 	movw	r0, #3643	; 0xe3b
 1018336:	47a0      	blx	r4
	EEPROM_writer( ST_73_STD_TBLS_MONITORED_FLAGS_ADDR, &st_73_structure->std_tbls_monitored_flags, DIM_STD_TBLS_USED );
 1018338:	47b0      	blx	r6
 101833a:	f105 010f 	add.w	r1, r5, #15
 101833e:	4602      	mov	r2, r0
 1018340:	f44f 6064 	mov.w	r0, #3648	; 0xe40
 1018344:	47a0      	blx	r4
	EEPROM_writer( ST_73_MFG_TBLS_MONITORED_FLAGS_ADDR, &st_73_structure->mfg_tbls_monitored_flags, DIM_MFG_TBLS_USED );
 1018346:	47b0      	blx	r6
 1018348:	4682      	mov	sl, r0
 101834a:	47b8      	blx	r7
 101834c:	f105 0137 	add.w	r1, r5, #55	; 0x37
 1018350:	4602      	mov	r2, r0
 1018352:	f50a 6064 	add.w	r0, sl, #3648	; 0xe40
 1018356:	47a0      	blx	r4
	EEPROM_writer( ST_73_STD_PROC_MONITORED_FLAGS_ADDR, &st_73_structure->std_proc_monitored_flags, DIM_STD_PROC_USED );
 1018358:	47b0      	blx	r6
 101835a:	4682      	mov	sl, r0
 101835c:	47b8      	blx	r7
 101835e:	4683      	mov	fp, r0
 1018360:	47c0      	blx	r8
 1018362:	f50a 6a64 	add.w	sl, sl, #3648	; 0xe40
 1018366:	4602      	mov	r2, r0
 1018368:	f105 015f 	add.w	r1, r5, #95	; 0x5f
 101836c:	eb0a 000b 	add.w	r0, sl, fp
 1018370:	47a0      	blx	r4
	EEPROM_writer( ST_73_MFG_PROC_MONITORED_FLAGS_ADDR, &st_73_structure->mfg_proc_monitored_flags, DIM_MFG_PROC_USED );
 1018372:	47b0      	blx	r6
 1018374:	4606      	mov	r6, r0
 1018376:	47b8      	blx	r7
 1018378:	f506 6664 	add.w	r6, r6, #3648	; 0xe40
 101837c:	4406      	add	r6, r0
 101837e:	47c0      	blx	r8
 1018380:	4b0b      	ldr	r3, [pc, #44]	; (10183b0 <EVNT_APP_vSt_73_write_eeprom_values.constprop.9+0xb4>)
 1018382:	4607      	mov	r7, r0
 1018384:	4798      	blx	r3
 1018386:	f105 0187 	add.w	r1, r5, #135	; 0x87
 101838a:	4602      	mov	r2, r0
 101838c:	19b8      	adds	r0, r7, r6
 101838e:	47a0      	blx	r4
	SM_APP_vChange_table_state(ST_73_PROG_STATE_ADDR, C1219_TABLE_FULL);
 1018390:	2145      	movs	r1, #69	; 0x45
 1018392:	f640 602e 	movw	r0, #3630	; 0xe2e
 1018396:	464b      	mov	r3, r9
}
 1018398:	b001      	add	sp, #4
 101839a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	SM_APP_vChange_table_state(ST_73_PROG_STATE_ADDR, C1219_TABLE_FULL);
 101839e:	4718      	bx	r3
 10183a0:	2001651c 	.word	0x2001651c
 10183a4:	01017509 	.word	0x01017509
 10183a8:	0101ab11 	.word	0x0101ab11
 10183ac:	0101ab6d 	.word	0x0101ab6d
 10183b0:	0101abe9 	.word	0x0101abe9
 10183b4:	200165dc 	.word	0x200165dc
 10183b8:	010203e9 	.word	0x010203e9
 10183bc:	0101abad 	.word	0x0101abad

010183c0 <EVNT_APP_vSt_71_write_eeprom_values.constprop.10>:
void EVNT_APP_vSt_71_write_eeprom_values(ST_70_TYPE *st_71_structure) {
 10183c0:	b570      	push	{r4, r5, r6, lr}
	EEPROM_writer( ST_71_LOG_FLAGS_ADDR, &st_71_structure->log_flags, 1 );
 10183c2:	4d19      	ldr	r5, [pc, #100]	; (1018428 <EVNT_APP_vSt_71_write_eeprom_values.constprop.10+0x68>)
	SM_APP_vChange_table_state(ST_71_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
 10183c4:	4e19      	ldr	r6, [pc, #100]	; (101842c <EVNT_APP_vSt_71_write_eeprom_values.constprop.10+0x6c>)
	EEPROM_writer( ST_71_LOG_FLAGS_ADDR, &st_71_structure->log_flags, 1 );
 10183c6:	4c1a      	ldr	r4, [pc, #104]	; (1018430 <EVNT_APP_vSt_71_write_eeprom_values.constprop.10+0x70>)
	SM_APP_vChange_table_state(ST_71_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
 10183c8:	21ff      	movs	r1, #255	; 0xff
 10183ca:	f640 601e 	movw	r0, #3614	; 0xe1e
 10183ce:	47b0      	blx	r6
	EEPROM_writer( ST_71_LOG_FLAGS_ADDR, &st_71_structure->log_flags, 1 );
 10183d0:	4629      	mov	r1, r5
 10183d2:	2201      	movs	r2, #1
 10183d4:	f640 6021 	movw	r0, #3617	; 0xe21
 10183d8:	47a0      	blx	r4
	EEPROM_writer( ST_71_NBR_STD_EVENTS_ADDR, &st_71_structure->nbr_std_events, 1 );
 10183da:	1c69      	adds	r1, r5, #1
 10183dc:	2201      	movs	r2, #1
 10183de:	f640 6022 	movw	r0, #3618	; 0xe22
 10183e2:	47a0      	blx	r4
	EEPROM_writer( ST_71_NBR_MFG_EVENTS_ADDR, &st_71_structure->nbr_mfg_events, 1 );
 10183e4:	1ca9      	adds	r1, r5, #2
 10183e6:	2201      	movs	r2, #1
 10183e8:	f640 6023 	movw	r0, #3619	; 0xe23
 10183ec:	47a0      	blx	r4
	EEPROM_writer( ST_71_HIST_DATA_LENGTH_ADDR, &st_71_structure->hist_data_length, 1 );
 10183ee:	1ce9      	adds	r1, r5, #3
 10183f0:	2201      	movs	r2, #1
 10183f2:	f640 6024 	movw	r0, #3620	; 0xe24
 10183f6:	47a0      	blx	r4
	EEPROM_writer( ST_71_EVENT_DATA_LENGTH_ADDR, &st_71_structure->event_data_length, 1 );
 10183f8:	1d29      	adds	r1, r5, #4
 10183fa:	2201      	movs	r2, #1
 10183fc:	f640 6025 	movw	r0, #3621	; 0xe25
 1018400:	47a0      	blx	r4
	EEPROM_writer( ST_71_NBR_HISTORY_ENTRIES_ADDR, &st_71_structure->nbr_history_entries, 2 );
 1018402:	1da9      	adds	r1, r5, #6
 1018404:	2202      	movs	r2, #2
 1018406:	f640 6026 	movw	r0, #3622	; 0xe26
 101840a:	47a0      	blx	r4
	EEPROM_writer( ST_71_NBR_EVENT_ENTRIES_ADDR, &st_71_structure->nbr_event_entries, 2 );
 101840c:	f105 0108 	add.w	r1, r5, #8
 1018410:	2202      	movs	r2, #2
 1018412:	f640 6028 	movw	r0, #3624	; 0xe28
 1018416:	47a0      	blx	r4
	SM_APP_vChange_table_state(ST_71_PROG_STATE_ADDR, C1219_TABLE_FULL);
 1018418:	4633      	mov	r3, r6
 101841a:	2145      	movs	r1, #69	; 0x45
 101841c:	f640 601e 	movw	r0, #3614	; 0xe1e
}
 1018420:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	SM_APP_vChange_table_state(ST_71_PROG_STATE_ADDR, C1219_TABLE_FULL);
 1018424:	4718      	bx	r3
 1018426:	bf00      	nop
 1018428:	200165dc 	.word	0x200165dc
 101842c:	010203e9 	.word	0x010203e9
 1018430:	01017509 	.word	0x01017509

01018434 <EVNT_APP_ubSt_70_execute_table_reading>:
bool EVNT_APP_ubSt_70_execute_table_reading(uint8_t *table_buffer) {
 1018434:	b470      	push	{r4, r5, r6}
	table_buffer[k++] = (uint8_t)(MAX_HIST_DATA_LENGTH);
 1018436:	2102      	movs	r1, #2
	table_buffer[k++] = (uint8_t)(MAX_LOG_FLAGS);
 1018438:	261f      	movs	r6, #31
	table_buffer[k++] = (uint8_t)(MAX_NBR_STD_EVENTS);
 101843a:	250a      	movs	r5, #10
	table_buffer[k++] = (uint8_t)(MAX_NBR_MFG_EVENTS);
 101843c:	2405      	movs	r4, #5
	table_buffer[k++] = (uint8_t)((MAX_NBR_HISTORY_ENTRIES & 0x00FF) >> 0);
 101843e:	22ff      	movs	r2, #255	; 0xff
	table_buffer[k++] = (uint8_t)((MAX_NBR_HISTORY_ENTRIES & 0xFF00) >> 8);
 1018440:	2300      	movs	r3, #0
	table_buffer[k++] = (uint8_t)(MAX_LOG_FLAGS);
 1018442:	7006      	strb	r6, [r0, #0]
	table_buffer[k++] = (uint8_t)(MAX_NBR_STD_EVENTS);
 1018444:	7045      	strb	r5, [r0, #1]
	table_buffer[k++] = (uint8_t)(MAX_NBR_MFG_EVENTS);
 1018446:	7084      	strb	r4, [r0, #2]
	table_buffer[k++] = (uint8_t)(MAX_HIST_DATA_LENGTH);
 1018448:	70c1      	strb	r1, [r0, #3]
	table_buffer[k++] = (uint8_t)(MAX_EVENT_DATA_LENGTH);
 101844a:	7101      	strb	r1, [r0, #4]
	table_buffer[k++] = (uint8_t)((MAX_NBR_HISTORY_ENTRIES & 0x00FF) >> 0);
 101844c:	7142      	strb	r2, [r0, #5]
	table_buffer[k++] = (uint8_t)((MAX_NBR_EVENT_ENTRIES & 0x00FF) >> 0);
 101844e:	71c2      	strb	r2, [r0, #7]
	table_buffer[k++] = (uint8_t)((MAX_NBR_HISTORY_ENTRIES & 0xFF00) >> 8);
 1018450:	7183      	strb	r3, [r0, #6]
	table_buffer[k++] = (uint8_t)((MAX_NBR_EVENT_ENTRIES & 0xFF00) >> 8);
 1018452:	7203      	strb	r3, [r0, #8]
}
 1018454:	bc70      	pop	{r4, r5, r6}
 1018456:	2001      	movs	r0, #1
 1018458:	4770      	bx	lr
 101845a:	bf00      	nop

0101845c <EVNT_APP_usSt_70_get_size>:
 101845c:	2009      	movs	r0, #9
 101845e:	4770      	bx	lr

01018460 <EVNT_APP_bSt_71_restore_default_values>:
bool EVNT_APP_bSt_71_restore_default_values(void) {
 1018460:	b570      	push	{r4, r5, r6, lr}
 1018462:	b084      	sub	sp, #16
	st_71_temp.hist_data_length = DEFAULT_HIST_DATA_LENGTH;
 1018464:	2202      	movs	r2, #2
	st_71_temp.nbr_history_entries = DEFAULT_NBR_HISTORY_ENTRIES;
 1018466:	2332      	movs	r3, #50	; 0x32
	is_ok = EVNT_APP_bSt_71_validate_data(&st_71_temp);
 1018468:	4668      	mov	r0, sp
	st_71_temp.log_flags = DEFAULT_LOG_FLAGS;
 101846a:	261f      	movs	r6, #31
	st_71_temp.nbr_std_events = DEFAULT_NBR_STD_EVENTS;
 101846c:	250a      	movs	r5, #10
	st_71_temp.nbr_mfg_events = DEFAULT_NBR_MFG_EVENTS;
 101846e:	2405      	movs	r4, #5
	is_ok = EVNT_APP_bSt_71_validate_data(&st_71_temp);
 1018470:	4910      	ldr	r1, [pc, #64]	; (10184b4 <EVNT_APP_bSt_71_restore_default_values+0x54>)
	st_71_temp.log_flags = DEFAULT_LOG_FLAGS;
 1018472:	f88d 6000 	strb.w	r6, [sp]
	st_71_temp.nbr_std_events = DEFAULT_NBR_STD_EVENTS;
 1018476:	f88d 5001 	strb.w	r5, [sp, #1]
	st_71_temp.nbr_mfg_events = DEFAULT_NBR_MFG_EVENTS;
 101847a:	f88d 4002 	strb.w	r4, [sp, #2]
	st_71_temp.hist_data_length = DEFAULT_HIST_DATA_LENGTH;
 101847e:	f88d 2003 	strb.w	r2, [sp, #3]
	st_71_temp.event_data_length = DEFAULT_EVENT_DATA_LENGTH;
 1018482:	f88d 2004 	strb.w	r2, [sp, #4]
	st_71_temp.nbr_history_entries = DEFAULT_NBR_HISTORY_ENTRIES;
 1018486:	f8ad 3006 	strh.w	r3, [sp, #6]
	st_71_temp.nbr_event_entries = DEFAULT_NBR_EVENT_ENTRIES;
 101848a:	f8ad 3008 	strh.w	r3, [sp, #8]
	is_ok = EVNT_APP_bSt_71_validate_data(&st_71_temp);
 101848e:	4788      	blx	r1
	st_71 = st_71_temp;
 1018490:	466b      	mov	r3, sp
	is_ok = EVNT_APP_bSt_71_validate_data(&st_71_temp);
 1018492:	4605      	mov	r5, r0
	st_71 = st_71_temp;
 1018494:	cb07      	ldmia	r3!, {r0, r1, r2}
 1018496:	4c08      	ldr	r4, [pc, #32]	; (10184b8 <EVNT_APP_bSt_71_restore_default_values+0x58>)
 1018498:	881e      	ldrh	r6, [r3, #0]
	EVNT_APP_vSt_71_write_eeprom_values(&st_71);
 101849a:	4b08      	ldr	r3, [pc, #32]	; (10184bc <EVNT_APP_bSt_71_restore_default_values+0x5c>)
	st_71 = st_71_temp;
 101849c:	6061      	str	r1, [r4, #4]
 101849e:	60a2      	str	r2, [r4, #8]
 10184a0:	6020      	str	r0, [r4, #0]
 10184a2:	81a6      	strh	r6, [r4, #12]
	EVNT_APP_vSt_71_write_eeprom_values(&st_71);
 10184a4:	4798      	blx	r3
	uint16_t crc = SM_APP_usSt_71_ram_calculate_crc();
 10184a6:	4b06      	ldr	r3, [pc, #24]	; (10184c0 <EVNT_APP_bSt_71_restore_default_values+0x60>)
 10184a8:	4798      	blx	r3
	SM_APP_vSt_71_write_crc(crc);
 10184aa:	4b06      	ldr	r3, [pc, #24]	; (10184c4 <EVNT_APP_bSt_71_restore_default_values+0x64>)
 10184ac:	4798      	blx	r3
}
 10184ae:	4628      	mov	r0, r5
 10184b0:	b004      	add	sp, #16
 10184b2:	bd70      	pop	{r4, r5, r6, pc}
 10184b4:	01017595 	.word	0x01017595
 10184b8:	200165dc 	.word	0x200165dc
 10184bc:	010183c1 	.word	0x010183c1
 10184c0:	0101ff35 	.word	0x0101ff35
 10184c4:	0101ffe5 	.word	0x0101ffe5

010184c8 <EVNT_APP_bSt_71_refresh_ram>:
bool EVNT_APP_bSt_71_refresh_ram(void) {
 10184c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 10184ca:	4f13      	ldr	r7, [pc, #76]	; (1018518 <EVNT_APP_bSt_71_refresh_ram+0x50>)
 10184cc:	4e13      	ldr	r6, [pc, #76]	; (101851c <EVNT_APP_bSt_71_refresh_ram+0x54>)
 10184ce:	b085      	sub	sp, #20
 10184d0:	2403      	movs	r4, #3
		EVNT_APP_vSt_71_read_eeprom_values(&st_71_temp);
 10184d2:	4668      	mov	r0, sp
 10184d4:	47b8      	blx	r7
		is_ok = EVNT_APP_bSt_71_validate_data(&st_71_temp);
 10184d6:	4668      	mov	r0, sp
 10184d8:	47b0      	blx	r6
 10184da:	1e63      	subs	r3, r4, #1
		if ( is_ok ) {
 10184dc:	4605      	mov	r5, r0
 10184de:	b978      	cbnz	r0, 1018500 <EVNT_APP_bSt_71_refresh_ram+0x38>
	for (uint8_t i = 0; i < 3; i++) {
 10184e0:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 10184e4:	d1f5      	bne.n	10184d2 <EVNT_APP_bSt_71_refresh_ram+0xa>
		st_71 = st_71_temp;
 10184e6:	466b      	mov	r3, sp
 10184e8:	cb07      	ldmia	r3!, {r0, r1, r2}
 10184ea:	4c0d      	ldr	r4, [pc, #52]	; (1018520 <EVNT_APP_bSt_71_refresh_ram+0x58>)
 10184ec:	881e      	ldrh	r6, [r3, #0]
		EVNT_APP_vSt_71_write_eeprom_values(&st_71);
 10184ee:	4b0d      	ldr	r3, [pc, #52]	; (1018524 <EVNT_APP_bSt_71_refresh_ram+0x5c>)
		st_71 = st_71_temp;
 10184f0:	6020      	str	r0, [r4, #0]
 10184f2:	81a6      	strh	r6, [r4, #12]
 10184f4:	6061      	str	r1, [r4, #4]
 10184f6:	60a2      	str	r2, [r4, #8]
		EVNT_APP_vSt_71_write_eeprom_values(&st_71);
 10184f8:	4798      	blx	r3
}
 10184fa:	4628      	mov	r0, r5
 10184fc:	b005      	add	sp, #20
 10184fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
			st_71 = st_71_temp;
 1018500:	466b      	mov	r3, sp
 1018502:	cb07      	ldmia	r3!, {r0, r1, r2}
 1018504:	4c06      	ldr	r4, [pc, #24]	; (1018520 <EVNT_APP_bSt_71_refresh_ram+0x58>)
 1018506:	881b      	ldrh	r3, [r3, #0]
 1018508:	6020      	str	r0, [r4, #0]
}
 101850a:	4628      	mov	r0, r5
			st_71 = st_71_temp;
 101850c:	81a3      	strh	r3, [r4, #12]
 101850e:	6061      	str	r1, [r4, #4]
 1018510:	60a2      	str	r2, [r4, #8]
}
 1018512:	b005      	add	sp, #20
 1018514:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1018516:	bf00      	nop
 1018518:	0101793d 	.word	0x0101793d
 101851c:	01017595 	.word	0x01017595
 1018520:	200165dc 	.word	0x200165dc
 1018524:	010183c1 	.word	0x010183c1

01018528 <EVNT_APP_bLoad_st_71>:
bool EVNT_APP_bLoad_st_71(void) {
 1018528:	b510      	push	{r4, lr}
	if ( SM_APP_ucGet_table_state(ST_71_PROG_STATE_ADDR) != C1219_TABLE_FULL ) {
 101852a:	f640 601e 	movw	r0, #3614	; 0xe1e
 101852e:	4b06      	ldr	r3, [pc, #24]	; (1018548 <EVNT_APP_bLoad_st_71+0x20>)
 1018530:	4798      	blx	r3
 1018532:	2845      	cmp	r0, #69	; 0x45
 1018534:	d003      	beq.n	101853e <EVNT_APP_bLoad_st_71+0x16>
		is_ok = EVNT_APP_bSt_71_restore_default_values();
 1018536:	4b05      	ldr	r3, [pc, #20]	; (101854c <EVNT_APP_bLoad_st_71+0x24>)
}
 1018538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		is_ok = EVNT_APP_bSt_71_restore_default_values();
 101853c:	4718      	bx	r3
		is_ok = EVNT_APP_bSt_71_refresh_ram();
 101853e:	4b04      	ldr	r3, [pc, #16]	; (1018550 <EVNT_APP_bLoad_st_71+0x28>)
}
 1018540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		is_ok = EVNT_APP_bSt_71_refresh_ram();
 1018544:	4718      	bx	r3
 1018546:	bf00      	nop
 1018548:	010203cd 	.word	0x010203cd
 101854c:	01018461 	.word	0x01018461
 1018550:	010184c9 	.word	0x010184c9

01018554 <EVNT_APP_vCopy_st_71_ram>:
void EVNT_APP_vCopy_st_71_ram(uint8_t* destination) {
 1018554:	b5f0      	push	{r4, r5, r6, r7, lr}
 1018556:	4b0b      	ldr	r3, [pc, #44]	; (1018584 <EVNT_APP_vCopy_st_71_ram+0x30>)
 1018558:	88d9      	ldrh	r1, [r3, #6]
 101855a:	891a      	ldrh	r2, [r3, #8]
 101855c:	78dc      	ldrb	r4, [r3, #3]
 101855e:	789d      	ldrb	r5, [r3, #2]
 1018560:	785e      	ldrb	r6, [r3, #1]
 1018562:	781f      	ldrb	r7, [r3, #0]
	table_buffer[5] = (uint8_t)((st_71_source.nbr_history_entries & 0x00FF) >> 0);
 1018564:	7141      	strb	r1, [r0, #5]
 1018566:	791b      	ldrb	r3, [r3, #4]
	table_buffer[7] = (uint8_t)((st_71_source.nbr_event_entries & 0x00FF) >> 0);
 1018568:	71c2      	strb	r2, [r0, #7]
	table_buffer[6] = (uint8_t)((st_71_source.nbr_history_entries & 0xFF00) >> 8);
 101856a:	ea4f 2e11 	mov.w	lr, r1, lsr #8
	table_buffer[8] = (uint8_t)((st_71_source.nbr_event_entries & 0xFF00) >> 8);
 101856e:	0a11      	lsrs	r1, r2, #8
	table_buffer[6] = (uint8_t)((st_71_source.nbr_history_entries & 0xFF00) >> 8);
 1018570:	f880 e006 	strb.w	lr, [r0, #6]
	table_buffer[8] = (uint8_t)((st_71_source.nbr_event_entries & 0xFF00) >> 8);
 1018574:	7201      	strb	r1, [r0, #8]
	table_buffer[0] = st_71_source.log_flags;
 1018576:	7007      	strb	r7, [r0, #0]
	table_buffer[1] = st_71_source.nbr_std_events;
 1018578:	7046      	strb	r6, [r0, #1]
	table_buffer[2] = st_71_source.nbr_mfg_events;
 101857a:	7085      	strb	r5, [r0, #2]
	table_buffer[3] = st_71_source.hist_data_length;
 101857c:	70c4      	strb	r4, [r0, #3]
	table_buffer[4] = st_71_source.event_data_length;
 101857e:	7103      	strb	r3, [r0, #4]
 1018580:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1018582:	bf00      	nop
 1018584:	200165dc 	.word	0x200165dc

01018588 <EVNT_APP_vCopy_st_71_nvm>:
void EVNT_APP_vCopy_st_71_nvm(uint8_t* destination) {
 1018588:	b5f0      	push	{r4, r5, r6, r7, lr}
 101858a:	b085      	sub	sp, #20
 101858c:	4604      	mov	r4, r0
	EVNT_APP_vSt_71_read_eeprom_values(&st_71_aux);
 101858e:	4b0f      	ldr	r3, [pc, #60]	; (10185cc <EVNT_APP_vCopy_st_71_nvm+0x44>)
 1018590:	4668      	mov	r0, sp
 1018592:	4798      	blx	r3
 1018594:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 1018598:	f8bd 3008 	ldrh.w	r3, [sp, #8]
	table_buffer[0] = st_71_source.log_flags;
 101859c:	f89d 0000 	ldrb.w	r0, [sp]
 10185a0:	f89d 1001 	ldrb.w	r1, [sp, #1]
 10185a4:	f89d 7002 	ldrb.w	r7, [sp, #2]
 10185a8:	f89d 6003 	ldrb.w	r6, [sp, #3]
 10185ac:	f89d 5004 	ldrb.w	r5, [sp, #4]
 10185b0:	7020      	strb	r0, [r4, #0]
	table_buffer[1] = st_71_source.nbr_std_events;
 10185b2:	7061      	strb	r1, [r4, #1]
	table_buffer[6] = (uint8_t)((st_71_source.nbr_history_entries & 0xFF00) >> 8);
 10185b4:	0a10      	lsrs	r0, r2, #8
	table_buffer[8] = (uint8_t)((st_71_source.nbr_event_entries & 0xFF00) >> 8);
 10185b6:	0a19      	lsrs	r1, r3, #8
	table_buffer[2] = st_71_source.nbr_mfg_events;
 10185b8:	70a7      	strb	r7, [r4, #2]
	table_buffer[3] = st_71_source.hist_data_length;
 10185ba:	70e6      	strb	r6, [r4, #3]
	table_buffer[4] = st_71_source.event_data_length;
 10185bc:	7125      	strb	r5, [r4, #4]
	table_buffer[5] = (uint8_t)((st_71_source.nbr_history_entries & 0x00FF) >> 0);
 10185be:	7162      	strb	r2, [r4, #5]
	table_buffer[6] = (uint8_t)((st_71_source.nbr_history_entries & 0xFF00) >> 8);
 10185c0:	71a0      	strb	r0, [r4, #6]
	table_buffer[7] = (uint8_t)((st_71_source.nbr_event_entries & 0x00FF) >> 0);
 10185c2:	71e3      	strb	r3, [r4, #7]
	table_buffer[8] = (uint8_t)((st_71_source.nbr_event_entries & 0xFF00) >> 8);
 10185c4:	7221      	strb	r1, [r4, #8]
}
 10185c6:	b005      	add	sp, #20
 10185c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 10185ca:	bf00      	nop
 10185cc:	0101793d 	.word	0x0101793d

010185d0 <EVNT_APP_vSt_71_recover_nvm>:
	EVNT_APP_vSt_71_write_eeprom_values(&st_71);
 10185d0:	4b00      	ldr	r3, [pc, #0]	; (10185d4 <EVNT_APP_vSt_71_recover_nvm+0x4>)
 10185d2:	4718      	bx	r3
 10185d4:	010183c1 	.word	0x010183c1

010185d8 <EVNT_APP_vSt_71_recover_ram>:
	EVNT_APP_vSt_71_read_eeprom_values(&st_71);
 10185d8:	4801      	ldr	r0, [pc, #4]	; (10185e0 <EVNT_APP_vSt_71_recover_ram+0x8>)
 10185da:	4b02      	ldr	r3, [pc, #8]	; (10185e4 <EVNT_APP_vSt_71_recover_ram+0xc>)
 10185dc:	4718      	bx	r3
 10185de:	bf00      	nop
 10185e0:	200165dc 	.word	0x200165dc
 10185e4:	0101793d 	.word	0x0101793d

010185e8 <EVNT_APP_bSt_71_execute_table_reading>:
bool EVNT_APP_bSt_71_execute_table_reading(uint8_t *table_buffer) {
 10185e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 10185ea:	4b0b      	ldr	r3, [pc, #44]	; (1018618 <EVNT_APP_bSt_71_execute_table_reading+0x30>)
 10185ec:	88d9      	ldrh	r1, [r3, #6]
 10185ee:	891a      	ldrh	r2, [r3, #8]
 10185f0:	78dc      	ldrb	r4, [r3, #3]
 10185f2:	789d      	ldrb	r5, [r3, #2]
 10185f4:	785e      	ldrb	r6, [r3, #1]
 10185f6:	781f      	ldrb	r7, [r3, #0]
	table_buffer[5] = (uint8_t)((st_71_source.nbr_history_entries & 0x00FF) >> 0);
 10185f8:	7141      	strb	r1, [r0, #5]
 10185fa:	791b      	ldrb	r3, [r3, #4]
	table_buffer[7] = (uint8_t)((st_71_source.nbr_event_entries & 0x00FF) >> 0);
 10185fc:	71c2      	strb	r2, [r0, #7]
	table_buffer[6] = (uint8_t)((st_71_source.nbr_history_entries & 0xFF00) >> 8);
 10185fe:	ea4f 2e11 	mov.w	lr, r1, lsr #8
	table_buffer[8] = (uint8_t)((st_71_source.nbr_event_entries & 0xFF00) >> 8);
 1018602:	0a11      	lsrs	r1, r2, #8
	table_buffer[6] = (uint8_t)((st_71_source.nbr_history_entries & 0xFF00) >> 8);
 1018604:	f880 e006 	strb.w	lr, [r0, #6]
	table_buffer[8] = (uint8_t)((st_71_source.nbr_event_entries & 0xFF00) >> 8);
 1018608:	7201      	strb	r1, [r0, #8]
	table_buffer[0] = st_71_source.log_flags;
 101860a:	7007      	strb	r7, [r0, #0]
	table_buffer[1] = st_71_source.nbr_std_events;
 101860c:	7046      	strb	r6, [r0, #1]
	table_buffer[2] = st_71_source.nbr_mfg_events;
 101860e:	7085      	strb	r5, [r0, #2]
	table_buffer[3] = st_71_source.hist_data_length;
 1018610:	70c4      	strb	r4, [r0, #3]
	table_buffer[4] = st_71_source.event_data_length;
 1018612:	7103      	strb	r3, [r0, #4]
}
 1018614:	2001      	movs	r0, #1
 1018616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1018618:	200165dc 	.word	0x200165dc

0101861c <EVNT_APP_bSt_71_execute_table_writing>:
bool EVNT_APP_bSt_71_execute_table_writing(uint8_t *table_buffer) {
 101861c:	b5f0      	push	{r4, r5, r6, r7, lr}
 101861e:	b085      	sub	sp, #20
	st_71_temp.nbr_std_events = table_buffer[k++];
 1018620:	7843      	ldrb	r3, [r0, #1]
	st_71_temp.event_data_length = table_buffer[k++];
 1018622:	7904      	ldrb	r4, [r0, #4]
	st_71_temp.log_flags = table_buffer[k++];
 1018624:	7807      	ldrb	r7, [r0, #0]
	st_71_temp.nbr_mfg_events = table_buffer[k++];
 1018626:	7886      	ldrb	r6, [r0, #2]
	st_71_temp.hist_data_length = table_buffer[k++];
 1018628:	78c5      	ldrb	r5, [r0, #3]
	st_71_temp.nbr_history_entries |= (uint16_t)(table_buffer[k++] << 8);
 101862a:	f8b0 1005 	ldrh.w	r1, [r0, #5]
	st_71_temp.nbr_event_entries |= (uint16_t)(table_buffer[k++] << 8);
 101862e:	f8b0 2007 	ldrh.w	r2, [r0, #7]
	st_71_temp.nbr_std_events = table_buffer[k++];
 1018632:	f88d 3001 	strb.w	r3, [sp, #1]
	is_ok = EVNT_APP_bSt_71_validate_data(&st_71_temp);
 1018636:	4668      	mov	r0, sp
 1018638:	4b10      	ldr	r3, [pc, #64]	; (101867c <EVNT_APP_bSt_71_execute_table_writing+0x60>)
	st_71_temp.event_data_length = table_buffer[k++];
 101863a:	f88d 4004 	strb.w	r4, [sp, #4]
	st_71_temp.log_flags = table_buffer[k++];
 101863e:	f88d 7000 	strb.w	r7, [sp]
	st_71_temp.nbr_mfg_events = table_buffer[k++];
 1018642:	f88d 6002 	strb.w	r6, [sp, #2]
	st_71_temp.hist_data_length = table_buffer[k++];
 1018646:	f88d 5003 	strb.w	r5, [sp, #3]
	st_71_temp.nbr_history_entries |= (uint16_t)(table_buffer[k++] << 8);
 101864a:	f8ad 1006 	strh.w	r1, [sp, #6]
	st_71_temp.nbr_event_entries |= (uint16_t)(table_buffer[k++] << 8);
 101864e:	f8ad 2008 	strh.w	r2, [sp, #8]
	is_ok = EVNT_APP_bSt_71_validate_data(&st_71_temp);
 1018652:	4798      	blx	r3
	if ( is_ok ) {
 1018654:	4604      	mov	r4, r0
 1018656:	b168      	cbz	r0, 1018674 <EVNT_APP_bSt_71_execute_table_writing+0x58>
		st_71 = st_71_temp;
 1018658:	466b      	mov	r3, sp
 101865a:	cb07      	ldmia	r3!, {r0, r1, r2}
 101865c:	4d08      	ldr	r5, [pc, #32]	; (1018680 <EVNT_APP_bSt_71_execute_table_writing+0x64>)
 101865e:	881e      	ldrh	r6, [r3, #0]
		EVNT_APP_vSt_71_write_eeprom_values(&st_71);
 1018660:	4b08      	ldr	r3, [pc, #32]	; (1018684 <EVNT_APP_bSt_71_execute_table_writing+0x68>)
		st_71 = st_71_temp;
 1018662:	6028      	str	r0, [r5, #0]
 1018664:	6069      	str	r1, [r5, #4]
 1018666:	60aa      	str	r2, [r5, #8]
 1018668:	81ae      	strh	r6, [r5, #12]
		EVNT_APP_vSt_71_write_eeprom_values(&st_71);
 101866a:	4798      	blx	r3
		uint16_t crc = SM_APP_usSt_71_ram_calculate_crc();
 101866c:	4b06      	ldr	r3, [pc, #24]	; (1018688 <EVNT_APP_bSt_71_execute_table_writing+0x6c>)
 101866e:	4798      	blx	r3
		SM_APP_vSt_71_write_crc(crc);
 1018670:	4b06      	ldr	r3, [pc, #24]	; (101868c <EVNT_APP_bSt_71_execute_table_writing+0x70>)
 1018672:	4798      	blx	r3
}
 1018674:	4620      	mov	r0, r4
 1018676:	b005      	add	sp, #20
 1018678:	bdf0      	pop	{r4, r5, r6, r7, pc}
 101867a:	bf00      	nop
 101867c:	01017595 	.word	0x01017595
 1018680:	200165dc 	.word	0x200165dc
 1018684:	010183c1 	.word	0x010183c1
 1018688:	0101ff35 	.word	0x0101ff35
 101868c:	0101ffe5 	.word	0x0101ffe5

01018690 <EVNT_APP_usSt_71_get_size>:
}
 1018690:	2009      	movs	r0, #9
 1018692:	4770      	bx	lr

01018694 <EVNT_APP_bSt_72_execute_table_reading>:
bool EVNT_APP_bSt_72_execute_table_reading(uint8_t *table_buffer) {
 1018694:	b470      	push	{r4, r5, r6}
	for ( i = 0; i < st_71.nbr_std_events; i++ )
 1018696:	4d14      	ldr	r5, [pc, #80]	; (10186e8 <EVNT_APP_bSt_72_execute_table_reading+0x54>)
 1018698:	786a      	ldrb	r2, [r5, #1]
 101869a:	b182      	cbz	r2, 10186be <EVNT_APP_bSt_72_execute_table_reading+0x2a>
 101869c:	4e13      	ldr	r6, [pc, #76]	; (10186ec <EVNT_APP_bSt_72_execute_table_reading+0x58>)
 101869e:	2300      	movs	r3, #0
 10186a0:	b299      	uxth	r1, r3
		table_buffer[k++] = ST_72_STD_EVENTS_SUPPORTED(i);
 10186a2:	460c      	mov	r4, r1
 10186a4:	2909      	cmp	r1, #9
 10186a6:	f101 0201 	add.w	r2, r1, #1
 10186aa:	bf94      	ite	ls
 10186ac:	5d99      	ldrbls	r1, [r3, r6]
 10186ae:	2100      	movhi	r1, #0
 10186b0:	5501      	strb	r1, [r0, r4]
	for ( i = 0; i < st_71.nbr_std_events; i++ )
 10186b2:	7869      	ldrb	r1, [r5, #1]
 10186b4:	b292      	uxth	r2, r2
 10186b6:	4291      	cmp	r1, r2
 10186b8:	f103 0301 	add.w	r3, r3, #1
 10186bc:	d8f0      	bhi.n	10186a0 <EVNT_APP_bSt_72_execute_table_reading+0xc>
	for ( i = 0; i < st_71.nbr_mfg_events; i++ )
 10186be:	78ab      	ldrb	r3, [r5, #2]
 10186c0:	b17b      	cbz	r3, 10186e2 <EVNT_APP_bSt_72_execute_table_reading+0x4e>
 10186c2:	4c0b      	ldr	r4, [pc, #44]	; (10186f0 <EVNT_APP_bSt_72_execute_table_reading+0x5c>)
 10186c4:	2300      	movs	r3, #0
		table_buffer[k++] = ST_72_MFG_EVENTS_SUPPORTED(i);
 10186c6:	18d1      	adds	r1, r2, r3
 10186c8:	2b09      	cmp	r3, #9
 10186ca:	b289      	uxth	r1, r1
 10186cc:	bf94      	ite	ls
 10186ce:	7826      	ldrbls	r6, [r4, #0]
 10186d0:	2600      	movhi	r6, #0
 10186d2:	5446      	strb	r6, [r0, r1]
	for ( i = 0; i < st_71.nbr_mfg_events; i++ )
 10186d4:	3301      	adds	r3, #1
 10186d6:	78a9      	ldrb	r1, [r5, #2]
 10186d8:	b29b      	uxth	r3, r3
 10186da:	4299      	cmp	r1, r3
 10186dc:	f104 0401 	add.w	r4, r4, #1
 10186e0:	d8f1      	bhi.n	10186c6 <EVNT_APP_bSt_72_execute_table_reading+0x32>
}
 10186e2:	2001      	movs	r0, #1
 10186e4:	bc70      	pop	{r4, r5, r6}
 10186e6:	4770      	bx	lr
 10186e8:	200165dc 	.word	0x200165dc
 10186ec:	01031570 	.word	0x01031570
 10186f0:	01031588 	.word	0x01031588

010186f4 <EVNT_APP_bMt_72_execute_table_reading>:
bool EVNT_APP_bMt_72_execute_table_reading(uint8_t *table_buffer) {
 10186f4:	b470      	push	{r4, r5, r6}
	for ( i = 0; i < st_71.nbr_std_events; i++ )
 10186f6:	4d14      	ldr	r5, [pc, #80]	; (1018748 <EVNT_APP_bMt_72_execute_table_reading+0x54>)
 10186f8:	786a      	ldrb	r2, [r5, #1]
 10186fa:	b182      	cbz	r2, 101871e <EVNT_APP_bMt_72_execute_table_reading+0x2a>
 10186fc:	4e13      	ldr	r6, [pc, #76]	; (101874c <EVNT_APP_bMt_72_execute_table_reading+0x58>)
 10186fe:	2300      	movs	r3, #0
 1018700:	b299      	uxth	r1, r3
		table_buffer[k++] = MT_72_STD_ALARMS_SUPPORTED(i);
 1018702:	460c      	mov	r4, r1
 1018704:	2909      	cmp	r1, #9
 1018706:	f101 0201 	add.w	r2, r1, #1
 101870a:	bf94      	ite	ls
 101870c:	5d99      	ldrbls	r1, [r3, r6]
 101870e:	2100      	movhi	r1, #0
 1018710:	5501      	strb	r1, [r0, r4]
	for ( i = 0; i < st_71.nbr_std_events; i++ )
 1018712:	7869      	ldrb	r1, [r5, #1]
 1018714:	b292      	uxth	r2, r2
 1018716:	4291      	cmp	r1, r2
 1018718:	f103 0301 	add.w	r3, r3, #1
 101871c:	d8f0      	bhi.n	1018700 <EVNT_APP_bMt_72_execute_table_reading+0xc>
	for ( i = 0; i < st_71.nbr_mfg_events; i++ )
 101871e:	78ab      	ldrb	r3, [r5, #2]
 1018720:	b17b      	cbz	r3, 1018742 <EVNT_APP_bMt_72_execute_table_reading+0x4e>
 1018722:	4c0b      	ldr	r4, [pc, #44]	; (1018750 <EVNT_APP_bMt_72_execute_table_reading+0x5c>)
 1018724:	2300      	movs	r3, #0
		table_buffer[k++] = MT_72_MFG_ALARMS_SUPPORTED(i);
 1018726:	18d1      	adds	r1, r2, r3
 1018728:	2b09      	cmp	r3, #9
 101872a:	b289      	uxth	r1, r1
 101872c:	bf94      	ite	ls
 101872e:	7826      	ldrbls	r6, [r4, #0]
 1018730:	2600      	movhi	r6, #0
 1018732:	5446      	strb	r6, [r0, r1]
	for ( i = 0; i < st_71.nbr_mfg_events; i++ )
 1018734:	3301      	adds	r3, #1
 1018736:	78a9      	ldrb	r1, [r5, #2]
 1018738:	b29b      	uxth	r3, r3
 101873a:	4299      	cmp	r1, r3
 101873c:	f104 0401 	add.w	r4, r4, #1
 1018740:	d8f1      	bhi.n	1018726 <EVNT_APP_bMt_72_execute_table_reading+0x32>
}
 1018742:	2001      	movs	r0, #1
 1018744:	bc70      	pop	{r4, r5, r6}
 1018746:	4770      	bx	lr
 1018748:	200165dc 	.word	0x200165dc
 101874c:	0103157c 	.word	0x0103157c
 1018750:	01031588 	.word	0x01031588

01018754 <EVNT_APP_bSt_73_restore_default_values>:
bool EVNT_APP_bSt_73_restore_default_values(void) {
 1018754:	b510      	push	{r4, lr}
 1018756:	b0ac      	sub	sp, #176	; 0xb0
	memset( &st_73_temp, 0, sizeof(st_73_temp) );
 1018758:	22af      	movs	r2, #175	; 0xaf
 101875a:	4668      	mov	r0, sp
 101875c:	2100      	movs	r1, #0
 101875e:	4b1f      	ldr	r3, [pc, #124]	; (10187dc <EVNT_APP_bSt_73_restore_default_values+0x88>)
 1018760:	4798      	blx	r3
	for ( i = 0; i < st_71.nbr_std_events; i++ ) {
 1018762:	481f      	ldr	r0, [pc, #124]	; (10187e0 <EVNT_APP_bSt_73_restore_default_values+0x8c>)
 1018764:	7842      	ldrb	r2, [r0, #1]
 1018766:	b14a      	cbz	r2, 101877c <EVNT_APP_bSt_73_restore_default_values+0x28>
 1018768:	3a01      	subs	r2, #1
 101876a:	b2d2      	uxtb	r2, r2
 101876c:	3201      	adds	r2, #1
 101876e:	446a      	add	r2, sp
 1018770:	466b      	mov	r3, sp
		st_73_temp.std_events_monitored_flags[i] = ST_73_DEFAULT_STD_EVENTS_MONITORED(i);
 1018772:	2100      	movs	r1, #0
 1018774:	f803 1b01 	strb.w	r1, [r3], #1
	for ( i = 0; i < st_71.nbr_std_events; i++ ) {
 1018778:	4293      	cmp	r3, r2
 101877a:	d1fb      	bne.n	1018774 <EVNT_APP_bSt_73_restore_default_values+0x20>
	for ( i = 0; i < st_71.nbr_mfg_events; i++ ) {
 101877c:	7882      	ldrb	r2, [r0, #2]
 101877e:	b152      	cbz	r2, 1018796 <EVNT_APP_bSt_73_restore_default_values+0x42>
 1018780:	3a01      	subs	r2, #1
 1018782:	b2d2      	uxtb	r2, r2
 1018784:	320b      	adds	r2, #11
 1018786:	446a      	add	r2, sp
 1018788:	f10d 030a 	add.w	r3, sp, #10
		st_73_temp.mfg_events_monitored_flags[i] = ST_73_DEFAULT_MFG_EVENTS_MONITORED(i);
 101878c:	2100      	movs	r1, #0
 101878e:	f803 1b01 	strb.w	r1, [r3], #1
	for ( i = 0; i < st_71.nbr_mfg_events; i++ ) {
 1018792:	4293      	cmp	r3, r2
 1018794:	d1fb      	bne.n	101878e <EVNT_APP_bSt_73_restore_default_values+0x3a>
	GRAL_APP_vLoad_std_tbls_write(&st_73_temp.std_tbls_monitored_flags[0]);
 1018796:	f10d 000f 	add.w	r0, sp, #15
 101879a:	4b12      	ldr	r3, [pc, #72]	; (10187e4 <EVNT_APP_bSt_73_restore_default_values+0x90>)
 101879c:	4798      	blx	r3
	GRAL_APP_vLoad_mfg_tbls_write(&st_73_temp.mfg_tbls_monitored_flags[0]);
 101879e:	f10d 0037 	add.w	r0, sp, #55	; 0x37
 10187a2:	4b11      	ldr	r3, [pc, #68]	; (10187e8 <EVNT_APP_bSt_73_restore_default_values+0x94>)
 10187a4:	4798      	blx	r3
	GRAL_APP_vLoad_std_proc_used(&st_73_temp.std_proc_monitored_flags[0]);
 10187a6:	f10d 005f 	add.w	r0, sp, #95	; 0x5f
 10187aa:	4b10      	ldr	r3, [pc, #64]	; (10187ec <EVNT_APP_bSt_73_restore_default_values+0x98>)
 10187ac:	4798      	blx	r3
	GRAL_APP_vLoad_mfg_proc_used(&st_73_temp.mfg_proc_monitored_flags[0]);
 10187ae:	f10d 0087 	add.w	r0, sp, #135	; 0x87
 10187b2:	4b0f      	ldr	r3, [pc, #60]	; (10187f0 <EVNT_APP_bSt_73_restore_default_values+0x9c>)
 10187b4:	4798      	blx	r3
	is_ok = EVNT_APP_bSt_73_validate_data(&st_73_temp);
 10187b6:	4668      	mov	r0, sp
 10187b8:	4b0e      	ldr	r3, [pc, #56]	; (10187f4 <EVNT_APP_bSt_73_restore_default_values+0xa0>)
 10187ba:	4798      	blx	r3
	st_73 = st_73_temp;
 10187bc:	4669      	mov	r1, sp
 10187be:	22af      	movs	r2, #175	; 0xaf
	is_ok = EVNT_APP_bSt_73_validate_data(&st_73_temp);
 10187c0:	4604      	mov	r4, r0
	st_73 = st_73_temp;
 10187c2:	4b0d      	ldr	r3, [pc, #52]	; (10187f8 <EVNT_APP_bSt_73_restore_default_values+0xa4>)
 10187c4:	480d      	ldr	r0, [pc, #52]	; (10187fc <EVNT_APP_bSt_73_restore_default_values+0xa8>)
 10187c6:	4798      	blx	r3
	EVNT_APP_vSt_73_write_eeprom_values(&st_73);
 10187c8:	4b0d      	ldr	r3, [pc, #52]	; (1018800 <EVNT_APP_bSt_73_restore_default_values+0xac>)
 10187ca:	4798      	blx	r3
	uint16_t crc = SM_APP_usSt_73_ram_calculate_crc();
 10187cc:	4b0d      	ldr	r3, [pc, #52]	; (1018804 <EVNT_APP_bSt_73_restore_default_values+0xb0>)
 10187ce:	4798      	blx	r3
	SM_APP_vSt_73_write_crc(crc);
 10187d0:	4b0d      	ldr	r3, [pc, #52]	; (1018808 <EVNT_APP_bSt_73_restore_default_values+0xb4>)
 10187d2:	4798      	blx	r3
}
 10187d4:	4620      	mov	r0, r4
 10187d6:	b02c      	add	sp, #176	; 0xb0
 10187d8:	bd10      	pop	{r4, pc}
 10187da:	bf00      	nop
 10187dc:	01030b71 	.word	0x01030b71
 10187e0:	200165dc 	.word	0x200165dc
 10187e4:	0101a49d 	.word	0x0101a49d
 10187e8:	0101a4d5 	.word	0x0101a4d5
 10187ec:	0101a43d 	.word	0x0101a43d
 10187f0:	0101a451 	.word	0x0101a451
 10187f4:	01017cb1 	.word	0x01017cb1
 10187f8:	01030a3d 	.word	0x01030a3d
 10187fc:	2001651c 	.word	0x2001651c
 1018800:	010182fd 	.word	0x010182fd
 1018804:	01020031 	.word	0x01020031
 1018808:	010200e1 	.word	0x010200e1

0101880c <EVNT_APP_bSt_73_refresh_ram>:
bool EVNT_APP_bSt_73_refresh_ram(void) {
 101880c:	b5f0      	push	{r4, r5, r6, r7, lr}
 101880e:	4f10      	ldr	r7, [pc, #64]	; (1018850 <EVNT_APP_bSt_73_refresh_ram+0x44>)
 1018810:	4e10      	ldr	r6, [pc, #64]	; (1018854 <EVNT_APP_bSt_73_refresh_ram+0x48>)
 1018812:	b0ad      	sub	sp, #180	; 0xb4
 1018814:	2403      	movs	r4, #3
		EVNT_APP_vSt_73_read_eeprom_values(&st_73_temp);
 1018816:	4668      	mov	r0, sp
 1018818:	47b8      	blx	r7
		is_ok = EVNT_APP_bSt_73_validate_data(&st_73_temp);
 101881a:	4668      	mov	r0, sp
 101881c:	47b0      	blx	r6
 101881e:	1e63      	subs	r3, r4, #1
		if ( is_ok ) {
 1018820:	4605      	mov	r5, r0
 1018822:	b960      	cbnz	r0, 101883e <EVNT_APP_bSt_73_refresh_ram+0x32>
	for (uint8_t i = 0; i < 3; i++) {
 1018824:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 1018828:	d1f5      	bne.n	1018816 <EVNT_APP_bSt_73_refresh_ram+0xa>
		st_73 = st_73_temp;
 101882a:	4669      	mov	r1, sp
 101882c:	22af      	movs	r2, #175	; 0xaf
 101882e:	4b0a      	ldr	r3, [pc, #40]	; (1018858 <EVNT_APP_bSt_73_refresh_ram+0x4c>)
 1018830:	480a      	ldr	r0, [pc, #40]	; (101885c <EVNT_APP_bSt_73_refresh_ram+0x50>)
 1018832:	4798      	blx	r3
		EVNT_APP_vSt_73_write_eeprom_values(&st_73);
 1018834:	4b0a      	ldr	r3, [pc, #40]	; (1018860 <EVNT_APP_bSt_73_refresh_ram+0x54>)
 1018836:	4798      	blx	r3
}
 1018838:	4628      	mov	r0, r5
 101883a:	b02d      	add	sp, #180	; 0xb4
 101883c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			st_73 = st_73_temp;
 101883e:	4669      	mov	r1, sp
 1018840:	22af      	movs	r2, #175	; 0xaf
 1018842:	4b05      	ldr	r3, [pc, #20]	; (1018858 <EVNT_APP_bSt_73_refresh_ram+0x4c>)
 1018844:	4805      	ldr	r0, [pc, #20]	; (101885c <EVNT_APP_bSt_73_refresh_ram+0x50>)
 1018846:	4798      	blx	r3
}
 1018848:	4628      	mov	r0, r5
 101884a:	b02d      	add	sp, #180	; 0xb4
 101884c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 101884e:	bf00      	nop
 1018850:	01017a55 	.word	0x01017a55
 1018854:	01017cb1 	.word	0x01017cb1
 1018858:	01030a3d 	.word	0x01030a3d
 101885c:	2001651c 	.word	0x2001651c
 1018860:	010182fd 	.word	0x010182fd

01018864 <EVNT_APP_bLoad_st_73>:
bool EVNT_APP_bLoad_st_73(void) {
 1018864:	b510      	push	{r4, lr}
	if ( SM_APP_ucGet_table_state(ST_73_PROG_STATE_ADDR) != C1219_TABLE_FULL ) {
 1018866:	f640 602e 	movw	r0, #3630	; 0xe2e
 101886a:	4b06      	ldr	r3, [pc, #24]	; (1018884 <EVNT_APP_bLoad_st_73+0x20>)
 101886c:	4798      	blx	r3
 101886e:	2845      	cmp	r0, #69	; 0x45
 1018870:	d003      	beq.n	101887a <EVNT_APP_bLoad_st_73+0x16>
		is_ok = EVNT_APP_bSt_73_restore_default_values();
 1018872:	4b05      	ldr	r3, [pc, #20]	; (1018888 <EVNT_APP_bLoad_st_73+0x24>)
}
 1018874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		is_ok = EVNT_APP_bSt_73_restore_default_values();
 1018878:	4718      	bx	r3
		is_ok = EVNT_APP_bSt_73_refresh_ram();
 101887a:	4b04      	ldr	r3, [pc, #16]	; (101888c <EVNT_APP_bLoad_st_73+0x28>)
}
 101887c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		is_ok = EVNT_APP_bSt_73_refresh_ram();
 1018880:	4718      	bx	r3
 1018882:	bf00      	nop
 1018884:	010203cd 	.word	0x010203cd
 1018888:	01018755 	.word	0x01018755
 101888c:	0101880d 	.word	0x0101880d

01018890 <EVNT_APP_vCopy_st_73_ram>:
void EVNT_APP_vCopy_st_73_ram(uint8_t* destination) {
 1018890:	b5f0      	push	{r4, r5, r6, r7, lr}
 1018892:	b0ab      	sub	sp, #172	; 0xac
	EVNT_APP_vSt_73_to_array(st_73, &destination[0]);
 1018894:	4909      	ldr	r1, [pc, #36]	; (10188bc <EVNT_APP_vCopy_st_73_ram+0x2c>)
 1018896:	9028      	str	r0, [sp, #160]	; 0xa0
 1018898:	680f      	ldr	r7, [r1, #0]
 101889a:	688d      	ldr	r5, [r1, #8]
 101889c:	68cc      	ldr	r4, [r1, #12]
 101889e:	684e      	ldr	r6, [r1, #4]
 10188a0:	4b07      	ldr	r3, [pc, #28]	; (10188c0 <EVNT_APP_vCopy_st_73_ram+0x30>)
 10188a2:	3110      	adds	r1, #16
 10188a4:	229f      	movs	r2, #159	; 0x9f
 10188a6:	4668      	mov	r0, sp
 10188a8:	4798      	blx	r3
 10188aa:	4623      	mov	r3, r4
 10188ac:	4638      	mov	r0, r7
 10188ae:	4631      	mov	r1, r6
 10188b0:	462a      	mov	r2, r5
 10188b2:	4c04      	ldr	r4, [pc, #16]	; (10188c4 <EVNT_APP_vCopy_st_73_ram+0x34>)
 10188b4:	47a0      	blx	r4
}
 10188b6:	b02b      	add	sp, #172	; 0xac
 10188b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 10188ba:	bf00      	nop
 10188bc:	2001651c 	.word	0x2001651c
 10188c0:	01030a3d 	.word	0x01030a3d
 10188c4:	01017b9d 	.word	0x01017b9d

010188c8 <EVNT_APP_vCopy_st_73_nvm>:
void EVNT_APP_vCopy_st_73_nvm(uint8_t* destination) {
 10188c8:	b530      	push	{r4, r5, lr}
 10188ca:	b0d7      	sub	sp, #348	; 0x15c
	EVNT_APP_vSt_73_read_eeprom_values(&st_73_aux);
 10188cc:	ac2a      	add	r4, sp, #168	; 0xa8
void EVNT_APP_vCopy_st_73_nvm(uint8_t* destination) {
 10188ce:	4605      	mov	r5, r0
	EVNT_APP_vSt_73_read_eeprom_values(&st_73_aux);
 10188d0:	4b07      	ldr	r3, [pc, #28]	; (10188f0 <EVNT_APP_vCopy_st_73_nvm+0x28>)
 10188d2:	4620      	mov	r0, r4
 10188d4:	4798      	blx	r3
	EVNT_APP_vSt_73_to_array(st_73_aux, &destination[0]);
 10188d6:	a92e      	add	r1, sp, #184	; 0xb8
 10188d8:	229f      	movs	r2, #159	; 0x9f
 10188da:	4668      	mov	r0, sp
 10188dc:	4b05      	ldr	r3, [pc, #20]	; (10188f4 <EVNT_APP_vCopy_st_73_nvm+0x2c>)
 10188de:	9528      	str	r5, [sp, #160]	; 0xa0
 10188e0:	4798      	blx	r3
 10188e2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 10188e6:	4c04      	ldr	r4, [pc, #16]	; (10188f8 <EVNT_APP_vCopy_st_73_nvm+0x30>)
 10188e8:	47a0      	blx	r4
}
 10188ea:	b057      	add	sp, #348	; 0x15c
 10188ec:	bd30      	pop	{r4, r5, pc}
 10188ee:	bf00      	nop
 10188f0:	01017a55 	.word	0x01017a55
 10188f4:	01030a3d 	.word	0x01030a3d
 10188f8:	01017b9d 	.word	0x01017b9d

010188fc <EVNT_APP_vSt_73_recover_nvm>:
	EVNT_APP_vSt_73_write_eeprom_values(&st_73);
 10188fc:	4b00      	ldr	r3, [pc, #0]	; (1018900 <EVNT_APP_vSt_73_recover_nvm+0x4>)
 10188fe:	4718      	bx	r3
 1018900:	010182fd 	.word	0x010182fd

01018904 <EVNT_APP_vSt_73_recover_ram>:
	EVNT_APP_vSt_73_read_eeprom_values(&st_73);
 1018904:	4801      	ldr	r0, [pc, #4]	; (101890c <EVNT_APP_vSt_73_recover_ram+0x8>)
 1018906:	4b02      	ldr	r3, [pc, #8]	; (1018910 <EVNT_APP_vSt_73_recover_ram+0xc>)
 1018908:	4718      	bx	r3
 101890a:	bf00      	nop
 101890c:	2001651c 	.word	0x2001651c
 1018910:	01017a55 	.word	0x01017a55

01018914 <EVNT_APP_bSt_73_execute_table_reading>:
bool EVNT_APP_bSt_73_execute_table_reading(uint8_t *table_buffer) {
 1018914:	b5f0      	push	{r4, r5, r6, r7, lr}
 1018916:	b0ab      	sub	sp, #172	; 0xac
	EVNT_APP_vSt_73_to_array(st_73, &table_buffer[0]);
 1018918:	4909      	ldr	r1, [pc, #36]	; (1018940 <EVNT_APP_bSt_73_execute_table_reading+0x2c>)
 101891a:	9028      	str	r0, [sp, #160]	; 0xa0
 101891c:	680f      	ldr	r7, [r1, #0]
 101891e:	688d      	ldr	r5, [r1, #8]
 1018920:	68cc      	ldr	r4, [r1, #12]
 1018922:	684e      	ldr	r6, [r1, #4]
 1018924:	4b07      	ldr	r3, [pc, #28]	; (1018944 <EVNT_APP_bSt_73_execute_table_reading+0x30>)
 1018926:	3110      	adds	r1, #16
 1018928:	229f      	movs	r2, #159	; 0x9f
 101892a:	4668      	mov	r0, sp
 101892c:	4798      	blx	r3
 101892e:	4638      	mov	r0, r7
 1018930:	4623      	mov	r3, r4
 1018932:	4631      	mov	r1, r6
 1018934:	462a      	mov	r2, r5
 1018936:	4c04      	ldr	r4, [pc, #16]	; (1018948 <EVNT_APP_bSt_73_execute_table_reading+0x34>)
 1018938:	47a0      	blx	r4
}
 101893a:	2001      	movs	r0, #1
 101893c:	b02b      	add	sp, #172	; 0xac
 101893e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1018940:	2001651c 	.word	0x2001651c
 1018944:	01030a3d 	.word	0x01030a3d
 1018948:	01017b9d 	.word	0x01017b9d

0101894c <EVNT_APP_bSt_73_execute_table_writing>:
bool EVNT_APP_bSt_73_execute_table_writing(uint8_t *table_buffer) {
 101894c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for ( i = 0; i < st_71.nbr_std_events; i++ ) {
 1018950:	4f49      	ldr	r7, [pc, #292]	; (1018a78 <EVNT_APP_bSt_73_execute_table_writing+0x12c>)
 1018952:	787b      	ldrb	r3, [r7, #1]
bool EVNT_APP_bSt_73_execute_table_writing(uint8_t *table_buffer) {
 1018954:	b0ac      	sub	sp, #176	; 0xb0
 1018956:	4605      	mov	r5, r0
 1018958:	466e      	mov	r6, sp
	for ( i = 0; i < st_71.nbr_std_events; i++ ) {
 101895a:	b153      	cbz	r3, 1018972 <EVNT_APP_bSt_73_execute_table_writing+0x26>
 101895c:	1e5c      	subs	r4, r3, #1
 101895e:	4669      	mov	r1, sp
 1018960:	fa10 f484 	uxtah	r4, r0, r4
 1018964:	1e42      	subs	r2, r0, #1
		st_73_temp.std_events_monitored_flags[i] = table_buffer[k++];
 1018966:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 101896a:	f801 0b01 	strb.w	r0, [r1], #1
	for ( i = 0; i < st_71.nbr_std_events; i++ ) {
 101896e:	42a2      	cmp	r2, r4
 1018970:	d1f9      	bne.n	1018966 <EVNT_APP_bSt_73_execute_table_writing+0x1a>
	for ( i = 0; i < st_71.nbr_mfg_events; i++ ) {
 1018972:	78b9      	ldrb	r1, [r7, #2]
 1018974:	2900      	cmp	r1, #0
 1018976:	d07d      	beq.n	1018a74 <EVNT_APP_bSt_73_execute_table_writing+0x128>
 1018978:	4419      	add	r1, r3
 101897a:	b289      	uxth	r1, r1
 101897c:	f10d 020a 	add.w	r2, sp, #10
		st_73_temp.mfg_events_monitored_flags[i] = table_buffer[k++];
 1018980:	f103 0801 	add.w	r8, r3, #1
 1018984:	fa1f f888 	uxth.w	r8, r8
 1018988:	5ceb      	ldrb	r3, [r5, r3]
 101898a:	f802 3b01 	strb.w	r3, [r2], #1
	for ( i = 0; i < st_71.nbr_mfg_events; i++ ) {
 101898e:	4588      	cmp	r8, r1
 1018990:	4643      	mov	r3, r8
 1018992:	d1f5      	bne.n	1018980 <EVNT_APP_bSt_73_execute_table_writing+0x34>
 1018994:	2400      	movs	r4, #0
 1018996:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 1018a94 <EVNT_APP_bSt_73_execute_table_writing+0x148>
 101899a:	e006      	b.n	10189aa <EVNT_APP_bSt_73_execute_table_writing+0x5e>
		st_73_temp.std_tbls_monitored_flags[i] = table_buffer[k++];
 101899c:	aa2c      	add	r2, sp, #176	; 0xb0
 101899e:	fa12 f484 	uxtah	r4, r2, r4
 10189a2:	5dea      	ldrb	r2, [r5, r7]
 10189a4:	f804 2ca1 	strb.w	r2, [r4, #-161]
 10189a8:	461c      	mov	r4, r3
	for ( i = 0; i < DIM_STD_TBLS_USED; i++ ) {
 10189aa:	47d0      	blx	sl
 10189ac:	fa1f f984 	uxth.w	r9, r4
 10189b0:	b280      	uxth	r0, r0
 10189b2:	eb09 0708 	add.w	r7, r9, r8
 10189b6:	4581      	cmp	r9, r0
 10189b8:	b2bf      	uxth	r7, r7
 10189ba:	f104 0301 	add.w	r3, r4, #1
 10189be:	d3ed      	bcc.n	101899c <EVNT_APP_bSt_73_execute_table_writing+0x50>
 10189c0:	2400      	movs	r4, #0
 10189c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 1018a98 <EVNT_APP_bSt_73_execute_table_writing+0x14c>
 10189c6:	e007      	b.n	10189d8 <EVNT_APP_bSt_73_execute_table_writing+0x8c>
		st_73_temp.mfg_tbls_monitored_flags[i] = table_buffer[k++];
 10189c8:	aa2c      	add	r2, sp, #176	; 0xb0
 10189ca:	fa12 f484 	uxtah	r4, r2, r4
 10189ce:	f815 2008 	ldrb.w	r2, [r5, r8]
 10189d2:	f804 2c79 	strb.w	r2, [r4, #-121]
 10189d6:	461c      	mov	r4, r3
	for ( i = 0; i < DIM_MFG_TBLS_USED; i++ ) {
 10189d8:	47d0      	blx	sl
 10189da:	fa1f f984 	uxth.w	r9, r4
 10189de:	b280      	uxth	r0, r0
 10189e0:	eb09 0807 	add.w	r8, r9, r7
 10189e4:	4581      	cmp	r9, r0
 10189e6:	fa1f f888 	uxth.w	r8, r8
 10189ea:	f104 0301 	add.w	r3, r4, #1
 10189ee:	d3eb      	bcc.n	10189c8 <EVNT_APP_bSt_73_execute_table_writing+0x7c>
 10189f0:	2400      	movs	r4, #0
 10189f2:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 1018a9c <EVNT_APP_bSt_73_execute_table_writing+0x150>
 10189f6:	e006      	b.n	1018a06 <EVNT_APP_bSt_73_execute_table_writing+0xba>
		st_73_temp.std_proc_monitored_flags[i] = table_buffer[k++];
 10189f8:	aa2c      	add	r2, sp, #176	; 0xb0
 10189fa:	fa12 f484 	uxtah	r4, r2, r4
 10189fe:	5dea      	ldrb	r2, [r5, r7]
 1018a00:	f804 2c51 	strb.w	r2, [r4, #-81]
 1018a04:	461c      	mov	r4, r3
	for ( i = 0; i < DIM_STD_PROC_USED; i++ ) {
 1018a06:	47d0      	blx	sl
 1018a08:	fa1f f984 	uxth.w	r9, r4
 1018a0c:	b280      	uxth	r0, r0
 1018a0e:	eb09 0708 	add.w	r7, r9, r8
 1018a12:	4581      	cmp	r9, r0
 1018a14:	b2bf      	uxth	r7, r7
 1018a16:	f104 0301 	add.w	r3, r4, #1
 1018a1a:	d3ed      	bcc.n	10189f8 <EVNT_APP_bSt_73_execute_table_writing+0xac>
 1018a1c:	2400      	movs	r4, #0
 1018a1e:	f8df a080 	ldr.w	sl, [pc, #128]	; 1018aa0 <EVNT_APP_bSt_73_execute_table_writing+0x154>
 1018a22:	e007      	b.n	1018a34 <EVNT_APP_bSt_73_execute_table_writing+0xe8>
		st_73_temp.mfg_proc_monitored_flags[i] = table_buffer[k++];
 1018a24:	aa2c      	add	r2, sp, #176	; 0xb0
 1018a26:	fa12 f484 	uxtah	r4, r2, r4
 1018a2a:	f815 2008 	ldrb.w	r2, [r5, r8]
 1018a2e:	f804 2c29 	strb.w	r2, [r4, #-41]
 1018a32:	461c      	mov	r4, r3
	for ( i = 0; i < DIM_MFG_PROC_USED; i++ ) {
 1018a34:	47d0      	blx	sl
 1018a36:	fa1f f984 	uxth.w	r9, r4
 1018a3a:	b280      	uxth	r0, r0
 1018a3c:	eb07 0809 	add.w	r8, r7, r9
 1018a40:	4548      	cmp	r0, r9
 1018a42:	fa1f f888 	uxth.w	r8, r8
 1018a46:	f104 0301 	add.w	r3, r4, #1
 1018a4a:	d8eb      	bhi.n	1018a24 <EVNT_APP_bSt_73_execute_table_writing+0xd8>
	is_ok = EVNT_APP_bSt_73_validate_data(&st_73_temp);
 1018a4c:	4630      	mov	r0, r6
 1018a4e:	4b0b      	ldr	r3, [pc, #44]	; (1018a7c <EVNT_APP_bSt_73_execute_table_writing+0x130>)
 1018a50:	4798      	blx	r3
	if ( is_ok ) {
 1018a52:	4604      	mov	r4, r0
 1018a54:	b150      	cbz	r0, 1018a6c <EVNT_APP_bSt_73_execute_table_writing+0x120>
		st_73 = st_73_temp;
 1018a56:	4631      	mov	r1, r6
 1018a58:	22af      	movs	r2, #175	; 0xaf
 1018a5a:	4b09      	ldr	r3, [pc, #36]	; (1018a80 <EVNT_APP_bSt_73_execute_table_writing+0x134>)
 1018a5c:	4809      	ldr	r0, [pc, #36]	; (1018a84 <EVNT_APP_bSt_73_execute_table_writing+0x138>)
 1018a5e:	4798      	blx	r3
		EVNT_APP_vSt_73_write_eeprom_values(&st_73);
 1018a60:	4b09      	ldr	r3, [pc, #36]	; (1018a88 <EVNT_APP_bSt_73_execute_table_writing+0x13c>)
 1018a62:	4798      	blx	r3
		uint16_t crc = SM_APP_usSt_73_ram_calculate_crc();
 1018a64:	4b09      	ldr	r3, [pc, #36]	; (1018a8c <EVNT_APP_bSt_73_execute_table_writing+0x140>)
 1018a66:	4798      	blx	r3
		SM_APP_vSt_73_write_crc(crc);
 1018a68:	4b09      	ldr	r3, [pc, #36]	; (1018a90 <EVNT_APP_bSt_73_execute_table_writing+0x144>)
 1018a6a:	4798      	blx	r3
}
 1018a6c:	4620      	mov	r0, r4
 1018a6e:	b02c      	add	sp, #176	; 0xb0
 1018a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for ( i = 0; i < st_71.nbr_mfg_events; i++ ) {
 1018a74:	4698      	mov	r8, r3
 1018a76:	e78d      	b.n	1018994 <EVNT_APP_bSt_73_execute_table_writing+0x48>
 1018a78:	200165dc 	.word	0x200165dc
 1018a7c:	01017cb1 	.word	0x01017cb1
 1018a80:	01030a3d 	.word	0x01030a3d
 1018a84:	2001651c 	.word	0x2001651c
 1018a88:	010182fd 	.word	0x010182fd
 1018a8c:	01020031 	.word	0x01020031
 1018a90:	010200e1 	.word	0x010200e1
 1018a94:	0101ab11 	.word	0x0101ab11
 1018a98:	0101ab6d 	.word	0x0101ab6d
 1018a9c:	0101abad 	.word	0x0101abad
 1018aa0:	0101abe9 	.word	0x0101abe9

01018aa4 <EVNT_APP_bMt_73_restore_default_values>:
bool EVNT_APP_bMt_73_restore_default_values(void) {
 1018aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
	for ( i = 0; i < st_71.nbr_std_events; i++ ) {
 1018aa6:	481b      	ldr	r0, [pc, #108]	; (1018b14 <EVNT_APP_bMt_73_restore_default_values+0x70>)
bool EVNT_APP_bMt_73_restore_default_values(void) {
 1018aa8:	b085      	sub	sp, #20
	for ( i = 0; i < st_71.nbr_std_events; i++ ) {
 1018aaa:	7842      	ldrb	r2, [r0, #1]
	memset( &mt_73_temp, 0, sizeof(mt_73_temp) );
 1018aac:	2100      	movs	r1, #0
 1018aae:	9102      	str	r1, [sp, #8]
 1018ab0:	9100      	str	r1, [sp, #0]
 1018ab2:	9101      	str	r1, [sp, #4]
 1018ab4:	f8cd 100b 	str.w	r1, [sp, #11]
	for ( i = 0; i < st_71.nbr_std_events; i++ ) {
 1018ab8:	b142      	cbz	r2, 1018acc <EVNT_APP_bMt_73_restore_default_values+0x28>
 1018aba:	3a01      	subs	r2, #1
 1018abc:	b2d2      	uxtb	r2, r2
 1018abe:	3201      	adds	r2, #1
 1018ac0:	446a      	add	r2, sp
 1018ac2:	466b      	mov	r3, sp
		mt_73_temp.std_alarms_monitored_flags[i] = MT_73_DEFAULT_STD_ALARMS_MONITORED(i);
 1018ac4:	f803 1b01 	strb.w	r1, [r3], #1
	for ( i = 0; i < st_71.nbr_std_events; i++ ) {
 1018ac8:	4293      	cmp	r3, r2
 1018aca:	d1fb      	bne.n	1018ac4 <EVNT_APP_bMt_73_restore_default_values+0x20>
	for ( i = 0; i < st_71.nbr_mfg_events; i++ ) {
 1018acc:	7882      	ldrb	r2, [r0, #2]
 1018ace:	b152      	cbz	r2, 1018ae6 <EVNT_APP_bMt_73_restore_default_values+0x42>
 1018ad0:	3a01      	subs	r2, #1
 1018ad2:	b2d2      	uxtb	r2, r2
 1018ad4:	320b      	adds	r2, #11
 1018ad6:	446a      	add	r2, sp
 1018ad8:	f10d 030a 	add.w	r3, sp, #10
		mt_73_temp.mfg_alarms_monitored_flags[i] = MT_73_DEFAULT_MFG_ALARMS_MONITORED(i);
 1018adc:	2100      	movs	r1, #0
 1018ade:	f803 1b01 	strb.w	r1, [r3], #1
	for ( i = 0; i < st_71.nbr_mfg_events; i++ ) {
 1018ae2:	4293      	cmp	r3, r2
 1018ae4:	d1fb      	bne.n	1018ade <EVNT_APP_bMt_73_restore_default_values+0x3a>
	is_ok = EVNT_APP_bMt_73_validate_data(&mt_73_temp);
 1018ae6:	4668      	mov	r0, sp
 1018ae8:	4b0b      	ldr	r3, [pc, #44]	; (1018b18 <EVNT_APP_bMt_73_restore_default_values+0x74>)
	mt_73 = mt_73_temp;
 1018aea:	4c0c      	ldr	r4, [pc, #48]	; (1018b1c <EVNT_APP_bMt_73_restore_default_values+0x78>)
	is_ok = EVNT_APP_bMt_73_validate_data(&mt_73_temp);
 1018aec:	4798      	blx	r3
	mt_73 = mt_73_temp;
 1018aee:	466b      	mov	r3, sp
	is_ok = EVNT_APP_bMt_73_validate_data(&mt_73_temp);
 1018af0:	4605      	mov	r5, r0
	mt_73 = mt_73_temp;
 1018af2:	cb07      	ldmia	r3!, {r0, r1, r2}
 1018af4:	881f      	ldrh	r7, [r3, #0]
 1018af6:	789e      	ldrb	r6, [r3, #2]
	EVNT_APP_vMt_73_write_eeprom_values(&mt_73);
 1018af8:	4b09      	ldr	r3, [pc, #36]	; (1018b20 <EVNT_APP_bMt_73_restore_default_values+0x7c>)
	mt_73 = mt_73_temp;
 1018afa:	6061      	str	r1, [r4, #4]
 1018afc:	60a2      	str	r2, [r4, #8]
 1018afe:	6020      	str	r0, [r4, #0]
 1018b00:	81a7      	strh	r7, [r4, #12]
 1018b02:	73a6      	strb	r6, [r4, #14]
	EVNT_APP_vMt_73_write_eeprom_values(&mt_73);
 1018b04:	4798      	blx	r3
	uint16_t crc = SM_APP_usMt_73_ram_calculate_crc();
 1018b06:	4b07      	ldr	r3, [pc, #28]	; (1018b24 <EVNT_APP_bMt_73_restore_default_values+0x80>)
 1018b08:	4798      	blx	r3
	SM_APP_vMt_73_write_crc(crc);
 1018b0a:	4b07      	ldr	r3, [pc, #28]	; (1018b28 <EVNT_APP_bMt_73_restore_default_values+0x84>)
 1018b0c:	4798      	blx	r3
}
 1018b0e:	4628      	mov	r0, r5
 1018b10:	b005      	add	sp, #20
 1018b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1018b14:	200165dc 	.word	0x200165dc
 1018b18:	0101760d 	.word	0x0101760d
 1018b1c:	200165cc 	.word	0x200165cc
 1018b20:	010182b5 	.word	0x010182b5
 1018b24:	01020229 	.word	0x01020229
 1018b28:	010203a1 	.word	0x010203a1

01018b2c <EVNT_APP_bMt_73_refresh_ram>:
bool EVNT_APP_bMt_73_refresh_ram(void) {
 1018b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 1018b2e:	4f15      	ldr	r7, [pc, #84]	; (1018b84 <EVNT_APP_bMt_73_refresh_ram+0x58>)
 1018b30:	4e15      	ldr	r6, [pc, #84]	; (1018b88 <EVNT_APP_bMt_73_refresh_ram+0x5c>)
 1018b32:	b085      	sub	sp, #20
 1018b34:	2403      	movs	r4, #3
		EVNT_APP_vMt_73_read_eeprom_values(&mt_73_temp);
 1018b36:	4668      	mov	r0, sp
 1018b38:	47b8      	blx	r7
		is_ok = EVNT_APP_bMt_73_validate_data(&mt_73_temp);
 1018b3a:	4668      	mov	r0, sp
 1018b3c:	47b0      	blx	r6
 1018b3e:	1e63      	subs	r3, r4, #1
		if ( is_ok ) {
 1018b40:	4605      	mov	r5, r0
 1018b42:	b988      	cbnz	r0, 1018b68 <EVNT_APP_bMt_73_refresh_ram+0x3c>
	for (uint8_t i = 0; i < 3; i++) {
 1018b44:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 1018b48:	d1f5      	bne.n	1018b36 <EVNT_APP_bMt_73_refresh_ram+0xa>
		mt_73 = mt_73_temp;
 1018b4a:	466b      	mov	r3, sp
 1018b4c:	cb07      	ldmia	r3!, {r0, r1, r2}
 1018b4e:	4c0f      	ldr	r4, [pc, #60]	; (1018b8c <EVNT_APP_bMt_73_refresh_ram+0x60>)
 1018b50:	881f      	ldrh	r7, [r3, #0]
 1018b52:	789e      	ldrb	r6, [r3, #2]
		EVNT_APP_vMt_73_write_eeprom_values(&mt_73);
 1018b54:	4b0e      	ldr	r3, [pc, #56]	; (1018b90 <EVNT_APP_bMt_73_refresh_ram+0x64>)
		mt_73 = mt_73_temp;
 1018b56:	6020      	str	r0, [r4, #0]
 1018b58:	6061      	str	r1, [r4, #4]
 1018b5a:	60a2      	str	r2, [r4, #8]
 1018b5c:	81a7      	strh	r7, [r4, #12]
 1018b5e:	73a6      	strb	r6, [r4, #14]
		EVNT_APP_vMt_73_write_eeprom_values(&mt_73);
 1018b60:	4798      	blx	r3
}
 1018b62:	4628      	mov	r0, r5
 1018b64:	b005      	add	sp, #20
 1018b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
			mt_73 = mt_73_temp;
 1018b68:	466b      	mov	r3, sp
 1018b6a:	cb07      	ldmia	r3!, {r0, r1, r2}
 1018b6c:	4c07      	ldr	r4, [pc, #28]	; (1018b8c <EVNT_APP_bMt_73_refresh_ram+0x60>)
 1018b6e:	881e      	ldrh	r6, [r3, #0]
 1018b70:	789b      	ldrb	r3, [r3, #2]
 1018b72:	6020      	str	r0, [r4, #0]
}
 1018b74:	4628      	mov	r0, r5
			mt_73 = mt_73_temp;
 1018b76:	6061      	str	r1, [r4, #4]
 1018b78:	60a2      	str	r2, [r4, #8]
 1018b7a:	81a6      	strh	r6, [r4, #12]
 1018b7c:	73a3      	strb	r3, [r4, #14]
}
 1018b7e:	b005      	add	sp, #20
 1018b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1018b82:	bf00      	nop
 1018b84:	01017995 	.word	0x01017995
 1018b88:	0101760d 	.word	0x0101760d
 1018b8c:	200165cc 	.word	0x200165cc
 1018b90:	010182b5 	.word	0x010182b5

01018b94 <EVNT_APP_bLoad_mt_73>:
bool EVNT_APP_bLoad_mt_73(void) {
 1018b94:	b510      	push	{r4, lr}
	if ( SM_APP_ucGet_table_state(MT_73_PROG_STATE_ADDR) != C1219_TABLE_FULL ) {
 1018b96:	f241 00e4 	movw	r0, #4324	; 0x10e4
 1018b9a:	4b06      	ldr	r3, [pc, #24]	; (1018bb4 <EVNT_APP_bLoad_mt_73+0x20>)
 1018b9c:	4798      	blx	r3
 1018b9e:	2845      	cmp	r0, #69	; 0x45
 1018ba0:	d003      	beq.n	1018baa <EVNT_APP_bLoad_mt_73+0x16>
		is_ok = EVNT_APP_bMt_73_restore_default_values();
 1018ba2:	4b05      	ldr	r3, [pc, #20]	; (1018bb8 <EVNT_APP_bLoad_mt_73+0x24>)
}
 1018ba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		is_ok = EVNT_APP_bMt_73_restore_default_values();
 1018ba8:	4718      	bx	r3
		is_ok = EVNT_APP_bMt_73_refresh_ram();
 1018baa:	4b04      	ldr	r3, [pc, #16]	; (1018bbc <EVNT_APP_bLoad_mt_73+0x28>)
}
 1018bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		is_ok = EVNT_APP_bMt_73_refresh_ram();
 1018bb0:	4718      	bx	r3
 1018bb2:	bf00      	nop
 1018bb4:	010203cd 	.word	0x010203cd
 1018bb8:	01018aa5 	.word	0x01018aa5
 1018bbc:	01018b2d 	.word	0x01018b2d

01018bc0 <EVNT_APP_vCopy_mt_73_ram>:
void EVNT_APP_vCopy_mt_73_ram(uint8_t* destination) {
 1018bc0:	b4f0      	push	{r4, r5, r6, r7}
 1018bc2:	4f17      	ldr	r7, [pc, #92]	; (1018c20 <EVNT_APP_vCopy_mt_73_ram+0x60>)
	for ( i = 0; i < st_71.nbr_std_events; i++ ) {
 1018bc4:	4c17      	ldr	r4, [pc, #92]	; (1018c24 <EVNT_APP_vCopy_mt_73_ram+0x64>)
 1018bc6:	6879      	ldr	r1, [r7, #4]
 1018bc8:	68ba      	ldr	r2, [r7, #8]
 1018bca:	7863      	ldrb	r3, [r4, #1]
void EVNT_APP_vCopy_mt_73_ram(uint8_t* destination) {
 1018bcc:	b084      	sub	sp, #16
 1018bce:	4605      	mov	r5, r0
 1018bd0:	6838      	ldr	r0, [r7, #0]
 1018bd2:	466e      	mov	r6, sp
 1018bd4:	c607      	stmia	r6!, {r0, r1, r2}
 1018bd6:	89b9      	ldrh	r1, [r7, #12]
 1018bd8:	7bba      	ldrb	r2, [r7, #14]
 1018bda:	8031      	strh	r1, [r6, #0]
 1018bdc:	70b2      	strb	r2, [r6, #2]
	for ( i = 0; i < st_71.nbr_std_events; i++ ) {
 1018bde:	b1eb      	cbz	r3, 1018c1c <EVNT_APP_vCopy_mt_73_ram+0x5c>
 1018be0:	2300      	movs	r3, #0
		table_buffer[k++] = mt_73_source.std_alarms_monitored_flags[i];
 1018be2:	aa04      	add	r2, sp, #16
 1018be4:	18d1      	adds	r1, r2, r3
 1018be6:	1c5a      	adds	r2, r3, #1
 1018be8:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 1018bec:	54e9      	strb	r1, [r5, r3]
	for ( i = 0; i < st_71.nbr_std_events; i++ ) {
 1018bee:	7861      	ldrb	r1, [r4, #1]
		table_buffer[k++] = mt_73_source.std_alarms_monitored_flags[i];
 1018bf0:	b292      	uxth	r2, r2
	for ( i = 0; i < st_71.nbr_std_events; i++ ) {
 1018bf2:	4291      	cmp	r1, r2
 1018bf4:	4613      	mov	r3, r2
 1018bf6:	d8f4      	bhi.n	1018be2 <EVNT_APP_vCopy_mt_73_ram+0x22>
	for ( i = 0; i < st_71.nbr_mfg_events; i++ ) {
 1018bf8:	78a3      	ldrb	r3, [r4, #2]
 1018bfa:	b163      	cbz	r3, 1018c16 <EVNT_APP_vCopy_mt_73_ram+0x56>
 1018bfc:	2300      	movs	r3, #0
		table_buffer[k++] = mt_73_source.mfg_alarms_monitored_flags[i];
 1018bfe:	a804      	add	r0, sp, #16
 1018c00:	18d1      	adds	r1, r2, r3
 1018c02:	4418      	add	r0, r3
 1018c04:	b289      	uxth	r1, r1
 1018c06:	f810 0c06 	ldrb.w	r0, [r0, #-6]
 1018c0a:	5468      	strb	r0, [r5, r1]
	for ( i = 0; i < st_71.nbr_mfg_events; i++ ) {
 1018c0c:	3301      	adds	r3, #1
 1018c0e:	78a1      	ldrb	r1, [r4, #2]
 1018c10:	b29b      	uxth	r3, r3
 1018c12:	4299      	cmp	r1, r3
 1018c14:	d8f3      	bhi.n	1018bfe <EVNT_APP_vCopy_mt_73_ram+0x3e>
}
 1018c16:	b004      	add	sp, #16
 1018c18:	bcf0      	pop	{r4, r5, r6, r7}
 1018c1a:	4770      	bx	lr
	for ( i = 0; i < st_71.nbr_std_events; i++ ) {
 1018c1c:	461a      	mov	r2, r3
 1018c1e:	e7eb      	b.n	1018bf8 <EVNT_APP_vCopy_mt_73_ram+0x38>
 1018c20:	200165cc 	.word	0x200165cc
 1018c24:	200165dc 	.word	0x200165dc

01018c28 <EVNT_APP_vCopy_mt_73_nvm>:
void EVNT_APP_vCopy_mt_73_nvm(uint8_t* destination) {
 1018c28:	b530      	push	{r4, r5, lr}
 1018c2a:	b089      	sub	sp, #36	; 0x24
	EVNT_APP_vMt_73_read_eeprom_values(&mt_73_aux);
 1018c2c:	4b15      	ldr	r3, [pc, #84]	; (1018c84 <EVNT_APP_vCopy_mt_73_nvm+0x5c>)
void EVNT_APP_vCopy_mt_73_nvm(uint8_t* destination) {
 1018c2e:	4604      	mov	r4, r0
	EVNT_APP_vMt_73_read_eeprom_values(&mt_73_aux);
 1018c30:	4668      	mov	r0, sp
 1018c32:	4798      	blx	r3
 1018c34:	e89d 000f 	ldmia.w	sp, {r0, r1, r2, r3}
 1018c38:	ad04      	add	r5, sp, #16
 1018c3a:	c507      	stmia	r5!, {r0, r1, r2}
	for ( i = 0; i < st_71.nbr_std_events; i++ ) {
 1018c3c:	4812      	ldr	r0, [pc, #72]	; (1018c88 <EVNT_APP_vCopy_mt_73_nvm+0x60>)
 1018c3e:	f825 3b02 	strh.w	r3, [r5], #2
 1018c42:	7842      	ldrb	r2, [r0, #1]
 1018c44:	0c1b      	lsrs	r3, r3, #16
 1018c46:	702b      	strb	r3, [r5, #0]
 1018c48:	b15a      	cbz	r2, 1018c62 <EVNT_APP_vCopy_mt_73_nvm+0x3a>
 1018c4a:	2300      	movs	r3, #0
		table_buffer[k++] = mt_73_source.std_alarms_monitored_flags[i];
 1018c4c:	aa08      	add	r2, sp, #32
 1018c4e:	18d1      	adds	r1, r2, r3
 1018c50:	1c5a      	adds	r2, r3, #1
 1018c52:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 1018c56:	54e1      	strb	r1, [r4, r3]
	for ( i = 0; i < st_71.nbr_std_events; i++ ) {
 1018c58:	7841      	ldrb	r1, [r0, #1]
		table_buffer[k++] = mt_73_source.std_alarms_monitored_flags[i];
 1018c5a:	b292      	uxth	r2, r2
	for ( i = 0; i < st_71.nbr_std_events; i++ ) {
 1018c5c:	4291      	cmp	r1, r2
 1018c5e:	4613      	mov	r3, r2
 1018c60:	d8f4      	bhi.n	1018c4c <EVNT_APP_vCopy_mt_73_nvm+0x24>
	for ( i = 0; i < st_71.nbr_mfg_events; i++ ) {
 1018c62:	7883      	ldrb	r3, [r0, #2]
 1018c64:	b163      	cbz	r3, 1018c80 <EVNT_APP_vCopy_mt_73_nvm+0x58>
 1018c66:	2300      	movs	r3, #0
		table_buffer[k++] = mt_73_source.mfg_alarms_monitored_flags[i];
 1018c68:	ad08      	add	r5, sp, #32
 1018c6a:	18d1      	adds	r1, r2, r3
 1018c6c:	441d      	add	r5, r3
 1018c6e:	b289      	uxth	r1, r1
 1018c70:	f815 5c06 	ldrb.w	r5, [r5, #-6]
 1018c74:	5465      	strb	r5, [r4, r1]
	for ( i = 0; i < st_71.nbr_mfg_events; i++ ) {
 1018c76:	3301      	adds	r3, #1
 1018c78:	7881      	ldrb	r1, [r0, #2]
 1018c7a:	b29b      	uxth	r3, r3
 1018c7c:	4299      	cmp	r1, r3
 1018c7e:	d8f3      	bhi.n	1018c68 <EVNT_APP_vCopy_mt_73_nvm+0x40>
}
 1018c80:	b009      	add	sp, #36	; 0x24
 1018c82:	bd30      	pop	{r4, r5, pc}
 1018c84:	01017995 	.word	0x01017995
 1018c88:	200165dc 	.word	0x200165dc

01018c8c <EVNT_APP_vMt_73_recover_nvm>:
	EVNT_APP_vMt_73_write_eeprom_values(&mt_73);
 1018c8c:	4b00      	ldr	r3, [pc, #0]	; (1018c90 <EVNT_APP_vMt_73_recover_nvm+0x4>)
 1018c8e:	4718      	bx	r3
 1018c90:	010182b5 	.word	0x010182b5

01018c94 <EVNT_APP_vMt_73_recover_ram>:
	EVNT_APP_vMt_73_read_eeprom_values(&mt_73);
 1018c94:	4801      	ldr	r0, [pc, #4]	; (1018c9c <EVNT_APP_vMt_73_recover_ram+0x8>)
 1018c96:	4b02      	ldr	r3, [pc, #8]	; (1018ca0 <EVNT_APP_vMt_73_recover_ram+0xc>)
 1018c98:	4718      	bx	r3
 1018c9a:	bf00      	nop
 1018c9c:	200165cc 	.word	0x200165cc
 1018ca0:	01017995 	.word	0x01017995

01018ca4 <EVNT_APP_bMt_73_execute_table_reading>:
bool EVNT_APP_bMt_73_execute_table_reading(uint8_t *table_buffer) {
 1018ca4:	b4f0      	push	{r4, r5, r6, r7}
 1018ca6:	4f18      	ldr	r7, [pc, #96]	; (1018d08 <EVNT_APP_bMt_73_execute_table_reading+0x64>)
	for ( i = 0; i < st_71.nbr_std_events; i++ ) {
 1018ca8:	4c18      	ldr	r4, [pc, #96]	; (1018d0c <EVNT_APP_bMt_73_execute_table_reading+0x68>)
 1018caa:	6879      	ldr	r1, [r7, #4]
 1018cac:	68ba      	ldr	r2, [r7, #8]
 1018cae:	7863      	ldrb	r3, [r4, #1]
bool EVNT_APP_bMt_73_execute_table_reading(uint8_t *table_buffer) {
 1018cb0:	b084      	sub	sp, #16
 1018cb2:	4605      	mov	r5, r0
 1018cb4:	6838      	ldr	r0, [r7, #0]
 1018cb6:	466e      	mov	r6, sp
 1018cb8:	c607      	stmia	r6!, {r0, r1, r2}
 1018cba:	89b9      	ldrh	r1, [r7, #12]
 1018cbc:	7bba      	ldrb	r2, [r7, #14]
 1018cbe:	8031      	strh	r1, [r6, #0]
 1018cc0:	70b2      	strb	r2, [r6, #2]
	for ( i = 0; i < st_71.nbr_std_events; i++ ) {
 1018cc2:	b1f3      	cbz	r3, 1018d02 <EVNT_APP_bMt_73_execute_table_reading+0x5e>
 1018cc4:	2300      	movs	r3, #0
		table_buffer[k++] = mt_73_source.std_alarms_monitored_flags[i];
 1018cc6:	aa04      	add	r2, sp, #16
 1018cc8:	18d1      	adds	r1, r2, r3
 1018cca:	1c5a      	adds	r2, r3, #1
 1018ccc:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 1018cd0:	54e9      	strb	r1, [r5, r3]
	for ( i = 0; i < st_71.nbr_std_events; i++ ) {
 1018cd2:	7861      	ldrb	r1, [r4, #1]
		table_buffer[k++] = mt_73_source.std_alarms_monitored_flags[i];
 1018cd4:	b292      	uxth	r2, r2
	for ( i = 0; i < st_71.nbr_std_events; i++ ) {
 1018cd6:	4291      	cmp	r1, r2
 1018cd8:	4613      	mov	r3, r2
 1018cda:	d8f4      	bhi.n	1018cc6 <EVNT_APP_bMt_73_execute_table_reading+0x22>
	for ( i = 0; i < st_71.nbr_mfg_events; i++ ) {
 1018cdc:	78a3      	ldrb	r3, [r4, #2]
 1018cde:	b163      	cbz	r3, 1018cfa <EVNT_APP_bMt_73_execute_table_reading+0x56>
 1018ce0:	2300      	movs	r3, #0
		table_buffer[k++] = mt_73_source.mfg_alarms_monitored_flags[i];
 1018ce2:	a804      	add	r0, sp, #16
 1018ce4:	18d1      	adds	r1, r2, r3
 1018ce6:	4418      	add	r0, r3
 1018ce8:	b289      	uxth	r1, r1
 1018cea:	f810 0c06 	ldrb.w	r0, [r0, #-6]
 1018cee:	5468      	strb	r0, [r5, r1]
	for ( i = 0; i < st_71.nbr_mfg_events; i++ ) {
 1018cf0:	3301      	adds	r3, #1
 1018cf2:	78a1      	ldrb	r1, [r4, #2]
 1018cf4:	b29b      	uxth	r3, r3
 1018cf6:	4299      	cmp	r1, r3
 1018cf8:	d8f3      	bhi.n	1018ce2 <EVNT_APP_bMt_73_execute_table_reading+0x3e>
}
 1018cfa:	2001      	movs	r0, #1
 1018cfc:	b004      	add	sp, #16
 1018cfe:	bcf0      	pop	{r4, r5, r6, r7}
 1018d00:	4770      	bx	lr
	for ( i = 0; i < st_71.nbr_std_events; i++ ) {
 1018d02:	461a      	mov	r2, r3
 1018d04:	e7ea      	b.n	1018cdc <EVNT_APP_bMt_73_execute_table_reading+0x38>
 1018d06:	bf00      	nop
 1018d08:	200165cc 	.word	0x200165cc
 1018d0c:	200165dc 	.word	0x200165dc

01018d10 <EVNT_APP_bMt_73_execute_table_writing>:
bool EVNT_APP_bMt_73_execute_table_writing(uint8_t *table_buffer) {
 1018d10:	b5f0      	push	{r4, r5, r6, r7, lr}
	for ( i = 0; i < st_71.nbr_std_events; i++ ) {
 1018d12:	4f1a      	ldr	r7, [pc, #104]	; (1018d7c <EVNT_APP_bMt_73_execute_table_writing+0x6c>)
 1018d14:	787b      	ldrb	r3, [r7, #1]
bool EVNT_APP_bMt_73_execute_table_writing(uint8_t *table_buffer) {
 1018d16:	b085      	sub	sp, #20
 1018d18:	466d      	mov	r5, sp
	for ( i = 0; i < st_71.nbr_std_events; i++ ) {
 1018d1a:	b153      	cbz	r3, 1018d32 <EVNT_APP_bMt_73_execute_table_writing+0x22>
 1018d1c:	1e5e      	subs	r6, r3, #1
 1018d1e:	4669      	mov	r1, sp
 1018d20:	fa10 f686 	uxtah	r6, r0, r6
 1018d24:	1e42      	subs	r2, r0, #1
		mt_73_temp.std_alarms_monitored_flags[i] = table_buffer[k++];
 1018d26:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 1018d2a:	f801 4b01 	strb.w	r4, [r1], #1
	for ( i = 0; i < st_71.nbr_std_events; i++ ) {
 1018d2e:	42b2      	cmp	r2, r6
 1018d30:	d1f9      	bne.n	1018d26 <EVNT_APP_bMt_73_execute_table_writing+0x16>
	for ( i = 0; i < st_71.nbr_mfg_events; i++ ) {
 1018d32:	78bc      	ldrb	r4, [r7, #2]
 1018d34:	b154      	cbz	r4, 1018d4c <EVNT_APP_bMt_73_execute_table_writing+0x3c>
 1018d36:	441c      	add	r4, r3
 1018d38:	b2a4      	uxth	r4, r4
 1018d3a:	f10d 020a 	add.w	r2, sp, #10
		mt_73_temp.mfg_alarms_monitored_flags[i] = table_buffer[k++];
 1018d3e:	1c59      	adds	r1, r3, #1
 1018d40:	5cc3      	ldrb	r3, [r0, r3]
 1018d42:	f802 3b01 	strb.w	r3, [r2], #1
 1018d46:	b28b      	uxth	r3, r1
	for ( i = 0; i < st_71.nbr_mfg_events; i++ ) {
 1018d48:	429c      	cmp	r4, r3
 1018d4a:	d1f8      	bne.n	1018d3e <EVNT_APP_bMt_73_execute_table_writing+0x2e>
	is_ok = EVNT_APP_bMt_73_validate_data(&mt_73_temp);
 1018d4c:	4628      	mov	r0, r5
 1018d4e:	4b0c      	ldr	r3, [pc, #48]	; (1018d80 <EVNT_APP_bMt_73_execute_table_writing+0x70>)
 1018d50:	4798      	blx	r3
	if ( is_ok ) {
 1018d52:	4604      	mov	r4, r0
 1018d54:	b170      	cbz	r0, 1018d74 <EVNT_APP_bMt_73_execute_table_writing+0x64>
		mt_73 = mt_73_temp;
 1018d56:	cd07      	ldmia	r5!, {r0, r1, r2}
 1018d58:	4b0a      	ldr	r3, [pc, #40]	; (1018d84 <EVNT_APP_bMt_73_execute_table_writing+0x74>)
 1018d5a:	882f      	ldrh	r7, [r5, #0]
 1018d5c:	78ae      	ldrb	r6, [r5, #2]
		EVNT_APP_vMt_73_write_eeprom_values(&mt_73);
 1018d5e:	4d0a      	ldr	r5, [pc, #40]	; (1018d88 <EVNT_APP_bMt_73_execute_table_writing+0x78>)
		mt_73 = mt_73_temp;
 1018d60:	6018      	str	r0, [r3, #0]
 1018d62:	6059      	str	r1, [r3, #4]
 1018d64:	609a      	str	r2, [r3, #8]
 1018d66:	819f      	strh	r7, [r3, #12]
 1018d68:	739e      	strb	r6, [r3, #14]
		EVNT_APP_vMt_73_write_eeprom_values(&mt_73);
 1018d6a:	47a8      	blx	r5
		uint16_t crc = SM_APP_usMt_73_ram_calculate_crc();
 1018d6c:	4b07      	ldr	r3, [pc, #28]	; (1018d8c <EVNT_APP_bMt_73_execute_table_writing+0x7c>)
 1018d6e:	4798      	blx	r3
		SM_APP_vMt_73_write_crc(crc);
 1018d70:	4b07      	ldr	r3, [pc, #28]	; (1018d90 <EVNT_APP_bMt_73_execute_table_writing+0x80>)
 1018d72:	4798      	blx	r3
}
 1018d74:	4620      	mov	r0, r4
 1018d76:	b005      	add	sp, #20
 1018d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1018d7a:	bf00      	nop
 1018d7c:	200165dc 	.word	0x200165dc
 1018d80:	0101760d 	.word	0x0101760d
 1018d84:	200165cc 	.word	0x200165cc
 1018d88:	010182b5 	.word	0x010182b5
 1018d8c:	01020229 	.word	0x01020229
 1018d90:	010203a1 	.word	0x010203a1

01018d94 <EVNT_APP_usMt_73_get_size>:
	table_size = st_71.nbr_std_events + st_71.nbr_mfg_events;
 1018d94:	4b02      	ldr	r3, [pc, #8]	; (1018da0 <EVNT_APP_usMt_73_get_size+0xc>)
 1018d96:	7858      	ldrb	r0, [r3, #1]
 1018d98:	789b      	ldrb	r3, [r3, #2]
}
 1018d9a:	4418      	add	r0, r3
 1018d9c:	4770      	bx	lr
 1018d9e:	bf00      	nop
 1018da0:	200165dc 	.word	0x200165dc

01018da4 <EVNT_APP_usMt_72_get_size>:
 1018da4:	4b00      	ldr	r3, [pc, #0]	; (1018da8 <EVNT_APP_usMt_72_get_size+0x4>)
 1018da6:	4718      	bx	r3
 1018da8:	01018d95 	.word	0x01018d95

01018dac <EVNT_APP_usSt_72_get_size>:
 1018dac:	4b00      	ldr	r3, [pc, #0]	; (1018db0 <EVNT_APP_usSt_72_get_size+0x4>)
 1018dae:	4718      	bx	r3
 1018db0:	01018d95 	.word	0x01018d95

01018db4 <EVNT_APP_bSt_74_restore_default_values>:
bool EVNT_APP_bSt_74_restore_default_values(void) {
 1018db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	st_74_temp.event_flags = ST_74_DEFAULT_LIST_STATUS;
 1018db6:	4c0b      	ldr	r4, [pc, #44]	; (1018de4 <EVNT_APP_bSt_74_restore_default_values+0x30>)
	is_ok = EVNT_APP_bSt_74_validate_data(&st_74_temp);
 1018db8:	4b0b      	ldr	r3, [pc, #44]	; (1018de8 <EVNT_APP_bSt_74_restore_default_values+0x34>)
	event_number = 0;
 1018dba:	4f0c      	ldr	r7, [pc, #48]	; (1018dec <EVNT_APP_bSt_74_restore_default_values+0x38>)
	st_74_temp.nbr_valid_entries = ST_74_DEFAULT_NBR_VALID_ENTRIES;
 1018dbc:	2500      	movs	r5, #0
	st_74_temp.event_flags = ST_74_DEFAULT_LIST_STATUS;
 1018dbe:	2204      	movs	r2, #4
	is_ok = EVNT_APP_bSt_74_validate_data(&st_74_temp);
 1018dc0:	4620      	mov	r0, r4
	st_74_temp.event_flags = ST_74_DEFAULT_LIST_STATUS;
 1018dc2:	7022      	strb	r2, [r4, #0]
	st_74_temp.nbr_valid_entries = ST_74_DEFAULT_NBR_VALID_ENTRIES;
 1018dc4:	8065      	strh	r5, [r4, #2]
	st_74_temp.last_entry_element = ST_74_DEFAULT_LAST_ENTRY_ELEMENT;
 1018dc6:	80a5      	strh	r5, [r4, #4]
	st_74_temp.last_entry_seq_nbr = ST_74_DEFAULT_LAST_ENTRY_SEQ_NBR;
 1018dc8:	60a5      	str	r5, [r4, #8]
	st_74_temp.nbr_unread_entries = ST_74_DEFAULT_NBR_UNREAD_ENTRIES;
 1018dca:	81a5      	strh	r5, [r4, #12]
	is_ok = EVNT_APP_bSt_74_validate_data(&st_74_temp);
 1018dcc:	4798      	blx	r3
 1018dce:	4606      	mov	r6, r0
	st_74 = st_74_temp;
 1018dd0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 1018dd4:	4c06      	ldr	r4, [pc, #24]	; (1018df0 <EVNT_APP_bSt_74_restore_default_values+0x3c>)
	event_number = 0;
 1018dd6:	803d      	strh	r5, [r7, #0]
	EVNT_APP_vSt_74_write_eeprom_values(&st_74);
 1018dd8:	4d06      	ldr	r5, [pc, #24]	; (1018df4 <EVNT_APP_bSt_74_restore_default_values+0x40>)
	st_74 = st_74_temp;
 1018dda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	EVNT_APP_vSt_74_write_eeprom_values(&st_74);
 1018dde:	47a8      	blx	r5
}
 1018de0:	4630      	mov	r0, r6
 1018de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 1018de4:	20000a80 	.word	0x20000a80
 1018de8:	0101766d 	.word	0x0101766d
 1018dec:	20000a6c 	.word	0x20000a6c
 1018df0:	20000a70 	.word	0x20000a70
 1018df4:	01018255 	.word	0x01018255

01018df8 <EVNT_APP_bSt_74_refresh_ram>:
bool EVNT_APP_bSt_74_refresh_ram(void) {
 1018df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 1018dfc:	4e20      	ldr	r6, [pc, #128]	; (1018e80 <EVNT_APP_bSt_74_refresh_ram+0x88>)
 1018dfe:	4c21      	ldr	r4, [pc, #132]	; (1018e84 <EVNT_APP_bSt_74_refresh_ram+0x8c>)
 1018e00:	f8df a098 	ldr.w	sl, [pc, #152]	; 1018e9c <EVNT_APP_bSt_74_refresh_ram+0xa4>
 1018e04:	f8df 8098 	ldr.w	r8, [pc, #152]	; 1018ea0 <EVNT_APP_bSt_74_refresh_ram+0xa8>
	EEPROM_reader( ST_74_HIST_FLAGS_ADDR, &st_74_structure->event_flags, 1 );
 1018e08:	4637      	mov	r7, r6
	EEPROM_reader( ST_74_NBR_VALID_ENTRIES_ADDR, &st_74_structure->nbr_valid_entries, 2 );
 1018e0a:	f106 0902 	add.w	r9, r6, #2
bool EVNT_APP_bSt_74_refresh_ram(void) {
 1018e0e:	2503      	movs	r5, #3
	EEPROM_reader( ST_74_HIST_FLAGS_ADDR, &st_74_structure->event_flags, 1 );
 1018e10:	2201      	movs	r2, #1
 1018e12:	4639      	mov	r1, r7
 1018e14:	f646 1078 	movw	r0, #27000	; 0x6978
 1018e18:	47a0      	blx	r4
	EEPROM_reader( ST_74_NBR_VALID_ENTRIES_ADDR, &st_74_structure->nbr_valid_entries, 2 );
 1018e1a:	2202      	movs	r2, #2
 1018e1c:	4649      	mov	r1, r9
 1018e1e:	f646 1079 	movw	r0, #27001	; 0x6979
 1018e22:	47a0      	blx	r4
	EEPROM_reader( ST_74_LAST_ENTRY_ELEMENT_ADDR, &st_74_structure->last_entry_element, 2 );
 1018e24:	2202      	movs	r2, #2
 1018e26:	4918      	ldr	r1, [pc, #96]	; (1018e88 <EVNT_APP_bSt_74_refresh_ram+0x90>)
 1018e28:	f646 107b 	movw	r0, #27003	; 0x697b
 1018e2c:	47a0      	blx	r4
	EEPROM_reader( ST_74_LAST_ENTRY_SEQ_NBR_ADDR, &st_74_structure->last_entry_seq_nbr, 4 );
 1018e2e:	2204      	movs	r2, #4
 1018e30:	4916      	ldr	r1, [pc, #88]	; (1018e8c <EVNT_APP_bSt_74_refresh_ram+0x94>)
 1018e32:	f646 107d 	movw	r0, #27005	; 0x697d
 1018e36:	47a0      	blx	r4
	EEPROM_reader( ST_74_NBR_UNREAD_ENTRIES_ADDR, &st_74_structure->nbr_unread_entries, 2 );
 1018e38:	2202      	movs	r2, #2
 1018e3a:	4915      	ldr	r1, [pc, #84]	; (1018e90 <EVNT_APP_bSt_74_refresh_ram+0x98>)
 1018e3c:	f646 1081 	movw	r0, #27009	; 0x6981
 1018e40:	47a0      	blx	r4
		is_ok = EVNT_APP_bSt_74_validate_data(&st_74_temp);
 1018e42:	4638      	mov	r0, r7
 1018e44:	47d0      	blx	sl
 1018e46:	1e6b      	subs	r3, r5, #1
 1018e48:	4686      	mov	lr, r0
 1018e4a:	f888 0000 	strb.w	r0, [r8]
		if ( is_ok ) {
 1018e4e:	b970      	cbnz	r0, 1018e6e <EVNT_APP_bSt_74_refresh_ram+0x76>
	for (uint8_t i = 0; i < 3; i++) {
 1018e50:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
 1018e54:	d1dc      	bne.n	1018e10 <EVNT_APP_bSt_74_refresh_ram+0x18>
		st_74 = st_74_temp;
 1018e56:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 1018e5a:	4c0e      	ldr	r4, [pc, #56]	; (1018e94 <EVNT_APP_bSt_74_refresh_ram+0x9c>)
		EVNT_APP_vSt_74_write_eeprom_values(&st_74);
 1018e5c:	4d0e      	ldr	r5, [pc, #56]	; (1018e98 <EVNT_APP_bSt_74_refresh_ram+0xa0>)
		st_74 = st_74_temp;
 1018e5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		EVNT_APP_vSt_74_write_eeprom_values(&st_74);
 1018e62:	47a8      	blx	r5
 1018e64:	f898 e000 	ldrb.w	lr, [r8]
}
 1018e68:	4670      	mov	r0, lr
 1018e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			st_74 = st_74_temp;
 1018e6e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 1018e72:	4c08      	ldr	r4, [pc, #32]	; (1018e94 <EVNT_APP_bSt_74_refresh_ram+0x9c>)
 1018e74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 1018e78:	4670      	mov	r0, lr
 1018e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 1018e7e:	bf00      	nop
 1018e80:	20000a90 	.word	0x20000a90
 1018e84:	01017511 	.word	0x01017511
 1018e88:	20000a94 	.word	0x20000a94
 1018e8c:	20000a98 	.word	0x20000a98
 1018e90:	20000a9c 	.word	0x20000a9c
 1018e94:	20000a70 	.word	0x20000a70
 1018e98:	01018255 	.word	0x01018255
 1018e9c:	0101766d 	.word	0x0101766d
 1018ea0:	20000a6e 	.word	0x20000a6e

01018ea4 <EVNT_APP_bLoad_st_74>:
bool EVNT_APP_bLoad_st_74(void) {	
 1018ea4:	b538      	push	{r3, r4, r5, lr}
	if ( SM_APP_ucGet_table_state(ST_74_PROG_STATE_ADDR) != C1219_TABLE_FULL ) {
 1018ea6:	f646 1077 	movw	r0, #26999	; 0x6977
 1018eaa:	4c0b      	ldr	r4, [pc, #44]	; (1018ed8 <EVNT_APP_bLoad_st_74+0x34>)
 1018eac:	47a0      	blx	r4
 1018eae:	2845      	cmp	r0, #69	; 0x45
		is_ok = EVNT_APP_bSt_74_restore_default_values();
 1018eb0:	bf14      	ite	ne
 1018eb2:	4b0a      	ldrne	r3, [pc, #40]	; (1018edc <EVNT_APP_bLoad_st_74+0x38>)
		is_ok = EVNT_APP_bSt_74_refresh_ram();
 1018eb4:	4b0a      	ldreq	r3, [pc, #40]	; (1018ee0 <EVNT_APP_bLoad_st_74+0x3c>)
 1018eb6:	4798      	blx	r3
 1018eb8:	4605      	mov	r5, r0
	if ( (SM_APP_ucGet_table_state(ST_74_PROG_STATE_ADDR) == C1219_TABLE_FULL) && (SM_APP_ucGet_table_state(ST_76_PROG_STATE_ADDR) == C1219_TABLE_FULL) ) {
 1018eba:	f646 1077 	movw	r0, #26999	; 0x6977
 1018ebe:	47a0      	blx	r4
 1018ec0:	2845      	cmp	r0, #69	; 0x45
 1018ec2:	d001      	beq.n	1018ec8 <EVNT_APP_bLoad_st_74+0x24>
}
 1018ec4:	4628      	mov	r0, r5
 1018ec6:	bd38      	pop	{r3, r4, r5, pc}
	if ( (SM_APP_ucGet_table_state(ST_74_PROG_STATE_ADDR) == C1219_TABLE_FULL) && (SM_APP_ucGet_table_state(ST_76_PROG_STATE_ADDR) == C1219_TABLE_FULL) ) {
 1018ec8:	f647 50c8 	movw	r0, #32200	; 0x7dc8
 1018ecc:	47a0      	blx	r4
 1018ece:	2845      	cmp	r0, #69	; 0x45
 1018ed0:	d1f8      	bne.n	1018ec4 <EVNT_APP_bLoad_st_74+0x20>
		EVNT_APP_vLoad_event_number();
 1018ed2:	4b04      	ldr	r3, [pc, #16]	; (1018ee4 <EVNT_APP_bLoad_st_74+0x40>)
 1018ed4:	4798      	blx	r3
 1018ed6:	e7f5      	b.n	1018ec4 <EVNT_APP_bLoad_st_74+0x20>
 1018ed8:	010203cd 	.word	0x010203cd
 1018edc:	01018db5 	.word	0x01018db5
 1018ee0:	01018df9 	.word	0x01018df9
 1018ee4:	010179c1 	.word	0x010179c1

01018ee8 <EVNT_APP_vClear_st_74>:
void EVNT_APP_vClear_st_74(uint16_t user_attempt) {
 1018ee8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	for ( i = 0; i < st_71.nbr_history_entries; i++ ) {
 1018eec:	4f22      	ldr	r7, [pc, #136]	; (1018f78 <EVNT_APP_vClear_st_74+0x90>)
	EVNT_APP_bSt_74_restore_default_values();
 1018eee:	4b23      	ldr	r3, [pc, #140]	; (1018f7c <EVNT_APP_vClear_st_74+0x94>)
void EVNT_APP_vClear_st_74(uint16_t user_attempt) {
 1018ef0:	b085      	sub	sp, #20
	uint32_t clear_data = 0xFFFFFFFF;
 1018ef2:	f04f 32ff 	mov.w	r2, #4294967295
void EVNT_APP_vClear_st_74(uint16_t user_attempt) {
 1018ef6:	4681      	mov	r9, r0
	uint32_t clear_data = 0xFFFFFFFF;
 1018ef8:	9203      	str	r2, [sp, #12]
	EVNT_APP_bSt_74_restore_default_values();
 1018efa:	4798      	blx	r3
	for ( i = 0; i < st_71.nbr_history_entries; i++ ) {
 1018efc:	88fb      	ldrh	r3, [r7, #6]
 1018efe:	b363      	cbz	r3, 1018f5a <EVNT_APP_vClear_st_74+0x72>
 1018f00:	4d1f      	ldr	r5, [pc, #124]	; (1018f80 <EVNT_APP_vClear_st_74+0x98>)
 1018f02:	2400      	movs	r4, #0
		EEPROM_writer( (uint32_t)(ST_74_HISTORY_TIME_ADDR + i*4), &clear_data, 4 );
 1018f04:	f646 1883 	movw	r8, #27011	; 0x6983
		EEPROM_writer( (uint32_t)(ST_74_EVENT_NUMBER_ADDR + i*2), &clear_data, 2 );
 1018f08:	0066      	lsls	r6, r4, #1
		EEPROM_writer( (uint32_t)(ST_74_HISTORY_TIME_ADDR + i*4), &clear_data, 4 );
 1018f0a:	2204      	movs	r2, #4
 1018f0c:	a903      	add	r1, sp, #12
 1018f0e:	eb08 0084 	add.w	r0, r8, r4, lsl #2
 1018f12:	47a8      	blx	r5
		EEPROM_writer( (uint32_t)(ST_74_EVENT_NUMBER_ADDR + i*2), &clear_data, 2 );
 1018f14:	f506 40da 	add.w	r0, r6, #27904	; 0x6d00
 1018f18:	2202      	movs	r2, #2
 1018f1a:	a903      	add	r1, sp, #12
 1018f1c:	307f      	adds	r0, #127	; 0x7f
 1018f1e:	47a8      	blx	r5
		EEPROM_writer( (uint32_t)(ST_74_HISTORY_SEQ_NBR_ADDR + i*2), &clear_data, 2 );		
 1018f20:	f506 40de 	add.w	r0, r6, #28416	; 0x6f00
 1018f24:	2202      	movs	r2, #2
 1018f26:	a903      	add	r1, sp, #12
 1018f28:	307d      	adds	r0, #125	; 0x7d
 1018f2a:	47a8      	blx	r5
		EEPROM_writer( (uint32_t)(ST_74_USER_ID_ADDR + i*2), &clear_data, 2 );
 1018f2c:	f506 40e2 	add.w	r0, r6, #28928	; 0x7100
 1018f30:	2202      	movs	r2, #2
 1018f32:	a903      	add	r1, sp, #12
 1018f34:	307b      	adds	r0, #123	; 0x7b
 1018f36:	47a8      	blx	r5
		EEPROM_writer( (uint32_t)(ST_74_HISTORY_CODE_ADDR + i*2), &clear_data, 2 );
 1018f38:	f506 40e6 	add.w	r0, r6, #29440	; 0x7300
 1018f3c:	2202      	movs	r2, #2
 1018f3e:	a903      	add	r1, sp, #12
 1018f40:	3079      	adds	r0, #121	; 0x79
 1018f42:	47a8      	blx	r5
		EEPROM_writer( (uint32_t)(ST_74_HISTORY_ARGUMENT_ADDR + i*2), &clear_data, 2 );
 1018f44:	f506 40ea 	add.w	r0, r6, #29952	; 0x7500
 1018f48:	3077      	adds	r0, #119	; 0x77
 1018f4a:	2202      	movs	r2, #2
 1018f4c:	a903      	add	r1, sp, #12
 1018f4e:	47a8      	blx	r5
	for ( i = 0; i < st_71.nbr_history_entries; i++ ) {
 1018f50:	3401      	adds	r4, #1
 1018f52:	88fb      	ldrh	r3, [r7, #6]
 1018f54:	b2a4      	uxth	r4, r4
 1018f56:	42a3      	cmp	r3, r4
 1018f58:	d8d6      	bhi.n	1018f08 <EVNT_APP_vClear_st_74+0x20>
	if ( !meter.system_state.changing_configuration ) {
 1018f5a:	4b0a      	ldr	r3, [pc, #40]	; (1018f84 <EVNT_APP_vClear_st_74+0x9c>)
 1018f5c:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 1018f60:	b939      	cbnz	r1, 1018f72 <EVNT_APP_vClear_st_74+0x8a>
	EVNT_APP_vRegister_event(HISTORY_LOG_CLEARED, 0, true, user_attempt, rtc.utc_timestamp);
 1018f62:	4b09      	ldr	r3, [pc, #36]	; (1018f88 <EVNT_APP_vClear_st_74+0xa0>)
 1018f64:	4c09      	ldr	r4, [pc, #36]	; (1018f8c <EVNT_APP_vClear_st_74+0xa4>)
 1018f66:	685b      	ldr	r3, [r3, #4]
 1018f68:	9300      	str	r3, [sp, #0]
 1018f6a:	2201      	movs	r2, #1
 1018f6c:	464b      	mov	r3, r9
 1018f6e:	2010      	movs	r0, #16
 1018f70:	47a0      	blx	r4
}
 1018f72:	b005      	add	sp, #20
 1018f74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 1018f78:	200165dc 	.word	0x200165dc
 1018f7c:	01018db5 	.word	0x01018db5
 1018f80:	01017509 	.word	0x01017509
 1018f84:	20016c2c 	.word	0x20016c2c
 1018f88:	20017160 	.word	0x20017160
 1018f8c:	01017e09 	.word	0x01017e09

01018f90 <EVNT_APP_bSt_74_execute_table_reading>:
bool EVNT_APP_bSt_74_execute_table_reading(uint8_t *table_buffer) {
 1018f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	delay_ms(10);
 1018f94:	4b3f      	ldr	r3, [pc, #252]	; (1019094 <EVNT_APP_bSt_74_execute_table_reading+0x104>)
	EEPROM_reader( (uint32_t)(ST_74_HIST_FLAGS_ADDR), &table_buffer[k], 1 );
 1018f96:	f8df 8104 	ldr.w	r8, [pc, #260]	; 101909c <EVNT_APP_bSt_74_execute_table_reading+0x10c>
	for ( i = 0; i < st_71.nbr_history_entries; i++ ) {
 1018f9a:	f8df 9104 	ldr.w	r9, [pc, #260]	; 10190a0 <EVNT_APP_bSt_74_execute_table_reading+0x110>
bool EVNT_APP_bSt_74_execute_table_reading(uint8_t *table_buffer) {
 1018f9e:	4607      	mov	r7, r0
	delay_ms(10);
 1018fa0:	483d      	ldr	r0, [pc, #244]	; (1019098 <EVNT_APP_bSt_74_execute_table_reading+0x108>)
 1018fa2:	4798      	blx	r3
	EEPROM_reader( (uint32_t)(ST_74_HIST_FLAGS_ADDR), &table_buffer[k], 1 );
 1018fa4:	4639      	mov	r1, r7
 1018fa6:	2201      	movs	r2, #1
 1018fa8:	f646 1078 	movw	r0, #27000	; 0x6978
 1018fac:	47c0      	blx	r8
	table_buffer[k] &= ~INHIBIT_OVERFLOW_FLAG_bm;
 1018fae:	783b      	ldrb	r3, [r7, #0]
 1018fb0:	4639      	mov	r1, r7
 1018fb2:	f023 0309 	bic.w	r3, r3, #9
 1018fb6:	f043 0304 	orr.w	r3, r3, #4
 1018fba:	f801 3b01 	strb.w	r3, [r1], #1
	EEPROM_reader( (uint32_t)(ST_74_NBR_VALID_ENTRIES_ADDR), &table_buffer[k], 2 );
 1018fbe:	2202      	movs	r2, #2
 1018fc0:	f646 1079 	movw	r0, #27001	; 0x6979
 1018fc4:	47c0      	blx	r8
	EEPROM_reader( (uint32_t)(ST_74_LAST_ENTRY_ELEMENT_ADDR), &table_buffer[k], 2 );
 1018fc6:	1cf9      	adds	r1, r7, #3
 1018fc8:	2202      	movs	r2, #2
 1018fca:	f646 107b 	movw	r0, #27003	; 0x697b
 1018fce:	47c0      	blx	r8
	EEPROM_reader( (uint32_t)(ST_74_LAST_ENTRY_SEQ_NBR_ADDR), &table_buffer[k], 4 );
 1018fd0:	1d79      	adds	r1, r7, #5
 1018fd2:	2204      	movs	r2, #4
 1018fd4:	f646 107d 	movw	r0, #27005	; 0x697d
 1018fd8:	47c0      	blx	r8
	EEPROM_reader( (uint32_t)(ST_74_NBR_UNREAD_ENTRIES_ADDR), &table_buffer[k], 2 );
 1018fda:	f107 0109 	add.w	r1, r7, #9
 1018fde:	2202      	movs	r2, #2
 1018fe0:	f646 1081 	movw	r0, #27009	; 0x6981
 1018fe4:	47c0      	blx	r8
	for ( i = 0; i < st_71.nbr_history_entries; i++ ) {
 1018fe6:	f8b9 3006 	ldrh.w	r3, [r9, #6]
 1018fea:	2b00      	cmp	r3, #0
 1018fec:	d04e      	beq.n	101908c <EVNT_APP_bSt_74_execute_table_reading+0xfc>
 1018fee:	240b      	movs	r4, #11
 1018ff0:	2500      	movs	r5, #0
			EEPROM_reader( (uint32_t)(ST_74_HISTORY_TIME_ADDR + i*4), &table_buffer[k], 4 );
 1018ff2:	f646 1a83 	movw	sl, #27011	; 0x6983
 1018ff6:	e023      	b.n	1019040 <EVNT_APP_bSt_74_execute_table_reading+0xb0>
		if ( (st_71.log_flags & EVENT_NUMBER_FLAG_bm) == EVENT_NUMBER_FLAG_bm ) {
 1018ff8:	07da      	lsls	r2, r3, #31
			EEPROM_reader( (uint32_t)(ST_74_EVENT_NUMBER_ADDR + i*2), &table_buffer[k], 2 );
 1018ffa:	ea4f 0645 	mov.w	r6, r5, lsl #1
		if ( (st_71.log_flags & EVENT_NUMBER_FLAG_bm) == EVENT_NUMBER_FLAG_bm ) {
 1018ffe:	d430      	bmi.n	1019062 <EVNT_APP_bSt_74_execute_table_reading+0xd2>
		if ( (st_71.log_flags & HIST_SEQ_NBR_FLAG_bm) == HIST_SEQ_NBR_FLAG_bm ) {
 1019000:	075b      	lsls	r3, r3, #29
 1019002:	d43a      	bmi.n	101907a <EVNT_APP_bSt_74_execute_table_reading+0xea>
		EEPROM_reader( (uint32_t)(ST_74_USER_ID_ADDR + i*2), &table_buffer[k], 2 );
 1019004:	f506 40e2 	add.w	r0, r6, #28928	; 0x7100
 1019008:	1939      	adds	r1, r7, r4
 101900a:	2202      	movs	r2, #2
 101900c:	307b      	adds	r0, #123	; 0x7b
 101900e:	47c0      	blx	r8
		k += 2;
 1019010:	1ca1      	adds	r1, r4, #2
		EEPROM_reader( (uint32_t)(ST_74_HISTORY_CODE_ADDR + i*2), &table_buffer[k], 2 );
 1019012:	f506 40e6 	add.w	r0, r6, #29440	; 0x7300
 1019016:	fa17 f181 	uxtah	r1, r7, r1
 101901a:	2202      	movs	r2, #2
 101901c:	3079      	adds	r0, #121	; 0x79
 101901e:	47c0      	blx	r8
		k += 2;
 1019020:	1d21      	adds	r1, r4, #4
		EEPROM_reader( (uint32_t)(ST_74_HISTORY_ARGUMENT_ADDR + i*2), &table_buffer[k], 2 );
 1019022:	f506 40ea 	add.w	r0, r6, #29952	; 0x7500
 1019026:	3077      	adds	r0, #119	; 0x77
 1019028:	fa17 f181 	uxtah	r1, r7, r1
 101902c:	2202      	movs	r2, #2
 101902e:	47c0      	blx	r8
	for ( i = 0; i < st_71.nbr_history_entries; i++ ) {
 1019030:	3501      	adds	r5, #1
 1019032:	f8b9 3006 	ldrh.w	r3, [r9, #6]
 1019036:	b2ad      	uxth	r5, r5
		k += 2;
 1019038:	3406      	adds	r4, #6
	for ( i = 0; i < st_71.nbr_history_entries; i++ ) {
 101903a:	42ab      	cmp	r3, r5
		k += 2;
 101903c:	b2a4      	uxth	r4, r4
	for ( i = 0; i < st_71.nbr_history_entries; i++ ) {
 101903e:	d925      	bls.n	101908c <EVNT_APP_bSt_74_execute_table_reading+0xfc>
		if ( (st_71.log_flags & HIST_DATE_TIME_FLAG_bm) == HIST_DATE_TIME_FLAG_bm ) {
 1019040:	f899 3000 	ldrb.w	r3, [r9]
 1019044:	0799      	lsls	r1, r3, #30
 1019046:	d5d7      	bpl.n	1018ff8 <EVNT_APP_bSt_74_execute_table_reading+0x68>
			EEPROM_reader( (uint32_t)(ST_74_HISTORY_TIME_ADDR + i*4), &table_buffer[k], 4 );
 1019048:	2204      	movs	r2, #4
 101904a:	1939      	adds	r1, r7, r4
 101904c:	eb0a 0085 	add.w	r0, sl, r5, lsl #2
 1019050:	47c0      	blx	r8
 1019052:	f899 3000 	ldrb.w	r3, [r9]
			k += 4;
 1019056:	3404      	adds	r4, #4
		if ( (st_71.log_flags & EVENT_NUMBER_FLAG_bm) == EVENT_NUMBER_FLAG_bm ) {
 1019058:	07da      	lsls	r2, r3, #31
			k += 4;
 101905a:	b2a4      	uxth	r4, r4
			EEPROM_reader( (uint32_t)(ST_74_EVENT_NUMBER_ADDR + i*2), &table_buffer[k], 2 );
 101905c:	ea4f 0645 	mov.w	r6, r5, lsl #1
		if ( (st_71.log_flags & EVENT_NUMBER_FLAG_bm) == EVENT_NUMBER_FLAG_bm ) {
 1019060:	d5ce      	bpl.n	1019000 <EVNT_APP_bSt_74_execute_table_reading+0x70>
			EEPROM_reader( (uint32_t)(ST_74_EVENT_NUMBER_ADDR + i*2), &table_buffer[k], 2 );
 1019062:	f506 40da 	add.w	r0, r6, #27904	; 0x6d00
 1019066:	1939      	adds	r1, r7, r4
 1019068:	307f      	adds	r0, #127	; 0x7f
 101906a:	2202      	movs	r2, #2
 101906c:	47c0      	blx	r8
 101906e:	f899 3000 	ldrb.w	r3, [r9]
			k += 2;	
 1019072:	3402      	adds	r4, #2
		if ( (st_71.log_flags & HIST_SEQ_NBR_FLAG_bm) == HIST_SEQ_NBR_FLAG_bm ) {
 1019074:	075b      	lsls	r3, r3, #29
			k += 2;	
 1019076:	b2a4      	uxth	r4, r4
		if ( (st_71.log_flags & HIST_SEQ_NBR_FLAG_bm) == HIST_SEQ_NBR_FLAG_bm ) {
 1019078:	d5c4      	bpl.n	1019004 <EVNT_APP_bSt_74_execute_table_reading+0x74>
			EEPROM_reader( (uint32_t)(ST_74_HISTORY_SEQ_NBR_ADDR + i*2), &table_buffer[k], 2 );
 101907a:	f506 40de 	add.w	r0, r6, #28416	; 0x6f00
 101907e:	1939      	adds	r1, r7, r4
 1019080:	307d      	adds	r0, #125	; 0x7d
 1019082:	2202      	movs	r2, #2
			k += 2;
 1019084:	3402      	adds	r4, #2
			EEPROM_reader( (uint32_t)(ST_74_HISTORY_SEQ_NBR_ADDR + i*2), &table_buffer[k], 2 );
 1019086:	47c0      	blx	r8
			k += 2;
 1019088:	b2a4      	uxth	r4, r4
 101908a:	e7bb      	b.n	1019004 <EVNT_APP_bSt_74_execute_table_reading+0x74>
}
 101908c:	2001      	movs	r0, #1
 101908e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 1019092:	bf00      	nop
 1019094:	20000001 	.word	0x20000001
 1019098:	00011db7 	.word	0x00011db7
 101909c:	01017511 	.word	0x01017511
 10190a0:	200165dc 	.word	0x200165dc

010190a4 <EVNT_APP_bSt_74_execute_table_writing>:
bool EVNT_APP_bSt_74_execute_table_writing(uint8_t *table_buffer) {
 10190a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	EEPROM_writer( (uint32_t)(ST_74_HIST_FLAGS_ADDR), &table_buffer[k], 1 );
 10190a8:	4601      	mov	r1, r0
bool EVNT_APP_bSt_74_execute_table_writing(uint8_t *table_buffer) {
 10190aa:	4607      	mov	r7, r0
	EEPROM_writer( (uint32_t)(ST_74_HIST_FLAGS_ADDR), &table_buffer[k], 1 );
 10190ac:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 1019194 <EVNT_APP_bSt_74_execute_table_writing+0xf0>
	for ( i = 0; i < st_71.nbr_history_entries; i++ ) {
 10190b0:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 1019198 <EVNT_APP_bSt_74_execute_table_writing+0xf4>
	EEPROM_writer( (uint32_t)(ST_74_HIST_FLAGS_ADDR), &table_buffer[k], 1 );
 10190b4:	2201      	movs	r2, #1
 10190b6:	f646 1078 	movw	r0, #27000	; 0x6978
 10190ba:	47c0      	blx	r8
	EEPROM_writer( (uint32_t)(ST_74_NBR_VALID_ENTRIES_ADDR), &table_buffer[k], 2 );
 10190bc:	1c79      	adds	r1, r7, #1
 10190be:	2202      	movs	r2, #2
 10190c0:	f646 1079 	movw	r0, #27001	; 0x6979
 10190c4:	47c0      	blx	r8
	EEPROM_writer( (uint32_t)(ST_74_LAST_ENTRY_ELEMENT_ADDR), &table_buffer[k], 2 );
 10190c6:	1cf9      	adds	r1, r7, #3
 10190c8:	2202      	movs	r2, #2
 10190ca:	f646 107b 	movw	r0, #27003	; 0x697b
 10190ce:	47c0      	blx	r8
	EEPROM_writer( (uint32_t)(ST_74_LAST_ENTRY_SEQ_NBR_ADDR), &table_buffer[k], 4 );
 10190d0:	1d79      	adds	r1, r7, #5
 10190d2:	2204      	movs	r2, #4
 10190d4:	f646 107d 	movw	r0, #27005	; 0x697d
 10190d8:	47c0      	blx	r8
	EEPROM_writer( (uint32_t)(ST_74_NBR_UNREAD_ENTRIES_ADDR), &table_buffer[k], 2 );
 10190da:	f107 0109 	add.w	r1, r7, #9
 10190de:	2202      	movs	r2, #2
 10190e0:	f646 1081 	movw	r0, #27009	; 0x6981
 10190e4:	47c0      	blx	r8
	for ( i = 0; i < st_71.nbr_history_entries; i++ ) {
 10190e6:	f8b9 3006 	ldrh.w	r3, [r9, #6]
 10190ea:	2b00      	cmp	r3, #0
 10190ec:	d04e      	beq.n	101918c <EVNT_APP_bSt_74_execute_table_writing+0xe8>
 10190ee:	240b      	movs	r4, #11
 10190f0:	2500      	movs	r5, #0
			EEPROM_writer( (uint32_t)(ST_74_HISTORY_TIME_ADDR + i*4), &table_buffer[k], 4 );
 10190f2:	f646 1a83 	movw	sl, #27011	; 0x6983
 10190f6:	e023      	b.n	1019140 <EVNT_APP_bSt_74_execute_table_writing+0x9c>
		if ( (st_71.log_flags & EVENT_NUMBER_FLAG_bm) == EVENT_NUMBER_FLAG_bm ) {
 10190f8:	07da      	lsls	r2, r3, #31
			EEPROM_writer( (uint32_t)(ST_74_EVENT_NUMBER_ADDR + i*2), &table_buffer[k], 2 );
 10190fa:	ea4f 0645 	mov.w	r6, r5, lsl #1
		if ( (st_71.log_flags & EVENT_NUMBER_FLAG_bm) == EVENT_NUMBER_FLAG_bm ) {
 10190fe:	d430      	bmi.n	1019162 <EVNT_APP_bSt_74_execute_table_writing+0xbe>
		if ( (st_71.log_flags & HIST_SEQ_NBR_FLAG_bm) == HIST_SEQ_NBR_FLAG_bm ){
 1019100:	075b      	lsls	r3, r3, #29
 1019102:	d43a      	bmi.n	101917a <EVNT_APP_bSt_74_execute_table_writing+0xd6>
		EEPROM_writer( (uint32_t)(ST_74_USER_ID_ADDR + i*2), &table_buffer[k], 2 );
 1019104:	f506 40e2 	add.w	r0, r6, #28928	; 0x7100
 1019108:	1939      	adds	r1, r7, r4
 101910a:	2202      	movs	r2, #2
 101910c:	307b      	adds	r0, #123	; 0x7b
 101910e:	47c0      	blx	r8
		k += 2;
 1019110:	1ca1      	adds	r1, r4, #2
		EEPROM_writer( (uint32_t)(ST_74_HISTORY_CODE_ADDR + i*2), &table_buffer[k], 2 );
 1019112:	f506 40e6 	add.w	r0, r6, #29440	; 0x7300
 1019116:	fa17 f181 	uxtah	r1, r7, r1
 101911a:	2202      	movs	r2, #2
 101911c:	3079      	adds	r0, #121	; 0x79
 101911e:	47c0      	blx	r8
		k += 2;
 1019120:	1d21      	adds	r1, r4, #4
		EEPROM_writer( (uint32_t)(ST_74_HISTORY_ARGUMENT_ADDR + i*2), &table_buffer[k], 2 );
 1019122:	f506 40ea 	add.w	r0, r6, #29952	; 0x7500
 1019126:	3077      	adds	r0, #119	; 0x77
 1019128:	fa17 f181 	uxtah	r1, r7, r1
 101912c:	2202      	movs	r2, #2
 101912e:	47c0      	blx	r8
	for ( i = 0; i < st_71.nbr_history_entries; i++ ) {
 1019130:	3501      	adds	r5, #1
 1019132:	f8b9 3006 	ldrh.w	r3, [r9, #6]
 1019136:	b2ad      	uxth	r5, r5
		k += 2;
 1019138:	3406      	adds	r4, #6
	for ( i = 0; i < st_71.nbr_history_entries; i++ ) {
 101913a:	42ab      	cmp	r3, r5
		k += 2;
 101913c:	b2a4      	uxth	r4, r4
	for ( i = 0; i < st_71.nbr_history_entries; i++ ) {
 101913e:	d925      	bls.n	101918c <EVNT_APP_bSt_74_execute_table_writing+0xe8>
		if ( (st_71.log_flags & HIST_DATE_TIME_FLAG_bm) == HIST_DATE_TIME_FLAG_bm ) {
 1019140:	f899 3000 	ldrb.w	r3, [r9]
 1019144:	0799      	lsls	r1, r3, #30
 1019146:	d5d7      	bpl.n	10190f8 <EVNT_APP_bSt_74_execute_table_writing+0x54>
			EEPROM_writer( (uint32_t)(ST_74_HISTORY_TIME_ADDR + i*4), &table_buffer[k], 4 );
 1019148:	2204      	movs	r2, #4
 101914a:	1939      	adds	r1, r7, r4
 101914c:	eb0a 0085 	add.w	r0, sl, r5, lsl #2
 1019150:	47c0      	blx	r8
 1019152:	f899 3000 	ldrb.w	r3, [r9]
			k += 4;
 1019156:	3404      	adds	r4, #4
		if ( (st_71.log_flags & EVENT_NUMBER_FLAG_bm) == EVENT_NUMBER_FLAG_bm ) {
 1019158:	07da      	lsls	r2, r3, #31
			k += 4;
 101915a:	b2a4      	uxth	r4, r4
			EEPROM_writer( (uint32_t)(ST_74_EVENT_NUMBER_ADDR + i*2), &table_buffer[k], 2 );
 101915c:	ea4f 0645 	mov.w	r6, r5, lsl #1
		if ( (st_71.log_flags & EVENT_NUMBER_FLAG_bm) == EVENT_NUMBER_FLAG_bm ) {
 1019160:	d5ce      	bpl.n	1019100 <EVNT_APP_bSt_74_execute_table_writing+0x5c>
			EEPROM_writer( (uint32_t)(ST_74_EVENT_NUMBER_ADDR + i*2), &table_buffer[k], 2 );
 1019162:	f506 40da 	add.w	r0, r6, #27904	; 0x6d00
 1019166:	1939      	adds	r1, r7, r4
 1019168:	307f      	adds	r0, #127	; 0x7f
 101916a:	2202      	movs	r2, #2
 101916c:	47c0      	blx	r8
 101916e:	f899 3000 	ldrb.w	r3, [r9]
			k += 2;
 1019172:	3402      	adds	r4, #2
		if ( (st_71.log_flags & HIST_SEQ_NBR_FLAG_bm) == HIST_SEQ_NBR_FLAG_bm ){
 1019174:	075b      	lsls	r3, r3, #29
			k += 2;
 1019176:	b2a4      	uxth	r4, r4
		if ( (st_71.log_flags & HIST_SEQ_NBR_FLAG_bm) == HIST_SEQ_NBR_FLAG_bm ){
 1019178:	d5c4      	bpl.n	1019104 <EVNT_APP_bSt_74_execute_table_writing+0x60>
			EEPROM_writer( (uint32_t)(ST_74_HISTORY_SEQ_NBR_ADDR + i*2), &table_buffer[k], 2 );
 101917a:	f506 40de 	add.w	r0, r6, #28416	; 0x6f00
 101917e:	1939      	adds	r1, r7, r4
 1019180:	307d      	adds	r0, #125	; 0x7d
 1019182:	2202      	movs	r2, #2
			k += 2;
 1019184:	3402      	adds	r4, #2
			EEPROM_writer( (uint32_t)(ST_74_HISTORY_SEQ_NBR_ADDR + i*2), &table_buffer[k], 2 );
 1019186:	47c0      	blx	r8
			k += 2;
 1019188:	b2a4      	uxth	r4, r4
 101918a:	e7bb      	b.n	1019104 <EVNT_APP_bSt_74_execute_table_writing+0x60>
}
 101918c:	2001      	movs	r0, #1
 101918e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 1019192:	bf00      	nop
 1019194:	01017509 	.word	0x01017509
 1019198:	200165dc 	.word	0x200165dc

0101919c <EVNT_APP_usSt_74_get_size>:
uint16_t EVNT_APP_usSt_74_get_size(void) {
 101919c:	b470      	push	{r4, r5, r6}
	for ( i = 0; i < st_71.nbr_history_entries; i++ ) {
 101919e:	4b0f      	ldr	r3, [pc, #60]	; (10191dc <EVNT_APP_usSt_74_get_size+0x40>)
 10191a0:	88dc      	ldrh	r4, [r3, #6]
 10191a2:	b1cc      	cbz	r4, 10191d8 <EVNT_APP_usSt_74_get_size+0x3c>
 10191a4:	7819      	ldrb	r1, [r3, #0]
 10191a6:	200b      	movs	r0, #11
 10191a8:	f001 0604 	and.w	r6, r1, #4
 10191ac:	f001 0502 	and.w	r5, r1, #2
 10191b0:	2300      	movs	r3, #0
 10191b2:	f001 0101 	and.w	r1, r1, #1
 10191b6:	3301      	adds	r3, #1
 10191b8:	b29a      	uxth	r2, r3
		if ( (st_71.log_flags & HIST_DATE_TIME_FLAG_bm) == HIST_DATE_TIME_FLAG_bm ) {
 10191ba:	b10d      	cbz	r5, 10191c0 <EVNT_APP_usSt_74_get_size+0x24>
			table_size += 4;
 10191bc:	3004      	adds	r0, #4
 10191be:	b280      	uxth	r0, r0
		if ( (st_71.log_flags & EVENT_NUMBER_FLAG_bm) == EVENT_NUMBER_FLAG_bm ) {
 10191c0:	b109      	cbz	r1, 10191c6 <EVNT_APP_usSt_74_get_size+0x2a>
			table_size += 2;
 10191c2:	3002      	adds	r0, #2
 10191c4:	b280      	uxth	r0, r0
		if ( (st_71.log_flags & HIST_SEQ_NBR_FLAG_bm) == HIST_SEQ_NBR_FLAG_bm ) {
 10191c6:	b10e      	cbz	r6, 10191cc <EVNT_APP_usSt_74_get_size+0x30>
			table_size += 2;
 10191c8:	3002      	adds	r0, #2
 10191ca:	b280      	uxth	r0, r0
		table_size += 6;
 10191cc:	3006      	adds	r0, #6
	for ( i = 0; i < st_71.nbr_history_entries; i++ ) {
 10191ce:	42a2      	cmp	r2, r4
		table_size += 6;
 10191d0:	b280      	uxth	r0, r0
	for ( i = 0; i < st_71.nbr_history_entries; i++ ) {
 10191d2:	d3f0      	bcc.n	10191b6 <EVNT_APP_usSt_74_get_size+0x1a>
}
 10191d4:	bc70      	pop	{r4, r5, r6}
 10191d6:	4770      	bx	lr
	uint16_t table_size = 11;
 10191d8:	200b      	movs	r0, #11
 10191da:	e7fb      	b.n	10191d4 <EVNT_APP_usSt_74_get_size+0x38>
 10191dc:	200165dc 	.word	0x200165dc

010191e0 <EVNT_APP_bSt_75_restore_default_values>:
bool EVNT_APP_bSt_75_restore_default_values(void) {
 10191e0:	b510      	push	{r4, lr}
 10191e2:	b0ac      	sub	sp, #176	; 0xb0
	memset( &st_75_temp, 0, sizeof(st_75_temp) );
 10191e4:	22af      	movs	r2, #175	; 0xaf
 10191e6:	4668      	mov	r0, sp
 10191e8:	2100      	movs	r1, #0
 10191ea:	4b1f      	ldr	r3, [pc, #124]	; (1019268 <EVNT_APP_bSt_75_restore_default_values+0x88>)
 10191ec:	4798      	blx	r3
	for ( i = 0; i < st_71.nbr_std_events; i++ ) {
 10191ee:	481f      	ldr	r0, [pc, #124]	; (101926c <EVNT_APP_bSt_75_restore_default_values+0x8c>)
 10191f0:	7842      	ldrb	r2, [r0, #1]
 10191f2:	b14a      	cbz	r2, 1019208 <EVNT_APP_bSt_75_restore_default_values+0x28>
 10191f4:	3a01      	subs	r2, #1
 10191f6:	b2d2      	uxtb	r2, r2
 10191f8:	3201      	adds	r2, #1
 10191fa:	446a      	add	r2, sp
 10191fc:	466b      	mov	r3, sp
		st_75_temp.std_events_monitored_flags[i] = ST_75_DEFAULT_STD_EVENTS_MONITORED(i);
 10191fe:	2100      	movs	r1, #0
 1019200:	f803 1b01 	strb.w	r1, [r3], #1
	for ( i = 0; i < st_71.nbr_std_events; i++ ) {
 1019204:	4293      	cmp	r3, r2
 1019206:	d1fb      	bne.n	1019200 <EVNT_APP_bSt_75_restore_default_values+0x20>
	for ( i = 0; i < st_71.nbr_mfg_events; i++ ) {
 1019208:	7882      	ldrb	r2, [r0, #2]
 101920a:	b152      	cbz	r2, 1019222 <EVNT_APP_bSt_75_restore_default_values+0x42>
 101920c:	3a01      	subs	r2, #1
 101920e:	b2d2      	uxtb	r2, r2
 1019210:	320b      	adds	r2, #11
 1019212:	446a      	add	r2, sp
 1019214:	f10d 030a 	add.w	r3, sp, #10
		st_75_temp.mfg_events_monitored_flags[i] = ST_75_DEFAULT_MFG_EVENTS_MONITORED(i);
 1019218:	2100      	movs	r1, #0
 101921a:	f803 1b01 	strb.w	r1, [r3], #1
	for ( i = 0; i < st_71.nbr_mfg_events; i++ ) {
 101921e:	4293      	cmp	r3, r2
 1019220:	d1fb      	bne.n	101921a <EVNT_APP_bSt_75_restore_default_values+0x3a>
	GRAL_APP_vLoad_std_tbls_write(&st_75_temp.std_tbls_monitored_flags[0]);
 1019222:	f10d 000f 	add.w	r0, sp, #15
 1019226:	4b12      	ldr	r3, [pc, #72]	; (1019270 <EVNT_APP_bSt_75_restore_default_values+0x90>)
 1019228:	4798      	blx	r3
	GRAL_APP_vLoad_mfg_tbls_write(&st_75_temp.mfg_tbls_monitored_flags[0]);
 101922a:	f10d 0037 	add.w	r0, sp, #55	; 0x37
 101922e:	4b11      	ldr	r3, [pc, #68]	; (1019274 <EVNT_APP_bSt_75_restore_default_values+0x94>)
 1019230:	4798      	blx	r3
	GRAL_APP_vLoad_std_proc_used(&st_75_temp.std_proc_monitored_flags[0]);
 1019232:	f10d 005f 	add.w	r0, sp, #95	; 0x5f
 1019236:	4b10      	ldr	r3, [pc, #64]	; (1019278 <EVNT_APP_bSt_75_restore_default_values+0x98>)
 1019238:	4798      	blx	r3
	GRAL_APP_vLoad_mfg_proc_used(&st_75_temp.mfg_proc_monitored_flags[0]);
 101923a:	f10d 0087 	add.w	r0, sp, #135	; 0x87
 101923e:	4b0f      	ldr	r3, [pc, #60]	; (101927c <EVNT_APP_bSt_75_restore_default_values+0x9c>)
 1019240:	4798      	blx	r3
	is_ok = EVNT_APP_bSt_75_validate_data(&st_75_temp);
 1019242:	4668      	mov	r0, sp
 1019244:	4b0e      	ldr	r3, [pc, #56]	; (1019280 <EVNT_APP_bSt_75_restore_default_values+0xa0>)
 1019246:	4798      	blx	r3
	st_75 = st_75_temp;
 1019248:	4669      	mov	r1, sp
 101924a:	22af      	movs	r2, #175	; 0xaf
	is_ok = EVNT_APP_bSt_75_validate_data(&st_75_temp);
 101924c:	4604      	mov	r4, r0
	st_75 = st_75_temp;
 101924e:	4b0d      	ldr	r3, [pc, #52]	; (1019284 <EVNT_APP_bSt_75_restore_default_values+0xa4>)
 1019250:	480d      	ldr	r0, [pc, #52]	; (1019288 <EVNT_APP_bSt_75_restore_default_values+0xa8>)
 1019252:	4798      	blx	r3
	EVNT_APP_vSt_75_write_eeprom_values(&st_75);
 1019254:	4b0d      	ldr	r3, [pc, #52]	; (101928c <EVNT_APP_bSt_75_restore_default_values+0xac>)
 1019256:	4798      	blx	r3
	uint16_t crc = SM_APP_usSt_75_ram_calculate_crc();
 1019258:	4b0d      	ldr	r3, [pc, #52]	; (1019290 <EVNT_APP_bSt_75_restore_default_values+0xb0>)
 101925a:	4798      	blx	r3
	SM_APP_vSt_75_write_crc(crc);
 101925c:	4b0d      	ldr	r3, [pc, #52]	; (1019294 <EVNT_APP_bSt_75_restore_default_values+0xb4>)
 101925e:	4798      	blx	r3
}
 1019260:	4620      	mov	r0, r4
 1019262:	b02c      	add	sp, #176	; 0xb0
 1019264:	bd10      	pop	{r4, pc}
 1019266:	bf00      	nop
 1019268:	01030b71 	.word	0x01030b71
 101926c:	200165dc 	.word	0x200165dc
 1019270:	0101a49d 	.word	0x0101a49d
 1019274:	0101a4d5 	.word	0x0101a4d5
 1019278:	0101a43d 	.word	0x0101a43d
 101927c:	0101a451 	.word	0x0101a451
 1019280:	01017cb1 	.word	0x01017cb1
 1019284:	01030a3d 	.word	0x01030a3d
 1019288:	200165ec 	.word	0x200165ec
 101928c:	01018191 	.word	0x01018191
 1019290:	0102012d 	.word	0x0102012d
 1019294:	010201dd 	.word	0x010201dd

01019298 <EVNT_APP_bSt_75_refresh_ram>:
bool EVNT_APP_bSt_75_refresh_ram(void) {
 1019298:	b5f0      	push	{r4, r5, r6, r7, lr}
 101929a:	4f10      	ldr	r7, [pc, #64]	; (10192dc <EVNT_APP_bSt_75_refresh_ram+0x44>)
 101929c:	4e10      	ldr	r6, [pc, #64]	; (10192e0 <EVNT_APP_bSt_75_refresh_ram+0x48>)
 101929e:	b0ad      	sub	sp, #180	; 0xb4
 10192a0:	2403      	movs	r4, #3
		EVNT_APP_vSt_75_read_eeprom_values(&st_75_temp);
 10192a2:	4668      	mov	r0, sp
 10192a4:	47b8      	blx	r7
		is_ok = EVNT_APP_bSt_75_validate_data(&st_75_temp);
 10192a6:	4668      	mov	r0, sp
 10192a8:	47b0      	blx	r6
 10192aa:	1e63      	subs	r3, r4, #1
		if ( is_ok ) {
 10192ac:	4605      	mov	r5, r0
 10192ae:	b960      	cbnz	r0, 10192ca <EVNT_APP_bSt_75_refresh_ram+0x32>
	for (uint8_t i = 0; i < 3; i++) {
 10192b0:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 10192b4:	d1f5      	bne.n	10192a2 <EVNT_APP_bSt_75_refresh_ram+0xa>
		st_75 = st_75_temp;
 10192b6:	4669      	mov	r1, sp
 10192b8:	22af      	movs	r2, #175	; 0xaf
 10192ba:	4b0a      	ldr	r3, [pc, #40]	; (10192e4 <EVNT_APP_bSt_75_refresh_ram+0x4c>)
 10192bc:	480a      	ldr	r0, [pc, #40]	; (10192e8 <EVNT_APP_bSt_75_refresh_ram+0x50>)
 10192be:	4798      	blx	r3
		EVNT_APP_vSt_75_write_eeprom_values(&st_75);
 10192c0:	4b0a      	ldr	r3, [pc, #40]	; (10192ec <EVNT_APP_bSt_75_refresh_ram+0x54>)
 10192c2:	4798      	blx	r3
}
 10192c4:	4628      	mov	r0, r5
 10192c6:	b02d      	add	sp, #180	; 0xb4
 10192c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			st_75 = st_75_temp;
 10192ca:	4669      	mov	r1, sp
 10192cc:	22af      	movs	r2, #175	; 0xaf
 10192ce:	4b05      	ldr	r3, [pc, #20]	; (10192e4 <EVNT_APP_bSt_75_refresh_ram+0x4c>)
 10192d0:	4805      	ldr	r0, [pc, #20]	; (10192e8 <EVNT_APP_bSt_75_refresh_ram+0x50>)
 10192d2:	4798      	blx	r3
}
 10192d4:	4628      	mov	r0, r5
 10192d6:	b02d      	add	sp, #180	; 0xb4
 10192d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 10192da:	bf00      	nop
 10192dc:	01017af9 	.word	0x01017af9
 10192e0:	01017cb1 	.word	0x01017cb1
 10192e4:	01030a3d 	.word	0x01030a3d
 10192e8:	200165ec 	.word	0x200165ec
 10192ec:	01018191 	.word	0x01018191

010192f0 <EVNT_APP_bLoad_st_75>:
bool EVNT_APP_bLoad_st_75(void) {
 10192f0:	b510      	push	{r4, lr}
	if ( SM_APP_ucGet_table_state(ST_75_PROG_STATE_ADDR) != C1219_TABLE_FULL ) {
 10192f2:	f640 60b2 	movw	r0, #3762	; 0xeb2
 10192f6:	4b06      	ldr	r3, [pc, #24]	; (1019310 <EVNT_APP_bLoad_st_75+0x20>)
 10192f8:	4798      	blx	r3
 10192fa:	2845      	cmp	r0, #69	; 0x45
 10192fc:	d003      	beq.n	1019306 <EVNT_APP_bLoad_st_75+0x16>
		is_ok = EVNT_APP_bSt_75_restore_default_values();
 10192fe:	4b05      	ldr	r3, [pc, #20]	; (1019314 <EVNT_APP_bLoad_st_75+0x24>)
}
 1019300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		is_ok = EVNT_APP_bSt_75_restore_default_values();
 1019304:	4718      	bx	r3
		is_ok = EVNT_APP_bSt_75_refresh_ram();
 1019306:	4b04      	ldr	r3, [pc, #16]	; (1019318 <EVNT_APP_bLoad_st_75+0x28>)
}
 1019308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		is_ok = EVNT_APP_bSt_75_refresh_ram();
 101930c:	4718      	bx	r3
 101930e:	bf00      	nop
 1019310:	010203cd 	.word	0x010203cd
 1019314:	010191e1 	.word	0x010191e1
 1019318:	01019299 	.word	0x01019299

0101931c <EVNT_APP_vCopy_st_75_ram>:
void EVNT_APP_vCopy_st_75_ram(uint8_t* destination) {
 101931c:	b5f0      	push	{r4, r5, r6, r7, lr}
 101931e:	b0ab      	sub	sp, #172	; 0xac
	EVNT_APP_vSt_75_to_array(st_75, &destination[0]);
 1019320:	4909      	ldr	r1, [pc, #36]	; (1019348 <EVNT_APP_vCopy_st_75_ram+0x2c>)
 1019322:	9028      	str	r0, [sp, #160]	; 0xa0
 1019324:	680f      	ldr	r7, [r1, #0]
 1019326:	688d      	ldr	r5, [r1, #8]
 1019328:	68cc      	ldr	r4, [r1, #12]
 101932a:	684e      	ldr	r6, [r1, #4]
 101932c:	4b07      	ldr	r3, [pc, #28]	; (101934c <EVNT_APP_vCopy_st_75_ram+0x30>)
 101932e:	3110      	adds	r1, #16
 1019330:	229f      	movs	r2, #159	; 0x9f
 1019332:	4668      	mov	r0, sp
 1019334:	4798      	blx	r3
 1019336:	4623      	mov	r3, r4
 1019338:	4638      	mov	r0, r7
 101933a:	4631      	mov	r1, r6
 101933c:	462a      	mov	r2, r5
 101933e:	4c04      	ldr	r4, [pc, #16]	; (1019350 <EVNT_APP_vCopy_st_75_ram+0x34>)
 1019340:	47a0      	blx	r4
}
 1019342:	b02b      	add	sp, #172	; 0xac
 1019344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1019346:	bf00      	nop
 1019348:	200165ec 	.word	0x200165ec
 101934c:	01030a3d 	.word	0x01030a3d
 1019350:	01017b9d 	.word	0x01017b9d

01019354 <EVNT_APP_vCopy_st_75_nvm>:
void EVNT_APP_vCopy_st_75_nvm(uint8_t* destination) {
 1019354:	b530      	push	{r4, r5, lr}
 1019356:	b0d7      	sub	sp, #348	; 0x15c
	EVNT_APP_vSt_75_read_eeprom_values(&st_75_aux);
 1019358:	ac2a      	add	r4, sp, #168	; 0xa8
void EVNT_APP_vCopy_st_75_nvm(uint8_t* destination) {
 101935a:	4605      	mov	r5, r0
	EVNT_APP_vSt_75_read_eeprom_values(&st_75_aux);
 101935c:	4b07      	ldr	r3, [pc, #28]	; (101937c <EVNT_APP_vCopy_st_75_nvm+0x28>)
 101935e:	4620      	mov	r0, r4
 1019360:	4798      	blx	r3
	EVNT_APP_vSt_75_to_array(st_75_aux, &destination[0]);
 1019362:	a92e      	add	r1, sp, #184	; 0xb8
 1019364:	229f      	movs	r2, #159	; 0x9f
 1019366:	4668      	mov	r0, sp
 1019368:	4b05      	ldr	r3, [pc, #20]	; (1019380 <EVNT_APP_vCopy_st_75_nvm+0x2c>)
 101936a:	9528      	str	r5, [sp, #160]	; 0xa0
 101936c:	4798      	blx	r3
 101936e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 1019372:	4c04      	ldr	r4, [pc, #16]	; (1019384 <EVNT_APP_vCopy_st_75_nvm+0x30>)
 1019374:	47a0      	blx	r4
}
 1019376:	b057      	add	sp, #348	; 0x15c
 1019378:	bd30      	pop	{r4, r5, pc}
 101937a:	bf00      	nop
 101937c:	01017af9 	.word	0x01017af9
 1019380:	01030a3d 	.word	0x01030a3d
 1019384:	01017b9d 	.word	0x01017b9d

01019388 <EVNT_APP_vSt_75_recover_nvm>:
	EVNT_APP_vSt_75_write_eeprom_values(&st_75);
 1019388:	4b00      	ldr	r3, [pc, #0]	; (101938c <EVNT_APP_vSt_75_recover_nvm+0x4>)
 101938a:	4718      	bx	r3
 101938c:	01018191 	.word	0x01018191

01019390 <EVNT_APP_vSt_75_recover_ram>:
	EVNT_APP_vSt_75_read_eeprom_values(&st_75);
 1019390:	4801      	ldr	r0, [pc, #4]	; (1019398 <EVNT_APP_vSt_75_recover_ram+0x8>)
 1019392:	4b02      	ldr	r3, [pc, #8]	; (101939c <EVNT_APP_vSt_75_recover_ram+0xc>)
 1019394:	4718      	bx	r3
 1019396:	bf00      	nop
 1019398:	200165ec 	.word	0x200165ec
 101939c:	01017af9 	.word	0x01017af9

010193a0 <EVNT_APP_bSt_75_execute_table_reading>:
bool EVNT_APP_bSt_75_execute_table_reading(uint8_t *table_buffer) {
 10193a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 10193a2:	b0ab      	sub	sp, #172	; 0xac
	EVNT_APP_vSt_75_to_array(st_75, &table_buffer[0]);
 10193a4:	4909      	ldr	r1, [pc, #36]	; (10193cc <EVNT_APP_bSt_75_execute_table_reading+0x2c>)
 10193a6:	9028      	str	r0, [sp, #160]	; 0xa0
 10193a8:	680f      	ldr	r7, [r1, #0]
 10193aa:	688d      	ldr	r5, [r1, #8]
 10193ac:	68cc      	ldr	r4, [r1, #12]
 10193ae:	684e      	ldr	r6, [r1, #4]
 10193b0:	4b07      	ldr	r3, [pc, #28]	; (10193d0 <EVNT_APP_bSt_75_execute_table_reading+0x30>)
 10193b2:	3110      	adds	r1, #16
 10193b4:	229f      	movs	r2, #159	; 0x9f
 10193b6:	4668      	mov	r0, sp
 10193b8:	4798      	blx	r3
 10193ba:	4638      	mov	r0, r7
 10193bc:	4623      	mov	r3, r4
 10193be:	4631      	mov	r1, r6
 10193c0:	462a      	mov	r2, r5
 10193c2:	4c04      	ldr	r4, [pc, #16]	; (10193d4 <EVNT_APP_bSt_75_execute_table_reading+0x34>)
 10193c4:	47a0      	blx	r4
}
 10193c6:	2001      	movs	r0, #1
 10193c8:	b02b      	add	sp, #172	; 0xac
 10193ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 10193cc:	200165ec 	.word	0x200165ec
 10193d0:	01030a3d 	.word	0x01030a3d
 10193d4:	01017b9d 	.word	0x01017b9d

010193d8 <EVNT_APP_bSt_75_execute_table_writing>:
bool EVNT_APP_bSt_75_execute_table_writing(uint8_t *table_buffer) {
 10193d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for ( i = 0; i < st_71.nbr_std_events; i++ ) {
 10193dc:	4f49      	ldr	r7, [pc, #292]	; (1019504 <EVNT_APP_bSt_75_execute_table_writing+0x12c>)
 10193de:	787b      	ldrb	r3, [r7, #1]
bool EVNT_APP_bSt_75_execute_table_writing(uint8_t *table_buffer) {
 10193e0:	b0ac      	sub	sp, #176	; 0xb0
 10193e2:	4605      	mov	r5, r0
 10193e4:	466e      	mov	r6, sp
	for ( i = 0; i < st_71.nbr_std_events; i++ ) {
 10193e6:	b153      	cbz	r3, 10193fe <EVNT_APP_bSt_75_execute_table_writing+0x26>
 10193e8:	1e5c      	subs	r4, r3, #1
 10193ea:	4669      	mov	r1, sp
 10193ec:	fa10 f484 	uxtah	r4, r0, r4
 10193f0:	1e42      	subs	r2, r0, #1
		st_75_temp.std_events_monitored_flags[i] = table_buffer[k++];
 10193f2:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 10193f6:	f801 0b01 	strb.w	r0, [r1], #1
	for ( i = 0; i < st_71.nbr_std_events; i++ ) {
 10193fa:	42a2      	cmp	r2, r4
 10193fc:	d1f9      	bne.n	10193f2 <EVNT_APP_bSt_75_execute_table_writing+0x1a>
	for ( i = 0; i < st_71.nbr_mfg_events; i++ ) {
 10193fe:	78b9      	ldrb	r1, [r7, #2]
 1019400:	2900      	cmp	r1, #0
 1019402:	d07d      	beq.n	1019500 <EVNT_APP_bSt_75_execute_table_writing+0x128>
 1019404:	4419      	add	r1, r3
 1019406:	b289      	uxth	r1, r1
 1019408:	f10d 020a 	add.w	r2, sp, #10
		st_75_temp.mfg_events_monitored_flags[i] = table_buffer[k++];
 101940c:	f103 0801 	add.w	r8, r3, #1
 1019410:	fa1f f888 	uxth.w	r8, r8
 1019414:	5ceb      	ldrb	r3, [r5, r3]
 1019416:	f802 3b01 	strb.w	r3, [r2], #1
	for ( i = 0; i < st_71.nbr_mfg_events; i++ ) {
 101941a:	4588      	cmp	r8, r1
 101941c:	4643      	mov	r3, r8
 101941e:	d1f5      	bne.n	101940c <EVNT_APP_bSt_75_execute_table_writing+0x34>
 1019420:	2400      	movs	r4, #0
 1019422:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 1019520 <EVNT_APP_bSt_75_execute_table_writing+0x148>
 1019426:	e006      	b.n	1019436 <EVNT_APP_bSt_75_execute_table_writing+0x5e>
		st_75_temp.std_tbls_monitored_flags[i] = table_buffer[k++];
 1019428:	aa2c      	add	r2, sp, #176	; 0xb0
 101942a:	fa12 f484 	uxtah	r4, r2, r4
 101942e:	5dea      	ldrb	r2, [r5, r7]
 1019430:	f804 2ca1 	strb.w	r2, [r4, #-161]
 1019434:	461c      	mov	r4, r3
	for ( i = 0; i < DIM_STD_TBLS_USED; i++ ) {
 1019436:	47d0      	blx	sl
 1019438:	fa1f f984 	uxth.w	r9, r4
 101943c:	b280      	uxth	r0, r0
 101943e:	eb09 0708 	add.w	r7, r9, r8
 1019442:	4581      	cmp	r9, r0
 1019444:	b2bf      	uxth	r7, r7
 1019446:	f104 0301 	add.w	r3, r4, #1
 101944a:	d3ed      	bcc.n	1019428 <EVNT_APP_bSt_75_execute_table_writing+0x50>
 101944c:	2400      	movs	r4, #0
 101944e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 1019524 <EVNT_APP_bSt_75_execute_table_writing+0x14c>
 1019452:	e007      	b.n	1019464 <EVNT_APP_bSt_75_execute_table_writing+0x8c>
		st_75_temp.mfg_tbls_monitored_flags[i] = table_buffer[k++];
 1019454:	aa2c      	add	r2, sp, #176	; 0xb0
 1019456:	fa12 f484 	uxtah	r4, r2, r4
 101945a:	f815 2008 	ldrb.w	r2, [r5, r8]
 101945e:	f804 2c79 	strb.w	r2, [r4, #-121]
 1019462:	461c      	mov	r4, r3
	for ( i = 0; i < DIM_MFG_TBLS_USED; i++ ) {
 1019464:	47d0      	blx	sl
 1019466:	fa1f f984 	uxth.w	r9, r4
 101946a:	b280      	uxth	r0, r0
 101946c:	eb09 0807 	add.w	r8, r9, r7
 1019470:	4581      	cmp	r9, r0
 1019472:	fa1f f888 	uxth.w	r8, r8
 1019476:	f104 0301 	add.w	r3, r4, #1
 101947a:	d3eb      	bcc.n	1019454 <EVNT_APP_bSt_75_execute_table_writing+0x7c>
 101947c:	2400      	movs	r4, #0
 101947e:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 1019528 <EVNT_APP_bSt_75_execute_table_writing+0x150>
 1019482:	e006      	b.n	1019492 <EVNT_APP_bSt_75_execute_table_writing+0xba>
		st_75_temp.std_proc_monitored_flags[i] = table_buffer[k++];
 1019484:	aa2c      	add	r2, sp, #176	; 0xb0
 1019486:	fa12 f484 	uxtah	r4, r2, r4
 101948a:	5dea      	ldrb	r2, [r5, r7]
 101948c:	f804 2c51 	strb.w	r2, [r4, #-81]
 1019490:	461c      	mov	r4, r3
	for ( i = 0; i < DIM_STD_PROC_USED; i++ ) {
 1019492:	47d0      	blx	sl
 1019494:	fa1f f984 	uxth.w	r9, r4
 1019498:	b280      	uxth	r0, r0
 101949a:	eb09 0708 	add.w	r7, r9, r8
 101949e:	4581      	cmp	r9, r0
 10194a0:	b2bf      	uxth	r7, r7
 10194a2:	f104 0301 	add.w	r3, r4, #1
 10194a6:	d3ed      	bcc.n	1019484 <EVNT_APP_bSt_75_execute_table_writing+0xac>
 10194a8:	2400      	movs	r4, #0
 10194aa:	f8df a080 	ldr.w	sl, [pc, #128]	; 101952c <EVNT_APP_bSt_75_execute_table_writing+0x154>
 10194ae:	e007      	b.n	10194c0 <EVNT_APP_bSt_75_execute_table_writing+0xe8>
		st_75_temp.mfg_proc_monitored_flags[i] = table_buffer[k++];
 10194b0:	aa2c      	add	r2, sp, #176	; 0xb0
 10194b2:	fa12 f484 	uxtah	r4, r2, r4
 10194b6:	f815 2008 	ldrb.w	r2, [r5, r8]
 10194ba:	f804 2c29 	strb.w	r2, [r4, #-41]
 10194be:	461c      	mov	r4, r3
	for ( i = 0; i < DIM_MFG_PROC_USED; i++ ) {
 10194c0:	47d0      	blx	sl
 10194c2:	fa1f f984 	uxth.w	r9, r4
 10194c6:	b280      	uxth	r0, r0
 10194c8:	eb07 0809 	add.w	r8, r7, r9
 10194cc:	4548      	cmp	r0, r9
 10194ce:	fa1f f888 	uxth.w	r8, r8
 10194d2:	f104 0301 	add.w	r3, r4, #1
 10194d6:	d8eb      	bhi.n	10194b0 <EVNT_APP_bSt_75_execute_table_writing+0xd8>
	is_ok = EVNT_APP_bSt_75_validate_data(&st_75_temp);
 10194d8:	4630      	mov	r0, r6
 10194da:	4b0b      	ldr	r3, [pc, #44]	; (1019508 <EVNT_APP_bSt_75_execute_table_writing+0x130>)
 10194dc:	4798      	blx	r3
	if ( is_ok ) {
 10194de:	4604      	mov	r4, r0
 10194e0:	b150      	cbz	r0, 10194f8 <EVNT_APP_bSt_75_execute_table_writing+0x120>
		st_75 = st_75_temp;
 10194e2:	4631      	mov	r1, r6
 10194e4:	22af      	movs	r2, #175	; 0xaf
 10194e6:	4b09      	ldr	r3, [pc, #36]	; (101950c <EVNT_APP_bSt_75_execute_table_writing+0x134>)
 10194e8:	4809      	ldr	r0, [pc, #36]	; (1019510 <EVNT_APP_bSt_75_execute_table_writing+0x138>)
 10194ea:	4798      	blx	r3
		EVNT_APP_vSt_75_write_eeprom_values(&st_75);
 10194ec:	4b09      	ldr	r3, [pc, #36]	; (1019514 <EVNT_APP_bSt_75_execute_table_writing+0x13c>)
 10194ee:	4798      	blx	r3
		uint16_t crc = SM_APP_usSt_75_ram_calculate_crc();
 10194f0:	4b09      	ldr	r3, [pc, #36]	; (1019518 <EVNT_APP_bSt_75_execute_table_writing+0x140>)
 10194f2:	4798      	blx	r3
		SM_APP_vSt_75_write_crc(crc);
 10194f4:	4b09      	ldr	r3, [pc, #36]	; (101951c <EVNT_APP_bSt_75_execute_table_writing+0x144>)
 10194f6:	4798      	blx	r3
}
 10194f8:	4620      	mov	r0, r4
 10194fa:	b02c      	add	sp, #176	; 0xb0
 10194fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for ( i = 0; i < st_71.nbr_mfg_events; i++ ) {
 1019500:	4698      	mov	r8, r3
 1019502:	e78d      	b.n	1019420 <EVNT_APP_bSt_75_execute_table_writing+0x48>
 1019504:	200165dc 	.word	0x200165dc
 1019508:	01017cb1 	.word	0x01017cb1
 101950c:	01030a3d 	.word	0x01030a3d
 1019510:	200165ec 	.word	0x200165ec
 1019514:	01018191 	.word	0x01018191
 1019518:	0102012d 	.word	0x0102012d
 101951c:	010201dd 	.word	0x010201dd
 1019520:	0101ab11 	.word	0x0101ab11
 1019524:	0101ab6d 	.word	0x0101ab6d
 1019528:	0101abad 	.word	0x0101abad
 101952c:	0101abe9 	.word	0x0101abe9

01019530 <EVNT_APP_usSt_75_get_size>:
uint16_t EVNT_APP_usSt_75_get_size(void) {
 1019530:	b510      	push	{r4, lr}
	table_size = st_71.nbr_std_events + st_71.nbr_mfg_events + DIM_STD_TBLS_USED + DIM_MFG_TBLS_USED + DIM_STD_PROC_USED + DIM_MFG_PROC_USED;
 1019532:	4b0a      	ldr	r3, [pc, #40]	; (101955c <EVNT_APP_usSt_75_get_size+0x2c>)
 1019534:	4a0a      	ldr	r2, [pc, #40]	; (1019560 <EVNT_APP_usSt_75_get_size+0x30>)
 1019536:	785c      	ldrb	r4, [r3, #1]
 1019538:	7898      	ldrb	r0, [r3, #2]
 101953a:	4404      	add	r4, r0
 101953c:	4790      	blx	r2
 101953e:	4b09      	ldr	r3, [pc, #36]	; (1019564 <EVNT_APP_usSt_75_get_size+0x34>)
 1019540:	4404      	add	r4, r0
 1019542:	4798      	blx	r3
 1019544:	b2a4      	uxth	r4, r4
 1019546:	4b08      	ldr	r3, [pc, #32]	; (1019568 <EVNT_APP_usSt_75_get_size+0x38>)
 1019548:	4404      	add	r4, r0
 101954a:	4798      	blx	r3
 101954c:	b2a4      	uxth	r4, r4
 101954e:	4b07      	ldr	r3, [pc, #28]	; (101956c <EVNT_APP_usSt_75_get_size+0x3c>)
 1019550:	4404      	add	r4, r0
 1019552:	4798      	blx	r3
 1019554:	b2a4      	uxth	r4, r4
 1019556:	4420      	add	r0, r4
}
 1019558:	b280      	uxth	r0, r0
 101955a:	bd10      	pop	{r4, pc}
 101955c:	200165dc 	.word	0x200165dc
 1019560:	0101ab11 	.word	0x0101ab11
 1019564:	0101ab6d 	.word	0x0101ab6d
 1019568:	0101abad 	.word	0x0101abad
 101956c:	0101abe9 	.word	0x0101abe9

01019570 <EVNT_APP_usSt_73_get_size>:
 1019570:	4b00      	ldr	r3, [pc, #0]	; (1019574 <EVNT_APP_usSt_73_get_size+0x4>)
 1019572:	4718      	bx	r3
 1019574:	01019531 	.word	0x01019531

01019578 <EVNT_APP_bSt_76_restore_default_values>:
bool EVNT_APP_bSt_76_restore_default_values(void) {
 1019578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	st_76_temp.event_flags = ST_76_DEFAULT_LIST_STATUS;
 101957a:	4c0b      	ldr	r4, [pc, #44]	; (10195a8 <EVNT_APP_bSt_76_restore_default_values+0x30>)
	is_ok = EVNT_APP_bSt_76_validate_data(&st_76_temp);
 101957c:	4b0b      	ldr	r3, [pc, #44]	; (10195ac <EVNT_APP_bSt_76_restore_default_values+0x34>)
	event_number = 0;
 101957e:	4f0c      	ldr	r7, [pc, #48]	; (10195b0 <EVNT_APP_bSt_76_restore_default_values+0x38>)
	st_76_temp.nbr_valid_entries = ST_76_DEFAULT_NBR_VALID_ENTRIES;
 1019580:	2500      	movs	r5, #0
	st_76_temp.event_flags = ST_76_DEFAULT_LIST_STATUS;
 1019582:	2204      	movs	r2, #4
	is_ok = EVNT_APP_bSt_76_validate_data(&st_76_temp);
 1019584:	4620      	mov	r0, r4
	st_76_temp.event_flags = ST_76_DEFAULT_LIST_STATUS;
 1019586:	7022      	strb	r2, [r4, #0]
	st_76_temp.nbr_valid_entries = ST_76_DEFAULT_NBR_VALID_ENTRIES;
 1019588:	8065      	strh	r5, [r4, #2]
	st_76_temp.last_entry_element = ST_76_DEFAULT_LAST_ENTRY_ELEMENT;
 101958a:	80a5      	strh	r5, [r4, #4]
	st_76_temp.last_entry_seq_nbr = ST_76_DEFAULT_LAST_ENTRY_SEQ_NBR;
 101958c:	60a5      	str	r5, [r4, #8]
	st_76_temp.nbr_unread_entries = ST_76_DEFAULT_NBR_UNREAD_ENTRIES;
 101958e:	81a5      	strh	r5, [r4, #12]
	is_ok = EVNT_APP_bSt_76_validate_data(&st_76_temp);
 1019590:	4798      	blx	r3
 1019592:	4606      	mov	r6, r0
	st_76 = st_76_temp;
 1019594:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 1019598:	4c06      	ldr	r4, [pc, #24]	; (10195b4 <EVNT_APP_bSt_76_restore_default_values+0x3c>)
	event_number = 0;
 101959a:	803d      	strh	r5, [r7, #0]
	EVNT_APP_vSt_76_write_eeprom_values(&st_76);
 101959c:	4d06      	ldr	r5, [pc, #24]	; (10195b8 <EVNT_APP_bSt_76_restore_default_values+0x40>)
	st_76 = st_76_temp;
 101959e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	EVNT_APP_vSt_76_write_eeprom_values(&st_76);
 10195a2:	47a8      	blx	r5
}
 10195a4:	4630      	mov	r0, r6
 10195a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 10195a8:	20000ab0 	.word	0x20000ab0
 10195ac:	010176cd 	.word	0x010176cd
 10195b0:	20000a6c 	.word	0x20000a6c
 10195b4:	20000aa0 	.word	0x20000aa0
 10195b8:	01018131 	.word	0x01018131

010195bc <EVNT_APP_bSt_76_refresh_ram>:
bool EVNT_APP_bSt_76_refresh_ram(void) {
 10195bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 10195c0:	4e20      	ldr	r6, [pc, #128]	; (1019644 <EVNT_APP_bSt_76_refresh_ram+0x88>)
 10195c2:	4c21      	ldr	r4, [pc, #132]	; (1019648 <EVNT_APP_bSt_76_refresh_ram+0x8c>)
 10195c4:	f8df a098 	ldr.w	sl, [pc, #152]	; 1019660 <EVNT_APP_bSt_76_refresh_ram+0xa4>
 10195c8:	f8df 8098 	ldr.w	r8, [pc, #152]	; 1019664 <EVNT_APP_bSt_76_refresh_ram+0xa8>
	EEPROM_reader( ST_76_EVENT_FLAGS_ADDR, &st_76_structure->event_flags, 1 );
 10195cc:	4637      	mov	r7, r6
	EEPROM_reader( ST_76_NBR_VALID_ENTRIES_ADDR, &st_76_structure->nbr_valid_entries, 2 );
 10195ce:	f106 0902 	add.w	r9, r6, #2
bool EVNT_APP_bSt_76_refresh_ram(void) {
 10195d2:	2503      	movs	r5, #3
	EEPROM_reader( ST_76_EVENT_FLAGS_ADDR, &st_76_structure->event_flags, 1 );
 10195d4:	2201      	movs	r2, #1
 10195d6:	4639      	mov	r1, r7
 10195d8:	f647 50c9 	movw	r0, #32201	; 0x7dc9
 10195dc:	47a0      	blx	r4
	EEPROM_reader( ST_76_NBR_VALID_ENTRIES_ADDR, &st_76_structure->nbr_valid_entries, 2 );
 10195de:	2202      	movs	r2, #2
 10195e0:	4649      	mov	r1, r9
 10195e2:	f647 50ca 	movw	r0, #32202	; 0x7dca
 10195e6:	47a0      	blx	r4
	EEPROM_reader( ST_76_LAST_ENTRY_ELEMENT_ADDR, &st_76_structure->last_entry_element, 2 );
 10195e8:	2202      	movs	r2, #2
 10195ea:	4918      	ldr	r1, [pc, #96]	; (101964c <EVNT_APP_bSt_76_refresh_ram+0x90>)
 10195ec:	f647 50cc 	movw	r0, #32204	; 0x7dcc
 10195f0:	47a0      	blx	r4
	EEPROM_reader( ST_76_LAST_ENTRY_SEQ_NBR_ADDR, &st_76_structure->last_entry_seq_nbr, 4 );
 10195f2:	2204      	movs	r2, #4
 10195f4:	4916      	ldr	r1, [pc, #88]	; (1019650 <EVNT_APP_bSt_76_refresh_ram+0x94>)
 10195f6:	f647 50ce 	movw	r0, #32206	; 0x7dce
 10195fa:	47a0      	blx	r4
	EEPROM_reader( ST_76_NBR_UNREAD_ENTRIES_ADDR, &st_76_structure->nbr_unread_entries, 2 );
 10195fc:	2202      	movs	r2, #2
 10195fe:	4915      	ldr	r1, [pc, #84]	; (1019654 <EVNT_APP_bSt_76_refresh_ram+0x98>)
 1019600:	f647 50d2 	movw	r0, #32210	; 0x7dd2
 1019604:	47a0      	blx	r4
		is_ok = EVNT_APP_bSt_76_validate_data(&st_76_temp);
 1019606:	4638      	mov	r0, r7
 1019608:	47d0      	blx	sl
 101960a:	1e6b      	subs	r3, r5, #1
 101960c:	4686      	mov	lr, r0
 101960e:	f888 0000 	strb.w	r0, [r8]
		if ( is_ok ) {
 1019612:	b970      	cbnz	r0, 1019632 <EVNT_APP_bSt_76_refresh_ram+0x76>
	for (uint8_t i = 0; i < 3; i++) {
 1019614:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
 1019618:	d1dc      	bne.n	10195d4 <EVNT_APP_bSt_76_refresh_ram+0x18>
		st_76 = st_76_temp;
 101961a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 101961e:	4c0e      	ldr	r4, [pc, #56]	; (1019658 <EVNT_APP_bSt_76_refresh_ram+0x9c>)
		EVNT_APP_vSt_76_write_eeprom_values(&st_76);
 1019620:	4d0e      	ldr	r5, [pc, #56]	; (101965c <EVNT_APP_bSt_76_refresh_ram+0xa0>)
		st_76 = st_76_temp;
 1019622:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		EVNT_APP_vSt_76_write_eeprom_values(&st_76);
 1019626:	47a8      	blx	r5
 1019628:	f898 e000 	ldrb.w	lr, [r8]
}
 101962c:	4670      	mov	r0, lr
 101962e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			st_76 = st_76_temp;
 1019632:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 1019636:	4c08      	ldr	r4, [pc, #32]	; (1019658 <EVNT_APP_bSt_76_refresh_ram+0x9c>)
 1019638:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 101963c:	4670      	mov	r0, lr
 101963e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 1019642:	bf00      	nop
 1019644:	20000ac0 	.word	0x20000ac0
 1019648:	01017511 	.word	0x01017511
 101964c:	20000ac4 	.word	0x20000ac4
 1019650:	20000ac8 	.word	0x20000ac8
 1019654:	20000acc 	.word	0x20000acc
 1019658:	20000aa0 	.word	0x20000aa0
 101965c:	01018131 	.word	0x01018131
 1019660:	010176cd 	.word	0x010176cd
 1019664:	20000a6f 	.word	0x20000a6f

01019668 <EVNT_APP_bLoad_st_76>:
bool EVNT_APP_bLoad_st_76(void) {	
 1019668:	b510      	push	{r4, lr}
	if ( SM_APP_ucGet_table_state(ST_76_PROG_STATE_ADDR) != C1219_TABLE_FULL ) {
 101966a:	f647 50c8 	movw	r0, #32200	; 0x7dc8
 101966e:	4c0a      	ldr	r4, [pc, #40]	; (1019698 <EVNT_APP_bLoad_st_76+0x30>)
 1019670:	47a0      	blx	r4
 1019672:	2845      	cmp	r0, #69	; 0x45
		is_ok = EVNT_APP_bSt_76_restore_default_values();
 1019674:	bf14      	ite	ne
 1019676:	4b09      	ldrne	r3, [pc, #36]	; (101969c <EVNT_APP_bLoad_st_76+0x34>)
		is_ok = EVNT_APP_bSt_76_refresh_ram();
 1019678:	4b09      	ldreq	r3, [pc, #36]	; (10196a0 <EVNT_APP_bLoad_st_76+0x38>)
 101967a:	4798      	blx	r3
	if ( (SM_APP_ucGet_table_state(ST_74_PROG_STATE_ADDR) == C1219_TABLE_FULL) && (SM_APP_ucGet_table_state(ST_76_PROG_STATE_ADDR) == C1219_TABLE_FULL) ) {
 101967c:	f646 1077 	movw	r0, #26999	; 0x6977
 1019680:	47a0      	blx	r4
 1019682:	2845      	cmp	r0, #69	; 0x45
 1019684:	d000      	beq.n	1019688 <EVNT_APP_bLoad_st_76+0x20>
}
 1019686:	bd10      	pop	{r4, pc}
	if ( (SM_APP_ucGet_table_state(ST_74_PROG_STATE_ADDR) == C1219_TABLE_FULL) && (SM_APP_ucGet_table_state(ST_76_PROG_STATE_ADDR) == C1219_TABLE_FULL) ) {
 1019688:	f647 50c8 	movw	r0, #32200	; 0x7dc8
 101968c:	47a0      	blx	r4
 101968e:	2845      	cmp	r0, #69	; 0x45
 1019690:	d1f9      	bne.n	1019686 <EVNT_APP_bLoad_st_76+0x1e>
		EVNT_APP_vLoad_event_number();
 1019692:	4b04      	ldr	r3, [pc, #16]	; (10196a4 <EVNT_APP_bLoad_st_76+0x3c>)
 1019694:	4798      	blx	r3
 1019696:	e7f6      	b.n	1019686 <EVNT_APP_bLoad_st_76+0x1e>
 1019698:	010203cd 	.word	0x010203cd
 101969c:	01019579 	.word	0x01019579
 10196a0:	010195bd 	.word	0x010195bd
 10196a4:	010179c1 	.word	0x010179c1

010196a8 <EVNT_APP_vClear_st_76>:
void EVNT_APP_vClear_st_76(uint16_t user_attempt) {
 10196a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	for ( i = 0; i < st_71.nbr_event_entries; i++ ) {
 10196ac:	4f21      	ldr	r7, [pc, #132]	; (1019734 <EVNT_APP_vClear_st_76+0x8c>)
	EVNT_APP_bSt_76_restore_default_values();
 10196ae:	4b22      	ldr	r3, [pc, #136]	; (1019738 <EVNT_APP_vClear_st_76+0x90>)
void EVNT_APP_vClear_st_76(uint16_t user_attempt) {
 10196b0:	b085      	sub	sp, #20
	uint32_t clear_data = 0xFFFFFFFF;
 10196b2:	f04f 32ff 	mov.w	r2, #4294967295
void EVNT_APP_vClear_st_76(uint16_t user_attempt) {
 10196b6:	4681      	mov	r9, r0
	uint32_t clear_data = 0xFFFFFFFF;
 10196b8:	9203      	str	r2, [sp, #12]
	EVNT_APP_bSt_76_restore_default_values();
 10196ba:	4798      	blx	r3
	for ( i = 0; i < st_71.nbr_event_entries; i++ ) {
 10196bc:	893b      	ldrh	r3, [r7, #8]
 10196be:	b353      	cbz	r3, 1019716 <EVNT_APP_vClear_st_76+0x6e>
 10196c0:	4e1e      	ldr	r6, [pc, #120]	; (101973c <EVNT_APP_vClear_st_76+0x94>)
 10196c2:	2500      	movs	r5, #0
		EEPROM_writer( (uint32_t)(ST_76_EVENT_TIME_ADDR + i*4), &clear_data, 4 );
 10196c4:	f641 7875 	movw	r8, #8053	; 0x1f75
		EEPROM_writer( (uint32_t)(ST_76_EVENT_NUMBER_ADDR + i*2), &clear_data, 2 );
 10196c8:	f505 4481 	add.w	r4, r5, #16512	; 0x4080
		EEPROM_writer( (uint32_t)(ST_76_EVENT_TIME_ADDR + i*4), &clear_data, 4 );
 10196cc:	eb05 0008 	add.w	r0, r5, r8
		EEPROM_writer( (uint32_t)(ST_76_EVENT_NUMBER_ADDR + i*2), &clear_data, 2 );
 10196d0:	3468      	adds	r4, #104	; 0x68
 10196d2:	0064      	lsls	r4, r4, #1
		EEPROM_writer( (uint32_t)(ST_76_EVENT_TIME_ADDR + i*4), &clear_data, 4 );
 10196d4:	2204      	movs	r2, #4
 10196d6:	a903      	add	r1, sp, #12
 10196d8:	0080      	lsls	r0, r0, #2
 10196da:	47b0      	blx	r6
		EEPROM_writer( (uint32_t)(ST_76_EVENT_NUMBER_ADDR + i*2), &clear_data, 2 );
 10196dc:	2202      	movs	r2, #2
 10196de:	a903      	add	r1, sp, #12
 10196e0:	4620      	mov	r0, r4
 10196e2:	47b0      	blx	r6
		EEPROM_writer( (uint32_t)(ST_76_EVENT_SEQ_NBR_ADDR + i*2), &clear_data, 2 );
 10196e4:	2202      	movs	r2, #2
 10196e6:	a903      	add	r1, sp, #12
 10196e8:	f504 70ff 	add.w	r0, r4, #510	; 0x1fe
 10196ec:	47b0      	blx	r6
		EEPROM_writer( (uint32_t)(ST_76_USER_ID_ADDR + i*2), &clear_data, 2 );
 10196ee:	2202      	movs	r2, #2
 10196f0:	a903      	add	r1, sp, #12
 10196f2:	f504 707f 	add.w	r0, r4, #1020	; 0x3fc
 10196f6:	47b0      	blx	r6
		EEPROM_writer( (uint32_t)(ST_76_EVENT_CODE_ADDR + i*2), &clear_data, 2 );
 10196f8:	2202      	movs	r2, #2
 10196fa:	a903      	add	r1, sp, #12
 10196fc:	f204 50fa 	addw	r0, r4, #1530	; 0x5fa
 1019700:	47b0      	blx	r6
		EEPROM_writer( (uint32_t)(ST_76_EVENT_ARGUMENT_ADDR + i*2), &clear_data, 2 );
 1019702:	f504 60ff 	add.w	r0, r4, #2040	; 0x7f8
 1019706:	2202      	movs	r2, #2
 1019708:	a903      	add	r1, sp, #12
 101970a:	47b0      	blx	r6
	for ( i = 0; i < st_71.nbr_event_entries; i++ ) {
 101970c:	3501      	adds	r5, #1
 101970e:	893b      	ldrh	r3, [r7, #8]
 1019710:	b2ad      	uxth	r5, r5
 1019712:	42ab      	cmp	r3, r5
 1019714:	d8d8      	bhi.n	10196c8 <EVNT_APP_vClear_st_76+0x20>
	if ( !meter.system_state.changing_configuration ) {
 1019716:	4b0a      	ldr	r3, [pc, #40]	; (1019740 <EVNT_APP_vClear_st_76+0x98>)
 1019718:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 101971c:	b939      	cbnz	r1, 101972e <EVNT_APP_vClear_st_76+0x86>
	EVNT_APP_vRegister_event(EVENT_LOG_CLEARED, 0, true, user_attempt, rtc.utc_timestamp);
 101971e:	4b09      	ldr	r3, [pc, #36]	; (1019744 <EVNT_APP_vClear_st_76+0x9c>)
 1019720:	4c09      	ldr	r4, [pc, #36]	; (1019748 <EVNT_APP_vClear_st_76+0xa0>)
 1019722:	685b      	ldr	r3, [r3, #4]
 1019724:	9300      	str	r3, [sp, #0]
 1019726:	2201      	movs	r2, #1
 1019728:	464b      	mov	r3, r9
 101972a:	2012      	movs	r0, #18
 101972c:	47a0      	blx	r4
}
 101972e:	b005      	add	sp, #20
 1019730:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 1019734:	200165dc 	.word	0x200165dc
 1019738:	01019579 	.word	0x01019579
 101973c:	01017509 	.word	0x01017509
 1019740:	20016c2c 	.word	0x20016c2c
 1019744:	20017160 	.word	0x20017160
 1019748:	01017e09 	.word	0x01017e09

0101974c <EVNT_APP_bSt_76_execute_table_reading>:
bool EVNT_APP_bSt_76_execute_table_reading(uint8_t *table_buffer) {
 101974c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	delay_ms(10);
 1019750:	4b38      	ldr	r3, [pc, #224]	; (1019834 <EVNT_APP_bSt_76_execute_table_reading+0xe8>)
	EEPROM_reader( (uint32_t)(ST_76_EVENT_FLAGS_ADDR), &table_buffer[k], 1 );
 1019752:	4f39      	ldr	r7, [pc, #228]	; (1019838 <EVNT_APP_bSt_76_execute_table_reading+0xec>)
	for ( i = 0; i < st_71.nbr_event_entries; i++ )
 1019754:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 1019840 <EVNT_APP_bSt_76_execute_table_reading+0xf4>
bool EVNT_APP_bSt_76_execute_table_reading(uint8_t *table_buffer) {
 1019758:	4606      	mov	r6, r0
	delay_ms(10);
 101975a:	4838      	ldr	r0, [pc, #224]	; (101983c <EVNT_APP_bSt_76_execute_table_reading+0xf0>)
 101975c:	4798      	blx	r3
	EEPROM_reader( (uint32_t)(ST_76_EVENT_FLAGS_ADDR), &table_buffer[k], 1 );
 101975e:	4631      	mov	r1, r6
 1019760:	2201      	movs	r2, #1
 1019762:	f647 50c9 	movw	r0, #32201	; 0x7dc9
 1019766:	47b8      	blx	r7
	table_buffer[k] &= ~INHIBIT_OVERFLOW_FLAG_bm;
 1019768:	7833      	ldrb	r3, [r6, #0]
 101976a:	4631      	mov	r1, r6
 101976c:	f023 0309 	bic.w	r3, r3, #9
 1019770:	f043 0304 	orr.w	r3, r3, #4
 1019774:	f801 3b01 	strb.w	r3, [r1], #1
	EEPROM_reader( (uint32_t)(ST_76_NBR_VALID_ENTRIES_ADDR), &table_buffer[k], 2 );
 1019778:	2202      	movs	r2, #2
 101977a:	f647 50ca 	movw	r0, #32202	; 0x7dca
 101977e:	47b8      	blx	r7
	EEPROM_reader( (uint32_t)(ST_76_LAST_ENTRY_ELEMENT_ADDR), &table_buffer[k], 2 );
 1019780:	1cf1      	adds	r1, r6, #3
 1019782:	2202      	movs	r2, #2
 1019784:	f647 50cc 	movw	r0, #32204	; 0x7dcc
 1019788:	47b8      	blx	r7
	EEPROM_reader( (uint32_t)(ST_76_LAST_ENTRY_SEQ_NBR_ADDR), &table_buffer[k], 4 );
 101978a:	1d71      	adds	r1, r6, #5
 101978c:	2204      	movs	r2, #4
 101978e:	f647 50ce 	movw	r0, #32206	; 0x7dce
 1019792:	47b8      	blx	r7
	EEPROM_reader( (uint32_t)(ST_76_NBR_UNREAD_ENTRIES_ADDR), &table_buffer[k], 2 );
 1019794:	f106 0109 	add.w	r1, r6, #9
 1019798:	2202      	movs	r2, #2
 101979a:	f647 50d2 	movw	r0, #32210	; 0x7dd2
 101979e:	47b8      	blx	r7
	for ( i = 0; i < st_71.nbr_event_entries; i++ )
 10197a0:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 10197a4:	2b00      	cmp	r3, #0
 10197a6:	d042      	beq.n	101982e <EVNT_APP_bSt_76_execute_table_reading+0xe2>
 10197a8:	250b      	movs	r5, #11
 10197aa:	f04f 0a00 	mov.w	sl, #0
		EEPROM_reader( (uint32_t)(ST_76_EVENT_TIME_ADDR + i*4), &table_buffer[k], 4 );
 10197ae:	f641 7975 	movw	r9, #8053	; 0x1f75
 10197b2:	e026      	b.n	1019802 <EVNT_APP_bSt_76_execute_table_reading+0xb6>
		EEPROM_reader( (uint32_t)(ST_76_EVENT_SEQ_NBR_ADDR + i*2), &table_buffer[k], 2 );
 10197b4:	f50a 4583 	add.w	r5, sl, #16768	; 0x4180
 10197b8:	3567      	adds	r5, #103	; 0x67
 10197ba:	006d      	lsls	r5, r5, #1
 10197bc:	1931      	adds	r1, r6, r4
 10197be:	4628      	mov	r0, r5
 10197c0:	2202      	movs	r2, #2
 10197c2:	47b8      	blx	r7
		k += 2;
 10197c4:	1ca1      	adds	r1, r4, #2
		EEPROM_reader( (uint32_t)(ST_76_USER_ID_ADDR + i*2), &table_buffer[k], 2 );
 10197c6:	f505 70ff 	add.w	r0, r5, #510	; 0x1fe
 10197ca:	fa16 f181 	uxtah	r1, r6, r1
 10197ce:	2202      	movs	r2, #2
 10197d0:	47b8      	blx	r7
		k += 2;
 10197d2:	1d21      	adds	r1, r4, #4
		EEPROM_reader( (uint32_t)(ST_76_EVENT_CODE_ADDR + i*2), &table_buffer[k], 2 );
 10197d4:	f505 707f 	add.w	r0, r5, #1020	; 0x3fc
 10197d8:	fa16 f181 	uxtah	r1, r6, r1
 10197dc:	2202      	movs	r2, #2
 10197de:	47b8      	blx	r7
		k += 2;
 10197e0:	1da1      	adds	r1, r4, #6
		EEPROM_reader( (uint32_t)(ST_76_EVENT_ARGUMENT_ADDR + i*2), &table_buffer[k], 2 );
 10197e2:	f205 50fa 	addw	r0, r5, #1530	; 0x5fa
 10197e6:	fa16 f181 	uxtah	r1, r6, r1
 10197ea:	2202      	movs	r2, #2
 10197ec:	47b8      	blx	r7
	for ( i = 0; i < st_71.nbr_event_entries; i++ )
 10197ee:	f10a 0a01 	add.w	sl, sl, #1
 10197f2:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 10197f6:	fa1f fa8a 	uxth.w	sl, sl
		k += 2;
 10197fa:	3408      	adds	r4, #8
	for ( i = 0; i < st_71.nbr_event_entries; i++ )
 10197fc:	4553      	cmp	r3, sl
		k += 2;
 10197fe:	b2a5      	uxth	r5, r4
	for ( i = 0; i < st_71.nbr_event_entries; i++ )
 1019800:	d915      	bls.n	101982e <EVNT_APP_bSt_76_execute_table_reading+0xe2>
		EEPROM_reader( (uint32_t)(ST_76_EVENT_TIME_ADDR + i*4), &table_buffer[k], 4 );
 1019802:	eb0a 0009 	add.w	r0, sl, r9
 1019806:	0080      	lsls	r0, r0, #2
 1019808:	2204      	movs	r2, #4
 101980a:	1971      	adds	r1, r6, r5
 101980c:	47b8      	blx	r7
		if ( (st_71.log_flags & EVENT_NUMBER_FLAG_bm) == EVENT_NUMBER_FLAG_bm )
 101980e:	f898 3000 	ldrb.w	r3, [r8]
		k += 4;
 1019812:	1d2c      	adds	r4, r5, #4
		if ( (st_71.log_flags & EVENT_NUMBER_FLAG_bm) == EVENT_NUMBER_FLAG_bm )
 1019814:	07db      	lsls	r3, r3, #31
		k += 4;
 1019816:	b2a4      	uxth	r4, r4
		if ( (st_71.log_flags & EVENT_NUMBER_FLAG_bm) == EVENT_NUMBER_FLAG_bm )
 1019818:	d5cc      	bpl.n	10197b4 <EVNT_APP_bSt_76_execute_table_reading+0x68>
			EEPROM_reader( (uint32_t)(ST_76_EVENT_NUMBER_ADDR + i*2), &table_buffer[k], 2 );
 101981a:	f50a 4081 	add.w	r0, sl, #16512	; 0x4080
 101981e:	3068      	adds	r0, #104	; 0x68
 1019820:	1931      	adds	r1, r6, r4
 1019822:	0040      	lsls	r0, r0, #1
 1019824:	2202      	movs	r2, #2
			k += 2;	
 1019826:	1dac      	adds	r4, r5, #6
			EEPROM_reader( (uint32_t)(ST_76_EVENT_NUMBER_ADDR + i*2), &table_buffer[k], 2 );
 1019828:	47b8      	blx	r7
			k += 2;	
 101982a:	b2a4      	uxth	r4, r4
 101982c:	e7c2      	b.n	10197b4 <EVNT_APP_bSt_76_execute_table_reading+0x68>
}
 101982e:	2001      	movs	r0, #1
 1019830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 1019834:	20000001 	.word	0x20000001
 1019838:	01017511 	.word	0x01017511
 101983c:	00011db7 	.word	0x00011db7
 1019840:	200165dc 	.word	0x200165dc

01019844 <EVNT_APP_bSt_76_execute_table_writing>:
bool EVNT_APP_bSt_76_execute_table_writing(uint8_t *table_buffer) {
 1019844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	EEPROM_writer( (uint32_t)(ST_76_EVENT_FLAGS_ADDR), &table_buffer[k], 1 );
 1019848:	4601      	mov	r1, r0
bool EVNT_APP_bSt_76_execute_table_writing(uint8_t *table_buffer) {
 101984a:	4606      	mov	r6, r0
	EEPROM_writer( (uint32_t)(ST_76_EVENT_FLAGS_ADDR), &table_buffer[k], 1 );
 101984c:	4f32      	ldr	r7, [pc, #200]	; (1019918 <EVNT_APP_bSt_76_execute_table_writing+0xd4>)
	for ( i = 0; i < st_71.nbr_event_entries; i++ )
 101984e:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 101991c <EVNT_APP_bSt_76_execute_table_writing+0xd8>
	EEPROM_writer( (uint32_t)(ST_76_EVENT_FLAGS_ADDR), &table_buffer[k], 1 );
 1019852:	2201      	movs	r2, #1
 1019854:	f647 50c9 	movw	r0, #32201	; 0x7dc9
 1019858:	47b8      	blx	r7
	EEPROM_writer( (uint32_t)(ST_76_NBR_VALID_ENTRIES_ADDR), &table_buffer[k], 2 );
 101985a:	1c71      	adds	r1, r6, #1
 101985c:	2202      	movs	r2, #2
 101985e:	f647 50ca 	movw	r0, #32202	; 0x7dca
 1019862:	47b8      	blx	r7
	EEPROM_writer( (uint32_t)(ST_76_LAST_ENTRY_ELEMENT_ADDR), &table_buffer[k], 2 );
 1019864:	1cf1      	adds	r1, r6, #3
 1019866:	2202      	movs	r2, #2
 1019868:	f647 50cc 	movw	r0, #32204	; 0x7dcc
 101986c:	47b8      	blx	r7
	EEPROM_writer( (uint32_t)(ST_76_LAST_ENTRY_SEQ_NBR_ADDR), &table_buffer[k], 4 );
 101986e:	1d71      	adds	r1, r6, #5
 1019870:	2204      	movs	r2, #4
 1019872:	f647 50ce 	movw	r0, #32206	; 0x7dce
 1019876:	47b8      	blx	r7
	EEPROM_writer( (uint32_t)(ST_76_NBR_UNREAD_ENTRIES_ADDR), &table_buffer[k], 2 );
 1019878:	f106 0109 	add.w	r1, r6, #9
 101987c:	2202      	movs	r2, #2
 101987e:	f647 50d2 	movw	r0, #32210	; 0x7dd2
 1019882:	47b8      	blx	r7
	for ( i = 0; i < st_71.nbr_event_entries; i++ )
 1019884:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 1019888:	2b00      	cmp	r3, #0
 101988a:	d042      	beq.n	1019912 <EVNT_APP_bSt_76_execute_table_writing+0xce>
 101988c:	250b      	movs	r5, #11
 101988e:	f04f 0a00 	mov.w	sl, #0
		EEPROM_writer( (uint32_t)(ST_76_EVENT_TIME_ADDR + i*4), &table_buffer[k], 4 );
 1019892:	f641 7975 	movw	r9, #8053	; 0x1f75
 1019896:	e026      	b.n	10198e6 <EVNT_APP_bSt_76_execute_table_writing+0xa2>
		EEPROM_writer( (uint32_t)(ST_76_EVENT_SEQ_NBR_ADDR + i*2), &table_buffer[k], 2 );
 1019898:	f50a 4583 	add.w	r5, sl, #16768	; 0x4180
 101989c:	3567      	adds	r5, #103	; 0x67
 101989e:	006d      	lsls	r5, r5, #1
 10198a0:	1931      	adds	r1, r6, r4
 10198a2:	4628      	mov	r0, r5
 10198a4:	2202      	movs	r2, #2
 10198a6:	47b8      	blx	r7
		k += 2;
 10198a8:	1ca1      	adds	r1, r4, #2
		EEPROM_writer( (uint32_t)(ST_76_USER_ID_ADDR + i*2), &table_buffer[k], 2 );
 10198aa:	f505 70ff 	add.w	r0, r5, #510	; 0x1fe
 10198ae:	fa16 f181 	uxtah	r1, r6, r1
 10198b2:	2202      	movs	r2, #2
 10198b4:	47b8      	blx	r7
		k += 2;
 10198b6:	1d21      	adds	r1, r4, #4
		EEPROM_writer( (uint32_t)(ST_76_EVENT_CODE_ADDR + i*2), &table_buffer[k], 2 );
 10198b8:	f505 707f 	add.w	r0, r5, #1020	; 0x3fc
 10198bc:	fa16 f181 	uxtah	r1, r6, r1
 10198c0:	2202      	movs	r2, #2
 10198c2:	47b8      	blx	r7
		k += 2;
 10198c4:	1da1      	adds	r1, r4, #6
		EEPROM_writer( (uint32_t)(ST_76_EVENT_ARGUMENT_ADDR + i*2), &table_buffer[k], 2 );
 10198c6:	f205 50fa 	addw	r0, r5, #1530	; 0x5fa
 10198ca:	fa16 f181 	uxtah	r1, r6, r1
 10198ce:	2202      	movs	r2, #2
 10198d0:	47b8      	blx	r7
	for ( i = 0; i < st_71.nbr_event_entries; i++ )
 10198d2:	f10a 0a01 	add.w	sl, sl, #1
 10198d6:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 10198da:	fa1f fa8a 	uxth.w	sl, sl
		k += 2;
 10198de:	3408      	adds	r4, #8
	for ( i = 0; i < st_71.nbr_event_entries; i++ )
 10198e0:	4553      	cmp	r3, sl
		k += 2;
 10198e2:	b2a5      	uxth	r5, r4
	for ( i = 0; i < st_71.nbr_event_entries; i++ )
 10198e4:	d915      	bls.n	1019912 <EVNT_APP_bSt_76_execute_table_writing+0xce>
		EEPROM_writer( (uint32_t)(ST_76_EVENT_TIME_ADDR + i*4), &table_buffer[k], 4 );
 10198e6:	eb0a 0009 	add.w	r0, sl, r9
 10198ea:	0080      	lsls	r0, r0, #2
 10198ec:	2204      	movs	r2, #4
 10198ee:	1971      	adds	r1, r6, r5
 10198f0:	47b8      	blx	r7
		if ( (st_71.log_flags & EVENT_NUMBER_FLAG_bm) == EVENT_NUMBER_FLAG_bm )
 10198f2:	f898 3000 	ldrb.w	r3, [r8]
		k += 4;
 10198f6:	1d2c      	adds	r4, r5, #4
		if ( (st_71.log_flags & EVENT_NUMBER_FLAG_bm) == EVENT_NUMBER_FLAG_bm )
 10198f8:	07db      	lsls	r3, r3, #31
		k += 4;
 10198fa:	b2a4      	uxth	r4, r4
		if ( (st_71.log_flags & EVENT_NUMBER_FLAG_bm) == EVENT_NUMBER_FLAG_bm )
 10198fc:	d5cc      	bpl.n	1019898 <EVNT_APP_bSt_76_execute_table_writing+0x54>
			EEPROM_writer( (uint32_t)(ST_76_EVENT_NUMBER_ADDR + i*2), &table_buffer[k], 2 );
 10198fe:	f50a 4081 	add.w	r0, sl, #16512	; 0x4080
 1019902:	3068      	adds	r0, #104	; 0x68
 1019904:	1931      	adds	r1, r6, r4
 1019906:	0040      	lsls	r0, r0, #1
 1019908:	2202      	movs	r2, #2
			k += 2;
 101990a:	1dac      	adds	r4, r5, #6
			EEPROM_writer( (uint32_t)(ST_76_EVENT_NUMBER_ADDR + i*2), &table_buffer[k], 2 );
 101990c:	47b8      	blx	r7
			k += 2;
 101990e:	b2a4      	uxth	r4, r4
 1019910:	e7c2      	b.n	1019898 <EVNT_APP_bSt_76_execute_table_writing+0x54>
}
 1019912:	2001      	movs	r0, #1
 1019914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 1019918:	01017509 	.word	0x01017509
 101991c:	200165dc 	.word	0x200165dc

01019920 <EVNT_APP_usSt_76_get_size>:
uint16_t EVNT_APP_usSt_76_get_size(void) {
 1019920:	b410      	push	{r4}
	for ( i = 0; i < st_71.nbr_event_entries; i++ )
 1019922:	4b0e      	ldr	r3, [pc, #56]	; (101995c <EVNT_APP_usSt_76_get_size+0x3c>)
 1019924:	891c      	ldrh	r4, [r3, #8]
 1019926:	b1b4      	cbz	r4, 1019956 <EVNT_APP_usSt_76_get_size+0x36>
 1019928:	7819      	ldrb	r1, [r3, #0]
 101992a:	200b      	movs	r0, #11
 101992c:	2300      	movs	r3, #0
 101992e:	f001 0101 	and.w	r1, r1, #1
 1019932:	e004      	b.n	101993e <EVNT_APP_usSt_76_get_size+0x1e>
 1019934:	3301      	adds	r3, #1
		table_size += 12;
 1019936:	b290      	uxth	r0, r2
	for ( i = 0; i < st_71.nbr_event_entries; i++ )
 1019938:	b29a      	uxth	r2, r3
 101993a:	42a2      	cmp	r2, r4
 101993c:	d209      	bcs.n	1019952 <EVNT_APP_usSt_76_get_size+0x32>
		table_size += 12;
 101993e:	f100 020c 	add.w	r2, r0, #12
		if ( (st_71.log_flags & EVENT_NUMBER_FLAG_bm) == EVENT_NUMBER_FLAG_bm )
 1019942:	2900      	cmp	r1, #0
 1019944:	d0f6      	beq.n	1019934 <EVNT_APP_usSt_76_get_size+0x14>
 1019946:	3301      	adds	r3, #1
	for ( i = 0; i < st_71.nbr_event_entries; i++ )
 1019948:	b29a      	uxth	r2, r3
			table_size += 2;
 101994a:	300e      	adds	r0, #14
	for ( i = 0; i < st_71.nbr_event_entries; i++ )
 101994c:	42a2      	cmp	r2, r4
			table_size += 2;
 101994e:	b280      	uxth	r0, r0
	for ( i = 0; i < st_71.nbr_event_entries; i++ )
 1019950:	d3f5      	bcc.n	101993e <EVNT_APP_usSt_76_get_size+0x1e>
}
 1019952:	bc10      	pop	{r4}
 1019954:	4770      	bx	lr
	uint16_t table_size = 11;
 1019956:	200b      	movs	r0, #11
 1019958:	e7fb      	b.n	1019952 <EVNT_APP_usSt_76_get_size+0x32>
 101995a:	bf00      	nop
 101995c:	200165dc 	.word	0x200165dc

01019960 <EVNT_APP_vRegister_event>:
void EVNT_APP_vRegister_event(uint8_t code, uint16_t argument, bool is_std, uint16_t user_id, uint32_t timestamp) {
 1019960:	b430      	push	{r4, r5}
	if ( !meter.system_state.changing_configuration ) {
 1019962:	4c05      	ldr	r4, [pc, #20]	; (1019978 <EVNT_APP_vRegister_event+0x18>)
 1019964:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
 1019968:	b91c      	cbnz	r4, 1019972 <EVNT_APP_vRegister_event+0x12>
 101996a:	4c04      	ldr	r4, [pc, #16]	; (101997c <EVNT_APP_vRegister_event+0x1c>)
 101996c:	46a4      	mov	ip, r4
}
 101996e:	bc30      	pop	{r4, r5}
 1019970:	4760      	bx	ip
 1019972:	bc30      	pop	{r4, r5}
 1019974:	4770      	bx	lr
 1019976:	bf00      	nop
 1019978:	20016c2c 	.word	0x20016c2c
 101997c:	01017e09 	.word	0x01017e09

01019980 <FLASH_fwu_reset>:
{	
	static uint32_t *ptrboot_origin;
	static uint32_t boot_origin;
	
	ptrboot_origin = (uint32_t *) BOOT_ORIGIN_ADDR;
	boot_origin = (uint32_t)ptrboot_origin[0];
 1019980:	4b0f      	ldr	r3, [pc, #60]	; (10199c0 <FLASH_fwu_reset+0x40>)

	//GET the origin of the RESET
	if(boot_origin == REFLASH_MODE)
 1019982:	681b      	ldr	r3, [r3, #0]
 1019984:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 1019988:	d000      	beq.n	101998c <FLASH_fwu_reset+0xc>
 101998a:	4770      	bx	lr
{	
 101998c:	b500      	push	{lr}
	{
		if ( (op_c1218_apl.communication_state == BASE_STATE) && (nic_c1218_apl.communication_state == BASE_STATE) )
 101998e:	4b0d      	ldr	r3, [pc, #52]	; (10199c4 <FLASH_fwu_reset+0x44>)
 1019990:	781b      	ldrb	r3, [r3, #0]
{	
 1019992:	b083      	sub	sp, #12
		if ( (op_c1218_apl.communication_state == BASE_STATE) && (nic_c1218_apl.communication_state == BASE_STATE) )
 1019994:	b953      	cbnz	r3, 10199ac <FLASH_fwu_reset+0x2c>
 1019996:	4b0c      	ldr	r3, [pc, #48]	; (10199c8 <FLASH_fwu_reset+0x48>)
 1019998:	781b      	ldrb	r3, [r3, #0]
 101999a:	b93b      	cbnz	r3, 10199ac <FLASH_fwu_reset+0x2c>
		{
			SYSTEM_RESTART_TYPE mcu;
			mcu.restart_cause = FIRMWARE_UPDATE;
 101999c:	2301      	movs	r3, #1
 101999e:	f88d 3005 	strb.w	r3, [sp, #5]
			mcu.save_information = true;
 10199a2:	f88d 3004 	strb.w	r3, [sp, #4]
			RST_APP_vExecute_mcu_reset(mcu);
 10199a6:	9801      	ldr	r0, [sp, #4]
 10199a8:	4b08      	ldr	r3, [pc, #32]	; (10199cc <FLASH_fwu_reset+0x4c>)
 10199aa:	4798      	blx	r3
		}
		
		TIMER_start_ms_timer(SM_FWU_TIMER, FWU_TIMER, FLASH_fwu_reset);
 10199ac:	4a08      	ldr	r2, [pc, #32]	; (10199d0 <FLASH_fwu_reset+0x50>)
 10199ae:	4b09      	ldr	r3, [pc, #36]	; (10199d4 <FLASH_fwu_reset+0x54>)
 10199b0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 10199b4:	200e      	movs	r0, #14
	}
}
 10199b6:	b003      	add	sp, #12
 10199b8:	f85d eb04 	ldr.w	lr, [sp], #4
		TIMER_start_ms_timer(SM_FWU_TIMER, FWU_TIMER, FLASH_fwu_reset);
 10199bc:	4718      	bx	r3
 10199be:	bf00      	nop
 10199c0:	01008000 	.word	0x01008000
 10199c4:	20016ec8 	.word	0x20016ec8
 10199c8:	20016eec 	.word	0x20016eec
 10199cc:	010159f1 	.word	0x010159f1
 10199d0:	01019981 	.word	0x01019981
 10199d4:	0102ba8d 	.word	0x0102ba8d

010199d8 <FLASH_initialize>:
	pul_test_page = (uint32_t *) ul_test_page_addr;  
 10199d8:	4a03      	ldr	r2, [pc, #12]	; (10199e8 <FLASH_initialize+0x10>)
 10199da:	4904      	ldr	r1, [pc, #16]	; (10199ec <FLASH_initialize+0x14>)
 10199dc:	6011      	str	r1, [r2, #0]
    flash_init(FLASH_ACCESS_MODE_128, 6);
 10199de:	4b04      	ldr	r3, [pc, #16]	; (10199f0 <FLASH_initialize+0x18>)
 10199e0:	2106      	movs	r1, #6
 10199e2:	2000      	movs	r0, #0
 10199e4:	4718      	bx	r3
 10199e6:	bf00      	nop
 10199e8:	20000ad0 	.word	0x20000ad0
 10199ec:	01008000 	.word	0x01008000
 10199f0:	0102d9ad 	.word	0x0102d9ad

010199f4 <FLASH_boot_origin>:
	flash_lock( (uint32_t *)0x01000000,  (uint32_t *)0x01100000, 0, 0); 
 10199f4:	2300      	movs	r3, #0
{ 
 10199f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	flash_lock( (uint32_t *)0x01000000,  (uint32_t *)0x01100000, 0, 0); 
 10199fa:	461a      	mov	r2, r3
{ 
 10199fc:	4605      	mov	r5, r0
	flash_lock( (uint32_t *)0x01000000,  (uint32_t *)0x01100000, 0, 0); 
 10199fe:	4e17      	ldr	r6, [pc, #92]	; (1019a5c <FLASH_boot_origin+0x68>)
	pul_test_page  = (uint32_t *) BOOT_ORIGIN_ADDR;
 1019a00:	4c17      	ldr	r4, [pc, #92]	; (1019a60 <FLASH_boot_origin+0x6c>)
    flash_unlock(ul_test_page_addr, ul_test_page_addr + IFLASH_PAGE_SIZE - 1, 0, 0);  
 1019a02:	4f18      	ldr	r7, [pc, #96]	; (1019a64 <FLASH_boot_origin+0x70>)
 1019a04:	f8df 806c 	ldr.w	r8, [pc, #108]	; 1019a74 <FLASH_boot_origin+0x80>
	flash_lock( (uint32_t *)0x01000000,  (uint32_t *)0x01100000, 0, 0); 
 1019a08:	f04f 7188 	mov.w	r1, #17825792	; 0x1100000
 1019a0c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 1019a10:	47b0      	blx	r6
	pul_test_page  = (uint32_t *) BOOT_ORIGIN_ADDR;
 1019a12:	4b15      	ldr	r3, [pc, #84]	; (1019a68 <FLASH_boot_origin+0x74>)
 1019a14:	601c      	str	r4, [r3, #0]
    flash_unlock(ul_test_page_addr, ul_test_page_addr + IFLASH_PAGE_SIZE - 1, 0, 0);  
 1019a16:	2300      	movs	r3, #0
 1019a18:	461a      	mov	r2, r3
 1019a1a:	4639      	mov	r1, r7
 1019a1c:	4620      	mov	r0, r4
 1019a1e:	47c0      	blx	r8
   flash_erase_page(ul_test_page_addr,1);									  
 1019a20:	4620      	mov	r0, r4
 1019a22:	2101      	movs	r1, #1
 1019a24:	4b11      	ldr	r3, [pc, #68]	; (1019a6c <FLASH_boot_origin+0x78>)
    flash_write(ul_test_page_addr, ul_page_buffer, 4, 0);							  
 1019a26:	f8df 8050 	ldr.w	r8, [pc, #80]	; 1019a78 <FLASH_boot_origin+0x84>
   flash_erase_page(ul_test_page_addr,1);									  
 1019a2a:	4798      	blx	r3
	    ul_page_buffer[ul_idx] = origin;												
 1019a2c:	4b10      	ldr	r3, [pc, #64]	; (1019a70 <FLASH_boot_origin+0x7c>)
 1019a2e:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1019a7c <FLASH_boot_origin+0x88>
 1019a32:	701d      	strb	r5, [r3, #0]
 1019a34:	f04f 0e04 	mov.w	lr, #4
    flash_write(ul_test_page_addr, ul_page_buffer, 4, 0);							  
 1019a38:	4619      	mov	r1, r3
	    ul_page_buffer[ul_idx] = origin;												
 1019a3a:	705d      	strb	r5, [r3, #1]
 1019a3c:	709d      	strb	r5, [r3, #2]
 1019a3e:	70dd      	strb	r5, [r3, #3]
    flash_write(ul_test_page_addr, ul_page_buffer, 4, 0);							  
 1019a40:	4672      	mov	r2, lr
 1019a42:	4620      	mov	r0, r4
 1019a44:	2300      	movs	r3, #0
 1019a46:	f8cc e000 	str.w	lr, [ip]
 1019a4a:	47c0      	blx	r8
    flash_lock(ul_test_page_addr, ul_test_page_addr + IFLASH_PAGE_SIZE - 1, 0, 0); 	  
 1019a4c:	2300      	movs	r3, #0
 1019a4e:	4639      	mov	r1, r7
 1019a50:	4620      	mov	r0, r4
 1019a52:	46b4      	mov	ip, r6
 1019a54:	461a      	mov	r2, r3
}
 1019a56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    flash_lock(ul_test_page_addr, ul_test_page_addr + IFLASH_PAGE_SIZE - 1, 0, 0); 	  
 1019a5a:	4760      	bx	ip
 1019a5c:	0102dad9 	.word	0x0102dad9
 1019a60:	01008000 	.word	0x01008000
 1019a64:	010081ff 	.word	0x010081ff
 1019a68:	20000ad0 	.word	0x20000ad0
 1019a6c:	0102d9c5 	.word	0x0102d9c5
 1019a70:	20000ad4 	.word	0x20000ad4
 1019a74:	0102db35 	.word	0x0102db35
 1019a78:	0102da21 	.word	0x0102da21
 1019a7c:	200166a0 	.word	0x200166a0

01019a80 <FLASH_erase_image_sector>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
void FLASH_erase_image_sector(void) {
 1019a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	
  static uint32_t image_start_addr = IMAGE_APP_START_ADDR;
  
  flash_unlock(image_start_addr, image_start_addr + (TOTAL_IMAGE_SECTOR_SIZE) - 1, 0, 0);  
 1019a84:	4c0c      	ldr	r4, [pc, #48]	; (1019ab8 <FLASH_erase_image_sector+0x38>)
 1019a86:	4e0d      	ldr	r6, [pc, #52]	; (1019abc <FLASH_erase_image_sector+0x3c>)
 1019a88:	4f0d      	ldr	r7, [pc, #52]	; (1019ac0 <FLASH_erase_image_sector+0x40>)
  flash_erase_sector(image_start_addr );
 1019a8a:	4d0e      	ldr	r5, [pc, #56]	; (1019ac4 <FLASH_erase_image_sector+0x44>)
  flash_unlock(image_start_addr, image_start_addr + (TOTAL_IMAGE_SECTOR_SIZE) - 1, 0, 0);  
 1019a8c:	2300      	movs	r3, #0
 1019a8e:	4631      	mov	r1, r6
 1019a90:	461a      	mov	r2, r3
 1019a92:	4620      	mov	r0, r4
 1019a94:	47b8      	blx	r7
  flash_erase_sector(image_start_addr );
 1019a96:	4620      	mov	r0, r4
 1019a98:	47a8      	blx	r5
  flash_erase_sector(image_start_addr + (0x10000));
 1019a9a:	f04f 7083 	mov.w	r0, #17170432	; 0x1060000
 1019a9e:	47a8      	blx	r5
  flash_erase_sector(image_start_addr + (0x20000));
 1019aa0:	4809      	ldr	r0, [pc, #36]	; (1019ac8 <FLASH_erase_image_sector+0x48>)
 1019aa2:	47a8      	blx	r5
  
  flash_lock(image_start_addr, image_start_addr + TOTAL_IMAGE_SECTOR_SIZE - 1, 0, 0);   
 1019aa4:	4620      	mov	r0, r4
 1019aa6:	4c09      	ldr	r4, [pc, #36]	; (1019acc <FLASH_erase_image_sector+0x4c>)
 1019aa8:	2300      	movs	r3, #0
 1019aaa:	4631      	mov	r1, r6
 1019aac:	46a4      	mov	ip, r4
 1019aae:	461a      	mov	r2, r3
}
 1019ab0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  flash_lock(image_start_addr, image_start_addr + TOTAL_IMAGE_SECTOR_SIZE - 1, 0, 0);   
 1019ab4:	4760      	bx	ip
 1019ab6:	bf00      	nop
 1019ab8:	01050000 	.word	0x01050000
 1019abc:	0107ffff 	.word	0x0107ffff
 1019ac0:	0102db35 	.word	0x0102db35
 1019ac4:	0102d9fd 	.word	0x0102d9fd
 1019ac8:	01070000 	.word	0x01070000
 1019acc:	0102dad9 	.word	0x0102dad9

01019ad0 <FLASH_fwu_boot_mode>:
 * \retval void
 *
 ******************************************************************************
 */
void FLASH_fwu_boot_mode(void)
{
 1019ad0:	b510      	push	{r4, lr}
	FLASH_boot_origin(0xAA);
 1019ad2:	4b03      	ldr	r3, [pc, #12]	; (1019ae0 <FLASH_fwu_boot_mode+0x10>)
 1019ad4:	20aa      	movs	r0, #170	; 0xaa
 1019ad6:	4798      	blx	r3
	SM_APP_vFwup_mcu_restart();
 1019ad8:	4b02      	ldr	r3, [pc, #8]	; (1019ae4 <FLASH_fwu_boot_mode+0x14>)
}		
 1019ada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SM_APP_vFwup_mcu_restart();
 1019ade:	4718      	bx	r3
 1019ae0:	010199f5 	.word	0x010199f5
 1019ae4:	0101f2f9 	.word	0x0101f2f9

01019ae8 <GRAL_APP_bSt_1_restore_default_values>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool GRAL_APP_bSt_1_restore_default_values(void) {
 1019ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
	
	uint8_t data_1[32];
	
	SM_APP_vChange_table_state(ST_1_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
 1019aea:	21ff      	movs	r1, #255	; 0xff
bool GRAL_APP_bSt_1_restore_default_values(void) {
 1019aec:	b089      	sub	sp, #36	; 0x24
	SM_APP_vChange_table_state(ST_1_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
 1019aee:	4f28      	ldr	r7, [pc, #160]	; (1019b90 <GRAL_APP_bSt_1_restore_default_values+0xa8>)
	
	memset(&data_1, 0, 4);
	strcpy((char*)&data_1, MANUFACTURER_NAME);
	EEPROM_writer( ST_1_MANUFACTURER_ADDR, &data_1, 4);
 1019af0:	4c28      	ldr	r4, [pc, #160]	; (1019b94 <GRAL_APP_bSt_1_restore_default_values+0xac>)

	memset(data_1, 0, sizeof(data_1));
 1019af2:	4d29      	ldr	r5, [pc, #164]	; (1019b98 <GRAL_APP_bSt_1_restore_default_values+0xb0>)
	SM_APP_vChange_table_state(ST_1_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
 1019af4:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 1019af8:	47b8      	blx	r7
	strcpy((char*)&data_1, MANUFACTURER_NAME);
 1019afa:	4b28      	ldr	r3, [pc, #160]	; (1019b9c <GRAL_APP_bSt_1_restore_default_values+0xb4>)
 1019afc:	e893 0003 	ldmia.w	r3, {r0, r1}
	memset(data_1, 0, sizeof(data_1));
 1019b00:	2620      	movs	r6, #32
	strcpy((char*)&data_1, MANUFACTURER_NAME);
 1019b02:	9000      	str	r0, [sp, #0]
 1019b04:	f88d 1004 	strb.w	r1, [sp, #4]
	EEPROM_writer( ST_1_MANUFACTURER_ADDR, &data_1, 4);
 1019b08:	2204      	movs	r2, #4
 1019b0a:	4669      	mov	r1, sp
 1019b0c:	f240 6003 	movw	r0, #1539	; 0x603
 1019b10:	47a0      	blx	r4
	memset(data_1, 0, sizeof(data_1));
 1019b12:	4632      	mov	r2, r6
 1019b14:	4668      	mov	r0, sp
 1019b16:	2100      	movs	r1, #0
 1019b18:	47a8      	blx	r5
	strcpy((char*)&data_1, ED_MODEL);
 1019b1a:	4b21      	ldr	r3, [pc, #132]	; (1019ba0 <GRAL_APP_bSt_1_restore_default_values+0xb8>)
 1019b1c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 1019b20:	466b      	mov	r3, sp
 1019b22:	c303      	stmia	r3!, {r0, r1}
	EEPROM_writer( ST_1_ED_MODEL_ADDR, &data_1, 8);
 1019b24:	4669      	mov	r1, sp
	strcpy((char*)&data_1, ED_MODEL);
 1019b26:	701a      	strb	r2, [r3, #0]
	EEPROM_writer( ST_1_ED_MODEL_ADDR, &data_1, 8);
 1019b28:	f240 6007 	movw	r0, #1543	; 0x607
 1019b2c:	2208      	movs	r2, #8
 1019b2e:	47a0      	blx	r4
	
	memset(data_1, 0, sizeof(data_1));
 1019b30:	4632      	mov	r2, r6
 1019b32:	4668      	mov	r0, sp
 1019b34:	2100      	movs	r1, #0
 1019b36:	47a8      	blx	r5
	EEPROM_writer( ST_1_HW_VERSION_NUMBER_ADDR, &data_1, 1);
 1019b38:	4669      	mov	r1, sp
 1019b3a:	2201      	movs	r2, #1
 1019b3c:	f240 600f 	movw	r0, #1551	; 0x60f
 1019b40:	47a0      	blx	r4
	EEPROM_writer( ST_1_HW_REVISION_NUMBER_ADDR, &data_1, 1);
 1019b42:	4669      	mov	r1, sp
 1019b44:	2201      	movs	r2, #1
 1019b46:	f44f 60c2 	mov.w	r0, #1552	; 0x610
 1019b4a:	47a0      	blx	r4
	data_1[0] = FW_VERSION_NUMBER;
	EEPROM_writer( ST_1_FW_VERSION_NUMBER_ADDR, &data_1[0], 1);
	data_1[0] = FW_REVISION_NUMBER;
	EEPROM_writer( ST_1_FW_REVISION_NUMBER_ADDR, &data_1[0], 1);
	
	strcpy((char*)&data_1, "0000000000000000");
 1019b4c:	4e15      	ldr	r6, [pc, #84]	; (1019ba4 <GRAL_APP_bSt_1_restore_default_values+0xbc>)
	EEPROM_writer( ST_1_FW_VERSION_NUMBER_ADDR, &data_1[0], 1);
 1019b4e:	4669      	mov	r1, sp
	data_1[0] = FW_VERSION_NUMBER;
 1019b50:	2302      	movs	r3, #2
	EEPROM_writer( ST_1_FW_VERSION_NUMBER_ADDR, &data_1[0], 1);
 1019b52:	2201      	movs	r2, #1
 1019b54:	f240 6011 	movw	r0, #1553	; 0x611
	data_1[0] = FW_VERSION_NUMBER;
 1019b58:	f88d 3000 	strb.w	r3, [sp]
	EEPROM_writer( ST_1_FW_VERSION_NUMBER_ADDR, &data_1[0], 1);
 1019b5c:	47a0      	blx	r4
	EEPROM_writer( ST_1_FW_REVISION_NUMBER_ADDR, &data_1[0], 1);
 1019b5e:	4669      	mov	r1, sp
	data_1[0] = FW_REVISION_NUMBER;
 1019b60:	2300      	movs	r3, #0
	EEPROM_writer( ST_1_FW_REVISION_NUMBER_ADDR, &data_1[0], 1);
 1019b62:	2201      	movs	r2, #1
 1019b64:	f240 6012 	movw	r0, #1554	; 0x612
	data_1[0] = FW_REVISION_NUMBER;
 1019b68:	f88d 3000 	strb.w	r3, [sp]
	EEPROM_writer( ST_1_FW_REVISION_NUMBER_ADDR, &data_1[0], 1);
 1019b6c:	47a0      	blx	r4
	strcpy((char*)&data_1, "0000000000000000");
 1019b6e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 1019b70:	466d      	mov	r5, sp
 1019b72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 1019b74:	6833      	ldr	r3, [r6, #0]
 1019b76:	702b      	strb	r3, [r5, #0]
	EEPROM_writer( ST_1_SERIAL_NUMBER_ADDR, &data_1[0], 16);
 1019b78:	4669      	mov	r1, sp
 1019b7a:	2210      	movs	r2, #16
 1019b7c:	f240 6013 	movw	r0, #1555	; 0x613
 1019b80:	47a0      	blx	r4
	
	SM_APP_vChange_table_state(ST_1_PROG_STATE_ADDR, C1219_TABLE_FULL);
 1019b82:	2145      	movs	r1, #69	; 0x45
 1019b84:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 1019b88:	47b8      	blx	r7
	
	return true;
}
 1019b8a:	2001      	movs	r0, #1
 1019b8c:	b009      	add	sp, #36	; 0x24
 1019b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1019b90:	010203e9 	.word	0x010203e9
 1019b94:	01017509 	.word	0x01017509
 1019b98:	01030b71 	.word	0x01030b71
 1019b9c:	01031594 	.word	0x01031594
 1019ba0:	0103159c 	.word	0x0103159c
 1019ba4:	010318fc 	.word	0x010318fc

01019ba8 <GRAL_APP_bLoad_st_1>:
bool GRAL_APP_bLoad_st_1(void) {
 1019ba8:	b508      	push	{r3, lr}
	if ( SM_APP_ucGet_table_state(ST_1_PROG_STATE_ADDR) != C1219_TABLE_FULL ) {
 1019baa:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 1019bae:	4b04      	ldr	r3, [pc, #16]	; (1019bc0 <GRAL_APP_bLoad_st_1+0x18>)
 1019bb0:	4798      	blx	r3
 1019bb2:	2845      	cmp	r0, #69	; 0x45
 1019bb4:	d001      	beq.n	1019bba <GRAL_APP_bLoad_st_1+0x12>
		GRAL_APP_bSt_1_restore_default_values();
 1019bb6:	4b03      	ldr	r3, [pc, #12]	; (1019bc4 <GRAL_APP_bLoad_st_1+0x1c>)
 1019bb8:	4798      	blx	r3
}
 1019bba:	2001      	movs	r0, #1
 1019bbc:	bd08      	pop	{r3, pc}
 1019bbe:	bf00      	nop
 1019bc0:	010203cd 	.word	0x010203cd
 1019bc4:	01019ae9 	.word	0x01019ae9

01019bc8 <GRAL_APP_bSt_1_execute_table_reading>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool GRAL_APP_bSt_1_execute_table_reading(uint8_t *table_buffer) {
 1019bc8:	b510      	push	{r4, lr}
	
	bool is_ok = false;
	
	delay_ms(10);
 1019bca:	4b0b      	ldr	r3, [pc, #44]	; (1019bf8 <GRAL_APP_bSt_1_execute_table_reading+0x30>)
bool GRAL_APP_bSt_1_execute_table_reading(uint8_t *table_buffer) {
 1019bcc:	4604      	mov	r4, r0
	delay_ms(10);
 1019bce:	480b      	ldr	r0, [pc, #44]	; (1019bfc <GRAL_APP_bSt_1_execute_table_reading+0x34>)
 1019bd0:	4798      	blx	r3
	EEPROM_reader( ST_1_START_ADDR, &table_buffer[0], ST_1_SIZE);
 1019bd2:	4621      	mov	r1, r4
 1019bd4:	2220      	movs	r2, #32
 1019bd6:	4b0a      	ldr	r3, [pc, #40]	; (1019c00 <GRAL_APP_bSt_1_execute_table_reading+0x38>)
 1019bd8:	f240 6003 	movw	r0, #1539	; 0x603
 1019bdc:	4798      	blx	r3
	memcpy((char*)&table_buffer[0], MANUFACTURER_NAME, 4);
 1019bde:	4a09      	ldr	r2, [pc, #36]	; (1019c04 <GRAL_APP_bSt_1_execute_table_reading+0x3c>)
	memcpy((char*)&table_buffer[4], ED_MODEL, 4);
 1019be0:	4b09      	ldr	r3, [pc, #36]	; (1019c08 <GRAL_APP_bSt_1_execute_table_reading+0x40>)
	memcpy((char*)&table_buffer[0], MANUFACTURER_NAME, 4);
 1019be2:	6810      	ldr	r0, [r2, #0]
 1019be4:	6020      	str	r0, [r4, #0]
	table_buffer[14] = (uint8_t)FW_VERSION_NUMBER;
 1019be6:	2202      	movs	r2, #2
	memcpy((char*)&table_buffer[4], ED_MODEL, 4);
 1019be8:	6818      	ldr	r0, [r3, #0]
 1019bea:	6060      	str	r0, [r4, #4]
	table_buffer[15] = (uint8_t)FW_REVISION_NUMBER;
 1019bec:	2300      	movs	r3, #0
	table_buffer[14] = (uint8_t)FW_VERSION_NUMBER;
 1019bee:	73a2      	strb	r2, [r4, #14]
	table_buffer[15] = (uint8_t)FW_REVISION_NUMBER;
 1019bf0:	73e3      	strb	r3, [r4, #15]
	
	is_ok = true;
	
	return is_ok;
}
 1019bf2:	2001      	movs	r0, #1
 1019bf4:	bd10      	pop	{r4, pc}
 1019bf6:	bf00      	nop
 1019bf8:	20000001 	.word	0x20000001
 1019bfc:	00011db7 	.word	0x00011db7
 1019c00:	01017511 	.word	0x01017511
 1019c04:	01031594 	.word	0x01031594
 1019c08:	0103159c 	.word	0x0103159c

01019c0c <GRAL_APP_bSt_1_execute_table_writing>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool GRAL_APP_bSt_1_execute_table_writing(uint8_t *table_buffer) {
 1019c0c:	b508      	push	{r3, lr}
	
	bool is_ok = false;

	EEPROM_writer( ST_1_START_ADDR, &table_buffer[0], ST_1_SIZE);
 1019c0e:	4601      	mov	r1, r0
 1019c10:	2220      	movs	r2, #32
 1019c12:	4b03      	ldr	r3, [pc, #12]	; (1019c20 <GRAL_APP_bSt_1_execute_table_writing+0x14>)
 1019c14:	f240 6003 	movw	r0, #1539	; 0x603
 1019c18:	4798      	blx	r3
	
	is_ok = true;
	
	return is_ok;	
}
 1019c1a:	2001      	movs	r0, #1
 1019c1c:	bd08      	pop	{r3, pc}
 1019c1e:	bf00      	nop
 1019c20:	01017509 	.word	0x01017509

01019c24 <GRAL_APP_usSt_1_get_size>:
 ******************************************************************************
 */
uint16_t GRAL_APP_usSt_1_get_size(void) {

	return (uint16_t)ST_1_SIZE;
}
 1019c24:	2020      	movs	r0, #32
 1019c26:	4770      	bx	lr

01019c28 <GRAL_APP_bSt_2_execute_table_reading>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool GRAL_APP_bSt_2_execute_table_reading(uint8_t *table_buffer) {
 1019c28:	b5f0      	push	{r4, r5, r6, r7, lr}
	
	memcpy(&table_buffer[k], E_KH, 6);
	k += 6;
	
	table_buffer[k++] = E_INPUT_SCALAR;
	memcpy(&table_buffer[k], E_ED_CONFIG, 5);
 1019c2a:	4c17      	ldr	r4, [pc, #92]	; (1019c88 <GRAL_APP_bSt_2_execute_table_reading+0x60>)
	k += 5;
	
	table_buffer[k++] = (uint8_t) (E_ELEMENTS);
	table_buffer[k++] = (uint8_t)(E_ELEMENTS  >> 8);
	table_buffer[k++] = E_VOLTS;
	memcpy(&table_buffer[k], E_CLASS_MAX_AMPS, 6);
 1019c2c:	4917      	ldr	r1, [pc, #92]	; (1019c8c <GRAL_APP_bSt_2_execute_table_reading+0x64>)
	k += 6;
	
	memcpy(&table_buffer[k], E_TA, 6);
 1019c2e:	4a18      	ldr	r2, [pc, #96]	; (1019c90 <GRAL_APP_bSt_2_execute_table_reading+0x68>)
	memcpy(&table_buffer[k], E_ED_CONFIG, 5);
 1019c30:	7925      	ldrb	r5, [r4, #4]
	memcpy(&table_buffer[k], E_CLASS_MAX_AMPS, 6);
 1019c32:	f8b1 c004 	ldrh.w	ip, [r1, #4]
	memcpy(&table_buffer[k], E_TA, 6);
 1019c36:	f8b2 e004 	ldrh.w	lr, [r2, #4]
bool GRAL_APP_bSt_2_execute_table_reading(uint8_t *table_buffer) {
 1019c3a:	4603      	mov	r3, r0
	memcpy(&table_buffer[k], E_ED_CONFIG, 5);
 1019c3c:	6820      	ldr	r0, [r4, #0]
 1019c3e:	f8c3 000d 	str.w	r0, [r3, #13]
	memcpy(&table_buffer[k], E_CLASS_MAX_AMPS, 6);
 1019c42:	6808      	ldr	r0, [r1, #0]
 1019c44:	f8c3 0015 	str.w	r0, [r3, #21]
	memcpy(&table_buffer[k], E_TA, 6);
 1019c48:	6810      	ldr	r0, [r2, #0]
	memcpy(&table_buffer[k], E_ED_CONFIG, 5);
 1019c4a:	745d      	strb	r5, [r3, #17]
	memcpy(&table_buffer[k], E_KH, 6);
 1019c4c:	2220      	movs	r2, #32
 1019c4e:	2133      	movs	r1, #51	; 0x33
 1019c50:	2530      	movs	r5, #48	; 0x30
 1019c52:	242e      	movs	r4, #46	; 0x2e
	table_buffer[k++] = (uint8_t) (E_ELEMENTS);
 1019c54:	274c      	movs	r7, #76	; 0x4c
	table_buffer[k++] = (uint8_t)(E_ELEMENTS  >> 8);
 1019c56:	2602      	movs	r6, #2
	memcpy(&table_buffer[k], E_TA, 6);
 1019c58:	f8c3 001b 	str.w	r0, [r3, #27]
	table_buffer[k++] = E_INPUT_SCALAR;
 1019c5c:	2001      	movs	r0, #1
	memcpy(&table_buffer[k], E_CLASS_MAX_AMPS, 6);
 1019c5e:	f8a3 c019 	strh.w	ip, [r3, #25]
	memcpy(&table_buffer[k], E_TA, 6);
 1019c62:	f8a3 e01f 	strh.w	lr, [r3, #31]
	table_buffer[k++] = (uint8_t) (E_ELEMENTS);
 1019c66:	749f      	strb	r7, [r3, #18]
	table_buffer[k++] = (uint8_t)(E_ELEMENTS  >> 8);
 1019c68:	74de      	strb	r6, [r3, #19]
	memcpy(&table_buffer[k], E_KH, 6);
 1019c6a:	701d      	strb	r5, [r3, #0]
	memcpy(&table_buffer[k], E_KH, 6);
 1019c6c:	719d      	strb	r5, [r3, #6]
	memcpy(&table_buffer[k], E_KH, 6);
 1019c6e:	705c      	strb	r4, [r3, #1]
	memcpy(&table_buffer[k], E_KH, 6);
 1019c70:	71dc      	strb	r4, [r3, #7]
	memcpy(&table_buffer[k], E_KH, 6);
 1019c72:	7099      	strb	r1, [r3, #2]
	memcpy(&table_buffer[k], E_KH, 6);
 1019c74:	7219      	strb	r1, [r3, #8]
	table_buffer[k++] = E_VOLTS;
 1019c76:	7519      	strb	r1, [r3, #20]
	memcpy(&table_buffer[k], E_KH, 6);
 1019c78:	70da      	strb	r2, [r3, #3]
 1019c7a:	711a      	strb	r2, [r3, #4]
 1019c7c:	715a      	strb	r2, [r3, #5]
	memcpy(&table_buffer[k], E_KH, 6);
 1019c7e:	725a      	strb	r2, [r3, #9]
 1019c80:	729a      	strb	r2, [r3, #10]
 1019c82:	72da      	strb	r2, [r3, #11]
	table_buffer[k++] = E_INPUT_SCALAR;
 1019c84:	7318      	strb	r0, [r3, #12]
	k += 6;
	
	is_ok = true;
	
	return is_ok;
}
 1019c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1019c88:	010315a8 	.word	0x010315a8
 1019c8c:	010315b0 	.word	0x010315b0
 1019c90:	010315b8 	.word	0x010315b8

01019c94 <GRAL_APP_usSt_2_get_size>:
 ******************************************************************************
 */
uint16_t GRAL_APP_usSt_2_get_size(void) {

	return (uint16_t)ST_2_SIZE;
}
 1019c94:	2021      	movs	r0, #33	; 0x21
 1019c96:	4770      	bx	lr

01019c98 <GRAL_APP_bSt_3_restore_default_values>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool GRAL_APP_bSt_3_restore_default_values(void) {
 1019c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 1019c9a:	b087      	sub	sp, #28
	
	bool is_ok = false;
	ST_3_TYPE st_3_temp;
	
	memset(&st_3_temp, 0, sizeof(st_3_temp));
 1019c9c:	2300      	movs	r3, #0
	st_3_temp.ed_mode = METERING_FLAG_bm;
 1019c9e:	2501      	movs	r5, #1
	memset(&st_3_temp, 0, sizeof(st_3_temp));
 1019ca0:	9301      	str	r3, [sp, #4]
 1019ca2:	9302      	str	r3, [sp, #8]
 1019ca4:	9303      	str	r3, [sp, #12]
 1019ca6:	9304      	str	r3, [sp, #16]
 1019ca8:	9305      	str	r3, [sp, #20]
	st_3_temp.ed_mode = METERING_FLAG_bm;
 1019caa:	f88d 5004 	strb.w	r5, [sp, #4]
	
	is_ok = GRAL_APP_bSt_3_validate_data(&st_3_temp);
	
	st_3 = st_3_temp;
 1019cae:	ac01      	add	r4, sp, #4
 1019cb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 1019cb2:	4c14      	ldr	r4, [pc, #80]	; (1019d04 <GRAL_APP_bSt_3_restore_default_values+0x6c>)
 * \retval void
 ******************************************************************************
 */
void GRAL_APP_vSt_3_write_eeprom_values(ST_3_TYPE *st_3_structure)
{
	SM_APP_vChange_table_state(ST_3_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
 1019cb4:	4f14      	ldr	r7, [pc, #80]	; (1019d08 <GRAL_APP_bSt_3_restore_default_values+0x70>)
	st_3 = st_3_temp;
 1019cb6:	6020      	str	r0, [r4, #0]
 1019cb8:	2000      	movs	r0, #0
 1019cba:	6061      	str	r1, [r4, #4]
 1019cbc:	6120      	str	r0, [r4, #16]
	SM_APP_vChange_table_state(ST_3_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
 1019cbe:	21ff      	movs	r1, #255	; 0xff
 1019cc0:	f244 0098 	movw	r0, #16536	; 0x4098
	st_3 = st_3_temp;
 1019cc4:	60e3      	str	r3, [r4, #12]
	
	EEPROM_writer( ST_3_ED_MODE_ADDR, &st_3_structure->ed_mode, 1 );
 1019cc6:	4e11      	ldr	r6, [pc, #68]	; (1019d0c <GRAL_APP_bSt_3_restore_default_values+0x74>)
	st_3 = st_3_temp;
 1019cc8:	60a2      	str	r2, [r4, #8]
	SM_APP_vChange_table_state(ST_3_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
 1019cca:	47b8      	blx	r7
	EEPROM_writer( ST_3_ED_MODE_ADDR, &st_3_structure->ed_mode, 1 );
 1019ccc:	462a      	mov	r2, r5
 1019cce:	4621      	mov	r1, r4
 1019cd0:	f244 0099 	movw	r0, #16537	; 0x4099
 1019cd4:	47b0      	blx	r6
	EEPROM_writer( ST_3_ED_STD_STATUS1_ADDR, &st_3_structure->ed_std_status1, 2 );
 1019cd6:	1ca1      	adds	r1, r4, #2
 1019cd8:	2202      	movs	r2, #2
 1019cda:	f244 009a 	movw	r0, #16538	; 0x409a
 1019cde:	47b0      	blx	r6
	EEPROM_writer( ST_3_ED_STD_STATUS1_ADDR, &st_3_structure->ed_std_status2, 1 );
 1019ce0:	462a      	mov	r2, r5
 1019ce2:	1d21      	adds	r1, r4, #4
 1019ce4:	f244 009a 	movw	r0, #16538	; 0x409a
 1019ce8:	47b0      	blx	r6
	EEPROM_writer( ST_3_ED_MFG_STATUS_ADDR, &st_3_structure->ed_mfg_status, sizeof(st_3_structure->ed_mfg_status) );
 1019cea:	1d61      	adds	r1, r4, #5
 1019cec:	220f      	movs	r2, #15
 1019cee:	f244 009d 	movw	r0, #16541	; 0x409d
 1019cf2:	47b0      	blx	r6
	
	SM_APP_vChange_table_state(ST_3_PROG_STATE_ADDR, C1219_TABLE_FULL);
 1019cf4:	2145      	movs	r1, #69	; 0x45
 1019cf6:	f244 0098 	movw	r0, #16536	; 0x4098
 1019cfa:	47b8      	blx	r7
}
 1019cfc:	4628      	mov	r0, r5
 1019cfe:	b007      	add	sp, #28
 1019d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1019d02:	bf00      	nop
 1019d04:	200166a4 	.word	0x200166a4
 1019d08:	010203e9 	.word	0x010203e9
 1019d0c:	01017509 	.word	0x01017509

01019d10 <GRAL_APP_bSt_3_refresh_ram>:
bool GRAL_APP_bSt_3_refresh_ram(void) {
 1019d10:	b530      	push	{r4, r5, lr}
 1019d12:	b087      	sub	sp, #28
	EEPROM_reader(ST_3_ED_MODE_ADDR, &st_3_structure->ed_mode, 1);
 1019d14:	4c11      	ldr	r4, [pc, #68]	; (1019d5c <GRAL_APP_bSt_3_refresh_ram+0x4c>)
			st_3 = st_3_temp;
 1019d16:	4d12      	ldr	r5, [pc, #72]	; (1019d60 <GRAL_APP_bSt_3_refresh_ram+0x50>)
	EEPROM_reader(ST_3_ED_MODE_ADDR, &st_3_structure->ed_mode, 1);
 1019d18:	a901      	add	r1, sp, #4
 1019d1a:	2201      	movs	r2, #1
 1019d1c:	f244 0099 	movw	r0, #16537	; 0x4099
 1019d20:	47a0      	blx	r4
	EEPROM_reader(ST_3_ED_STD_STATUS1_ADDR, &st_3_structure->ed_std_status1, 2);
 1019d22:	f10d 0106 	add.w	r1, sp, #6
 1019d26:	2202      	movs	r2, #2
 1019d28:	f244 009a 	movw	r0, #16538	; 0x409a
 1019d2c:	47a0      	blx	r4
	EEPROM_reader(ST_3_ED_STD_STATUS2_ADDR, &st_3_structure->ed_std_status2, 1);
 1019d2e:	a902      	add	r1, sp, #8
 1019d30:	2201      	movs	r2, #1
 1019d32:	f244 009c 	movw	r0, #16540	; 0x409c
 1019d36:	47a0      	blx	r4
	EEPROM_reader(ST_3_ED_MFG_STATUS_ADDR, &st_3_structure->ed_mfg_status, DIM_MFG_STATUS_USED);
 1019d38:	f10d 0109 	add.w	r1, sp, #9
 1019d3c:	220f      	movs	r2, #15
 1019d3e:	f244 009d 	movw	r0, #16541	; 0x409d
 1019d42:	47a0      	blx	r4
			st_3 = st_3_temp;
 1019d44:	ac01      	add	r4, sp, #4
 1019d46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 1019d48:	6028      	str	r0, [r5, #0]
 1019d4a:	6820      	ldr	r0, [r4, #0]
 1019d4c:	6128      	str	r0, [r5, #16]
}
 1019d4e:	2001      	movs	r0, #1
			st_3 = st_3_temp;
 1019d50:	6069      	str	r1, [r5, #4]
 1019d52:	60aa      	str	r2, [r5, #8]
 1019d54:	60eb      	str	r3, [r5, #12]
}
 1019d56:	b007      	add	sp, #28
 1019d58:	bd30      	pop	{r4, r5, pc}
 1019d5a:	bf00      	nop
 1019d5c:	01017511 	.word	0x01017511
 1019d60:	200166a4 	.word	0x200166a4

01019d64 <GRAL_APP_bLoad_st_3>:
bool GRAL_APP_bLoad_st_3(void) {
 1019d64:	b510      	push	{r4, lr}
	if ( SM_APP_ucGet_table_state(ST_3_PROG_STATE_ADDR) != C1219_TABLE_FULL ) {
 1019d66:	f244 0098 	movw	r0, #16536	; 0x4098
 1019d6a:	4b06      	ldr	r3, [pc, #24]	; (1019d84 <GRAL_APP_bLoad_st_3+0x20>)
 1019d6c:	4798      	blx	r3
 1019d6e:	2845      	cmp	r0, #69	; 0x45
 1019d70:	d003      	beq.n	1019d7a <GRAL_APP_bLoad_st_3+0x16>
		is_ok = GRAL_APP_bSt_3_restore_default_values();
 1019d72:	4b05      	ldr	r3, [pc, #20]	; (1019d88 <GRAL_APP_bLoad_st_3+0x24>)
}
 1019d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		is_ok = GRAL_APP_bSt_3_restore_default_values();
 1019d78:	4718      	bx	r3
		is_ok = GRAL_APP_bSt_3_refresh_ram();
 1019d7a:	4b04      	ldr	r3, [pc, #16]	; (1019d8c <GRAL_APP_bLoad_st_3+0x28>)
}
 1019d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		is_ok = GRAL_APP_bSt_3_refresh_ram();
 1019d80:	4718      	bx	r3
 1019d82:	bf00      	nop
 1019d84:	010203cd 	.word	0x010203cd
 1019d88:	01019c99 	.word	0x01019c99
 1019d8c:	01019d11 	.word	0x01019d11

01019d90 <GRAL_APP_bSt_3_execute_table_reading>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool GRAL_APP_bSt_3_execute_table_reading(uint8_t *table_buffer) {
 1019d90:	b430      	push	{r4, r5}
	
	bool is_ok = false;
	uint8_t k = 0;
	
	table_buffer[k++] = st_3.ed_mode;
 1019d92:	4b0e      	ldr	r3, [pc, #56]	; (1019dcc <GRAL_APP_bSt_3_execute_table_reading+0x3c>)
 1019d94:	781a      	ldrb	r2, [r3, #0]
 1019d96:	7002      	strb	r2, [r0, #0]
	st_3.ed_std_status1 &= ED_STD_STATUS1_SUPPORTED_FLAGS_bm;
 1019d98:	8859      	ldrh	r1, [r3, #2]
 1019d9a:	f642 42b3 	movw	r2, #11443	; 0x2cb3
 1019d9e:	400a      	ands	r2, r1
 1019da0:	805a      	strh	r2, [r3, #2]
	table_buffer[k++] = (uint8_t)(st_3.ed_std_status1 >> 0);
 1019da2:	7042      	strb	r2, [r0, #1]
	table_buffer[k++] = (uint8_t)(st_3.ed_std_status1 >> 8);
 1019da4:	885a      	ldrh	r2, [r3, #2]
 1019da6:	0a12      	lsrs	r2, r2, #8
 1019da8:	7082      	strb	r2, [r0, #2]
	table_buffer[k++] = st_3.ed_std_status2;
 1019daa:	791a      	ldrb	r2, [r3, #4]
 1019dac:	70c2      	strb	r2, [r0, #3]
	memcpy( &table_buffer[k], &st_3.ed_mfg_status, sizeof(st_3.ed_mfg_status) );
 1019dae:	f853 5f05 	ldr.w	r5, [r3, #5]!
 1019db2:	685c      	ldr	r4, [r3, #4]
 1019db4:	6899      	ldr	r1, [r3, #8]
 1019db6:	60c1      	str	r1, [r0, #12]
 1019db8:	6045      	str	r5, [r0, #4]
 1019dba:	6084      	str	r4, [r0, #8]
 1019dbc:	8999      	ldrh	r1, [r3, #12]
 1019dbe:	7b9b      	ldrb	r3, [r3, #14]
 1019dc0:	7483      	strb	r3, [r0, #18]
 1019dc2:	8201      	strh	r1, [r0, #16]
// 	NIC_APP_vDeassert_attention_request();
	
	is_ok = true;
	
	return is_ok;
}
 1019dc4:	bc30      	pop	{r4, r5}
 1019dc6:	2001      	movs	r0, #1
 1019dc8:	4770      	bx	lr
 1019dca:	bf00      	nop
 1019dcc:	200166a4 	.word	0x200166a4

01019dd0 <GRAL_APP_usSt_3_get_size>:
 ******************************************************************************
 */
uint16_t GRAL_APP_usSt_3_get_size(void) {

	return 	(uint16_t)ST_3_SIZE;
}
 1019dd0:	2013      	movs	r0, #19
 1019dd2:	4770      	bx	lr

01019dd4 <GRAL_APP_bSt_6_restore_default_values>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool GRAL_APP_bSt_6_restore_default_values(void) {
 1019dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	
	SM_APP_vChange_table_state(ST_6_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
	
	memset(&data, 0, 4);
	
	strcpy((char*)&data, "                    ");
 1019dd8:	4e5a      	ldr	r6, [pc, #360]	; (1019f44 <GRAL_APP_bSt_6_restore_default_values+0x170>)
	SM_APP_vChange_table_state(ST_6_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
 1019dda:	f8df 917c 	ldr.w	r9, [pc, #380]	; 1019f58 <GRAL_APP_bSt_6_restore_default_values+0x184>
	EEPROM_writer( ST_6_OWNER_NAME_ADDR, &data, 20);
 1019dde:	4c5a      	ldr	r4, [pc, #360]	; (1019f48 <GRAL_APP_bSt_6_restore_default_values+0x174>)
	EEPROM_writer( ST_6_ELECT_ADDR_ADDR, &data, 20);
	EEPROM_writer( ST_6_DEVICE_ID_ADDR, &data, 20);
	EEPROM_writer( ST_6_UTIL_SER_NO_ADDR, &data, 20);
	EEPROM_writer( ST_6_CUSTOMER_ID_ADDR, &data, 20);
	
	memset(&data, 0, sizeof(data));
 1019de0:	f8df a178 	ldr.w	sl, [pc, #376]	; 1019f5c <GRAL_APP_bSt_6_restore_default_values+0x188>
bool GRAL_APP_bSt_6_restore_default_values(void) {
 1019de4:	b088      	sub	sp, #32
	SM_APP_vChange_table_state(ST_6_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
 1019de6:	21ff      	movs	r1, #255	; 0xff
 1019de8:	f240 6033 	movw	r0, #1587	; 0x633
 1019dec:	47c8      	blx	r9
	strcpy((char*)&data, "                    ");
 1019dee:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 1019df0:	466d      	mov	r5, sp
 1019df2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 1019df4:	e896 0003 	ldmia.w	r6, {r0, r1}
 1019df8:	f845 0b04 	str.w	r0, [r5], #4
	EEPROM_writer( ST_6_OWNER_NAME_ADDR, &data, 20);
 1019dfc:	2214      	movs	r2, #20
	strcpy((char*)&data, "                    ");
 1019dfe:	7029      	strb	r1, [r5, #0]
	EEPROM_writer( ST_6_OWNER_NAME_ADDR, &data, 20);
 1019e00:	f240 6036 	movw	r0, #1590	; 0x636
 1019e04:	4669      	mov	r1, sp
 1019e06:	47a0      	blx	r4
	EEPROM_writer( ST_6_UTILITY_DIV_ADDR, &data, 20);
 1019e08:	4669      	mov	r1, sp
 1019e0a:	2214      	movs	r2, #20
 1019e0c:	f240 604a 	movw	r0, #1610	; 0x64a
 1019e10:	47a0      	blx	r4
	EEPROM_writer( ST_6_SERVICE_POINT_ID_ADDR, &data, 20);
 1019e12:	4669      	mov	r1, sp
 1019e14:	2214      	movs	r2, #20
 1019e16:	f240 605e 	movw	r0, #1630	; 0x65e
 1019e1a:	47a0      	blx	r4
	EEPROM_writer( ST_6_ELECT_ADDR_ADDR, &data, 20);
 1019e1c:	4669      	mov	r1, sp
 1019e1e:	2214      	movs	r2, #20
 1019e20:	f240 6072 	movw	r0, #1650	; 0x672
 1019e24:	47a0      	blx	r4
	EEPROM_writer( ST_6_DEVICE_ID_ADDR, &data, 20);
 1019e26:	4669      	mov	r1, sp
 1019e28:	2214      	movs	r2, #20
 1019e2a:	f240 6086 	movw	r0, #1670	; 0x686
 1019e2e:	47a0      	blx	r4
	EEPROM_writer( ST_6_UTIL_SER_NO_ADDR, &data, 20);
 1019e30:	4669      	mov	r1, sp
 1019e32:	2214      	movs	r2, #20
 1019e34:	f240 609a 	movw	r0, #1690	; 0x69a
	memset(&data, 0, sizeof(data));
 1019e38:	f04f 081e 	mov.w	r8, #30
	EEPROM_writer( ST_6_UTIL_SER_NO_ADDR, &data, 20);
 1019e3c:	47a0      	blx	r4
	EEPROM_writer( ST_6_CUSTOMER_ID_ADDR, &data, 20);
 1019e3e:	4669      	mov	r1, sp
 1019e40:	2214      	movs	r2, #20
 1019e42:	f240 60ae 	movw	r0, #1710	; 0x6ae
 1019e46:	47a0      	blx	r4
	memset(&data, 0, sizeof(data));
 1019e48:	4642      	mov	r2, r8
 1019e4a:	4668      	mov	r0, sp
 1019e4c:	2100      	movs	r1, #0
 1019e4e:	47d0      	blx	sl
	EEPROM_writer( ST_6_COORDINATE_1_ADDR, &data, 10);
 1019e50:	4669      	mov	r1, sp
 1019e52:	220a      	movs	r2, #10
 1019e54:	f240 60c2 	movw	r0, #1730	; 0x6c2
 1019e58:	47a0      	blx	r4
	EEPROM_writer( ST_6_COORDINATE_2_ADDR, &data, 10);
 1019e5a:	4669      	mov	r1, sp
 1019e5c:	220a      	movs	r2, #10
 1019e5e:	f240 60cc 	movw	r0, #1740	; 0x6cc
 1019e62:	47a0      	blx	r4
	EEPROM_writer( ST_6_COORDINATE_3_ADDR, &data, 10);
 1019e64:	4669      	mov	r1, sp
 1019e66:	220a      	movs	r2, #10
 1019e68:	f240 60d6 	movw	r0, #1750	; 0x6d6
 1019e6c:	47a0      	blx	r4
	
	strcpy((char*)&data, "        ");
 1019e6e:	4b37      	ldr	r3, [pc, #220]	; (1019f4c <GRAL_APP_bSt_6_restore_default_values+0x178>)
 1019e70:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 1019e74:	466b      	mov	r3, sp
 1019e76:	c303      	stmia	r3!, {r0, r1}
	EEPROM_writer( ST_6_TARIFF_ID_ADDR, &data, 8);
 1019e78:	4669      	mov	r1, sp
	strcpy((char*)&data, "        ");
 1019e7a:	701a      	strb	r2, [r3, #0]
	EEPROM_writer( ST_6_TARIFF_ID_ADDR, &data, 8);
 1019e7c:	f44f 60dc 	mov.w	r0, #1760	; 0x6e0
 1019e80:	2208      	movs	r2, #8
 1019e82:	47a0      	blx	r4
	
	memset(&data, 0, sizeof(data));
 1019e84:	4642      	mov	r2, r8
 1019e86:	4668      	mov	r0, sp
 1019e88:	2100      	movs	r1, #0
 1019e8a:	47d0      	blx	sl
	data[0] = 0x6D;
	data[1] = 0x6D;
	data[2] = 0x54;
 1019e8c:	2654      	movs	r6, #84	; 0x54
	data[0] = 0x6D;
 1019e8e:	236d      	movs	r3, #109	; 0x6d
	data[3] = 0x20;
	EEPROM_writer( ST_6_EX1_SW_VENDOR_ADDR, &data, 4);
 1019e90:	4669      	mov	r1, sp
	data[3] = 0x20;
 1019e92:	2520      	movs	r5, #32
	EEPROM_writer( ST_6_EX1_SW_VENDOR_ADDR, &data, 4);
 1019e94:	2204      	movs	r2, #4
 1019e96:	f44f 60dd 	mov.w	r0, #1768	; 0x6e8
	data[0] = 0x6D;
 1019e9a:	f88d 3000 	strb.w	r3, [sp]
	data[1] = 0x6D;
 1019e9e:	f88d 3001 	strb.w	r3, [sp, #1]
	
	memset(&data, 0, sizeof(data));
	data[0] = 0x01;
 1019ea2:	2701      	movs	r7, #1
	data[2] = 0x54;
 1019ea4:	f88d 6002 	strb.w	r6, [sp, #2]
	data[3] = 0x20;
 1019ea8:	f88d 5003 	strb.w	r5, [sp, #3]
	EEPROM_writer( ST_6_EX1_SW_VENDOR_ADDR, &data, 4);
 1019eac:	47a0      	blx	r4
	memset(&data, 0, sizeof(data));
 1019eae:	4642      	mov	r2, r8
 1019eb0:	4668      	mov	r0, sp
 1019eb2:	2100      	movs	r1, #0
 1019eb4:	47d0      	blx	sl
	EEPROM_writer( ST_6_EX1_SW_VERSION_NUMBER_ADDR, &data, 1);
 1019eb6:	4669      	mov	r1, sp
 1019eb8:	463a      	mov	r2, r7
 1019eba:	f240 60ec 	movw	r0, #1772	; 0x6ec
	data[0] = 0x01;
 1019ebe:	f88d 7000 	strb.w	r7, [sp]
	EEPROM_writer( ST_6_EX1_SW_VERSION_NUMBER_ADDR, &data, 1);
 1019ec2:	47a0      	blx	r4
	
	memset(&data, 0, sizeof(data));
 1019ec4:	4642      	mov	r2, r8
 1019ec6:	4668      	mov	r0, sp
 1019ec8:	2100      	movs	r1, #0
 1019eca:	47d0      	blx	sl
	data[0] = 0x00;
	EEPROM_writer( ST_6_EX1_SW_REVISION_NUMBER_ADDR, &data, 1);
 1019ecc:	463a      	mov	r2, r7
 1019ece:	4669      	mov	r1, sp
 1019ed0:	f240 60ed 	movw	r0, #1773	; 0x6ed
 1019ed4:	47a0      	blx	r4
	
	strcpy((char*)&data, "    ");
 1019ed6:	4b1e      	ldr	r3, [pc, #120]	; (1019f50 <GRAL_APP_bSt_6_restore_default_values+0x17c>)
	
	memset(&data, 0, sizeof(data));
	EEPROM_writer( ST_6_EX2_SW_VERSION_NUMBER_ADDR, &data, 1);
	EEPROM_writer( ST_6_EX2_SW_REVISION_NUMBER_ADDR, &data, 1);
	
	strcpy((char*)&data, "                              ");
 1019ed8:	4e1e      	ldr	r6, [pc, #120]	; (1019f54 <GRAL_APP_bSt_6_restore_default_values+0x180>)
	strcpy((char*)&data, "    ");
 1019eda:	e893 0003 	ldmia.w	r3, {r0, r1}
	EEPROM_writer( ST_6_EX2_SW_VENDOR_ADDR, &data, 4);
 1019ede:	2204      	movs	r2, #4
	strcpy((char*)&data, "    ");
 1019ee0:	9000      	str	r0, [sp, #0]
 1019ee2:	f88d 1004 	strb.w	r1, [sp, #4]
	EEPROM_writer( ST_6_EX2_SW_VENDOR_ADDR, &data, 4);
 1019ee6:	f240 60ee 	movw	r0, #1774	; 0x6ee
 1019eea:	4669      	mov	r1, sp
 1019eec:	47a0      	blx	r4
	memset(&data, 0, sizeof(data));
 1019eee:	4642      	mov	r2, r8
 1019ef0:	4668      	mov	r0, sp
 1019ef2:	2100      	movs	r1, #0
 1019ef4:	47d0      	blx	sl
	EEPROM_writer( ST_6_EX2_SW_VERSION_NUMBER_ADDR, &data, 1);
 1019ef6:	463a      	mov	r2, r7
 1019ef8:	4669      	mov	r1, sp
 1019efa:	f240 60f2 	movw	r0, #1778	; 0x6f2
 1019efe:	47a0      	blx	r4
	EEPROM_writer( ST_6_EX2_SW_REVISION_NUMBER_ADDR, &data, 1);
 1019f00:	463a      	mov	r2, r7
 1019f02:	4669      	mov	r1, sp
 1019f04:	f240 60f3 	movw	r0, #1779	; 0x6f3
 1019f08:	47a0      	blx	r4
	strcpy((char*)&data, "                              ");
 1019f0a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 1019f0c:	466d      	mov	r5, sp
 1019f0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 1019f10:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 1019f14:	c507      	stmia	r5!, {r0, r1, r2}
 1019f16:	f825 3b02 	strh.w	r3, [r5], #2
 1019f1a:	0c1b      	lsrs	r3, r3, #16
 1019f1c:	702b      	strb	r3, [r5, #0]
	EEPROM_writer( ST_6_PROGRAMMER_NAME_ADDR, &data, 10);
 1019f1e:	4669      	mov	r1, sp
 1019f20:	220a      	movs	r2, #10
 1019f22:	f240 60f4 	movw	r0, #1780	; 0x6f4
 1019f26:	47a0      	blx	r4
	EEPROM_writer( ST_6_MISC_ID_ADDR, &data, 30);
 1019f28:	4642      	mov	r2, r8
 1019f2a:	4669      	mov	r1, sp
 1019f2c:	f240 60fe 	movw	r0, #1790	; 0x6fe
 1019f30:	47a0      	blx	r4
	
	SM_APP_vChange_table_state(ST_6_PROG_STATE_ADDR, C1219_TABLE_FULL);
 1019f32:	2145      	movs	r1, #69	; 0x45
 1019f34:	f240 6033 	movw	r0, #1587	; 0x633
 1019f38:	47c8      	blx	r9
	
	return true;
}
 1019f3a:	4638      	mov	r0, r7
 1019f3c:	b008      	add	sp, #32
 1019f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 1019f42:	bf00      	nop
 1019f44:	010315c0 	.word	0x010315c0
 1019f48:	01017509 	.word	0x01017509
 1019f4c:	010315cc 	.word	0x010315cc
 1019f50:	010315d0 	.word	0x010315d0
 1019f54:	010315d8 	.word	0x010315d8
 1019f58:	010203e9 	.word	0x010203e9
 1019f5c:	01030b71 	.word	0x01030b71

01019f60 <GRAL_APP_bLoad_st_6>:
bool GRAL_APP_bLoad_st_6(void) {
 1019f60:	b508      	push	{r3, lr}
 	if ( SM_APP_ucGet_table_state(ST_6_PROG_STATE_ADDR) != C1219_TABLE_FULL ) {
 1019f62:	f240 6033 	movw	r0, #1587	; 0x633
 1019f66:	4b04      	ldr	r3, [pc, #16]	; (1019f78 <GRAL_APP_bLoad_st_6+0x18>)
 1019f68:	4798      	blx	r3
 1019f6a:	2845      	cmp	r0, #69	; 0x45
 1019f6c:	d001      	beq.n	1019f72 <GRAL_APP_bLoad_st_6+0x12>
		GRAL_APP_bSt_6_restore_default_values();
 1019f6e:	4b03      	ldr	r3, [pc, #12]	; (1019f7c <GRAL_APP_bLoad_st_6+0x1c>)
 1019f70:	4798      	blx	r3
}
 1019f72:	2001      	movs	r0, #1
 1019f74:	bd08      	pop	{r3, pc}
 1019f76:	bf00      	nop
 1019f78:	010203cd 	.word	0x010203cd
 1019f7c:	01019dd5 	.word	0x01019dd5

01019f80 <GRAL_APP_bSt_6_execute_table_reading>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool GRAL_APP_bSt_6_execute_table_reading(uint8_t *table_buffer) {
 1019f80:	b508      	push	{r3, lr}
	
	bool is_ok = false;
	
	EEPROM_reader( ST_6_START_ADDR, &table_buffer[0], ST_6_SIZE);
 1019f82:	4601      	mov	r1, r0
 1019f84:	22e6      	movs	r2, #230	; 0xe6
 1019f86:	4b03      	ldr	r3, [pc, #12]	; (1019f94 <GRAL_APP_bSt_6_execute_table_reading+0x14>)
 1019f88:	f240 6036 	movw	r0, #1590	; 0x636
 1019f8c:	4798      	blx	r3
	
	is_ok = true;
	
	return is_ok;
}
 1019f8e:	2001      	movs	r0, #1
 1019f90:	bd08      	pop	{r3, pc}
 1019f92:	bf00      	nop
 1019f94:	01017511 	.word	0x01017511

01019f98 <GRAL_APP_bSt_6_execute_table_writing>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool GRAL_APP_bSt_6_execute_table_writing(uint8_t *table_buffer) {
 1019f98:	b538      	push	{r3, r4, r5, lr}
	
	bool is_ok = false;
	
	SM_APP_vChange_table_state(ST_6_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
 1019f9a:	21ff      	movs	r1, #255	; 0xff
bool GRAL_APP_bSt_6_execute_table_writing(uint8_t *table_buffer) {
 1019f9c:	4605      	mov	r5, r0
	SM_APP_vChange_table_state(ST_6_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
 1019f9e:	4c08      	ldr	r4, [pc, #32]	; (1019fc0 <GRAL_APP_bSt_6_execute_table_writing+0x28>)
 1019fa0:	f240 6033 	movw	r0, #1587	; 0x633
 1019fa4:	47a0      	blx	r4
	EEPROM_writer(ST_6_START_ADDR, &table_buffer[0], ST_6_SIZE);
 1019fa6:	4629      	mov	r1, r5
 1019fa8:	22e6      	movs	r2, #230	; 0xe6
 1019faa:	4b06      	ldr	r3, [pc, #24]	; (1019fc4 <GRAL_APP_bSt_6_execute_table_writing+0x2c>)
 1019fac:	f240 6036 	movw	r0, #1590	; 0x636
 1019fb0:	4798      	blx	r3
	SM_APP_vChange_table_state(ST_6_PROG_STATE_ADDR, C1219_TABLE_FULL);
 1019fb2:	2145      	movs	r1, #69	; 0x45
 1019fb4:	f240 6033 	movw	r0, #1587	; 0x633
 1019fb8:	47a0      	blx	r4
	
	is_ok = true;
	
	return is_ok;	
}
 1019fba:	2001      	movs	r0, #1
 1019fbc:	bd38      	pop	{r3, r4, r5, pc}
 1019fbe:	bf00      	nop
 1019fc0:	010203e9 	.word	0x010203e9
 1019fc4:	01017509 	.word	0x01017509

01019fc8 <GRAL_APP_usSt_6_get_size>:
 ******************************************************************************
 */
uint16_t GRAL_APP_usSt_6_get_size(void) {

	return (uint16_t)ST_6_SIZE;
}
 1019fc8:	20e6      	movs	r0, #230	; 0xe6
 1019fca:	4770      	bx	lr

01019fcc <GRAL_APP_bEnable_metering_mode>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool GRAL_APP_bEnable_metering_mode(uint16_t user_id, Uart* uart) {
 1019fcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	
	if ( (st_3.ed_mode & METERING_FLAG_bm) == 0 ) {
 1019fd0:	4d23      	ldr	r5, [pc, #140]	; (101a060 <GRAL_APP_bEnable_metering_mode+0x94>)
 1019fd2:	782a      	ldrb	r2, [r5, #0]
 1019fd4:	f012 0801 	ands.w	r8, r2, #1
bool GRAL_APP_bEnable_metering_mode(uint16_t user_id, Uart* uart) {
 1019fd8:	b083      	sub	sp, #12
	if ( (st_3.ed_mode & METERING_FLAG_bm) == 0 ) {
 1019fda:	d111      	bne.n	101a000 <GRAL_APP_bEnable_metering_mode+0x34>

		uint32_t timestamp = rtc.utc_timestamp;
 1019fdc:	4b21      	ldr	r3, [pc, #132]	; (101a064 <GRAL_APP_bEnable_metering_mode+0x98>)
 1019fde:	460e      	mov	r6, r1
		
		if ( (st_3.ed_mode & TEST_MODE_FLAG_bm) == TEST_MODE_FLAG_bm ) {
 1019fe0:	0791      	lsls	r1, r2, #30
 1019fe2:	4604      	mov	r4, r0
		uint32_t timestamp = rtc.utc_timestamp;
 1019fe4:	685f      	ldr	r7, [r3, #4]
		if ( (st_3.ed_mode & TEST_MODE_FLAG_bm) == TEST_MODE_FLAG_bm ) {
 1019fe6:	d40f      	bmi.n	101a008 <GRAL_APP_bEnable_metering_mode+0x3c>
			}
			
			REGS_APP_vDisable_test_mode();
		}
		
		if ( (st_3.ed_mode & METER_SHOP_MODE_FLAG_bm) == METER_SHOP_MODE_FLAG_bm ) {
 1019fe8:	0753      	lsls	r3, r2, #29
 1019fea:	f8df 908c 	ldr.w	r9, [pc, #140]	; 101a078 <GRAL_APP_bEnable_metering_mode+0xac>
 1019fee:	d421      	bmi.n	101a034 <GRAL_APP_bEnable_metering_mode+0x68>
			/* Disable meter shop mode */
			EVNT_APP_vRegister_event(METER_SHOP_MODE_STOPPED, 0, true, user_id, timestamp);
		}
		
		/* Register metering mode is enabled */
		EVNT_APP_vRegister_event(METERING_MODE_STARTED, 0, true, user_id, timestamp);
 1019ff0:	4623      	mov	r3, r4
 1019ff2:	9700      	str	r7, [sp, #0]
 1019ff4:	2201      	movs	r2, #1
 1019ff6:	2100      	movs	r1, #0
 1019ff8:	201e      	movs	r0, #30
 1019ffa:	47c8      	blx	r9
		st_3.ed_mode = (uint8_t)(METERING_FLAG_bm);
 1019ffc:	2301      	movs	r3, #1
 1019ffe:	702b      	strb	r3, [r5, #0]
	}
	
	return true;
}
 101a000:	2001      	movs	r0, #1
 101a002:	b003      	add	sp, #12
 101a004:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			TIMER_reset_ms_timer(SM_TEST_MODE_TIMER);
 101a008:	2013      	movs	r0, #19
 101a00a:	4b17      	ldr	r3, [pc, #92]	; (101a068 <GRAL_APP_bEnable_metering_mode+0x9c>)
			EVNT_APP_vRegister_event(TEST_MODE_STOPPED, 0, true, user_id, timestamp);
 101a00c:	f8df 9068 	ldr.w	r9, [pc, #104]	; 101a078 <GRAL_APP_bEnable_metering_mode+0xac>
			TIMER_reset_ms_timer(SM_TEST_MODE_TIMER);
 101a010:	4798      	blx	r3
			EVNT_APP_vRegister_event(TEST_MODE_STOPPED, 0, true, user_id, timestamp);
 101a012:	4623      	mov	r3, r4
 101a014:	9700      	str	r7, [sp, #0]
 101a016:	2201      	movs	r2, #1
 101a018:	4641      	mov	r1, r8
 101a01a:	2021      	movs	r0, #33	; 0x21
 101a01c:	47c8      	blx	r9
			if ( uart == OP_UART ) {
 101a01e:	4b13      	ldr	r3, [pc, #76]	; (101a06c <GRAL_APP_bEnable_metering_mode+0xa0>)
 101a020:	429e      	cmp	r6, r3
 101a022:	d00e      	beq.n	101a042 <GRAL_APP_bEnable_metering_mode+0x76>
			if ( uart == NIC_UART) {
 101a024:	4b12      	ldr	r3, [pc, #72]	; (101a070 <GRAL_APP_bEnable_metering_mode+0xa4>)
 101a026:	429e      	cmp	r6, r3
 101a028:	d012      	beq.n	101a050 <GRAL_APP_bEnable_metering_mode+0x84>
			REGS_APP_vDisable_test_mode();
 101a02a:	4b12      	ldr	r3, [pc, #72]	; (101a074 <GRAL_APP_bEnable_metering_mode+0xa8>)
 101a02c:	4798      	blx	r3
 101a02e:	782a      	ldrb	r2, [r5, #0]
		if ( (st_3.ed_mode & METER_SHOP_MODE_FLAG_bm) == METER_SHOP_MODE_FLAG_bm ) {
 101a030:	0753      	lsls	r3, r2, #29
 101a032:	d5dd      	bpl.n	1019ff0 <GRAL_APP_bEnable_metering_mode+0x24>
			EVNT_APP_vRegister_event(METER_SHOP_MODE_STOPPED, 0, true, user_id, timestamp);
 101a034:	9700      	str	r7, [sp, #0]
 101a036:	4623      	mov	r3, r4
 101a038:	2201      	movs	r2, #1
 101a03a:	2100      	movs	r1, #0
 101a03c:	2023      	movs	r0, #35	; 0x23
 101a03e:	47c8      	blx	r9
 101a040:	e7d6      	b.n	1019ff0 <GRAL_APP_bEnable_metering_mode+0x24>
				EVNT_APP_vRegister_event(TEST_MODE_STOPPED_OP, 0, false, user_id, timestamp);
 101a042:	9700      	str	r7, [sp, #0]
 101a044:	4623      	mov	r3, r4
 101a046:	4642      	mov	r2, r8
 101a048:	4641      	mov	r1, r8
 101a04a:	2020      	movs	r0, #32
 101a04c:	47c8      	blx	r9
 101a04e:	e7ec      	b.n	101a02a <GRAL_APP_bEnable_metering_mode+0x5e>
				EVNT_APP_vRegister_event(TEST_MODE_STOPPED_NIC, 0, false, user_id, timestamp);
 101a050:	9700      	str	r7, [sp, #0]
 101a052:	4623      	mov	r3, r4
 101a054:	4642      	mov	r2, r8
 101a056:	4641      	mov	r1, r8
 101a058:	2021      	movs	r0, #33	; 0x21
 101a05a:	47c8      	blx	r9
 101a05c:	e7e5      	b.n	101a02a <GRAL_APP_bEnable_metering_mode+0x5e>
 101a05e:	bf00      	nop
 101a060:	200166a4 	.word	0x200166a4
 101a064:	20017160 	.word	0x20017160
 101a068:	0102bb09 	.word	0x0102bb09
 101a06c:	48004000 	.word	0x48004000
 101a070:	400e0600 	.word	0x400e0600
 101a074:	010299ed 	.word	0x010299ed
 101a078:	01019961 	.word	0x01019961

0101a07c <GRAL_APP_bEnable_test_mode>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool GRAL_APP_bEnable_test_mode(uint16_t user_id, Uart* uart) {
 101a07c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	
	if ( (st_3.ed_mode & TEST_MODE_FLAG_bm) == 0 ) {
 101a080:	4f28      	ldr	r7, [pc, #160]	; (101a124 <GRAL_APP_bEnable_test_mode+0xa8>)
 101a082:	783a      	ldrb	r2, [r7, #0]
 101a084:	f012 0302 	ands.w	r3, r2, #2
bool GRAL_APP_bEnable_test_mode(uint16_t user_id, Uart* uart) {
 101a088:	b083      	sub	sp, #12
	if ( (st_3.ed_mode & TEST_MODE_FLAG_bm) == 0 ) {
 101a08a:	d11f      	bne.n	101a0cc <GRAL_APP_bEnable_test_mode+0x50>
		
		uint32_t timestamp = rtc.utc_timestamp;
 101a08c:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 101a144 <GRAL_APP_bEnable_test_mode+0xc8>
 101a090:	460c      	mov	r4, r1
		
		if ( (st_3.ed_mode & METERING_FLAG_bm) == METERING_FLAG_bm ) {
 101a092:	07d1      	lsls	r1, r2, #31
 101a094:	4605      	mov	r5, r0
		uint32_t timestamp = rtc.utc_timestamp;
 101a096:	f8d9 8004 	ldr.w	r8, [r9, #4]
		if ( (st_3.ed_mode & METERING_FLAG_bm) == METERING_FLAG_bm ) {
 101a09a:	d41b      	bmi.n	101a0d4 <GRAL_APP_bEnable_test_mode+0x58>
			/* Disable metering mode */
			EVNT_APP_vRegister_event(METERING_MODE_STOPPED, 0, true, user_id, timestamp);
			REGS_APP_vEnable_test_mode();
		}
		
		if ( (st_3.ed_mode & METER_SHOP_MODE_FLAG_bm) == METER_SHOP_MODE_FLAG_bm ) {
 101a09c:	0753      	lsls	r3, r2, #29
 101a09e:	4e22      	ldr	r6, [pc, #136]	; (101a128 <GRAL_APP_bEnable_test_mode+0xac>)
 101a0a0:	d425      	bmi.n	101a0ee <GRAL_APP_bEnable_test_mode+0x72>
			/* Disable meter shop mode */
			EVNT_APP_vRegister_event(METER_SHOP_MODE_STOPPED, 0, true, user_id, timestamp);
		}
		
		/* Register test mode is enabled */
		EVNT_APP_vRegister_event(TEST_MODE_STARTED, 0, true, user_id, timestamp);
 101a0a2:	462b      	mov	r3, r5
 101a0a4:	f8cd 8000 	str.w	r8, [sp]
 101a0a8:	2201      	movs	r2, #1
 101a0aa:	2100      	movs	r1, #0
 101a0ac:	2020      	movs	r0, #32
 101a0ae:	47b0      	blx	r6
		
		if ( uart == OP_UART ) {
 101a0b0:	4b1e      	ldr	r3, [pc, #120]	; (101a12c <GRAL_APP_bEnable_test_mode+0xb0>)
 101a0b2:	429c      	cmp	r4, r3
 101a0b4:	d02c      	beq.n	101a110 <GRAL_APP_bEnable_test_mode+0x94>
			EVNT_APP_vRegister_event(TEST_MODE_STARTED_OP, 0, false, user_id, rtc.utc_timestamp);
		}
		
		if ( uart == NIC_UART ) {
 101a0b6:	4b1e      	ldr	r3, [pc, #120]	; (101a130 <GRAL_APP_bEnable_test_mode+0xb4>)
 101a0b8:	429c      	cmp	r4, r3
 101a0ba:	d020      	beq.n	101a0fe <GRAL_APP_bEnable_test_mode+0x82>
			EVNT_APP_vRegister_event(TEST_MODE_STARTED_NIC, 0, false, user_id, rtc.utc_timestamp);
		}
		
		st_3.ed_mode = (uint8_t)(TEST_MODE_FLAG_bm);
		TIMER_start_ms_timer(SM_TEST_MODE_TIMER, meter.ed_mode.test_mode.active_period, SM_APP_vSet_test_mode_expired_flag);
 101a0bc:	4b1d      	ldr	r3, [pc, #116]	; (101a134 <GRAL_APP_bEnable_test_mode+0xb8>)
 101a0be:	4a1e      	ldr	r2, [pc, #120]	; (101a138 <GRAL_APP_bEnable_test_mode+0xbc>)
 101a0c0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 101a0c2:	4b1e      	ldr	r3, [pc, #120]	; (101a13c <GRAL_APP_bEnable_test_mode+0xc0>)
		st_3.ed_mode = (uint8_t)(TEST_MODE_FLAG_bm);
 101a0c4:	2402      	movs	r4, #2
		TIMER_start_ms_timer(SM_TEST_MODE_TIMER, meter.ed_mode.test_mode.active_period, SM_APP_vSet_test_mode_expired_flag);
 101a0c6:	2013      	movs	r0, #19
		st_3.ed_mode = (uint8_t)(TEST_MODE_FLAG_bm);
 101a0c8:	703c      	strb	r4, [r7, #0]
		TIMER_start_ms_timer(SM_TEST_MODE_TIMER, meter.ed_mode.test_mode.active_period, SM_APP_vSet_test_mode_expired_flag);
 101a0ca:	4798      	blx	r3
	}
	
	return true;
}
 101a0cc:	2001      	movs	r0, #1
 101a0ce:	b003      	add	sp, #12
 101a0d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			EVNT_APP_vRegister_event(METERING_MODE_STOPPED, 0, true, user_id, timestamp);
 101a0d4:	4619      	mov	r1, r3
 101a0d6:	2201      	movs	r2, #1
 101a0d8:	4603      	mov	r3, r0
 101a0da:	f8cd 8000 	str.w	r8, [sp]
 101a0de:	201f      	movs	r0, #31
 101a0e0:	4e11      	ldr	r6, [pc, #68]	; (101a128 <GRAL_APP_bEnable_test_mode+0xac>)
 101a0e2:	47b0      	blx	r6
			REGS_APP_vEnable_test_mode();
 101a0e4:	4b16      	ldr	r3, [pc, #88]	; (101a140 <GRAL_APP_bEnable_test_mode+0xc4>)
 101a0e6:	4798      	blx	r3
 101a0e8:	783a      	ldrb	r2, [r7, #0]
		if ( (st_3.ed_mode & METER_SHOP_MODE_FLAG_bm) == METER_SHOP_MODE_FLAG_bm ) {
 101a0ea:	0753      	lsls	r3, r2, #29
 101a0ec:	d5d9      	bpl.n	101a0a2 <GRAL_APP_bEnable_test_mode+0x26>
			EVNT_APP_vRegister_event(METER_SHOP_MODE_STOPPED, 0, true, user_id, timestamp);
 101a0ee:	f8cd 8000 	str.w	r8, [sp]
 101a0f2:	462b      	mov	r3, r5
 101a0f4:	2201      	movs	r2, #1
 101a0f6:	2100      	movs	r1, #0
 101a0f8:	2023      	movs	r0, #35	; 0x23
 101a0fa:	47b0      	blx	r6
 101a0fc:	e7d1      	b.n	101a0a2 <GRAL_APP_bEnable_test_mode+0x26>
			EVNT_APP_vRegister_event(TEST_MODE_STARTED_NIC, 0, false, user_id, rtc.utc_timestamp);
 101a0fe:	f8d9 3004 	ldr.w	r3, [r9, #4]
 101a102:	9300      	str	r3, [sp, #0]
 101a104:	2200      	movs	r2, #0
 101a106:	462b      	mov	r3, r5
 101a108:	4611      	mov	r1, r2
 101a10a:	201f      	movs	r0, #31
 101a10c:	47b0      	blx	r6
 101a10e:	e7d5      	b.n	101a0bc <GRAL_APP_bEnable_test_mode+0x40>
			EVNT_APP_vRegister_event(TEST_MODE_STARTED_OP, 0, false, user_id, rtc.utc_timestamp);
 101a110:	f8d9 3004 	ldr.w	r3, [r9, #4]
 101a114:	9300      	str	r3, [sp, #0]
 101a116:	2200      	movs	r2, #0
 101a118:	462b      	mov	r3, r5
 101a11a:	4611      	mov	r1, r2
 101a11c:	201e      	movs	r0, #30
 101a11e:	47b0      	blx	r6
 101a120:	e7cc      	b.n	101a0bc <GRAL_APP_bEnable_test_mode+0x40>
 101a122:	bf00      	nop
 101a124:	200166a4 	.word	0x200166a4
 101a128:	01019961 	.word	0x01019961
 101a12c:	48004000 	.word	0x48004000
 101a130:	400e0600 	.word	0x400e0600
 101a134:	20016c2c 	.word	0x20016c2c
 101a138:	010203c1 	.word	0x010203c1
 101a13c:	0102ba8d 	.word	0x0102ba8d
 101a140:	01029995 	.word	0x01029995
 101a144:	20017160 	.word	0x20017160

0101a148 <GRAL_APP_ucGet_st_3_ed_mode>:
 * \retval void
 ******************************************************************************
 */
uint8_t GRAL_APP_ucGet_st_3_ed_mode(void) {
	
	return st_3.ed_mode;
 101a148:	4b01      	ldr	r3, [pc, #4]	; (101a150 <GRAL_APP_ucGet_st_3_ed_mode+0x8>)
}
 101a14a:	7818      	ldrb	r0, [r3, #0]
 101a14c:	4770      	bx	lr
 101a14e:	bf00      	nop
 101a150:	200166a4 	.word	0x200166a4

0101a154 <GRAL_APP_usGet_st_3_ed_std_status1>:
 * \retval void
 ******************************************************************************
 */
uint16_t GRAL_APP_usGet_st_3_ed_std_status1(void) {
	
	return st_3.ed_std_status1;
 101a154:	4b01      	ldr	r3, [pc, #4]	; (101a15c <GRAL_APP_usGet_st_3_ed_std_status1+0x8>)
}
 101a156:	8858      	ldrh	r0, [r3, #2]
 101a158:	4770      	bx	lr
 101a15a:	bf00      	nop
 101a15c:	200166a4 	.word	0x200166a4

0101a160 <GRAL_APP_ucGet_st_3_ed_std_status2>:
 * \retval void
 ******************************************************************************
 */
uint8_t GRAL_APP_ucGet_st_3_ed_std_status2(void) {
	
	return st_3.ed_std_status2;
 101a160:	4b01      	ldr	r3, [pc, #4]	; (101a168 <GRAL_APP_ucGet_st_3_ed_std_status2+0x8>)
}
 101a162:	7918      	ldrb	r0, [r3, #4]
 101a164:	4770      	bx	lr
 101a166:	bf00      	nop
 101a168:	200166a4 	.word	0x200166a4

0101a16c <GRAL_APP_vCopy_st_3_ed_mfg_status>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
void GRAL_APP_vCopy_st_3_ed_mfg_status(uint8_t *buffer) {
 101a16c:	b410      	push	{r4}
	
	memcpy(buffer, &st_3.ed_mfg_status, (size_t)DIM_MFG_STATUS_USED);
 101a16e:	4b07      	ldr	r3, [pc, #28]	; (101a18c <GRAL_APP_vCopy_st_3_ed_mfg_status+0x20>)
 101a170:	f853 1f05 	ldr.w	r1, [r3, #5]!
 101a174:	685a      	ldr	r2, [r3, #4]
 101a176:	689c      	ldr	r4, [r3, #8]
 101a178:	6084      	str	r4, [r0, #8]
 101a17a:	6001      	str	r1, [r0, #0]
 101a17c:	6042      	str	r2, [r0, #4]
 101a17e:	899a      	ldrh	r2, [r3, #12]
 101a180:	7b9b      	ldrb	r3, [r3, #14]
 101a182:	7383      	strb	r3, [r0, #14]
 101a184:	8182      	strh	r2, [r0, #12]
}
 101a186:	bc10      	pop	{r4}
 101a188:	4770      	bx	lr
 101a18a:	bf00      	nop
 101a18c:	200166a4 	.word	0x200166a4

0101a190 <GRAL_APP_vClear_st_3_ed_std_status1>:
 * \retval void
 ******************************************************************************
 */
void GRAL_APP_vClear_st_3_ed_std_status1(void) {
	
	st_3.ed_std_status1 = 0;
 101a190:	4904      	ldr	r1, [pc, #16]	; (101a1a4 <GRAL_APP_vClear_st_3_ed_std_status1+0x14>)
	EEPROM_writer(ST_3_ED_STD_STATUS1_ADDR, &st_3.ed_std_status1, 2);
 101a192:	4b05      	ldr	r3, [pc, #20]	; (101a1a8 <GRAL_APP_vClear_st_3_ed_std_status1+0x18>)
	st_3.ed_std_status1 = 0;
 101a194:	2200      	movs	r2, #0
 101a196:	f821 2f02 	strh.w	r2, [r1, #2]!
	EEPROM_writer(ST_3_ED_STD_STATUS1_ADDR, &st_3.ed_std_status1, 2);
 101a19a:	f244 009a 	movw	r0, #16538	; 0x409a
 101a19e:	2202      	movs	r2, #2
 101a1a0:	4718      	bx	r3
 101a1a2:	bf00      	nop
 101a1a4:	200166a4 	.word	0x200166a4
 101a1a8:	01017509 	.word	0x01017509

0101a1ac <GRAL_APP_vClear_st_3_ed_std_status2>:
 * \retval void
 ******************************************************************************
 */
void GRAL_APP_vClear_st_3_ed_std_status2(void) {
	
	st_3.ed_std_status2 = 0;
 101a1ac:	4904      	ldr	r1, [pc, #16]	; (101a1c0 <GRAL_APP_vClear_st_3_ed_std_status2+0x14>)
	EEPROM_writer(ST_3_ED_STD_STATUS2_ADDR, &st_3.ed_std_status2, 1);
 101a1ae:	4b05      	ldr	r3, [pc, #20]	; (101a1c4 <GRAL_APP_vClear_st_3_ed_std_status2+0x18>)
	st_3.ed_std_status2 = 0;
 101a1b0:	2200      	movs	r2, #0
 101a1b2:	f801 2f04 	strb.w	r2, [r1, #4]!
	EEPROM_writer(ST_3_ED_STD_STATUS2_ADDR, &st_3.ed_std_status2, 1);
 101a1b6:	f244 009c 	movw	r0, #16540	; 0x409c
 101a1ba:	2201      	movs	r2, #1
 101a1bc:	4718      	bx	r3
 101a1be:	bf00      	nop
 101a1c0:	200166a4 	.word	0x200166a4
 101a1c4:	01017509 	.word	0x01017509

0101a1c8 <GRAL_APP_vClear_st_3_ed_mfg_status>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
void GRAL_APP_vClear_st_3_ed_mfg_status(void) {
 101a1c8:	b430      	push	{r4, r5}
	
	memset(&st_3.ed_mfg_status, 0 , sizeof(st_3.ed_mfg_status));
 101a1ca:	4b07      	ldr	r3, [pc, #28]	; (101a1e8 <GRAL_APP_vClear_st_3_ed_mfg_status+0x20>)
	EEPROM_writer(ST_3_ED_MFG_STATUS_ADDR, &st_3.ed_mfg_status, DIM_MFG_STATUS_USED);
 101a1cc:	4d07      	ldr	r5, [pc, #28]	; (101a1ec <GRAL_APP_vClear_st_3_ed_mfg_status+0x24>)
	memset(&st_3.ed_mfg_status, 0 , sizeof(st_3.ed_mfg_status));
 101a1ce:	2400      	movs	r4, #0
 101a1d0:	609c      	str	r4, [r3, #8]
 101a1d2:	601c      	str	r4, [r3, #0]
 101a1d4:	605c      	str	r4, [r3, #4]
 101a1d6:	f8c3 400b 	str.w	r4, [r3, #11]
	EEPROM_writer(ST_3_ED_MFG_STATUS_ADDR, &st_3.ed_mfg_status, DIM_MFG_STATUS_USED);
 101a1da:	4619      	mov	r1, r3
 101a1dc:	220f      	movs	r2, #15
 101a1de:	462b      	mov	r3, r5
 101a1e0:	f244 009d 	movw	r0, #16541	; 0x409d
}
 101a1e4:	bc30      	pop	{r4, r5}
	EEPROM_writer(ST_3_ED_MFG_STATUS_ADDR, &st_3.ed_mfg_status, DIM_MFG_STATUS_USED);
 101a1e6:	4718      	bx	r3
 101a1e8:	200166a9 	.word	0x200166a9
 101a1ec:	01017509 	.word	0x01017509

0101a1f0 <GRAL_APP_vStore_st_3_ed_std_status1>:
 * \retval void
 ******************************************************************************
 */
void GRAL_APP_vStore_st_3_ed_std_status1(void) {
	
	EEPROM_writer(ST_3_ED_STD_STATUS1_ADDR, &st_3.ed_std_status1, 2);
 101a1f0:	2202      	movs	r2, #2
 101a1f2:	4902      	ldr	r1, [pc, #8]	; (101a1fc <GRAL_APP_vStore_st_3_ed_std_status1+0xc>)
 101a1f4:	4b02      	ldr	r3, [pc, #8]	; (101a200 <GRAL_APP_vStore_st_3_ed_std_status1+0x10>)
 101a1f6:	f244 009a 	movw	r0, #16538	; 0x409a
 101a1fa:	4718      	bx	r3
 101a1fc:	200166a6 	.word	0x200166a6
 101a200:	01017509 	.word	0x01017509

0101a204 <GRAL_APP_vStore_st_3_ed_mfg_status>:
 * \retval void
 ******************************************************************************
 */
void GRAL_APP_vStore_st_3_ed_mfg_status(void) {
	
	EEPROM_writer(ST_3_ED_MFG_STATUS_ADDR, &st_3.ed_mfg_status, DIM_MFG_STATUS_USED);
 101a204:	220f      	movs	r2, #15
 101a206:	4902      	ldr	r1, [pc, #8]	; (101a210 <GRAL_APP_vStore_st_3_ed_mfg_status+0xc>)
 101a208:	4b02      	ldr	r3, [pc, #8]	; (101a214 <GRAL_APP_vStore_st_3_ed_mfg_status+0x10>)
 101a20a:	f244 009d 	movw	r0, #16541	; 0x409d
 101a20e:	4718      	bx	r3
 101a210:	200166a9 	.word	0x200166a9
 101a214:	01017509 	.word	0x01017509

0101a218 <GRAL_APP_vSet_flag_st_3_ed_std_status1>:
 ******************************************************************************
 */
void GRAL_APP_vSet_flag_st_3_ed_std_status1(ED_STD_STATUS1_FLAGS_TYPE flag) {
	
	st_3.ed_std_status1 |= (uint16_t)(1 << flag);
	st_3.ed_std_status1 &= ED_STD_STATUS1_SUPPORTED_FLAGS_bm;
 101a218:	4a05      	ldr	r2, [pc, #20]	; (101a230 <GRAL_APP_vSet_flag_st_3_ed_std_status1+0x18>)
	st_3.ed_std_status1 |= (uint16_t)(1 << flag);
 101a21a:	2301      	movs	r3, #1
 101a21c:	8851      	ldrh	r1, [r2, #2]
 101a21e:	fa03 f000 	lsl.w	r0, r3, r0
 101a222:	4308      	orrs	r0, r1
	st_3.ed_std_status1 &= ED_STD_STATUS1_SUPPORTED_FLAGS_bm;
 101a224:	f420 4053 	bic.w	r0, r0, #54016	; 0xd300
 101a228:	f020 004c 	bic.w	r0, r0, #76	; 0x4c
 101a22c:	8050      	strh	r0, [r2, #2]
 101a22e:	4770      	bx	lr
 101a230:	200166a4 	.word	0x200166a4

0101a234 <GRAL_APP_vLoad_mfg_tbls_used>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
void GRAL_APP_vLoad_mfg_tbls_used(uint8_t* set_buff) {
 101a234:	b470      	push	{r4, r5, r6}
	#ifdef MT_7_ID
	*set_buff |= ( 1 << 7 );
	#endif
	
	set_buff++;
	*set_buff = 0;
 101a236:	2300      	movs	r3, #0
	*set_buff |= ( 1 << 5 );
 101a238:	263a      	movs	r6, #58	; 0x3a
	#ifdef MT_22_ID
	*set_buff |= ( 1 << 6 );
	#endif
	
	#ifdef MT_23_ID
	*set_buff |= ( 1 << 7 );
 101a23a:	25c0      	movs	r5, #192	; 0xc0
	#ifdef MT_52_ID
	*set_buff |= ( 1 << 4 );
	#endif
	
	#ifdef MT_53_ID
	*set_buff |= ( 1 << 5 );
 101a23c:	2420      	movs	r4, #32
	*set_buff |= ( 1 << 1 );
 101a23e:	2203      	movs	r2, #3
	#ifdef MT_201_ID
	*set_buff |= ( 1 << 1 );
	#endif
	
	#ifdef MT_202_ID
	*set_buff |= ( 1 << 2 );
 101a240:	2104      	movs	r1, #4
	*set_buff |= ( 1 << 5 );
 101a242:	7006      	strb	r6, [r0, #0]
	*set_buff |= ( 1 << 7 );
 101a244:	7085      	strb	r5, [r0, #2]
	*set_buff |= ( 1 << 5 );
 101a246:	7184      	strb	r4, [r0, #6]
	*set_buff |= ( 1 << 2 );
 101a248:	7641      	strb	r1, [r0, #25]
	*set_buff = 0;
 101a24a:	7043      	strb	r3, [r0, #1]
	*set_buff = 0;
 101a24c:	7103      	strb	r3, [r0, #4]
	*set_buff = 0;
 101a24e:	7143      	strb	r3, [r0, #5]
	*set_buff = 0;
 101a250:	71c3      	strb	r3, [r0, #7]
	*set_buff = 0;
 101a252:	7203      	strb	r3, [r0, #8]
	*set_buff = 0;
 101a254:	7283      	strb	r3, [r0, #10]
	*set_buff = 0;
 101a256:	72c3      	strb	r3, [r0, #11]
	*set_buff = 0;
 101a258:	7303      	strb	r3, [r0, #12]
	*set_buff = 0;
 101a25a:	7343      	strb	r3, [r0, #13]
	*set_buff = 0;
 101a25c:	7383      	strb	r3, [r0, #14]
	*set_buff = 0;
 101a25e:	73c3      	strb	r3, [r0, #15]
	*set_buff = 0;
 101a260:	7403      	strb	r3, [r0, #16]
	*set_buff = 0;
 101a262:	7443      	strb	r3, [r0, #17]
	*set_buff = 0;
 101a264:	7483      	strb	r3, [r0, #18]
	*set_buff = 0;
 101a266:	74c3      	strb	r3, [r0, #19]
	*set_buff = 0;
 101a268:	7503      	strb	r3, [r0, #20]
	*set_buff = 0;
 101a26a:	7543      	strb	r3, [r0, #21]
	*set_buff = 0;
 101a26c:	7583      	strb	r3, [r0, #22]
	*set_buff = 0;
 101a26e:	75c3      	strb	r3, [r0, #23]
	*set_buff = 0;
 101a270:	7603      	strb	r3, [r0, #24]
	#ifdef MT_207_ID
	*set_buff |= ( 1 << 7 );
	#endif
	
	set_buff++;
	*set_buff = 0;
 101a272:	7683      	strb	r3, [r0, #26]
	#ifdef MT_215_ID
	*set_buff |= ( 1 << 7 );
	#endif
	
	set_buff++;
	*set_buff = 0;
 101a274:	76c3      	strb	r3, [r0, #27]
	#ifdef MT_223_ID
	*set_buff |= ( 1 << 7 );
	#endif
	
	set_buff++;
	*set_buff = 0;
 101a276:	7703      	strb	r3, [r0, #28]
	#ifdef MT_231_ID
	*set_buff |= ( 1 << 7 );
	#endif
	
	set_buff++;
	*set_buff = 0;
 101a278:	7743      	strb	r3, [r0, #29]
	#ifdef MT_239_ID
	*set_buff |= ( 1 << 7 );
	#endif
	
	set_buff++;
	*set_buff = 0;
 101a27a:	7783      	strb	r3, [r0, #30]
	#ifdef MT_247_ID
	*set_buff |= ( 1 << 7 );
	#endif
	
	set_buff++;
	*set_buff = 0;
 101a27c:	77c3      	strb	r3, [r0, #31]
	*set_buff |= ( 1 << 1 );
 101a27e:	70c2      	strb	r2, [r0, #3]
	*set_buff |= ( 1 << 1 );
 101a280:	7242      	strb	r2, [r0, #9]
	#ifdef MT_255_ID
	*set_buff |= ( 1 << 7 );
	#endif
	
	set_buff++;
	*set_buff = 0;
 101a282:	f880 3020 	strb.w	r3, [r0, #32]
	#ifdef MT_263_ID
	*set_buff |= ( 1 << 7 );
	#endif
	
	set_buff++;
	*set_buff = 0;
 101a286:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
	#endif
	
	#ifdef MT_271_ID
	*set_buff |= ( 1 << 7 );
	#endif
}
 101a28a:	bc70      	pop	{r4, r5, r6}
 101a28c:	4770      	bx	lr
 101a28e:	bf00      	nop

0101a290 <GRAL_APP_usSt_0_get_size>:
uint16_t GRAL_APP_usSt_0_get_size(void) {
 101a290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
inline uint8_t GRAL_APP_ucGet_dim_std_tbls_used(void) {
	
	uint8_t nbr_octets, i;
	
	memset(&set_buff, 0, sizeof(set_buff));
 101a294:	4e66      	ldr	r6, [pc, #408]	; (101a430 <GRAL_APP_usSt_0_get_size+0x1a0>)
uint16_t GRAL_APP_usSt_0_get_size(void) {
 101a296:	b085      	sub	sp, #20
	memset(&set_buff, 0, sizeof(set_buff));
 101a298:	2228      	movs	r2, #40	; 0x28
 101a29a:	9301      	str	r3, [sp, #4]
 101a29c:	2100      	movs	r1, #0
 101a29e:	4b65      	ldr	r3, [pc, #404]	; (101a434 <GRAL_APP_usSt_0_get_size+0x1a4>)
 101a2a0:	4630      	mov	r0, r6
 101a2a2:	4798      	blx	r3
	*set_buff |= ( 1 << 7 );
 101a2a4:	21bd      	movs	r1, #189	; 0xbd
	*set_buff |= ( 1 << 7 );
 101a2a6:	25f0      	movs	r5, #240	; 0xf0
	*set_buff |= ( 1 << 7 );
 101a2a8:	20c1      	movs	r0, #193	; 0xc1
	*set_buff |= ( 1 << 7 );
 101a2aa:	f04f 0cf1 	mov.w	ip, #241	; 0xf1
	*set_buff |= ( 1 << 7 );
 101a2ae:	f04f 0efc 	mov.w	lr, #252	; 0xfc
	*set_buff |= ( 1 << 7 );
 101a2b2:	22cf      	movs	r2, #207	; 0xcf
	*set_buff |= ( 1 << 7 );
 101a2b4:	7071      	strb	r1, [r6, #1]
	*set_buff |= ( 1 << 4 );
 101a2b6:	211f      	movs	r1, #31
	*set_buff |= ( 1 << 7 );
 101a2b8:	71f5      	strb	r5, [r6, #7]
	*set_buff |= ( 1 << 7 );
 101a2ba:	7230      	strb	r0, [r6, #8]
	*set_buff |= ( 1 << 4 );
 101a2bc:	70f1      	strb	r1, [r6, #3]
	*set_buff |= ( 1 << 4 );
 101a2be:	7171      	strb	r1, [r6, #5]
	*set_buff |= ( 1 << 4 );
 101a2c0:	7271      	strb	r1, [r6, #9]
 101a2c2:	4637      	mov	r7, r6
	*set_buff |= ( 1 << 7 );
 101a2c4:	f886 c002 	strb.w	ip, [r6, #2]
	*set_buff |= ( 1 << 7 );
 101a2c8:	f886 e006 	strb.w	lr, [r6, #6]
 101a2cc:	f106 0027 	add.w	r0, r6, #39	; 0x27
	*set_buff |= ( 1 << 4 );
 101a2d0:	9600      	str	r6, [sp, #0]
 101a2d2:	4635      	mov	r5, r6
	*set_buff |= ( 1 << 7 );
 101a2d4:	7032      	strb	r2, [r6, #0]
	*set_buff |= ( 1 << 4 );
 101a2d6:	2101      	movs	r1, #1
 101a2d8:	9b01      	ldr	r3, [sp, #4]
 101a2da:	e001      	b.n	101a2e0 <GRAL_APP_usSt_0_get_size+0x50>
 101a2dc:	f815 2f01 	ldrb.w	r2, [r5, #1]!
	GRAL_APP_vLoad_std_tbls_used(&set_buff[0]);
	
	for (i = 0; i < sizeof(set_buff); i++) {
		if (set_buff[i] > 0) {
			nbr_octets = i + 1;
 101a2e0:	2a00      	cmp	r2, #0
 101a2e2:	bf18      	it	ne
 101a2e4:	460c      	movne	r4, r1
 101a2e6:	1c4e      	adds	r6, r1, #1
	for (i = 0; i < sizeof(set_buff); i++) {
 101a2e8:	4285      	cmp	r5, r0
 101a2ea:	b2f1      	uxtb	r1, r6
 101a2ec:	d1f6      	bne.n	101a2dc <GRAL_APP_usSt_0_get_size+0x4c>
	table_size += DIM_STD_TBLS_USED;
 101a2ee:	3413      	adds	r4, #19
 */
inline uint8_t GRAL_APP_ucGet_dim_mfg_tbls_used(void)
{
	uint8_t nbr_octets, i;
	
	memset(&set_buff, 0, sizeof(set_buff));
 101a2f0:	484f      	ldr	r0, [pc, #316]	; (101a430 <GRAL_APP_usSt_0_get_size+0x1a0>)
 101a2f2:	9303      	str	r3, [sp, #12]
	table_size += DIM_STD_TBLS_USED;
 101a2f4:	b2a3      	uxth	r3, r4
 101a2f6:	1e46      	subs	r6, r0, #1
	memset(&set_buff, 0, sizeof(set_buff));
 101a2f8:	2228      	movs	r2, #40	; 0x28
 101a2fa:	2100      	movs	r1, #0
	table_size += DIM_STD_TBLS_USED;
 101a2fc:	9302      	str	r3, [sp, #8]
	memset(&set_buff, 0, sizeof(set_buff));
 101a2fe:	4b4d      	ldr	r3, [pc, #308]	; (101a434 <GRAL_APP_usSt_0_get_size+0x1a4>)
 101a300:	4798      	blx	r3
	GRAL_APP_vLoad_mfg_tbls_used(&set_buff[0]);
 101a302:	4b4d      	ldr	r3, [pc, #308]	; (101a438 <GRAL_APP_usSt_0_get_size+0x1a8>)
 101a304:	1c70      	adds	r0, r6, #1
 101a306:	4798      	blx	r3
 101a308:	9b03      	ldr	r3, [sp, #12]
 101a30a:	9601      	str	r6, [sp, #4]
 101a30c:	2201      	movs	r2, #1
 101a30e:	4634      	mov	r4, r6
	
	for (i = 0; i < sizeof(set_buff); i++) {
		if (set_buff[i] > 0) {
 101a310:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 101a314:	1c51      	adds	r1, r2, #1
			nbr_octets = i + 1;
 101a316:	2800      	cmp	r0, #0
 101a318:	bf18      	it	ne
 101a31a:	4613      	movne	r3, r2
	for (i = 0; i < sizeof(set_buff); i++) {
 101a31c:	42ac      	cmp	r4, r5
 101a31e:	b2ca      	uxtb	r2, r1
 101a320:	d1f6      	bne.n	101a310 <GRAL_APP_usSt_0_get_size+0x80>
	table_size += DIM_MFG_TBLS_USED;
 101a322:	9a02      	ldr	r2, [sp, #8]
 */
inline uint8_t GRAL_APP_ucGet_dim_std_proc_used(void)
{
	uint8_t nbr_octets, i;
	
	memset(&set_buff, 0, sizeof(set_buff));
 101a324:	4842      	ldr	r0, [pc, #264]	; (101a430 <GRAL_APP_usSt_0_get_size+0x1a0>)
 101a326:	9401      	str	r4, [sp, #4]
	table_size += DIM_MFG_TBLS_USED;
 101a328:	441a      	add	r2, r3
 101a32a:	4613      	mov	r3, r2
	memset(&set_buff, 0, sizeof(set_buff));
 101a32c:	2100      	movs	r1, #0
 101a32e:	2228      	movs	r2, #40	; 0x28
	table_size += DIM_MFG_TBLS_USED;
 101a330:	b29d      	uxth	r5, r3
	memset(&set_buff, 0, sizeof(set_buff));
 101a332:	4b40      	ldr	r3, [pc, #256]	; (101a434 <GRAL_APP_usSt_0_get_size+0x1a4>)
 101a334:	4798      	blx	r3
	*set_buff |= ( 1 << 7 );
 101a336:	9800      	ldr	r0, [sp, #0]
	*set_buff |= ( 1 << 3 );
 101a338:	9c01      	ldr	r4, [sp, #4]
 101a33a:	230f      	movs	r3, #15
 101a33c:	7043      	strb	r3, [r0, #1]
 101a33e:	4b3c      	ldr	r3, [pc, #240]	; (101a430 <GRAL_APP_usSt_0_get_size+0x1a0>)
 101a340:	9300      	str	r3, [sp, #0]
	*set_buff |= ( 1 << 7 );
 101a342:	21eb      	movs	r1, #235	; 0xeb
	*set_buff |= ( 1 << 3 );
 101a344:	461a      	mov	r2, r3
	*set_buff |= ( 1 << 7 );
 101a346:	7001      	strb	r1, [r0, #0]
	*set_buff |= ( 1 << 3 );
 101a348:	2301      	movs	r3, #1
 101a34a:	e001      	b.n	101a350 <GRAL_APP_usSt_0_get_size+0xc0>
 101a34c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
	GRAL_APP_vLoad_std_proc_used(&set_buff[0]);
	
	for (i = 0; i < sizeof(set_buff); i++) {
		if (set_buff[i] > 0) {
			nbr_octets = i + 1;
 101a350:	2900      	cmp	r1, #0
 101a352:	bf18      	it	ne
 101a354:	469b      	movne	fp, r3
 101a356:	1c58      	adds	r0, r3, #1
	for (i = 0; i < sizeof(set_buff); i++) {
 101a358:	42a2      	cmp	r2, r4
 101a35a:	b2c3      	uxtb	r3, r0
 101a35c:	d1f6      	bne.n	101a34c <GRAL_APP_usSt_0_get_size+0xbc>
 */
inline uint8_t GRAL_APP_ucGet_dim_mfg_proc_used(void)
{
	uint8_t nbr_octets, i;
	
	memset(&set_buff, 0, sizeof(set_buff));
 101a35e:	2228      	movs	r2, #40	; 0x28
 101a360:	2100      	movs	r1, #0
 101a362:	4b34      	ldr	r3, [pc, #208]	; (101a434 <GRAL_APP_usSt_0_get_size+0x1a4>)
 101a364:	4832      	ldr	r0, [pc, #200]	; (101a430 <GRAL_APP_usSt_0_get_size+0x1a0>)
 101a366:	9401      	str	r4, [sp, #4]
 101a368:	4798      	blx	r3
		*set_buff |= ( 1 << 6 );
 101a36a:	9c00      	ldr	r4, [sp, #0]
		*set_buff |= ( 1 << 1 );
 101a36c:	2302      	movs	r3, #2
 101a36e:	7063      	strb	r3, [r4, #1]
		*set_buff |= ( 1 << 1 );
 101a370:	2303      	movs	r3, #3
		*set_buff |= ( 1 << 7 );
 101a372:	20f0      	movs	r0, #240	; 0xf0
		*set_buff |= ( 1 << 7 );
 101a374:	22c3      	movs	r2, #195	; 0xc3
		*set_buff |= ( 1 << 1 );
 101a376:	73a3      	strb	r3, [r4, #14]
		*set_buff |= ( 1 << 1 );
 101a378:	7663      	strb	r3, [r4, #25]
 101a37a:	4b2d      	ldr	r3, [pc, #180]	; (101a430 <GRAL_APP_usSt_0_get_size+0x1a0>)
		*set_buff |= ( 1 << 7 );
 101a37c:	7320      	strb	r0, [r4, #12]
		*set_buff |= ( 1 << 6 );
 101a37e:	2140      	movs	r1, #64	; 0x40
		*set_buff |= ( 1 << 7 );
 101a380:	7362      	strb	r2, [r4, #13]
	table_size += DIM_STD_PROC_USED;
 101a382:	445d      	add	r5, fp
		*set_buff |= ( 1 << 2 );
 101a384:	2204      	movs	r2, #4
		*set_buff |= ( 1 << 6 );
 101a386:	207f      	movs	r0, #127	; 0x7f
		*set_buff |= ( 1 << 2 );
 101a388:	7422      	strb	r2, [r4, #16]
		*set_buff |= ( 1 << 6 );
 101a38a:	7021      	strb	r1, [r4, #0]
		*set_buff |= ( 1 << 6 );
 101a38c:	74a1      	strb	r1, [r4, #18]
		*set_buff |= ( 1 << 6 );
 101a38e:	73e0      	strb	r0, [r4, #15]
		*set_buff |= ( 1 << 1 );
 101a390:	9300      	str	r3, [sp, #0]
 101a392:	461a      	mov	r2, r3
	table_size += DIM_STD_PROC_USED;
 101a394:	b2ad      	uxth	r5, r5
		*set_buff |= ( 1 << 1 );
 101a396:	2301      	movs	r3, #1
 101a398:	9c01      	ldr	r4, [sp, #4]
 101a39a:	e001      	b.n	101a3a0 <GRAL_APP_usSt_0_get_size+0x110>
 101a39c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
	GRAL_APP_vLoad_mfg_proc_used(&set_buff[0]);
	
	for (i = 0; i < sizeof(set_buff); i++) {
		if (set_buff[i] > 0) {
			nbr_octets = i + 1;
 101a3a0:	2900      	cmp	r1, #0
 101a3a2:	bf18      	it	ne
 101a3a4:	469a      	movne	sl, r3
 101a3a6:	1c58      	adds	r0, r3, #1
	for (i = 0; i < sizeof(set_buff); i++) {
 101a3a8:	42a2      	cmp	r2, r4
 101a3aa:	b2c3      	uxtb	r3, r0
 101a3ac:	d1f6      	bne.n	101a39c <GRAL_APP_usSt_0_get_size+0x10c>
	memset(&set_buff, 0, sizeof(set_buff));
 101a3ae:	2228      	movs	r2, #40	; 0x28
 101a3b0:	2100      	movs	r1, #0
 101a3b2:	4b20      	ldr	r3, [pc, #128]	; (101a434 <GRAL_APP_usSt_0_get_size+0x1a4>)
 101a3b4:	481e      	ldr	r0, [pc, #120]	; (101a430 <GRAL_APP_usSt_0_get_size+0x1a0>)
 101a3b6:	9401      	str	r4, [sp, #4]
 101a3b8:	4798      	blx	r3
	*set_buff |= ( 1 << 7 );
 101a3ba:	9c00      	ldr	r4, [sp, #0]
	*set_buff |= ( 1 << 4 );
 101a3bc:	231f      	movs	r3, #31
	*set_buff |= ( 1 << 7 );
 101a3be:	20bd      	movs	r0, #189	; 0xbd
	*set_buff |= ( 1 << 7 );
 101a3c0:	21f1      	movs	r1, #241	; 0xf1
	*set_buff |= ( 1 << 7 );
 101a3c2:	7060      	strb	r0, [r4, #1]
	*set_buff |= ( 1 << 7 );
 101a3c4:	70a1      	strb	r1, [r4, #2]
	*set_buff |= ( 1 << 4 );
 101a3c6:	70e3      	strb	r3, [r4, #3]
	*set_buff |= ( 1 << 4 );
 101a3c8:	7163      	strb	r3, [r4, #5]
	*set_buff |= ( 1 << 4 );
 101a3ca:	7263      	strb	r3, [r4, #9]
	table_size += DIM_MFG_PROC_USED;
 101a3cc:	4455      	add	r5, sl
	*set_buff |= ( 1 << 7 );
 101a3ce:	23c1      	movs	r3, #193	; 0xc1
	*set_buff |= ( 1 << 7 );
 101a3d0:	22cf      	movs	r2, #207	; 0xcf
	*set_buff |= ( 1 << 7 );
 101a3d2:	20fc      	movs	r0, #252	; 0xfc
	*set_buff |= ( 1 << 7 );
 101a3d4:	21f0      	movs	r1, #240	; 0xf0
	*set_buff |= ( 1 << 7 );
 101a3d6:	7223      	strb	r3, [r4, #8]
	*set_buff |= ( 1 << 7 );
 101a3d8:	7022      	strb	r2, [r4, #0]
	*set_buff |= ( 1 << 7 );
 101a3da:	71a0      	strb	r0, [r4, #6]
	*set_buff |= ( 1 << 7 );
 101a3dc:	71e1      	strb	r1, [r4, #7]
	table_size += DIM_MFG_PROC_USED;
 101a3de:	b2ad      	uxth	r5, r5
	*set_buff |= ( 1 << 4 );
 101a3e0:	2301      	movs	r3, #1
 101a3e2:	9c01      	ldr	r4, [sp, #4]
 101a3e4:	e001      	b.n	101a3ea <GRAL_APP_usSt_0_get_size+0x15a>
 101a3e6:	f817 2f01 	ldrb.w	r2, [r7, #1]!
			nbr_octets = i + 1;
 101a3ea:	2a00      	cmp	r2, #0
 101a3ec:	bf18      	it	ne
 101a3ee:	4699      	movne	r9, r3
 101a3f0:	1c59      	adds	r1, r3, #1
	for (i = 0; i < sizeof(set_buff); i++) {
 101a3f2:	42a7      	cmp	r7, r4
 101a3f4:	b2cb      	uxtb	r3, r1
 101a3f6:	d1f6      	bne.n	101a3e6 <GRAL_APP_usSt_0_get_size+0x156>
	memset(&set_buff, 0, sizeof(set_buff));
 101a3f8:	2228      	movs	r2, #40	; 0x28
 101a3fa:	2100      	movs	r1, #0
 101a3fc:	4b0d      	ldr	r3, [pc, #52]	; (101a434 <GRAL_APP_usSt_0_get_size+0x1a4>)
 101a3fe:	480c      	ldr	r0, [pc, #48]	; (101a430 <GRAL_APP_usSt_0_get_size+0x1a0>)
 101a400:	9401      	str	r4, [sp, #4]
 101a402:	4798      	blx	r3
	GRAL_APP_vLoad_mfg_tbls_used(&set_buff[0]);
 101a404:	4b0c      	ldr	r3, [pc, #48]	; (101a438 <GRAL_APP_usSt_0_get_size+0x1a8>)
 101a406:	480a      	ldr	r0, [pc, #40]	; (101a430 <GRAL_APP_usSt_0_get_size+0x1a0>)
 101a408:	4798      	blx	r3
	table_size += DIM_STD_TBLS_USED;
 101a40a:	444d      	add	r5, r9
	GRAL_APP_vLoad_mfg_tbls_used(&set_buff[0]);
 101a40c:	9c01      	ldr	r4, [sp, #4]
	table_size += DIM_STD_TBLS_USED;
 101a40e:	b2ad      	uxth	r5, r5
	GRAL_APP_vLoad_mfg_tbls_used(&set_buff[0]);
 101a410:	2301      	movs	r3, #1
		if (set_buff[i] > 0) {
 101a412:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 101a416:	1c5a      	adds	r2, r3, #1
			nbr_octets = i + 1;
 101a418:	2900      	cmp	r1, #0
 101a41a:	bf18      	it	ne
 101a41c:	4698      	movne	r8, r3
	for (i = 0; i < sizeof(set_buff); i++) {
 101a41e:	42a6      	cmp	r6, r4
 101a420:	b2d3      	uxtb	r3, r2
 101a422:	d1f6      	bne.n	101a412 <GRAL_APP_usSt_0_get_size+0x182>
	table_size += DIM_MFG_TBLS_USED;
 101a424:	eb05 0008 	add.w	r0, r5, r8
}
 101a428:	b280      	uxth	r0, r0
 101a42a:	b005      	add	sp, #20
 101a42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 101a430:	20000bd4 	.word	0x20000bd4
 101a434:	01030b71 	.word	0x01030b71
 101a438:	0101a235 	.word	0x0101a235

0101a43c <GRAL_APP_vLoad_std_proc_used>:
	*set_buff = 0;
 101a43c:	2300      	movs	r3, #0
	*set_buff |= ( 1 << 7 );
 101a43e:	21eb      	movs	r1, #235	; 0xeb
	*set_buff |= ( 1 << 3 );
 101a440:	220f      	movs	r2, #15
	*set_buff |= ( 1 << 7 );
 101a442:	7001      	strb	r1, [r0, #0]
	*set_buff |= ( 1 << 3 );
 101a444:	7042      	strb	r2, [r0, #1]
	*set_buff = 0;
 101a446:	7083      	strb	r3, [r0, #2]
	*set_buff = 0;
 101a448:	70c3      	strb	r3, [r0, #3]
	*set_buff = 0;
 101a44a:	7103      	strb	r3, [r0, #4]
 101a44c:	4770      	bx	lr
 101a44e:	bf00      	nop

0101a450 <GRAL_APP_vLoad_mfg_proc_used>:
void GRAL_APP_vLoad_mfg_proc_used(uint8_t* set_buff) {
 101a450:	b4f0      	push	{r4, r5, r6, r7}
		*set_buff |= ( 1 << 1 );
 101a452:	2202      	movs	r2, #2
		*set_buff = 0;
 101a454:	2300      	movs	r3, #0
		*set_buff |= ( 1 << 7 );
 101a456:	27f0      	movs	r7, #240	; 0xf0
		*set_buff |= ( 1 << 7 );
 101a458:	26c3      	movs	r6, #195	; 0xc3
		*set_buff |= ( 1 << 6 );
 101a45a:	257f      	movs	r5, #127	; 0x7f
		*set_buff |= ( 1 << 2 );
 101a45c:	2404      	movs	r4, #4
		*set_buff |= ( 1 << 6 );
 101a45e:	2140      	movs	r1, #64	; 0x40
		*set_buff |= ( 1 << 1 );
 101a460:	7042      	strb	r2, [r0, #1]
		*set_buff |= ( 1 << 1 );
 101a462:	2203      	movs	r2, #3
		*set_buff |= ( 1 << 7 );
 101a464:	7307      	strb	r7, [r0, #12]
		*set_buff |= ( 1 << 7 );
 101a466:	7346      	strb	r6, [r0, #13]
		*set_buff |= ( 1 << 6 );
 101a468:	73c5      	strb	r5, [r0, #15]
		*set_buff |= ( 1 << 2 );
 101a46a:	7404      	strb	r4, [r0, #16]
		*set_buff |= ( 1 << 6 );
 101a46c:	7001      	strb	r1, [r0, #0]
		*set_buff |= ( 1 << 6 );
 101a46e:	7481      	strb	r1, [r0, #18]
		*set_buff = 0;
 101a470:	7083      	strb	r3, [r0, #2]
		*set_buff = 0;
 101a472:	70c3      	strb	r3, [r0, #3]
		*set_buff = 0;
 101a474:	7103      	strb	r3, [r0, #4]
		*set_buff = 0;
 101a476:	7143      	strb	r3, [r0, #5]
		*set_buff = 0;
 101a478:	7183      	strb	r3, [r0, #6]
		*set_buff = 0;
 101a47a:	71c3      	strb	r3, [r0, #7]
		*set_buff = 0;
 101a47c:	7203      	strb	r3, [r0, #8]
		*set_buff = 0;
 101a47e:	7243      	strb	r3, [r0, #9]
		*set_buff = 0;
 101a480:	7283      	strb	r3, [r0, #10]
		*set_buff = 0;
 101a482:	72c3      	strb	r3, [r0, #11]
		*set_buff = 0;
 101a484:	7443      	strb	r3, [r0, #17]
		*set_buff = 0;
 101a486:	74c3      	strb	r3, [r0, #19]
		*set_buff = 0;
 101a488:	7503      	strb	r3, [r0, #20]
		*set_buff = 0;
 101a48a:	7543      	strb	r3, [r0, #21]
		*set_buff = 0;
 101a48c:	7583      	strb	r3, [r0, #22]
		*set_buff = 0;
 101a48e:	75c3      	strb	r3, [r0, #23]
		*set_buff = 0;
 101a490:	7603      	strb	r3, [r0, #24]
		*set_buff |= ( 1 << 1 );
 101a492:	7382      	strb	r2, [r0, #14]
		*set_buff |= ( 1 << 1 );
 101a494:	7642      	strb	r2, [r0, #25]
}
 101a496:	bcf0      	pop	{r4, r5, r6, r7}
 101a498:	4770      	bx	lr
 101a49a:	bf00      	nop

0101a49c <GRAL_APP_vLoad_std_tbls_write>:
void GRAL_APP_vLoad_std_tbls_write(uint8_t* set_buff) {
 101a49c:	b4f0      	push	{r4, r5, r6, r7}
		*set_buff |= ( 1 << 7 );
 101a49e:	21c2      	movs	r1, #194	; 0xc2
		*set_buff |= ( 1 << 5 );
 101a4a0:	2228      	movs	r2, #40	; 0x28
		*set_buff |= ( 1 << 7 );
 101a4a2:	23e0      	movs	r3, #224	; 0xe0
		*set_buff |= ( 1 << 3 );
 101a4a4:	270f      	movs	r7, #15
		*set_buff |= ( 1 << 4 );
 101a4a6:	261e      	movs	r6, #30
		*set_buff |= ( 1 << 6 );
 101a4a8:	2568      	movs	r5, #104	; 0x68
		*set_buff |= ( 1 << 6 );
 101a4aa:	2460      	movs	r4, #96	; 0x60
		*set_buff |= ( 1 << 7 );
 101a4ac:	7001      	strb	r1, [r0, #0]
		*set_buff |= ( 1 << 5 );
 101a4ae:	7042      	strb	r2, [r0, #1]
		*set_buff |= ( 1 << 7 );
 101a4b0:	2180      	movs	r1, #128	; 0x80
		*set_buff |= ( 1 << 3 );
 101a4b2:	220a      	movs	r2, #10
		*set_buff |= ( 1 << 7 );
 101a4b4:	7083      	strb	r3, [r0, #2]
	*set_buff = 0;
 101a4b6:	2300      	movs	r3, #0
		*set_buff |= ( 1 << 3 );
 101a4b8:	70c7      	strb	r7, [r0, #3]
		*set_buff |= ( 1 << 4 );
 101a4ba:	7146      	strb	r6, [r0, #5]
		*set_buff |= ( 1 << 6 );
 101a4bc:	7185      	strb	r5, [r0, #6]
		*set_buff |= ( 1 << 6 );
 101a4be:	71c4      	strb	r4, [r0, #7]
		*set_buff |= ( 1 << 7 );
 101a4c0:	7201      	strb	r1, [r0, #8]
		*set_buff |= ( 1 << 3 );
 101a4c2:	7242      	strb	r2, [r0, #9]
	*set_buff = 0;
 101a4c4:	7103      	strb	r3, [r0, #4]
	*set_buff = 0;
 101a4c6:	7283      	strb	r3, [r0, #10]
	*set_buff = 0;
 101a4c8:	72c3      	strb	r3, [r0, #11]
	*set_buff = 0;
 101a4ca:	7303      	strb	r3, [r0, #12]
	*set_buff = 0;
 101a4cc:	7343      	strb	r3, [r0, #13]
	*set_buff = 0;
 101a4ce:	7383      	strb	r3, [r0, #14]
}
 101a4d0:	bcf0      	pop	{r4, r5, r6, r7}
 101a4d2:	4770      	bx	lr

0101a4d4 <GRAL_APP_vLoad_mfg_tbls_write>:
void GRAL_APP_vLoad_mfg_tbls_write(uint8_t* set_buff) {
 101a4d4:	b430      	push	{r4, r5}
	*set_buff = 0;
 101a4d6:	2300      	movs	r3, #0
		*set_buff |= ( 1 << 6 );
 101a4d8:	257a      	movs	r5, #122	; 0x7a
		*set_buff |= ( 1 << 7 );
 101a4da:	2480      	movs	r4, #128	; 0x80
		*set_buff |= ( 1 << 0 );
 101a4dc:	2201      	movs	r2, #1
		*set_buff |= ( 1 << 1 );
 101a4de:	2102      	movs	r1, #2
		*set_buff |= ( 1 << 6 );
 101a4e0:	7005      	strb	r5, [r0, #0]
		*set_buff |= ( 1 << 7 );
 101a4e2:	7044      	strb	r4, [r0, #1]
		*set_buff |= ( 1 << 1 );
 101a4e4:	7241      	strb	r1, [r0, #9]
		*set_buff |= ( 1 << 0 );
 101a4e6:	7082      	strb	r2, [r0, #2]
		*set_buff |= ( 1 << 0 );
 101a4e8:	7482      	strb	r2, [r0, #18]
	*set_buff = 0;
 101a4ea:	70c3      	strb	r3, [r0, #3]
	*set_buff = 0;
 101a4ec:	7103      	strb	r3, [r0, #4]
	*set_buff = 0;
 101a4ee:	7143      	strb	r3, [r0, #5]
	*set_buff = 0;
 101a4f0:	7183      	strb	r3, [r0, #6]
	*set_buff = 0;
 101a4f2:	71c3      	strb	r3, [r0, #7]
	*set_buff = 0;
 101a4f4:	7203      	strb	r3, [r0, #8]
	*set_buff = 0;
 101a4f6:	7283      	strb	r3, [r0, #10]
	*set_buff = 0;
 101a4f8:	72c3      	strb	r3, [r0, #11]
	*set_buff = 0;
 101a4fa:	7303      	strb	r3, [r0, #12]
	*set_buff = 0;
 101a4fc:	7343      	strb	r3, [r0, #13]
	*set_buff = 0;
 101a4fe:	7383      	strb	r3, [r0, #14]
	*set_buff = 0;
 101a500:	73c3      	strb	r3, [r0, #15]
	*set_buff = 0;
 101a502:	7403      	strb	r3, [r0, #16]
	*set_buff = 0;
 101a504:	7443      	strb	r3, [r0, #17]
	*set_buff = 0;
 101a506:	74c3      	strb	r3, [r0, #19]
	*set_buff = 0;
 101a508:	7503      	strb	r3, [r0, #20]
	*set_buff = 0;
 101a50a:	7543      	strb	r3, [r0, #21]
	*set_buff = 0;
 101a50c:	7583      	strb	r3, [r0, #22]
	*set_buff = 0;
 101a50e:	75c3      	strb	r3, [r0, #23]
	*set_buff = 0;
 101a510:	7603      	strb	r3, [r0, #24]
	*set_buff = 0;
 101a512:	7643      	strb	r3, [r0, #25]
	*set_buff = 0;
 101a514:	7683      	strb	r3, [r0, #26]
	*set_buff = 0;
 101a516:	76c3      	strb	r3, [r0, #27]
	*set_buff = 0;
 101a518:	7703      	strb	r3, [r0, #28]
	*set_buff = 0;
 101a51a:	7743      	strb	r3, [r0, #29]
	*set_buff = 0;
 101a51c:	7783      	strb	r3, [r0, #30]
	*set_buff = 0;
 101a51e:	77c3      	strb	r3, [r0, #31]
	*set_buff = 0;
 101a520:	f880 3020 	strb.w	r3, [r0, #32]
	*set_buff = 0;
 101a524:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
}
 101a528:	bc30      	pop	{r4, r5}
 101a52a:	4770      	bx	lr

0101a52c <GRAL_APP_bSt_0_execute_table_reading>:
bool GRAL_APP_bSt_0_execute_table_reading(uint8_t *table_buffer) {
 101a52c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 101a530:	b099      	sub	sp, #100	; 0x64
	memcpy(&table_buffer[k], MANUFACTURER_GRAL, 4);
 101a532:	4a90      	ldr	r2, [pc, #576]	; (101a774 <GRAL_APP_bSt_0_execute_table_reading+0x248>)
 101a534:	9301      	str	r3, [sp, #4]
bool GRAL_APP_bSt_0_execute_table_reading(uint8_t *table_buffer) {
 101a536:	4603      	mov	r3, r0
	table_buffer[k++] = MAX_PROC_PARM_LENGTH;
 101a538:	2513      	movs	r5, #19
	memcpy(&table_buffer[k], MANUFACTURER_GRAL, 4);
 101a53a:	6810      	ldr	r0, [r2, #0]
	memset(&set_buff, 0, sizeof(set_buff));
 101a53c:	4e8e      	ldr	r6, [pc, #568]	; (101a778 <GRAL_APP_bSt_0_execute_table_reading+0x24c>)
	memcpy(&table_buffer[k], MANUFACTURER_GRAL, 4);
 101a53e:	f8c3 0003 	str.w	r0, [r3, #3]
	table_buffer[k++] = DEFAULT_SET_USED;
 101a542:	2100      	movs	r1, #0
	table_buffer[k++] = MAX_PROC_PARM_LENGTH;
 101a544:	725d      	strb	r5, [r3, #9]
	table_buffer[k++] = FORMAT_CONTROL_2;
 101a546:	f04f 0c0c 	mov.w	ip, #12
	table_buffer[k++] = FORMAT_CONTROL_3;
 101a54a:	f04f 0e9a 	mov.w	lr, #154	; 0x9a
	table_buffer[k++] = FORMAT_CONTROL_1;
 101a54e:	2202      	movs	r2, #2
	table_buffer[k++] = MAX_RESP_DATA_LEN;
 101a550:	461d      	mov	r5, r3
 101a552:	2018      	movs	r0, #24
	table_buffer[k++] = FORMAT_CONTROL_2;
 101a554:	f883 c001 	strb.w	ip, [r3, #1]
	table_buffer[k++] = FORMAT_CONTROL_3;
 101a558:	f883 e002 	strb.w	lr, [r3, #2]
	table_buffer[k++] = MAX_RESP_DATA_LEN;
 101a55c:	7298      	strb	r0, [r3, #10]
	table_buffer[k++] = FORMAT_CONTROL_1;
 101a55e:	701a      	strb	r2, [r3, #0]
	table_buffer[k++] = NAMEPLATE_TYPE;
 101a560:	71da      	strb	r2, [r3, #7]
	table_buffer[k++] = DEFAULT_SET_USED;
 101a562:	7219      	strb	r1, [r3, #8]
	table_buffer[k++] = STD_REVISION_NO;
 101a564:	7319      	strb	r1, [r3, #12]
	memcpy(&table_buffer[k], MANUFACTURER_GRAL, 4);
 101a566:	9303      	str	r3, [sp, #12]
	table_buffer[k++] = STD_VERSION_NO;
 101a568:	f04f 0301 	mov.w	r3, #1
 101a56c:	72eb      	strb	r3, [r5, #11]
	memset(&set_buff, 0, sizeof(set_buff));
 101a56e:	2228      	movs	r2, #40	; 0x28
 101a570:	4b82      	ldr	r3, [pc, #520]	; (101a77c <GRAL_APP_bSt_0_execute_table_reading+0x250>)
 101a572:	4630      	mov	r0, r6
 101a574:	4798      	blx	r3
	*set_buff |= ( 1 << 7 );
 101a576:	20bd      	movs	r0, #189	; 0xbd
	*set_buff |= ( 1 << 7 );
 101a578:	f04f 0ef1 	mov.w	lr, #241	; 0xf1
	*set_buff |= ( 1 << 7 );
 101a57c:	25fc      	movs	r5, #252	; 0xfc
	*set_buff |= ( 1 << 7 );
 101a57e:	f06f 033e 	mvn.w	r3, #62	; 0x3e
	*set_buff |= ( 1 << 7 );
 101a582:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
	*set_buff |= ( 1 << 7 );
 101a586:	21cf      	movs	r1, #207	; 0xcf
	*set_buff |= ( 1 << 7 );
 101a588:	7070      	strb	r0, [r6, #1]
	*set_buff |= ( 1 << 4 );
 101a58a:	201f      	movs	r0, #31
	*set_buff |= ( 1 << 7 );
 101a58c:	f886 e002 	strb.w	lr, [r6, #2]
	*set_buff |= ( 1 << 7 );
 101a590:	71b5      	strb	r5, [r6, #6]
	*set_buff |= ( 1 << 7 );
 101a592:	7233      	strb	r3, [r6, #8]
 101a594:	46b1      	mov	r9, r6
	*set_buff |= ( 1 << 4 );
 101a596:	2201      	movs	r2, #1
	*set_buff |= ( 1 << 7 );
 101a598:	f886 c007 	strb.w	ip, [r6, #7]
 101a59c:	f106 0e27 	add.w	lr, r6, #39	; 0x27
	*set_buff |= ( 1 << 4 );
 101a5a0:	9602      	str	r6, [sp, #8]
 101a5a2:	4635      	mov	r5, r6
	*set_buff |= ( 1 << 7 );
 101a5a4:	7031      	strb	r1, [r6, #0]
	*set_buff |= ( 1 << 4 );
 101a5a6:	70f0      	strb	r0, [r6, #3]
	*set_buff |= ( 1 << 4 );
 101a5a8:	7170      	strb	r0, [r6, #5]
	*set_buff |= ( 1 << 4 );
 101a5aa:	7270      	strb	r0, [r6, #9]
 101a5ac:	9b01      	ldr	r3, [sp, #4]
 101a5ae:	e001      	b.n	101a5b4 <GRAL_APP_bSt_0_execute_table_reading+0x88>
 101a5b0:	f815 1f01 	ldrb.w	r1, [r5, #1]!
			nbr_octets = i + 1;
 101a5b4:	2900      	cmp	r1, #0
 101a5b6:	bf18      	it	ne
 101a5b8:	4614      	movne	r4, r2
 101a5ba:	1c50      	adds	r0, r2, #1
	for (i = 0; i < sizeof(set_buff); i++) {
 101a5bc:	4575      	cmp	r5, lr
 101a5be:	b2c2      	uxtb	r2, r0
 101a5c0:	d1f6      	bne.n	101a5b0 <GRAL_APP_bSt_0_execute_table_reading+0x84>
 101a5c2:	9304      	str	r3, [sp, #16]
	memset(&set_buff, 0, sizeof(set_buff));
 101a5c4:	486c      	ldr	r0, [pc, #432]	; (101a778 <GRAL_APP_bSt_0_execute_table_reading+0x24c>)
	table_buffer[k++] = DIM_STD_TBLS_USED;
 101a5c6:	9b03      	ldr	r3, [sp, #12]
 101a5c8:	1e46      	subs	r6, r0, #1
 101a5ca:	735c      	strb	r4, [r3, #13]
	memset(&set_buff, 0, sizeof(set_buff));
 101a5cc:	2228      	movs	r2, #40	; 0x28
 101a5ce:	2100      	movs	r1, #0
 101a5d0:	4b6a      	ldr	r3, [pc, #424]	; (101a77c <GRAL_APP_bSt_0_execute_table_reading+0x250>)
 101a5d2:	4798      	blx	r3
	GRAL_APP_vLoad_mfg_tbls_used(&set_buff[0]);
 101a5d4:	4b6a      	ldr	r3, [pc, #424]	; (101a780 <GRAL_APP_bSt_0_execute_table_reading+0x254>)
 101a5d6:	1c70      	adds	r0, r6, #1
 101a5d8:	4798      	blx	r3
 101a5da:	9b04      	ldr	r3, [sp, #16]
 101a5dc:	9601      	str	r6, [sp, #4]
 101a5de:	2201      	movs	r2, #1
 101a5e0:	4634      	mov	r4, r6
		if (set_buff[i] > 0) {
 101a5e2:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 101a5e6:	1c51      	adds	r1, r2, #1
			nbr_octets = i + 1;
 101a5e8:	2800      	cmp	r0, #0
 101a5ea:	bf18      	it	ne
 101a5ec:	4613      	movne	r3, r2
	for (i = 0; i < sizeof(set_buff); i++) {
 101a5ee:	42ac      	cmp	r4, r5
 101a5f0:	b2ca      	uxtb	r2, r1
 101a5f2:	d1f6      	bne.n	101a5e2 <GRAL_APP_bSt_0_execute_table_reading+0xb6>
	table_buffer[k++] = DIM_MFG_TBLS_USED;
 101a5f4:	9a03      	ldr	r2, [sp, #12]
	memset(&set_buff, 0, sizeof(set_buff));
 101a5f6:	4860      	ldr	r0, [pc, #384]	; (101a778 <GRAL_APP_bSt_0_execute_table_reading+0x24c>)
	table_buffer[k++] = DIM_MFG_TBLS_USED;
 101a5f8:	7393      	strb	r3, [r2, #14]
	memset(&set_buff, 0, sizeof(set_buff));
 101a5fa:	2100      	movs	r1, #0
 101a5fc:	2228      	movs	r2, #40	; 0x28
 101a5fe:	4b5f      	ldr	r3, [pc, #380]	; (101a77c <GRAL_APP_bSt_0_execute_table_reading+0x250>)
 101a600:	9401      	str	r4, [sp, #4]
 101a602:	4798      	blx	r3
	*set_buff |= ( 1 << 7 );
 101a604:	9802      	ldr	r0, [sp, #8]
	*set_buff |= ( 1 << 3 );
 101a606:	9c01      	ldr	r4, [sp, #4]
 101a608:	230f      	movs	r3, #15
 101a60a:	7043      	strb	r3, [r0, #1]
 101a60c:	4b5a      	ldr	r3, [pc, #360]	; (101a778 <GRAL_APP_bSt_0_execute_table_reading+0x24c>)
 101a60e:	9302      	str	r3, [sp, #8]
	*set_buff |= ( 1 << 7 );
 101a610:	21eb      	movs	r1, #235	; 0xeb
	*set_buff |= ( 1 << 3 );
 101a612:	461a      	mov	r2, r3
	*set_buff |= ( 1 << 7 );
 101a614:	7001      	strb	r1, [r0, #0]
	*set_buff |= ( 1 << 3 );
 101a616:	2301      	movs	r3, #1
 101a618:	e001      	b.n	101a61e <GRAL_APP_bSt_0_execute_table_reading+0xf2>
 101a61a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
			nbr_octets = i + 1;
 101a61e:	2900      	cmp	r1, #0
 101a620:	bf18      	it	ne
 101a622:	469b      	movne	fp, r3
 101a624:	1c58      	adds	r0, r3, #1
	for (i = 0; i < sizeof(set_buff); i++) {
 101a626:	42a2      	cmp	r2, r4
 101a628:	b2c3      	uxtb	r3, r0
 101a62a:	d1f6      	bne.n	101a61a <GRAL_APP_bSt_0_execute_table_reading+0xee>
	table_buffer[k++] = DIM_STD_PROC_USED;
 101a62c:	9b03      	ldr	r3, [sp, #12]
	memset(&set_buff, 0, sizeof(set_buff));
 101a62e:	4852      	ldr	r0, [pc, #328]	; (101a778 <GRAL_APP_bSt_0_execute_table_reading+0x24c>)
	table_buffer[k++] = DIM_STD_PROC_USED;
 101a630:	f883 b00f 	strb.w	fp, [r3, #15]
	memset(&set_buff, 0, sizeof(set_buff));
 101a634:	2228      	movs	r2, #40	; 0x28
 101a636:	2100      	movs	r1, #0
 101a638:	4b50      	ldr	r3, [pc, #320]	; (101a77c <GRAL_APP_bSt_0_execute_table_reading+0x250>)
 101a63a:	9401      	str	r4, [sp, #4]
 101a63c:	4798      	blx	r3
		*set_buff |= ( 1 << 6 );
 101a63e:	9c02      	ldr	r4, [sp, #8]
		*set_buff |= ( 1 << 1 );
 101a640:	2302      	movs	r3, #2
 101a642:	7063      	strb	r3, [r4, #1]
		*set_buff |= ( 1 << 1 );
 101a644:	2303      	movs	r3, #3
		*set_buff |= ( 1 << 7 );
 101a646:	20f0      	movs	r0, #240	; 0xf0
		*set_buff |= ( 1 << 7 );
 101a648:	22c3      	movs	r2, #195	; 0xc3
		*set_buff |= ( 1 << 1 );
 101a64a:	73a3      	strb	r3, [r4, #14]
		*set_buff |= ( 1 << 1 );
 101a64c:	7663      	strb	r3, [r4, #25]
 101a64e:	4b4a      	ldr	r3, [pc, #296]	; (101a778 <GRAL_APP_bSt_0_execute_table_reading+0x24c>)
		*set_buff |= ( 1 << 7 );
 101a650:	7320      	strb	r0, [r4, #12]
		*set_buff |= ( 1 << 6 );
 101a652:	2140      	movs	r1, #64	; 0x40
		*set_buff |= ( 1 << 7 );
 101a654:	7362      	strb	r2, [r4, #13]
		*set_buff |= ( 1 << 6 );
 101a656:	207f      	movs	r0, #127	; 0x7f
		*set_buff |= ( 1 << 2 );
 101a658:	2204      	movs	r2, #4
 101a65a:	7422      	strb	r2, [r4, #16]
		*set_buff |= ( 1 << 6 );
 101a65c:	7021      	strb	r1, [r4, #0]
		*set_buff |= ( 1 << 6 );
 101a65e:	74a1      	strb	r1, [r4, #18]
		*set_buff |= ( 1 << 6 );
 101a660:	73e0      	strb	r0, [r4, #15]
		*set_buff |= ( 1 << 1 );
 101a662:	9302      	str	r3, [sp, #8]
 101a664:	461a      	mov	r2, r3
 101a666:	9c01      	ldr	r4, [sp, #4]
 101a668:	2301      	movs	r3, #1
 101a66a:	e001      	b.n	101a670 <GRAL_APP_bSt_0_execute_table_reading+0x144>
 101a66c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
			nbr_octets = i + 1;
 101a670:	2900      	cmp	r1, #0
 101a672:	bf18      	it	ne
 101a674:	469a      	movne	sl, r3
 101a676:	1c58      	adds	r0, r3, #1
	for (i = 0; i < sizeof(set_buff); i++) {
 101a678:	42a2      	cmp	r2, r4
 101a67a:	b2c3      	uxtb	r3, r0
 101a67c:	d1f6      	bne.n	101a66c <GRAL_APP_bSt_0_execute_table_reading+0x140>
 101a67e:	9401      	str	r4, [sp, #4]
	table_buffer[k++] = DIM_MFG_PROC_USED;
 101a680:	9c03      	ldr	r4, [sp, #12]
	table_buffer[k++] = DIM_MFG_STATUS_USED;
 101a682:	220f      	movs	r2, #15
	table_buffer[k++] = NBR_PENDING;
 101a684:	2306      	movs	r3, #6
	table_buffer[k++] = DIM_MFG_PROC_USED;
 101a686:	f884 a010 	strb.w	sl, [r4, #16]
	table_buffer[k++] = DIM_MFG_STATUS_USED;
 101a68a:	7462      	strb	r2, [r4, #17]
	table_buffer[k++] = NBR_PENDING;
 101a68c:	74a3      	strb	r3, [r4, #18]
	memset(&set_buff, 0, sizeof(set_buff));
 101a68e:	2228      	movs	r2, #40	; 0x28
 101a690:	2100      	movs	r1, #0
 101a692:	4b3a      	ldr	r3, [pc, #232]	; (101a77c <GRAL_APP_bSt_0_execute_table_reading+0x250>)
 101a694:	a80e      	add	r0, sp, #56	; 0x38
 101a696:	4798      	blx	r3
	*set_buff |= ( 1 << 7 );
 101a698:	23cf      	movs	r3, #207	; 0xcf
 101a69a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
 101a69e:	9304      	str	r3, [sp, #16]
	*set_buff |= ( 1 << 7 );
 101a6a0:	f06f 0303 	mvn.w	r3, #3
 101a6a4:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
	*set_buff |= ( 1 << 7 );
 101a6a8:	f06f 030f 	mvn.w	r3, #15
	*set_buff |= ( 1 << 4 );
 101a6ac:	251f      	movs	r5, #31
	*set_buff |= ( 1 << 7 );
 101a6ae:	f04f 0abd 	mov.w	sl, #189	; 0xbd
	*set_buff |= ( 1 << 7 );
 101a6b2:	f04f 0bf1 	mov.w	fp, #241	; 0xf1
	*set_buff |= ( 1 << 7 );
 101a6b6:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
	*set_buff |= ( 1 << 7 );
 101a6ba:	f06f 033e 	mvn.w	r3, #62	; 0x3e
	memset(&set_buff, 0, sizeof(set_buff));
 101a6be:	2228      	movs	r2, #40	; 0x28
 101a6c0:	2100      	movs	r1, #0
	*set_buff |= ( 1 << 4 );
 101a6c2:	f88d 503b 	strb.w	r5, [sp, #59]	; 0x3b
	*set_buff |= ( 1 << 4 );
 101a6c6:	f88d 503d 	strb.w	r5, [sp, #61]	; 0x3d
	*set_buff |= ( 1 << 4 );
 101a6ca:	f88d 5041 	strb.w	r5, [sp, #65]	; 0x41
	*set_buff |= ( 1 << 7 );
 101a6ce:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	memset(&set_buff, 0, sizeof(set_buff));
 101a6d2:	4829      	ldr	r0, [pc, #164]	; (101a778 <GRAL_APP_bSt_0_execute_table_reading+0x24c>)
 101a6d4:	4b29      	ldr	r3, [pc, #164]	; (101a77c <GRAL_APP_bSt_0_execute_table_reading+0x250>)
	*set_buff |= ( 1 << 7 );
 101a6d6:	f88d a039 	strb.w	sl, [sp, #57]	; 0x39
	*set_buff |= ( 1 << 7 );
 101a6da:	f88d b03a 	strb.w	fp, [sp, #58]	; 0x3a
	memset(&set_buff, 0, sizeof(set_buff));
 101a6de:	4798      	blx	r3
	*set_buff |= ( 1 << 7 );
 101a6e0:	9902      	ldr	r1, [sp, #8]
	*set_buff |= ( 1 << 7 );
 101a6e2:	9b04      	ldr	r3, [sp, #16]
 101a6e4:	700b      	strb	r3, [r1, #0]
	*set_buff |= ( 1 << 7 );
 101a6e6:	f06f 0003 	mvn.w	r0, #3
 101a6ea:	7188      	strb	r0, [r1, #6]
	*set_buff |= ( 1 << 7 );
 101a6ec:	f06f 020f 	mvn.w	r2, #15
 101a6f0:	4608      	mov	r0, r1
	*set_buff |= ( 1 << 4 );
 101a6f2:	70cd      	strb	r5, [r1, #3]
	*set_buff |= ( 1 << 4 );
 101a6f4:	714d      	strb	r5, [r1, #5]
	*set_buff |= ( 1 << 7 );
 101a6f6:	71ca      	strb	r2, [r1, #7]
	*set_buff |= ( 1 << 7 );
 101a6f8:	f881 a001 	strb.w	sl, [r1, #1]
	*set_buff |= ( 1 << 7 );
 101a6fc:	f881 b002 	strb.w	fp, [r1, #2]
	*set_buff |= ( 1 << 7 );
 101a700:	f06f 013e 	mvn.w	r1, #62	; 0x3e
 101a704:	7201      	strb	r1, [r0, #8]
	*set_buff |= ( 1 << 4 );
 101a706:	7245      	strb	r5, [r0, #9]
 101a708:	4a1b      	ldr	r2, [pc, #108]	; (101a778 <GRAL_APP_bSt_0_execute_table_reading+0x24c>)
 101a70a:	9202      	str	r2, [sp, #8]
	memcpy( &table_buffer[k], &set_buff[0], DIM_STD_TBLS_USED );
 101a70c:	4620      	mov	r0, r4
	*set_buff |= ( 1 << 4 );
 101a70e:	4619      	mov	r1, r3
	memcpy( &table_buffer[k], &set_buff[0], DIM_STD_TBLS_USED );
 101a710:	3013      	adds	r0, #19
	*set_buff |= ( 1 << 4 );
 101a712:	2301      	movs	r3, #1
 101a714:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 101a716:	9c01      	ldr	r4, [sp, #4]
 101a718:	e001      	b.n	101a71e <GRAL_APP_bSt_0_execute_table_reading+0x1f2>
 101a71a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
			nbr_octets = i + 1;
 101a71e:	2900      	cmp	r1, #0
 101a720:	bf18      	it	ne
 101a722:	461d      	movne	r5, r3
 101a724:	f103 0e01 	add.w	lr, r3, #1
	for (i = 0; i < sizeof(set_buff); i++) {
 101a728:	42a2      	cmp	r2, r4
 101a72a:	fa5f f38e 	uxtb.w	r3, lr
 101a72e:	d1f4      	bne.n	101a71a <GRAL_APP_bSt_0_execute_table_reading+0x1ee>
 101a730:	462a      	mov	r2, r5
	memcpy( &table_buffer[k], &set_buff[0], DIM_STD_TBLS_USED );
 101a732:	a90e      	add	r1, sp, #56	; 0x38
 101a734:	4b13      	ldr	r3, [pc, #76]	; (101a784 <GRAL_APP_bSt_0_execute_table_reading+0x258>)
 101a736:	9401      	str	r4, [sp, #4]
 101a738:	4798      	blx	r3
	memset(&set_buff, 0, sizeof(set_buff));
 101a73a:	2228      	movs	r2, #40	; 0x28
 101a73c:	2100      	movs	r1, #0
 101a73e:	4b0f      	ldr	r3, [pc, #60]	; (101a77c <GRAL_APP_bSt_0_execute_table_reading+0x250>)
 101a740:	480d      	ldr	r0, [pc, #52]	; (101a778 <GRAL_APP_bSt_0_execute_table_reading+0x24c>)
 101a742:	4798      	blx	r3
	*set_buff |= ( 1 << 7 );
 101a744:	9c02      	ldr	r4, [sp, #8]
	*set_buff |= ( 1 << 4 );
 101a746:	231f      	movs	r3, #31
 101a748:	70e3      	strb	r3, [r4, #3]
	*set_buff |= ( 1 << 4 );
 101a74a:	7163      	strb	r3, [r4, #5]
	*set_buff |= ( 1 << 4 );
 101a74c:	7263      	strb	r3, [r4, #9]
	*set_buff |= ( 1 << 7 );
 101a74e:	23c1      	movs	r3, #193	; 0xc1
	*set_buff |= ( 1 << 7 );
 101a750:	20bd      	movs	r0, #189	; 0xbd
	*set_buff |= ( 1 << 7 );
 101a752:	22f1      	movs	r2, #241	; 0xf1
	*set_buff |= ( 1 << 7 );
 101a754:	7223      	strb	r3, [r4, #8]
	*set_buff |= ( 1 << 4 );
 101a756:	4b08      	ldr	r3, [pc, #32]	; (101a778 <GRAL_APP_bSt_0_execute_table_reading+0x24c>)
	*set_buff |= ( 1 << 7 );
 101a758:	7060      	strb	r0, [r4, #1]
	*set_buff |= ( 1 << 7 );
 101a75a:	70a2      	strb	r2, [r4, #2]
	*set_buff |= ( 1 << 7 );
 101a75c:	21cf      	movs	r1, #207	; 0xcf
	*set_buff |= ( 1 << 7 );
 101a75e:	22f0      	movs	r2, #240	; 0xf0
	*set_buff |= ( 1 << 7 );
 101a760:	20fc      	movs	r0, #252	; 0xfc
	*set_buff |= ( 1 << 7 );
 101a762:	71e2      	strb	r2, [r4, #7]
	*set_buff |= ( 1 << 7 );
 101a764:	7021      	strb	r1, [r4, #0]
	*set_buff |= ( 1 << 7 );
 101a766:	71a0      	strb	r0, [r4, #6]
	*set_buff |= ( 1 << 4 );
 101a768:	9302      	str	r3, [sp, #8]
 101a76a:	461a      	mov	r2, r3
 101a76c:	9c01      	ldr	r4, [sp, #4]
 101a76e:	2301      	movs	r3, #1
 101a770:	e00c      	b.n	101a78c <GRAL_APP_bSt_0_execute_table_reading+0x260>
 101a772:	bf00      	nop
 101a774:	01031594 	.word	0x01031594
 101a778:	20000bd4 	.word	0x20000bd4
 101a77c:	01030b71 	.word	0x01030b71
 101a780:	0101a235 	.word	0x0101a235
 101a784:	01030a3d 	.word	0x01030a3d
 101a788:	f812 1f01 	ldrb.w	r1, [r2, #1]!
			nbr_octets = i + 1;
 101a78c:	2900      	cmp	r1, #0
 101a78e:	bf18      	it	ne
 101a790:	461f      	movne	r7, r3
 101a792:	1c58      	adds	r0, r3, #1
	for (i = 0; i < sizeof(set_buff); i++) {
 101a794:	42a2      	cmp	r2, r4
 101a796:	b2c3      	uxtb	r3, r0
 101a798:	d1f6      	bne.n	101a788 <GRAL_APP_bSt_0_execute_table_reading+0x25c>
	memset(&set_buff, 0, sizeof(set_buff));
 101a79a:	2228      	movs	r2, #40	; 0x28
 101a79c:	2100      	movs	r1, #0
 101a79e:	4bb5      	ldr	r3, [pc, #724]	; (101aa74 <GRAL_APP_bSt_0_execute_table_reading+0x548>)
 101a7a0:	9401      	str	r4, [sp, #4]
 101a7a2:	a80e      	add	r0, sp, #56	; 0x38
 101a7a4:	4798      	blx	r3
	GRAL_APP_vLoad_mfg_tbls_used(&set_buff[0]);
 101a7a6:	a80e      	add	r0, sp, #56	; 0x38
 101a7a8:	4bb3      	ldr	r3, [pc, #716]	; (101aa78 <GRAL_APP_bSt_0_execute_table_reading+0x54c>)
 101a7aa:	4798      	blx	r3
	memset(&set_buff, 0, sizeof(set_buff));
 101a7ac:	2228      	movs	r2, #40	; 0x28
 101a7ae:	2100      	movs	r1, #0
 101a7b0:	4bb0      	ldr	r3, [pc, #704]	; (101aa74 <GRAL_APP_bSt_0_execute_table_reading+0x548>)
 101a7b2:	48b2      	ldr	r0, [pc, #712]	; (101aa7c <GRAL_APP_bSt_0_execute_table_reading+0x550>)
 101a7b4:	4798      	blx	r3
	k += DIM_STD_TBLS_USED;
 101a7b6:	3713      	adds	r7, #19
	memcpy( &table_buffer[k], &set_buff[0], DIM_MFG_TBLS_USED );
 101a7b8:	9b03      	ldr	r3, [sp, #12]
	GRAL_APP_vLoad_mfg_tbls_used(&set_buff[0]);
 101a7ba:	48b0      	ldr	r0, [pc, #704]	; (101aa7c <GRAL_APP_bSt_0_execute_table_reading+0x550>)
	k += DIM_STD_TBLS_USED;
 101a7bc:	b2ff      	uxtb	r7, r7
	memcpy( &table_buffer[k], &set_buff[0], DIM_MFG_TBLS_USED );
 101a7be:	19dd      	adds	r5, r3, r7
	GRAL_APP_vLoad_mfg_tbls_used(&set_buff[0]);
 101a7c0:	4bad      	ldr	r3, [pc, #692]	; (101aa78 <GRAL_APP_bSt_0_execute_table_reading+0x54c>)
 101a7c2:	4798      	blx	r3
 101a7c4:	9c01      	ldr	r4, [sp, #4]
 101a7c6:	4632      	mov	r2, r6
 101a7c8:	2301      	movs	r3, #1
		if (set_buff[i] > 0) {
 101a7ca:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 101a7ce:	1c59      	adds	r1, r3, #1
			nbr_octets = i + 1;
 101a7d0:	2800      	cmp	r0, #0
 101a7d2:	bf18      	it	ne
 101a7d4:	4698      	movne	r8, r3
	for (i = 0; i < sizeof(set_buff); i++) {
 101a7d6:	42a2      	cmp	r2, r4
 101a7d8:	b2cb      	uxtb	r3, r1
 101a7da:	d1f6      	bne.n	101a7ca <GRAL_APP_bSt_0_execute_table_reading+0x29e>
	memcpy( &table_buffer[k], &set_buff[0], DIM_MFG_TBLS_USED );
 101a7dc:	4642      	mov	r2, r8
 101a7de:	a90e      	add	r1, sp, #56	; 0x38
 101a7e0:	4ba7      	ldr	r3, [pc, #668]	; (101aa80 <GRAL_APP_bSt_0_execute_table_reading+0x554>)
 101a7e2:	9401      	str	r4, [sp, #4]
 101a7e4:	4628      	mov	r0, r5
 101a7e6:	4798      	blx	r3
	memset(&set_buff, 0, sizeof(set_buff));
 101a7e8:	2228      	movs	r2, #40	; 0x28
 101a7ea:	2100      	movs	r1, #0
 101a7ec:	4ba1      	ldr	r3, [pc, #644]	; (101aa74 <GRAL_APP_bSt_0_execute_table_reading+0x548>)
 101a7ee:	48a3      	ldr	r0, [pc, #652]	; (101aa7c <GRAL_APP_bSt_0_execute_table_reading+0x550>)
 101a7f0:	4798      	blx	r3
	GRAL_APP_vLoad_mfg_tbls_used(&set_buff[0]);
 101a7f2:	4ba1      	ldr	r3, [pc, #644]	; (101aa78 <GRAL_APP_bSt_0_execute_table_reading+0x54c>)
 101a7f4:	48a1      	ldr	r0, [pc, #644]	; (101aa7c <GRAL_APP_bSt_0_execute_table_reading+0x550>)
 101a7f6:	4798      	blx	r3
 101a7f8:	990c      	ldr	r1, [sp, #48]	; 0x30
 101a7fa:	9c01      	ldr	r4, [sp, #4]
 101a7fc:	4632      	mov	r2, r6
 101a7fe:	2301      	movs	r3, #1
		if (set_buff[i] > 0) {
 101a800:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 101a804:	1c58      	adds	r0, r3, #1
			nbr_octets = i + 1;
 101a806:	2d00      	cmp	r5, #0
 101a808:	bf18      	it	ne
 101a80a:	4619      	movne	r1, r3
	for (i = 0; i < sizeof(set_buff); i++) {
 101a80c:	42a2      	cmp	r2, r4
 101a80e:	b2c3      	uxtb	r3, r0
 101a810:	d1f6      	bne.n	101a800 <GRAL_APP_bSt_0_execute_table_reading+0x2d4>
	k += DIM_MFG_TBLS_USED;
 101a812:	440f      	add	r7, r1
	memset(&set_buff, 0, sizeof(set_buff));
 101a814:	2228      	movs	r2, #40	; 0x28
 101a816:	2100      	movs	r1, #0
	k += DIM_MFG_TBLS_USED;
 101a818:	fa5f f887 	uxtb.w	r8, r7
	*set_buff |= ( 1 << 7 );
 101a81c:	25eb      	movs	r5, #235	; 0xeb
	memset(&set_buff, 0, sizeof(set_buff));
 101a81e:	4b95      	ldr	r3, [pc, #596]	; (101aa74 <GRAL_APP_bSt_0_execute_table_reading+0x548>)
 101a820:	9401      	str	r4, [sp, #4]
	*set_buff |= ( 1 << 3 );
 101a822:	270f      	movs	r7, #15
	memset(&set_buff, 0, sizeof(set_buff));
 101a824:	a80e      	add	r0, sp, #56	; 0x38
 101a826:	4798      	blx	r3
	memset(&set_buff, 0, sizeof(set_buff));
 101a828:	2228      	movs	r2, #40	; 0x28
 101a82a:	2100      	movs	r1, #0
 101a82c:	4b91      	ldr	r3, [pc, #580]	; (101aa74 <GRAL_APP_bSt_0_execute_table_reading+0x548>)
 101a82e:	4893      	ldr	r0, [pc, #588]	; (101aa7c <GRAL_APP_bSt_0_execute_table_reading+0x550>)
	*set_buff |= ( 1 << 7 );
 101a830:	f88d 5038 	strb.w	r5, [sp, #56]	; 0x38
	*set_buff |= ( 1 << 3 );
 101a834:	f88d 7039 	strb.w	r7, [sp, #57]	; 0x39
	memset(&set_buff, 0, sizeof(set_buff));
 101a838:	4798      	blx	r3
	*set_buff |= ( 1 << 3 );
 101a83a:	9a02      	ldr	r2, [sp, #8]
 101a83c:	4b8f      	ldr	r3, [pc, #572]	; (101aa7c <GRAL_APP_bSt_0_execute_table_reading+0x550>)
 101a83e:	7057      	strb	r7, [r2, #1]
	*set_buff |= ( 1 << 7 );
 101a840:	7015      	strb	r5, [r2, #0]
	memcpy( &table_buffer[k], &set_buff[0], DIM_STD_PROC_USED );
 101a842:	9a03      	ldr	r2, [sp, #12]
	*set_buff |= ( 1 << 3 );
 101a844:	9302      	str	r3, [sp, #8]
	memcpy( &table_buffer[k], &set_buff[0], DIM_STD_PROC_USED );
 101a846:	eb02 0008 	add.w	r0, r2, r8
	*set_buff |= ( 1 << 3 );
 101a84a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 101a84c:	9c01      	ldr	r4, [sp, #4]
 101a84e:	461a      	mov	r2, r3
 101a850:	2301      	movs	r3, #1
 101a852:	e001      	b.n	101a858 <GRAL_APP_bSt_0_execute_table_reading+0x32c>
 101a854:	f812 5f01 	ldrb.w	r5, [r2, #1]!
			nbr_octets = i + 1;
 101a858:	2d00      	cmp	r5, #0
 101a85a:	bf18      	it	ne
 101a85c:	4619      	movne	r1, r3
 101a85e:	1c5f      	adds	r7, r3, #1
	for (i = 0; i < sizeof(set_buff); i++) {
 101a860:	42a2      	cmp	r2, r4
 101a862:	b2fb      	uxtb	r3, r7
 101a864:	d1f6      	bne.n	101a854 <GRAL_APP_bSt_0_execute_table_reading+0x328>
 101a866:	460a      	mov	r2, r1
	memcpy( &table_buffer[k], &set_buff[0], DIM_STD_PROC_USED );
 101a868:	4b85      	ldr	r3, [pc, #532]	; (101aa80 <GRAL_APP_bSt_0_execute_table_reading+0x554>)
 101a86a:	9401      	str	r4, [sp, #4]
 101a86c:	a90e      	add	r1, sp, #56	; 0x38
 101a86e:	4798      	blx	r3
	memset(&set_buff, 0, sizeof(set_buff));
 101a870:	2228      	movs	r2, #40	; 0x28
 101a872:	2100      	movs	r1, #0
 101a874:	4b7f      	ldr	r3, [pc, #508]	; (101aa74 <GRAL_APP_bSt_0_execute_table_reading+0x548>)
 101a876:	4881      	ldr	r0, [pc, #516]	; (101aa7c <GRAL_APP_bSt_0_execute_table_reading+0x550>)
 101a878:	4798      	blx	r3
	*set_buff |= ( 1 << 7 );
 101a87a:	9802      	ldr	r0, [sp, #8]
	*set_buff |= ( 1 << 3 );
 101a87c:	9c01      	ldr	r4, [sp, #4]
 101a87e:	230f      	movs	r3, #15
 101a880:	7043      	strb	r3, [r0, #1]
 101a882:	4b7e      	ldr	r3, [pc, #504]	; (101aa7c <GRAL_APP_bSt_0_execute_table_reading+0x550>)
 101a884:	9302      	str	r3, [sp, #8]
	*set_buff |= ( 1 << 7 );
 101a886:	21eb      	movs	r1, #235	; 0xeb
 101a888:	7001      	strb	r1, [r0, #0]
	*set_buff |= ( 1 << 3 );
 101a88a:	461a      	mov	r2, r3
 101a88c:	980a      	ldr	r0, [sp, #40]	; 0x28
 101a88e:	2301      	movs	r3, #1
 101a890:	e001      	b.n	101a896 <GRAL_APP_bSt_0_execute_table_reading+0x36a>
 101a892:	f812 1f01 	ldrb.w	r1, [r2, #1]!
			nbr_octets = i + 1;
 101a896:	2900      	cmp	r1, #0
 101a898:	bf18      	it	ne
 101a89a:	4618      	movne	r0, r3
 101a89c:	1c5d      	adds	r5, r3, #1
	for (i = 0; i < sizeof(set_buff); i++) {
 101a89e:	42a2      	cmp	r2, r4
 101a8a0:	b2eb      	uxtb	r3, r5
 101a8a2:	d1f6      	bne.n	101a892 <GRAL_APP_bSt_0_execute_table_reading+0x366>
 101a8a4:	9401      	str	r4, [sp, #4]
	k += DIM_STD_PROC_USED;
 101a8a6:	4480      	add	r8, r0
	memset(&set_buff, 0, sizeof(set_buff));
 101a8a8:	2228      	movs	r2, #40	; 0x28
 101a8aa:	2100      	movs	r1, #0
 101a8ac:	4b71      	ldr	r3, [pc, #452]	; (101aa74 <GRAL_APP_bSt_0_execute_table_reading+0x548>)
		*set_buff |= ( 1 << 1 );
 101a8ae:	f04f 0402 	mov.w	r4, #2
	memset(&set_buff, 0, sizeof(set_buff));
 101a8b2:	a80e      	add	r0, sp, #56	; 0x38
 101a8b4:	4798      	blx	r3
		*set_buff |= ( 1 << 6 );
 101a8b6:	2540      	movs	r5, #64	; 0x40
		*set_buff |= ( 1 << 1 );
 101a8b8:	2703      	movs	r7, #3
		*set_buff |= ( 1 << 2 );
 101a8ba:	2304      	movs	r3, #4
		*set_buff |= ( 1 << 7 );
 101a8bc:	f04f 0ac3 	mov.w	sl, #195	; 0xc3
		*set_buff |= ( 1 << 6 );
 101a8c0:	f04f 0b7f 	mov.w	fp, #127	; 0x7f
		*set_buff |= ( 1 << 1 );
 101a8c4:	f88d 4039 	strb.w	r4, [sp, #57]	; 0x39
		*set_buff |= ( 1 << 7 );
 101a8c8:	f06f 040f 	mvn.w	r4, #15
	memset(&set_buff, 0, sizeof(set_buff));
 101a8cc:	2228      	movs	r2, #40	; 0x28
 101a8ce:	2100      	movs	r1, #0
		*set_buff |= ( 1 << 7 );
 101a8d0:	f88d 4044 	strb.w	r4, [sp, #68]	; 0x44
		*set_buff |= ( 1 << 2 );
 101a8d4:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 101a8d8:	9304      	str	r3, [sp, #16]
	memset(&set_buff, 0, sizeof(set_buff));
 101a8da:	4868      	ldr	r0, [pc, #416]	; (101aa7c <GRAL_APP_bSt_0_execute_table_reading+0x550>)
 101a8dc:	4b65      	ldr	r3, [pc, #404]	; (101aa74 <GRAL_APP_bSt_0_execute_table_reading+0x548>)
		*set_buff |= ( 1 << 6 );
 101a8de:	f88d 5038 	strb.w	r5, [sp, #56]	; 0x38
		*set_buff |= ( 1 << 6 );
 101a8e2:	f88d 504a 	strb.w	r5, [sp, #74]	; 0x4a
		*set_buff |= ( 1 << 7 );
 101a8e6:	f88d a045 	strb.w	sl, [sp, #69]	; 0x45
		*set_buff |= ( 1 << 1 );
 101a8ea:	f88d 7046 	strb.w	r7, [sp, #70]	; 0x46
		*set_buff |= ( 1 << 1 );
 101a8ee:	f88d 7051 	strb.w	r7, [sp, #81]	; 0x51
		*set_buff |= ( 1 << 6 );
 101a8f2:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
	memset(&set_buff, 0, sizeof(set_buff));
 101a8f6:	4798      	blx	r3
		*set_buff |= ( 1 << 1 );
 101a8f8:	9a02      	ldr	r2, [sp, #8]
		*set_buff |= ( 1 << 2 );
 101a8fa:	9b04      	ldr	r3, [sp, #16]
 101a8fc:	7413      	strb	r3, [r2, #16]
		*set_buff |= ( 1 << 1 );
 101a8fe:	f04f 0102 	mov.w	r1, #2
		*set_buff |= ( 1 << 1 );
 101a902:	4b5e      	ldr	r3, [pc, #376]	; (101aa7c <GRAL_APP_bSt_0_execute_table_reading+0x550>)
		*set_buff |= ( 1 << 1 );
 101a904:	7051      	strb	r1, [r2, #1]
		*set_buff |= ( 1 << 6 );
 101a906:	7015      	strb	r5, [r2, #0]
		*set_buff |= ( 1 << 7 );
 101a908:	4611      	mov	r1, r2
		*set_buff |= ( 1 << 7 );
 101a90a:	f882 a00d 	strb.w	sl, [r2, #13]
		*set_buff |= ( 1 << 1 );
 101a90e:	7397      	strb	r7, [r2, #14]
		*set_buff |= ( 1 << 6 );
 101a910:	f882 b00f 	strb.w	fp, [r2, #15]
		*set_buff |= ( 1 << 6 );
 101a914:	7495      	strb	r5, [r2, #18]
		*set_buff |= ( 1 << 1 );
 101a916:	7657      	strb	r7, [r2, #25]
	memcpy( &table_buffer[k], &set_buff[0], DIM_MFG_PROC_USED );
 101a918:	9a03      	ldr	r2, [sp, #12]
		*set_buff |= ( 1 << 7 );
 101a91a:	730c      	strb	r4, [r1, #12]
	k += DIM_STD_PROC_USED;
 101a91c:	fa5f f888 	uxtb.w	r8, r8
		*set_buff |= ( 1 << 1 );
 101a920:	9302      	str	r3, [sp, #8]
	memcpy( &table_buffer[k], &set_buff[0], DIM_MFG_PROC_USED );
 101a922:	eb02 0008 	add.w	r0, r2, r8
		*set_buff |= ( 1 << 1 );
 101a926:	9909      	ldr	r1, [sp, #36]	; 0x24
 101a928:	9c01      	ldr	r4, [sp, #4]
 101a92a:	461a      	mov	r2, r3
 101a92c:	2301      	movs	r3, #1
 101a92e:	e001      	b.n	101a934 <GRAL_APP_bSt_0_execute_table_reading+0x408>
 101a930:	f812 5f01 	ldrb.w	r5, [r2, #1]!
			nbr_octets = i + 1;
 101a934:	2d00      	cmp	r5, #0
 101a936:	bf18      	it	ne
 101a938:	4619      	movne	r1, r3
 101a93a:	1c5f      	adds	r7, r3, #1
	for (i = 0; i < sizeof(set_buff); i++) {
 101a93c:	42a2      	cmp	r2, r4
 101a93e:	b2fb      	uxtb	r3, r7
 101a940:	d1f6      	bne.n	101a930 <GRAL_APP_bSt_0_execute_table_reading+0x404>
 101a942:	460a      	mov	r2, r1
	memcpy( &table_buffer[k], &set_buff[0], DIM_MFG_PROC_USED );
 101a944:	4b4e      	ldr	r3, [pc, #312]	; (101aa80 <GRAL_APP_bSt_0_execute_table_reading+0x554>)
 101a946:	9401      	str	r4, [sp, #4]
 101a948:	a90e      	add	r1, sp, #56	; 0x38
 101a94a:	4798      	blx	r3
	memset(&set_buff, 0, sizeof(set_buff));
 101a94c:	2228      	movs	r2, #40	; 0x28
 101a94e:	2100      	movs	r1, #0
 101a950:	4b48      	ldr	r3, [pc, #288]	; (101aa74 <GRAL_APP_bSt_0_execute_table_reading+0x548>)
 101a952:	484a      	ldr	r0, [pc, #296]	; (101aa7c <GRAL_APP_bSt_0_execute_table_reading+0x550>)
 101a954:	4798      	blx	r3
		*set_buff |= ( 1 << 6 );
 101a956:	9f02      	ldr	r7, [sp, #8]
		*set_buff |= ( 1 << 1 );
 101a958:	9c01      	ldr	r4, [sp, #4]
		*set_buff |= ( 1 << 1 );
 101a95a:	2302      	movs	r3, #2
 101a95c:	707b      	strb	r3, [r7, #1]
		*set_buff |= ( 1 << 1 );
 101a95e:	2303      	movs	r3, #3
		*set_buff |= ( 1 << 7 );
 101a960:	20f0      	movs	r0, #240	; 0xf0
		*set_buff |= ( 1 << 7 );
 101a962:	22c3      	movs	r2, #195	; 0xc3
		*set_buff |= ( 1 << 1 );
 101a964:	73bb      	strb	r3, [r7, #14]
		*set_buff |= ( 1 << 1 );
 101a966:	767b      	strb	r3, [r7, #25]
 101a968:	4b44      	ldr	r3, [pc, #272]	; (101aa7c <GRAL_APP_bSt_0_execute_table_reading+0x550>)
		*set_buff |= ( 1 << 7 );
 101a96a:	7338      	strb	r0, [r7, #12]
		*set_buff |= ( 1 << 6 );
 101a96c:	2140      	movs	r1, #64	; 0x40
		*set_buff |= ( 1 << 6 );
 101a96e:	207f      	movs	r0, #127	; 0x7f
		*set_buff |= ( 1 << 7 );
 101a970:	737a      	strb	r2, [r7, #13]
		*set_buff |= ( 1 << 2 );
 101a972:	2204      	movs	r2, #4
		*set_buff |= ( 1 << 6 );
 101a974:	73f8      	strb	r0, [r7, #15]
		*set_buff |= ( 1 << 2 );
 101a976:	743a      	strb	r2, [r7, #16]
		*set_buff |= ( 1 << 1 );
 101a978:	9302      	str	r3, [sp, #8]
 101a97a:	461a      	mov	r2, r3
		*set_buff |= ( 1 << 6 );
 101a97c:	7039      	strb	r1, [r7, #0]
		*set_buff |= ( 1 << 6 );
 101a97e:	74b9      	strb	r1, [r7, #18]
		*set_buff |= ( 1 << 1 );
 101a980:	2301      	movs	r3, #1
 101a982:	9808      	ldr	r0, [sp, #32]
 101a984:	e001      	b.n	101a98a <GRAL_APP_bSt_0_execute_table_reading+0x45e>
 101a986:	f812 1f01 	ldrb.w	r1, [r2, #1]!
			nbr_octets = i + 1;
 101a98a:	2900      	cmp	r1, #0
 101a98c:	bf18      	it	ne
 101a98e:	4618      	movne	r0, r3
 101a990:	1c5d      	adds	r5, r3, #1
	for (i = 0; i < sizeof(set_buff); i++) {
 101a992:	42a2      	cmp	r2, r4
 101a994:	b2eb      	uxtb	r3, r5
 101a996:	d1f6      	bne.n	101a986 <GRAL_APP_bSt_0_execute_table_reading+0x45a>
 101a998:	4603      	mov	r3, r0
	memset(&set_buff, 0, sizeof(set_buff));
 101a99a:	2528      	movs	r5, #40	; 0x28
	k += DIM_MFG_PROC_USED;
 101a99c:	4443      	add	r3, r8
	memset(&set_buff, 0, sizeof(set_buff));
 101a99e:	462a      	mov	r2, r5
 101a9a0:	2100      	movs	r1, #0
	k += DIM_MFG_PROC_USED;
 101a9a2:	b2df      	uxtb	r7, r3
	memset(&set_buff, 0, sizeof(set_buff));
 101a9a4:	a80e      	add	r0, sp, #56	; 0x38
 101a9a6:	4b33      	ldr	r3, [pc, #204]	; (101aa74 <GRAL_APP_bSt_0_execute_table_reading+0x548>)
 101a9a8:	9401      	str	r4, [sp, #4]
 101a9aa:	4798      	blx	r3
		*set_buff |= ( 1 << 7 );
 101a9ac:	21c2      	movs	r1, #194	; 0xc2
		*set_buff |= ( 1 << 7 );
 101a9ae:	20e0      	movs	r0, #224	; 0xe0
		*set_buff |= ( 1 << 4 );
 101a9b0:	231e      	movs	r3, #30
	memset(&set_buff, 0, sizeof(set_buff));
 101a9b2:	462a      	mov	r2, r5
		*set_buff |= ( 1 << 3 );
 101a9b4:	f04f 0e0f 	mov.w	lr, #15
		*set_buff |= ( 1 << 5 );
 101a9b8:	f88d 5039 	strb.w	r5, [sp, #57]	; 0x39
		*set_buff |= ( 1 << 7 );
 101a9bc:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
		*set_buff |= ( 1 << 7 );
 101a9c0:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
		*set_buff |= ( 1 << 6 );
 101a9c4:	2168      	movs	r1, #104	; 0x68
		*set_buff |= ( 1 << 6 );
 101a9c6:	2060      	movs	r0, #96	; 0x60
		*set_buff |= ( 1 << 7 );
 101a9c8:	2580      	movs	r5, #128	; 0x80
		*set_buff |= ( 1 << 4 );
 101a9ca:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
		*set_buff |= ( 1 << 3 );
 101a9ce:	230a      	movs	r3, #10
		*set_buff |= ( 1 << 6 );
 101a9d0:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
		*set_buff |= ( 1 << 6 );
 101a9d4:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
	memset(&set_buff, 0, sizeof(set_buff));
 101a9d8:	2100      	movs	r1, #0
		*set_buff |= ( 1 << 7 );
 101a9da:	f88d 5040 	strb.w	r5, [sp, #64]	; 0x40
		*set_buff |= ( 1 << 3 );
 101a9de:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		*set_buff |= ( 1 << 3 );
 101a9e2:	f88d e03b 	strb.w	lr, [sp, #59]	; 0x3b
	memset(&set_buff, 0, sizeof(set_buff));
 101a9e6:	4b23      	ldr	r3, [pc, #140]	; (101aa74 <GRAL_APP_bSt_0_execute_table_reading+0x548>)
 101a9e8:	4824      	ldr	r0, [pc, #144]	; (101aa7c <GRAL_APP_bSt_0_execute_table_reading+0x550>)
 101a9ea:	4798      	blx	r3
	*set_buff |= ( 1 << 7 );
 101a9ec:	9c02      	ldr	r4, [sp, #8]
	*set_buff |= ( 1 << 7 );
 101a9ee:	22f1      	movs	r2, #241	; 0xf1
	*set_buff |= ( 1 << 4 );
 101a9f0:	231f      	movs	r3, #31
	*set_buff |= ( 1 << 7 );
 101a9f2:	70a2      	strb	r2, [r4, #2]
	*set_buff |= ( 1 << 7 );
 101a9f4:	22c1      	movs	r2, #193	; 0xc1
	*set_buff |= ( 1 << 7 );
 101a9f6:	20bd      	movs	r0, #189	; 0xbd
	*set_buff |= ( 1 << 4 );
 101a9f8:	70e3      	strb	r3, [r4, #3]
	*set_buff |= ( 1 << 4 );
 101a9fa:	7163      	strb	r3, [r4, #5]
	*set_buff |= ( 1 << 4 );
 101a9fc:	7263      	strb	r3, [r4, #9]
	*set_buff |= ( 1 << 7 );
 101a9fe:	7222      	strb	r2, [r4, #8]
	*set_buff |= ( 1 << 4 );
 101aa00:	4b1e      	ldr	r3, [pc, #120]	; (101aa7c <GRAL_APP_bSt_0_execute_table_reading+0x550>)
	memcpy( &table_buffer[k], &set_buff[0], DIM_STD_TBLS_USED );
 101aa02:	9a03      	ldr	r2, [sp, #12]
	*set_buff |= ( 1 << 7 );
 101aa04:	7060      	strb	r0, [r4, #1]
	*set_buff |= ( 1 << 7 );
 101aa06:	25fc      	movs	r5, #252	; 0xfc
	*set_buff |= ( 1 << 7 );
 101aa08:	20f0      	movs	r0, #240	; 0xf0
	*set_buff |= ( 1 << 7 );
 101aa0a:	21cf      	movs	r1, #207	; 0xcf
	*set_buff |= ( 1 << 7 );
 101aa0c:	71a5      	strb	r5, [r4, #6]
	*set_buff |= ( 1 << 7 );
 101aa0e:	71e0      	strb	r0, [r4, #7]
	*set_buff |= ( 1 << 7 );
 101aa10:	7021      	strb	r1, [r4, #0]
	*set_buff |= ( 1 << 4 );
 101aa12:	9302      	str	r3, [sp, #8]
	memcpy( &table_buffer[k], &set_buff[0], DIM_STD_TBLS_USED );
 101aa14:	19d0      	adds	r0, r2, r7
	*set_buff |= ( 1 << 4 );
 101aa16:	9d07      	ldr	r5, [sp, #28]
 101aa18:	9c01      	ldr	r4, [sp, #4]
 101aa1a:	461a      	mov	r2, r3
 101aa1c:	2301      	movs	r3, #1
 101aa1e:	e001      	b.n	101aa24 <GRAL_APP_bSt_0_execute_table_reading+0x4f8>
 101aa20:	f812 1f01 	ldrb.w	r1, [r2, #1]!
			nbr_octets = i + 1;
 101aa24:	2900      	cmp	r1, #0
 101aa26:	bf18      	it	ne
 101aa28:	461d      	movne	r5, r3
 101aa2a:	f103 0e01 	add.w	lr, r3, #1
	for (i = 0; i < sizeof(set_buff); i++) {
 101aa2e:	42a2      	cmp	r2, r4
 101aa30:	fa5f f38e 	uxtb.w	r3, lr
 101aa34:	d1f4      	bne.n	101aa20 <GRAL_APP_bSt_0_execute_table_reading+0x4f4>
 101aa36:	462a      	mov	r2, r5
	memcpy( &table_buffer[k], &set_buff[0], DIM_STD_TBLS_USED );
 101aa38:	a90e      	add	r1, sp, #56	; 0x38
 101aa3a:	4b11      	ldr	r3, [pc, #68]	; (101aa80 <GRAL_APP_bSt_0_execute_table_reading+0x554>)
 101aa3c:	9401      	str	r4, [sp, #4]
 101aa3e:	4798      	blx	r3
	memset(&set_buff, 0, sizeof(set_buff));
 101aa40:	2228      	movs	r2, #40	; 0x28
 101aa42:	2100      	movs	r1, #0
 101aa44:	4b0b      	ldr	r3, [pc, #44]	; (101aa74 <GRAL_APP_bSt_0_execute_table_reading+0x548>)
 101aa46:	480d      	ldr	r0, [pc, #52]	; (101aa7c <GRAL_APP_bSt_0_execute_table_reading+0x550>)
 101aa48:	4798      	blx	r3
	*set_buff |= ( 1 << 7 );
 101aa4a:	9d02      	ldr	r5, [sp, #8]
	*set_buff |= ( 1 << 4 );
 101aa4c:	9c01      	ldr	r4, [sp, #4]
	*set_buff |= ( 1 << 4 );
 101aa4e:	231f      	movs	r3, #31
	*set_buff |= ( 1 << 7 );
 101aa50:	20bd      	movs	r0, #189	; 0xbd
	*set_buff |= ( 1 << 7 );
 101aa52:	21f1      	movs	r1, #241	; 0xf1
	*set_buff |= ( 1 << 7 );
 101aa54:	22cf      	movs	r2, #207	; 0xcf
	*set_buff |= ( 1 << 7 );
 101aa56:	7068      	strb	r0, [r5, #1]
	*set_buff |= ( 1 << 7 );
 101aa58:	70a9      	strb	r1, [r5, #2]
	*set_buff |= ( 1 << 7 );
 101aa5a:	20fc      	movs	r0, #252	; 0xfc
	*set_buff |= ( 1 << 7 );
 101aa5c:	21f0      	movs	r1, #240	; 0xf0
	*set_buff |= ( 1 << 4 );
 101aa5e:	70eb      	strb	r3, [r5, #3]
	*set_buff |= ( 1 << 4 );
 101aa60:	716b      	strb	r3, [r5, #5]
	*set_buff |= ( 1 << 4 );
 101aa62:	726b      	strb	r3, [r5, #9]
	*set_buff |= ( 1 << 7 );
 101aa64:	23c1      	movs	r3, #193	; 0xc1
	*set_buff |= ( 1 << 7 );
 101aa66:	71e9      	strb	r1, [r5, #7]
	*set_buff |= ( 1 << 7 );
 101aa68:	722b      	strb	r3, [r5, #8]
	*set_buff |= ( 1 << 7 );
 101aa6a:	702a      	strb	r2, [r5, #0]
	*set_buff |= ( 1 << 7 );
 101aa6c:	71a8      	strb	r0, [r5, #6]
	*set_buff |= ( 1 << 4 );
 101aa6e:	2301      	movs	r3, #1
 101aa70:	9906      	ldr	r1, [sp, #24]
 101aa72:	e009      	b.n	101aa88 <GRAL_APP_bSt_0_execute_table_reading+0x55c>
 101aa74:	01030b71 	.word	0x01030b71
 101aa78:	0101a235 	.word	0x0101a235
 101aa7c:	20000bd4 	.word	0x20000bd4
 101aa80:	01030a3d 	.word	0x01030a3d
 101aa84:	f819 2f01 	ldrb.w	r2, [r9, #1]!
			nbr_octets = i + 1;
 101aa88:	2a00      	cmp	r2, #0
 101aa8a:	bf18      	it	ne
 101aa8c:	4619      	movne	r1, r3
 101aa8e:	1c58      	adds	r0, r3, #1
	for (i = 0; i < sizeof(set_buff); i++) {
 101aa90:	45a1      	cmp	r9, r4
 101aa92:	b2c3      	uxtb	r3, r0
 101aa94:	d1f6      	bne.n	101aa84 <GRAL_APP_bSt_0_execute_table_reading+0x558>
 101aa96:	460b      	mov	r3, r1
	k += DIM_STD_TBLS_USED;
 101aa98:	443b      	add	r3, r7
	memset(&set_buff, 0, sizeof(set_buff));
 101aa9a:	2228      	movs	r2, #40	; 0x28
 101aa9c:	2100      	movs	r1, #0
	k += DIM_STD_TBLS_USED;
 101aa9e:	b2dd      	uxtb	r5, r3
	memset(&set_buff, 0, sizeof(set_buff));
 101aaa0:	a80e      	add	r0, sp, #56	; 0x38
 101aaa2:	4b16      	ldr	r3, [pc, #88]	; (101aafc <GRAL_APP_bSt_0_execute_table_reading+0x5d0>)
 101aaa4:	9401      	str	r4, [sp, #4]
 101aaa6:	4798      	blx	r3
	GRAL_APP_vLoad_mfg_tbls_write(&set_buff[0]);
 101aaa8:	a80e      	add	r0, sp, #56	; 0x38
 101aaaa:	4b15      	ldr	r3, [pc, #84]	; (101ab00 <GRAL_APP_bSt_0_execute_table_reading+0x5d4>)
 101aaac:	4798      	blx	r3
	memset(&set_buff, 0, sizeof(set_buff));
 101aaae:	2228      	movs	r2, #40	; 0x28
 101aab0:	2100      	movs	r1, #0
 101aab2:	4b12      	ldr	r3, [pc, #72]	; (101aafc <GRAL_APP_bSt_0_execute_table_reading+0x5d0>)
 101aab4:	4813      	ldr	r0, [pc, #76]	; (101ab04 <GRAL_APP_bSt_0_execute_table_reading+0x5d8>)
 101aab6:	4798      	blx	r3
	memcpy( &table_buffer[k], &set_buff[0], DIM_MFG_TBLS_USED );
 101aab8:	9b03      	ldr	r3, [sp, #12]
	GRAL_APP_vLoad_mfg_tbls_used(&set_buff[0]);
 101aaba:	4812      	ldr	r0, [pc, #72]	; (101ab04 <GRAL_APP_bSt_0_execute_table_reading+0x5d8>)
	memcpy( &table_buffer[k], &set_buff[0], DIM_MFG_TBLS_USED );
 101aabc:	442b      	add	r3, r5
 101aabe:	461d      	mov	r5, r3
	GRAL_APP_vLoad_mfg_tbls_used(&set_buff[0]);
 101aac0:	4b11      	ldr	r3, [pc, #68]	; (101ab08 <GRAL_APP_bSt_0_execute_table_reading+0x5dc>)
 101aac2:	4798      	blx	r3
 101aac4:	9a05      	ldr	r2, [sp, #20]
 101aac6:	9c01      	ldr	r4, [sp, #4]
 101aac8:	2301      	movs	r3, #1
		if (set_buff[i] > 0) {
 101aaca:	f816 0f01 	ldrb.w	r0, [r6, #1]!
 101aace:	1c59      	adds	r1, r3, #1
			nbr_octets = i + 1;
 101aad0:	2800      	cmp	r0, #0
 101aad2:	bf18      	it	ne
 101aad4:	461a      	movne	r2, r3
	for (i = 0; i < sizeof(set_buff); i++) {
 101aad6:	42a6      	cmp	r6, r4
 101aad8:	b2cb      	uxtb	r3, r1
 101aada:	d1f6      	bne.n	101aaca <GRAL_APP_bSt_0_execute_table_reading+0x59e>
	memcpy( &table_buffer[k], &set_buff[0], DIM_MFG_TBLS_USED );
 101aadc:	a90e      	add	r1, sp, #56	; 0x38
 101aade:	4628      	mov	r0, r5
 101aae0:	4b0a      	ldr	r3, [pc, #40]	; (101ab0c <GRAL_APP_bSt_0_execute_table_reading+0x5e0>)
 101aae2:	4798      	blx	r3
	memset(&set_buff, 0, sizeof(set_buff));
 101aae4:	2228      	movs	r2, #40	; 0x28
 101aae6:	2100      	movs	r1, #0
 101aae8:	4b04      	ldr	r3, [pc, #16]	; (101aafc <GRAL_APP_bSt_0_execute_table_reading+0x5d0>)
 101aaea:	4806      	ldr	r0, [pc, #24]	; (101ab04 <GRAL_APP_bSt_0_execute_table_reading+0x5d8>)
 101aaec:	4798      	blx	r3
	GRAL_APP_vLoad_mfg_tbls_used(&set_buff[0]);
 101aaee:	4805      	ldr	r0, [pc, #20]	; (101ab04 <GRAL_APP_bSt_0_execute_table_reading+0x5d8>)
 101aaf0:	4b05      	ldr	r3, [pc, #20]	; (101ab08 <GRAL_APP_bSt_0_execute_table_reading+0x5dc>)
 101aaf2:	4798      	blx	r3
}
 101aaf4:	2001      	movs	r0, #1
 101aaf6:	b019      	add	sp, #100	; 0x64
 101aaf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 101aafc:	01030b71 	.word	0x01030b71
 101ab00:	0101a4d5 	.word	0x0101a4d5
 101ab04:	20000bd4 	.word	0x20000bd4
 101ab08:	0101a235 	.word	0x0101a235
 101ab0c:	01030a3d 	.word	0x01030a3d

0101ab10 <GRAL_APP_ucGet_dim_std_tbls_used>:
inline uint8_t GRAL_APP_ucGet_dim_std_tbls_used(void) {
 101ab10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	memset(&set_buff, 0, sizeof(set_buff));
 101ab12:	4e14      	ldr	r6, [pc, #80]	; (101ab64 <GRAL_APP_ucGet_dim_std_tbls_used+0x54>)
 101ab14:	4b14      	ldr	r3, [pc, #80]	; (101ab68 <GRAL_APP_ucGet_dim_std_tbls_used+0x58>)
 101ab16:	2228      	movs	r2, #40	; 0x28
 101ab18:	2100      	movs	r1, #0
 101ab1a:	4630      	mov	r0, r6
 101ab1c:	4798      	blx	r3
	*set_buff |= ( 1 << 7 );
 101ab1e:	23bd      	movs	r3, #189	; 0xbd
	*set_buff |= ( 1 << 7 );
 101ab20:	25f0      	movs	r5, #240	; 0xf0
	*set_buff |= ( 1 << 7 );
 101ab22:	f04f 0ef1 	mov.w	lr, #241	; 0xf1
	*set_buff |= ( 1 << 7 );
 101ab26:	27fc      	movs	r7, #252	; 0xfc
	*set_buff |= ( 1 << 7 );
 101ab28:	20c1      	movs	r0, #193	; 0xc1
	*set_buff |= ( 1 << 7 );
 101ab2a:	21cf      	movs	r1, #207	; 0xcf
	*set_buff |= ( 1 << 7 );
 101ab2c:	7073      	strb	r3, [r6, #1]
	*set_buff |= ( 1 << 4 );
 101ab2e:	231f      	movs	r3, #31
	*set_buff |= ( 1 << 7 );
 101ab30:	71f5      	strb	r5, [r6, #7]
	*set_buff |= ( 1 << 4 );
 101ab32:	70f3      	strb	r3, [r6, #3]
	*set_buff |= ( 1 << 4 );
 101ab34:	7173      	strb	r3, [r6, #5]
	*set_buff |= ( 1 << 4 );
 101ab36:	7273      	strb	r3, [r6, #9]
 101ab38:	4632      	mov	r2, r6
	*set_buff |= ( 1 << 7 );
 101ab3a:	f886 e002 	strb.w	lr, [r6, #2]
	*set_buff |= ( 1 << 7 );
 101ab3e:	71b7      	strb	r7, [r6, #6]
	*set_buff |= ( 1 << 7 );
 101ab40:	7230      	strb	r0, [r6, #8]
 101ab42:	f106 0527 	add.w	r5, r6, #39	; 0x27
	*set_buff |= ( 1 << 7 );
 101ab46:	7031      	strb	r1, [r6, #0]
	*set_buff |= ( 1 << 4 );
 101ab48:	2301      	movs	r3, #1
 101ab4a:	e001      	b.n	101ab50 <GRAL_APP_ucGet_dim_std_tbls_used+0x40>
 101ab4c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
			nbr_octets = i + 1;
 101ab50:	2900      	cmp	r1, #0
 101ab52:	bf18      	it	ne
 101ab54:	461c      	movne	r4, r3
 101ab56:	1c58      	adds	r0, r3, #1
	for (i = 0; i < sizeof(set_buff); i++) {
 101ab58:	42aa      	cmp	r2, r5
 101ab5a:	b2c3      	uxtb	r3, r0
 101ab5c:	d1f6      	bne.n	101ab4c <GRAL_APP_ucGet_dim_std_tbls_used+0x3c>
}
 101ab5e:	4620      	mov	r0, r4
 101ab60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 101ab62:	bf00      	nop
 101ab64:	20000bd4 	.word	0x20000bd4
 101ab68:	01030b71 	.word	0x01030b71

0101ab6c <GRAL_APP_ucGet_dim_mfg_tbls_used>:
{
 101ab6c:	b538      	push	{r3, r4, r5, lr}
	memset(&set_buff, 0, sizeof(set_buff));
 101ab6e:	2228      	movs	r2, #40	; 0x28
 101ab70:	2100      	movs	r1, #0
 101ab72:	4b0a      	ldr	r3, [pc, #40]	; (101ab9c <GRAL_APP_ucGet_dim_mfg_tbls_used+0x30>)
 101ab74:	480a      	ldr	r0, [pc, #40]	; (101aba0 <GRAL_APP_ucGet_dim_mfg_tbls_used+0x34>)
 101ab76:	4798      	blx	r3
	GRAL_APP_vLoad_mfg_tbls_used(&set_buff[0]);
 101ab78:	4b0a      	ldr	r3, [pc, #40]	; (101aba4 <GRAL_APP_ucGet_dim_mfg_tbls_used+0x38>)
 101ab7a:	4809      	ldr	r0, [pc, #36]	; (101aba0 <GRAL_APP_ucGet_dim_mfg_tbls_used+0x34>)
 101ab7c:	4798      	blx	r3
 101ab7e:	4b0a      	ldr	r3, [pc, #40]	; (101aba8 <GRAL_APP_ucGet_dim_mfg_tbls_used+0x3c>)
 101ab80:	2201      	movs	r2, #1
 101ab82:	f103 0528 	add.w	r5, r3, #40	; 0x28
		if (set_buff[i] > 0) {
 101ab86:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 101ab8a:	1c51      	adds	r1, r2, #1
			nbr_octets = i + 1;
 101ab8c:	2800      	cmp	r0, #0
 101ab8e:	bf18      	it	ne
 101ab90:	4614      	movne	r4, r2
	for (i = 0; i < sizeof(set_buff); i++) {
 101ab92:	42ab      	cmp	r3, r5
 101ab94:	b2ca      	uxtb	r2, r1
 101ab96:	d1f6      	bne.n	101ab86 <GRAL_APP_ucGet_dim_mfg_tbls_used+0x1a>
}
 101ab98:	4620      	mov	r0, r4
 101ab9a:	bd38      	pop	{r3, r4, r5, pc}
 101ab9c:	01030b71 	.word	0x01030b71
 101aba0:	20000bd4 	.word	0x20000bd4
 101aba4:	0101a235 	.word	0x0101a235
 101aba8:	20000bd3 	.word	0x20000bd3

0101abac <GRAL_APP_ucGet_dim_std_proc_used>:
{
 101abac:	b538      	push	{r3, r4, r5, lr}
	memset(&set_buff, 0, sizeof(set_buff));
 101abae:	4d0c      	ldr	r5, [pc, #48]	; (101abe0 <GRAL_APP_ucGet_dim_std_proc_used+0x34>)
 101abb0:	4b0c      	ldr	r3, [pc, #48]	; (101abe4 <GRAL_APP_ucGet_dim_std_proc_used+0x38>)
 101abb2:	4628      	mov	r0, r5
 101abb4:	2228      	movs	r2, #40	; 0x28
 101abb6:	2100      	movs	r1, #0
 101abb8:	4798      	blx	r3
	*set_buff |= ( 1 << 3 );
 101abba:	230f      	movs	r3, #15
	*set_buff |= ( 1 << 7 );
 101abbc:	21eb      	movs	r1, #235	; 0xeb
	*set_buff |= ( 1 << 3 );
 101abbe:	706b      	strb	r3, [r5, #1]
 101abc0:	462a      	mov	r2, r5
	*set_buff |= ( 1 << 7 );
 101abc2:	7029      	strb	r1, [r5, #0]
	*set_buff |= ( 1 << 3 );
 101abc4:	2301      	movs	r3, #1
 101abc6:	3527      	adds	r5, #39	; 0x27
 101abc8:	e001      	b.n	101abce <GRAL_APP_ucGet_dim_std_proc_used+0x22>
 101abca:	f812 1f01 	ldrb.w	r1, [r2, #1]!
			nbr_octets = i + 1;
 101abce:	2900      	cmp	r1, #0
 101abd0:	bf18      	it	ne
 101abd2:	461c      	movne	r4, r3
 101abd4:	1c58      	adds	r0, r3, #1
	for (i = 0; i < sizeof(set_buff); i++) {
 101abd6:	42aa      	cmp	r2, r5
 101abd8:	b2c3      	uxtb	r3, r0
 101abda:	d1f6      	bne.n	101abca <GRAL_APP_ucGet_dim_std_proc_used+0x1e>
}
 101abdc:	4620      	mov	r0, r4
 101abde:	bd38      	pop	{r3, r4, r5, pc}
 101abe0:	20000bd4 	.word	0x20000bd4
 101abe4:	01030b71 	.word	0x01030b71

0101abe8 <GRAL_APP_ucGet_dim_mfg_proc_used>:
{
 101abe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	memset(&set_buff, 0, sizeof(set_buff));
 101abea:	4e14      	ldr	r6, [pc, #80]	; (101ac3c <GRAL_APP_ucGet_dim_mfg_proc_used+0x54>)
 101abec:	4b14      	ldr	r3, [pc, #80]	; (101ac40 <GRAL_APP_ucGet_dim_mfg_proc_used+0x58>)
 101abee:	2228      	movs	r2, #40	; 0x28
 101abf0:	2100      	movs	r1, #0
 101abf2:	4630      	mov	r0, r6
 101abf4:	4798      	blx	r3
		*set_buff |= ( 1 << 1 );
 101abf6:	2302      	movs	r3, #2
		*set_buff |= ( 1 << 6 );
 101abf8:	257f      	movs	r5, #127	; 0x7f
		*set_buff |= ( 1 << 6 );
 101abfa:	2140      	movs	r1, #64	; 0x40
		*set_buff |= ( 1 << 7 );
 101abfc:	f04f 0ef0 	mov.w	lr, #240	; 0xf0
		*set_buff |= ( 1 << 7 );
 101ac00:	27c3      	movs	r7, #195	; 0xc3
		*set_buff |= ( 1 << 2 );
 101ac02:	2004      	movs	r0, #4
		*set_buff |= ( 1 << 1 );
 101ac04:	7073      	strb	r3, [r6, #1]
		*set_buff |= ( 1 << 1 );
 101ac06:	2303      	movs	r3, #3
		*set_buff |= ( 1 << 6 );
 101ac08:	73f5      	strb	r5, [r6, #15]
		*set_buff |= ( 1 << 1 );
 101ac0a:	73b3      	strb	r3, [r6, #14]
		*set_buff |= ( 1 << 1 );
 101ac0c:	7673      	strb	r3, [r6, #25]
 101ac0e:	4632      	mov	r2, r6
		*set_buff |= ( 1 << 7 );
 101ac10:	f886 e00c 	strb.w	lr, [r6, #12]
		*set_buff |= ( 1 << 7 );
 101ac14:	7377      	strb	r7, [r6, #13]
		*set_buff |= ( 1 << 2 );
 101ac16:	7430      	strb	r0, [r6, #16]
 101ac18:	f106 0527 	add.w	r5, r6, #39	; 0x27
		*set_buff |= ( 1 << 6 );
 101ac1c:	7031      	strb	r1, [r6, #0]
		*set_buff |= ( 1 << 6 );
 101ac1e:	74b1      	strb	r1, [r6, #18]
		*set_buff |= ( 1 << 1 );
 101ac20:	2301      	movs	r3, #1
 101ac22:	e001      	b.n	101ac28 <GRAL_APP_ucGet_dim_mfg_proc_used+0x40>
 101ac24:	f812 1f01 	ldrb.w	r1, [r2, #1]!
			nbr_octets = i + 1;
 101ac28:	2900      	cmp	r1, #0
 101ac2a:	bf18      	it	ne
 101ac2c:	461c      	movne	r4, r3
 101ac2e:	1c58      	adds	r0, r3, #1
	for (i = 0; i < sizeof(set_buff); i++) {
 101ac30:	42aa      	cmp	r2, r5
 101ac32:	b2c3      	uxtb	r3, r0
 101ac34:	d1f6      	bne.n	101ac24 <GRAL_APP_ucGet_dim_mfg_proc_used+0x3c>
		}
	}
	
	return nbr_octets;
}
 101ac36:	4620      	mov	r0, r4
 101ac38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 101ac3a:	bf00      	nop
 101ac3c:	20000bd4 	.word	0x20000bd4
 101ac40:	01030b71 	.word	0x01030b71

0101ac44 <LED_turn_off_all_delay_diagnosis_task>:
 * \param void
 * \retval void
 ******************************************************************************
 */
void LED_turn_off_all_delay_diagnosis_task(void)
{
 101ac44:	b470      	push	{r4, r5, r6}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 101ac46:	4b0d      	ldr	r3, [pc, #52]	; (101ac7c <LED_turn_off_all_delay_diagnosis_task+0x38>)
 101ac48:	4c0d      	ldr	r4, [pc, #52]	; (101ac80 <LED_turn_off_all_delay_diagnosis_task+0x3c>)
	LED_turn_off(LED_ALL);
	TIMER_start_ms_timer(LED_BLINKING_TIMER, LED_OFF_PERIOD, LED_diagnosis_led_task);
 101ac4a:	4e0e      	ldr	r6, [pc, #56]	; (101ac84 <LED_turn_off_all_delay_diagnosis_task+0x40>)
 101ac4c:	4a0e      	ldr	r2, [pc, #56]	; (101ac88 <LED_turn_off_all_delay_diagnosis_task+0x44>)
 101ac4e:	2104      	movs	r1, #4
 101ac50:	2002      	movs	r0, #2
 101ac52:	f44f 7580 	mov.w	r5, #256	; 0x100
 101ac56:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 101ac58:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 101ac5c:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 101ac5e:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 101ac62:	6125      	str	r5, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 101ac64:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
 101ac68:	6319      	str	r1, [r3, #48]	; 0x30
 101ac6a:	6318      	str	r0, [r3, #48]	; 0x30
 101ac6c:	6325      	str	r5, [r4, #48]	; 0x30
 101ac6e:	4633      	mov	r3, r6
 101ac70:	f44f 7161 	mov.w	r1, #900	; 0x384
 101ac74:	2008      	movs	r0, #8
}
 101ac76:	bc70      	pop	{r4, r5, r6}
	TIMER_start_ms_timer(LED_BLINKING_TIMER, LED_OFF_PERIOD, LED_diagnosis_led_task);
 101ac78:	4718      	bx	r3
 101ac7a:	bf00      	nop
 101ac7c:	400e0e00 	.word	0x400e0e00
 101ac80:	400e1000 	.word	0x400e1000
 101ac84:	0102ba8d 	.word	0x0102ba8d
 101ac88:	0101ad79 	.word	0x0101ad79

0101ac8c <LED_initialize>:
 101ac8c:	4b0a      	ldr	r3, [pc, #40]	; (101acb8 <LED_initialize+0x2c>)
 101ac8e:	4a0b      	ldr	r2, [pc, #44]	; (101acbc <LED_initialize+0x30>)
{
 101ac90:	b410      	push	{r4}
 101ac92:	2002      	movs	r0, #2
 101ac94:	2404      	movs	r4, #4
 101ac96:	f44f 7180 	mov.w	r1, #256	; 0x100
 101ac9a:	631c      	str	r4, [r3, #48]	; 0x30
 101ac9c:	6318      	str	r0, [r3, #48]	; 0x30
 101ac9e:	6311      	str	r1, [r2, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 101aca0:	611c      	str	r4, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 101aca2:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 101aca6:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 101aca8:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 101acac:	6111      	str	r1, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 101acae:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
}
 101acb2:	bc10      	pop	{r4}
 101acb4:	4770      	bx	lr
 101acb6:	bf00      	nop
 101acb8:	400e0e00 	.word	0x400e0e00
 101acbc:	400e1000 	.word	0x400e1000

0101acc0 <LED_turn_on>:
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 101acc0:	4b2b      	ldr	r3, [pc, #172]	; (101ad70 <LED_turn_on+0xb0>)
 101acc2:	4a2c      	ldr	r2, [pc, #176]	; (101ad74 <LED_turn_on+0xb4>)
{
 101acc4:	b430      	push	{r4, r5}
 101acc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 101acca:	2504      	movs	r5, #4
 101accc:	2402      	movs	r4, #2
 101acce:	611d      	str	r5, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 101acd0:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 101acd4:	611c      	str	r4, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 101acd6:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 101acda:	6111      	str	r1, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 101acdc:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 101ace0:	611d      	str	r5, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 101ace2:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 101ace6:	611c      	str	r4, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 101ace8:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 101acec:	6111      	str	r1, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 101acee:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
 101acf2:	631d      	str	r5, [r3, #48]	; 0x30
 101acf4:	631c      	str	r4, [r3, #48]	; 0x30
 101acf6:	6311      	str	r1, [r2, #48]	; 0x30
	switch (led_color)
 101acf8:	2807      	cmp	r0, #7
 101acfa:	d80e      	bhi.n	101ad1a <LED_turn_on+0x5a>
 101acfc:	e8df f000 	tbb	[pc, r0]
 101ad00:	28221d18 	.word	0x28221d18
 101ad04:	04040f2f 	.word	0x04040f2f
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
 101ad08:	4b19      	ldr	r3, [pc, #100]	; (101ad70 <LED_turn_on+0xb0>)
 101ad0a:	4a1a      	ldr	r2, [pc, #104]	; (101ad74 <LED_turn_on+0xb4>)
 101ad0c:	2404      	movs	r4, #4
 101ad0e:	2002      	movs	r0, #2
 101ad10:	f44f 7180 	mov.w	r1, #256	; 0x100
 101ad14:	635c      	str	r4, [r3, #52]	; 0x34
 101ad16:	6358      	str	r0, [r3, #52]	; 0x34
 101ad18:	6351      	str	r1, [r2, #52]	; 0x34
}
 101ad1a:	bc30      	pop	{r4, r5}
 101ad1c:	4770      	bx	lr
 101ad1e:	4915      	ldr	r1, [pc, #84]	; (101ad74 <LED_turn_on+0xb4>)
 101ad20:	4b13      	ldr	r3, [pc, #76]	; (101ad70 <LED_turn_on+0xb0>)
 101ad22:	f44f 7080 	mov.w	r0, #256	; 0x100
 101ad26:	2204      	movs	r2, #4
 101ad28:	6348      	str	r0, [r1, #52]	; 0x34
 101ad2a:	635a      	str	r2, [r3, #52]	; 0x34
 101ad2c:	bc30      	pop	{r4, r5}
 101ad2e:	4770      	bx	lr
 101ad30:	4b0f      	ldr	r3, [pc, #60]	; (101ad70 <LED_turn_on+0xb0>)
 101ad32:	2204      	movs	r2, #4
 101ad34:	635a      	str	r2, [r3, #52]	; 0x34
 101ad36:	bc30      	pop	{r4, r5}
 101ad38:	4770      	bx	lr
 101ad3a:	4b0d      	ldr	r3, [pc, #52]	; (101ad70 <LED_turn_on+0xb0>)
 101ad3c:	2202      	movs	r2, #2
 101ad3e:	635a      	str	r2, [r3, #52]	; 0x34
 101ad40:	bc30      	pop	{r4, r5}
 101ad42:	4770      	bx	lr
 101ad44:	4b0b      	ldr	r3, [pc, #44]	; (101ad74 <LED_turn_on+0xb4>)
 101ad46:	f44f 7280 	mov.w	r2, #256	; 0x100
 101ad4a:	635a      	str	r2, [r3, #52]	; 0x34
 101ad4c:	bc30      	pop	{r4, r5}
 101ad4e:	4770      	bx	lr
 101ad50:	4b07      	ldr	r3, [pc, #28]	; (101ad70 <LED_turn_on+0xb0>)
 101ad52:	2104      	movs	r1, #4
 101ad54:	2202      	movs	r2, #2
 101ad56:	6359      	str	r1, [r3, #52]	; 0x34
 101ad58:	635a      	str	r2, [r3, #52]	; 0x34
 101ad5a:	bc30      	pop	{r4, r5}
 101ad5c:	4770      	bx	lr
 101ad5e:	4905      	ldr	r1, [pc, #20]	; (101ad74 <LED_turn_on+0xb4>)
 101ad60:	4b03      	ldr	r3, [pc, #12]	; (101ad70 <LED_turn_on+0xb0>)
 101ad62:	f44f 7080 	mov.w	r0, #256	; 0x100
 101ad66:	2202      	movs	r2, #2
 101ad68:	6348      	str	r0, [r1, #52]	; 0x34
 101ad6a:	635a      	str	r2, [r3, #52]	; 0x34
 101ad6c:	bc30      	pop	{r4, r5}
 101ad6e:	4770      	bx	lr
 101ad70:	400e0e00 	.word	0x400e0e00
 101ad74:	400e1000 	.word	0x400e1000

0101ad78 <LED_diagnosis_led_task>:
{	
 101ad78:	b510      	push	{r4, lr}
	if ( meter.system_state.busy ) {
 101ad7a:	4b0a      	ldr	r3, [pc, #40]	; (101ada4 <LED_diagnosis_led_task+0x2c>)
 101ad7c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 101ad80:	b933      	cbnz	r3, 101ad90 <LED_diagnosis_led_task+0x18>
		uint8_t ed_mode = GRAL_APP_ucGet_st_3_ed_mode();
 101ad82:	4b09      	ldr	r3, [pc, #36]	; (101ada8 <LED_diagnosis_led_task+0x30>)
 101ad84:	4798      	blx	r3
		if ( (ed_mode & FACTORY_FLAG_bm) == 0 ) {
 101ad86:	0703      	lsls	r3, r0, #28
 101ad88:	d500      	bpl.n	101ad8c <LED_diagnosis_led_task+0x14>
 101ad8a:	bd10      	pop	{r4, pc}
			uint16_t ed_std_status1 = GRAL_APP_usGet_st_3_ed_std_status1();
 101ad8c:	4b07      	ldr	r3, [pc, #28]	; (101adac <LED_diagnosis_led_task+0x34>)
 101ad8e:	4798      	blx	r3
				LED_turn_on(LED_MAGENTA);
 101ad90:	2005      	movs	r0, #5
 101ad92:	4b07      	ldr	r3, [pc, #28]	; (101adb0 <LED_diagnosis_led_task+0x38>)
 101ad94:	4798      	blx	r3
				TIMER_start_ms_timer(LED_BLINKING_TIMER, LED_ON_PERIOD, LED_turn_off_all_delay_diagnosis_task);
 101ad96:	4a07      	ldr	r2, [pc, #28]	; (101adb4 <LED_diagnosis_led_task+0x3c>)
 101ad98:	4b07      	ldr	r3, [pc, #28]	; (101adb8 <LED_diagnosis_led_task+0x40>)
 101ad9a:	2132      	movs	r1, #50	; 0x32
 101ad9c:	2008      	movs	r0, #8
}
 101ad9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				TIMER_start_ms_timer(LED_BLINKING_TIMER, LED_ON_PERIOD, LED_turn_off_all_delay_diagnosis_task);
 101ada2:	4718      	bx	r3
 101ada4:	20016c2c 	.word	0x20016c2c
 101ada8:	0101a149 	.word	0x0101a149
 101adac:	0101a155 	.word	0x0101a155
 101adb0:	0101acc1 	.word	0x0101acc1
 101adb4:	0101ac45 	.word	0x0101ac45
 101adb8:	0102ba8d 	.word	0x0102ba8d

0101adbc <LED_turn_off>:
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 101adbc:	4b25      	ldr	r3, [pc, #148]	; (101ae54 <LED_turn_off+0x98>)
 101adbe:	4a26      	ldr	r2, [pc, #152]	; (101ae58 <LED_turn_off+0x9c>)
{
 101adc0:	b430      	push	{r4, r5}
 101adc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 101adc6:	2504      	movs	r5, #4
 101adc8:	2402      	movs	r4, #2
 101adca:	611d      	str	r5, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 101adcc:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 101add0:	611c      	str	r4, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 101add2:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 101add6:	6111      	str	r1, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 101add8:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
	switch (led_color)
 101addc:	2807      	cmp	r0, #7
 101adde:	d80e      	bhi.n	101adfe <LED_turn_off+0x42>
 101ade0:	e8df f000 	tbb	[pc, r0]
 101ade4:	28221d18 	.word	0x28221d18
 101ade8:	04040f2f 	.word	0x04040f2f
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
 101adec:	4b19      	ldr	r3, [pc, #100]	; (101ae54 <LED_turn_off+0x98>)
 101adee:	4a1a      	ldr	r2, [pc, #104]	; (101ae58 <LED_turn_off+0x9c>)
 101adf0:	2404      	movs	r4, #4
 101adf2:	2002      	movs	r0, #2
 101adf4:	f44f 7180 	mov.w	r1, #256	; 0x100
 101adf8:	631c      	str	r4, [r3, #48]	; 0x30
 101adfa:	6318      	str	r0, [r3, #48]	; 0x30
 101adfc:	6311      	str	r1, [r2, #48]	; 0x30
}
 101adfe:	bc30      	pop	{r4, r5}
 101ae00:	4770      	bx	lr
 101ae02:	4915      	ldr	r1, [pc, #84]	; (101ae58 <LED_turn_off+0x9c>)
 101ae04:	4b13      	ldr	r3, [pc, #76]	; (101ae54 <LED_turn_off+0x98>)
 101ae06:	f44f 7080 	mov.w	r0, #256	; 0x100
 101ae0a:	2204      	movs	r2, #4
 101ae0c:	6308      	str	r0, [r1, #48]	; 0x30
 101ae0e:	631a      	str	r2, [r3, #48]	; 0x30
 101ae10:	bc30      	pop	{r4, r5}
 101ae12:	4770      	bx	lr
 101ae14:	4b0f      	ldr	r3, [pc, #60]	; (101ae54 <LED_turn_off+0x98>)
 101ae16:	2204      	movs	r2, #4
 101ae18:	631a      	str	r2, [r3, #48]	; 0x30
 101ae1a:	bc30      	pop	{r4, r5}
 101ae1c:	4770      	bx	lr
 101ae1e:	4b0d      	ldr	r3, [pc, #52]	; (101ae54 <LED_turn_off+0x98>)
 101ae20:	2202      	movs	r2, #2
 101ae22:	631a      	str	r2, [r3, #48]	; 0x30
 101ae24:	bc30      	pop	{r4, r5}
 101ae26:	4770      	bx	lr
 101ae28:	4b0b      	ldr	r3, [pc, #44]	; (101ae58 <LED_turn_off+0x9c>)
 101ae2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 101ae2e:	631a      	str	r2, [r3, #48]	; 0x30
 101ae30:	bc30      	pop	{r4, r5}
 101ae32:	4770      	bx	lr
 101ae34:	4b07      	ldr	r3, [pc, #28]	; (101ae54 <LED_turn_off+0x98>)
 101ae36:	2104      	movs	r1, #4
 101ae38:	2202      	movs	r2, #2
 101ae3a:	6319      	str	r1, [r3, #48]	; 0x30
 101ae3c:	631a      	str	r2, [r3, #48]	; 0x30
 101ae3e:	bc30      	pop	{r4, r5}
 101ae40:	4770      	bx	lr
 101ae42:	4905      	ldr	r1, [pc, #20]	; (101ae58 <LED_turn_off+0x9c>)
 101ae44:	4b03      	ldr	r3, [pc, #12]	; (101ae54 <LED_turn_off+0x98>)
 101ae46:	f44f 7080 	mov.w	r0, #256	; 0x100
 101ae4a:	2202      	movs	r2, #2
 101ae4c:	6308      	str	r0, [r1, #48]	; 0x30
 101ae4e:	631a      	str	r2, [r3, #48]	; 0x30
 101ae50:	bc30      	pop	{r4, r5}
 101ae52:	4770      	bx	lr
 101ae54:	400e0e00 	.word	0x400e0e00
 101ae58:	400e1000 	.word	0x400e1000

0101ae5c <LED_test_rgb>:
{	
 101ae5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 101ae60:	4c3b      	ldr	r4, [pc, #236]	; (101af50 <LED_test_rgb+0xf4>)
 101ae62:	4d3c      	ldr	r5, [pc, #240]	; (101af54 <LED_test_rgb+0xf8>)
	delay_ms(500);	
 101ae64:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 101af58 <LED_test_rgb+0xfc>
 101ae68:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 101af5c <LED_test_rgb+0x100>
	WATCHDOG_APP_vRestart();
 101ae6c:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 101af60 <LED_test_rgb+0x104>
	PFAIL_APP_vTask();
 101ae70:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 101af64 <LED_test_rgb+0x108>
 101ae74:	2702      	movs	r7, #2
 101ae76:	f44f 7680 	mov.w	r6, #256	; 0x100
{	
 101ae7a:	b083      	sub	sp, #12
 101ae7c:	2304      	movs	r3, #4
 101ae7e:	6123      	str	r3, [r4, #16]
	delay_ms(500);	
 101ae80:	4658      	mov	r0, fp
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 101ae82:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 101ae86:	6127      	str	r7, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 101ae88:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 101ae8c:	612e      	str	r6, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 101ae8e:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 101ae92:	6123      	str	r3, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 101ae94:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 101ae98:	6127      	str	r7, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 101ae9a:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 101ae9e:	612e      	str	r6, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 101aea0:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
 101aea4:	6323      	str	r3, [r4, #48]	; 0x30
 101aea6:	6327      	str	r7, [r4, #48]	; 0x30
 101aea8:	632e      	str	r6, [r5, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
 101aeaa:	6363      	str	r3, [r4, #52]	; 0x34
 101aeac:	9301      	str	r3, [sp, #4]
 101aeae:	47d0      	blx	sl
	WATCHDOG_APP_vRestart();
 101aeb0:	47c8      	blx	r9
	PFAIL_APP_vTask();
 101aeb2:	47c0      	blx	r8
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 101aeb4:	9b01      	ldr	r3, [sp, #4]
 101aeb6:	6123      	str	r3, [r4, #16]
	delay_ms(500);
 101aeb8:	4658      	mov	r0, fp
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 101aeba:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 101aebe:	6127      	str	r7, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 101aec0:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 101aec4:	612e      	str	r6, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 101aec6:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 101aeca:	6123      	str	r3, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 101aecc:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 101aed0:	6127      	str	r7, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 101aed2:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 101aed6:	612e      	str	r6, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 101aed8:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
 101aedc:	6323      	str	r3, [r4, #48]	; 0x30
 101aede:	9301      	str	r3, [sp, #4]
 101aee0:	6327      	str	r7, [r4, #48]	; 0x30
 101aee2:	632e      	str	r6, [r5, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
 101aee4:	6367      	str	r7, [r4, #52]	; 0x34
 101aee6:	47d0      	blx	sl
	WATCHDOG_APP_vRestart();
 101aee8:	47c8      	blx	r9
	PFAIL_APP_vTask();
 101aeea:	47c0      	blx	r8
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 101aeec:	9b01      	ldr	r3, [sp, #4]
 101aeee:	6123      	str	r3, [r4, #16]
	delay_ms(500);
 101aef0:	4658      	mov	r0, fp
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 101aef2:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 101aef6:	6127      	str	r7, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 101aef8:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 101aefc:	612e      	str	r6, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 101aefe:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 101af02:	6123      	str	r3, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 101af04:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 101af08:	6127      	str	r7, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 101af0a:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 101af0e:	612e      	str	r6, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 101af10:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
 101af14:	6323      	str	r3, [r4, #48]	; 0x30
 101af16:	9301      	str	r3, [sp, #4]
 101af18:	6327      	str	r7, [r4, #48]	; 0x30
 101af1a:	632e      	str	r6, [r5, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
 101af1c:	636e      	str	r6, [r5, #52]	; 0x34
 101af1e:	47d0      	blx	sl
	WATCHDOG_APP_vRestart();
 101af20:	47c8      	blx	r9
	PFAIL_APP_vTask();
 101af22:	47c0      	blx	r8
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 101af24:	9b01      	ldr	r3, [sp, #4]
 101af26:	6123      	str	r3, [r4, #16]
	delay_ms(500);		
 101af28:	4658      	mov	r0, fp
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 101af2a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 101af2e:	6127      	str	r7, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 101af30:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 101af34:	612e      	str	r6, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 101af36:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
 101af3a:	6323      	str	r3, [r4, #48]	; 0x30
 101af3c:	6327      	str	r7, [r4, #48]	; 0x30
 101af3e:	632e      	str	r6, [r5, #48]	; 0x30
 101af40:	47d0      	blx	sl
	WATCHDOG_APP_vRestart();
 101af42:	47c8      	blx	r9
	PFAIL_APP_vTask();
 101af44:	4643      	mov	r3, r8
}
 101af46:	b003      	add	sp, #12
 101af48:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	PFAIL_APP_vTask();
 101af4c:	4718      	bx	r3
 101af4e:	bf00      	nop
 101af50:	400e0e00 	.word	0x400e0e00
 101af54:	400e1000 	.word	0x400e1000
 101af58:	0037cdb7 	.word	0x0037cdb7
 101af5c:	20000001 	.word	0x20000001
 101af60:	0101603d 	.word	0x0101603d
 101af64:	01025bf1 	.word	0x01025bf1

0101af68 <LP_APP_vSt_62_to_array>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
void LP_APP_vSt_62_to_array(ST_62_TYPE st_62_source, uint8_t *table_buffer) {
 101af68:	b084      	sub	sp, #16
 101af6a:	b5f0      	push	{r4, r5, r6, r7, lr}
	
	uint8_t i, k = 0;
	
	for ( i = 0; i < st_61.nbr_chns_set1; i++ ) {
 101af6c:	4d29      	ldr	r5, [pc, #164]	; (101b014 <LP_APP_vSt_62_to_array+0xac>)
void LP_APP_vSt_62_to_array(ST_62_TYPE st_62_source, uint8_t *table_buffer) {
 101af6e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
	for ( i = 0; i < st_61.nbr_chns_set1; i++ ) {
 101af70:	7b2e      	ldrb	r6, [r5, #12]
void LP_APP_vSt_62_to_array(ST_62_TYPE st_62_source, uint8_t *table_buffer) {
 101af72:	af05      	add	r7, sp, #20
 101af74:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
	for ( i = 0; i < st_61.nbr_chns_set1; i++ ) {
 101af78:	2e00      	cmp	r6, #0
 101af7a:	d047      	beq.n	101b00c <LP_APP_vSt_62_to_array+0xa4>
 101af7c:	2300      	movs	r3, #0
 101af7e:	461a      	mov	r2, r3
 101af80:	e000      	b.n	101af84 <LP_APP_vSt_62_to_array+0x1c>
		table_buffer[k++] = st_62_source.lp_sel_set1[i].chnl_flag;
		table_buffer[k++] = st_62_source.lp_sel_set1[i].lp_source_select;
		table_buffer[k++] = st_62_source.lp_sel_set1[i].end_blk_rdg_source_select;
 101af82:	460b      	mov	r3, r1
		table_buffer[k++] = st_62_source.lp_sel_set1[i].chnl_flag;
 101af84:	eb02 0742 	add.w	r7, r2, r2, lsl #1
 101af88:	a905      	add	r1, sp, #20
 101af8a:	19ce      	adds	r6, r1, r7
 101af8c:	1c58      	adds	r0, r3, #1
		table_buffer[k++] = st_62_source.lp_sel_set1[i].lp_source_select;
 101af8e:	1c99      	adds	r1, r3, #2
		table_buffer[k++] = st_62_source.lp_sel_set1[i].chnl_flag;
 101af90:	f10d 0e14 	add.w	lr, sp, #20
		table_buffer[k++] = st_62_source.lp_sel_set1[i].lp_source_select;
 101af94:	b2c0      	uxtb	r0, r0
		table_buffer[k++] = st_62_source.lp_sel_set1[i].end_blk_rdg_source_select;
 101af96:	b2c9      	uxtb	r1, r1
		table_buffer[k++] = st_62_source.lp_sel_set1[i].chnl_flag;
 101af98:	f81e e007 	ldrb.w	lr, [lr, r7]
		table_buffer[k++] = st_62_source.lp_sel_set1[i].lp_source_select;
 101af9c:	7877      	ldrb	r7, [r6, #1]
		table_buffer[k++] = st_62_source.lp_sel_set1[i].end_blk_rdg_source_select;
 101af9e:	78b6      	ldrb	r6, [r6, #2]
		table_buffer[k++] = st_62_source.lp_sel_set1[i].chnl_flag;
 101afa0:	f804 e003 	strb.w	lr, [r4, r3]
		table_buffer[k++] = st_62_source.lp_sel_set1[i].lp_source_select;
 101afa4:	5427      	strb	r7, [r4, r0]
		table_buffer[k++] = st_62_source.lp_sel_set1[i].end_blk_rdg_source_select;
 101afa6:	5466      	strb	r6, [r4, r1]
	for ( i = 0; i < st_61.nbr_chns_set1; i++ ) {
 101afa8:	3201      	adds	r2, #1
 101afaa:	7b28      	ldrb	r0, [r5, #12]
 101afac:	b2d2      	uxtb	r2, r2
		table_buffer[k++] = st_62_source.lp_sel_set1[i].end_blk_rdg_source_select;
 101afae:	1cd9      	adds	r1, r3, #3
	for ( i = 0; i < st_61.nbr_chns_set1; i++ ) {
 101afb0:	4290      	cmp	r0, r2
		table_buffer[k++] = st_62_source.lp_sel_set1[i].end_blk_rdg_source_select;
 101afb2:	b2c9      	uxtb	r1, r1
	for ( i = 0; i < st_61.nbr_chns_set1; i++ ) {
 101afb4:	d8e5      	bhi.n	101af82 <LP_APP_vSt_62_to_array+0x1a>
 101afb6:	3304      	adds	r3, #4
 101afb8:	b2db      	uxtb	r3, r3
	}
	
	table_buffer[k++] = (uint8_t)16;
 101afba:	2210      	movs	r2, #16
 101afbc:	5462      	strb	r2, [r4, r1]
	
	for ( i = 0; i < st_61.nbr_chns_set1; i++ ) {
 101afbe:	7b2a      	ldrb	r2, [r5, #12]
 101afc0:	b302      	cbz	r2, 101b004 <LP_APP_vSt_62_to_array+0x9c>
 101afc2:	2200      	movs	r2, #0
		convert_16_bit_to_byte_array(st_62_source.scalars_set1[i], &table_buffer[k]);
 101afc4:	a905      	add	r1, sp, #20
 101afc6:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 101afca:	18e0      	adds	r0, r4, r3
 101afcc:	89c9      	ldrh	r1, [r1, #14]
 * @param[out] data Pointer to the 2 Byte array to be updated with 16-Bit value
 * @ingroup apiPalApi
 */
static inline void convert_16_bit_to_byte_array(uint16_t value, uint8_t *data)
{
    data[0] = value & 0xFF;
 101afce:	54e1      	strb	r1, [r4, r3]
    data[1] = (value >> 8) & 0xFF;
 101afd0:	0a09      	lsrs	r1, r1, #8
 101afd2:	7041      	strb	r1, [r0, #1]
	for ( i = 0; i < st_61.nbr_chns_set1; i++ ) {
 101afd4:	3201      	adds	r2, #1
 101afd6:	7b29      	ldrb	r1, [r5, #12]
 101afd8:	b2d2      	uxtb	r2, r2
		k += 2;
 101afda:	3302      	adds	r3, #2
	for ( i = 0; i < st_61.nbr_chns_set1; i++ ) {
 101afdc:	4291      	cmp	r1, r2
		k += 2;
 101afde:	b2db      	uxtb	r3, r3
	for ( i = 0; i < st_61.nbr_chns_set1; i++ ) {
 101afe0:	d8f0      	bhi.n	101afc4 <LP_APP_vSt_62_to_array+0x5c>
	}
	
	for ( i = 0; i < st_61.nbr_chns_set1; i++ ) {
 101afe2:	b179      	cbz	r1, 101b004 <LP_APP_vSt_62_to_array+0x9c>
 101afe4:	2200      	movs	r2, #0
		convert_16_bit_to_byte_array(st_62_source.divisor_set1[i], &table_buffer[k]);
 101afe6:	a905      	add	r1, sp, #20
 101afe8:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 101afec:	18e0      	adds	r0, r4, r3
 101afee:	8ac9      	ldrh	r1, [r1, #22]
    data[0] = value & 0xFF;
 101aff0:	54e1      	strb	r1, [r4, r3]
    data[1] = (value >> 8) & 0xFF;
 101aff2:	0a09      	lsrs	r1, r1, #8
 101aff4:	7041      	strb	r1, [r0, #1]
	for ( i = 0; i < st_61.nbr_chns_set1; i++ ) {
 101aff6:	3201      	adds	r2, #1
 101aff8:	7b29      	ldrb	r1, [r5, #12]
 101affa:	b2d2      	uxtb	r2, r2
		k += 2;
 101affc:	3302      	adds	r3, #2
	for ( i = 0; i < st_61.nbr_chns_set1; i++ ) {
 101affe:	4291      	cmp	r1, r2
		k += 2;
 101b000:	b2db      	uxtb	r3, r3
	for ( i = 0; i < st_61.nbr_chns_set1; i++ ) {
 101b002:	d8f0      	bhi.n	101afe6 <LP_APP_vSt_62_to_array+0x7e>
	}
}
 101b004:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 101b008:	b004      	add	sp, #16
 101b00a:	4770      	bx	lr
	for ( i = 0; i < st_61.nbr_chns_set1; i++ ) {
 101b00c:	4631      	mov	r1, r6
 101b00e:	2301      	movs	r3, #1
 101b010:	e7d3      	b.n	101afba <LP_APP_vSt_62_to_array+0x52>
 101b012:	bf00      	nop
 101b014:	200166b8 	.word	0x200166b8

0101b018 <LP_APP_usGet_block_size>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
uint16_t LP_APP_usGet_block_size(void) {
 101b018:	b430      	push	{r4, r5}
	uint16_t block_size;
	static uint8_t nbr_set_bytes;
	
	block_size += TM_FMAT_SIZE;
		
	for ( j = 0; j < st_61.nbr_chns_set1; j++ ) {
 101b01a:	4812      	ldr	r0, [pc, #72]	; (101b064 <LP_APP_usGet_block_size+0x4c>)
 101b01c:	7b01      	ldrb	r1, [r0, #12]
	block_size += TM_FMAT_SIZE;
 101b01e:	2304      	movs	r3, #4
	for ( j = 0; j < st_61.nbr_chns_set1; j++ ) {
 101b020:	b139      	cbz	r1, 101b032 <LP_APP_usGet_block_size+0x1a>
 101b022:	1e4a      	subs	r2, r1, #1
 101b024:	b2d2      	uxtb	r2, r2
 101b026:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 101b02a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 101b02e:	3306      	adds	r3, #6
 101b030:	b29b      	uxth	r3, r3

		block_size += NI_FMAT1_SIZE;
	}

	nbr_set_bytes = ( (st_61.nbr_blk_ints_set1 + 7) / 8 );
 101b032:	8945      	ldrh	r5, [r0, #10]
 101b034:	1de8      	adds	r0, r5, #7
	block_size += nbr_set_bytes;
 101b036:	f3c0 00c7 	ubfx	r0, r0, #3, #8
 101b03a:	4403      	add	r3, r0
 101b03c:	b298      	uxth	r0, r3
	
	for ( j = 0; j < st_61.nbr_blk_ints_set1; j++ ) {
 101b03e:	b17d      	cbz	r5, 101b060 <LP_APP_usGet_block_size+0x48>
 101b040:	1e4a      	subs	r2, r1, #1
 101b042:	b2d2      	uxtb	r2, r2
 101b044:	0052      	lsls	r2, r2, #1
 101b046:	084c      	lsrs	r4, r1, #1
 101b048:	3202      	adds	r2, #2
 101b04a:	3401      	adds	r4, #1
 101b04c:	2300      	movs	r3, #0
 101b04e:	3301      	adds	r3, #1

		nbr_set_bytes = ( (st_61.nbr_chns_set1 / 2) + 1 );
		block_size += nbr_set_bytes;
 101b050:	4420      	add	r0, r4
	for ( j = 0; j < st_61.nbr_blk_ints_set1; j++ ) {
 101b052:	b2db      	uxtb	r3, r3
		block_size += nbr_set_bytes;
 101b054:	b280      	uxth	r0, r0
		
		for ( l = 0; l < st_61.nbr_chns_set1; l++ ) {
 101b056:	b109      	cbz	r1, 101b05c <LP_APP_usGet_block_size+0x44>
 101b058:	4410      	add	r0, r2
 101b05a:	b280      	uxth	r0, r0
	for ( j = 0; j < st_61.nbr_blk_ints_set1; j++ ) {
 101b05c:	429d      	cmp	r5, r3
 101b05e:	d8f6      	bhi.n	101b04e <LP_APP_usGet_block_size+0x36>
			block_size += 2;
		}
	}
	
	return block_size;
}
 101b060:	bc30      	pop	{r4, r5}
 101b062:	4770      	bx	lr
 101b064:	200166b8 	.word	0x200166b8

0101b068 <LP_APP_bSt_61_validate_data>:
bool LP_APP_bSt_61_validate_data(ST_60_TYPE *st_61_structure) {
 101b068:	b570      	push	{r4, r5, r6, lr}
	uint32_t size_available;
	uint32_t nbr_blocks;
	uint16_t block_size;
	
	size_available = ST_64_END_ADDR - ST_64_START_ADDR;
	block_size = LP_APP_usGet_block_size();
 101b06a:	4c2c      	ldr	r4, [pc, #176]	; (101b11c <LP_APP_bSt_61_validate_data+0xb4>)
bool LP_APP_bSt_61_validate_data(ST_60_TYPE *st_61_structure) {
 101b06c:	4605      	mov	r5, r0
	block_size = LP_APP_usGet_block_size();
 101b06e:	47a0      	blx	r4
	
	nbr_blocks = size_available/block_size;
	
	st_61.nbr_blks_set1 = nbr_blocks;
 101b070:	4a2b      	ldr	r2, [pc, #172]	; (101b120 <LP_APP_bSt_61_validate_data+0xb8>)
	nbr_blocks = size_available/block_size;
 101b072:	4b2c      	ldr	r3, [pc, #176]	; (101b124 <LP_APP_bSt_61_validate_data+0xbc>)
 101b074:	fbb3 f0f0 	udiv	r0, r3, r0
	st_61.nbr_blks_set1 = nbr_blocks;
 101b078:	8110      	strh	r0, [r2, #8]
	if ( st_61_structure->lp_memory_len > MAX_LP_MEMORY_LEN )
 101b07a:	682a      	ldr	r2, [r5, #0]
 101b07c:	331f      	adds	r3, #31
 101b07e:	429a      	cmp	r2, r3
 101b080:	d845      	bhi.n	101b10e <LP_APP_bSt_61_validate_data+0xa6>
	bool is_ok = true;
 101b082:	2001      	movs	r0, #1
 101b084:	88ac      	ldrh	r4, [r5, #4]
		is_ok = false;
 101b086:	2300      	movs	r3, #0
		if ( ( ( (PERM_LP_FLAGS >> i) & 0x01 ) == 0 ) && ( ( (st_61_structure->lp_flags >> i) & 0x01 ) == 1 ) )
 101b088:	f44f 6145 	mov.w	r1, #3152	; 0xc50
 101b08c:	fa41 f203 	asr.w	r2, r1, r3
 101b090:	07d6      	lsls	r6, r2, #31
 101b092:	d405      	bmi.n	101b0a0 <LP_APP_bSt_61_validate_data+0x38>
 101b094:	fa44 f203 	asr.w	r2, r4, r3
			is_ok = false;	
 101b098:	f012 0f01 	tst.w	r2, #1
 101b09c:	bf18      	it	ne
 101b09e:	2000      	movne	r0, #0
 101b0a0:	3301      	adds	r3, #1
	for ( i = 0; i < 16; i++)
 101b0a2:	2b10      	cmp	r3, #16
 101b0a4:	d1f2      	bne.n	101b08c <LP_APP_bSt_61_validate_data+0x24>
	st_61_structure->lp_flags &= PERM_LP_FLAGS;
 101b0a6:	f404 6445 	and.w	r4, r4, #3152	; 0xc50
 101b0aa:	79ae      	ldrb	r6, [r5, #6]
 101b0ac:	80ac      	strh	r4, [r5, #4]
 101b0ae:	2200      	movs	r2, #0
		if ( ( ( (PERM_LP_FMATS >> i) & 0x01 ) == 0 ) && ( ( (st_61_structure->lp_fmats >> i) & 0x01 ) == 1 ) )
 101b0b0:	fa43 f102 	asr.w	r1, r3, r2
 101b0b4:	07c9      	lsls	r1, r1, #31
 101b0b6:	d405      	bmi.n	101b0c4 <LP_APP_bSt_61_validate_data+0x5c>
 101b0b8:	fa46 f102 	asr.w	r1, r6, r2
			is_ok = false;
 101b0bc:	f011 0f01 	tst.w	r1, #1
 101b0c0:	bf18      	it	ne
 101b0c2:	2000      	movne	r0, #0
 101b0c4:	3201      	adds	r2, #1
	for ( i = 0; i < 8; i++)
 101b0c6:	2a08      	cmp	r2, #8
 101b0c8:	d1f2      	bne.n	101b0b0 <LP_APP_bSt_61_validate_data+0x48>
	if ( st_61_structure->nbr_blk_ints_set1 > MAX_NBR_BLK_INTS_SET1 )
 101b0ca:	896b      	ldrh	r3, [r5, #10]
	st_61_structure->lp_fmats &= PERM_LP_FMATS;
 101b0cc:	f006 0610 	and.w	r6, r6, #16
	if ( st_61_structure->nbr_blk_ints_set1 > MAX_NBR_BLK_INTS_SET1 )
 101b0d0:	2b30      	cmp	r3, #48	; 0x30
	st_61_structure->lp_fmats &= PERM_LP_FMATS;
 101b0d2:	71ae      	strb	r6, [r5, #6]
	if ( st_61_structure->nbr_blk_ints_set1 > MAX_NBR_BLK_INTS_SET1 )
 101b0d4:	d902      	bls.n	101b0dc <LP_APP_bSt_61_validate_data+0x74>
		st_61_structure->nbr_blk_ints_set1 = MAX_NBR_BLK_INTS_SET1;
 101b0d6:	2330      	movs	r3, #48	; 0x30
 101b0d8:	816b      	strh	r3, [r5, #10]
		is_ok = false;
 101b0da:	2000      	movs	r0, #0
	if ( st_61_structure->nbr_chns_set1 > MAX_NBR_CHNS_SET1 )
 101b0dc:	7b2b      	ldrb	r3, [r5, #12]
 101b0de:	2b04      	cmp	r3, #4
 101b0e0:	d902      	bls.n	101b0e8 <LP_APP_bSt_61_validate_data+0x80>
		st_61_structure->nbr_chns_set1 = MAX_NBR_CHNS_SET1;
 101b0e2:	2304      	movs	r3, #4
 101b0e4:	732b      	strb	r3, [r5, #12]
		is_ok = false;
 101b0e6:	2000      	movs	r0, #0
	if ( (60 % st_61_structure->max_int_time_set1) == 0 )
 101b0e8:	7b6a      	ldrb	r2, [r5, #13]
 101b0ea:	213c      	movs	r1, #60	; 0x3c
 101b0ec:	fb91 f3f2 	sdiv	r3, r1, r2
 101b0f0:	fb02 f303 	mul.w	r3, r2, r3
 101b0f4:	1acb      	subs	r3, r1, r3
 101b0f6:	d106      	bne.n	101b106 <LP_APP_bSt_61_validate_data+0x9e>
		if (st_61_structure->max_int_time_set1 < MIN_INT_TIME_SET1)
 101b0f8:	2a04      	cmp	r2, #4
 101b0fa:	d904      	bls.n	101b106 <LP_APP_bSt_61_validate_data+0x9e>
		else if (st_61_structure->max_int_time_set1 > MAX_INT_TIME_SET1)
 101b0fc:	2a3c      	cmp	r2, #60	; 0x3c
			st_61_structure->max_int_time_set1 = MAX_INT_TIME_SET1;
 101b0fe:	bf84      	itt	hi
 101b100:	7369      	strbhi	r1, [r5, #13]
			is_ok = false;
 101b102:	4618      	movhi	r0, r3
}
 101b104:	bd70      	pop	{r4, r5, r6, pc}
			st_61_structure->max_int_time_set1 = MIN_INT_TIME_SET1;
 101b106:	2305      	movs	r3, #5
 101b108:	736b      	strb	r3, [r5, #13]
			is_ok = false;
 101b10a:	2000      	movs	r0, #0
 101b10c:	bd70      	pop	{r4, r5, r6, pc}
		st_61_structure->lp_memory_len = st_61_structure->nbr_blks_set1 * LP_APP_usGet_block_size();
 101b10e:	47a0      	blx	r4
 101b110:	892b      	ldrh	r3, [r5, #8]
 101b112:	fb00 f003 	mul.w	r0, r0, r3
 101b116:	6028      	str	r0, [r5, #0]
		is_ok = false;
 101b118:	2000      	movs	r0, #0
 101b11a:	e7b3      	b.n	101b084 <LP_APP_bSt_61_validate_data+0x1c>
 101b11c:	0101b019 	.word	0x0101b019
 101b120:	200166b8 	.word	0x200166b8
 101b124:	0003ffe2 	.word	0x0003ffe2

0101b128 <LP_APP_vSt_61_read_eeprom_values>:
void LP_APP_vSt_61_read_eeprom_values(ST_60_TYPE *st_61_structure) {
 101b128:	b570      	push	{r4, r5, r6, lr}
	EEPROM_reader( ST_61_LP_MEMORY_LEN_ADDR, &st_61_structure->lp_memory_len, 4 );
 101b12a:	4601      	mov	r1, r0
void LP_APP_vSt_61_read_eeprom_values(ST_60_TYPE *st_61_structure) {
 101b12c:	4605      	mov	r5, r0
	EEPROM_reader( ST_61_LP_MEMORY_LEN_ADDR, &st_61_structure->lp_memory_len, 4 );
 101b12e:	4c15      	ldr	r4, [pc, #84]	; (101b184 <LP_APP_vSt_61_read_eeprom_values+0x5c>)
 101b130:	2204      	movs	r2, #4
 101b132:	f640 50dd 	movw	r0, #3549	; 0xddd
 101b136:	47a0      	blx	r4
	EEPROM_reader( ST_61_LP_FLAGS_ADDR, &st_61_structure->lp_flags, 2 );
 101b138:	1d29      	adds	r1, r5, #4
 101b13a:	2202      	movs	r2, #2
 101b13c:	f640 50e1 	movw	r0, #3553	; 0xde1
 101b140:	47a0      	blx	r4
	EEPROM_reader( ST_61_LP_FMATS_ADDR, &st_61_structure->lp_fmats, 1 );
 101b142:	1da9      	adds	r1, r5, #6
 101b144:	2201      	movs	r2, #1
 101b146:	f640 50e3 	movw	r0, #3555	; 0xde3
 101b14a:	47a0      	blx	r4
	EEPROM_reader( ST_61_NBR_BLKS_SET1_ADDR, &st_61_structure->nbr_blks_set1, 2 );
 101b14c:	f105 0108 	add.w	r1, r5, #8
 101b150:	2202      	movs	r2, #2
 101b152:	f640 50e4 	movw	r0, #3556	; 0xde4
 101b156:	47a0      	blx	r4
	EEPROM_reader( ST_61_NBR_BLK_INTS_SET1_ADDR, &st_61_structure->nbr_blk_ints_set1, 2 );
 101b158:	f105 010a 	add.w	r1, r5, #10
 101b15c:	2202      	movs	r2, #2
 101b15e:	f640 50e6 	movw	r0, #3558	; 0xde6
 101b162:	47a0      	blx	r4
	EEPROM_reader( ST_61_NBR_CHNS_SET1_ADDR, &st_61_structure->nbr_chns_set1, 1 );
 101b164:	f105 010c 	add.w	r1, r5, #12
 101b168:	2201      	movs	r2, #1
 101b16a:	f640 50e8 	movw	r0, #3560	; 0xde8
 101b16e:	47a0      	blx	r4
	EEPROM_reader( ST_61_MAX_INT_TIME_SET1_ADDR, &st_61_structure->max_int_time_set1, 1 );
 101b170:	f105 010d 	add.w	r1, r5, #13
 101b174:	4623      	mov	r3, r4
 101b176:	2201      	movs	r2, #1
 101b178:	f640 50e9 	movw	r0, #3561	; 0xde9
}
 101b17c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	EEPROM_reader( ST_61_MAX_INT_TIME_SET1_ADDR, &st_61_structure->max_int_time_set1, 1 );
 101b180:	4718      	bx	r3
 101b182:	bf00      	nop
 101b184:	01017511 	.word	0x01017511

0101b188 <LP_APP_vSt_62_read_eeprom_values>:
void LP_APP_vSt_62_read_eeprom_values(ST_62_TYPE *st_62_structure) {	
 101b188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for ( uint8_t i = 0; i < st_61.nbr_chns_set1; i++ ) {
 101b18c:	f8df 8074 	ldr.w	r8, [pc, #116]	; 101b204 <LP_APP_vSt_62_read_eeprom_values+0x7c>
 101b190:	4f1b      	ldr	r7, [pc, #108]	; (101b200 <LP_APP_vSt_62_read_eeprom_values+0x78>)
 101b192:	f898 300c 	ldrb.w	r3, [r8, #12]
void LP_APP_vSt_62_read_eeprom_values(ST_62_TYPE *st_62_structure) {	
 101b196:	4606      	mov	r6, r0
	for ( uint8_t i = 0; i < st_61.nbr_chns_set1; i++ ) {
 101b198:	2400      	movs	r4, #0
 101b19a:	b343      	cbz	r3, 101b1ee <LP_APP_vSt_62_read_eeprom_values+0x66>
 101b19c:	eb04 0544 	add.w	r5, r4, r4, lsl #1
		EEPROM_reader( ST_62_CHNL_FLAG_SET1_ADDR + i, &st_62_structure->lp_sel_set1[i].chnl_flag, 1 );
 101b1a0:	1971      	adds	r1, r6, r5
 101b1a2:	2201      	movs	r2, #1
 101b1a4:	f604 50f3 	addw	r0, r4, #3571	; 0xdf3
 101b1a8:	47b8      	blx	r7
		EEPROM_reader( ST_62_LP_SOURCE_SELECT_SET1_ADDR + i, &st_62_structure->lp_sel_set1[i].lp_source_select, 1 );
 101b1aa:	1c69      	adds	r1, r5, #1
 101b1ac:	4431      	add	r1, r6
 101b1ae:	2201      	movs	r2, #1
 101b1b0:	f604 50f7 	addw	r0, r4, #3575	; 0xdf7
 101b1b4:	47b8      	blx	r7
		EEPROM_reader( ST_62_END_BLK_RDG_SOURCE_SELECT_SET1_ADDR + i, &st_62_structure->lp_sel_set1[i].end_blk_rdg_source_select, 1 );
 101b1b6:	1ca9      	adds	r1, r5, #2
		EEPROM_reader( ST_62_SCALARS_SET1_ADDR + 2*i, &st_62_structure->scalars_set1[i], 2 );
 101b1b8:	f504 65e0 	add.w	r5, r4, #1792	; 0x700
 101b1bc:	006d      	lsls	r5, r5, #1
		EEPROM_reader( ST_62_END_BLK_RDG_SOURCE_SELECT_SET1_ADDR + i, &st_62_structure->lp_sel_set1[i].end_blk_rdg_source_select, 1 );
 101b1be:	4431      	add	r1, r6
 101b1c0:	2201      	movs	r2, #1
 101b1c2:	f604 50fb 	addw	r0, r4, #3579	; 0xdfb
 101b1c6:	47b8      	blx	r7
		EEPROM_reader( ST_62_SCALARS_SET1_ADDR + 2*i, &st_62_structure->scalars_set1[i], 2 );
 101b1c8:	f6a5 51f2 	subw	r1, r5, #3570	; 0xdf2
 101b1cc:	4431      	add	r1, r6
 101b1ce:	2202      	movs	r2, #2
 101b1d0:	4628      	mov	r0, r5
 101b1d2:	47b8      	blx	r7
		EEPROM_reader( ST_62_DIVISOR_SET1_ADDR + 2*i, &st_62_structure->divisor_set1[i], 2 );
 101b1d4:	f6a5 51ea 	subw	r1, r5, #3562	; 0xdea
 101b1d8:	4431      	add	r1, r6
 101b1da:	f105 0008 	add.w	r0, r5, #8
 101b1de:	2202      	movs	r2, #2
 101b1e0:	47b8      	blx	r7
	for ( uint8_t i = 0; i < st_61.nbr_chns_set1; i++ ) {
 101b1e2:	3401      	adds	r4, #1
 101b1e4:	f898 300c 	ldrb.w	r3, [r8, #12]
 101b1e8:	b2e4      	uxtb	r4, r4
 101b1ea:	42a3      	cmp	r3, r4
 101b1ec:	d8d6      	bhi.n	101b19c <LP_APP_vSt_62_read_eeprom_values+0x14>
	EEPROM_reader( ST_62_INT_FMT_CDE1_ADDR, &st_62_structure->int_fmt_cde1, 1 );
 101b1ee:	f106 010c 	add.w	r1, r6, #12
 101b1f2:	463b      	mov	r3, r7
 101b1f4:	2201      	movs	r2, #1
 101b1f6:	f640 50ff 	movw	r0, #3583	; 0xdff
}
 101b1fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	EEPROM_reader( ST_62_INT_FMT_CDE1_ADDR, &st_62_structure->int_fmt_cde1, 1 );
 101b1fe:	4718      	bx	r3
 101b200:	01017511 	.word	0x01017511
 101b204:	200166b8 	.word	0x200166b8

0101b208 <LP_APP_vSt_62_write_eeprom_values.constprop.3>:
void LP_APP_vSt_62_write_eeprom_values(ST_62_TYPE *st_62_structure) {
 101b208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for ( i = 0; i < st_61.nbr_chns_set1; i++ ) {
 101b20c:	f8df 8090 	ldr.w	r8, [pc, #144]	; 101b2a0 <LP_APP_vSt_62_write_eeprom_values.constprop.3+0x98>
	SM_APP_vChange_table_state(ST_62_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
 101b210:	f8df 9090 	ldr.w	r9, [pc, #144]	; 101b2a4 <LP_APP_vSt_62_write_eeprom_values.constprop.3+0x9c>
 101b214:	4e1f      	ldr	r6, [pc, #124]	; (101b294 <LP_APP_vSt_62_write_eeprom_values.constprop.3+0x8c>)
 101b216:	21ff      	movs	r1, #255	; 0xff
 101b218:	f44f 605f 	mov.w	r0, #3568	; 0xdf0
 101b21c:	47c8      	blx	r9
	for ( i = 0; i < st_61.nbr_chns_set1; i++ ) {
 101b21e:	f898 300c 	ldrb.w	r3, [r8, #12]
 101b222:	b353      	cbz	r3, 101b27a <LP_APP_vSt_62_write_eeprom_values.constprop.3+0x72>
 101b224:	4f1c      	ldr	r7, [pc, #112]	; (101b298 <LP_APP_vSt_62_write_eeprom_values.constprop.3+0x90>)
 101b226:	2400      	movs	r4, #0
 101b228:	eb04 0544 	add.w	r5, r4, r4, lsl #1
		EEPROM_writer( ST_62_CHNL_FLAG_SET1_ADDR + i, &st_62_structure->lp_sel_set1[i].chnl_flag, 1 );
 101b22c:	1979      	adds	r1, r7, r5
 101b22e:	2201      	movs	r2, #1
 101b230:	f604 50f3 	addw	r0, r4, #3571	; 0xdf3
 101b234:	47b0      	blx	r6
		EEPROM_writer( ST_62_LP_SOURCE_SELECT_SET1_ADDR + i, &st_62_structure->lp_sel_set1[i].lp_source_select, 1 );
 101b236:	1c69      	adds	r1, r5, #1
 101b238:	4439      	add	r1, r7
 101b23a:	2201      	movs	r2, #1
 101b23c:	f604 50f7 	addw	r0, r4, #3575	; 0xdf7
 101b240:	47b0      	blx	r6
		EEPROM_writer( ST_62_END_BLK_RDG_SOURCE_SELECT_SET1_ADDR + i, &st_62_structure->lp_sel_set1[i].end_blk_rdg_source_select, 1 );
 101b242:	1ca9      	adds	r1, r5, #2
		EEPROM_writer( ST_62_SCALARS_SET1_ADDR + 2*i, &st_62_structure->scalars_set1[i], 2 );
 101b244:	f504 65e0 	add.w	r5, r4, #1792	; 0x700
 101b248:	006d      	lsls	r5, r5, #1
		EEPROM_writer( ST_62_END_BLK_RDG_SOURCE_SELECT_SET1_ADDR + i, &st_62_structure->lp_sel_set1[i].end_blk_rdg_source_select, 1 );
 101b24a:	4439      	add	r1, r7
 101b24c:	2201      	movs	r2, #1
 101b24e:	f604 50fb 	addw	r0, r4, #3579	; 0xdfb
 101b252:	47b0      	blx	r6
		EEPROM_writer( ST_62_SCALARS_SET1_ADDR + 2*i, &st_62_structure->scalars_set1[i], 2 );
 101b254:	f6a5 51f2 	subw	r1, r5, #3570	; 0xdf2
 101b258:	4439      	add	r1, r7
 101b25a:	2202      	movs	r2, #2
 101b25c:	4628      	mov	r0, r5
 101b25e:	47b0      	blx	r6
		EEPROM_writer( ST_62_DIVISOR_SET1_ADDR + 2*i, &st_62_structure->divisor_set1[i], 2 );
 101b260:	f6a5 51ea 	subw	r1, r5, #3562	; 0xdea
 101b264:	4439      	add	r1, r7
 101b266:	f105 0008 	add.w	r0, r5, #8
 101b26a:	2202      	movs	r2, #2
 101b26c:	47b0      	blx	r6
	for ( i = 0; i < st_61.nbr_chns_set1; i++ ) {
 101b26e:	3401      	adds	r4, #1
 101b270:	f898 300c 	ldrb.w	r3, [r8, #12]
 101b274:	b2e4      	uxtb	r4, r4
 101b276:	42a3      	cmp	r3, r4
 101b278:	d8d6      	bhi.n	101b228 <LP_APP_vSt_62_write_eeprom_values.constprop.3+0x20>
	EEPROM_writer( ST_62_INT_FMT_CDE1_ADDR, &st_62_structure->int_fmt_cde1, 1 );
 101b27a:	4908      	ldr	r1, [pc, #32]	; (101b29c <LP_APP_vSt_62_write_eeprom_values.constprop.3+0x94>)
 101b27c:	2201      	movs	r2, #1
 101b27e:	f640 50ff 	movw	r0, #3583	; 0xdff
 101b282:	47b0      	blx	r6
	SM_APP_vChange_table_state(ST_62_PROG_STATE_ADDR, C1219_TABLE_FULL);
 101b284:	464b      	mov	r3, r9
 101b286:	2145      	movs	r1, #69	; 0x45
 101b288:	f44f 605f 	mov.w	r0, #3568	; 0xdf0
}
 101b28c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SM_APP_vChange_table_state(ST_62_PROG_STATE_ADDR, C1219_TABLE_FULL);
 101b290:	4718      	bx	r3
 101b292:	bf00      	nop
 101b294:	01017509 	.word	0x01017509
 101b298:	20016724 	.word	0x20016724
 101b29c:	20016730 	.word	0x20016730
 101b2a0:	200166b8 	.word	0x200166b8
 101b2a4:	010203e9 	.word	0x010203e9

0101b2a8 <LP_APP_vSt_63_write_eeprom_values.constprop.4>:
void LP_APP_vSt_63_write_eeprom_values(ST_63_TYPE *st_63_structure) {
 101b2a8:	b570      	push	{r4, r5, r6, lr}
	EEPROM_writer( ST_63_SET_STATUS_FLAGS_ADDR, &st_63_structure->lp_set_status_flags, 1 );
 101b2aa:	4d17      	ldr	r5, [pc, #92]	; (101b308 <LP_APP_vSt_63_write_eeprom_values.constprop.4+0x60>)
	SM_APP_vChange_table_state(ST_63_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
 101b2ac:	4e17      	ldr	r6, [pc, #92]	; (101b30c <LP_APP_vSt_63_write_eeprom_values.constprop.4+0x64>)
	EEPROM_writer( ST_63_SET_STATUS_FLAGS_ADDR, &st_63_structure->lp_set_status_flags, 1 );
 101b2ae:	4c18      	ldr	r4, [pc, #96]	; (101b310 <LP_APP_vSt_63_write_eeprom_values.constprop.4+0x68>)
	SM_APP_vChange_table_state(ST_63_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
 101b2b0:	21ff      	movs	r1, #255	; 0xff
 101b2b2:	f646 103a 	movw	r0, #26938	; 0x693a
 101b2b6:	47b0      	blx	r6
	EEPROM_writer( ST_63_SET_STATUS_FLAGS_ADDR, &st_63_structure->lp_set_status_flags, 1 );
 101b2b8:	4629      	mov	r1, r5
 101b2ba:	2201      	movs	r2, #1
 101b2bc:	f646 103b 	movw	r0, #26939	; 0x693b
 101b2c0:	47a0      	blx	r4
	EEPROM_writer( ST_63_NBR_VALID_BLOCKS_ADDR, &st_63_structure->nbr_valid_blocks, 2 );
 101b2c2:	1ca9      	adds	r1, r5, #2
 101b2c4:	2202      	movs	r2, #2
 101b2c6:	f646 103c 	movw	r0, #26940	; 0x693c
 101b2ca:	47a0      	blx	r4
	EEPROM_writer( ST_63_LAST_BLOCK_ELEMENT_ADDR, &st_63_structure->last_block_element, 2 );
 101b2cc:	1d29      	adds	r1, r5, #4
 101b2ce:	2202      	movs	r2, #2
 101b2d0:	f646 103e 	movw	r0, #26942	; 0x693e
 101b2d4:	47a0      	blx	r4
	EEPROM_writer( ST_63_LAST_BLOCK_SEQ_NBR_ADDR, &st_63_structure->last_block_seq_nbr, 4 );
 101b2d6:	f105 0108 	add.w	r1, r5, #8
 101b2da:	2204      	movs	r2, #4
 101b2dc:	f646 1040 	movw	r0, #26944	; 0x6940
 101b2e0:	47a0      	blx	r4
	EEPROM_writer( ST_63_NBR_UNREAD_BLOCKS_ADDR, &st_63_structure->nbr_unread_blocks, 2 );
 101b2e2:	f105 010c 	add.w	r1, r5, #12
 101b2e6:	2202      	movs	r2, #2
 101b2e8:	f646 1044 	movw	r0, #26948	; 0x6944
 101b2ec:	47a0      	blx	r4
	EEPROM_writer( ST_63_NBR_VALID_INT_ADDR, &st_63_structure->nbr_valid_int, 2 );
 101b2ee:	f105 010e 	add.w	r1, r5, #14
 101b2f2:	2202      	movs	r2, #2
 101b2f4:	f646 1046 	movw	r0, #26950	; 0x6946
 101b2f8:	47a0      	blx	r4
	SM_APP_vChange_table_state(ST_63_PROG_STATE_ADDR, C1219_TABLE_FULL);
 101b2fa:	4633      	mov	r3, r6
 101b2fc:	2145      	movs	r1, #69	; 0x45
 101b2fe:	f646 103a 	movw	r0, #26938	; 0x693a
}
 101b302:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	SM_APP_vChange_table_state(ST_63_PROG_STATE_ADDR, C1219_TABLE_FULL);
 101b306:	4718      	bx	r3
 101b308:	20016744 	.word	0x20016744
 101b30c:	010203e9 	.word	0x010203e9
 101b310:	01017509 	.word	0x01017509

0101b314 <LP_APP_vSt_61_write_eeprom_values.constprop.5>:
void LP_APP_vSt_61_write_eeprom_values(ST_60_TYPE *st_61_structure) {
 101b314:	b570      	push	{r4, r5, r6, lr}
	EEPROM_writer( ST_61_LP_MEMORY_LEN_ADDR, &st_61_structure->lp_memory_len, 4 );
 101b316:	4d1a      	ldr	r5, [pc, #104]	; (101b380 <LP_APP_vSt_61_write_eeprom_values.constprop.5+0x6c>)
	SM_APP_vChange_table_state(ST_61_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
 101b318:	4e1a      	ldr	r6, [pc, #104]	; (101b384 <LP_APP_vSt_61_write_eeprom_values.constprop.5+0x70>)
	EEPROM_writer( ST_61_LP_MEMORY_LEN_ADDR, &st_61_structure->lp_memory_len, 4 );
 101b31a:	4c1b      	ldr	r4, [pc, #108]	; (101b388 <LP_APP_vSt_61_write_eeprom_values.constprop.5+0x74>)
	SM_APP_vChange_table_state(ST_61_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
 101b31c:	21ff      	movs	r1, #255	; 0xff
 101b31e:	f640 50da 	movw	r0, #3546	; 0xdda
 101b322:	47b0      	blx	r6
	EEPROM_writer( ST_61_LP_MEMORY_LEN_ADDR, &st_61_structure->lp_memory_len, 4 );
 101b324:	4629      	mov	r1, r5
 101b326:	2204      	movs	r2, #4
 101b328:	f640 50dd 	movw	r0, #3549	; 0xddd
 101b32c:	47a0      	blx	r4
	EEPROM_writer( ST_61_LP_FLAGS_ADDR, &st_61_structure->lp_flags, 2 );
 101b32e:	1d29      	adds	r1, r5, #4
 101b330:	2202      	movs	r2, #2
 101b332:	f640 50e1 	movw	r0, #3553	; 0xde1
 101b336:	47a0      	blx	r4
	EEPROM_writer( ST_61_LP_FMATS_ADDR, &st_61_structure->lp_fmats, 1 );
 101b338:	1da9      	adds	r1, r5, #6
 101b33a:	2201      	movs	r2, #1
 101b33c:	f640 50e3 	movw	r0, #3555	; 0xde3
 101b340:	47a0      	blx	r4
	EEPROM_writer( ST_61_NBR_BLKS_SET1_ADDR, &st_61_structure->nbr_blks_set1, 2 );
 101b342:	f105 0108 	add.w	r1, r5, #8
 101b346:	2202      	movs	r2, #2
 101b348:	f640 50e4 	movw	r0, #3556	; 0xde4
 101b34c:	47a0      	blx	r4
	EEPROM_writer( ST_61_NBR_BLK_INTS_SET1_ADDR, &st_61_structure->nbr_blk_ints_set1, 2 );
 101b34e:	f105 010a 	add.w	r1, r5, #10
 101b352:	2202      	movs	r2, #2
 101b354:	f640 50e6 	movw	r0, #3558	; 0xde6
 101b358:	47a0      	blx	r4
	EEPROM_writer( ST_61_NBR_CHNS_SET1_ADDR, &st_61_structure->nbr_chns_set1, 1 );
 101b35a:	f105 010c 	add.w	r1, r5, #12
 101b35e:	2201      	movs	r2, #1
 101b360:	f640 50e8 	movw	r0, #3560	; 0xde8
 101b364:	47a0      	blx	r4
	EEPROM_writer( ST_61_MAX_INT_TIME_SET1_ADDR, &st_61_structure->max_int_time_set1, 1 );
 101b366:	f105 010d 	add.w	r1, r5, #13
 101b36a:	2201      	movs	r2, #1
 101b36c:	f640 50e9 	movw	r0, #3561	; 0xde9
 101b370:	47a0      	blx	r4
	SM_APP_vChange_table_state(ST_61_PROG_STATE_ADDR, C1219_TABLE_FULL);
 101b372:	4633      	mov	r3, r6
 101b374:	2145      	movs	r1, #69	; 0x45
 101b376:	f640 50da 	movw	r0, #3546	; 0xdda
}
 101b37a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	SM_APP_vChange_table_state(ST_61_PROG_STATE_ADDR, C1219_TABLE_FULL);
 101b37e:	4718      	bx	r3
 101b380:	200166b8 	.word	0x200166b8
 101b384:	010203e9 	.word	0x010203e9
 101b388:	01017509 	.word	0x01017509

0101b38c <LP_APP_bSt_60_execute_table_reading>:
bool LP_APP_bSt_60_execute_table_reading(uint8_t *table_buffer) {
 101b38c:	b4f0      	push	{r4, r5, r6, r7}
 101b38e:	4603      	mov	r3, r0
	table_buffer[k++] = (uint8_t)(MAX_LP_MEMORY_LEN >> 8);
 101b390:	2100      	movs	r1, #0
	table_buffer[k++] = (uint8_t)(MAX_LP_MEMORY_LEN >> 16);
 101b392:	2404      	movs	r4, #4
	table_buffer[k++] = (uint8_t)(PERM_LP_FLAGS);
 101b394:	2750      	movs	r7, #80	; 0x50
	table_buffer[k++] = (uint8_t)(PERM_LP_FLAGS >> 8);
 101b396:	260c      	movs	r6, #12
	table_buffer[k++] = (uint8_t)(PERM_LP_FMATS);
 101b398:	2510      	movs	r5, #16
	table_buffer[k++] = (uint8_t)(MAX_LP_MEMORY_LEN);
 101b39a:	2001      	movs	r0, #1
	table_buffer[k++] = (uint8_t)(st_61.nbr_blks_set1);
 101b39c:	4a0a      	ldr	r2, [pc, #40]	; (101b3c8 <LP_APP_bSt_60_execute_table_reading+0x3c>)
	table_buffer[k++] = (uint8_t)(MAX_LP_MEMORY_LEN >> 8);
 101b39e:	7059      	strb	r1, [r3, #1]
	table_buffer[k++] = (uint8_t)(MAX_LP_MEMORY_LEN >> 24);
 101b3a0:	70d9      	strb	r1, [r3, #3]
	table_buffer[k++] = (uint8_t)(PERM_LP_FLAGS);
 101b3a2:	711f      	strb	r7, [r3, #4]
	table_buffer[k++] = (uint8_t)(PERM_LP_FLAGS >> 8);
 101b3a4:	715e      	strb	r6, [r3, #5]
	table_buffer[k++] = (uint8_t)(PERM_LP_FMATS);
 101b3a6:	719d      	strb	r5, [r3, #6]
	table_buffer[k++] = (uint8_t)(MAX_LP_MEMORY_LEN);
 101b3a8:	7018      	strb	r0, [r3, #0]
	table_buffer[k++] = (uint8_t)(MAX_LP_MEMORY_LEN >> 16);
 101b3aa:	709c      	strb	r4, [r3, #2]
	table_buffer[k++] = (uint8_t)(st_61.nbr_blks_set1);
 101b3ac:	8915      	ldrh	r5, [r2, #8]
 101b3ae:	71dd      	strb	r5, [r3, #7]
	table_buffer[k++] = (uint8_t)(st_61.nbr_blks_set1 >> 8);
 101b3b0:	8912      	ldrh	r2, [r2, #8]
	table_buffer[k++] = (uint8_t)(MAX_NBR_BLK_INTS_SET1 >> 8);
 101b3b2:	7299      	strb	r1, [r3, #10]
	table_buffer[k++] = (uint8_t)(MAX_NBR_BLK_INTS_SET1);
 101b3b4:	2530      	movs	r5, #48	; 0x30
	table_buffer[k++] = (uint8_t)(st_61.nbr_blks_set1 >> 8);
 101b3b6:	0a12      	lsrs	r2, r2, #8
	table_buffer[k++] = (uint8_t)(MAX_MAX_INT_TIME_SET1);
 101b3b8:	213c      	movs	r1, #60	; 0x3c
	table_buffer[k++] = (uint8_t)(MAX_NBR_CHNS_SET1);
 101b3ba:	72dc      	strb	r4, [r3, #11]
	table_buffer[k++] = (uint8_t)(st_61.nbr_blks_set1 >> 8);
 101b3bc:	721a      	strb	r2, [r3, #8]
	table_buffer[k++] = (uint8_t)(MAX_NBR_BLK_INTS_SET1);
 101b3be:	725d      	strb	r5, [r3, #9]
	table_buffer[k++] = (uint8_t)(MAX_MAX_INT_TIME_SET1);
 101b3c0:	7319      	strb	r1, [r3, #12]
}
 101b3c2:	bcf0      	pop	{r4, r5, r6, r7}
 101b3c4:	4770      	bx	lr
 101b3c6:	bf00      	nop
 101b3c8:	200166b8 	.word	0x200166b8

0101b3cc <LP_APP_usSt_60_get_size>:
 101b3cc:	200d      	movs	r0, #13
 101b3ce:	4770      	bx	lr

0101b3d0 <LP_APP_bSt_61_restore_default_values>:
bool LP_APP_bSt_61_restore_default_values(void) {
 101b3d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 101b3d4:	b084      	sub	sp, #16
	st_61_temp.nbr_blk_ints_set1 = DEFAULT_NBR_BLK_INTS_SET1;
 101b3d6:	f04f 0830 	mov.w	r8, #48	; 0x30
	st_61_temp.nbr_chns_set1 =  DEFAULT_NBR_CHNS_SET1;
 101b3da:	2104      	movs	r1, #4
	st_61_temp.max_int_time_set1 = DEFAULT_MAX_INT_TIME_SET1;
 101b3dc:	2205      	movs	r2, #5
	is_ok = LP_APP_bSt_61_validate_data(&st_61_temp);
 101b3de:	4668      	mov	r0, sp
	st_61_temp.lp_flags = DEFAULT_LP_FLAGS;
 101b3e0:	f44f 6645 	mov.w	r6, #3152	; 0xc50
	st_61_temp.lp_fmats = DEFAULT_LP_FMATS;
 101b3e4:	2510      	movs	r5, #16
	is_ok = LP_APP_bSt_61_validate_data(&st_61_temp);
 101b3e6:	4b14      	ldr	r3, [pc, #80]	; (101b438 <LP_APP_bSt_61_restore_default_values+0x68>)
	st_61_temp.lp_flags = DEFAULT_LP_FLAGS;
 101b3e8:	f8ad 6004 	strh.w	r6, [sp, #4]
	st_61_temp.lp_fmats = DEFAULT_LP_FMATS;
 101b3ec:	f88d 5006 	strb.w	r5, [sp, #6]
	st_61_temp.nbr_chns_set1 =  DEFAULT_NBR_CHNS_SET1;
 101b3f0:	f88d 100c 	strb.w	r1, [sp, #12]
	st_61_temp.max_int_time_set1 = DEFAULT_MAX_INT_TIME_SET1;
 101b3f4:	f88d 200d 	strb.w	r2, [sp, #13]
	st_61_temp.nbr_blk_ints_set1 = DEFAULT_NBR_BLK_INTS_SET1;
 101b3f8:	f8ad 800a 	strh.w	r8, [sp, #10]
	is_ok = LP_APP_bSt_61_validate_data(&st_61_temp);
 101b3fc:	4798      	blx	r3
 101b3fe:	4607      	mov	r7, r0
	st_61 = st_61_temp;
 101b400:	e89d 000f 	ldmia.w	sp, {r0, r1, r2, r3}
 101b404:	4d0d      	ldr	r5, [pc, #52]	; (101b43c <LP_APP_bSt_61_restore_default_values+0x6c>)
	block_size = LP_APP_usGet_block_size();
 101b406:	4e0e      	ldr	r6, [pc, #56]	; (101b440 <LP_APP_bSt_61_restore_default_values+0x70>)
	nbr_blocks = size_available/block_size;
 101b408:	4c0e      	ldr	r4, [pc, #56]	; (101b444 <LP_APP_bSt_61_restore_default_values+0x74>)
	st_61 = st_61_temp;
 101b40a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	st_61.nbr_blk_ints_set1 = DEFAULT_NBR_BLK_INTS_SET1;
 101b40e:	f8a5 800a 	strh.w	r8, [r5, #10]
	block_size = LP_APP_usGet_block_size();
 101b412:	47b0      	blx	r6
	nbr_blocks = size_available/block_size;
 101b414:	fbb4 f4f0 	udiv	r4, r4, r0
	st_61.nbr_blks_set1 = nbr_blocks;
 101b418:	812c      	strh	r4, [r5, #8]
	st_61.lp_memory_len = st_61.nbr_blks_set1 * LP_APP_usGet_block_size();
 101b41a:	47b0      	blx	r6
 101b41c:	b2a4      	uxth	r4, r4
 101b41e:	fb00 f404 	mul.w	r4, r0, r4
	LP_APP_vSt_61_write_eeprom_values(&st_61);
 101b422:	4b09      	ldr	r3, [pc, #36]	; (101b448 <LP_APP_bSt_61_restore_default_values+0x78>)
	st_61.lp_memory_len = st_61.nbr_blks_set1 * LP_APP_usGet_block_size();
 101b424:	602c      	str	r4, [r5, #0]
	LP_APP_vSt_61_write_eeprom_values(&st_61);
 101b426:	4798      	blx	r3
	uint16_t crc = SM_APP_usSt_61_ram_calculate_crc();
 101b428:	4b08      	ldr	r3, [pc, #32]	; (101b44c <LP_APP_bSt_61_restore_default_values+0x7c>)
 101b42a:	4798      	blx	r3
	SM_APP_vSt_61_write_crc(crc);
 101b42c:	4b08      	ldr	r3, [pc, #32]	; (101b450 <LP_APP_bSt_61_restore_default_values+0x80>)
 101b42e:	4798      	blx	r3
}
 101b430:	4638      	mov	r0, r7
 101b432:	b004      	add	sp, #16
 101b434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 101b438:	0101b069 	.word	0x0101b069
 101b43c:	200166b8 	.word	0x200166b8
 101b440:	0101b019 	.word	0x0101b019
 101b444:	0003ffe2 	.word	0x0003ffe2
 101b448:	0101b315 	.word	0x0101b315
 101b44c:	0101fd3d 	.word	0x0101fd3d
 101b450:	0101fded 	.word	0x0101fded

0101b454 <LP_APP_bSt_61_refresh_ram>:
bool LP_APP_bSt_61_refresh_ram(void) {
 101b454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 101b458:	f8df 808c 	ldr.w	r8, [pc, #140]	; 101b4e8 <LP_APP_bSt_61_refresh_ram+0x94>
 101b45c:	4f1d      	ldr	r7, [pc, #116]	; (101b4d4 <LP_APP_bSt_61_refresh_ram+0x80>)
 101b45e:	b084      	sub	sp, #16
 101b460:	2403      	movs	r4, #3
 101b462:	466d      	mov	r5, sp
		LP_APP_vSt_61_read_eeprom_values(&st_61_temp);
 101b464:	4628      	mov	r0, r5
 101b466:	47c0      	blx	r8
		is_ok = LP_APP_bSt_61_validate_data(&st_61_temp);
 101b468:	4628      	mov	r0, r5
 101b46a:	47b8      	blx	r7
 101b46c:	1e63      	subs	r3, r4, #1
		if ( is_ok ) {
 101b46e:	4606      	mov	r6, r0
 101b470:	b9d0      	cbnz	r0, 101b4a8 <LP_APP_bSt_61_refresh_ram+0x54>
	for (uint8_t i = 0; i < 3; i++) {
 101b472:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 101b476:	d1f5      	bne.n	101b464 <LP_APP_bSt_61_refresh_ram+0x10>
		st_61 = st_61_temp;
 101b478:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 101b47c:	4d16      	ldr	r5, [pc, #88]	; (101b4d8 <LP_APP_bSt_61_refresh_ram+0x84>)
	block_size = LP_APP_usGet_block_size();
 101b47e:	4f17      	ldr	r7, [pc, #92]	; (101b4dc <LP_APP_bSt_61_refresh_ram+0x88>)
		st_61.nbr_blk_ints_set1 = DEFAULT_NBR_BLK_INTS_SET1;
 101b480:	2430      	movs	r4, #48	; 0x30
		st_61 = st_61_temp;
 101b482:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		st_61.nbr_blk_ints_set1 = DEFAULT_NBR_BLK_INTS_SET1;
 101b486:	816c      	strh	r4, [r5, #10]
	block_size = LP_APP_usGet_block_size();
 101b488:	47b8      	blx	r7
	nbr_blocks = size_available/block_size;
 101b48a:	4c15      	ldr	r4, [pc, #84]	; (101b4e0 <LP_APP_bSt_61_refresh_ram+0x8c>)
 101b48c:	fbb4 f4f0 	udiv	r4, r4, r0
	st_61.nbr_blks_set1 = nbr_blocks;
 101b490:	812c      	strh	r4, [r5, #8]
		st_61.lp_memory_len = st_61.nbr_blks_set1 * LP_APP_usGet_block_size();
 101b492:	47b8      	blx	r7
 101b494:	b2a4      	uxth	r4, r4
 101b496:	fb00 f404 	mul.w	r4, r0, r4
		LP_APP_vSt_61_write_eeprom_values(&st_61);
 101b49a:	4b12      	ldr	r3, [pc, #72]	; (101b4e4 <LP_APP_bSt_61_refresh_ram+0x90>)
		st_61.lp_memory_len = st_61.nbr_blks_set1 * LP_APP_usGet_block_size();
 101b49c:	602c      	str	r4, [r5, #0]
		LP_APP_vSt_61_write_eeprom_values(&st_61);
 101b49e:	4798      	blx	r3
}
 101b4a0:	4630      	mov	r0, r6
 101b4a2:	b004      	add	sp, #16
 101b4a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			st_61 = st_61_temp;
 101b4a8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 101b4ac:	4d0a      	ldr	r5, [pc, #40]	; (101b4d8 <LP_APP_bSt_61_refresh_ram+0x84>)
	block_size = LP_APP_usGet_block_size();
 101b4ae:	4f0b      	ldr	r7, [pc, #44]	; (101b4dc <LP_APP_bSt_61_refresh_ram+0x88>)
			st_61.nbr_blk_ints_set1 = DEFAULT_NBR_BLK_INTS_SET1;
 101b4b0:	2430      	movs	r4, #48	; 0x30
			st_61 = st_61_temp;
 101b4b2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			st_61.nbr_blk_ints_set1 = DEFAULT_NBR_BLK_INTS_SET1;
 101b4b6:	816c      	strh	r4, [r5, #10]
	block_size = LP_APP_usGet_block_size();
 101b4b8:	47b8      	blx	r7
	nbr_blocks = size_available/block_size;
 101b4ba:	4c09      	ldr	r4, [pc, #36]	; (101b4e0 <LP_APP_bSt_61_refresh_ram+0x8c>)
 101b4bc:	fbb4 f4f0 	udiv	r4, r4, r0
	st_61.nbr_blks_set1 = nbr_blocks;
 101b4c0:	812c      	strh	r4, [r5, #8]
			st_61.lp_memory_len = st_61.nbr_blks_set1 * LP_APP_usGet_block_size();
 101b4c2:	47b8      	blx	r7
 101b4c4:	b2a4      	uxth	r4, r4
 101b4c6:	fb00 f404 	mul.w	r4, r0, r4
}
 101b4ca:	4630      	mov	r0, r6
			st_61.lp_memory_len = st_61.nbr_blks_set1 * LP_APP_usGet_block_size();
 101b4cc:	602c      	str	r4, [r5, #0]
}
 101b4ce:	b004      	add	sp, #16
 101b4d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 101b4d4:	0101b069 	.word	0x0101b069
 101b4d8:	200166b8 	.word	0x200166b8
 101b4dc:	0101b019 	.word	0x0101b019
 101b4e0:	0003ffe2 	.word	0x0003ffe2
 101b4e4:	0101b315 	.word	0x0101b315
 101b4e8:	0101b129 	.word	0x0101b129

0101b4ec <LP_APP_bLoad_st_61>:
bool LP_APP_bLoad_st_61(void) {
 101b4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ( SM_APP_ucGet_table_state(ST_61_PROG_STATE_ADDR) != C1219_TABLE_FULL ) {
 101b4ee:	f640 50da 	movw	r0, #3546	; 0xdda
 101b4f2:	4b0f      	ldr	r3, [pc, #60]	; (101b530 <LP_APP_bLoad_st_61+0x44>)
	st_61.nbr_blk_ints_set1 = DEFAULT_NBR_BLK_INTS_SET1;
 101b4f4:	4d0f      	ldr	r5, [pc, #60]	; (101b534 <LP_APP_bLoad_st_61+0x48>)
	block_size = LP_APP_usGet_block_size();
 101b4f6:	4e10      	ldr	r6, [pc, #64]	; (101b538 <LP_APP_bLoad_st_61+0x4c>)
	nbr_blocks = size_available/block_size;
 101b4f8:	4c10      	ldr	r4, [pc, #64]	; (101b53c <LP_APP_bLoad_st_61+0x50>)
	if ( SM_APP_ucGet_table_state(ST_61_PROG_STATE_ADDR) != C1219_TABLE_FULL ) {
 101b4fa:	4798      	blx	r3
 101b4fc:	2845      	cmp	r0, #69	; 0x45
		is_ok = LP_APP_bSt_61_restore_default_values();
 101b4fe:	bf14      	ite	ne
 101b500:	4b0f      	ldrne	r3, [pc, #60]	; (101b540 <LP_APP_bLoad_st_61+0x54>)
		is_ok = LP_APP_bSt_61_refresh_ram();
 101b502:	4b10      	ldreq	r3, [pc, #64]	; (101b544 <LP_APP_bLoad_st_61+0x58>)
 101b504:	4798      	blx	r3
	st_61.nbr_blk_ints_set1 = DEFAULT_NBR_BLK_INTS_SET1;
 101b506:	2330      	movs	r3, #48	; 0x30
 101b508:	816b      	strh	r3, [r5, #10]
		is_ok = LP_APP_bSt_61_refresh_ram();
 101b50a:	4607      	mov	r7, r0
	block_size = LP_APP_usGet_block_size();
 101b50c:	47b0      	blx	r6
	nbr_blocks = size_available/block_size;
 101b50e:	fbb4 f4f0 	udiv	r4, r4, r0
	st_61.nbr_blks_set1 = nbr_blocks;
 101b512:	812c      	strh	r4, [r5, #8]
	st_61.lp_memory_len = st_61.nbr_blks_set1 * LP_APP_usGet_block_size();
 101b514:	47b0      	blx	r6
 101b516:	b2a4      	uxth	r4, r4
 101b518:	fb00 f404 	mul.w	r4, r0, r4
	LP_APP_vSt_61_write_eeprom_values(&st_61);
 101b51c:	4b0a      	ldr	r3, [pc, #40]	; (101b548 <LP_APP_bLoad_st_61+0x5c>)
	st_61.lp_memory_len = st_61.nbr_blks_set1 * LP_APP_usGet_block_size();
 101b51e:	602c      	str	r4, [r5, #0]
	LP_APP_vSt_61_write_eeprom_values(&st_61);
 101b520:	4798      	blx	r3
	uint16_t crc = SM_APP_usSt_61_ram_calculate_crc();
 101b522:	4b0a      	ldr	r3, [pc, #40]	; (101b54c <LP_APP_bLoad_st_61+0x60>)
 101b524:	4798      	blx	r3
	SM_APP_vSt_61_write_crc(crc);
 101b526:	4b0a      	ldr	r3, [pc, #40]	; (101b550 <LP_APP_bLoad_st_61+0x64>)
 101b528:	4798      	blx	r3
}
 101b52a:	4638      	mov	r0, r7
 101b52c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 101b52e:	bf00      	nop
 101b530:	010203cd 	.word	0x010203cd
 101b534:	200166b8 	.word	0x200166b8
 101b538:	0101b019 	.word	0x0101b019
 101b53c:	0003ffe2 	.word	0x0003ffe2
 101b540:	0101b3d1 	.word	0x0101b3d1
 101b544:	0101b455 	.word	0x0101b455
 101b548:	0101b315 	.word	0x0101b315
 101b54c:	0101fd3d 	.word	0x0101fd3d
 101b550:	0101fded 	.word	0x0101fded

0101b554 <LP_APP_vCopy_st_61_ram>:
void LP_APP_vCopy_st_61_ram(uint8_t* destination) {
 101b554:	b5f0      	push	{r4, r5, r6, r7, lr}
 101b556:	4b11      	ldr	r3, [pc, #68]	; (101b59c <LP_APP_vCopy_st_61_ram+0x48>)
 101b558:	681a      	ldr	r2, [r3, #0]
 101b55a:	889d      	ldrh	r5, [r3, #4]
 101b55c:	8959      	ldrh	r1, [r3, #10]
 101b55e:	891c      	ldrh	r4, [r3, #8]
 101b560:	7b1f      	ldrb	r7, [r3, #12]
 101b562:	7b5e      	ldrb	r6, [r3, #13]
 101b564:	f893 c006 	ldrb.w	ip, [r3, #6]
	table_buffer[0] = (uint8_t)(st_61_source.lp_memory_len);
 101b568:	7002      	strb	r2, [r0, #0]
	table_buffer[1] = (uint8_t)(st_61_source.lp_memory_len >> 8);
 101b56a:	ea4f 2e12 	mov.w	lr, r2, lsr #8
	table_buffer[5] = (uint8_t)(st_61_source.lp_flags >> 8);
 101b56e:	0a2b      	lsrs	r3, r5, #8
	table_buffer[1] = (uint8_t)(st_61_source.lp_memory_len >> 8);
 101b570:	f880 e001 	strb.w	lr, [r0, #1]
	table_buffer[4] = (uint8_t)(st_61_source.lp_flags);
 101b574:	7105      	strb	r5, [r0, #4]
	table_buffer[8] = (uint8_t)(st_61_source.nbr_blks_set1 >> 8);
 101b576:	ea4f 2e14 	mov.w	lr, r4, lsr #8
	table_buffer[10] = (uint8_t)(st_61_source.nbr_blk_ints_set1 >> 8);
 101b57a:	0a0d      	lsrs	r5, r1, #8
	table_buffer[5] = (uint8_t)(st_61_source.lp_flags >> 8);
 101b57c:	7143      	strb	r3, [r0, #5]
	table_buffer[2] = (uint8_t)(st_61_source.lp_memory_len >> 16);
 101b57e:	0c13      	lsrs	r3, r2, #16
	table_buffer[3] = (uint8_t)(st_61_source.lp_memory_len >> 24);
 101b580:	0e12      	lsrs	r2, r2, #24
	table_buffer[6] = st_61_source.lp_fmats;
 101b582:	f880 c006 	strb.w	ip, [r0, #6]
	table_buffer[7] = (uint8_t)(st_61_source.nbr_blks_set1);
 101b586:	71c4      	strb	r4, [r0, #7]
	table_buffer[8] = (uint8_t)(st_61_source.nbr_blks_set1 >> 8);
 101b588:	f880 e008 	strb.w	lr, [r0, #8]
	table_buffer[9] = (uint8_t)(st_61_source.nbr_blk_ints_set1);
 101b58c:	7241      	strb	r1, [r0, #9]
	table_buffer[10] = (uint8_t)(st_61_source.nbr_blk_ints_set1 >> 8);
 101b58e:	7285      	strb	r5, [r0, #10]
	table_buffer[11] = st_61_source.nbr_chns_set1;
 101b590:	72c7      	strb	r7, [r0, #11]
	table_buffer[12] = st_61_source.max_int_time_set1;
 101b592:	7306      	strb	r6, [r0, #12]
	table_buffer[2] = (uint8_t)(st_61_source.lp_memory_len >> 16);
 101b594:	7083      	strb	r3, [r0, #2]
	table_buffer[3] = (uint8_t)(st_61_source.lp_memory_len >> 24);
 101b596:	70c2      	strb	r2, [r0, #3]
 101b598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 101b59a:	bf00      	nop
 101b59c:	200166b8 	.word	0x200166b8

0101b5a0 <LP_APP_vCopy_st_61_nvm>:
void LP_APP_vCopy_st_61_nvm(uint8_t* destination) {
 101b5a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 101b5a2:	b085      	sub	sp, #20
 101b5a4:	4604      	mov	r4, r0
	LP_APP_vSt_61_read_eeprom_values(&st_61_aux);
 101b5a6:	4b13      	ldr	r3, [pc, #76]	; (101b5f4 <LP_APP_vCopy_st_61_nvm+0x54>)
 101b5a8:	4668      	mov	r0, sp
 101b5aa:	4798      	blx	r3
 101b5ac:	9b00      	ldr	r3, [sp, #0]
 101b5ae:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 101b5b2:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 101b5b6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
	table_buffer[0] = (uint8_t)(st_61_source.lp_memory_len);
 101b5ba:	7023      	strb	r3, [r4, #0]
	table_buffer[1] = (uint8_t)(st_61_source.lp_memory_len >> 8);
 101b5bc:	0a1e      	lsrs	r6, r3, #8
 101b5be:	7066      	strb	r6, [r4, #1]
	table_buffer[2] = (uint8_t)(st_61_source.lp_memory_len >> 16);
 101b5c0:	0c1e      	lsrs	r6, r3, #16
	table_buffer[3] = (uint8_t)(st_61_source.lp_memory_len >> 24);
 101b5c2:	0e1b      	lsrs	r3, r3, #24
 101b5c4:	f89d 7006 	ldrb.w	r7, [sp, #6]
 101b5c8:	f89d 500c 	ldrb.w	r5, [sp, #12]
 101b5cc:	70e3      	strb	r3, [r4, #3]
 101b5ce:	f89d 300d 	ldrb.w	r3, [sp, #13]
	table_buffer[2] = (uint8_t)(st_61_source.lp_memory_len >> 16);
 101b5d2:	70a6      	strb	r6, [r4, #2]
	table_buffer[5] = (uint8_t)(st_61_source.lp_flags >> 8);
 101b5d4:	ea4f 2e10 	mov.w	lr, r0, lsr #8
	table_buffer[8] = (uint8_t)(st_61_source.nbr_blks_set1 >> 8);
 101b5d8:	0a0e      	lsrs	r6, r1, #8
	table_buffer[4] = (uint8_t)(st_61_source.lp_flags);
 101b5da:	7120      	strb	r0, [r4, #4]
	table_buffer[10] = (uint8_t)(st_61_source.nbr_blk_ints_set1 >> 8);
 101b5dc:	0a10      	lsrs	r0, r2, #8
	table_buffer[5] = (uint8_t)(st_61_source.lp_flags >> 8);
 101b5de:	f884 e005 	strb.w	lr, [r4, #5]
	table_buffer[6] = st_61_source.lp_fmats;
 101b5e2:	71a7      	strb	r7, [r4, #6]
	table_buffer[7] = (uint8_t)(st_61_source.nbr_blks_set1);
 101b5e4:	71e1      	strb	r1, [r4, #7]
	table_buffer[8] = (uint8_t)(st_61_source.nbr_blks_set1 >> 8);
 101b5e6:	7226      	strb	r6, [r4, #8]
	table_buffer[9] = (uint8_t)(st_61_source.nbr_blk_ints_set1);
 101b5e8:	7262      	strb	r2, [r4, #9]
	table_buffer[10] = (uint8_t)(st_61_source.nbr_blk_ints_set1 >> 8);
 101b5ea:	72a0      	strb	r0, [r4, #10]
	table_buffer[11] = st_61_source.nbr_chns_set1;
 101b5ec:	72e5      	strb	r5, [r4, #11]
	table_buffer[12] = st_61_source.max_int_time_set1;
 101b5ee:	7323      	strb	r3, [r4, #12]
}
 101b5f0:	b005      	add	sp, #20
 101b5f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 101b5f4:	0101b129 	.word	0x0101b129

0101b5f8 <LP_APP_vSt_61_recover_nvm>:
	LP_APP_vSt_61_write_eeprom_values(&st_61);
 101b5f8:	4b00      	ldr	r3, [pc, #0]	; (101b5fc <LP_APP_vSt_61_recover_nvm+0x4>)
 101b5fa:	4718      	bx	r3
 101b5fc:	0101b315 	.word	0x0101b315

0101b600 <LP_APP_vSt_61_recover_ram>:
	LP_APP_vSt_61_read_eeprom_values(&st_61);
 101b600:	4801      	ldr	r0, [pc, #4]	; (101b608 <LP_APP_vSt_61_recover_ram+0x8>)
 101b602:	4b02      	ldr	r3, [pc, #8]	; (101b60c <LP_APP_vSt_61_recover_ram+0xc>)
 101b604:	4718      	bx	r3
 101b606:	bf00      	nop
 101b608:	200166b8 	.word	0x200166b8
 101b60c:	0101b129 	.word	0x0101b129

0101b610 <LP_APP_bSt_61_execute_table_reading>:
bool LP_APP_bSt_61_execute_table_reading(uint8_t *table_buffer) {
 101b610:	b5f0      	push	{r4, r5, r6, r7, lr}
 101b612:	4b11      	ldr	r3, [pc, #68]	; (101b658 <LP_APP_bSt_61_execute_table_reading+0x48>)
 101b614:	681a      	ldr	r2, [r3, #0]
 101b616:	889d      	ldrh	r5, [r3, #4]
 101b618:	8959      	ldrh	r1, [r3, #10]
 101b61a:	891c      	ldrh	r4, [r3, #8]
 101b61c:	7b1f      	ldrb	r7, [r3, #12]
 101b61e:	7b5e      	ldrb	r6, [r3, #13]
 101b620:	f893 c006 	ldrb.w	ip, [r3, #6]
	table_buffer[0] = (uint8_t)(st_61_source.lp_memory_len);
 101b624:	7002      	strb	r2, [r0, #0]
	table_buffer[1] = (uint8_t)(st_61_source.lp_memory_len >> 8);
 101b626:	ea4f 2e12 	mov.w	lr, r2, lsr #8
	table_buffer[5] = (uint8_t)(st_61_source.lp_flags >> 8);
 101b62a:	0a2b      	lsrs	r3, r5, #8
	table_buffer[1] = (uint8_t)(st_61_source.lp_memory_len >> 8);
 101b62c:	f880 e001 	strb.w	lr, [r0, #1]
	table_buffer[4] = (uint8_t)(st_61_source.lp_flags);
 101b630:	7105      	strb	r5, [r0, #4]
	table_buffer[5] = (uint8_t)(st_61_source.lp_flags >> 8);
 101b632:	7143      	strb	r3, [r0, #5]
	table_buffer[8] = (uint8_t)(st_61_source.nbr_blks_set1 >> 8);
 101b634:	ea4f 2e14 	mov.w	lr, r4, lsr #8
	table_buffer[2] = (uint8_t)(st_61_source.lp_memory_len >> 16);
 101b638:	0c13      	lsrs	r3, r2, #16
	table_buffer[10] = (uint8_t)(st_61_source.nbr_blk_ints_set1 >> 8);
 101b63a:	0a0d      	lsrs	r5, r1, #8
	table_buffer[3] = (uint8_t)(st_61_source.lp_memory_len >> 24);
 101b63c:	0e12      	lsrs	r2, r2, #24
	table_buffer[6] = st_61_source.lp_fmats;
 101b63e:	f880 c006 	strb.w	ip, [r0, #6]
	table_buffer[7] = (uint8_t)(st_61_source.nbr_blks_set1);
 101b642:	71c4      	strb	r4, [r0, #7]
	table_buffer[8] = (uint8_t)(st_61_source.nbr_blks_set1 >> 8);
 101b644:	f880 e008 	strb.w	lr, [r0, #8]
	table_buffer[9] = (uint8_t)(st_61_source.nbr_blk_ints_set1);
 101b648:	7241      	strb	r1, [r0, #9]
	table_buffer[10] = (uint8_t)(st_61_source.nbr_blk_ints_set1 >> 8);
 101b64a:	7285      	strb	r5, [r0, #10]
	table_buffer[11] = st_61_source.nbr_chns_set1;
 101b64c:	72c7      	strb	r7, [r0, #11]
	table_buffer[12] = st_61_source.max_int_time_set1;
 101b64e:	7306      	strb	r6, [r0, #12]
	table_buffer[2] = (uint8_t)(st_61_source.lp_memory_len >> 16);
 101b650:	7083      	strb	r3, [r0, #2]
	table_buffer[3] = (uint8_t)(st_61_source.lp_memory_len >> 24);
 101b652:	70c2      	strb	r2, [r0, #3]
}
 101b654:	2001      	movs	r0, #1
 101b656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 101b658:	200166b8 	.word	0x200166b8

0101b65c <LP_APP_usSt_61_get_size>:
 101b65c:	200d      	movs	r0, #13
 101b65e:	4770      	bx	lr

0101b660 <LP_APP_bSt_62_restore_default_values>:
bool LP_APP_bSt_62_restore_default_values(void) {
 101b660:	b5f0      	push	{r4, r5, r6, r7, lr}
 101b662:	b089      	sub	sp, #36	; 0x24
	memset( &st_62_temp, 0, sizeof(st_62_temp) );
 101b664:	4b2b      	ldr	r3, [pc, #172]	; (101b714 <LP_APP_bSt_62_restore_default_values+0xb4>)
 101b666:	4668      	mov	r0, sp
 101b668:	221e      	movs	r2, #30
 101b66a:	2100      	movs	r1, #0
 101b66c:	4798      	blx	r3
	for ( uint8_t i = 0; i < st_61.nbr_chns_set1; i++ )
 101b66e:	4b2a      	ldr	r3, [pc, #168]	; (101b718 <LP_APP_bSt_62_restore_default_values+0xb8>)
 101b670:	7b1b      	ldrb	r3, [r3, #12]
 101b672:	2b00      	cmp	r3, #0
 101b674:	d049      	beq.n	101b70a <LP_APP_bSt_62_restore_default_values+0xaa>
 101b676:	3b01      	subs	r3, #1
 101b678:	b2dc      	uxtb	r4, r3
 101b67a:	f104 0508 	add.w	r5, r4, #8
 101b67e:	eb0d 0545 	add.w	r5, sp, r5, lsl #1
 101b682:	4669      	mov	r1, sp
 101b684:	f10d 020e 	add.w	r2, sp, #14
 101b688:	466b      	mov	r3, sp
		st_62_temp.lp_sel_set1[i].chnl_flag = (uint8_t)(END_RDG_FLAG_bm);
 101b68a:	f04f 0e01 	mov.w	lr, #1
		st_62_temp.lp_sel_set1[i].lp_source_select = LP_WH_DEL_ID;
 101b68e:	2000      	movs	r0, #0
		st_62_temp.divisor_set1[i] = DEFAULT_DIVISOR_SET1;
 101b690:	2764      	movs	r7, #100	; 0x64
		st_62_temp.scalars_set1[i] = DEFAULT_SCALARS_SET1;
 101b692:	2605      	movs	r6, #5
		st_62_temp.lp_sel_set1[i].chnl_flag = (uint8_t)(END_RDG_FLAG_bm);
 101b694:	f883 e000 	strb.w	lr, [r3]
		st_62_temp.lp_sel_set1[i].lp_source_select = LP_WH_DEL_ID;
 101b698:	7058      	strb	r0, [r3, #1]
		st_62_temp.lp_sel_set1[i].end_blk_rdg_source_select = SM_WH_DEL_ID;
 101b69a:	7098      	strb	r0, [r3, #2]
		st_62_temp.divisor_set1[i] = DEFAULT_DIVISOR_SET1;
 101b69c:	8117      	strh	r7, [r2, #8]
		st_62_temp.scalars_set1[i] = DEFAULT_SCALARS_SET1;
 101b69e:	f822 6b02 	strh.w	r6, [r2], #2
	for ( uint8_t i = 0; i < st_61.nbr_chns_set1; i++ )
 101b6a2:	42aa      	cmp	r2, r5
 101b6a4:	f103 0303 	add.w	r3, r3, #3
 101b6a8:	d1f4      	bne.n	101b694 <LP_APP_bSt_62_restore_default_values+0x34>
 101b6aa:	1c63      	adds	r3, r4, #1
 101b6ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	st_62_temp.int_fmt_cde1 = INT16;
 101b6b0:	2210      	movs	r2, #16
 101b6b2:	2601      	movs	r6, #1
 101b6b4:	446b      	add	r3, sp
 101b6b6:	f88d 200c 	strb.w	r2, [sp, #12]
		st_62_structure->lp_sel_set1[i].chnl_flag = 1;
 101b6ba:	4634      	mov	r4, r6
			st_62_structure->lp_sel_set1[i].lp_source_select = LOAD_PROFILE_INITIAL_ID;			
 101b6bc:	2000      	movs	r0, #0
		if ( (st_62_structure->lp_sel_set1[i].lp_source_select < LOAD_PROFILE_INITIAL_ID) || (st_62_structure->lp_sel_set1[i].lp_source_select >= LP_NUMBER_OF_IDS) ) {
 101b6be:	784a      	ldrb	r2, [r1, #1]
		st_62_structure->lp_sel_set1[i].chnl_flag = 1;
 101b6c0:	700c      	strb	r4, [r1, #0]
		if ( (st_62_structure->lp_sel_set1[i].lp_source_select < LOAD_PROFILE_INITIAL_ID) || (st_62_structure->lp_sel_set1[i].lp_source_select >= LP_NUMBER_OF_IDS) ) {
 101b6c2:	2a57      	cmp	r2, #87	; 0x57
		if ( (st_62_structure->lp_sel_set1[i].end_blk_rdg_source_select < SUMMATIONS_INITIAL_ID) || (st_62_structure->lp_sel_set1[i].end_blk_rdg_source_select >= SM_NUMBER_OF_IDS) ) {
 101b6c4:	788a      	ldrb	r2, [r1, #2]
			st_62_structure->lp_sel_set1[i].lp_source_select = LOAD_PROFILE_INITIAL_ID;			
 101b6c6:	bf84      	itt	hi
 101b6c8:	7048      	strbhi	r0, [r1, #1]
			is_ok = false;
 101b6ca:	2600      	movhi	r6, #0
		if ( (st_62_structure->lp_sel_set1[i].end_blk_rdg_source_select < SUMMATIONS_INITIAL_ID) || (st_62_structure->lp_sel_set1[i].end_blk_rdg_source_select >= SM_NUMBER_OF_IDS) ) {
 101b6cc:	2a57      	cmp	r2, #87	; 0x57
			st_62_structure->lp_sel_set1[i].end_blk_rdg_source_select = SUMMATIONS_INITIAL_ID;
 101b6ce:	bf88      	it	hi
 101b6d0:	7088      	strbhi	r0, [r1, #2]
 101b6d2:	f101 0103 	add.w	r1, r1, #3
			is_ok = false;
 101b6d6:	bf88      	it	hi
 101b6d8:	2600      	movhi	r6, #0
	for ( uint8_t i = 0; i < st_61.nbr_chns_set1; i++ ) {
 101b6da:	4299      	cmp	r1, r3
 101b6dc:	d1ef      	bne.n	101b6be <LP_APP_bSt_62_restore_default_values+0x5e>
	st_62 = st_62_temp;
 101b6de:	466c      	mov	r4, sp
 101b6e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 101b6e2:	4d0e      	ldr	r5, [pc, #56]	; (101b71c <LP_APP_bSt_62_restore_default_values+0xbc>)
	LP_APP_vSt_62_write_eeprom_values(&st_62);
 101b6e4:	4f0e      	ldr	r7, [pc, #56]	; (101b720 <LP_APP_bSt_62_restore_default_values+0xc0>)
	st_62 = st_62_temp;
 101b6e6:	6028      	str	r0, [r5, #0]
 101b6e8:	6069      	str	r1, [r5, #4]
 101b6ea:	60aa      	str	r2, [r5, #8]
 101b6ec:	cc07      	ldmia	r4!, {r0, r1, r2}
 101b6ee:	8824      	ldrh	r4, [r4, #0]
 101b6f0:	6169      	str	r1, [r5, #20]
 101b6f2:	61aa      	str	r2, [r5, #24]
 101b6f4:	60eb      	str	r3, [r5, #12]
 101b6f6:	6128      	str	r0, [r5, #16]
 101b6f8:	83ac      	strh	r4, [r5, #28]
	LP_APP_vSt_62_write_eeprom_values(&st_62);
 101b6fa:	47b8      	blx	r7
	uint16_t crc = SM_APP_usSt_62_ram_calculate_crc();
 101b6fc:	4b09      	ldr	r3, [pc, #36]	; (101b724 <LP_APP_bSt_62_restore_default_values+0xc4>)
 101b6fe:	4798      	blx	r3
	SM_APP_vSt_62_write_crc(crc);
 101b700:	4b09      	ldr	r3, [pc, #36]	; (101b728 <LP_APP_bSt_62_restore_default_values+0xc8>)
 101b702:	4798      	blx	r3
}
 101b704:	4630      	mov	r0, r6
 101b706:	b009      	add	sp, #36	; 0x24
 101b708:	bdf0      	pop	{r4, r5, r6, r7, pc}
	st_62_temp.int_fmt_cde1 = INT16;
 101b70a:	2310      	movs	r3, #16
 101b70c:	f88d 300c 	strb.w	r3, [sp, #12]
	bool is_ok = true;
 101b710:	2601      	movs	r6, #1
 101b712:	e7e4      	b.n	101b6de <LP_APP_bSt_62_restore_default_values+0x7e>
 101b714:	01030b71 	.word	0x01030b71
 101b718:	200166b8 	.word	0x200166b8
 101b71c:	20016724 	.word	0x20016724
 101b720:	0101b209 	.word	0x0101b209
 101b724:	0101fe39 	.word	0x0101fe39
 101b728:	0101fee9 	.word	0x0101fee9

0101b72c <LP_APP_bSt_62_refresh_ram>:
bool LP_APP_bSt_62_refresh_ram(void) {
 101b72c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 101b730:	4d29      	ldr	r5, [pc, #164]	; (101b7d8 <LP_APP_bSt_62_refresh_ram+0xac>)
 101b732:	4c2a      	ldr	r4, [pc, #168]	; (101b7dc <LP_APP_bSt_62_refresh_ram+0xb0>)
 101b734:	b088      	sub	sp, #32
 101b736:	2703      	movs	r7, #3
			st_62_structure->lp_sel_set1[i].lp_source_select = LOAD_PROFILE_INITIAL_ID;			
 101b738:	2600      	movs	r6, #0
		LP_APP_vSt_62_read_eeprom_values(&st_62_temp);
 101b73a:	4668      	mov	r0, sp
 101b73c:	47a8      	blx	r5
	for ( uint8_t i = 0; i < st_61.nbr_chns_set1; i++ ) {
 101b73e:	7b22      	ldrb	r2, [r4, #12]
 101b740:	2a00      	cmp	r2, #0
 101b742:	d035      	beq.n	101b7b0 <LP_APP_bSt_62_refresh_ram+0x84>
 101b744:	3a01      	subs	r2, #1
 101b746:	b2d2      	uxtb	r2, r2
 101b748:	3201      	adds	r2, #1
 101b74a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 101b74e:	f04f 0801 	mov.w	r8, #1
 101b752:	446a      	add	r2, sp
		st_62_structure->lp_sel_set1[i].chnl_flag = 1;
 101b754:	4640      	mov	r0, r8
 101b756:	466b      	mov	r3, sp
		if ( (st_62_structure->lp_sel_set1[i].lp_source_select < LOAD_PROFILE_INITIAL_ID) || (st_62_structure->lp_sel_set1[i].lp_source_select >= LP_NUMBER_OF_IDS) ) {
 101b758:	7859      	ldrb	r1, [r3, #1]
		st_62_structure->lp_sel_set1[i].chnl_flag = 1;
 101b75a:	7018      	strb	r0, [r3, #0]
		if ( (st_62_structure->lp_sel_set1[i].lp_source_select < LOAD_PROFILE_INITIAL_ID) || (st_62_structure->lp_sel_set1[i].lp_source_select >= LP_NUMBER_OF_IDS) ) {
 101b75c:	2957      	cmp	r1, #87	; 0x57
		if ( (st_62_structure->lp_sel_set1[i].end_blk_rdg_source_select < SUMMATIONS_INITIAL_ID) || (st_62_structure->lp_sel_set1[i].end_blk_rdg_source_select >= SM_NUMBER_OF_IDS) ) {
 101b75e:	7899      	ldrb	r1, [r3, #2]
			st_62_structure->lp_sel_set1[i].lp_source_select = LOAD_PROFILE_INITIAL_ID;			
 101b760:	bf84      	itt	hi
 101b762:	705e      	strbhi	r6, [r3, #1]
			is_ok = false;
 101b764:	f04f 0800 	movhi.w	r8, #0
		if ( (st_62_structure->lp_sel_set1[i].end_blk_rdg_source_select < SUMMATIONS_INITIAL_ID) || (st_62_structure->lp_sel_set1[i].end_blk_rdg_source_select >= SM_NUMBER_OF_IDS) ) {
 101b768:	2957      	cmp	r1, #87	; 0x57
			st_62_structure->lp_sel_set1[i].end_blk_rdg_source_select = SUMMATIONS_INITIAL_ID;
 101b76a:	bf88      	it	hi
 101b76c:	709e      	strbhi	r6, [r3, #2]
 101b76e:	f103 0303 	add.w	r3, r3, #3
			is_ok = false;
 101b772:	bf88      	it	hi
 101b774:	f04f 0800 	movhi.w	r8, #0
	for ( uint8_t i = 0; i < st_61.nbr_chns_set1; i++ ) {
 101b778:	4293      	cmp	r3, r2
 101b77a:	d1ed      	bne.n	101b758 <LP_APP_bSt_62_refresh_ram+0x2c>
		if ( is_ok ) {
 101b77c:	f1b8 0f00 	cmp.w	r8, #0
 101b780:	d116      	bne.n	101b7b0 <LP_APP_bSt_62_refresh_ram+0x84>
 101b782:	3f01      	subs	r7, #1
	for (uint8_t i = 0; i < 3; i++) {
 101b784:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 101b788:	d1d7      	bne.n	101b73a <LP_APP_bSt_62_refresh_ram+0xe>
		st_62 = st_62_temp;
 101b78a:	466c      	mov	r4, sp
 101b78c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 101b78e:	4d14      	ldr	r5, [pc, #80]	; (101b7e0 <LP_APP_bSt_62_refresh_ram+0xb4>)
		LP_APP_vSt_62_write_eeprom_values(&st_62);
 101b790:	4e14      	ldr	r6, [pc, #80]	; (101b7e4 <LP_APP_bSt_62_refresh_ram+0xb8>)
		st_62 = st_62_temp;
 101b792:	6028      	str	r0, [r5, #0]
 101b794:	6069      	str	r1, [r5, #4]
 101b796:	60aa      	str	r2, [r5, #8]
 101b798:	cc07      	ldmia	r4!, {r0, r1, r2}
 101b79a:	8824      	ldrh	r4, [r4, #0]
 101b79c:	6128      	str	r0, [r5, #16]
 101b79e:	60eb      	str	r3, [r5, #12]
 101b7a0:	83ac      	strh	r4, [r5, #28]
 101b7a2:	6169      	str	r1, [r5, #20]
 101b7a4:	61aa      	str	r2, [r5, #24]
		LP_APP_vSt_62_write_eeprom_values(&st_62);
 101b7a6:	47b0      	blx	r6
}
 101b7a8:	4640      	mov	r0, r8
 101b7aa:	b008      	add	sp, #32
 101b7ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			st_62 = st_62_temp;
 101b7b0:	466c      	mov	r4, sp
 101b7b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 101b7b4:	4d0a      	ldr	r5, [pc, #40]	; (101b7e0 <LP_APP_bSt_62_refresh_ram+0xb4>)
 101b7b6:	6028      	str	r0, [r5, #0]
 101b7b8:	6069      	str	r1, [r5, #4]
 101b7ba:	60aa      	str	r2, [r5, #8]
 101b7bc:	cc07      	ldmia	r4!, {r0, r1, r2}
 101b7be:	f04f 0801 	mov.w	r8, #1
 101b7c2:	8824      	ldrh	r4, [r4, #0]
 101b7c4:	6128      	str	r0, [r5, #16]
}
 101b7c6:	4640      	mov	r0, r8
			st_62 = st_62_temp;
 101b7c8:	60eb      	str	r3, [r5, #12]
 101b7ca:	83ac      	strh	r4, [r5, #28]
 101b7cc:	6169      	str	r1, [r5, #20]
 101b7ce:	61aa      	str	r2, [r5, #24]
}
 101b7d0:	b008      	add	sp, #32
 101b7d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 101b7d6:	bf00      	nop
 101b7d8:	0101b189 	.word	0x0101b189
 101b7dc:	200166b8 	.word	0x200166b8
 101b7e0:	20016724 	.word	0x20016724
 101b7e4:	0101b209 	.word	0x0101b209

0101b7e8 <LP_APP_bLoad_st_62>:
bool LP_APP_bLoad_st_62(void) {
 101b7e8:	b510      	push	{r4, lr}
	if ( SM_APP_ucGet_table_state(ST_62_PROG_STATE_ADDR) != C1219_TABLE_FULL ) {
 101b7ea:	f44f 605f 	mov.w	r0, #3568	; 0xdf0
 101b7ee:	4b06      	ldr	r3, [pc, #24]	; (101b808 <LP_APP_bLoad_st_62+0x20>)
 101b7f0:	4798      	blx	r3
 101b7f2:	2845      	cmp	r0, #69	; 0x45
 101b7f4:	d003      	beq.n	101b7fe <LP_APP_bLoad_st_62+0x16>
		is_ok = LP_APP_bSt_62_restore_default_values();
 101b7f6:	4b05      	ldr	r3, [pc, #20]	; (101b80c <LP_APP_bLoad_st_62+0x24>)
}
 101b7f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		is_ok = LP_APP_bSt_62_restore_default_values();
 101b7fc:	4718      	bx	r3
		is_ok = LP_APP_bSt_62_refresh_ram();
 101b7fe:	4b04      	ldr	r3, [pc, #16]	; (101b810 <LP_APP_bLoad_st_62+0x28>)
}
 101b800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		is_ok = LP_APP_bSt_62_refresh_ram();
 101b804:	4718      	bx	r3
 101b806:	bf00      	nop
 101b808:	010203cd 	.word	0x010203cd
 101b80c:	0101b661 	.word	0x0101b661
 101b810:	0101b72d 	.word	0x0101b72d

0101b814 <LP_APP_vCopy_st_62_ram>:
void LP_APP_vCopy_st_62_ram(uint8_t* destination) {
 101b814:	b5f0      	push	{r4, r5, r6, r7, lr}
	LP_APP_vSt_62_to_array(st_62, &destination[0]);
 101b816:	4b0b      	ldr	r3, [pc, #44]	; (101b844 <LP_APP_vCopy_st_62_ram+0x30>)
void LP_APP_vCopy_st_62_ram(uint8_t* destination) {
 101b818:	b087      	sub	sp, #28
	LP_APP_vSt_62_to_array(st_62, &destination[0]);
 101b81a:	461d      	mov	r5, r3
 101b81c:	9004      	str	r0, [sp, #16]
 101b81e:	f855 0f10 	ldr.w	r0, [r5, #16]!
 101b822:	681e      	ldr	r6, [r3, #0]
 101b824:	6869      	ldr	r1, [r5, #4]
 101b826:	68aa      	ldr	r2, [r5, #8]
 101b828:	89af      	ldrh	r7, [r5, #12]
 101b82a:	685d      	ldr	r5, [r3, #4]
 101b82c:	466c      	mov	r4, sp
 101b82e:	c407      	stmia	r4!, {r0, r1, r2}
 101b830:	4630      	mov	r0, r6
 101b832:	689a      	ldr	r2, [r3, #8]
 101b834:	68db      	ldr	r3, [r3, #12]
 101b836:	8027      	strh	r7, [r4, #0]
 101b838:	4629      	mov	r1, r5
 101b83a:	4c03      	ldr	r4, [pc, #12]	; (101b848 <LP_APP_vCopy_st_62_ram+0x34>)
 101b83c:	47a0      	blx	r4
}
 101b83e:	b007      	add	sp, #28
 101b840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 101b842:	bf00      	nop
 101b844:	20016724 	.word	0x20016724
 101b848:	0101af69 	.word	0x0101af69

0101b84c <LP_APP_vCopy_st_62_nvm>:
void LP_APP_vCopy_st_62_nvm(uint8_t* destination) {
 101b84c:	b570      	push	{r4, r5, r6, lr}
 101b84e:	b08e      	sub	sp, #56	; 0x38
	LP_APP_vSt_62_read_eeprom_values(&st_62_aux);
 101b850:	ad06      	add	r5, sp, #24
void LP_APP_vCopy_st_62_nvm(uint8_t* destination) {
 101b852:	4606      	mov	r6, r0
	LP_APP_vSt_62_read_eeprom_values(&st_62_aux);
 101b854:	4b07      	ldr	r3, [pc, #28]	; (101b874 <LP_APP_vCopy_st_62_nvm+0x28>)
 101b856:	4628      	mov	r0, r5
 101b858:	4798      	blx	r3
	LP_APP_vSt_62_to_array(st_62_aux, &destination[0]);
 101b85a:	ab0e      	add	r3, sp, #56	; 0x38
 101b85c:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 101b860:	466c      	mov	r4, sp
 101b862:	9604      	str	r6, [sp, #16]
 101b864:	c407      	stmia	r4!, {r0, r1, r2}
 101b866:	8023      	strh	r3, [r4, #0]
 101b868:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 101b86c:	4e02      	ldr	r6, [pc, #8]	; (101b878 <LP_APP_vCopy_st_62_nvm+0x2c>)
 101b86e:	47b0      	blx	r6
}
 101b870:	b00e      	add	sp, #56	; 0x38
 101b872:	bd70      	pop	{r4, r5, r6, pc}
 101b874:	0101b189 	.word	0x0101b189
 101b878:	0101af69 	.word	0x0101af69

0101b87c <LP_APP_vSt_62_recover_nvm>:
	LP_APP_vSt_62_write_eeprom_values(&st_62);
 101b87c:	4b00      	ldr	r3, [pc, #0]	; (101b880 <LP_APP_vSt_62_recover_nvm+0x4>)
 101b87e:	4718      	bx	r3
 101b880:	0101b209 	.word	0x0101b209

0101b884 <LP_APP_vSt_62_recover_ram>:
	LP_APP_vSt_62_read_eeprom_values(&st_62);
 101b884:	4801      	ldr	r0, [pc, #4]	; (101b88c <LP_APP_vSt_62_recover_ram+0x8>)
 101b886:	4b02      	ldr	r3, [pc, #8]	; (101b890 <LP_APP_vSt_62_recover_ram+0xc>)
 101b888:	4718      	bx	r3
 101b88a:	bf00      	nop
 101b88c:	20016724 	.word	0x20016724
 101b890:	0101b189 	.word	0x0101b189

0101b894 <LP_APP_bSt_62_execute_table_reading>:
bool LP_APP_bSt_62_execute_table_reading(uint8_t *table_buffer) {
 101b894:	b5f0      	push	{r4, r5, r6, r7, lr}
	LP_APP_vSt_62_to_array(st_62, &table_buffer[0]);
 101b896:	4b0b      	ldr	r3, [pc, #44]	; (101b8c4 <LP_APP_bSt_62_execute_table_reading+0x30>)
bool LP_APP_bSt_62_execute_table_reading(uint8_t *table_buffer) {
 101b898:	b087      	sub	sp, #28
	LP_APP_vSt_62_to_array(st_62, &table_buffer[0]);
 101b89a:	461d      	mov	r5, r3
 101b89c:	9004      	str	r0, [sp, #16]
 101b89e:	f855 0f10 	ldr.w	r0, [r5, #16]!
 101b8a2:	681e      	ldr	r6, [r3, #0]
 101b8a4:	6869      	ldr	r1, [r5, #4]
 101b8a6:	68aa      	ldr	r2, [r5, #8]
 101b8a8:	89af      	ldrh	r7, [r5, #12]
 101b8aa:	685d      	ldr	r5, [r3, #4]
 101b8ac:	466c      	mov	r4, sp
 101b8ae:	c407      	stmia	r4!, {r0, r1, r2}
 101b8b0:	4630      	mov	r0, r6
 101b8b2:	689a      	ldr	r2, [r3, #8]
 101b8b4:	68db      	ldr	r3, [r3, #12]
 101b8b6:	8027      	strh	r7, [r4, #0]
 101b8b8:	4629      	mov	r1, r5
 101b8ba:	4c03      	ldr	r4, [pc, #12]	; (101b8c8 <LP_APP_bSt_62_execute_table_reading+0x34>)
 101b8bc:	47a0      	blx	r4
}
 101b8be:	2001      	movs	r0, #1
 101b8c0:	b007      	add	sp, #28
 101b8c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 101b8c4:	20016724 	.word	0x20016724
 101b8c8:	0101af69 	.word	0x0101af69

0101b8cc <LP_APP_bSt_62_execute_table_writing>:
bool LP_APP_bSt_62_execute_table_writing(uint8_t *table_buffer) {
 101b8cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for ( i = 0; i < st_61.nbr_chns_set1; i++ ) {
 101b8d0:	4b41      	ldr	r3, [pc, #260]	; (101b9d8 <LP_APP_bSt_62_execute_table_writing+0x10c>)
 101b8d2:	f893 e00c 	ldrb.w	lr, [r3, #12]
bool LP_APP_bSt_62_execute_table_writing(uint8_t *table_buffer) {
 101b8d6:	b088      	sub	sp, #32
	for ( i = 0; i < st_61.nbr_chns_set1; i++ ) {
 101b8d8:	f1be 0f00 	cmp.w	lr, #0
 101b8dc:	d064      	beq.n	101b9a8 <LP_APP_bSt_62_execute_table_writing+0xdc>
 101b8de:	f10e 37ff 	add.w	r7, lr, #4294967295
 101b8e2:	fa5f fc87 	uxtb.w	ip, r7
 101b8e6:	f10c 0c01 	add.w	ip, ip, #1
 101b8ea:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 101b8ee:	466e      	mov	r6, sp
 101b8f0:	4484      	add	ip, r0
 101b8f2:	466a      	mov	r2, sp
 101b8f4:	4603      	mov	r3, r0
		st_62_temp.lp_sel_set1[i].chnl_flag = table_buffer[k++];
 101b8f6:	781d      	ldrb	r5, [r3, #0]
		st_62_temp.lp_sel_set1[i].lp_source_select = table_buffer[k++];
 101b8f8:	785c      	ldrb	r4, [r3, #1]
		st_62_temp.lp_sel_set1[i].end_blk_rdg_source_select = table_buffer[k++];
 101b8fa:	7899      	ldrb	r1, [r3, #2]
		st_62_temp.lp_sel_set1[i].chnl_flag = table_buffer[k++];
 101b8fc:	7015      	strb	r5, [r2, #0]
 101b8fe:	3303      	adds	r3, #3
	for ( i = 0; i < st_61.nbr_chns_set1; i++ ) {
 101b900:	459c      	cmp	ip, r3
		st_62_temp.lp_sel_set1[i].lp_source_select = table_buffer[k++];
 101b902:	7054      	strb	r4, [r2, #1]
		st_62_temp.lp_sel_set1[i].end_blk_rdg_source_select = table_buffer[k++];
 101b904:	7091      	strb	r1, [r2, #2]
 101b906:	f102 0203 	add.w	r2, r2, #3
	for ( i = 0; i < st_61.nbr_chns_set1; i++ ) {
 101b90a:	d1f4      	bne.n	101b8f6 <LP_APP_bSt_62_execute_table_writing+0x2a>
 101b90c:	ea4f 0c4e 	mov.w	ip, lr, lsl #1
 101b910:	44e6      	add	lr, ip
 101b912:	fa5f fe8e 	uxtb.w	lr, lr
 101b916:	fa5f f88c 	uxtb.w	r8, ip
	k++;
 101b91a:	f10e 0301 	add.w	r3, lr, #1
 101b91e:	eb08 010e 	add.w	r1, r8, lr
 101b922:	b2db      	uxtb	r3, r3
 101b924:	3101      	adds	r1, #1
 101b926:	461a      	mov	r2, r3
 101b928:	b2c9      	uxtb	r1, r1
 101b92a:	f10d 0e0e 	add.w	lr, sp, #14
		st_62_temp.scalars_set1[i] = (uint16_t)(table_buffer[k++]);
 101b92e:	1c55      	adds	r5, r2, #1
 101b930:	b2ed      	uxtb	r5, r5
 101b932:	5c84      	ldrb	r4, [r0, r2]
		st_62_temp.scalars_set1[i] |= (uint16_t)(table_buffer[k++] << 8);
 101b934:	5d45      	ldrb	r5, [r0, r5]
 101b936:	3202      	adds	r2, #2
 101b938:	b2d2      	uxtb	r2, r2
 101b93a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
	for ( i = 0; i < st_61.nbr_chns_set1; i++ ) {
 101b93e:	428a      	cmp	r2, r1
		st_62_temp.scalars_set1[i] |= (uint16_t)(table_buffer[k++] << 8);
 101b940:	f82e 4b02 	strh.w	r4, [lr], #2
	for ( i = 0; i < st_61.nbr_chns_set1; i++ ) {
 101b944:	d1f3      	bne.n	101b92e <LP_APP_bSt_62_execute_table_writing+0x62>
 101b946:	4443      	add	r3, r8
 101b948:	b2db      	uxtb	r3, r3
 101b94a:	449c      	add	ip, r3
 101b94c:	fa5f fc8c 	uxtb.w	ip, ip
 101b950:	f10d 0416 	add.w	r4, sp, #22
		st_62_temp.divisor_set1[i] = (uint16_t)(table_buffer[k++]);
 101b954:	1c59      	adds	r1, r3, #1
 101b956:	b2c9      	uxtb	r1, r1
 101b958:	5cc2      	ldrb	r2, [r0, r3]
		st_62_temp.divisor_set1[i] |= (uint16_t)(table_buffer[k++] << 8);
 101b95a:	5c41      	ldrb	r1, [r0, r1]
 101b95c:	3302      	adds	r3, #2
 101b95e:	b2db      	uxtb	r3, r3
 101b960:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	for ( i = 0; i < st_61.nbr_chns_set1; i++ ) {
 101b964:	4563      	cmp	r3, ip
		st_62_temp.divisor_set1[i] |= (uint16_t)(table_buffer[k++] << 8);
 101b966:	f824 2b02 	strh.w	r2, [r4], #2
	for ( i = 0; i < st_61.nbr_chns_set1; i++ ) {
 101b96a:	d1f3      	bne.n	101b954 <LP_APP_bSt_62_execute_table_writing+0x88>
 101b96c:	b2fa      	uxtb	r2, r7
 101b96e:	3201      	adds	r2, #1
 101b970:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 101b974:	2401      	movs	r4, #1
 101b976:	4432      	add	r2, r6
		st_62_structure->lp_sel_set1[i].chnl_flag = 1;
 101b978:	4625      	mov	r5, r4
 101b97a:	4633      	mov	r3, r6
			st_62_structure->lp_sel_set1[i].lp_source_select = LOAD_PROFILE_INITIAL_ID;			
 101b97c:	2000      	movs	r0, #0
		if ( (st_62_structure->lp_sel_set1[i].lp_source_select < LOAD_PROFILE_INITIAL_ID) || (st_62_structure->lp_sel_set1[i].lp_source_select >= LP_NUMBER_OF_IDS) ) {
 101b97e:	7859      	ldrb	r1, [r3, #1]
		st_62_structure->lp_sel_set1[i].chnl_flag = 1;
 101b980:	701d      	strb	r5, [r3, #0]
		if ( (st_62_structure->lp_sel_set1[i].lp_source_select < LOAD_PROFILE_INITIAL_ID) || (st_62_structure->lp_sel_set1[i].lp_source_select >= LP_NUMBER_OF_IDS) ) {
 101b982:	2957      	cmp	r1, #87	; 0x57
		if ( (st_62_structure->lp_sel_set1[i].end_blk_rdg_source_select < SUMMATIONS_INITIAL_ID) || (st_62_structure->lp_sel_set1[i].end_blk_rdg_source_select >= SM_NUMBER_OF_IDS) ) {
 101b984:	7899      	ldrb	r1, [r3, #2]
			st_62_structure->lp_sel_set1[i].lp_source_select = LOAD_PROFILE_INITIAL_ID;			
 101b986:	bf84      	itt	hi
 101b988:	7058      	strbhi	r0, [r3, #1]
			is_ok = false;
 101b98a:	2400      	movhi	r4, #0
		if ( (st_62_structure->lp_sel_set1[i].end_blk_rdg_source_select < SUMMATIONS_INITIAL_ID) || (st_62_structure->lp_sel_set1[i].end_blk_rdg_source_select >= SM_NUMBER_OF_IDS) ) {
 101b98c:	2957      	cmp	r1, #87	; 0x57
			st_62_structure->lp_sel_set1[i].end_blk_rdg_source_select = SUMMATIONS_INITIAL_ID;
 101b98e:	bf88      	it	hi
 101b990:	7098      	strbhi	r0, [r3, #2]
 101b992:	f103 0303 	add.w	r3, r3, #3
			is_ok = false;
 101b996:	bf88      	it	hi
 101b998:	2400      	movhi	r4, #0
	for ( uint8_t i = 0; i < st_61.nbr_chns_set1; i++ ) {
 101b99a:	429a      	cmp	r2, r3
 101b99c:	d1ef      	bne.n	101b97e <LP_APP_bSt_62_execute_table_writing+0xb2>
	if ( is_ok == true ) {
 101b99e:	b92c      	cbnz	r4, 101b9ac <LP_APP_bSt_62_execute_table_writing+0xe0>
}
 101b9a0:	4620      	mov	r0, r4
 101b9a2:	b008      	add	sp, #32
 101b9a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for ( i = 0; i < st_61.nbr_chns_set1; i++ ) {
 101b9a8:	2401      	movs	r4, #1
 101b9aa:	466e      	mov	r6, sp
		st_62 = st_62_temp;
 101b9ac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 101b9ae:	4d0b      	ldr	r5, [pc, #44]	; (101b9dc <LP_APP_bSt_62_execute_table_writing+0x110>)
		LP_APP_vSt_62_write_eeprom_values(&st_62);
 101b9b0:	4f0b      	ldr	r7, [pc, #44]	; (101b9e0 <LP_APP_bSt_62_execute_table_writing+0x114>)
		st_62 = st_62_temp;
 101b9b2:	6028      	str	r0, [r5, #0]
 101b9b4:	6069      	str	r1, [r5, #4]
 101b9b6:	60aa      	str	r2, [r5, #8]
 101b9b8:	ce07      	ldmia	r6!, {r0, r1, r2}
 101b9ba:	8836      	ldrh	r6, [r6, #0]
 101b9bc:	6169      	str	r1, [r5, #20]
 101b9be:	61aa      	str	r2, [r5, #24]
 101b9c0:	60eb      	str	r3, [r5, #12]
 101b9c2:	6128      	str	r0, [r5, #16]
 101b9c4:	83ae      	strh	r6, [r5, #28]
		LP_APP_vSt_62_write_eeprom_values(&st_62);
 101b9c6:	47b8      	blx	r7
		uint16_t crc = SM_APP_usSt_62_ram_calculate_crc();
 101b9c8:	4b06      	ldr	r3, [pc, #24]	; (101b9e4 <LP_APP_bSt_62_execute_table_writing+0x118>)
 101b9ca:	4798      	blx	r3
		SM_APP_vSt_62_write_crc(crc);
 101b9cc:	4b06      	ldr	r3, [pc, #24]	; (101b9e8 <LP_APP_bSt_62_execute_table_writing+0x11c>)
 101b9ce:	4798      	blx	r3
}
 101b9d0:	4620      	mov	r0, r4
 101b9d2:	b008      	add	sp, #32
 101b9d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 101b9d8:	200166b8 	.word	0x200166b8
 101b9dc:	20016724 	.word	0x20016724
 101b9e0:	0101b209 	.word	0x0101b209
 101b9e4:	0101fe39 	.word	0x0101fe39
 101b9e8:	0101fee9 	.word	0x0101fee9

0101b9ec <LP_APP_usSt_62_get_size>:
	table_size = st_61.nbr_chns_set1 * 7 + 1;
 101b9ec:	4b03      	ldr	r3, [pc, #12]	; (101b9fc <LP_APP_usSt_62_get_size+0x10>)
 101b9ee:	7b18      	ldrb	r0, [r3, #12]
 101b9f0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 101b9f4:	3001      	adds	r0, #1
}
 101b9f6:	b280      	uxth	r0, r0
 101b9f8:	4770      	bx	lr
 101b9fa:	bf00      	nop
 101b9fc:	200166b8 	.word	0x200166b8

0101ba00 <LP_APP_bSt_63_restore_default_values>:
bool LP_APP_bSt_63_restore_default_values(void) {
 101ba00:	b538      	push	{r3, r4, r5, lr}
	st_63 = st_63_temp;
 101ba02:	4b0b      	ldr	r3, [pc, #44]	; (101ba30 <LP_APP_bSt_63_restore_default_values+0x30>)
	lp.curr_data.int_elapsed_time = 0;
 101ba04:	4d0b      	ldr	r5, [pc, #44]	; (101ba34 <LP_APP_bSt_63_restore_default_values+0x34>)
	LP_APP_vSt_63_write_eeprom_values(&st_63);
 101ba06:	4a0c      	ldr	r2, [pc, #48]	; (101ba38 <LP_APP_bSt_63_restore_default_values+0x38>)
	st_63 = st_63_temp;
 101ba08:	2400      	movs	r4, #0
 101ba0a:	2120      	movs	r1, #32
 101ba0c:	7019      	strb	r1, [r3, #0]
 101ba0e:	805c      	strh	r4, [r3, #2]
 101ba10:	809c      	strh	r4, [r3, #4]
 101ba12:	609c      	str	r4, [r3, #8]
 101ba14:	819c      	strh	r4, [r3, #12]
 101ba16:	81dc      	strh	r4, [r3, #14]
	LP_APP_vSt_63_write_eeprom_values(&st_63);
 101ba18:	4790      	blx	r2
	lp.curr_data.int_elapsed_time = 0;
 101ba1a:	4629      	mov	r1, r5
	EEPROM_writer( LP_INTERVAL_TIME_ADDR, &lp.curr_data.int_elapsed_time, TM_FMAT_SIZE );
 101ba1c:	2204      	movs	r2, #4
	lp.curr_data.int_elapsed_time = 0;
 101ba1e:	f841 4f18 	str.w	r4, [r1, #24]!
	EEPROM_writer( LP_INTERVAL_TIME_ADDR, &lp.curr_data.int_elapsed_time, TM_FMAT_SIZE );
 101ba22:	4b06      	ldr	r3, [pc, #24]	; (101ba3c <LP_APP_bSt_63_restore_default_values+0x3c>)
 101ba24:	f249 20ce 	movw	r0, #37582	; 0x92ce
 101ba28:	4798      	blx	r3
	lp.is_active = false;
 101ba2a:	702c      	strb	r4, [r5, #0]
}
 101ba2c:	2001      	movs	r0, #1
 101ba2e:	bd38      	pop	{r3, r4, r5, pc}
 101ba30:	20016744 	.word	0x20016744
 101ba34:	200166c8 	.word	0x200166c8
 101ba38:	0101b2a9 	.word	0x0101b2a9
 101ba3c:	01017509 	.word	0x01017509

0101ba40 <LP_APP_bSt_63_refresh_ram>:
bool LP_APP_bSt_63_refresh_ram(void) {
 101ba40:	b530      	push	{r4, r5, lr}
 101ba42:	b085      	sub	sp, #20
	EEPROM_reader( ST_63_SET_STATUS_FLAGS_ADDR, &st_63_structure->lp_set_status_flags, 1 ); 
 101ba44:	4c14      	ldr	r4, [pc, #80]	; (101ba98 <LP_APP_bSt_63_refresh_ram+0x58>)
 101ba46:	4669      	mov	r1, sp
 101ba48:	2201      	movs	r2, #1
 101ba4a:	f646 103b 	movw	r0, #26939	; 0x693b
 101ba4e:	47a0      	blx	r4
	EEPROM_reader( ST_63_NBR_VALID_BLOCKS_ADDR, &st_63_structure->nbr_valid_blocks, 2 );
 101ba50:	2202      	movs	r2, #2
 101ba52:	eb0d 0102 	add.w	r1, sp, r2
 101ba56:	f646 103c 	movw	r0, #26940	; 0x693c
 101ba5a:	47a0      	blx	r4
	EEPROM_reader( ST_63_LAST_BLOCK_ELEMENT_ADDR, &st_63_structure->last_block_element, 2 );
 101ba5c:	a901      	add	r1, sp, #4
 101ba5e:	2202      	movs	r2, #2
 101ba60:	f646 103e 	movw	r0, #26942	; 0x693e
 101ba64:	47a0      	blx	r4
	EEPROM_reader( ST_63_LAST_BLOCK_SEQ_NBR_ADDR, &st_63_structure->last_block_seq_nbr, 4 ); 
 101ba66:	a902      	add	r1, sp, #8
 101ba68:	2204      	movs	r2, #4
 101ba6a:	f646 1040 	movw	r0, #26944	; 0x6940
 101ba6e:	47a0      	blx	r4
	EEPROM_reader( ST_63_NBR_UNREAD_BLOCKS_ADDR, &st_63_structure->nbr_unread_blocks, 2 );
 101ba70:	a903      	add	r1, sp, #12
 101ba72:	2202      	movs	r2, #2
 101ba74:	f646 1044 	movw	r0, #26948	; 0x6944
 101ba78:	47a0      	blx	r4
	EEPROM_reader( ST_63_NBR_VALID_INT_ADDR, &st_63_structure->nbr_valid_int, 2 );
 101ba7a:	f10d 010e 	add.w	r1, sp, #14
 101ba7e:	2202      	movs	r2, #2
 101ba80:	f646 1046 	movw	r0, #26950	; 0x6946
 101ba84:	47a0      	blx	r4
			st_63 = st_63_temp;
 101ba86:	e89d 000f 	ldmia.w	sp, {r0, r1, r2, r3}
 101ba8a:	4c04      	ldr	r4, [pc, #16]	; (101ba9c <LP_APP_bSt_63_refresh_ram+0x5c>)
 101ba8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 101ba90:	2001      	movs	r0, #1
 101ba92:	b005      	add	sp, #20
 101ba94:	bd30      	pop	{r4, r5, pc}
 101ba96:	bf00      	nop
 101ba98:	01017511 	.word	0x01017511
 101ba9c:	20016744 	.word	0x20016744

0101baa0 <LP_APP_bLoad_st_63>:
bool LP_APP_bLoad_st_63(void) {
 101baa0:	b510      	push	{r4, lr}
	if ( SM_APP_ucGet_table_state(ST_63_PROG_STATE_ADDR) != C1219_TABLE_FULL ) {
 101baa2:	f646 103a 	movw	r0, #26938	; 0x693a
 101baa6:	4b06      	ldr	r3, [pc, #24]	; (101bac0 <LP_APP_bLoad_st_63+0x20>)
 101baa8:	4798      	blx	r3
 101baaa:	2845      	cmp	r0, #69	; 0x45
 101baac:	d003      	beq.n	101bab6 <LP_APP_bLoad_st_63+0x16>
		is_ok = LP_APP_bSt_63_restore_default_values();
 101baae:	4b05      	ldr	r3, [pc, #20]	; (101bac4 <LP_APP_bLoad_st_63+0x24>)
}
 101bab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		is_ok = LP_APP_bSt_63_restore_default_values();
 101bab4:	4718      	bx	r3
		is_ok = LP_APP_bSt_63_refresh_ram();
 101bab6:	4b04      	ldr	r3, [pc, #16]	; (101bac8 <LP_APP_bLoad_st_63+0x28>)
}
 101bab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		is_ok = LP_APP_bSt_63_refresh_ram();
 101babc:	4718      	bx	r3
 101babe:	bf00      	nop
 101bac0:	010203cd 	.word	0x010203cd
 101bac4:	0101ba01 	.word	0x0101ba01
 101bac8:	0101ba41 	.word	0x0101ba41

0101bacc <LP_APP_bSt_63_execute_table_reading>:
	table_buffer[k++] = st_63.lp_set_status_flags;
 101bacc:	4b14      	ldr	r3, [pc, #80]	; (101bb20 <LP_APP_bSt_63_execute_table_reading+0x54>)
 101bace:	781a      	ldrb	r2, [r3, #0]
 101bad0:	7002      	strb	r2, [r0, #0]
	table_buffer[k++] = (uint8_t)(st_63.nbr_valid_blocks);
 101bad2:	885a      	ldrh	r2, [r3, #2]
 101bad4:	7042      	strb	r2, [r0, #1]
	table_buffer[k++] = (uint8_t)(st_63.nbr_valid_blocks >> 8);
 101bad6:	8859      	ldrh	r1, [r3, #2]
	if ( (st_63.lp_set_status_flags & LIST_TYPE_bm) == LIST_TYPE_bm )
 101bad8:	781a      	ldrb	r2, [r3, #0]
	table_buffer[k++] = (uint8_t)(st_63.nbr_valid_blocks >> 8);
 101bada:	0a09      	lsrs	r1, r1, #8
	if ( (st_63.lp_set_status_flags & LIST_TYPE_bm) == LIST_TYPE_bm )
 101badc:	f012 0204 	ands.w	r2, r2, #4
	table_buffer[k++] = (uint8_t)(st_63.nbr_valid_blocks >> 8);
 101bae0:	7081      	strb	r1, [r0, #2]
	if ( (st_63.lp_set_status_flags & LIST_TYPE_bm) == LIST_TYPE_bm )
 101bae2:	d116      	bne.n	101bb12 <LP_APP_bSt_63_execute_table_reading+0x46>
		table_buffer[k++] = 0;
 101bae4:	70c2      	strb	r2, [r0, #3]
		table_buffer[k++] = 0;
 101bae6:	7102      	strb	r2, [r0, #4]
	table_buffer[k++] = (uint8_t)(st_63.last_block_seq_nbr);
 101bae8:	689a      	ldr	r2, [r3, #8]
 101baea:	7142      	strb	r2, [r0, #5]
	table_buffer[k++] = (uint8_t)(st_63.last_block_seq_nbr >> 8);
 101baec:	689a      	ldr	r2, [r3, #8]
 101baee:	0a12      	lsrs	r2, r2, #8
 101baf0:	7182      	strb	r2, [r0, #6]
	table_buffer[k++] = (uint8_t)(st_63.last_block_seq_nbr >> 16);
 101baf2:	895a      	ldrh	r2, [r3, #10]
 101baf4:	71c2      	strb	r2, [r0, #7]
	table_buffer[k++] = (uint8_t)(st_63.last_block_seq_nbr >> 24);
 101baf6:	7ada      	ldrb	r2, [r3, #11]
 101baf8:	7202      	strb	r2, [r0, #8]
	table_buffer[k++] = (uint8_t)(st_63.nbr_unread_blocks);
 101bafa:	899a      	ldrh	r2, [r3, #12]
 101bafc:	7242      	strb	r2, [r0, #9]
	table_buffer[k++] = (uint8_t)(st_63.nbr_unread_blocks >> 8);
 101bafe:	899a      	ldrh	r2, [r3, #12]
 101bb00:	0a12      	lsrs	r2, r2, #8
 101bb02:	7282      	strb	r2, [r0, #10]
	table_buffer[k++] = (uint8_t)(st_63.nbr_valid_int);
 101bb04:	89da      	ldrh	r2, [r3, #14]
 101bb06:	72c2      	strb	r2, [r0, #11]
	table_buffer[k++] = (uint8_t)(st_63.nbr_valid_int >> 8);
 101bb08:	89db      	ldrh	r3, [r3, #14]
 101bb0a:	0a1b      	lsrs	r3, r3, #8
 101bb0c:	7303      	strb	r3, [r0, #12]
}
 101bb0e:	2001      	movs	r0, #1
 101bb10:	4770      	bx	lr
		table_buffer[k++] = (uint8_t)(st_63.last_block_element);
 101bb12:	889a      	ldrh	r2, [r3, #4]
 101bb14:	70c2      	strb	r2, [r0, #3]
		table_buffer[k++] = (uint8_t)(st_63.last_block_element >> 8);
 101bb16:	889a      	ldrh	r2, [r3, #4]
 101bb18:	0a12      	lsrs	r2, r2, #8
 101bb1a:	7102      	strb	r2, [r0, #4]
 101bb1c:	e7e4      	b.n	101bae8 <LP_APP_bSt_63_execute_table_reading+0x1c>
 101bb1e:	bf00      	nop
 101bb20:	20016744 	.word	0x20016744

0101bb24 <LP_APP_usSt_63_get_size>:
}
 101bb24:	200d      	movs	r0, #13
 101bb26:	4770      	bx	lr

0101bb28 <LP_APP_ulSt_64_get_size>:
uint32_t LP_APP_ulSt_64_get_size(void) {
 101bb28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for ( i = 0; i < st_61.nbr_blks_set1; i++ ) {
 101bb2c:	4a22      	ldr	r2, [pc, #136]	; (101bbb8 <LP_APP_ulSt_64_get_size+0x90>)
 101bb2e:	f8b2 8008 	ldrh.w	r8, [r2, #8]
 101bb32:	f1b8 0f00 	cmp.w	r8, #0
 101bb36:	d03b      	beq.n	101bbb0 <LP_APP_ulSt_64_get_size+0x88>
 101bb38:	7b13      	ldrb	r3, [r2, #12]
 101bb3a:	8894      	ldrh	r4, [r2, #4]
 101bb3c:	8951      	ldrh	r1, [r2, #10]
 101bb3e:	b29a      	uxth	r2, r3
 101bb40:	1e57      	subs	r7, r2, #1
 101bb42:	b2bf      	uxth	r7, r7
				nbr_set_bytes = ( (st_61.nbr_chns_set1 / 2) + 1 );
 101bb44:	085b      	lsrs	r3, r3, #1
 101bb46:	007f      	lsls	r7, r7, #1
			nbr_set_bytes = ( (st_61.nbr_blk_ints_set1 + 7) / 8 );
 101bb48:	f101 0a07 	add.w	sl, r1, #7
				table_size += nbr_set_bytes;
 101bb4c:	f04f 0c00 	mov.w	ip, #0
 101bb50:	f404 6900 	and.w	r9, r4, #2048	; 0x800
 101bb54:	f004 0610 	and.w	r6, r4, #16
 101bb58:	f004 0520 	and.w	r5, r4, #32
 101bb5c:	f103 0e01 	add.w	lr, r3, #1
 101bb60:	3702      	adds	r7, #2
			table_size += nbr_set_bytes;
 101bb62:	f3ca 0ac7 	ubfx	sl, sl, #3, #8
 101bb66:	f404 6480 	and.w	r4, r4, #1024	; 0x400
				table_size += nbr_set_bytes;
 101bb6a:	4660      	mov	r0, ip
		table_size += 4;
 101bb6c:	3004      	adds	r0, #4
		for ( j = 0; j < st_61.nbr_chns_set1; j++ ) {
 101bb6e:	b142      	cbz	r2, 101bb82 <LP_APP_ulSt_64_get_size+0x5a>
 101bb70:	2300      	movs	r3, #0
 101bb72:	3301      	adds	r3, #1
 101bb74:	b29b      	uxth	r3, r3
			if ( (st_61.lp_flags & BLK_END_READ_FLAG_bm) == BLK_END_READ_FLAG_bm ) {
 101bb76:	b106      	cbz	r6, 101bb7a <LP_APP_ulSt_64_get_size+0x52>
				table_size += NI_FMAT1_SIZE;
 101bb78:	3006      	adds	r0, #6
			if ( (st_61.lp_flags & BLK_END_PULSE_FLAG_bm) == BLK_END_PULSE_FLAG_bm ) {
 101bb7a:	b105      	cbz	r5, 101bb7e <LP_APP_ulSt_64_get_size+0x56>
				table_size += 4;
 101bb7c:	3004      	adds	r0, #4
		for ( j = 0; j < st_61.nbr_chns_set1; j++ ) {
 101bb7e:	4293      	cmp	r3, r2
 101bb80:	d1f7      	bne.n	101bb72 <LP_APP_ulSt_64_get_size+0x4a>
		if ( (st_61.lp_flags & SIMPLE_INT_STATUS_FLAG_bm) == SIMPLE_INT_STATUS_FLAG_bm ) {
 101bb82:	f1b9 0f00 	cmp.w	r9, #0
 101bb86:	d000      	beq.n	101bb8a <LP_APP_ulSt_64_get_size+0x62>
			table_size += nbr_set_bytes;
 101bb88:	4450      	add	r0, sl
		for ( j = 0; j < st_61.nbr_blk_ints_set1; j++ ) {
 101bb8a:	b149      	cbz	r1, 101bba0 <LP_APP_ulSt_64_get_size+0x78>
 101bb8c:	2300      	movs	r3, #0
 101bb8e:	3301      	adds	r3, #1
 101bb90:	fa1f fb83 	uxth.w	fp, r3
			if ( (st_61.lp_flags & EXTENDED_INT_STATUS_FLAG_bm) == EXTENDED_INT_STATUS_FLAG_bm ) {
 101bb94:	b104      	cbz	r4, 101bb98 <LP_APP_ulSt_64_get_size+0x70>
				table_size += nbr_set_bytes;
 101bb96:	4470      	add	r0, lr
			for ( l = 0; l < st_61.nbr_chns_set1; l++ ) {
 101bb98:	b102      	cbz	r2, 101bb9c <LP_APP_ulSt_64_get_size+0x74>
 101bb9a:	4438      	add	r0, r7
		for ( j = 0; j < st_61.nbr_blk_ints_set1; j++ ) {
 101bb9c:	458b      	cmp	fp, r1
 101bb9e:	d3f6      	bcc.n	101bb8e <LP_APP_ulSt_64_get_size+0x66>
 101bba0:	f10c 0c01 	add.w	ip, ip, #1
	for ( i = 0; i < st_61.nbr_blks_set1; i++ ) {
 101bba4:	fa1f f38c 	uxth.w	r3, ip
 101bba8:	4543      	cmp	r3, r8
 101bbaa:	d3df      	bcc.n	101bb6c <LP_APP_ulSt_64_get_size+0x44>
 101bbac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t table_size = 0;
 101bbb0:	4640      	mov	r0, r8
}
 101bbb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 101bbb6:	bf00      	nop
 101bbb8:	200166b8 	.word	0x200166b8

0101bbbc <LP_APP_vLoad_st_64_eeprom_addr>:
void LP_APP_vLoad_st_64_eeprom_addr(void) {
 101bbbc:	b4f0      	push	{r4, r5, r6, r7}
	st_64_addr.block_end_read = st_64_addr.blk_end_time + (TM_FMAT_SIZE * st_61.nbr_blks_set1);
 101bbbe:	4b12      	ldr	r3, [pc, #72]	; (101bc08 <LP_APP_vLoad_st_64_eeprom_addr+0x4c>)
	st_64_addr.blk_end_time = ST_64_START_ADDR;
 101bbc0:	4a12      	ldr	r2, [pc, #72]	; (101bc0c <LP_APP_vLoad_st_64_eeprom_addr+0x50>)
	st_64_addr.block_end_read = st_64_addr.blk_end_time + (TM_FMAT_SIZE * st_61.nbr_blks_set1);
 101bbc2:	891f      	ldrh	r7, [r3, #8]
	st_64_addr.simple_int_status = st_64_addr.block_end_read + (NI_FMAT1_SIZE * st_61.nbr_chns_set1 * st_61.nbr_blks_set1);
 101bbc4:	7b1d      	ldrb	r5, [r3, #12]
	st_64_addr.extended_int_status = st_64_addr.simple_int_status + ( ( (st_61.nbr_blk_ints_set1 + 7) / 8) * st_61.nbr_blks_set1 );
 101bbc6:	895b      	ldrh	r3, [r3, #10]
	st_64_addr.block_end_read = st_64_addr.blk_end_time + (TM_FMAT_SIZE * st_61.nbr_blks_set1);
 101bbc8:	00be      	lsls	r6, r7, #2
	st_64_addr.simple_int_status = st_64_addr.block_end_read + (NI_FMAT1_SIZE * st_61.nbr_chns_set1 * st_61.nbr_blks_set1);
 101bbca:	eb05 0445 	add.w	r4, r5, r5, lsl #1
	st_64_addr.block_end_read = st_64_addr.blk_end_time + (TM_FMAT_SIZE * st_61.nbr_blks_set1);
 101bbce:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
	st_64_addr.extended_int_status = st_64_addr.simple_int_status + ( ( (st_61.nbr_blk_ints_set1 + 7) / 8) * st_61.nbr_blks_set1 );
 101bbd2:	1dd8      	adds	r0, r3, #7
	st_64_addr.simple_int_status = st_64_addr.block_end_read + (NI_FMAT1_SIZE * st_61.nbr_chns_set1 * st_61.nbr_blks_set1);
 101bbd4:	0064      	lsls	r4, r4, #1
 101bbd6:	fb07 6404 	mla	r4, r7, r4, r6
	st_64_addr.int_data = st_64_addr.extended_int_status + ( ( (st_61.nbr_chns_set1 / 2) + 1) * st_61.nbr_blk_ints_set1 * st_61.nbr_blks_set1 );
 101bbda:	0869      	lsrs	r1, r5, #1
	st_64_addr.extended_int_status = st_64_addr.simple_int_status + ( ( (st_61.nbr_blk_ints_set1 + 7) / 8) * st_61.nbr_blks_set1 );
 101bbdc:	10c0      	asrs	r0, r0, #3
 101bbde:	fb07 4000 	mla	r0, r7, r0, r4
	st_64_addr.int_data = st_64_addr.extended_int_status + ( ( (st_61.nbr_chns_set1 / 2) + 1) * st_61.nbr_blk_ints_set1 * st_61.nbr_blks_set1 );
 101bbe2:	fb01 3103 	mla	r1, r1, r3, r3
	st_64_addr.simple_int_status = st_64_addr.block_end_read + (NI_FMAT1_SIZE * st_61.nbr_chns_set1 * st_61.nbr_blks_set1);
 101bbe6:	006d      	lsls	r5, r5, #1
	st_64_addr.int_data = st_64_addr.extended_int_status + ( ( (st_61.nbr_chns_set1 / 2) + 1) * st_61.nbr_blk_ints_set1 * st_61.nbr_blks_set1 );
 101bbe8:	fb07 0101 	mla	r1, r7, r1, r0
	st_64_addr.end_addr = st_64_addr.int_data + ( 2 * st_61.nbr_chns_set1 * st_61.nbr_blk_ints_set1 * st_61.nbr_blks_set1 );
 101bbec:	fb03 f305 	mul.w	r3, r3, r5
 101bbf0:	fb07 1303 	mla	r3, r7, r3, r1
	st_64_addr.blk_end_time = ST_64_START_ADDR;
 101bbf4:	f44f 2580 	mov.w	r5, #262144	; 0x40000
	st_64_addr.block_end_read = st_64_addr.blk_end_time + (TM_FMAT_SIZE * st_61.nbr_blks_set1);
 101bbf8:	6056      	str	r6, [r2, #4]
	st_64_addr.simple_int_status = st_64_addr.block_end_read + (NI_FMAT1_SIZE * st_61.nbr_chns_set1 * st_61.nbr_blks_set1);
 101bbfa:	6094      	str	r4, [r2, #8]
	st_64_addr.extended_int_status = st_64_addr.simple_int_status + ( ( (st_61.nbr_blk_ints_set1 + 7) / 8) * st_61.nbr_blks_set1 );
 101bbfc:	60d0      	str	r0, [r2, #12]
	st_64_addr.int_data = st_64_addr.extended_int_status + ( ( (st_61.nbr_chns_set1 / 2) + 1) * st_61.nbr_blk_ints_set1 * st_61.nbr_blks_set1 );
 101bbfe:	6111      	str	r1, [r2, #16]
	st_64_addr.end_addr = st_64_addr.int_data + ( 2 * st_61.nbr_chns_set1 * st_61.nbr_blk_ints_set1 * st_61.nbr_blks_set1 );
 101bc00:	6153      	str	r3, [r2, #20]
	st_64_addr.blk_end_time = ST_64_START_ADDR;
 101bc02:	6015      	str	r5, [r2, #0]
}
 101bc04:	bcf0      	pop	{r4, r5, r6, r7}
 101bc06:	4770      	bx	lr
 101bc08:	200166b8 	.word	0x200166b8
 101bc0c:	20016754 	.word	0x20016754

0101bc10 <LP_APP_bSt_61_execute_table_writing>:
bool LP_APP_bSt_61_execute_table_writing(uint8_t *table_buffer) {
 101bc10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	st_61_temp = st_61;
 101bc14:	4c1c      	ldr	r4, [pc, #112]	; (101bc88 <LP_APP_bSt_61_execute_table_writing+0x78>)
	is_ok = LP_APP_bSt_61_validate_data(&st_61_temp);
 101bc16:	4f1d      	ldr	r7, [pc, #116]	; (101bc8c <LP_APP_bSt_61_execute_table_writing+0x7c>)
bool LP_APP_bSt_61_execute_table_writing(uint8_t *table_buffer) {
 101bc18:	4606      	mov	r6, r0
	st_61_temp = st_61;
 101bc1a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
bool LP_APP_bSt_61_execute_table_writing(uint8_t *table_buffer) {
 101bc1e:	b084      	sub	sp, #16
	st_61_temp = st_61;
 101bc20:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
	st_61_temp.lp_flags |= (uint16_t)(table_buffer[k++] << 8);
 101bc24:	88b1      	ldrh	r1, [r6, #4]
	st_61_temp.nbr_chns_set1 = table_buffer[k++];
 101bc26:	7af2      	ldrb	r2, [r6, #11]
	st_61_temp.max_int_time_set1 = table_buffer[k++];
 101bc28:	7b33      	ldrb	r3, [r6, #12]
	st_61_temp.lp_flags |= (uint16_t)(table_buffer[k++] << 8);
 101bc2a:	f8ad 1004 	strh.w	r1, [sp, #4]
	is_ok = LP_APP_bSt_61_validate_data(&st_61_temp);
 101bc2e:	4668      	mov	r0, sp
	st_61_temp.nbr_chns_set1 = table_buffer[k++];
 101bc30:	f88d 200c 	strb.w	r2, [sp, #12]
	st_61_temp.max_int_time_set1 = table_buffer[k++];
 101bc34:	f88d 300d 	strb.w	r3, [sp, #13]
	is_ok = LP_APP_bSt_61_validate_data(&st_61_temp);
 101bc38:	47b8      	blx	r7
	if ( is_ok )
 101bc3a:	4606      	mov	r6, r0
 101bc3c:	b1f8      	cbz	r0, 101bc7e <LP_APP_bSt_61_execute_table_writing+0x6e>
		st_61 = st_61_temp;
 101bc3e:	e89d 000f 	ldmia.w	sp, {r0, r1, r2, r3}
	block_size = LP_APP_usGet_block_size();
 101bc42:	f8df 8064 	ldr.w	r8, [pc, #100]	; 101bca8 <LP_APP_bSt_61_execute_table_writing+0x98>
	nbr_blocks = size_available/block_size;
 101bc46:	4f12      	ldr	r7, [pc, #72]	; (101bc90 <LP_APP_bSt_61_execute_table_writing+0x80>)
		st_61.nbr_blk_ints_set1 = DEFAULT_NBR_BLK_INTS_SET1;
 101bc48:	2530      	movs	r5, #48	; 0x30
		st_61 = st_61_temp;
 101bc4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		st_61.nbr_blk_ints_set1 = DEFAULT_NBR_BLK_INTS_SET1;
 101bc4e:	8165      	strh	r5, [r4, #10]
	block_size = LP_APP_usGet_block_size();
 101bc50:	47c0      	blx	r8
	nbr_blocks = size_available/block_size;
 101bc52:	fbb7 f5f0 	udiv	r5, r7, r0
	st_61.nbr_blks_set1 = nbr_blocks;
 101bc56:	8125      	strh	r5, [r4, #8]
		st_61.lp_memory_len = st_61.nbr_blks_set1 * LP_APP_usGet_block_size();
 101bc58:	47c0      	blx	r8
 101bc5a:	b2ad      	uxth	r5, r5
 101bc5c:	fb00 f505 	mul.w	r5, r0, r5
		LP_APP_vSt_61_write_eeprom_values(&st_61);
 101bc60:	4b0c      	ldr	r3, [pc, #48]	; (101bc94 <LP_APP_bSt_61_execute_table_writing+0x84>)
		st_61.lp_memory_len = st_61.nbr_blks_set1 * LP_APP_usGet_block_size();
 101bc62:	6025      	str	r5, [r4, #0]
		LP_APP_vSt_61_write_eeprom_values(&st_61);
 101bc64:	4798      	blx	r3
		uint16_t crc = SM_APP_usSt_61_ram_calculate_crc();
 101bc66:	4b0c      	ldr	r3, [pc, #48]	; (101bc98 <LP_APP_bSt_61_execute_table_writing+0x88>)
 101bc68:	4798      	blx	r3
		SM_APP_vSt_61_write_crc(crc);
 101bc6a:	4b0c      	ldr	r3, [pc, #48]	; (101bc9c <LP_APP_bSt_61_execute_table_writing+0x8c>)
 101bc6c:	4798      	blx	r3
		LP_APP_bSt_63_restore_default_values();
 101bc6e:	4b0c      	ldr	r3, [pc, #48]	; (101bca0 <LP_APP_bSt_61_execute_table_writing+0x90>)
 101bc70:	4798      	blx	r3
	block_size = LP_APP_usGet_block_size();
 101bc72:	47c0      	blx	r8
		LP_APP_vLoad_st_64_eeprom_addr();
 101bc74:	4b0b      	ldr	r3, [pc, #44]	; (101bca4 <LP_APP_bSt_61_execute_table_writing+0x94>)
	nbr_blocks = size_available/block_size;
 101bc76:	fbb7 f0f0 	udiv	r0, r7, r0
	st_61.nbr_blks_set1 = nbr_blocks;
 101bc7a:	8120      	strh	r0, [r4, #8]
		LP_APP_vLoad_st_64_eeprom_addr();
 101bc7c:	4798      	blx	r3
}
 101bc7e:	4630      	mov	r0, r6
 101bc80:	b004      	add	sp, #16
 101bc82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 101bc86:	bf00      	nop
 101bc88:	200166b8 	.word	0x200166b8
 101bc8c:	0101b069 	.word	0x0101b069
 101bc90:	0003ffe2 	.word	0x0003ffe2
 101bc94:	0101b315 	.word	0x0101b315
 101bc98:	0101fd3d 	.word	0x0101fd3d
 101bc9c:	0101fded 	.word	0x0101fded
 101bca0:	0101ba01 	.word	0x0101ba01
 101bca4:	0101bbbd 	.word	0x0101bbbd
 101bca8:	0101b019 	.word	0x0101b019

0101bcac <LP_APP_vRecorder_task>:
 * 
 * \param void
 * \retval void
 ******************************************************************************
 */
void LP_APP_vRecorder_task(void) {
 101bcac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	volatile uint8_t i;
	volatile double inst_value;

	if ( lp.is_active ) {
 101bcb0:	f8df a2e0 	ldr.w	sl, [pc, #736]	; 101bf94 <LP_APP_vRecorder_task+0x2e8>
 101bcb4:	f89a 3000 	ldrb.w	r3, [sl]
void LP_APP_vRecorder_task(void) {
 101bcb8:	b087      	sub	sp, #28
	if ( lp.is_active ) {
 101bcba:	2b00      	cmp	r3, #0
 101bcbc:	f000 8170 	beq.w	101bfa0 <LP_APP_vRecorder_task+0x2f4>
		st_63.lp_set_status_flags |= ACTIVE_MODE_FLAG_bm;

		/*===========================================================================*\
		 * Pulse Energy Accumulator
		\*===========================================================================*/
		for ( i = 0; i < st_61.nbr_chns_set1; i++) {
 101bcc0:	49aa      	ldr	r1, [pc, #680]	; (101bf6c <LP_APP_vRecorder_task+0x2c0>)
		st_63.lp_set_status_flags |= ACTIVE_MODE_FLAG_bm;
 101bcc2:	4bab      	ldr	r3, [pc, #684]	; (101bf70 <LP_APP_vRecorder_task+0x2c4>)
		for ( i = 0; i < st_61.nbr_chns_set1; i++) {
 101bcc4:	7b08      	ldrb	r0, [r1, #12]
		st_63.lp_set_status_flags |= ACTIVE_MODE_FLAG_bm;
 101bcc6:	781a      	ldrb	r2, [r3, #0]
 101bcc8:	9300      	str	r3, [sp, #0]
		for ( i = 0; i < st_61.nbr_chns_set1; i++) {
 101bcca:	2100      	movs	r1, #0
 101bccc:	f88d 100f 	strb.w	r1, [sp, #15]
		st_63.lp_set_status_flags |= ACTIVE_MODE_FLAG_bm;
 101bcd0:	461c      	mov	r4, r3
		for ( i = 0; i < st_61.nbr_chns_set1; i++) {
 101bcd2:	f89d 100f 	ldrb.w	r1, [sp, #15]
		lp.curr_data.int_elapsed_time++;
 101bcd6:	f8da 3018 	ldr.w	r3, [sl, #24]
		st_63.lp_set_status_flags |= ACTIVE_MODE_FLAG_bm;
 101bcda:	f042 0220 	orr.w	r2, r2, #32
		lp.curr_data.int_elapsed_time++;
 101bcde:	3301      	adds	r3, #1
		for ( i = 0; i < st_61.nbr_chns_set1; i++) {
 101bce0:	4288      	cmp	r0, r1
		st_63.lp_set_status_flags |= ACTIVE_MODE_FLAG_bm;
 101bce2:	7022      	strb	r2, [r4, #0]
		lp.curr_data.int_elapsed_time++;
 101bce4:	f8ca 3018 	str.w	r3, [sl, #24]
		for ( i = 0; i < st_61.nbr_chns_set1; i++) {
 101bce8:	f240 80de 	bls.w	101bea8 <LP_APP_vRecorder_task+0x1fc>
 101bcec:	4ea1      	ldr	r6, [pc, #644]	; (101bf74 <LP_APP_vRecorder_task+0x2c8>)
 101bcee:	4ca2      	ldr	r4, [pc, #648]	; (101bf78 <LP_APP_vRecorder_task+0x2cc>)
 101bcf0:	4da2      	ldr	r5, [pc, #648]	; (101bf7c <LP_APP_vRecorder_task+0x2d0>)
 101bcf2:	f8df b2a4 	ldr.w	fp, [pc, #676]	; 101bf98 <LP_APP_vRecorder_task+0x2ec>

			/* Get instantaneous value for the source selected */
			inst_value = REGS_APP_dDetermine_instantaneous_power( (uint8_t)st_62.lp_sel_set1[i].lp_source_select );
 101bcf6:	f89d 300f 	ldrb.w	r3, [sp, #15]
 101bcfa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 101bcfe:	4433      	add	r3, r6
 101bd00:	7858      	ldrb	r0, [r3, #1]
 101bd02:	4b9f      	ldr	r3, [pc, #636]	; (101bf80 <LP_APP_vRecorder_task+0x2d4>)
 101bd04:	4798      	blx	r3
 101bd06:	e9cd 0104 	strd	r0, r1, [sp, #16]
			
			/* Accumulate instantaneous values */
			summ_integer[i] += (uint64_t)( (uint64_t)inst_value / LP_SAMPLES_PER_HOUR );
 101bd0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 101bd0e:	f89d 700f 	ldrb.w	r7, [sp, #15]
 101bd12:	4b9c      	ldr	r3, [pc, #624]	; (101bf84 <LP_APP_vRecorder_task+0x2d8>)
 101bd14:	4798      	blx	r3
 101bd16:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 101bd1a:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 101bd1e:	2300      	movs	r3, #0
 101bd20:	47a8      	blx	r5
 101bd22:	e9d7 2300 	ldrd	r2, r3, [r7]
			summ_remaind[i] += (uint64_t)( (uint64_t)inst_value % LP_SAMPLES_PER_HOUR );
 101bd26:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
			summ_integer[i] += (uint64_t)( (uint64_t)inst_value / LP_SAMPLES_PER_HOUR );
 101bd2a:	1880      	adds	r0, r0, r2
 101bd2c:	4159      	adcs	r1, r3
			summ_remaind[i] += (uint64_t)( (uint64_t)inst_value % LP_SAMPLES_PER_HOUR );
 101bd2e:	f89d 300f 	ldrb.w	r3, [sp, #15]
			summ_integer[i] += (uint64_t)( (uint64_t)inst_value / LP_SAMPLES_PER_HOUR );
 101bd32:	e9c7 0100 	strd	r0, r1, [r7]
			summ_remaind[i] += (uint64_t)( (uint64_t)inst_value % LP_SAMPLES_PER_HOUR );
 101bd36:	eb0b 07c3 	add.w	r7, fp, r3, lsl #3
 101bd3a:	4640      	mov	r0, r8
 101bd3c:	4b91      	ldr	r3, [pc, #580]	; (101bf84 <LP_APP_vRecorder_task+0x2d8>)
 101bd3e:	4649      	mov	r1, r9
 101bd40:	4798      	blx	r3
 101bd42:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 101bd46:	2300      	movs	r3, #0
 101bd48:	47a8      	blx	r5
 101bd4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 101bd4e:	1812      	adds	r2, r2, r0
 101bd50:	414b      	adcs	r3, r1
 101bd52:	e9c7 2300 	strd	r2, r3, [r7]
			
			/* Add all remainders */
			if ( (summ_remaind[i] / LP_SAMPLES_PER_HOUR) > 0 ) {
 101bd56:	f89d 300f 	ldrb.w	r3, [sp, #15]
 101bd5a:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 101bd5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 101bd62:	2100      	movs	r1, #0
 101bd64:	f640 600f 	movw	r0, #3599	; 0xe0f
 101bd68:	4299      	cmp	r1, r3
 101bd6a:	bf08      	it	eq
 101bd6c:	4290      	cmpeq	r0, r2
 101bd6e:	d223      	bcs.n	101bdb8 <LP_APP_vRecorder_task+0x10c>
				summ_integer[i] += summ_remaind[i] / LP_SAMPLES_PER_HOUR;
 101bd70:	f89d 300f 	ldrb.w	r3, [sp, #15]
 101bd74:	f89d 700f 	ldrb.w	r7, [sp, #15]
 101bd78:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 101bd7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 101bd80:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 101bd84:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 101bd88:	2300      	movs	r3, #0
 101bd8a:	47a8      	blx	r5
 101bd8c:	e9d7 2300 	ldrd	r2, r3, [r7]
				summ_remaind[i]  = summ_remaind[i] % LP_SAMPLES_PER_HOUR;
 101bd90:	f89d e00f 	ldrb.w	lr, [sp, #15]
 101bd94:	f89d c00f 	ldrb.w	ip, [sp, #15]
				summ_integer[i] += summ_remaind[i] / LP_SAMPLES_PER_HOUR;
 101bd98:	1880      	adds	r0, r0, r2
 101bd9a:	4159      	adcs	r1, r3
				summ_remaind[i]  = summ_remaind[i] % LP_SAMPLES_PER_HOUR;
 101bd9c:	eb0b 0ccc 	add.w	ip, fp, ip, lsl #3
				summ_integer[i] += summ_remaind[i] / LP_SAMPLES_PER_HOUR;
 101bda0:	e9c7 0100 	strd	r0, r1, [r7]
				summ_remaind[i]  = summ_remaind[i] % LP_SAMPLES_PER_HOUR;
 101bda4:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 101bda8:	e9dc 0100 	ldrd	r0, r1, [ip]
 101bdac:	2300      	movs	r3, #0
 101bdae:	eb0b 07ce 	add.w	r7, fp, lr, lsl #3
 101bdb2:	47a8      	blx	r5
 101bdb4:	e9c7 2300 	strd	r2, r3, [r7]
			}
			
			/* Convert accumulate values in pulse registers */
			if ( ( (summ_integer[i] * (uint64_t)st_62.divisor_set1[i]) / (uint64_t)st_62.scalars_set1[i] ) > 0 ) {
 101bdb8:	f89d 300f 	ldrb.w	r3, [sp, #15]
 101bdbc:	f89d 100f 	ldrb.w	r1, [sp, #15]
 101bdc0:	f89d 200f 	ldrb.w	r2, [sp, #15]
 101bdc4:	b2db      	uxtb	r3, r3
 101bdc6:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
 101bdca:	f854 0033 	ldr.w	r0, [r4, r3, lsl #3]
 101bdce:	687f      	ldr	r7, [r7, #4]
 101bdd0:	eb06 0341 	add.w	r3, r6, r1, lsl #1
 101bdd4:	f8b3 8016 	ldrh.w	r8, [r3, #22]
 101bdd8:	eb06 0342 	add.w	r3, r6, r2, lsl #1
 101bddc:	fba0 0108 	umull	r0, r1, r0, r8
 101bde0:	89da      	ldrh	r2, [r3, #14]
 101bde2:	fb07 1108 	mla	r1, r7, r8, r1
 101bde6:	2300      	movs	r3, #0
 101bde8:	47a8      	blx	r5
 101bdea:	ea50 0301 	orrs.w	r3, r0, r1
 101bdee:	d040      	beq.n	101be72 <LP_APP_vRecorder_task+0x1c6>

				lp.pulse_recorder[i] += (summ_integer[i] * (uint64_t)st_62.divisor_set1[i]) / (uint64_t)st_62.scalars_set1[i];
 101bdf0:	f89d 300f 	ldrb.w	r3, [sp, #15]
 101bdf4:	f89d 100f 	ldrb.w	r1, [sp, #15]
 101bdf8:	f89d 200f 	ldrb.w	r2, [sp, #15]
 101bdfc:	f89d 700f 	ldrb.w	r7, [sp, #15]
 101be00:	b2db      	uxtb	r3, r3
 101be02:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 101be06:	f854 0033 	ldr.w	r0, [r4, r3, lsl #3]
 101be0a:	f8de e004 	ldr.w	lr, [lr, #4]
 101be0e:	eb06 0341 	add.w	r3, r6, r1, lsl #1
 101be12:	3712      	adds	r7, #18
 101be14:	f8b3 8016 	ldrh.w	r8, [r3, #22]
 101be18:	eb06 0342 	add.w	r3, r6, r2, lsl #1
 101be1c:	fba0 0108 	umull	r0, r1, r0, r8
 101be20:	fb0e 1108 	mla	r1, lr, r8, r1
 101be24:	89da      	ldrh	r2, [r3, #14]
 101be26:	2300      	movs	r3, #0
 101be28:	47a8      	blx	r5
 101be2a:	eb0a 0787 	add.w	r7, sl, r7, lsl #2
				summ_integer[i]	      = (summ_integer[i] * (uint64_t)st_62.divisor_set1[i]) % (uint64_t)st_62.scalars_set1[i];
 101be2e:	f89d e00f 	ldrb.w	lr, [sp, #15]
 101be32:	f89d 100f 	ldrb.w	r1, [sp, #15]
 101be36:	f89d 300f 	ldrb.w	r3, [sp, #15]
				lp.pulse_recorder[i] += (summ_integer[i] * (uint64_t)st_62.divisor_set1[i]) / (uint64_t)st_62.scalars_set1[i];
 101be3a:	687a      	ldr	r2, [r7, #4]
				summ_integer[i]	      = (summ_integer[i] * (uint64_t)st_62.divisor_set1[i]) % (uint64_t)st_62.scalars_set1[i];
 101be3c:	f89d 800f 	ldrb.w	r8, [sp, #15]
 101be40:	b2c9      	uxtb	r1, r1
 101be42:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 101be46:	eb04 0cc1 	add.w	ip, r4, r1, lsl #3
				lp.pulse_recorder[i] += (summ_integer[i] * (uint64_t)st_62.divisor_set1[i]) / (uint64_t)st_62.scalars_set1[i];
 101be4a:	4410      	add	r0, r2
				summ_integer[i]	      = (summ_integer[i] * (uint64_t)st_62.divisor_set1[i]) % (uint64_t)st_62.scalars_set1[i];
 101be4c:	f854 1031 	ldr.w	r1, [r4, r1, lsl #3]
 101be50:	8ada      	ldrh	r2, [r3, #22]
 101be52:	f8dc c004 	ldr.w	ip, [ip, #4]
				lp.pulse_recorder[i] += (summ_integer[i] * (uint64_t)st_62.divisor_set1[i]) / (uint64_t)st_62.scalars_set1[i];
 101be56:	6078      	str	r0, [r7, #4]
				summ_integer[i]	      = (summ_integer[i] * (uint64_t)st_62.divisor_set1[i]) % (uint64_t)st_62.scalars_set1[i];
 101be58:	eb06 0348 	add.w	r3, r6, r8, lsl #1
 101be5c:	fba1 0102 	umull	r0, r1, r1, r2
 101be60:	fb0c 1102 	mla	r1, ip, r2, r1
 101be64:	89da      	ldrh	r2, [r3, #14]
 101be66:	2300      	movs	r3, #0
 101be68:	eb04 07ce 	add.w	r7, r4, lr, lsl #3
 101be6c:	47a8      	blx	r5
 101be6e:	e9c7 2300 	strd	r2, r3, [r7]
			}

			lp.curr_data.pulse_register[i] = lp.pulse_recorder[i] / 1000;
 101be72:	f89d 100f 	ldrb.w	r1, [sp, #15]
 101be76:	f89d 300f 	ldrb.w	r3, [sp, #15]
		for ( i = 0; i < st_61.nbr_chns_set1; i++) {
 101be7a:	f89d 200f 	ldrb.w	r2, [sp, #15]
 101be7e:	483b      	ldr	r0, [pc, #236]	; (101bf6c <LP_APP_vRecorder_task+0x2c0>)
			lp.curr_data.pulse_register[i] = lp.pulse_recorder[i] / 1000;
 101be80:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
		for ( i = 0; i < st_61.nbr_chns_set1; i++) {
 101be84:	3201      	adds	r2, #1
 101be86:	b2d2      	uxtb	r2, r2
 101be88:	f88d 200f 	strb.w	r2, [sp, #15]
			lp.curr_data.pulse_register[i] = lp.pulse_recorder[i] / 1000;
 101be8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
		for ( i = 0; i < st_61.nbr_chns_set1; i++) {
 101be8e:	7b00      	ldrb	r0, [r0, #12]
			lp.curr_data.pulse_register[i] = lp.pulse_recorder[i] / 1000;
 101be90:	eb0a 0241 	add.w	r2, sl, r1, lsl #1
 101be94:	493c      	ldr	r1, [pc, #240]	; (101bf88 <LP_APP_vRecorder_task+0x2dc>)
 101be96:	fba1 1303 	umull	r1, r3, r1, r3
		for ( i = 0; i < st_61.nbr_chns_set1; i++) {
 101be9a:	f89d 100f 	ldrb.w	r1, [sp, #15]
			lp.curr_data.pulse_register[i] = lp.pulse_recorder[i] / 1000;
 101be9e:	099b      	lsrs	r3, r3, #6
		for ( i = 0; i < st_61.nbr_chns_set1; i++) {
 101bea0:	4288      	cmp	r0, r1
			lp.curr_data.pulse_register[i] = lp.pulse_recorder[i] / 1000;
 101bea2:	8093      	strh	r3, [r2, #4]
		for ( i = 0; i < st_61.nbr_chns_set1; i++) {
 101bea4:	f63f af27 	bhi.w	101bcf6 <LP_APP_vRecorder_task+0x4a>
		}
		
		/*===========================================================================*\
		 * Interval period expired 
		\*===========================================================================*/
		if ( rtc.utc_timestamp >= lp.curr_data.int_end_time ) {
 101bea8:	4d38      	ldr	r5, [pc, #224]	; (101bf8c <LP_APP_vRecorder_task+0x2e0>)
 101beaa:	f8da c010 	ldr.w	ip, [sl, #16]
 101beae:	f8d5 e004 	ldr.w	lr, [r5, #4]
 101beb2:	45e6      	cmp	lr, ip
 101beb4:	d37c      	bcc.n	101bfb0 <LP_APP_vRecorder_task+0x304>
			
			for ( i = 0; i < st_61.nbr_chns_set1; i++) {
 101beb6:	2300      	movs	r3, #0
 101beb8:	4a2c      	ldr	r2, [pc, #176]	; (101bf6c <LP_APP_vRecorder_task+0x2c0>)
 101beba:	f88d 300f 	strb.w	r3, [sp, #15]
 101bebe:	f89d 300f 	ldrb.w	r3, [sp, #15]
 101bec2:	7b17      	ldrb	r7, [r2, #12]
 101bec4:	4c32      	ldr	r4, [pc, #200]	; (101bf90 <LP_APP_vRecorder_task+0x2e4>)
 101bec6:	42bb      	cmp	r3, r7
 101bec8:	f080 80b1 	bcs.w	101c02e <LP_APP_vRecorder_task+0x382>

				/* Detect numeric overflow */
				if ( (lp.pulse_recorder[i] / 1000) > LP_MAX_PULSE_REGISTER_VALUE ) {
 101becc:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 101bf9c <LP_APP_vRecorder_task+0x2f0>
					
					LP_APP_vChange_extended_int_channel_status(&lp.curr_data.extended_int_status[0], (uint8_t)i, (uint8_t)CHANNEL_STATUS_1);
					lp.curr_data.pulse_register[i] = LP_MAX_PULSE_REGISTER_VALUE;
 101bed0:	9501      	str	r5, [sp, #4]
					lp.pulse_recorder[i] -= LP_MAX_PULSE_REGISTER_VALUE;
				}
				else {
					lp.pulse_recorder[i] %= 1000;
 101bed2:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 * \retval void
 ******************************************************************************
 */
void LP_APP_vChange_extended_int_channel_status(uint8_t* extended_int_status_array, uint8_t channel_number,  uint8_t channel_status) {
	
	extended_int_status_array[(channel_number + 1)/2] = ( extended_int_status_array[(channel_number + 1)/2] & ( 0xF << (4 * ( (channel_number + 1) % 2) ) ) ) 
 101bed6:	f04f 0c0f 	mov.w	ip, #15
					lp.curr_data.pulse_register[i] = LP_MAX_PULSE_REGISTER_VALUE;
 101beda:	f64f 79ff 	movw	r9, #65535	; 0xffff
 101bede:	e030      	b.n	101bf42 <LP_APP_vRecorder_task+0x296>
					LP_APP_vChange_extended_int_channel_status(&lp.curr_data.extended_int_status[0], (uint8_t)i, (uint8_t)CHANNEL_STATUS_1);
 101bee0:	f89d 200f 	ldrb.w	r2, [sp, #15]
					lp.curr_data.pulse_register[i] = LP_MAX_PULSE_REGISTER_VALUE;
 101bee4:	f89d 000f 	ldrb.w	r0, [sp, #15]
					lp.pulse_recorder[i] -= LP_MAX_PULSE_REGISTER_VALUE;
 101bee8:	f89d 100f 	ldrb.w	r1, [sp, #15]
					LP_APP_vChange_extended_int_channel_status(&lp.curr_data.extended_int_status[0], (uint8_t)i, (uint8_t)CHANNEL_STATUS_1);
 101beec:	b2d2      	uxtb	r2, r2
	extended_int_status_array[(channel_number + 1)/2] = ( extended_int_status_array[(channel_number + 1)/2] & ( 0xF << (4 * ( (channel_number + 1) % 2) ) ) ) 
 101beee:	1c53      	adds	r3, r2, #1
 101bef0:	105e      	asrs	r6, r3, #1
 101bef2:	f003 0301 	and.w	r3, r3, #1
 101bef6:	f814 b006 	ldrb.w	fp, [r4, r6]
													  | ( channel_status << (4 * (channel_number % 2) ) );
 101befa:	f002 0201 	and.w	r2, r2, #1
	extended_int_status_array[(channel_number + 1)/2] = ( extended_int_status_array[(channel_number + 1)/2] & ( 0xF << (4 * ( (channel_number + 1) % 2) ) ) ) 
 101befe:	009b      	lsls	r3, r3, #2
													  | ( channel_status << (4 * (channel_number % 2) ) );
 101bf00:	0092      	lsls	r2, r2, #2
	extended_int_status_array[(channel_number + 1)/2] = ( extended_int_status_array[(channel_number + 1)/2] & ( 0xF << (4 * ( (channel_number + 1) % 2) ) ) ) 
 101bf02:	fa0c f303 	lsl.w	r3, ip, r3
													  | ( channel_status << (4 * (channel_number % 2) ) );
 101bf06:	2501      	movs	r5, #1
	extended_int_status_array[(channel_number + 1)/2] = ( extended_int_status_array[(channel_number + 1)/2] & ( 0xF << (4 * ( (channel_number + 1) % 2) ) ) ) 
 101bf08:	ea03 030b 	and.w	r3, r3, fp
													  | ( channel_status << (4 * (channel_number % 2) ) );
 101bf0c:	fa05 f202 	lsl.w	r2, r5, r2
 101bf10:	431a      	orrs	r2, r3
					lp.pulse_recorder[i] -= LP_MAX_PULSE_REGISTER_VALUE;
 101bf12:	f101 0312 	add.w	r3, r1, #18
	extended_int_status_array[(channel_number + 1)/2] = ( extended_int_status_array[(channel_number + 1)/2] & ( 0xF << (4 * ( (channel_number + 1) % 2) ) ) ) 
 101bf16:	55a2      	strb	r2, [r4, r6]
					lp.pulse_recorder[i] -= LP_MAX_PULSE_REGISTER_VALUE;
 101bf18:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
					lp.curr_data.pulse_register[i] = LP_MAX_PULSE_REGISTER_VALUE;
 101bf1c:	eb0a 0040 	add.w	r0, sl, r0, lsl #1
					lp.pulse_recorder[i] -= LP_MAX_PULSE_REGISTER_VALUE;
 101bf20:	685a      	ldr	r2, [r3, #4]
					lp.curr_data.pulse_register[i] = LP_MAX_PULSE_REGISTER_VALUE;
 101bf22:	f8a0 9004 	strh.w	r9, [r0, #4]
					lp.pulse_recorder[i] -= LP_MAX_PULSE_REGISTER_VALUE;
 101bf26:	f5a2 427f 	sub.w	r2, r2, #65280	; 0xff00
 101bf2a:	3aff      	subs	r2, #255	; 0xff
 101bf2c:	605a      	str	r2, [r3, #4]
			for ( i = 0; i < st_61.nbr_chns_set1; i++) {
 101bf2e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 101bf32:	3301      	adds	r3, #1
 101bf34:	b2db      	uxtb	r3, r3
 101bf36:	f88d 300f 	strb.w	r3, [sp, #15]
 101bf3a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 101bf3e:	42bb      	cmp	r3, r7
 101bf40:	d270      	bcs.n	101c024 <LP_APP_vRecorder_task+0x378>
				if ( (lp.pulse_recorder[i] / 1000) > LP_MAX_PULSE_REGISTER_VALUE ) {
 101bf42:	f89d 300f 	ldrb.w	r3, [sp, #15]
 101bf46:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 101bf4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 101bf4c:	4573      	cmp	r3, lr
 101bf4e:	d8c7      	bhi.n	101bee0 <LP_APP_vRecorder_task+0x234>
					lp.pulse_recorder[i] %= 1000;
 101bf50:	f89d 300f 	ldrb.w	r3, [sp, #15]
 101bf54:	4a0c      	ldr	r2, [pc, #48]	; (101bf88 <LP_APP_vRecorder_task+0x2dc>)
 101bf56:	3312      	adds	r3, #18
 101bf58:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 101bf5c:	6859      	ldr	r1, [r3, #4]
 101bf5e:	fba2 0201 	umull	r0, r2, r2, r1
 101bf62:	0992      	lsrs	r2, r2, #6
 101bf64:	fb08 1212 	mls	r2, r8, r2, r1
 101bf68:	605a      	str	r2, [r3, #4]
 101bf6a:	e7e0      	b.n	101bf2e <LP_APP_vRecorder_task+0x282>
 101bf6c:	200166b8 	.word	0x200166b8
 101bf70:	20016744 	.word	0x20016744
 101bf74:	20016724 	.word	0x20016724
 101bf78:	20000c00 	.word	0x20000c00
 101bf7c:	010305f5 	.word	0x010305f5
 101bf80:	01028ca5 	.word	0x01028ca5
 101bf84:	01030659 	.word	0x01030659
 101bf88:	10624dd3 	.word	0x10624dd3
 101bf8c:	20017160 	.word	0x20017160
 101bf90:	200166e4 	.word	0x200166e4
 101bf94:	200166c8 	.word	0x200166c8
 101bf98:	20000c20 	.word	0x20000c20
 101bf9c:	03e7ffff 	.word	0x03e7ffff
		st_63.lp_set_status_flags &= ~ACTIVE_MODE_FLAG_bm;
 101bfa0:	4b46      	ldr	r3, [pc, #280]	; (101c0bc <LP_APP_vRecorder_task+0x410>)
 101bfa2:	9300      	str	r3, [sp, #0]
 101bfa4:	4619      	mov	r1, r3
 101bfa6:	781b      	ldrb	r3, [r3, #0]
 101bfa8:	4d45      	ldr	r5, [pc, #276]	; (101c0c0 <LP_APP_vRecorder_task+0x414>)
 101bfaa:	f023 0320 	bic.w	r3, r3, #32
 101bfae:	700b      	strb	r3, [r1, #0]
	if ( (GRAL_APP_ucGet_st_3_ed_mode() & TEST_MODE_FLAG_bm) == TEST_MODE_FLAG_bm ) {
 101bfb0:	4b44      	ldr	r3, [pc, #272]	; (101c0c4 <LP_APP_vRecorder_task+0x418>)
 101bfb2:	4798      	blx	r3
 101bfb4:	0783      	lsls	r3, r0, #30
 101bfb6:	d52f      	bpl.n	101c018 <LP_APP_vRecorder_task+0x36c>
		st_63.lp_set_status_flags |= TEST_MODE_bm;
 101bfb8:	9900      	ldr	r1, [sp, #0]
		for ( uint16_t i = 0; i < st_61.nbr_chns_set1; i++ ) {
 101bfba:	4a43      	ldr	r2, [pc, #268]	; (101c0c8 <LP_APP_vRecorder_task+0x41c>)
		st_63.lp_set_status_flags |= TEST_MODE_bm;
 101bfbc:	780b      	ldrb	r3, [r1, #0]
		for ( uint16_t i = 0; i < st_61.nbr_chns_set1; i++ ) {
 101bfbe:	7b17      	ldrb	r7, [r2, #12]
		st_63.lp_set_status_flags |= TEST_MODE_bm;
 101bfc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 101bfc4:	700b      	strb	r3, [r1, #0]
		for ( uint16_t i = 0; i < st_61.nbr_chns_set1; i++ ) {
 101bfc6:	b1cf      	cbz	r7, 101bffc <LP_APP_vRecorder_task+0x350>
 101bfc8:	4c40      	ldr	r4, [pc, #256]	; (101c0cc <LP_APP_vRecorder_task+0x420>)
 101bfca:	2000      	movs	r0, #0
	extended_int_status_array[(channel_number + 1)/2] = ( extended_int_status_array[(channel_number + 1)/2] & ( 0xF << (4 * ( (channel_number + 1) % 2) ) ) ) 
 101bfcc:	f04f 0c0f 	mov.w	ip, #15
													  | ( channel_status << (4 * (channel_number % 2) ) );
 101bfd0:	f04f 0e05 	mov.w	lr, #5
			LP_APP_vChange_extended_int_channel_status(&lp.curr_data.extended_int_status[0], (uint8_t)i, (uint8_t)CHANNEL_STATUS_5);
 101bfd4:	b2c2      	uxtb	r2, r0
 101bfd6:	3001      	adds	r0, #1
	extended_int_status_array[(channel_number + 1)/2] = ( extended_int_status_array[(channel_number + 1)/2] & ( 0xF << (4 * ( (channel_number + 1) % 2) ) ) ) 
 101bfd8:	1041      	asrs	r1, r0, #1
 101bfda:	f000 0301 	and.w	r3, r0, #1
 101bfde:	5c66      	ldrb	r6, [r4, r1]
													  | ( channel_status << (4 * (channel_number % 2) ) );
 101bfe0:	f002 0201 	and.w	r2, r2, #1
	extended_int_status_array[(channel_number + 1)/2] = ( extended_int_status_array[(channel_number + 1)/2] & ( 0xF << (4 * ( (channel_number + 1) % 2) ) ) ) 
 101bfe4:	009b      	lsls	r3, r3, #2
													  | ( channel_status << (4 * (channel_number % 2) ) );
 101bfe6:	0092      	lsls	r2, r2, #2
	extended_int_status_array[(channel_number + 1)/2] = ( extended_int_status_array[(channel_number + 1)/2] & ( 0xF << (4 * ( (channel_number + 1) % 2) ) ) ) 
 101bfe8:	fa0c f303 	lsl.w	r3, ip, r3
													  | ( channel_status << (4 * (channel_number % 2) ) );
 101bfec:	fa0e f202 	lsl.w	r2, lr, r2
	extended_int_status_array[(channel_number + 1)/2] = ( extended_int_status_array[(channel_number + 1)/2] & ( 0xF << (4 * ( (channel_number + 1) % 2) ) ) ) 
 101bff0:	4033      	ands	r3, r6
													  | ( channel_status << (4 * (channel_number % 2) ) );
 101bff2:	4313      	orrs	r3, r2
 101bff4:	b282      	uxth	r2, r0
		for ( uint16_t i = 0; i < st_61.nbr_chns_set1; i++ ) {
 101bff6:	4297      	cmp	r7, r2
	extended_int_status_array[(channel_number + 1)/2] = ( extended_int_status_array[(channel_number + 1)/2] & ( 0xF << (4 * ( (channel_number + 1) % 2) ) ) ) 
 101bff8:	5463      	strb	r3, [r4, r1]
		for ( uint16_t i = 0; i < st_61.nbr_chns_set1; i++ ) {
 101bffa:	d8eb      	bhi.n	101bfd4 <LP_APP_vRecorder_task+0x328>
	lp.curr_data.extended_int_status[0] = (rtc.is_dst == 1) ? (lp.curr_data.extended_int_status[0] |  COMMON_DST_FLAG_bm)
 101bffc:	7d6b      	ldrb	r3, [r5, #21]
 101bffe:	2b01      	cmp	r3, #1
 101c000:	f89a 301c 	ldrb.w	r3, [sl, #28]
 101c004:	bf0c      	ite	eq
 101c006:	f043 0310 	orreq.w	r3, r3, #16
 101c00a:	f003 03ef 	andne.w	r3, r3, #239	; 0xef
 101c00e:	f88a 301c 	strb.w	r3, [sl, #28]
}
 101c012:	b007      	add	sp, #28
 101c014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		st_63.lp_set_status_flags &= ~TEST_MODE_bm;
 101c018:	9a00      	ldr	r2, [sp, #0]
 101c01a:	7813      	ldrb	r3, [r2, #0]
 101c01c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 101c020:	7013      	strb	r3, [r2, #0]
 101c022:	e7eb      	b.n	101bffc <LP_APP_vRecorder_task+0x350>
 101c024:	9d01      	ldr	r5, [sp, #4]
 101c026:	f8da c010 	ldr.w	ip, [sl, #16]
 101c02a:	f8d5 e004 	ldr.w	lr, [r5, #4]
			lp.last_data = lp.curr_data;
 101c02e:	4e28      	ldr	r6, [pc, #160]	; (101c0d0 <LP_APP_vRecorder_task+0x424>)
			lp.curr_data.int_number++;
 101c030:	f8ba 800e 	ldrh.w	r8, [sl, #14]
			lp.last_data = lp.curr_data;
 101c034:	f1a6 0724 	sub.w	r7, r6, #36	; 0x24
 101c038:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 101c03a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 101c03c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 101c03e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
			lp.curr_data.int_number = ( lp.curr_data.int_number >= st_61.nbr_blk_ints_set1 ) ? 0 : lp.curr_data.int_number;
 101c040:	4b21      	ldr	r3, [pc, #132]	; (101c0c8 <LP_APP_vRecorder_task+0x41c>)
			if ( rtc.utc_timestamp >= lp.curr_data.blk_end_time ) {
 101c042:	f8da 1014 	ldr.w	r1, [sl, #20]
			lp.curr_data.int_number = ( lp.curr_data.int_number >= st_61.nbr_blk_ints_set1 ) ? 0 : lp.curr_data.int_number;
 101c046:	8958      	ldrh	r0, [r3, #10]
			lp.curr_data.int_end_time += st_61.max_int_time_set1 * SECONDS_PER_MINUTE;
 101c048:	7b5a      	ldrb	r2, [r3, #13]
			lp.last_data = lp.curr_data;
 101c04a:	683b      	ldr	r3, [r7, #0]
 101c04c:	6033      	str	r3, [r6, #0]
			lp.curr_data.int_number++;
 101c04e:	f108 0801 	add.w	r8, r8, #1
 101c052:	fa1f f388 	uxth.w	r3, r8
			lp.curr_data.int_end_time += st_61.max_int_time_set1 * SECONDS_PER_MINUTE;
 101c056:	273c      	movs	r7, #60	; 0x3c
			lp.curr_data.int_number = ( lp.curr_data.int_number >= st_61.nbr_blk_ints_set1 ) ? 0 : lp.curr_data.int_number;
 101c058:	4283      	cmp	r3, r0
 101c05a:	bf28      	it	cs
 101c05c:	2300      	movcs	r3, #0
			lp.curr_data.int_end_time += st_61.max_int_time_set1 * SECONDS_PER_MINUTE;
 101c05e:	fb17 cc02 	smlabb	ip, r7, r2, ip
			lp.eoi = true;
 101c062:	f04f 0801 	mov.w	r8, #1
			lp.curr_data.int_elapsed_time = 0;
 101c066:	2700      	movs	r7, #0
			if ( rtc.utc_timestamp >= lp.curr_data.blk_end_time ) {
 101c068:	4571      	cmp	r1, lr
			memset( &lp.curr_data.extended_int_status, 0, sizeof(lp.curr_data.extended_int_status) );
 101c06a:	f8aa 701c 	strh.w	r7, [sl, #28]
			lp.curr_data.int_number = ( lp.curr_data.int_number >= st_61.nbr_blk_ints_set1 ) ? 0 : lp.curr_data.int_number;
 101c06e:	f8aa 300e 	strh.w	r3, [sl, #14]
			lp.curr_data.int_end_time += st_61.max_int_time_set1 * SECONDS_PER_MINUTE;
 101c072:	f8ca c010 	str.w	ip, [sl, #16]
			lp.curr_data.int_elapsed_time = 0;
 101c076:	f8ca 7018 	str.w	r7, [sl, #24]
			memset( &lp.curr_data.extended_int_status, 0, sizeof(lp.curr_data.extended_int_status) );
 101c07a:	70a7      	strb	r7, [r4, #2]
			lp.eoi = true;
 101c07c:	f88a 8001 	strb.w	r8, [sl, #1]
			if ( rtc.utc_timestamp >= lp.curr_data.blk_end_time ) {
 101c080:	d896      	bhi.n	101bfb0 <LP_APP_vRecorder_task+0x304>
				lp.curr_data.blk_number++;
 101c082:	f8ba 400c 	ldrh.w	r4, [sl, #12]
				lp.curr_data.blk_number = ( lp.curr_data.blk_number >= st_61.nbr_blks_set1 ) ? 0 : lp.curr_data.blk_number;
 101c086:	4b10      	ldr	r3, [pc, #64]	; (101c0c8 <LP_APP_vRecorder_task+0x41c>)
				memset( &lp.last_data.block_simple_flags, 0, sizeof(lp.curr_data.block_simple_flags) );
 101c088:	f826 7c01 	strh.w	r7, [r6, #-1]
				lp.curr_data.blk_end_time += st_61.nbr_blk_ints_set1 * st_61.max_int_time_set1 * SECONDS_PER_MINUTE;
 101c08c:	fb02 f200 	mul.w	r2, r2, r0
				lp.curr_data.blk_number = ( lp.curr_data.blk_number >= st_61.nbr_blks_set1 ) ? 0 : lp.curr_data.blk_number;
 101c090:	891b      	ldrh	r3, [r3, #8]
				lp.curr_data.int_number = 0;
 101c092:	f8aa 700e 	strh.w	r7, [sl, #14]
				lp.curr_data.blk_number++;
 101c096:	eb04 0008 	add.w	r0, r4, r8
				lp.curr_data.blk_end_time += st_61.nbr_blk_ints_set1 * st_61.max_int_time_set1 * SECONDS_PER_MINUTE;
 101c09a:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
				lp.curr_data.blk_number++;
 101c09e:	b280      	uxth	r0, r0
				lp.curr_data.blk_end_time += st_61.nbr_blk_ints_set1 * st_61.max_int_time_set1 * SECONDS_PER_MINUTE;
 101c0a0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
				lp.curr_data.blk_number = ( lp.curr_data.blk_number >= st_61.nbr_blks_set1 ) ? 0 : lp.curr_data.blk_number;
 101c0a4:	4283      	cmp	r3, r0
 101c0a6:	bf98      	it	ls
 101c0a8:	4638      	movls	r0, r7
				lp.curr_data.blk_end_time += st_61.nbr_blk_ints_set1 * st_61.max_int_time_set1 * SECONDS_PER_MINUTE;
 101c0aa:	f8ca 2014 	str.w	r2, [sl, #20]
				memset( &lp.last_data.block_simple_flags, 0, sizeof(lp.curr_data.block_simple_flags) );
 101c0ae:	f8ca 7043 	str.w	r7, [sl, #67]	; 0x43
				lp.eob = true;
 101c0b2:	f88a 8002 	strb.w	r8, [sl, #2]
				lp.curr_data.blk_number = ( lp.curr_data.blk_number >= st_61.nbr_blks_set1 ) ? 0 : lp.curr_data.blk_number;
 101c0b6:	f8aa 000c 	strh.w	r0, [sl, #12]
 101c0ba:	e779      	b.n	101bfb0 <LP_APP_vRecorder_task+0x304>
 101c0bc:	20016744 	.word	0x20016744
 101c0c0:	20017160 	.word	0x20017160
 101c0c4:	0101a149 	.word	0x0101a149
 101c0c8:	200166b8 	.word	0x200166b8
 101c0cc:	200166e4 	.word	0x200166e4
 101c0d0:	200166f0 	.word	0x200166f0

0101c0d4 <LP_APP_vStore_data_task>:
 * 
 * \param void
 * \retval void
 ******************************************************************************
 */
void LP_APP_vStore_data_task(void) {
 101c0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	if ( (!meter.system_state.changing_configuration) && lp.eoi ) {
 101c0d8:	4ba5      	ldr	r3, [pc, #660]	; (101c370 <LP_APP_vStore_data_task+0x29c>)
 101c0da:	4ca6      	ldr	r4, [pc, #664]	; (101c374 <LP_APP_vStore_data_task+0x2a0>)
 101c0dc:	f893 0022 	ldrb.w	r0, [r3, #34]	; 0x22
void LP_APP_vStore_data_task(void) {
 101c0e0:	b085      	sub	sp, #20
	if ( (!meter.system_state.changing_configuration) && lp.eoi ) {
 101c0e2:	2800      	cmp	r0, #0
 101c0e4:	f040 810b 	bne.w	101c2fe <LP_APP_vStore_data_task+0x22a>
 101c0e8:	7863      	ldrb	r3, [r4, #1]
 101c0ea:	2b00      	cmp	r3, #0
 101c0ec:	f000 8107 	beq.w	101c2fe <LP_APP_vStore_data_task+0x22a>
		
		uint32_t eeprom_addr;

		/* Save Interval Pulse Register */
		for ( uint8_t i = 0; i < st_61.nbr_chns_set1; i++ ) {
 101c0f0:	4da1      	ldr	r5, [pc, #644]	; (101c378 <LP_APP_vStore_data_task+0x2a4>)
 101c0f2:	7b2b      	ldrb	r3, [r5, #12]
 101c0f4:	2b00      	cmp	r3, #0
 101c0f6:	f000 8130 	beq.w	101c35a <LP_APP_vStore_data_task+0x286>
 101c0fa:	4ea0      	ldr	r6, [pc, #640]	; (101c37c <LP_APP_vStore_data_task+0x2a8>)
 101c0fc:	4fa0      	ldr	r7, [pc, #640]	; (101c380 <LP_APP_vStore_data_task+0x2ac>)
 101c0fe:	f104 0840 	add.w	r8, r4, #64	; 0x40
	extended_int_status_array[(channel_number + 1)/2] = ( extended_int_status_array[(channel_number + 1)/2] & ( 0xF << (4 * ( (channel_number + 1) % 2) ) ) ) 
 101c102:	f04f 090f 	mov.w	r9, #15
													  | ( channel_status << (4 * (channel_number % 2) ) );
 101c106:	469e      	mov	lr, r3
 101c108:	e022      	b.n	101c150 <LP_APP_vStore_data_task+0x7c>
	extended_int_status_array[(channel_number + 1)/2] = ( extended_int_status_array[(channel_number + 1)/2] & ( 0xF << (4 * ( (channel_number + 1) % 2) ) ) ) 
 101c10a:	f818 300b 	ldrb.w	r3, [r8, fp]
 101c10e:	9a00      	ldr	r2, [sp, #0]
 101c110:	401a      	ands	r2, r3
													  | ( channel_status << (4 * (channel_number % 2) ) );
 101c112:	ea42 0c0c 	orr.w	ip, r2, ip
	extended_int_status_array[(channel_number + 1)/2] = ( extended_int_status_array[(channel_number + 1)/2] & ( 0xF << (4 * ( (channel_number + 1) % 2) ) ) ) 
 101c116:	f808 c00b 	strb.w	ip, [r8, fp]
						
						LP_APP_vChange_extended_int_channel_status(&lp.last_data.extended_int_status[0], (uint8_t)i, (uint8_t)CHANNEL_STATUS_3);		// Long Interval
					}
				}

			eeprom_addr = st_64_addr.int_data + (lp.last_data.blk_number * MAX_NBR_BLK_INTS_SET1 * st_61.nbr_chns_set1 * 2) + (lp.last_data.int_number * st_61.nbr_chns_set1 * 2) + (i * 2);
 101c11a:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 101c11c:	f8b4 c032 	ldrh.w	ip, [r4, #50]	; 0x32
 101c120:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 101c124:	0149      	lsls	r1, r1, #5
 101c126:	fb0e f101 	mul.w	r1, lr, r1
 101c12a:	fb0e f30c 	mul.w	r3, lr, ip
 101c12e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 101c132:	6931      	ldr	r1, [r6, #16]
 101c134:	0040      	lsls	r0, r0, #1
 101c136:	440b      	add	r3, r1
			EEPROM_writer( eeprom_addr, &lp.last_data.pulse_register[i], 2 );
 101c138:	f100 0128 	add.w	r1, r0, #40	; 0x28
 101c13c:	2202      	movs	r2, #2
 101c13e:	4418      	add	r0, r3
 101c140:	4421      	add	r1, r4
 101c142:	47b8      	blx	r7
		for ( uint8_t i = 0; i < st_61.nbr_chns_set1; i++ ) {
 101c144:	f895 e00c 	ldrb.w	lr, [r5, #12]
 101c148:	fa5f f08a 	uxtb.w	r0, sl
 101c14c:	4586      	cmp	lr, r0
 101c14e:	d939      	bls.n	101c1c4 <LP_APP_vStore_data_task+0xf0>
			if ( (lp.last_data.int_elapsed_time <= (st_61.max_int_time_set1 * SECONDS_PER_MINUTE) - 1 ) || (lp.last_data.int_elapsed_time >= (st_61.max_int_time_set1 * SECONDS_PER_MINUTE) + 1 ) ) {
 101c150:	7b6b      	ldrb	r3, [r5, #13]
 101c152:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 101c154:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 101c158:	009b      	lsls	r3, r3, #2
 101c15a:	1e5a      	subs	r2, r3, #1
 101c15c:	4291      	cmp	r1, r2
 101c15e:	f103 0c01 	add.w	ip, r3, #1
	extended_int_status_array[(channel_number + 1)/2] = ( extended_int_status_array[(channel_number + 1)/2] & ( 0xF << (4 * ( (channel_number + 1) % 2) ) ) ) 
 101c162:	f100 0a01 	add.w	sl, r0, #1
			if ( (lp.last_data.int_elapsed_time <= (st_61.max_int_time_set1 * SECONDS_PER_MINUTE) - 1 ) || (lp.last_data.int_elapsed_time >= (st_61.max_int_time_set1 * SECONDS_PER_MINUTE) + 1 ) ) {
 101c166:	d901      	bls.n	101c16c <LP_APP_vStore_data_task+0x98>
 101c168:	4561      	cmp	r1, ip
 101c16a:	d3d6      	bcc.n	101c11a <LP_APP_vStore_data_task+0x46>
	extended_int_status_array[(channel_number + 1)/2] = ( extended_int_status_array[(channel_number + 1)/2] & ( 0xF << (4 * ( (channel_number + 1) % 2) ) ) ) 
 101c16c:	f00a 0201 	and.w	r2, sl, #1
 101c170:	0092      	lsls	r2, r2, #2
 101c172:	fa09 f202 	lsl.w	r2, r9, r2
													  | ( channel_status << (4 * (channel_number % 2) ) );
 101c176:	f000 0c01 	and.w	ip, r0, #1
	extended_int_status_array[(channel_number + 1)/2] = ( extended_int_status_array[(channel_number + 1)/2] & ( 0xF << (4 * ( (channel_number + 1) % 2) ) ) ) 
 101c17a:	9200      	str	r2, [sp, #0]
													  | ( channel_status << (4 * (channel_number % 2) ) );
 101c17c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 101c180:	2202      	movs	r2, #2
					if ( lp.last_data.int_elapsed_time < (st_61.max_int_time_set1 * SECONDS_PER_MINUTE) ) {
 101c182:	4299      	cmp	r1, r3
	extended_int_status_array[(channel_number + 1)/2] = ( extended_int_status_array[(channel_number + 1)/2] & ( 0xF << (4 * ( (channel_number + 1) % 2) ) ) ) 
 101c184:	ea4f 0b6a 	mov.w	fp, sl, asr #1
													  | ( channel_status << (4 * (channel_number % 2) ) );
 101c188:	fa02 fc0c 	lsl.w	ip, r2, ip
					if ( lp.last_data.int_elapsed_time < (st_61.max_int_time_set1 * SECONDS_PER_MINUTE) ) {
 101c18c:	d3bd      	bcc.n	101c10a <LP_APP_vStore_data_task+0x36>
	extended_int_status_array[(channel_number + 1)/2] = ( extended_int_status_array[(channel_number + 1)/2] & ( 0xF << (4 * ( (channel_number + 1) % 2) ) ) ) 
 101c18e:	f100 0a01 	add.w	sl, r0, #1
 101c192:	f00a 0201 	and.w	r2, sl, #1
													  | ( channel_status << (4 * (channel_number % 2) ) );
 101c196:	f000 0301 	and.w	r3, r0, #1
	extended_int_status_array[(channel_number + 1)/2] = ( extended_int_status_array[(channel_number + 1)/2] & ( 0xF << (4 * ( (channel_number + 1) % 2) ) ) ) 
 101c19a:	ea4f 0282 	mov.w	r2, r2, lsl #2
													  | ( channel_status << (4 * (channel_number % 2) ) );
 101c19e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 101c1a2:	f04f 0c03 	mov.w	ip, #3
	extended_int_status_array[(channel_number + 1)/2] = ( extended_int_status_array[(channel_number + 1)/2] & ( 0xF << (4 * ( (channel_number + 1) % 2) ) ) ) 
 101c1a6:	ea4f 016a 	mov.w	r1, sl, asr #1
 101c1aa:	fa09 f202 	lsl.w	r2, r9, r2
													  | ( channel_status << (4 * (channel_number % 2) ) );
 101c1ae:	fa0c f303 	lsl.w	r3, ip, r3
					else if ( lp.last_data.int_elapsed_time > (st_61.max_int_time_set1 * SECONDS_PER_MINUTE) ) {
 101c1b2:	d9b2      	bls.n	101c11a <LP_APP_vStore_data_task+0x46>
	extended_int_status_array[(channel_number + 1)/2] = ( extended_int_status_array[(channel_number + 1)/2] & ( 0xF << (4 * ( (channel_number + 1) % 2) ) ) ) 
 101c1b4:	f818 c001 	ldrb.w	ip, [r8, r1]
 101c1b8:	ea02 020c 	and.w	r2, r2, ip
													  | ( channel_status << (4 * (channel_number % 2) ) );
 101c1bc:	4313      	orrs	r3, r2
	extended_int_status_array[(channel_number + 1)/2] = ( extended_int_status_array[(channel_number + 1)/2] & ( 0xF << (4 * ( (channel_number + 1) % 2) ) ) ) 
 101c1be:	f808 3001 	strb.w	r3, [r8, r1]
 101c1c2:	e7aa      	b.n	101c11a <LP_APP_vStore_data_task+0x46>
 101c1c4:	4673      	mov	r3, lr
 101c1c6:	085b      	lsrs	r3, r3, #1
 101c1c8:	3301      	adds	r3, #1
 101c1ca:	461a      	mov	r2, r3
		}

		/* Save Extended Interval Status */
		uint8_t nbr_set_bytes1 = ( (st_61.nbr_chns_set1 / 2) + 1 );
		eeprom_addr = st_64_addr.extended_int_status + (lp.last_data.blk_number * nbr_set_bytes1 * MAX_NBR_BLK_INTS_SET1) + (lp.last_data.int_number * nbr_set_bytes1);
 101c1cc:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 101c1ce:	f8b4 e032 	ldrh.w	lr, [r4, #50]	; 0x32
		EEPROM_writer( eeprom_addr, &lp.last_data.extended_int_status, nbr_set_bytes1 );
 101c1d2:	496c      	ldr	r1, [pc, #432]	; (101c384 <LP_APP_vStore_data_task+0x2b0>)
		eeprom_addr = st_64_addr.extended_int_status + (lp.last_data.blk_number * nbr_set_bytes1 * MAX_NBR_BLK_INTS_SET1) + (lp.last_data.int_number * nbr_set_bytes1);
 101c1d4:	fb03 f000 	mul.w	r0, r3, r0
 101c1d8:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 101c1dc:	68f0      	ldr	r0, [r6, #12]
 101c1de:	fb03 030e 	mla	r3, r3, lr, r0
		EEPROM_writer( eeprom_addr, &lp.last_data.extended_int_status, nbr_set_bytes1 );
 101c1e2:	eb03 100c 	add.w	r0, r3, ip, lsl #4
 101c1e6:	47b8      	blx	r7

		/* Make this interval valid */
		uint8_t octet_nbr = lp.last_data.int_number / 8;
 101c1e8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
		lp.curr_data.block_simple_flags[octet_nbr] |= 1 << ( lp.last_data.int_number - 8*octet_nbr );
		memcpy( &lp.last_data.block_simple_flags, &lp.curr_data.block_simple_flags, sizeof(lp.curr_data.block_simple_flags) );
 101c1ea:	f8df e1b0 	ldr.w	lr, [pc, #432]	; 101c39c <LP_APP_vStore_data_task+0x2c8>
		
		/* Save Block Simple Flags */
		uint8_t nbr_set_bytes2 = ( (st_61.nbr_blk_ints_set1 + 7) / 8 );
 101c1ee:	896a      	ldrh	r2, [r5, #10]
		EEPROM_writer( st_64_addr.simple_int_status + (lp.last_data.blk_number * nbr_set_bytes2), &lp.last_data.block_simple_flags, nbr_set_bytes2 );
 101c1f0:	8e20      	ldrh	r0, [r4, #48]	; 0x30
		uint8_t octet_nbr = lp.last_data.int_number / 8;
 101c1f2:	f3c3 01c7 	ubfx	r1, r3, #3, #8
		lp.curr_data.block_simple_flags[octet_nbr] |= 1 << ( lp.last_data.int_number - 8*octet_nbr );
 101c1f6:	eb04 0c01 	add.w	ip, r4, r1
 101c1fa:	eba3 01c1 	sub.w	r1, r3, r1, lsl #3
 101c1fe:	2301      	movs	r3, #1
 101c200:	408b      	lsls	r3, r1
 101c202:	f89c 101f 	ldrb.w	r1, [ip, #31]
 101c206:	430b      	orrs	r3, r1
		memcpy( &lp.last_data.block_simple_flags, &lp.curr_data.block_simple_flags, sizeof(lp.curr_data.block_simple_flags) );
 101c208:	4671      	mov	r1, lr
		lp.curr_data.block_simple_flags[octet_nbr] |= 1 << ( lp.last_data.int_number - 8*octet_nbr );
 101c20a:	f88c 301f 	strb.w	r3, [ip, #31]
		memcpy( &lp.last_data.block_simple_flags, &lp.curr_data.block_simple_flags, sizeof(lp.curr_data.block_simple_flags) );
 101c20e:	f851 9d24 	ldr.w	r9, [r1, #-36]!
		EEPROM_writer( st_64_addr.simple_int_status + (lp.last_data.blk_number * nbr_set_bytes2), &lp.last_data.block_simple_flags, nbr_set_bytes2 );
 101c212:	68b3      	ldr	r3, [r6, #8]
		memcpy( &lp.last_data.block_simple_flags, &lp.curr_data.block_simple_flags, sizeof(lp.curr_data.block_simple_flags) );
 101c214:	f8b1 c004 	ldrh.w	ip, [r1, #4]
 101c218:	f8c8 9003 	str.w	r9, [r8, #3]
		uint8_t nbr_set_bytes2 = ( (st_61.nbr_blk_ints_set1 + 7) / 8 );
 101c21c:	3207      	adds	r2, #7
 101c21e:	f3c2 02c7 	ubfx	r2, r2, #3, #8
		EEPROM_writer( st_64_addr.simple_int_status + (lp.last_data.blk_number * nbr_set_bytes2), &lp.last_data.block_simple_flags, nbr_set_bytes2 );
 101c222:	4671      	mov	r1, lr
		memcpy( &lp.last_data.block_simple_flags, &lp.curr_data.block_simple_flags, sizeof(lp.curr_data.block_simple_flags) );
 101c224:	f8ae c004 	strh.w	ip, [lr, #4]
		EEPROM_writer( st_64_addr.simple_int_status + (lp.last_data.blk_number * nbr_set_bytes2), &lp.last_data.block_simple_flags, nbr_set_bytes2 );
 101c228:	fb02 3000 	mla	r0, r2, r0, r3
 101c22c:	47b8      	blx	r7

		/* The block is considered valid when at least one interval is written */
		uint8_t nbr_real_valid_int = 0;
		
		for ( uint16_t i = 0; i < st_61.nbr_blk_ints_set1; i++ ) {
 101c22e:	f8b5 e00a 	ldrh.w	lr, [r5, #10]
 101c232:	f1be 0f00 	cmp.w	lr, #0
 101c236:	f000 8097 	beq.w	101c368 <LP_APP_vStore_data_task+0x294>
 101c23a:	2100      	movs	r1, #0
 101c23c:	4608      	mov	r0, r1
 101c23e:	460b      	mov	r3, r1

			octet_nbr = i / 8;
 101c240:	f3c3 03c7 	ubfx	r3, r3, #3, #8
			nbr_real_valid_int += ( ( lp.last_data.block_simple_flags[octet_nbr] >> (i - 8*octet_nbr) ) & 0x01 );
 101c244:	18e2      	adds	r2, r4, r3
 101c246:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
 101c24a:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 101c24e:	fa42 f303 	asr.w	r3, r2, r3
 101c252:	f003 0301 	and.w	r3, r3, #1
 101c256:	3101      	adds	r1, #1
 101c258:	4418      	add	r0, r3
		for ( uint16_t i = 0; i < st_61.nbr_blk_ints_set1; i++ ) {
 101c25a:	b28b      	uxth	r3, r1
 101c25c:	459e      	cmp	lr, r3
			nbr_real_valid_int += ( ( lp.last_data.block_simple_flags[octet_nbr] >> (i - 8*octet_nbr) ) & 0x01 );
 101c25e:	b2c0      	uxtb	r0, r0
		for ( uint16_t i = 0; i < st_61.nbr_blk_ints_set1; i++ ) {
 101c260:	d8ee      	bhi.n	101c240 <LP_APP_vStore_data_task+0x16c>
		}
		
		if ( nbr_real_valid_int == 1 ) {

			if (st_63.nbr_valid_blocks > 0) {
 101c262:	4b49      	ldr	r3, [pc, #292]	; (101c388 <LP_APP_vStore_data_task+0x2b4>)
 101c264:	9301      	str	r3, [sp, #4]
		if ( nbr_real_valid_int == 1 ) {
 101c266:	2801      	cmp	r0, #1
 101c268:	d10c      	bne.n	101c284 <LP_APP_vStore_data_task+0x1b0>
			if (st_63.nbr_valid_blocks > 0) {
 101c26a:	885b      	ldrh	r3, [r3, #2]
 101c26c:	2b00      	cmp	r3, #0
 101c26e:	d162      	bne.n	101c336 <LP_APP_vStore_data_task+0x262>
 101c270:	8928      	ldrh	r0, [r5, #8]
				if ( st_63.last_block_element >= st_61.nbr_blks_set1 ) {
					st_63.last_block_element = 0;
				}
			}
			
			if ( st_63.nbr_valid_blocks < st_61.nbr_blks_set1 ) {
 101c272:	4283      	cmp	r3, r0
 101c274:	d202      	bcs.n	101c27c <LP_APP_vStore_data_task+0x1a8>
				st_63.nbr_valid_blocks++;
 101c276:	9a01      	ldr	r2, [sp, #4]
 101c278:	3301      	adds	r3, #1
 101c27a:	8053      	strh	r3, [r2, #2]
			}

			st_63.nbr_unread_blocks++;
 101c27c:	9a01      	ldr	r2, [sp, #4]
 101c27e:	8993      	ldrh	r3, [r2, #12]
 101c280:	3301      	adds	r3, #1
 101c282:	8193      	strh	r3, [r2, #12]
		}
		
		/* Write Block End Time and Block End Read */
		EEPROM_writer( st_64_addr.blk_end_time + (lp.last_data.blk_number * TM_FMAT_SIZE), &lp.last_data.int_end_time, TM_FMAT_SIZE );
 101c284:	6833      	ldr	r3, [r6, #0]
 101c286:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 101c288:	4940      	ldr	r1, [pc, #256]	; (101c38c <LP_APP_vStore_data_task+0x2b8>)
 101c28a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 101c28e:	2204      	movs	r2, #4
 101c290:	47b8      	blx	r7
		
		uint64_t summation;
		for ( uint8_t i = 0; i < st_61.nbr_chns_set1; i++ ) {
 101c292:	7b2b      	ldrb	r3, [r5, #12]
 101c294:	b35b      	cbz	r3, 101c2ee <LP_APP_vStore_data_task+0x21a>
 101c296:	f8df a108 	ldr.w	sl, [pc, #264]	; 101c3a0 <LP_APP_vStore_data_task+0x2cc>
 101c29a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 101c3a4 <LP_APP_vStore_data_task+0x2d0>
			
			if ( !REGS_APP_bCopy_summation(TOTAL_DATA, (SUMMATION_ID_TYPE)(st_62.lp_sel_set1[i].lp_source_select - LP_WH_DEL_ID), &summation ) ) { summation = 0; }
			EEPROM_writer( st_64_addr.block_end_read + (lp.last_data.blk_number * NI_FMAT1_SIZE * st_61.nbr_chns_set1) + (i * NI_FMAT1_SIZE), &summation, NI_FMAT1_SIZE );
 101c29e:	9400      	str	r4, [sp, #0]
		for ( uint8_t i = 0; i < st_61.nbr_chns_set1; i++ ) {
 101c2a0:	f04f 0b00 	mov.w	fp, #0
			EEPROM_writer( st_64_addr.block_end_read + (lp.last_data.blk_number * NI_FMAT1_SIZE * st_61.nbr_chns_set1) + (i * NI_FMAT1_SIZE), &summation, NI_FMAT1_SIZE );
 101c2a4:	f04f 0806 	mov.w	r8, #6
			if ( !REGS_APP_bCopy_summation(TOTAL_DATA, (SUMMATION_ID_TYPE)(st_62.lp_sel_set1[i].lp_source_select - LP_WH_DEL_ID), &summation ) ) { summation = 0; }
 101c2a8:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 101c2ac:	4453      	add	r3, sl
 101c2ae:	aa02      	add	r2, sp, #8
 101c2b0:	7859      	ldrb	r1, [r3, #1]
 101c2b2:	2000      	movs	r0, #0
 101c2b4:	47c8      	blx	r9
			EEPROM_writer( st_64_addr.block_end_read + (lp.last_data.blk_number * NI_FMAT1_SIZE * st_61.nbr_chns_set1) + (i * NI_FMAT1_SIZE), &summation, NI_FMAT1_SIZE );
 101c2b6:	2206      	movs	r2, #6
 101c2b8:	a902      	add	r1, sp, #8
			if ( !REGS_APP_bCopy_summation(TOTAL_DATA, (SUMMATION_ID_TYPE)(st_62.lp_sel_set1[i].lp_source_select - LP_WH_DEL_ID), &summation ) ) { summation = 0; }
 101c2ba:	b918      	cbnz	r0, 101c2c4 <LP_APP_vStore_data_task+0x1f0>
 101c2bc:	2300      	movs	r3, #0
 101c2be:	2400      	movs	r4, #0
 101c2c0:	e9cd 3402 	strd	r3, r4, [sp, #8]
			EEPROM_writer( st_64_addr.block_end_read + (lp.last_data.blk_number * NI_FMAT1_SIZE * st_61.nbr_chns_set1) + (i * NI_FMAT1_SIZE), &summation, NI_FMAT1_SIZE );
 101c2c4:	9b00      	ldr	r3, [sp, #0]
 101c2c6:	f895 e00c 	ldrb.w	lr, [r5, #12]
 101c2ca:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 101c2cc:	6870      	ldr	r0, [r6, #4]
 101c2ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 101c2d2:	005b      	lsls	r3, r3, #1
 101c2d4:	fb0e 0003 	mla	r0, lr, r3, r0
 101c2d8:	fb08 000b 	mla	r0, r8, fp, r0
 101c2dc:	47b8      	blx	r7
		for ( uint8_t i = 0; i < st_61.nbr_chns_set1; i++ ) {
 101c2de:	f10b 0b01 	add.w	fp, fp, #1
 101c2e2:	7b2b      	ldrb	r3, [r5, #12]
 101c2e4:	fa5f fb8b 	uxtb.w	fp, fp
 101c2e8:	455b      	cmp	r3, fp
 101c2ea:	d8dd      	bhi.n	101c2a8 <LP_APP_vStore_data_task+0x1d4>
 101c2ec:	9c00      	ldr	r4, [sp, #0]
		}
		
		st_63.nbr_valid_int++;
 101c2ee:	9901      	ldr	r1, [sp, #4]
		LP_APP_vSt_63_write_eeprom_values(&st_63);
 101c2f0:	4a27      	ldr	r2, [pc, #156]	; (101c390 <LP_APP_vStore_data_task+0x2bc>)
		st_63.nbr_valid_int++;
 101c2f2:	89cb      	ldrh	r3, [r1, #14]
 101c2f4:	3301      	adds	r3, #1
 101c2f6:	81cb      	strh	r3, [r1, #14]
		LP_APP_vSt_63_write_eeprom_values(&st_63);
 101c2f8:	4790      	blx	r2

		lp.eoi = false;
 101c2fa:	2300      	movs	r3, #0
 101c2fc:	7063      	strb	r3, [r4, #1]
	}

	if ( lp.eob ) {
 101c2fe:	78a3      	ldrb	r3, [r4, #2]
 101c300:	b1b3      	cbz	r3, 101c330 <LP_APP_vStore_data_task+0x25c>
		
		EEPROM_writer( LP_EXPECTED_BLOCK_END_TIME_ADDR, &lp.curr_data.blk_end_time, TM_FMAT_SIZE );
 101c302:	2204      	movs	r2, #4
 101c304:	4923      	ldr	r1, [pc, #140]	; (101c394 <LP_APP_vStore_data_task+0x2c0>)
 101c306:	4e1e      	ldr	r6, [pc, #120]	; (101c380 <LP_APP_vStore_data_task+0x2ac>)
 101c308:	f249 20ca 	movw	r0, #37578	; 0x92ca
 101c30c:	47b0      	blx	r6

		memset( &lp.curr_data.block_simple_flags, 0, sizeof(lp.curr_data.block_simple_flags) );
		EEPROM_writer( st_64_addr.simple_int_status + (lp.curr_data.blk_number * ( (st_61.nbr_blk_ints_set1 + 7) / 8 )), lp.curr_data.block_simple_flags, ( (st_61.nbr_blk_ints_set1 + 7) / 8 ) );
 101c30e:	4a1a      	ldr	r2, [pc, #104]	; (101c378 <LP_APP_vStore_data_task+0x2a4>)
 101c310:	4b1a      	ldr	r3, [pc, #104]	; (101c37c <LP_APP_vStore_data_task+0x2a8>)
 101c312:	8952      	ldrh	r2, [r2, #10]
 101c314:	6899      	ldr	r1, [r3, #8]
 101c316:	89a0      	ldrh	r0, [r4, #12]
		memset( &lp.curr_data.block_simple_flags, 0, sizeof(lp.curr_data.block_simple_flags) );
 101c318:	4b1f      	ldr	r3, [pc, #124]	; (101c398 <LP_APP_vStore_data_task+0x2c4>)
		EEPROM_writer( st_64_addr.simple_int_status + (lp.curr_data.blk_number * ( (st_61.nbr_blk_ints_set1 + 7) / 8 )), lp.curr_data.block_simple_flags, ( (st_61.nbr_blk_ints_set1 + 7) / 8 ) );
 101c31a:	3207      	adds	r2, #7
		memset( &lp.curr_data.block_simple_flags, 0, sizeof(lp.curr_data.block_simple_flags) );
 101c31c:	2500      	movs	r5, #0
		EEPROM_writer( st_64_addr.simple_int_status + (lp.curr_data.blk_number * ( (st_61.nbr_blk_ints_set1 + 7) / 8 )), lp.curr_data.block_simple_flags, ( (st_61.nbr_blk_ints_set1 + 7) / 8 ) );
 101c31e:	10d2      	asrs	r2, r2, #3
 101c320:	fb02 1000 	mla	r0, r2, r0, r1
		memset( &lp.curr_data.block_simple_flags, 0, sizeof(lp.curr_data.block_simple_flags) );
 101c324:	f8c4 501f 	str.w	r5, [r4, #31]
		EEPROM_writer( st_64_addr.simple_int_status + (lp.curr_data.blk_number * ( (st_61.nbr_blk_ints_set1 + 7) / 8 )), lp.curr_data.block_simple_flags, ( (st_61.nbr_blk_ints_set1 + 7) / 8 ) );
 101c328:	4619      	mov	r1, r3
		memset( &lp.curr_data.block_simple_flags, 0, sizeof(lp.curr_data.block_simple_flags) );
 101c32a:	809d      	strh	r5, [r3, #4]
		EEPROM_writer( st_64_addr.simple_int_status + (lp.curr_data.blk_number * ( (st_61.nbr_blk_ints_set1 + 7) / 8 )), lp.curr_data.block_simple_flags, ( (st_61.nbr_blk_ints_set1 + 7) / 8 ) );
 101c32c:	47b0      	blx	r6
		lp.eob = false;
 101c32e:	70a5      	strb	r5, [r4, #2]
	}
}
 101c330:	b005      	add	sp, #20
 101c332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				st_63.last_block_element++;
 101c336:	9901      	ldr	r1, [sp, #4]
				if ( st_63.last_block_element >= st_61.nbr_blks_set1 ) {
 101c338:	8928      	ldrh	r0, [r5, #8]
				st_63.last_block_element++;
 101c33a:	888a      	ldrh	r2, [r1, #4]
				st_63.last_block_seq_nbr++;
 101c33c:	6889      	ldr	r1, [r1, #8]
				st_63.last_block_element++;
 101c33e:	3201      	adds	r2, #1
 101c340:	b292      	uxth	r2, r2
				st_63.last_block_seq_nbr++;
 101c342:	f101 0e01 	add.w	lr, r1, #1
				st_63.last_block_element++;
 101c346:	9901      	ldr	r1, [sp, #4]
				if ( st_63.last_block_element >= st_61.nbr_blks_set1 ) {
 101c348:	4282      	cmp	r2, r0
				st_63.last_block_element++;
 101c34a:	808a      	strh	r2, [r1, #4]
					st_63.last_block_element = 0;
 101c34c:	bf28      	it	cs
 101c34e:	2200      	movcs	r2, #0
				st_63.last_block_seq_nbr++;
 101c350:	f8c1 e008 	str.w	lr, [r1, #8]
					st_63.last_block_element = 0;
 101c354:	bf28      	it	cs
 101c356:	808a      	strhcs	r2, [r1, #4]
 101c358:	e78b      	b.n	101c272 <LP_APP_vStore_data_task+0x19e>
		for ( uint8_t i = 0; i < st_61.nbr_chns_set1; i++ ) {
 101c35a:	2201      	movs	r2, #1
 101c35c:	4e07      	ldr	r6, [pc, #28]	; (101c37c <LP_APP_vStore_data_task+0x2a8>)
 101c35e:	4f08      	ldr	r7, [pc, #32]	; (101c380 <LP_APP_vStore_data_task+0x2ac>)
 101c360:	4613      	mov	r3, r2
 101c362:	f104 0840 	add.w	r8, r4, #64	; 0x40
 101c366:	e731      	b.n	101c1cc <LP_APP_vStore_data_task+0xf8>
 101c368:	4b07      	ldr	r3, [pc, #28]	; (101c388 <LP_APP_vStore_data_task+0x2b4>)
 101c36a:	9301      	str	r3, [sp, #4]
 101c36c:	e78a      	b.n	101c284 <LP_APP_vStore_data_task+0x1b0>
 101c36e:	bf00      	nop
 101c370:	20016c2c 	.word	0x20016c2c
 101c374:	200166c8 	.word	0x200166c8
 101c378:	200166b8 	.word	0x200166b8
 101c37c:	20016754 	.word	0x20016754
 101c380:	01017509 	.word	0x01017509
 101c384:	20016708 	.word	0x20016708
 101c388:	20016744 	.word	0x20016744
 101c38c:	200166fc 	.word	0x200166fc
 101c390:	0101b2a9 	.word	0x0101b2a9
 101c394:	200166dc 	.word	0x200166dc
 101c398:	200166e7 	.word	0x200166e7
 101c39c:	2001670b 	.word	0x2001670b
 101c3a0:	20016724 	.word	0x20016724
 101c3a4:	010296a1 	.word	0x010296a1

0101c3a8 <LP_APP_vStop_load_profile.part.2>:
 * 
 * \param void
 * \retval void
 ******************************************************************************
 */
void LP_APP_vStop_load_profile(void) {
 101c3a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	if (lp.is_active == true) {

		lp.is_active = false;
 101c3ac:	4d1d      	ldr	r5, [pc, #116]	; (101c424 <LP_APP_vStop_load_profile.part.2+0x7c>)
 * \retval void
 ******************************************************************************
 */
void LP_APP_vWrite_eeprom_pulse_recorder(void) {

	for ( uint8_t i = 0; i < st_61.nbr_chns_set1; i++) {
 101c3ae:	4f1e      	ldr	r7, [pc, #120]	; (101c428 <LP_APP_vStop_load_profile.part.2+0x80>)
		lp.last_data = lp.curr_data;
 101c3b0:	f105 0e04 	add.w	lr, r5, #4
 101c3b4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
		lp.is_active = false;
 101c3b8:	462e      	mov	r6, r5
 101c3ba:	2400      	movs	r4, #0
 101c3bc:	f806 4b28 	strb.w	r4, [r6], #40
		lp.last_data = lp.curr_data;
 101c3c0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 101c3c2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 101c3c6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
		lp.eoi = true;
 101c3c8:	2101      	movs	r1, #1
		lp.last_data = lp.curr_data;
 101c3ca:	f8de 2000 	ldr.w	r2, [lr]
		LP_APP_vStore_data_task();
 101c3ce:	4b17      	ldr	r3, [pc, #92]	; (101c42c <LP_APP_vStop_load_profile.part.2+0x84>)
		lp.last_data = lp.curr_data;
 101c3d0:	6032      	str	r2, [r6, #0]
		lp.eoi = true;
 101c3d2:	7069      	strb	r1, [r5, #1]
		lp.eob = false;
 101c3d4:	70ac      	strb	r4, [r5, #2]
		LP_APP_vStore_data_task();
 101c3d6:	4798      	blx	r3
	for ( uint8_t i = 0; i < st_61.nbr_chns_set1; i++) {
 101c3d8:	7b3b      	ldrb	r3, [r7, #12]
 101c3da:	4e15      	ldr	r6, [pc, #84]	; (101c430 <LP_APP_vStop_load_profile.part.2+0x88>)
 101c3dc:	b183      	cbz	r3, 101c400 <LP_APP_vStop_load_profile.part.2+0x58>
		EEPROM_writer( LP_BACKUP_PULSE_RECORDER_ADDR + i*4, &lp.pulse_recorder[i], 4);
 101c3de:	f04f 0904 	mov.w	r9, #4
 101c3e2:	f249 28d6 	movw	r8, #37590	; 0x92d6
 101c3e6:	f104 0113 	add.w	r1, r4, #19
 101c3ea:	fb09 8004 	mla	r0, r9, r4, r8
 101c3ee:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 101c3f2:	2204      	movs	r2, #4
 101c3f4:	47b0      	blx	r6
	for ( uint8_t i = 0; i < st_61.nbr_chns_set1; i++) {
 101c3f6:	3401      	adds	r4, #1
 101c3f8:	7b3b      	ldrb	r3, [r7, #12]
 101c3fa:	b2e4      	uxtb	r4, r4
 101c3fc:	42a3      	cmp	r3, r4
 101c3fe:	d8f2      	bhi.n	101c3e6 <LP_APP_vStop_load_profile.part.2+0x3e>
		EEPROM_writer( LP_INTERVAL_TIME_ADDR, &lp.curr_data.int_elapsed_time, 4);
 101c400:	490c      	ldr	r1, [pc, #48]	; (101c434 <LP_APP_vStop_load_profile.part.2+0x8c>)
 101c402:	2204      	movs	r2, #4
 101c404:	f249 20ce 	movw	r0, #37582	; 0x92ce
 101c408:	47b0      	blx	r6
		EEPROM_writer( LP_LAST_INTERVAL_USED_ADDR, &lp.curr_data.int_number, 2);
 101c40a:	2202      	movs	r2, #2
 101c40c:	490a      	ldr	r1, [pc, #40]	; (101c438 <LP_APP_vStop_load_profile.part.2+0x90>)
 101c40e:	f249 20d2 	movw	r0, #37586	; 0x92d2
 101c412:	47b0      	blx	r6
		EEPROM_writer( LP_LAST_BLOCK_USED_ADDR, &lp.curr_data.blk_number, 2);
 101c414:	4633      	mov	r3, r6
 101c416:	2202      	movs	r2, #2
 101c418:	4908      	ldr	r1, [pc, #32]	; (101c43c <LP_APP_vStop_load_profile.part.2+0x94>)
 101c41a:	f249 20d4 	movw	r0, #37588	; 0x92d4
}
 101c41e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		EEPROM_writer( LP_LAST_BLOCK_USED_ADDR, &lp.curr_data.blk_number, 2);
 101c422:	4718      	bx	r3
 101c424:	200166c8 	.word	0x200166c8
 101c428:	200166b8 	.word	0x200166b8
 101c42c:	0101c0d5 	.word	0x0101c0d5
 101c430:	01017509 	.word	0x01017509
 101c434:	200166e0 	.word	0x200166e0
 101c438:	200166d6 	.word	0x200166d6
 101c43c:	200166d4 	.word	0x200166d4

0101c440 <LP_restart_pulse_recorder>:
void LP_restart_pulse_recorder(void) {
 101c440:	b538      	push	{r3, r4, r5, lr}
	memset( &summ_integer, 0, sizeof(summ_integer) );
 101c442:	2520      	movs	r5, #32
 101c444:	462a      	mov	r2, r5
 101c446:	2100      	movs	r1, #0
 101c448:	4c06      	ldr	r4, [pc, #24]	; (101c464 <LP_restart_pulse_recorder+0x24>)
 101c44a:	4807      	ldr	r0, [pc, #28]	; (101c468 <LP_restart_pulse_recorder+0x28>)
 101c44c:	47a0      	blx	r4
	memset( &summ_remaind, 0, sizeof(summ_remaind) );
 101c44e:	462a      	mov	r2, r5
 101c450:	2100      	movs	r1, #0
 101c452:	4806      	ldr	r0, [pc, #24]	; (101c46c <LP_restart_pulse_recorder+0x2c>)
 101c454:	47a0      	blx	r4
	memset( &lp.pulse_recorder, 0, sizeof(lp.pulse_recorder) );	
 101c456:	4b06      	ldr	r3, [pc, #24]	; (101c470 <LP_restart_pulse_recorder+0x30>)
 101c458:	2200      	movs	r2, #0
 101c45a:	601a      	str	r2, [r3, #0]
 101c45c:	605a      	str	r2, [r3, #4]
 101c45e:	609a      	str	r2, [r3, #8]
 101c460:	60da      	str	r2, [r3, #12]
 101c462:	bd38      	pop	{r3, r4, r5, pc}
 101c464:	01030b71 	.word	0x01030b71
 101c468:	20000c00 	.word	0x20000c00
 101c46c:	20000c20 	.word	0x20000c20
 101c470:	20016714 	.word	0x20016714

0101c474 <LP_APP_bStart_load_profile>:
bool LP_APP_bStart_load_profile(void) {
 101c474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if ( (lp.is_active == false) && (rtc.is_time_relative == 0) ) {
 101c478:	4cb8      	ldr	r4, [pc, #736]	; (101c75c <LP_APP_bStart_load_profile+0x2e8>)
 101c47a:	7820      	ldrb	r0, [r4, #0]
bool LP_APP_bStart_load_profile(void) {
 101c47c:	b087      	sub	sp, #28
	if ( (lp.is_active == false) && (rtc.is_time_relative == 0) ) {
 101c47e:	b910      	cbnz	r0, 101c486 <LP_APP_bStart_load_profile+0x12>
 101c480:	4db7      	ldr	r5, [pc, #732]	; (101c760 <LP_APP_bStart_load_profile+0x2ec>)
 101c482:	78ae      	ldrb	r6, [r5, #2]
 101c484:	b116      	cbz	r6, 101c48c <LP_APP_bStart_load_profile+0x18>
}
 101c486:	b007      	add	sp, #28
 101c488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ( st_63.nbr_valid_blocks == 0 ) {
 101c48c:	4fb5      	ldr	r7, [pc, #724]	; (101c764 <LP_APP_bStart_load_profile+0x2f0>)
		LP_restart_pulse_recorder();
 101c48e:	4bb6      	ldr	r3, [pc, #728]	; (101c768 <LP_APP_bStart_load_profile+0x2f4>)
 101c490:	4798      	blx	r3
		if ( st_63.nbr_valid_blocks == 0 ) {
 101c492:	f8b7 8002 	ldrh.w	r8, [r7, #2]
 101c496:	f1b8 0f00 	cmp.w	r8, #0
 101c49a:	d177      	bne.n	101c58c <LP_APP_bStart_load_profile+0x118>
			uint32_t blk_start_time = rtc.utc_timestamp - (rtc.utc_timestamp % 60) - ( ( (rtc.utc_timestamp/60) % 60 ) * 60);
 101c49c:	686b      	ldr	r3, [r5, #4]
 101c49e:	4ab3      	ldr	r2, [pc, #716]	; (101c76c <LP_APP_bStart_load_profile+0x2f8>)
			lp.curr_data.blk_end_time = blk_start_time + st_61.max_int_time_set1 * st_61.nbr_blk_ints_set1 * SECONDS_PER_MINUTE;
 101c4a0:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 101c784 <LP_APP_bStart_load_profile+0x310>
			EEPROM_writer( LP_EXPECTED_BLOCK_END_TIME_ADDR, &lp.curr_data.blk_end_time, TM_FMAT_SIZE );
 101c4a4:	4eb2      	ldr	r6, [pc, #712]	; (101c770 <LP_APP_bStart_load_profile+0x2fc>)
			lp.curr_data.blk_end_time = blk_start_time + st_61.max_int_time_set1 * st_61.nbr_blk_ints_set1 * SECONDS_PER_MINUTE;
 101c4a6:	f899 000d 	ldrb.w	r0, [r9, #13]
 101c4aa:	f8b9 100a 	ldrh.w	r1, [r9, #10]
			lp.curr_data.blk_number = 0;
 101c4ae:	f8a4 800c 	strh.w	r8, [r4, #12]
			uint32_t blk_start_time = rtc.utc_timestamp - (rtc.utc_timestamp % 60) - ( ( (rtc.utc_timestamp/60) % 60 ) * 60);
 101c4b2:	fba2 e303 	umull	lr, r3, r2, r3
 101c4b6:	ea4f 1a53 	mov.w	sl, r3, lsr #5
 101c4ba:	fba2 320a 	umull	r3, r2, r2, sl
 101c4be:	0952      	lsrs	r2, r2, #5
 101c4c0:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 101c4c4:	ebaa 0282 	sub.w	r2, sl, r2, lsl #2
 101c4c8:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 101c4cc:	0093      	lsls	r3, r2, #2
			lp.curr_data.blk_end_time = blk_start_time + st_61.max_int_time_set1 * st_61.nbr_blk_ints_set1 * SECONDS_PER_MINUTE;
 101c4ce:	fb01 f100 	mul.w	r1, r1, r0
			uint32_t blk_start_time = rtc.utc_timestamp - (rtc.utc_timestamp % 60) - ( ( (rtc.utc_timestamp/60) % 60 ) * 60);
 101c4d2:	ebca 1a0a 	rsb	sl, sl, sl, lsl #4
 101c4d6:	ebc3 0a8a 	rsb	sl, r3, sl, lsl #2
			lp.curr_data.blk_end_time = blk_start_time + st_61.max_int_time_set1 * st_61.nbr_blk_ints_set1 * SECONDS_PER_MINUTE;
 101c4da:	ebc1 1001 	rsb	r0, r1, r1, lsl #4
 101c4de:	4621      	mov	r1, r4
 101c4e0:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 101c4e4:	f841 0f14 	str.w	r0, [r1, #20]!
			EEPROM_writer( LP_EXPECTED_BLOCK_END_TIME_ADDR, &lp.curr_data.blk_end_time, TM_FMAT_SIZE );
 101c4e8:	2204      	movs	r2, #4
 101c4ea:	f249 20ca 	movw	r0, #37578	; 0x92ca
 101c4ee:	47b0      	blx	r6
			for ( uint16_t i = 0; i < st_61.nbr_blk_ints_set1; i++ ) {
 101c4f0:	f8b9 200a 	ldrh.w	r2, [r9, #10]
 101c4f4:	2a00      	cmp	r2, #0
 101c4f6:	f000 8181 	beq.w	101c7fc <LP_APP_bStart_load_profile+0x388>
				if ( rtc.utc_timestamp < (blk_start_time + st_61.max_int_time_set1 * 60 * (i + 1) ) ) {
 101c4fa:	f899 e00d 	ldrb.w	lr, [r9, #13]
 101c4fe:	f8d5 c004 	ldr.w	ip, [r5, #4]
 101c502:	253c      	movs	r5, #60	; 0x3c
 101c504:	fb15 a30e 	smlabb	r3, r5, lr, sl
 101c508:	459c      	cmp	ip, r3
 101c50a:	f0c0 8104 	bcc.w	101c716 <LP_APP_bStart_load_profile+0x2a2>
 101c50e:	fb15 330e 	smlabb	r3, r5, lr, r3
 101c512:	2102      	movs	r1, #2
 101c514:	e003      	b.n	101c51e <LP_APP_bStart_load_profile+0xaa>
 101c516:	459c      	cmp	ip, r3
 101c518:	f0c0 80ff 	bcc.w	101c71a <LP_APP_bStart_load_profile+0x2a6>
 101c51c:	4603      	mov	r3, r0
			for ( uint16_t i = 0; i < st_61.nbr_blk_ints_set1; i++ ) {
 101c51e:	f108 0801 	add.w	r8, r8, #1
 101c522:	fa1f f888 	uxth.w	r8, r8
 101c526:	4590      	cmp	r8, r2
				if ( rtc.utc_timestamp < (blk_start_time + st_61.max_int_time_set1 * 60 * (i + 1) ) ) {
 101c528:	4689      	mov	r9, r1
 101c52a:	fb15 300e 	smlabb	r0, r5, lr, r3
 101c52e:	f101 0101 	add.w	r1, r1, #1
			for ( uint16_t i = 0; i < st_61.nbr_blk_ints_set1; i++ ) {
 101c532:	d1f0      	bne.n	101c516 <LP_APP_bStart_load_profile+0xa2>
 101c534:	f108 0507 	add.w	r5, r8, #7
 101c538:	89e3      	ldrh	r3, [r4, #14]
 101c53a:	10ed      	asrs	r5, r5, #3
 101c53c:	4641      	mov	r1, r8
 101c53e:	462a      	mov	r2, r5
 101c540:	f103 0901 	add.w	r9, r3, #1
 101c544:	4698      	mov	r8, r3
			EEPROM_writer( st_64_addr.simple_int_status + (lp.curr_data.blk_number * ( (st_61.nbr_blk_ints_set1 + 7) / 8 )), lp.curr_data.block_simple_flags, ( (st_61.nbr_blk_ints_set1 + 7) / 8 ) );
 101c546:	488b      	ldr	r0, [pc, #556]	; (101c774 <LP_APP_bStart_load_profile+0x300>)
			st_63.nbr_valid_int = lp.curr_data.int_number;
 101c548:	f8a7 800e 	strh.w	r8, [r7, #14]
			lp.curr_data.int_end_time = lp.curr_data.blk_end_time - (st_61.nbr_blk_ints_set1 - (lp.curr_data.int_number + 1 ) ) * st_61.max_int_time_set1 * SECONDS_PER_MINUTE;
 101c54c:	eba1 0109 	sub.w	r1, r1, r9
 101c550:	fb0e f301 	mul.w	r3, lr, r1
			EEPROM_writer( st_64_addr.simple_int_status + (lp.curr_data.blk_number * ( (st_61.nbr_blk_ints_set1 + 7) / 8 )), lp.curr_data.block_simple_flags, ( (st_61.nbr_blk_ints_set1 + 7) / 8 ) );
 101c554:	6881      	ldr	r1, [r0, #8]
 101c556:	89a0      	ldrh	r0, [r4, #12]
			memset( &lp.curr_data.block_simple_flags, 0, sizeof(lp.curr_data.block_simple_flags) );
 101c558:	4f87      	ldr	r7, [pc, #540]	; (101c778 <LP_APP_bStart_load_profile+0x304>)
			lp.curr_data.int_end_time = lp.curr_data.blk_end_time - (st_61.nbr_blk_ints_set1 - (lp.curr_data.int_number + 1 ) ) * st_61.max_int_time_set1 * SECONDS_PER_MINUTE;
 101c55a:	ebc3 1e03 	rsb	lr, r3, r3, lsl #4
 101c55e:	6963      	ldr	r3, [r4, #20]
			EEPROM_writer( st_64_addr.simple_int_status + (lp.curr_data.blk_number * ( (st_61.nbr_blk_ints_set1 + 7) / 8 )), lp.curr_data.block_simple_flags, ( (st_61.nbr_blk_ints_set1 + 7) / 8 ) );
 101c560:	fb05 1000 	mla	r0, r5, r0, r1
			memset( &lp.curr_data.block_simple_flags, 0, sizeof(lp.curr_data.block_simple_flags) );
 101c564:	2500      	movs	r5, #0
			lp.curr_data.int_end_time = lp.curr_data.blk_end_time - (st_61.nbr_blk_ints_set1 - (lp.curr_data.int_number + 1 ) ) * st_61.max_int_time_set1 * SECONDS_PER_MINUTE;
 101c566:	eba3 038e 	sub.w	r3, r3, lr, lsl #2
			memset( &lp.curr_data.block_simple_flags, 0, sizeof(lp.curr_data.block_simple_flags) );
 101c56a:	80bd      	strh	r5, [r7, #4]
			EEPROM_writer( st_64_addr.simple_int_status + (lp.curr_data.blk_number * ( (st_61.nbr_blk_ints_set1 + 7) / 8 )), lp.curr_data.block_simple_flags, ( (st_61.nbr_blk_ints_set1 + 7) / 8 ) );
 101c56c:	4639      	mov	r1, r7
			memset( &lp.curr_data.block_simple_flags, 0, sizeof(lp.curr_data.block_simple_flags) );
 101c56e:	f8c4 501f 	str.w	r5, [r4, #31]
			lp.curr_data.int_end_time = lp.curr_data.blk_end_time - (st_61.nbr_blk_ints_set1 - (lp.curr_data.int_number + 1 ) ) * st_61.max_int_time_set1 * SECONDS_PER_MINUTE;
 101c572:	6123      	str	r3, [r4, #16]
			EEPROM_writer( st_64_addr.simple_int_status + (lp.curr_data.blk_number * ( (st_61.nbr_blk_ints_set1 + 7) / 8 )), lp.curr_data.block_simple_flags, ( (st_61.nbr_blk_ints_set1 + 7) / 8 ) );
 101c574:	47b0      	blx	r6
			memset( &lp.curr_data.extended_int_status, 0, sizeof(lp.curr_data.extended_int_status) );
 101c576:	f807 5c01 	strb.w	r5, [r7, #-1]
			lp.curr_data.int_elapsed_time = 0;
 101c57a:	61a5      	str	r5, [r4, #24]
			memset( &lp.curr_data.extended_int_status, 0, sizeof(lp.curr_data.extended_int_status) );
 101c57c:	83a5      	strh	r5, [r4, #28]
		LP_APP_vSt_63_write_eeprom_values(&st_63);
 101c57e:	4b7f      	ldr	r3, [pc, #508]	; (101c77c <LP_APP_bStart_load_profile+0x308>)
 101c580:	4798      	blx	r3
		lp.is_active = true;
 101c582:	2001      	movs	r0, #1
 101c584:	7020      	strb	r0, [r4, #0]
}
 101c586:	b007      	add	sp, #28
 101c588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			EEPROM_reader( LP_LAST_INTERVAL_USED_ADDR, &lp.curr_data.int_number, 2 );
 101c58c:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 101c788 <LP_APP_bStart_load_profile+0x314>
			lp.curr_data.int_end_time = lp.curr_data.blk_end_time - (st_61.nbr_blk_ints_set1 - (lp.curr_data.int_number + 1 ) ) * st_61.max_int_time_set1 * SECONDS_PER_MINUTE;
 101c590:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 101c784 <LP_APP_bStart_load_profile+0x310>
			EEPROM_reader( st_64_addr.extended_int_status + (lp.curr_data.blk_number * ( (st_61.nbr_chns_set1 / 2) + 1 ) * MAX_NBR_BLK_INTS_SET1) + (lp.last_data.int_number * ( (st_61.nbr_chns_set1 / 2) + 1 ) ), &set_1_extended_status, 1 );
 101c594:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 101c774 <LP_APP_bStart_load_profile+0x300>
			EEPROM_reader( LP_LAST_INTERVAL_USED_ADDR, &lp.curr_data.int_number, 2 );
 101c598:	2202      	movs	r2, #2
 101c59a:	f104 010e 	add.w	r1, r4, #14
 101c59e:	f249 20d2 	movw	r0, #37586	; 0x92d2
 101c5a2:	47c0      	blx	r8
			EEPROM_reader( LP_LAST_BLOCK_USED_ADDR, &lp.curr_data.blk_number, 2 );
 101c5a4:	2202      	movs	r2, #2
 101c5a6:	f104 010c 	add.w	r1, r4, #12
 101c5aa:	f249 20d4 	movw	r0, #37588	; 0x92d4
 101c5ae:	47c0      	blx	r8
			EEPROM_reader( LP_EXPECTED_BLOCK_END_TIME_ADDR, &lp.curr_data.blk_end_time, TM_FMAT_SIZE );
 101c5b0:	2204      	movs	r2, #4
 101c5b2:	f104 0114 	add.w	r1, r4, #20
 101c5b6:	f249 20ca 	movw	r0, #37578	; 0x92ca
 101c5ba:	47c0      	blx	r8
			lp.curr_data.int_end_time = lp.curr_data.blk_end_time - (st_61.nbr_blk_ints_set1 - (lp.curr_data.int_number + 1 ) ) * st_61.max_int_time_set1 * SECONDS_PER_MINUTE;
 101c5bc:	f8b4 e00e 	ldrh.w	lr, [r4, #14]
			EEPROM_reader( st_64_addr.extended_int_status + (lp.curr_data.blk_number * ( (st_61.nbr_chns_set1 / 2) + 1 ) * MAX_NBR_BLK_INTS_SET1) + (lp.last_data.int_number * ( (st_61.nbr_chns_set1 / 2) + 1 ) ), &set_1_extended_status, 1 );
 101c5c0:	f89a 200c 	ldrb.w	r2, [sl, #12]
			lp.curr_data.int_end_time = lp.curr_data.blk_end_time - (st_61.nbr_blk_ints_set1 - (lp.curr_data.int_number + 1 ) ) * st_61.max_int_time_set1 * SECONDS_PER_MINUTE;
 101c5c4:	f8ba 300a 	ldrh.w	r3, [sl, #10]
			EEPROM_reader( st_64_addr.extended_int_status + (lp.curr_data.blk_number * ( (st_61.nbr_chns_set1 / 2) + 1 ) * MAX_NBR_BLK_INTS_SET1) + (lp.last_data.int_number * ( (st_61.nbr_chns_set1 / 2) + 1 ) ), &set_1_extended_status, 1 );
 101c5c8:	89a1      	ldrh	r1, [r4, #12]
 101c5ca:	f8d9 000c 	ldr.w	r0, [r9, #12]
			lp.last_data.int_number = lp.curr_data.int_number;
 101c5ce:	f8a4 e032 	strh.w	lr, [r4, #50]	; 0x32
			lp.curr_data.int_end_time = lp.curr_data.blk_end_time - (st_61.nbr_blk_ints_set1 - (lp.curr_data.int_number + 1 ) ) * st_61.max_int_time_set1 * SECONDS_PER_MINUTE;
 101c5d2:	f10e 0c01 	add.w	ip, lr, #1
 101c5d6:	eba3 030c 	sub.w	r3, r3, ip
			EEPROM_reader( st_64_addr.extended_int_status + (lp.curr_data.blk_number * ( (st_61.nbr_chns_set1 / 2) + 1 ) * MAX_NBR_BLK_INTS_SET1) + (lp.last_data.int_number * ( (st_61.nbr_chns_set1 / 2) + 1 ) ), &set_1_extended_status, 1 );
 101c5da:	0852      	lsrs	r2, r2, #1
			lp.curr_data.int_end_time = lp.curr_data.blk_end_time - (st_61.nbr_blk_ints_set1 - (lp.curr_data.int_number + 1 ) ) * st_61.max_int_time_set1 * SECONDS_PER_MINUTE;
 101c5dc:	f89a c00d 	ldrb.w	ip, [sl, #13]
			EEPROM_reader( st_64_addr.extended_int_status + (lp.curr_data.blk_number * ( (st_61.nbr_chns_set1 / 2) + 1 ) * MAX_NBR_BLK_INTS_SET1) + (lp.last_data.int_number * ( (st_61.nbr_chns_set1 / 2) + 1 ) ), &set_1_extended_status, 1 );
 101c5e0:	3201      	adds	r2, #1
 101c5e2:	fb02 000e 	mla	r0, r2, lr, r0
			lp.curr_data.int_end_time = lp.curr_data.blk_end_time - (st_61.nbr_blk_ints_set1 - (lp.curr_data.int_number + 1 ) ) * st_61.max_int_time_set1 * SECONDS_PER_MINUTE;
 101c5e6:	fb0c f303 	mul.w	r3, ip, r3
			EEPROM_reader( st_64_addr.extended_int_status + (lp.curr_data.blk_number * ( (st_61.nbr_chns_set1 / 2) + 1 ) * MAX_NBR_BLK_INTS_SET1) + (lp.last_data.int_number * ( (st_61.nbr_chns_set1 / 2) + 1 ) ), &set_1_extended_status, 1 );
 101c5ea:	fb02 f101 	mul.w	r1, r2, r1
			lp.curr_data.int_end_time = lp.curr_data.blk_end_time - (st_61.nbr_blk_ints_set1 - (lp.curr_data.int_number + 1 ) ) * st_61.max_int_time_set1 * SECONDS_PER_MINUTE;
 101c5ee:	6962      	ldr	r2, [r4, #20]
			EEPROM_reader( st_64_addr.extended_int_status + (lp.curr_data.blk_number * ( (st_61.nbr_chns_set1 / 2) + 1 ) * MAX_NBR_BLK_INTS_SET1) + (lp.last_data.int_number * ( (st_61.nbr_chns_set1 / 2) + 1 ) ), &set_1_extended_status, 1 );
 101c5f0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
			lp.curr_data.int_end_time = lp.curr_data.blk_end_time - (st_61.nbr_blk_ints_set1 - (lp.curr_data.int_number + 1 ) ) * st_61.max_int_time_set1 * SECONDS_PER_MINUTE;
 101c5f4:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 101c5f8:	eba2 0383 	sub.w	r3, r2, r3, lsl #2
			EEPROM_reader( st_64_addr.extended_int_status + (lp.curr_data.blk_number * ( (st_61.nbr_chns_set1 / 2) + 1 ) * MAX_NBR_BLK_INTS_SET1) + (lp.last_data.int_number * ( (st_61.nbr_chns_set1 / 2) + 1 ) ), &set_1_extended_status, 1 );
 101c5fc:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 101c600:	2201      	movs	r2, #1
 101c602:	f10d 0117 	add.w	r1, sp, #23
			lp.curr_data.int_end_time = lp.curr_data.blk_end_time - (st_61.nbr_blk_ints_set1 - (lp.curr_data.int_number + 1 ) ) * st_61.max_int_time_set1 * SECONDS_PER_MINUTE;
 101c606:	6123      	str	r3, [r4, #16]
			EEPROM_reader( st_64_addr.extended_int_status + (lp.curr_data.blk_number * ( (st_61.nbr_chns_set1 / 2) + 1 ) * MAX_NBR_BLK_INTS_SET1) + (lp.last_data.int_number * ( (st_61.nbr_chns_set1 / 2) + 1 ) ), &set_1_extended_status, 1 );
 101c608:	47c0      	blx	r8
			if ( ( rtc.utc_timestamp <= (lp.curr_data.int_end_time - st_61.max_int_time_set1 * SECONDS_PER_MINUTE) ) || ( rtc.utc_timestamp >  lp.curr_data.blk_end_time ) ) {
 101c60a:	f89a c00d 	ldrb.w	ip, [sl, #13]
 101c60e:	6922      	ldr	r2, [r4, #16]
			lp.curr_data.extended_int_status[0] = set_1_extended_status & (COMMON_POWER_FAIL_FLAG_bm | COMMON_CLOCK_SET_FWD_FLAG_bm | COMMON_CLOCK_SET_BKWD_FLAG_bm);
 101c610:	f89d 1017 	ldrb.w	r1, [sp, #23]
			if ( ( rtc.utc_timestamp <= (lp.curr_data.int_end_time - st_61.max_int_time_set1 * SECONDS_PER_MINUTE) ) || ( rtc.utc_timestamp >  lp.curr_data.blk_end_time ) ) {
 101c614:	686b      	ldr	r3, [r5, #4]
 101c616:	ebcc 1e0c 	rsb	lr, ip, ip, lsl #4
 101c61a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 101c61e:	eba2 020e 	sub.w	r2, r2, lr
			lp.curr_data.extended_int_status[0] = set_1_extended_status & (COMMON_POWER_FAIL_FLAG_bm | COMMON_CLOCK_SET_FWD_FLAG_bm | COMMON_CLOCK_SET_BKWD_FLAG_bm);
 101c622:	f001 01e0 	and.w	r1, r1, #224	; 0xe0
			if ( ( rtc.utc_timestamp <= (lp.curr_data.int_end_time - st_61.max_int_time_set1 * SECONDS_PER_MINUTE) ) || ( rtc.utc_timestamp >  lp.curr_data.blk_end_time ) ) {
 101c626:	4293      	cmp	r3, r2
			lp.curr_data.extended_int_status[0] = set_1_extended_status & (COMMON_POWER_FAIL_FLAG_bm | COMMON_CLOCK_SET_FWD_FLAG_bm | COMMON_CLOCK_SET_BKWD_FLAG_bm);
 101c628:	7721      	strb	r1, [r4, #28]
			lp.last_data.extended_int_status[0] = lp.curr_data.extended_int_status[0];
 101c62a:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
			if ( ( rtc.utc_timestamp <= (lp.curr_data.int_end_time - st_61.max_int_time_set1 * SECONDS_PER_MINUTE) ) || ( rtc.utc_timestamp >  lp.curr_data.blk_end_time ) ) {
 101c62e:	d903      	bls.n	101c638 <LP_APP_bStart_load_profile+0x1c4>
 101c630:	6962      	ldr	r2, [r4, #20]
 101c632:	9202      	str	r2, [sp, #8]
 101c634:	4293      	cmp	r3, r2
 101c636:	d977      	bls.n	101c728 <LP_APP_bStart_load_profile+0x2b4>
				blk_start_time = rtc.utc_timestamp - (rtc.utc_timestamp % 60) - ( ( (rtc.utc_timestamp/60) % 60 ) * 60);
 101c638:	4a4c      	ldr	r2, [pc, #304]	; (101c76c <LP_APP_bStart_load_profile+0x2f8>)
				lp.curr_data.blk_end_time = blk_start_time + st_61.max_int_time_set1 * st_61.nbr_blk_ints_set1 * SECONDS_PER_MINUTE;
 101c63a:	f8ba e00a 	ldrh.w	lr, [sl, #10]
				lp.curr_data.blk_number++;
 101c63e:	89a0      	ldrh	r0, [r4, #12]
				lp.curr_data.blk_number = ( lp.curr_data.blk_number >= st_61.nbr_blks_set1 ) ? 0 : lp.curr_data.blk_number;
 101c640:	f8ba 6008 	ldrh.w	r6, [sl, #8]
				blk_start_time = rtc.utc_timestamp - (rtc.utc_timestamp % 60) - ( ( (rtc.utc_timestamp/60) % 60 ) * 60);
 101c644:	fba2 1303 	umull	r1, r3, r2, r3
 101c648:	095b      	lsrs	r3, r3, #5
 101c64a:	fba2 1203 	umull	r1, r2, r2, r3
 101c64e:	0952      	lsrs	r2, r2, #5
 101c650:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 101c654:	eba3 0282 	sub.w	r2, r3, r2, lsl #2
 101c658:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 101c65c:	0091      	lsls	r1, r2, #2
 101c65e:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
				lp.curr_data.blk_end_time = blk_start_time + st_61.max_int_time_set1 * st_61.nbr_blk_ints_set1 * SECONDS_PER_MINUTE;
 101c662:	fb0c fc0e 	mul.w	ip, ip, lr
				blk_start_time = rtc.utc_timestamp - (rtc.utc_timestamp % 60) - ( ( (rtc.utc_timestamp/60) % 60 ) * 60);
 101c666:	ebc1 0883 	rsb	r8, r1, r3, lsl #2
				lp.curr_data.blk_number++;
 101c66a:	3001      	adds	r0, #1
				lp.curr_data.blk_end_time = blk_start_time + st_61.max_int_time_set1 * st_61.nbr_blk_ints_set1 * SECONDS_PER_MINUTE;
 101c66c:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
				lp.curr_data.blk_number++;
 101c670:	b283      	uxth	r3, r0
				lp.curr_data.blk_end_time = blk_start_time + st_61.max_int_time_set1 * st_61.nbr_blk_ints_set1 * SECONDS_PER_MINUTE;
 101c672:	eb08 008c 	add.w	r0, r8, ip, lsl #2
				lp.curr_data.blk_number = ( lp.curr_data.blk_number >= st_61.nbr_blks_set1 ) ? 0 : lp.curr_data.blk_number;
 101c676:	429e      	cmp	r6, r3
 101c678:	bf98      	it	ls
 101c67a:	2300      	movls	r3, #0
				EEPROM_writer( LP_EXPECTED_BLOCK_END_TIME_ADDR, &lp.curr_data.blk_end_time, TM_FMAT_SIZE );
 101c67c:	2204      	movs	r2, #4
				lp.curr_data.blk_end_time = blk_start_time + st_61.max_int_time_set1 * st_61.nbr_blk_ints_set1 * SECONDS_PER_MINUTE;
 101c67e:	6160      	str	r0, [r4, #20]
				EEPROM_writer( LP_EXPECTED_BLOCK_END_TIME_ADDR, &lp.curr_data.blk_end_time, TM_FMAT_SIZE );
 101c680:	493f      	ldr	r1, [pc, #252]	; (101c780 <LP_APP_bStart_load_profile+0x30c>)
 101c682:	4e3b      	ldr	r6, [pc, #236]	; (101c770 <LP_APP_bStart_load_profile+0x2fc>)
				lp.curr_data.blk_number = ( lp.curr_data.blk_number >= st_61.nbr_blks_set1 ) ? 0 : lp.curr_data.blk_number;
 101c684:	81a3      	strh	r3, [r4, #12]
				EEPROM_writer( LP_EXPECTED_BLOCK_END_TIME_ADDR, &lp.curr_data.blk_end_time, TM_FMAT_SIZE );
 101c686:	f249 20ca 	movw	r0, #37578	; 0x92ca
 101c68a:	47b0      	blx	r6
				for ( uint16_t i = 0; i < st_61.nbr_blk_ints_set1; i++ ) {
 101c68c:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 101c690:	2a00      	cmp	r2, #0
 101c692:	f000 80d9 	beq.w	101c848 <LP_APP_bStart_load_profile+0x3d4>
					if ( rtc.utc_timestamp < (blk_start_time + st_61.max_int_time_set1 * 60 * (i + 1) ) ) {
 101c696:	f89a e00d 	ldrb.w	lr, [sl, #13]
 101c69a:	f8d5 c004 	ldr.w	ip, [r5, #4]
 101c69e:	253c      	movs	r5, #60	; 0x3c
 101c6a0:	fb15 810e 	smlabb	r1, r5, lr, r8
 101c6a4:	4561      	cmp	r1, ip
 101c6a6:	f200 809d 	bhi.w	101c7e4 <LP_APP_bStart_load_profile+0x370>
 101c6aa:	fb15 110e 	smlabb	r1, r5, lr, r1
 101c6ae:	2002      	movs	r0, #2
 101c6b0:	2300      	movs	r3, #0
 101c6b2:	e003      	b.n	101c6bc <LP_APP_bStart_load_profile+0x248>
 101c6b4:	458c      	cmp	ip, r1
 101c6b6:	f0c0 8098 	bcc.w	101c7ea <LP_APP_bStart_load_profile+0x376>
 101c6ba:	4641      	mov	r1, r8
				for ( uint16_t i = 0; i < st_61.nbr_blk_ints_set1; i++ ) {
 101c6bc:	3301      	adds	r3, #1
 101c6be:	b29b      	uxth	r3, r3
 101c6c0:	4293      	cmp	r3, r2
					if ( rtc.utc_timestamp < (blk_start_time + st_61.max_int_time_set1 * 60 * (i + 1) ) ) {
 101c6c2:	4682      	mov	sl, r0
 101c6c4:	fb15 180e 	smlabb	r8, r5, lr, r1
 101c6c8:	f100 0001 	add.w	r0, r0, #1
				for ( uint16_t i = 0; i < st_61.nbr_blk_ints_set1; i++ ) {
 101c6cc:	d1f2      	bne.n	101c6b4 <LP_APP_bStart_load_profile+0x240>
 101c6ce:	1ddd      	adds	r5, r3, #7
 101c6d0:	89e0      	ldrh	r0, [r4, #14]
 101c6d2:	10ed      	asrs	r5, r5, #3
 101c6d4:	4619      	mov	r1, r3
 101c6d6:	462a      	mov	r2, r5
 101c6d8:	f100 0a01 	add.w	sl, r0, #1
 101c6dc:	4603      	mov	r3, r0
				lp.curr_data.int_end_time = lp.curr_data.blk_end_time - (st_61.nbr_blk_ints_set1 - (lp.curr_data.int_number + 1 ) ) * st_61.max_int_time_set1 * SECONDS_PER_MINUTE;
 101c6de:	eba1 010a 	sub.w	r1, r1, sl
				EEPROM_writer( st_64_addr.simple_int_status + (lp.curr_data.blk_number * ( (st_61.nbr_blk_ints_set1 + 7) / 8 )), lp.curr_data.block_simple_flags, ( (st_61.nbr_blk_ints_set1 + 7) / 8 ) );
 101c6e2:	f8d9 0008 	ldr.w	r0, [r9, #8]
 101c6e6:	f8b4 800c 	ldrh.w	r8, [r4, #12]
				memset( &lp.curr_data.block_simple_flags, 0, sizeof(lp.curr_data.block_simple_flags) );
 101c6ea:	f8df c08c 	ldr.w	ip, [pc, #140]	; 101c778 <LP_APP_bStart_load_profile+0x304>
				st_63.nbr_valid_int = lp.curr_data.int_number;
 101c6ee:	81fb      	strh	r3, [r7, #14]
				lp.curr_data.int_end_time = lp.curr_data.blk_end_time - (st_61.nbr_blk_ints_set1 - (lp.curr_data.int_number + 1 ) ) * st_61.max_int_time_set1 * SECONDS_PER_MINUTE;
 101c6f0:	fb0e fe01 	mul.w	lr, lr, r1
 101c6f4:	6961      	ldr	r1, [r4, #20]
 101c6f6:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
				EEPROM_writer( st_64_addr.simple_int_status + (lp.curr_data.blk_number * ( (st_61.nbr_blk_ints_set1 + 7) / 8 )), lp.curr_data.block_simple_flags, ( (st_61.nbr_blk_ints_set1 + 7) / 8 ) );
 101c6fa:	fb05 0008 	mla	r0, r5, r8, r0
				memset( &lp.curr_data.block_simple_flags, 0, sizeof(lp.curr_data.block_simple_flags) );
 101c6fe:	2500      	movs	r5, #0
				lp.curr_data.int_end_time = lp.curr_data.blk_end_time - (st_61.nbr_blk_ints_set1 - (lp.curr_data.int_number + 1 ) ) * st_61.max_int_time_set1 * SECONDS_PER_MINUTE;
 101c700:	eba1 038e 	sub.w	r3, r1, lr, lsl #2
				memset( &lp.curr_data.block_simple_flags, 0, sizeof(lp.curr_data.block_simple_flags) );
 101c704:	f8ac 5004 	strh.w	r5, [ip, #4]
				EEPROM_writer( st_64_addr.simple_int_status + (lp.curr_data.blk_number * ( (st_61.nbr_blk_ints_set1 + 7) / 8 )), lp.curr_data.block_simple_flags, ( (st_61.nbr_blk_ints_set1 + 7) / 8 ) );
 101c708:	4661      	mov	r1, ip
				memset( &lp.curr_data.block_simple_flags, 0, sizeof(lp.curr_data.block_simple_flags) );
 101c70a:	f8c4 501f 	str.w	r5, [r4, #31]
				lp.curr_data.int_end_time = lp.curr_data.blk_end_time - (st_61.nbr_blk_ints_set1 - (lp.curr_data.int_number + 1 ) ) * st_61.max_int_time_set1 * SECONDS_PER_MINUTE;
 101c70e:	6123      	str	r3, [r4, #16]
				EEPROM_writer( st_64_addr.simple_int_status + (lp.curr_data.blk_number * ( (st_61.nbr_blk_ints_set1 + 7) / 8 )), lp.curr_data.block_simple_flags, ( (st_61.nbr_blk_ints_set1 + 7) / 8 ) );
 101c710:	47b0      	blx	r6
				lp.curr_data.int_elapsed_time = 0;
 101c712:	61a5      	str	r5, [r4, #24]
 101c714:	e733      	b.n	101c57e <LP_APP_bStart_load_profile+0x10a>
				if ( rtc.utc_timestamp < (blk_start_time + st_61.max_int_time_set1 * 60 * (i + 1) ) ) {
 101c716:	f04f 0901 	mov.w	r9, #1
 101c71a:	1dd5      	adds	r5, r2, #7
 101c71c:	10ed      	asrs	r5, r5, #3
 101c71e:	4611      	mov	r1, r2
					lp.curr_data.int_number = i;
 101c720:	f8a4 800e 	strh.w	r8, [r4, #14]
 101c724:	462a      	mov	r2, r5
					break;
 101c726:	e70e      	b.n	101c546 <LP_APP_bStart_load_profile+0xd2>
				blk_start_time = lp.curr_data.blk_end_time - (60 * st_61.max_int_time_set1 * st_61.nbr_blk_ints_set1);
 101c728:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 101c72c:	9d02      	ldr	r5, [sp, #8]
 101c72e:	9201      	str	r2, [sp, #4]
				for ( lp.curr_data.int_number = 0; lp.curr_data.int_number < st_61.nbr_blk_ints_set1; lp.curr_data.int_number++ ) {
 101c730:	81e6      	strh	r6, [r4, #14]
				blk_start_time = lp.curr_data.blk_end_time - (60 * st_61.max_int_time_set1 * st_61.nbr_blk_ints_set1);
 101c732:	4611      	mov	r1, r2
 101c734:	fb02 501e 	mls	r0, r2, lr, r5
				for ( lp.curr_data.int_number = 0; lp.curr_data.int_number < st_61.nbr_blk_ints_set1; lp.curr_data.int_number++ ) {
 101c738:	2a00      	cmp	r2, #0
 101c73a:	f000 808d 	beq.w	101c858 <LP_APP_bStart_load_profile+0x3e4>
					if ( rtc.utc_timestamp < (blk_start_time + st_61.max_int_time_set1 * 60 * (lp.curr_data.int_number + 1) ) ) {
 101c73e:	4470      	add	r0, lr
 101c740:	4283      	cmp	r3, r0
 101c742:	f0c0 808b 	bcc.w	101c85c <LP_APP_bStart_load_profile+0x3e8>
 101c746:	9a01      	ldr	r2, [sp, #4]
 101c748:	9603      	str	r6, [sp, #12]
 101c74a:	3a01      	subs	r2, #1
 101c74c:	b292      	uxth	r2, r2
 101c74e:	3202      	adds	r2, #2
 101c750:	4611      	mov	r1, r2
 101c752:	4470      	add	r0, lr
 101c754:	2202      	movs	r2, #2
 101c756:	468b      	mov	fp, r1
 101c758:	e01b      	b.n	101c792 <LP_APP_bStart_load_profile+0x31e>
 101c75a:	bf00      	nop
 101c75c:	200166c8 	.word	0x200166c8
 101c760:	20017160 	.word	0x20017160
 101c764:	20016744 	.word	0x20016744
 101c768:	0101c441 	.word	0x0101c441
 101c76c:	88888889 	.word	0x88888889
 101c770:	01017509 	.word	0x01017509
 101c774:	20016754 	.word	0x20016754
 101c778:	200166e7 	.word	0x200166e7
 101c77c:	0101b2a9 	.word	0x0101b2a9
 101c780:	200166dc 	.word	0x200166dc
 101c784:	200166b8 	.word	0x200166b8
 101c788:	01017511 	.word	0x01017511
 101c78c:	4283      	cmp	r3, r0
 101c78e:	d332      	bcc.n	101c7f6 <LP_APP_bStart_load_profile+0x382>
 101c790:	4630      	mov	r0, r6
 101c792:	1e51      	subs	r1, r2, #1
				for ( lp.curr_data.int_number = 0; lp.curr_data.int_number < st_61.nbr_blk_ints_set1; lp.curr_data.int_number++ ) {
 101c794:	455a      	cmp	r2, fp
					if ( rtc.utc_timestamp < (blk_start_time + st_61.max_int_time_set1 * 60 * (lp.curr_data.int_number + 1) ) ) {
 101c796:	4615      	mov	r5, r2
 101c798:	b289      	uxth	r1, r1
 101c79a:	eb0e 0600 	add.w	r6, lr, r0
 101c79e:	f102 0201 	add.w	r2, r2, #1
				for ( lp.curr_data.int_number = 0; lp.curr_data.int_number < st_61.nbr_blk_ints_set1; lp.curr_data.int_number++ ) {
 101c7a2:	d1f3      	bne.n	101c78c <LP_APP_bStart_load_profile+0x318>
 101c7a4:	9e03      	ldr	r6, [sp, #12]
 101c7a6:	81e1      	strh	r1, [r4, #14]
 101c7a8:	1c4d      	adds	r5, r1, #1
				lp.curr_data.int_end_time = lp.curr_data.blk_end_time - (st_61.nbr_blk_ints_set1 - (lp.curr_data.int_number + 1 ) ) * st_61.max_int_time_set1 * SECONDS_PER_MINUTE;
 101c7aa:	9b01      	ldr	r3, [sp, #4]
 101c7ac:	9a02      	ldr	r2, [sp, #8]
				st_63.nbr_valid_int = lp.curr_data.int_number;
 101c7ae:	81f9      	strh	r1, [r7, #14]
				lp.curr_data.int_end_time = lp.curr_data.blk_end_time - (st_61.nbr_blk_ints_set1 - (lp.curr_data.int_number + 1 ) ) * st_61.max_int_time_set1 * SECONDS_PER_MINUTE;
 101c7b0:	1b5d      	subs	r5, r3, r5
 101c7b2:	fb0c f505 	mul.w	r5, ip, r5
				if ( lp.curr_data.int_number == lp.last_data.int_number ) {
 101c7b6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
				lp.curr_data.int_end_time = lp.curr_data.blk_end_time - (st_61.nbr_blk_ints_set1 - (lp.curr_data.int_number + 1 ) ) * st_61.max_int_time_set1 * SECONDS_PER_MINUTE;
 101c7b8:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 101c7bc:	eba2 0585 	sub.w	r5, r2, r5, lsl #2
				if ( lp.curr_data.int_number == lp.last_data.int_number ) {
 101c7c0:	428b      	cmp	r3, r1
				lp.curr_data.int_elapsed_time = 0;
 101c7c2:	f04f 0200 	mov.w	r2, #0
				lp.curr_data.int_end_time = lp.curr_data.blk_end_time - (st_61.nbr_blk_ints_set1 - (lp.curr_data.int_number + 1 ) ) * st_61.max_int_time_set1 * SECONDS_PER_MINUTE;
 101c7c6:	6125      	str	r5, [r4, #16]
				lp.curr_data.int_elapsed_time = 0;
 101c7c8:	61a2      	str	r2, [r4, #24]
				if ( lp.curr_data.int_number == lp.last_data.int_number ) {
 101c7ca:	d020      	beq.n	101c80e <LP_APP_bStart_load_profile+0x39a>
				uint8_t nbr_set_bytes = ( (st_61.nbr_blk_ints_set1 + 7) / 8 );	
 101c7cc:	9a01      	ldr	r2, [sp, #4]
				EEPROM_reader( st_64_addr.simple_int_status + (lp.curr_data.blk_number * nbr_set_bytes), &lp.curr_data.block_simple_flags, nbr_set_bytes );
 101c7ce:	f8d9 3008 	ldr.w	r3, [r9, #8]
 101c7d2:	89a0      	ldrh	r0, [r4, #12]
 101c7d4:	4923      	ldr	r1, [pc, #140]	; (101c864 <LP_APP_bStart_load_profile+0x3f0>)
				uint8_t nbr_set_bytes = ( (st_61.nbr_blk_ints_set1 + 7) / 8 );	
 101c7d6:	3207      	adds	r2, #7
 101c7d8:	f3c2 02c7 	ubfx	r2, r2, #3, #8
				EEPROM_reader( st_64_addr.simple_int_status + (lp.curr_data.blk_number * nbr_set_bytes), &lp.curr_data.block_simple_flags, nbr_set_bytes );
 101c7dc:	fb02 3000 	mla	r0, r2, r0, r3
 101c7e0:	47c0      	blx	r8
 101c7e2:	e6cc      	b.n	101c57e <LP_APP_bStart_load_profile+0x10a>
					if ( rtc.utc_timestamp < (blk_start_time + st_61.max_int_time_set1 * 60 * (i + 1) ) ) {
 101c7e4:	f04f 0a01 	mov.w	sl, #1
				for ( uint16_t i = 0; i < st_61.nbr_blk_ints_set1; i++ ) {
 101c7e8:	2300      	movs	r3, #0
 101c7ea:	1dd5      	adds	r5, r2, #7
 101c7ec:	10ed      	asrs	r5, r5, #3
 101c7ee:	4611      	mov	r1, r2
						lp.curr_data.int_number = i;
 101c7f0:	81e3      	strh	r3, [r4, #14]
 101c7f2:	462a      	mov	r2, r5
						break;
 101c7f4:	e773      	b.n	101c6de <LP_APP_bStart_load_profile+0x26a>
 101c7f6:	9e03      	ldr	r6, [sp, #12]
 101c7f8:	81e1      	strh	r1, [r4, #14]
 101c7fa:	e7d6      	b.n	101c7aa <LP_APP_bStart_load_profile+0x336>
 101c7fc:	f8b4 800e 	ldrh.w	r8, [r4, #14]
 101c800:	f899 e00d 	ldrb.w	lr, [r9, #13]
			for ( uint16_t i = 0; i < st_61.nbr_blk_ints_set1; i++ ) {
 101c804:	4615      	mov	r5, r2
 101c806:	4611      	mov	r1, r2
 101c808:	f108 0901 	add.w	r9, r8, #1
 101c80c:	e69b      	b.n	101c546 <LP_APP_bStart_load_profile+0xd2>
					EEPROM_reader( LP_INTERVAL_TIME_ADDR, &lp.curr_data.int_elapsed_time, TM_FMAT_SIZE);
 101c80e:	2204      	movs	r2, #4
 101c810:	4915      	ldr	r1, [pc, #84]	; (101c868 <LP_APP_bStart_load_profile+0x3f4>)
 101c812:	f249 20ce 	movw	r0, #37582	; 0x92ce
 101c816:	47c0      	blx	r8
 * \retval void
 ******************************************************************************
 */
void LP_APP_vRead_eeprom_pulse_recorder(void) {

	for ( uint8_t i = 0; i < st_61.nbr_chns_set1; i++) {
 101c818:	f89a 300c 	ldrb.w	r3, [sl, #12]
 101c81c:	b183      	cbz	r3, 101c840 <LP_APP_bStart_load_profile+0x3cc>
		EEPROM_reader( LP_BACKUP_PULSE_RECORDER_ADDR + i*4, &lp.pulse_recorder[i], 4);
 101c81e:	2704      	movs	r7, #4
 101c820:	f249 25d6 	movw	r5, #37590	; 0x92d6
 101c824:	f106 0113 	add.w	r1, r6, #19
 101c828:	fb07 5006 	mla	r0, r7, r6, r5
 101c82c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 101c830:	2204      	movs	r2, #4
 101c832:	47c0      	blx	r8
	for ( uint8_t i = 0; i < st_61.nbr_chns_set1; i++) {
 101c834:	3601      	adds	r6, #1
 101c836:	f89a 300c 	ldrb.w	r3, [sl, #12]
 101c83a:	b2f6      	uxtb	r6, r6
 101c83c:	42b3      	cmp	r3, r6
 101c83e:	d8f1      	bhi.n	101c824 <LP_APP_bStart_load_profile+0x3b0>
 101c840:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 101c844:	9301      	str	r3, [sp, #4]
 101c846:	e7c1      	b.n	101c7cc <LP_APP_bStart_load_profile+0x358>
 101c848:	89e3      	ldrh	r3, [r4, #14]
 101c84a:	f89a e00d 	ldrb.w	lr, [sl, #13]
				for ( uint16_t i = 0; i < st_61.nbr_blk_ints_set1; i++ ) {
 101c84e:	4615      	mov	r5, r2
 101c850:	4611      	mov	r1, r2
 101c852:	f103 0a01 	add.w	sl, r3, #1
 101c856:	e742      	b.n	101c6de <LP_APP_bStart_load_profile+0x26a>
				for ( lp.curr_data.int_number = 0; lp.curr_data.int_number < st_61.nbr_blk_ints_set1; lp.curr_data.int_number++ ) {
 101c858:	2501      	movs	r5, #1
 101c85a:	e7a6      	b.n	101c7aa <LP_APP_bStart_load_profile+0x336>
					if ( rtc.utc_timestamp < (blk_start_time + st_61.max_int_time_set1 * 60 * (lp.curr_data.int_number + 1) ) ) {
 101c85c:	2501      	movs	r5, #1
				for ( lp.curr_data.int_number = 0; lp.curr_data.int_number < st_61.nbr_blk_ints_set1; lp.curr_data.int_number++ ) {
 101c85e:	4631      	mov	r1, r6
 101c860:	e7a3      	b.n	101c7aa <LP_APP_bStart_load_profile+0x336>
 101c862:	bf00      	nop
 101c864:	200166e7 	.word	0x200166e7
 101c868:	200166e0 	.word	0x200166e0

0101c86c <LP_APP_vSynchronize_clock>:
void LP_APP_vSynchronize_clock(uint32_t old_time, uint32_t new_time) {
 101c86c:	b570      	push	{r4, r5, r6, lr}
	if ( lp.is_active == true ) {
 101c86e:	4c0d      	ldr	r4, [pc, #52]	; (101c8a4 <LP_APP_vSynchronize_clock+0x38>)
 101c870:	7823      	ldrb	r3, [r4, #0]
 101c872:	b193      	cbz	r3, 101c89a <LP_APP_vSynchronize_clock+0x2e>
		if (old_time != new_time) {
 101c874:	4288      	cmp	r0, r1
 101c876:	d00f      	beq.n	101c898 <LP_APP_vSynchronize_clock+0x2c>
			lp.curr_data.extended_int_status[0] |= (new_time > old_time) ? COMMON_CLOCK_SET_FWD_FLAG_bm : COMMON_CLOCK_SET_BKWD_FLAG_bm;
 101c878:	f994 301c 	ldrsb.w	r3, [r4, #28]
 101c87c:	4a0a      	ldr	r2, [pc, #40]	; (101c8a8 <LP_APP_vSynchronize_clock+0x3c>)
 101c87e:	bf2c      	ite	cs
 101c880:	f06f 057f 	mvncs.w	r5, #127	; 0x7f
 101c884:	2540      	movcc	r5, #64	; 0x40
 101c886:	432b      	orrs	r3, r5
 101c888:	7723      	strb	r3, [r4, #28]
 101c88a:	4790      	blx	r2
			LP_APP_bStart_load_profile();
 101c88c:	4b07      	ldr	r3, [pc, #28]	; (101c8ac <LP_APP_vSynchronize_clock+0x40>)
 101c88e:	4798      	blx	r3
			lp.curr_data.extended_int_status[0] |= (new_time > old_time) ? COMMON_CLOCK_SET_FWD_FLAG_bm : COMMON_CLOCK_SET_BKWD_FLAG_bm;
 101c890:	7f23      	ldrb	r3, [r4, #28]
 101c892:	431d      	orrs	r5, r3
 101c894:	7725      	strb	r5, [r4, #28]
 101c896:	bd70      	pop	{r4, r5, r6, pc}
 101c898:	bd70      	pop	{r4, r5, r6, pc}
		LP_APP_bStart_load_profile();
 101c89a:	4b04      	ldr	r3, [pc, #16]	; (101c8ac <LP_APP_vSynchronize_clock+0x40>)
}
 101c89c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		LP_APP_bStart_load_profile();
 101c8a0:	4718      	bx	r3
 101c8a2:	bf00      	nop
 101c8a4:	200166c8 	.word	0x200166c8
 101c8a8:	0101c3a9 	.word	0x0101c3a9
 101c8ac:	0101c475 	.word	0x0101c475

0101c8b0 <LP_APP_vPower_fail_detection>:
 * \retval void
 ******************************************************************************
 */
void LP_APP_vPower_fail_detection(void) {

	if ( lp.is_active ) {
 101c8b0:	4b04      	ldr	r3, [pc, #16]	; (101c8c4 <LP_APP_vPower_fail_detection+0x14>)
 101c8b2:	781a      	ldrb	r2, [r3, #0]
 101c8b4:	b902      	cbnz	r2, 101c8b8 <LP_APP_vPower_fail_detection+0x8>
 101c8b6:	4770      	bx	lr
		
		lp.curr_data.extended_int_status[0] |= COMMON_POWER_FAIL_FLAG_bm;
 101c8b8:	7f1a      	ldrb	r2, [r3, #28]
 101c8ba:	4903      	ldr	r1, [pc, #12]	; (101c8c8 <LP_APP_vPower_fail_detection+0x18>)
 101c8bc:	f042 0220 	orr.w	r2, r2, #32
 101c8c0:	771a      	strb	r2, [r3, #28]
 101c8c2:	4708      	bx	r1
 101c8c4:	200166c8 	.word	0x200166c8
 101c8c8:	0101c3a9 	.word	0x0101c3a9

0101c8cc <LP_APP_vGet_data_block_circ_table>:
 * 
 * \param void
 * \retval void
 ******************************************************************************
 */
void LP_APP_vGet_data_block_circ_table(uint16_t block_offset, uint16_t block_count, uint8_t* data_buffer) {
 101c8cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	static uint32_t eeprom_addr;
	uint8_t nbr_set_bytes;
	
	k = 0;
	
	for ( i = block_offset; i < (block_offset + block_count); i++ ) {
 101c8d0:	180b      	adds	r3, r1, r0
void LP_APP_vGet_data_block_circ_table(uint16_t block_offset, uint16_t block_count, uint8_t* data_buffer) {
 101c8d2:	b083      	sub	sp, #12
	for ( i = block_offset; i < (block_offset + block_count); i++ ) {
 101c8d4:	4298      	cmp	r0, r3
void LP_APP_vGet_data_block_circ_table(uint16_t block_offset, uint16_t block_count, uint8_t* data_buffer) {
 101c8d6:	9000      	str	r0, [sp, #0]
	for ( i = block_offset; i < (block_offset + block_count); i++ ) {
 101c8d8:	9301      	str	r3, [sp, #4]
void LP_APP_vGet_data_block_circ_table(uint16_t block_offset, uint16_t block_count, uint8_t* data_buffer) {
 101c8da:	4691      	mov	r9, r2
	for ( i = block_offset; i < (block_offset + block_count); i++ ) {
 101c8dc:	da6d      	bge.n	101c9ba <LP_APP_vGet_data_block_circ_table+0xee>
 101c8de:	f8df 8144 	ldr.w	r8, [pc, #324]	; 101ca24 <LP_APP_vGet_data_block_circ_table+0x158>
 101c8e2:	4f4d      	ldr	r7, [pc, #308]	; (101ca18 <LP_APP_vGet_data_block_circ_table+0x14c>)
 101c8e4:	4e4d      	ldr	r6, [pc, #308]	; (101ca1c <LP_APP_vGet_data_block_circ_table+0x150>)
 101c8e6:	f04f 0b00 	mov.w	fp, #0

		eeprom_addr = st_64_addr.blk_end_time + (i * TM_FMAT_SIZE);
		EEPROM_reader( eeprom_addr, &data_buffer[k], TM_FMAT_SIZE);
 101c8ea:	9b00      	ldr	r3, [sp, #0]
		eeprom_addr = st_64_addr.blk_end_time + (i * TM_FMAT_SIZE);
 101c8ec:	f8d8 0000 	ldr.w	r0, [r8]
		EEPROM_reader( eeprom_addr, &data_buffer[k], TM_FMAT_SIZE);
 101c8f0:	2204      	movs	r2, #4
 101c8f2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 101c8f6:	eb09 010b 	add.w	r1, r9, fp
 101c8fa:	47b8      	blx	r7
		k += TM_FMAT_SIZE;
		
		for ( j = 0; j < st_61.nbr_chns_set1; j++ ) {
 101c8fc:	7b32      	ldrb	r2, [r6, #12]
		k += TM_FMAT_SIZE;
 101c8fe:	f10b 0304 	add.w	r3, fp, #4
 101c902:	fa1f fb83 	uxth.w	fp, r3
		for ( j = 0; j < st_61.nbr_chns_set1; j++ ) {
 101c906:	2a00      	cmp	r2, #0
 101c908:	f000 8083 	beq.w	101ca12 <LP_APP_vGet_data_block_circ_table+0x146>

			if ( (st_61.lp_flags & BLK_END_READ_FLAG_bm) == BLK_END_READ_FLAG_bm ) {

				eeprom_addr = st_64_addr.block_end_read + (i * NI_FMAT1_SIZE * st_61.nbr_chns_set1) + (j * NI_FMAT1_SIZE);
 101c90c:	9b00      	ldr	r3, [sp, #0]
 101c90e:	88b1      	ldrh	r1, [r6, #4]
 101c910:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 101c914:	0064      	lsls	r4, r4, #1
 101c916:	2500      	movs	r5, #0
 101c918:	e004      	b.n	101c924 <LP_APP_vGet_data_block_circ_table+0x58>
		for ( j = 0; j < st_61.nbr_chns_set1; j++ ) {
 101c91a:	3501      	adds	r5, #1
 101c91c:	7b32      	ldrb	r2, [r6, #12]
 101c91e:	b2ad      	uxth	r5, r5
 101c920:	42aa      	cmp	r2, r5
 101c922:	d917      	bls.n	101c954 <LP_APP_vGet_data_block_circ_table+0x88>
			if ( (st_61.lp_flags & BLK_END_READ_FLAG_bm) == BLK_END_READ_FLAG_bm ) {
 101c924:	06c8      	lsls	r0, r1, #27
 101c926:	d5f8      	bpl.n	101c91a <LP_APP_vGet_data_block_circ_table+0x4e>
				eeprom_addr = st_64_addr.block_end_read + (i * NI_FMAT1_SIZE * st_61.nbr_chns_set1) + (j * NI_FMAT1_SIZE);
 101c928:	f8d8 3004 	ldr.w	r3, [r8, #4]
 101c92c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 101c930:	fb04 3202 	mla	r2, r4, r2, r3
				EEPROM_reader( eeprom_addr, &data_buffer[k], NI_FMAT1_SIZE);
 101c934:	eb09 010b 	add.w	r1, r9, fp
 101c938:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 101c93c:	2206      	movs	r2, #6
 101c93e:	47b8      	blx	r7
		for ( j = 0; j < st_61.nbr_chns_set1; j++ ) {
 101c940:	3501      	adds	r5, #1
 101c942:	7b32      	ldrb	r2, [r6, #12]
 101c944:	88b1      	ldrh	r1, [r6, #4]
 101c946:	b2ad      	uxth	r5, r5
				k += NI_FMAT1_SIZE;
 101c948:	f10b 0b06 	add.w	fp, fp, #6
		for ( j = 0; j < st_61.nbr_chns_set1; j++ ) {
 101c94c:	42aa      	cmp	r2, r5
				k += NI_FMAT1_SIZE;
 101c94e:	fa1f fb8b 	uxth.w	fp, fp
		for ( j = 0; j < st_61.nbr_chns_set1; j++ ) {
 101c952:	d8e7      	bhi.n	101c924 <LP_APP_vGet_data_block_circ_table+0x58>
			}
		}
		
		if ( (st_61.lp_flags & SIMPLE_INT_STATUS_FLAG_bm) == SIMPLE_INT_STATUS_FLAG_bm ) {
 101c954:	050a      	lsls	r2, r1, #20
 101c956:	d44a      	bmi.n	101c9ee <LP_APP_vGet_data_block_circ_table+0x122>
			eeprom_addr = st_64_addr.simple_int_status + (i * nbr_set_bytes);
			EEPROM_reader( eeprom_addr, &data_buffer[k], nbr_set_bytes);
			k += nbr_set_bytes;
		}
		
		for ( j = 0; j < st_61.nbr_blk_ints_set1; j++ ) {
 101c958:	8972      	ldrh	r2, [r6, #10]
 101c95a:	b32a      	cbz	r2, 101c9a8 <LP_APP_vGet_data_block_circ_table+0xdc>
 101c95c:	9b00      	ldr	r3, [sp, #0]
 101c95e:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
 101c962:	ea4f 1a4a 	mov.w	sl, sl, lsl #5
 101c966:	2500      	movs	r5, #0

			if ( (st_61.lp_flags & EXTENDED_INT_STATUS_FLAG_bm) == EXTENDED_INT_STATUS_FLAG_bm ) {
 101c968:	88b2      	ldrh	r2, [r6, #4]
 101c96a:	0553      	lsls	r3, r2, #21
 101c96c:	d428      	bmi.n	101c9c0 <LP_APP_vGet_data_block_circ_table+0xf4>
				eeprom_addr = st_64_addr.extended_int_status + (i * nbr_set_bytes * MAX_NBR_BLK_INTS_SET1) + (j * nbr_set_bytes);
				EEPROM_reader( eeprom_addr, &data_buffer[k], nbr_set_bytes);
				k += nbr_set_bytes;
			}
			
			for ( l = 0; l < st_61.nbr_chns_set1; l++ ) {
 101c96e:	7b32      	ldrb	r2, [r6, #12]
 101c970:	b1aa      	cbz	r2, 101c99e <LP_APP_vGet_data_block_circ_table+0xd2>
 101c972:	2400      	movs	r4, #0

				eeprom_addr = st_64_addr.int_data + (i * MAX_NBR_BLK_INTS_SET1 * st_61.nbr_chns_set1 * 2) + (j * st_61.nbr_chns_set1 * 2) + (l * 2);
 101c974:	f8d8 3010 	ldr.w	r3, [r8, #16]
 101c978:	fb05 4002 	mla	r0, r5, r2, r4
 101c97c:	fb0a 3202 	mla	r2, sl, r2, r3
				EEPROM_reader( eeprom_addr, &data_buffer[k], 2);
 101c980:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 101c984:	eb09 010b 	add.w	r1, r9, fp
 101c988:	2202      	movs	r2, #2
 101c98a:	47b8      	blx	r7
			for ( l = 0; l < st_61.nbr_chns_set1; l++ ) {
 101c98c:	3401      	adds	r4, #1
 101c98e:	7b32      	ldrb	r2, [r6, #12]
 101c990:	b2a4      	uxth	r4, r4
				k += 2;
 101c992:	f10b 0b02 	add.w	fp, fp, #2
			for ( l = 0; l < st_61.nbr_chns_set1; l++ ) {
 101c996:	42a2      	cmp	r2, r4
				k += 2;
 101c998:	fa1f fb8b 	uxth.w	fp, fp
			for ( l = 0; l < st_61.nbr_chns_set1; l++ ) {
 101c99c:	d8ea      	bhi.n	101c974 <LP_APP_vGet_data_block_circ_table+0xa8>
		for ( j = 0; j < st_61.nbr_blk_ints_set1; j++ ) {
 101c99e:	3501      	adds	r5, #1
 101c9a0:	8972      	ldrh	r2, [r6, #10]
 101c9a2:	b2ad      	uxth	r5, r5
 101c9a4:	42aa      	cmp	r2, r5
 101c9a6:	d8df      	bhi.n	101c968 <LP_APP_vGet_data_block_circ_table+0x9c>
			}
		}
		
		WATCHDOG_APP_vRestart();
 101c9a8:	4b1d      	ldr	r3, [pc, #116]	; (101ca20 <LP_APP_vGet_data_block_circ_table+0x154>)
 101c9aa:	4798      	blx	r3
	for ( i = block_offset; i < (block_offset + block_count); i++ ) {
 101c9ac:	9b00      	ldr	r3, [sp, #0]
 101c9ae:	9a01      	ldr	r2, [sp, #4]
 101c9b0:	3301      	adds	r3, #1
 101c9b2:	b29b      	uxth	r3, r3
 101c9b4:	4293      	cmp	r3, r2
 101c9b6:	9300      	str	r3, [sp, #0]
 101c9b8:	db97      	blt.n	101c8ea <LP_APP_vGet_data_block_circ_table+0x1e>
	}
}
 101c9ba:	b003      	add	sp, #12
 101c9bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				nbr_set_bytes = ( (st_61.nbr_chns_set1 / 2) + 1 );
 101c9c0:	7b34      	ldrb	r4, [r6, #12]
				eeprom_addr = st_64_addr.extended_int_status + (i * nbr_set_bytes * MAX_NBR_BLK_INTS_SET1) + (j * nbr_set_bytes);
 101c9c2:	9b00      	ldr	r3, [sp, #0]
 101c9c4:	f8d8 000c 	ldr.w	r0, [r8, #12]
				nbr_set_bytes = ( (st_61.nbr_chns_set1 / 2) + 1 );
 101c9c8:	0864      	lsrs	r4, r4, #1
 101c9ca:	3401      	adds	r4, #1
				eeprom_addr = st_64_addr.extended_int_status + (i * nbr_set_bytes * MAX_NBR_BLK_INTS_SET1) + (j * nbr_set_bytes);
 101c9cc:	fb03 f204 	mul.w	r2, r3, r4
 101c9d0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 101c9d4:	eb00 1002 	add.w	r0, r0, r2, lsl #4
				EEPROM_reader( eeprom_addr, &data_buffer[k], nbr_set_bytes);
 101c9d8:	eb09 010b 	add.w	r1, r9, fp
 101c9dc:	fb04 0005 	mla	r0, r4, r5, r0
 101c9e0:	4622      	mov	r2, r4
 101c9e2:	47b8      	blx	r7
				k += nbr_set_bytes;
 101c9e4:	eb0b 0304 	add.w	r3, fp, r4
 101c9e8:	fa1f fb83 	uxth.w	fp, r3
 101c9ec:	e7bf      	b.n	101c96e <LP_APP_vGet_data_block_circ_table+0xa2>
			nbr_set_bytes = ( (st_61.nbr_blk_ints_set1 + 7) / 8 );
 101c9ee:	8974      	ldrh	r4, [r6, #10]
			EEPROM_reader( eeprom_addr, &data_buffer[k], nbr_set_bytes);
 101c9f0:	9b00      	ldr	r3, [sp, #0]
			eeprom_addr = st_64_addr.simple_int_status + (i * nbr_set_bytes);
 101c9f2:	f8d8 0008 	ldr.w	r0, [r8, #8]
			nbr_set_bytes = ( (st_61.nbr_blk_ints_set1 + 7) / 8 );
 101c9f6:	3407      	adds	r4, #7
 101c9f8:	f3c4 04c7 	ubfx	r4, r4, #3, #8
			EEPROM_reader( eeprom_addr, &data_buffer[k], nbr_set_bytes);
 101c9fc:	fb03 0004 	mla	r0, r3, r4, r0
 101ca00:	eb09 010b 	add.w	r1, r9, fp
 101ca04:	4622      	mov	r2, r4
 101ca06:	47b8      	blx	r7
			k += nbr_set_bytes;
 101ca08:	eb0b 0304 	add.w	r3, fp, r4
 101ca0c:	fa1f fb83 	uxth.w	fp, r3
 101ca10:	e7a2      	b.n	101c958 <LP_APP_vGet_data_block_circ_table+0x8c>
 101ca12:	88b1      	ldrh	r1, [r6, #4]
 101ca14:	e79e      	b.n	101c954 <LP_APP_vGet_data_block_circ_table+0x88>
 101ca16:	bf00      	nop
 101ca18:	01017511 	.word	0x01017511
 101ca1c:	200166b8 	.word	0x200166b8
 101ca20:	0101603d 	.word	0x0101603d
 101ca24:	20016754 	.word	0x20016754

0101ca28 <LP_APP_vGet_data_block_fifo_table>:
 * 
 * \param void
 * \retval void
 ******************************************************************************
 */
extern void LP_APP_vGet_data_block_fifo_table(uint16_t block_offset, uint16_t block_count, uint8_t* data_buffer) {
 101ca28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	static uint32_t eeprom_addr;
	uint8_t nbr_set_bytes;
	
	k = 0;
	
	for ( m = block_offset; m < (block_offset + block_count); m++ ) {
 101ca2c:	180b      	adds	r3, r1, r0
extern void LP_APP_vGet_data_block_fifo_table(uint16_t block_offset, uint16_t block_count, uint8_t* data_buffer) {
 101ca2e:	b085      	sub	sp, #20
	for ( m = block_offset; m < (block_offset + block_count); m++ ) {
 101ca30:	4298      	cmp	r0, r3
extern void LP_APP_vGet_data_block_fifo_table(uint16_t block_offset, uint16_t block_count, uint8_t* data_buffer) {
 101ca32:	9002      	str	r0, [sp, #8]
	for ( m = block_offset; m < (block_offset + block_count); m++ ) {
 101ca34:	9303      	str	r3, [sp, #12]
extern void LP_APP_vGet_data_block_fifo_table(uint16_t block_offset, uint16_t block_count, uint8_t* data_buffer) {
 101ca36:	4691      	mov	r9, r2
	for ( m = block_offset; m < (block_offset + block_count); m++ ) {
 101ca38:	da77      	bge.n	101cb2a <LP_APP_vGet_data_block_fifo_table+0x102>
 101ca3a:	4e56      	ldr	r6, [pc, #344]	; (101cb94 <LP_APP_vGet_data_block_fifo_table+0x16c>)
 101ca3c:	f8df 8164 	ldr.w	r8, [pc, #356]	; 101cba4 <LP_APP_vGet_data_block_fifo_table+0x17c>
 101ca40:	4f55      	ldr	r7, [pc, #340]	; (101cb98 <LP_APP_vGet_data_block_fifo_table+0x170>)
 101ca42:	f04f 0b00 	mov.w	fp, #0

		i = st_63.last_block_element - m;
 101ca46:	4b55      	ldr	r3, [pc, #340]	; (101cb9c <LP_APP_vGet_data_block_fifo_table+0x174>)
 101ca48:	889a      	ldrh	r2, [r3, #4]
 101ca4a:	9b02      	ldr	r3, [sp, #8]
 101ca4c:	1ad2      	subs	r2, r2, r3
 101ca4e:	b292      	uxth	r2, r2
 101ca50:	b213      	sxth	r3, r2
		if ( i < 0 ) { i += st_61.nbr_blks_set1; }
 101ca52:	2b00      	cmp	r3, #0
		i = st_63.last_block_element - m;
 101ca54:	9301      	str	r3, [sp, #4]
		if ( i < 0 ) { i += st_61.nbr_blks_set1; }
 101ca56:	f2c0 8095 	blt.w	101cb84 <LP_APP_vGet_data_block_fifo_table+0x15c>
		
		eeprom_addr = st_64_addr.blk_end_time + (i * TM_FMAT_SIZE);
		EEPROM_reader( eeprom_addr, &data_buffer[k], TM_FMAT_SIZE);
 101ca5a:	9b01      	ldr	r3, [sp, #4]
		eeprom_addr = st_64_addr.blk_end_time + (i * TM_FMAT_SIZE);
 101ca5c:	f8d8 0000 	ldr.w	r0, [r8]
		EEPROM_reader( eeprom_addr, &data_buffer[k], TM_FMAT_SIZE);
 101ca60:	2204      	movs	r2, #4
 101ca62:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 101ca66:	eb09 010b 	add.w	r1, r9, fp
 101ca6a:	47b8      	blx	r7
		k += TM_FMAT_SIZE;
		
		for ( j = 0; j < st_61.nbr_chns_set1; j++ ) {
 101ca6c:	7b32      	ldrb	r2, [r6, #12]
		k += TM_FMAT_SIZE;
 101ca6e:	f10b 0304 	add.w	r3, fp, #4
 101ca72:	fa1f fb83 	uxth.w	fp, r3
		for ( j = 0; j < st_61.nbr_chns_set1; j++ ) {
 101ca76:	2a00      	cmp	r2, #0
 101ca78:	f000 8089 	beq.w	101cb8e <LP_APP_vGet_data_block_fifo_table+0x166>

			if ( (st_61.lp_flags & BLK_END_READ_FLAG_bm) == BLK_END_READ_FLAG_bm ) {

				eeprom_addr = st_64_addr.block_end_read + (i * NI_FMAT1_SIZE * st_61.nbr_chns_set1) + (j * NI_FMAT1_SIZE);
 101ca7c:	9b01      	ldr	r3, [sp, #4]
 101ca7e:	88b1      	ldrh	r1, [r6, #4]
 101ca80:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 101ca84:	0064      	lsls	r4, r4, #1
 101ca86:	2500      	movs	r5, #0
 101ca88:	e004      	b.n	101ca94 <LP_APP_vGet_data_block_fifo_table+0x6c>
		for ( j = 0; j < st_61.nbr_chns_set1; j++ ) {
 101ca8a:	3501      	adds	r5, #1
 101ca8c:	7b32      	ldrb	r2, [r6, #12]
 101ca8e:	b2ad      	uxth	r5, r5
 101ca90:	42aa      	cmp	r2, r5
 101ca92:	d917      	bls.n	101cac4 <LP_APP_vGet_data_block_fifo_table+0x9c>
			if ( (st_61.lp_flags & BLK_END_READ_FLAG_bm) == BLK_END_READ_FLAG_bm ) {
 101ca94:	06c8      	lsls	r0, r1, #27
 101ca96:	d5f8      	bpl.n	101ca8a <LP_APP_vGet_data_block_fifo_table+0x62>
				eeprom_addr = st_64_addr.block_end_read + (i * NI_FMAT1_SIZE * st_61.nbr_chns_set1) + (j * NI_FMAT1_SIZE);
 101ca98:	f8d8 3004 	ldr.w	r3, [r8, #4]
 101ca9c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 101caa0:	fb04 3202 	mla	r2, r4, r2, r3
				EEPROM_reader( eeprom_addr, &data_buffer[k], NI_FMAT1_SIZE);
 101caa4:	eb09 010b 	add.w	r1, r9, fp
 101caa8:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 101caac:	2206      	movs	r2, #6
 101caae:	47b8      	blx	r7
		for ( j = 0; j < st_61.nbr_chns_set1; j++ ) {
 101cab0:	3501      	adds	r5, #1
 101cab2:	7b32      	ldrb	r2, [r6, #12]
 101cab4:	88b1      	ldrh	r1, [r6, #4]
 101cab6:	b2ad      	uxth	r5, r5
				k += NI_FMAT1_SIZE;
 101cab8:	f10b 0b06 	add.w	fp, fp, #6
		for ( j = 0; j < st_61.nbr_chns_set1; j++ ) {
 101cabc:	42aa      	cmp	r2, r5
				k += NI_FMAT1_SIZE;
 101cabe:	fa1f fb8b 	uxth.w	fp, fp
		for ( j = 0; j < st_61.nbr_chns_set1; j++ ) {
 101cac2:	d8e7      	bhi.n	101ca94 <LP_APP_vGet_data_block_fifo_table+0x6c>
			}
		}
		
		if ( (st_61.lp_flags & SIMPLE_INT_STATUS_FLAG_bm) == SIMPLE_INT_STATUS_FLAG_bm ) {
 101cac4:	050a      	lsls	r2, r1, #20
 101cac6:	d44b      	bmi.n	101cb60 <LP_APP_vGet_data_block_fifo_table+0x138>
			eeprom_addr = st_64_addr.simple_int_status + (i * nbr_set_bytes);
			EEPROM_reader( eeprom_addr, &data_buffer[k], nbr_set_bytes);
			k += nbr_set_bytes;
		}
		
		for ( j = 0; j < st_61.nbr_blk_ints_set1; j++ ) {
 101cac8:	8972      	ldrh	r2, [r6, #10]
 101caca:	b32a      	cbz	r2, 101cb18 <LP_APP_vGet_data_block_fifo_table+0xf0>
 101cacc:	9b01      	ldr	r3, [sp, #4]
 101cace:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
 101cad2:	ea4f 1a4a 	mov.w	sl, sl, lsl #5
 101cad6:	2500      	movs	r5, #0

			if ( (st_61.lp_flags & EXTENDED_INT_STATUS_FLAG_bm) == EXTENDED_INT_STATUS_FLAG_bm ) {
 101cad8:	88b2      	ldrh	r2, [r6, #4]
 101cada:	0553      	lsls	r3, r2, #21
 101cadc:	d428      	bmi.n	101cb30 <LP_APP_vGet_data_block_fifo_table+0x108>
				eeprom_addr = st_64_addr.extended_int_status + (i * nbr_set_bytes * MAX_NBR_BLK_INTS_SET1) + (j * nbr_set_bytes);
				EEPROM_reader( eeprom_addr, &data_buffer[k], nbr_set_bytes);
				k += nbr_set_bytes;
			}
			
			for ( l = 0; l < st_61.nbr_chns_set1; l++ ) {
 101cade:	7b32      	ldrb	r2, [r6, #12]
 101cae0:	b1aa      	cbz	r2, 101cb0e <LP_APP_vGet_data_block_fifo_table+0xe6>
 101cae2:	2400      	movs	r4, #0

				eeprom_addr = st_64_addr.int_data + (i * MAX_NBR_BLK_INTS_SET1 * st_61.nbr_chns_set1 * 2) + (j * st_61.nbr_chns_set1 * 2) + (l * 2);
 101cae4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 101cae8:	fb05 4002 	mla	r0, r5, r2, r4
 101caec:	fb0a 3202 	mla	r2, sl, r2, r3
				EEPROM_reader( eeprom_addr, &data_buffer[k], 2);
 101caf0:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 101caf4:	eb09 010b 	add.w	r1, r9, fp
 101caf8:	2202      	movs	r2, #2
 101cafa:	47b8      	blx	r7
			for ( l = 0; l < st_61.nbr_chns_set1; l++ ) {
 101cafc:	3401      	adds	r4, #1
 101cafe:	7b32      	ldrb	r2, [r6, #12]
 101cb00:	b2a4      	uxth	r4, r4
				k += 2;
 101cb02:	f10b 0b02 	add.w	fp, fp, #2
			for ( l = 0; l < st_61.nbr_chns_set1; l++ ) {
 101cb06:	42a2      	cmp	r2, r4
				k += 2;
 101cb08:	fa1f fb8b 	uxth.w	fp, fp
			for ( l = 0; l < st_61.nbr_chns_set1; l++ ) {
 101cb0c:	d8ea      	bhi.n	101cae4 <LP_APP_vGet_data_block_fifo_table+0xbc>
		for ( j = 0; j < st_61.nbr_blk_ints_set1; j++ ) {
 101cb0e:	3501      	adds	r5, #1
 101cb10:	8972      	ldrh	r2, [r6, #10]
 101cb12:	b2ad      	uxth	r5, r5
 101cb14:	42aa      	cmp	r2, r5
 101cb16:	d8df      	bhi.n	101cad8 <LP_APP_vGet_data_block_fifo_table+0xb0>
			}
		}
		
		WATCHDOG_APP_vRestart();
 101cb18:	4b21      	ldr	r3, [pc, #132]	; (101cba0 <LP_APP_vGet_data_block_fifo_table+0x178>)
 101cb1a:	4798      	blx	r3
	for ( m = block_offset; m < (block_offset + block_count); m++ ) {
 101cb1c:	9a02      	ldr	r2, [sp, #8]
 101cb1e:	3201      	adds	r2, #1
 101cb20:	b293      	uxth	r3, r2
 101cb22:	9a03      	ldr	r2, [sp, #12]
 101cb24:	9302      	str	r3, [sp, #8]
 101cb26:	4293      	cmp	r3, r2
 101cb28:	db8d      	blt.n	101ca46 <LP_APP_vGet_data_block_fifo_table+0x1e>
	}
}
 101cb2a:	b005      	add	sp, #20
 101cb2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				nbr_set_bytes = ( (st_61.nbr_chns_set1 / 2) + 1 );
 101cb30:	7b34      	ldrb	r4, [r6, #12]
				eeprom_addr = st_64_addr.extended_int_status + (i * nbr_set_bytes * MAX_NBR_BLK_INTS_SET1) + (j * nbr_set_bytes);
 101cb32:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 101cb36:	f8d8 000c 	ldr.w	r0, [r8, #12]
				nbr_set_bytes = ( (st_61.nbr_chns_set1 / 2) + 1 );
 101cb3a:	0864      	lsrs	r4, r4, #1
 101cb3c:	3401      	adds	r4, #1
				eeprom_addr = st_64_addr.extended_int_status + (i * nbr_set_bytes * MAX_NBR_BLK_INTS_SET1) + (j * nbr_set_bytes);
 101cb3e:	fb14 f203 	smulbb	r2, r4, r3
 101cb42:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 101cb46:	eb00 1002 	add.w	r0, r0, r2, lsl #4
				EEPROM_reader( eeprom_addr, &data_buffer[k], nbr_set_bytes);
 101cb4a:	eb09 010b 	add.w	r1, r9, fp
 101cb4e:	fb04 0005 	mla	r0, r4, r5, r0
 101cb52:	4622      	mov	r2, r4
 101cb54:	47b8      	blx	r7
				k += nbr_set_bytes;
 101cb56:	eb0b 0304 	add.w	r3, fp, r4
 101cb5a:	fa1f fb83 	uxth.w	fp, r3
 101cb5e:	e7be      	b.n	101cade <LP_APP_vGet_data_block_fifo_table+0xb6>
			nbr_set_bytes = ( (st_61.nbr_blk_ints_set1 + 7) / 8 );
 101cb60:	8974      	ldrh	r4, [r6, #10]
			EEPROM_reader( eeprom_addr, &data_buffer[k], nbr_set_bytes);
 101cb62:	9b01      	ldr	r3, [sp, #4]
			eeprom_addr = st_64_addr.simple_int_status + (i * nbr_set_bytes);
 101cb64:	f8d8 0008 	ldr.w	r0, [r8, #8]
			nbr_set_bytes = ( (st_61.nbr_blk_ints_set1 + 7) / 8 );
 101cb68:	3407      	adds	r4, #7
 101cb6a:	f3c4 04c7 	ubfx	r4, r4, #3, #8
			EEPROM_reader( eeprom_addr, &data_buffer[k], nbr_set_bytes);
 101cb6e:	fb03 0004 	mla	r0, r3, r4, r0
 101cb72:	eb09 010b 	add.w	r1, r9, fp
 101cb76:	4622      	mov	r2, r4
 101cb78:	47b8      	blx	r7
			k += nbr_set_bytes;
 101cb7a:	eb0b 0304 	add.w	r3, fp, r4
 101cb7e:	fa1f fb83 	uxth.w	fp, r3
 101cb82:	e7a1      	b.n	101cac8 <LP_APP_vGet_data_block_fifo_table+0xa0>
		if ( i < 0 ) { i += st_61.nbr_blks_set1; }
 101cb84:	8933      	ldrh	r3, [r6, #8]
 101cb86:	441a      	add	r2, r3
 101cb88:	b213      	sxth	r3, r2
 101cb8a:	9301      	str	r3, [sp, #4]
 101cb8c:	e765      	b.n	101ca5a <LP_APP_vGet_data_block_fifo_table+0x32>
 101cb8e:	88b1      	ldrh	r1, [r6, #4]
 101cb90:	e798      	b.n	101cac4 <LP_APP_vGet_data_block_fifo_table+0x9c>
 101cb92:	bf00      	nop
 101cb94:	200166b8 	.word	0x200166b8
 101cb98:	01017511 	.word	0x01017511
 101cb9c:	20016744 	.word	0x20016744
 101cba0:	0101603d 	.word	0x0101603d
 101cba4:	20016754 	.word	0x20016754

0101cba8 <METROLOGY_APP_dCalculate_Px_rms>:
*
* \param void
* \retval calculated power
******************************************************************************
*/
double METROLOGY_APP_dCalculate_Px_rms(int64_t acc_px, uint32_t nbr_samples) {
 101cba8:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	
	static volatile double px_rms;

	px_rms = (double)(acc_px);
 101cbac:	4b22      	ldr	r3, [pc, #136]	; (101cc38 <METROLOGY_APP_dCalculate_Px_rms+0x90>)
 101cbae:	4c23      	ldr	r4, [pc, #140]	; (101cc3c <METROLOGY_APP_dCalculate_Px_rms+0x94>)
	px_rms /= nbr_samples;
	px_rms /= pow(2, 40);
 101cbb0:	4d23      	ldr	r5, [pc, #140]	; (101cc40 <METROLOGY_APP_dCalculate_Px_rms+0x98>)
double METROLOGY_APP_dCalculate_Px_rms(int64_t acc_px, uint32_t nbr_samples) {
 101cbb2:	4616      	mov	r6, r2
	px_rms = (double)(acc_px);
 101cbb4:	4798      	blx	r3
	px_rms /= nbr_samples;
 101cbb6:	4b23      	ldr	r3, [pc, #140]	; (101cc44 <METROLOGY_APP_dCalculate_Px_rms+0x9c>)
	px_rms = (double)(acc_px);
 101cbb8:	e9c4 0100 	strd	r0, r1, [r4]
	px_rms /= nbr_samples;
 101cbbc:	4630      	mov	r0, r6
 101cbbe:	4798      	blx	r3
 101cbc0:	e9d4 8900 	ldrd	r8, r9, [r4]
 101cbc4:	4602      	mov	r2, r0
 101cbc6:	460b      	mov	r3, r1
 101cbc8:	4e1f      	ldr	r6, [pc, #124]	; (101cc48 <METROLOGY_APP_dCalculate_Px_rms+0xa0>)
 101cbca:	4640      	mov	r0, r8
 101cbcc:	4649      	mov	r1, r9
 101cbce:	47b0      	blx	r6
 101cbd0:	e9c4 0100 	strd	r0, r1, [r4]
	px_rms /= pow(2, 40);
 101cbd4:	2200      	movs	r2, #0
 101cbd6:	e9d4 0100 	ldrd	r0, r1, [r4]
 101cbda:	4b1c      	ldr	r3, [pc, #112]	; (101cc4c <METROLOGY_APP_dCalculate_Px_rms+0xa4>)
 101cbdc:	47a8      	blx	r5
 101cbde:	e9c4 0100 	strd	r0, r1, [r4]
	px_rms *= CURRENT_CONV_FACTOR * VOLTAGE_CONV_FACTOR;
 101cbe2:	a313      	add	r3, pc, #76	; (adr r3, 101cc30 <METROLOGY_APP_dCalculate_Px_rms+0x88>)
 101cbe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 101cbe8:	e9d4 0100 	ldrd	r0, r1, [r4]
 101cbec:	47a8      	blx	r5
 101cbee:	e9c4 0100 	strd	r0, r1, [r4]
	px_rms *= 1000;
 101cbf2:	2200      	movs	r2, #0
 101cbf4:	e9d4 0100 	ldrd	r0, r1, [r4]
 101cbf8:	4b15      	ldr	r3, [pc, #84]	; (101cc50 <METROLOGY_APP_dCalculate_Px_rms+0xa8>)
 101cbfa:	47a8      	blx	r5
 101cbfc:	e9c4 0100 	strd	r0, r1, [r4]
	px_rms = ( fabs(px_rms) < CREEP_THRESHOLD_PQ) ? 0 : px_rms;
 101cc00:	e9d4 2300 	ldrd	r2, r3, [r4]
 101cc04:	4d13      	ldr	r5, [pc, #76]	; (101cc54 <METROLOGY_APP_dCalculate_Px_rms+0xac>)
 101cc06:	4610      	mov	r0, r2
 101cc08:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 101cc0c:	2200      	movs	r2, #0
 101cc0e:	4b12      	ldr	r3, [pc, #72]	; (101cc58 <METROLOGY_APP_dCalculate_Px_rms+0xb0>)
 101cc10:	47a8      	blx	r5
 101cc12:	b938      	cbnz	r0, 101cc24 <METROLOGY_APP_dCalculate_Px_rms+0x7c>
 101cc14:	e9d4 2300 	ldrd	r2, r3, [r4]
 101cc18:	e9c4 2300 	strd	r2, r3, [r4]

	return px_rms;
}
 101cc1c:	e9d4 0100 	ldrd	r0, r1, [r4]
 101cc20:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	px_rms = ( fabs(px_rms) < CREEP_THRESHOLD_PQ) ? 0 : px_rms;
 101cc24:	2200      	movs	r2, #0
 101cc26:	2300      	movs	r3, #0
 101cc28:	e7f6      	b.n	101cc18 <METROLOGY_APP_dCalculate_Px_rms+0x70>
 101cc2a:	bf00      	nop
 101cc2c:	f3af 8000 	nop.w
 101cc30:	c18548aa 	.word	0xc18548aa
 101cc34:	4133703f 	.word	0x4133703f
 101cc38:	0102ffa9 	.word	0x0102ffa9
 101cc3c:	20000c48 	.word	0x20000c48
 101cc40:	01030005 	.word	0x01030005
 101cc44:	0102ff19 	.word	0x0102ff19
 101cc48:	01030259 	.word	0x01030259
 101cc4c:	3d700000 	.word	0x3d700000
 101cc50:	408f4000 	.word	0x408f4000
 101cc54:	010304e9 	.word	0x010304e9
 101cc58:	40b2c000 	.word	0x40b2c000
 101cc5c:	00000000 	.word	0x00000000

0101cc60 <METROLOGY_APP_dCalculate_Qx_rms>:
*
* \param void
* \retval calculated power
******************************************************************************
*/
double METROLOGY_APP_dCalculate_Qx_rms(int64_t acc_qx, uint32_t nbr_samples) {
 101cc60:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	
	static volatile double qx_rms;

	qx_rms = (double)(acc_qx);
 101cc64:	4b22      	ldr	r3, [pc, #136]	; (101ccf0 <METROLOGY_APP_dCalculate_Qx_rms+0x90>)
 101cc66:	4c23      	ldr	r4, [pc, #140]	; (101ccf4 <METROLOGY_APP_dCalculate_Qx_rms+0x94>)
	qx_rms /= nbr_samples;
	qx_rms /= pow(2, 40);
 101cc68:	4d23      	ldr	r5, [pc, #140]	; (101ccf8 <METROLOGY_APP_dCalculate_Qx_rms+0x98>)
double METROLOGY_APP_dCalculate_Qx_rms(int64_t acc_qx, uint32_t nbr_samples) {
 101cc6a:	4616      	mov	r6, r2
	qx_rms = (double)(acc_qx);
 101cc6c:	4798      	blx	r3
	qx_rms /= nbr_samples;
 101cc6e:	4b23      	ldr	r3, [pc, #140]	; (101ccfc <METROLOGY_APP_dCalculate_Qx_rms+0x9c>)
	qx_rms = (double)(acc_qx);
 101cc70:	e9c4 0100 	strd	r0, r1, [r4]
	qx_rms /= nbr_samples;
 101cc74:	4630      	mov	r0, r6
 101cc76:	4798      	blx	r3
 101cc78:	e9d4 8900 	ldrd	r8, r9, [r4]
 101cc7c:	4602      	mov	r2, r0
 101cc7e:	460b      	mov	r3, r1
 101cc80:	4e1f      	ldr	r6, [pc, #124]	; (101cd00 <METROLOGY_APP_dCalculate_Qx_rms+0xa0>)
 101cc82:	4640      	mov	r0, r8
 101cc84:	4649      	mov	r1, r9
 101cc86:	47b0      	blx	r6
 101cc88:	e9c4 0100 	strd	r0, r1, [r4]
	qx_rms /= pow(2, 40);
 101cc8c:	2200      	movs	r2, #0
 101cc8e:	e9d4 0100 	ldrd	r0, r1, [r4]
 101cc92:	4b1c      	ldr	r3, [pc, #112]	; (101cd04 <METROLOGY_APP_dCalculate_Qx_rms+0xa4>)
 101cc94:	47a8      	blx	r5
 101cc96:	e9c4 0100 	strd	r0, r1, [r4]
	qx_rms *= CURRENT_CONV_FACTOR * VOLTAGE_CONV_FACTOR;
 101cc9a:	a313      	add	r3, pc, #76	; (adr r3, 101cce8 <METROLOGY_APP_dCalculate_Qx_rms+0x88>)
 101cc9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 101cca0:	e9d4 0100 	ldrd	r0, r1, [r4]
 101cca4:	47a8      	blx	r5
 101cca6:	e9c4 0100 	strd	r0, r1, [r4]
	qx_rms *= 1000;
 101ccaa:	2200      	movs	r2, #0
 101ccac:	e9d4 0100 	ldrd	r0, r1, [r4]
 101ccb0:	4b15      	ldr	r3, [pc, #84]	; (101cd08 <METROLOGY_APP_dCalculate_Qx_rms+0xa8>)
 101ccb2:	47a8      	blx	r5
 101ccb4:	e9c4 0100 	strd	r0, r1, [r4]
	qx_rms = ( fabs(qx_rms) < CREEP_THRESHOLD_PQ) ? 0 : qx_rms;
 101ccb8:	e9d4 2300 	ldrd	r2, r3, [r4]
 101ccbc:	4d13      	ldr	r5, [pc, #76]	; (101cd0c <METROLOGY_APP_dCalculate_Qx_rms+0xac>)
 101ccbe:	4610      	mov	r0, r2
 101ccc0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 101ccc4:	2200      	movs	r2, #0
 101ccc6:	4b12      	ldr	r3, [pc, #72]	; (101cd10 <METROLOGY_APP_dCalculate_Qx_rms+0xb0>)
 101ccc8:	47a8      	blx	r5
 101ccca:	b938      	cbnz	r0, 101ccdc <METROLOGY_APP_dCalculate_Qx_rms+0x7c>
 101cccc:	e9d4 2300 	ldrd	r2, r3, [r4]
 101ccd0:	e9c4 2300 	strd	r2, r3, [r4]

	return qx_rms;
}
 101ccd4:	e9d4 0100 	ldrd	r0, r1, [r4]
 101ccd8:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	qx_rms = ( fabs(qx_rms) < CREEP_THRESHOLD_PQ) ? 0 : qx_rms;
 101ccdc:	2200      	movs	r2, #0
 101ccde:	2300      	movs	r3, #0
 101cce0:	e7f6      	b.n	101ccd0 <METROLOGY_APP_dCalculate_Qx_rms+0x70>
 101cce2:	bf00      	nop
 101cce4:	f3af 8000 	nop.w
 101cce8:	c18548aa 	.word	0xc18548aa
 101ccec:	4133703f 	.word	0x4133703f
 101ccf0:	0102ffa9 	.word	0x0102ffa9
 101ccf4:	20000c50 	.word	0x20000c50
 101ccf8:	01030005 	.word	0x01030005
 101ccfc:	0102ff19 	.word	0x0102ff19
 101cd00:	01030259 	.word	0x01030259
 101cd04:	3d700000 	.word	0x3d700000
 101cd08:	408f4000 	.word	0x408f4000
 101cd0c:	010304e9 	.word	0x010304e9
 101cd10:	40b2c000 	.word	0x40b2c000

0101cd14 <METROLOGY_APP_vDsp_ctrl_verification>:
bool METROLOGY_APP_vDsp_ctrl_verification(void) {
 101cd14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ( VMetrology.DSP_CTRL.STATE_CTRL.WORD != (uint32_t)DSP_CTRL_ST_CTRL_RUN ) {
 101cd18:	4cb5      	ldr	r4, [pc, #724]	; (101cff0 <METROLOGY_APP_vDsp_ctrl_verification+0x2dc>)
 101cd1a:	6823      	ldr	r3, [r4, #0]
 101cd1c:	2b02      	cmp	r3, #2
 101cd1e:	f000 820d 	beq.w	101d13c <METROLOGY_APP_vDsp_ctrl_verification+0x428>
		VMetrology.DSP_CTRL.STATE_CTRL.WORD = (uint32_t)DSP_CTRL_ST_CTRL_RUN;
 101cd22:	2302      	movs	r3, #2
		EEPROM_writer(DSP_CTRL_STATE_CTRL_ADDR, &VMetrology.DSP_CTRL.STATE_CTRL.WORD, 4);
 101cd24:	2204      	movs	r2, #4
 101cd26:	4621      	mov	r1, r4
 101cd28:	f44f 7040 	mov.w	r0, #768	; 0x300
 101cd2c:	4db1      	ldr	r5, [pc, #708]	; (101cff4 <METROLOGY_APP_vDsp_ctrl_verification+0x2e0>)
		data_ok = false;
 101cd2e:	4eb2      	ldr	r6, [pc, #712]	; (101cff8 <METROLOGY_APP_vDsp_ctrl_verification+0x2e4>)
		VMetrology.DSP_CTRL.STATE_CTRL.WORD = (uint32_t)DSP_CTRL_ST_CTRL_RUN;
 101cd30:	6023      	str	r3, [r4, #0]
		EEPROM_writer(DSP_CTRL_STATE_CTRL_ADDR, &VMetrology.DSP_CTRL.STATE_CTRL.WORD, 4);
 101cd32:	47a8      	blx	r5
		data_ok = false;
 101cd34:	2300      	movs	r3, #0
 101cd36:	7033      	strb	r3, [r6, #0]
	if ( VMetrology.DSP_CTRL.FEATURE_CTRL0.WORD != (uint32_t)DEFAULT_DSP_CTRL_FEATURE_CTRL0 ) {
 101cd38:	6863      	ldr	r3, [r4, #4]
 101cd3a:	f5b3 6fe2 	cmp.w	r3, #1808	; 0x710
 101cd3e:	d00a      	beq.n	101cd56 <METROLOGY_APP_vDsp_ctrl_verification+0x42>
		VMetrology.DSP_CTRL.FEATURE_CTRL0.WORD = (uint32_t)DEFAULT_DSP_CTRL_FEATURE_CTRL0;
 101cd40:	f44f 63e2 	mov.w	r3, #1808	; 0x710
		EEPROM_writer(DSP_CTRL_FEATURE_CTRL0_ADDR, &VMetrology.DSP_CTRL.FEATURE_CTRL0.WORD, 4);
 101cd44:	2204      	movs	r2, #4
 101cd46:	49ad      	ldr	r1, [pc, #692]	; (101cffc <METROLOGY_APP_vDsp_ctrl_verification+0x2e8>)
 101cd48:	4daa      	ldr	r5, [pc, #680]	; (101cff4 <METROLOGY_APP_vDsp_ctrl_verification+0x2e0>)
		VMetrology.DSP_CTRL.FEATURE_CTRL0.WORD = (uint32_t)DEFAULT_DSP_CTRL_FEATURE_CTRL0;
 101cd4a:	6063      	str	r3, [r4, #4]
		EEPROM_writer(DSP_CTRL_FEATURE_CTRL0_ADDR, &VMetrology.DSP_CTRL.FEATURE_CTRL0.WORD, 4);
 101cd4c:	f44f 7041 	mov.w	r0, #772	; 0x304
 101cd50:	47a8      	blx	r5
		data_ok = false;
 101cd52:	2300      	movs	r3, #0
 101cd54:	7033      	strb	r3, [r6, #0]
	if ( VMetrology.DSP_CTRL.FEATURE_CTRL1.WORD != (uint32_t)DEFAULT_DSP_CTRL_FEATURE_CTRL1 ) {
 101cd56:	68a3      	ldr	r3, [r4, #8]
 101cd58:	2b07      	cmp	r3, #7
 101cd5a:	d009      	beq.n	101cd70 <METROLOGY_APP_vDsp_ctrl_verification+0x5c>
		VMetrology.DSP_CTRL.FEATURE_CTRL1.WORD = (uint32_t)DEFAULT_DSP_CTRL_FEATURE_CTRL1;
 101cd5c:	2307      	movs	r3, #7
		EEPROM_writer(DSP_CTRL_FEATURE_CTRL1_ADDR, &VMetrology.DSP_CTRL.FEATURE_CTRL1.WORD, 4);
 101cd5e:	2204      	movs	r2, #4
 101cd60:	49a7      	ldr	r1, [pc, #668]	; (101d000 <METROLOGY_APP_vDsp_ctrl_verification+0x2ec>)
 101cd62:	4da4      	ldr	r5, [pc, #656]	; (101cff4 <METROLOGY_APP_vDsp_ctrl_verification+0x2e0>)
		VMetrology.DSP_CTRL.FEATURE_CTRL1.WORD = (uint32_t)DEFAULT_DSP_CTRL_FEATURE_CTRL1;
 101cd64:	60a3      	str	r3, [r4, #8]
		EEPROM_writer(DSP_CTRL_FEATURE_CTRL1_ADDR, &VMetrology.DSP_CTRL.FEATURE_CTRL1.WORD, 4);
 101cd66:	f44f 7042 	mov.w	r0, #776	; 0x308
 101cd6a:	47a8      	blx	r5
		data_ok = false;
 101cd6c:	2300      	movs	r3, #0
 101cd6e:	7033      	strb	r3, [r6, #0]
	if ( VMetrology.DSP_CTRL.METER_TYPE.WORD != (uint32_t)DEFAULT_DSP_CTRL_METER_TYPE ) {
 101cd70:	68e2      	ldr	r2, [r4, #12]
 101cd72:	f640 43cc 	movw	r3, #3276	; 0xccc
 101cd76:	429a      	cmp	r2, r3
 101cd78:	d008      	beq.n	101cd8c <METROLOGY_APP_vDsp_ctrl_verification+0x78>
		EEPROM_writer(DSP_CTRL_METER_TYPE_ADDR, &VMetrology.DSP_CTRL.METER_TYPE.WORD, 4);
 101cd7a:	2204      	movs	r2, #4
 101cd7c:	49a1      	ldr	r1, [pc, #644]	; (101d004 <METROLOGY_APP_vDsp_ctrl_verification+0x2f0>)
 101cd7e:	4d9d      	ldr	r5, [pc, #628]	; (101cff4 <METROLOGY_APP_vDsp_ctrl_verification+0x2e0>)
		VMetrology.DSP_CTRL.METER_TYPE.WORD = (uint32_t)DEFAULT_DSP_CTRL_METER_TYPE;
 101cd80:	60e3      	str	r3, [r4, #12]
		EEPROM_writer(DSP_CTRL_METER_TYPE_ADDR, &VMetrology.DSP_CTRL.METER_TYPE.WORD, 4);
 101cd82:	f44f 7043 	mov.w	r0, #780	; 0x30c
 101cd86:	47a8      	blx	r5
		data_ok = false;
 101cd88:	2300      	movs	r3, #0
 101cd8a:	7033      	strb	r3, [r6, #0]
	if ( VMetrology.DSP_CTRL.M.WORD != (uint32_t)DEFAULT_DSP_CTRL_M ) {
 101cd8c:	6923      	ldr	r3, [r4, #16]
 101cd8e:	2b3c      	cmp	r3, #60	; 0x3c
 101cd90:	d009      	beq.n	101cda6 <METROLOGY_APP_vDsp_ctrl_verification+0x92>
		VMetrology.DSP_CTRL.M.WORD = (uint32_t)DEFAULT_DSP_CTRL_M;
 101cd92:	233c      	movs	r3, #60	; 0x3c
		EEPROM_writer(DSP_CTRL_M_ADDR, &VMetrology.DSP_CTRL.M.WORD, 4);
 101cd94:	2204      	movs	r2, #4
 101cd96:	499c      	ldr	r1, [pc, #624]	; (101d008 <METROLOGY_APP_vDsp_ctrl_verification+0x2f4>)
 101cd98:	4d96      	ldr	r5, [pc, #600]	; (101cff4 <METROLOGY_APP_vDsp_ctrl_verification+0x2e0>)
		VMetrology.DSP_CTRL.M.WORD = (uint32_t)DEFAULT_DSP_CTRL_M;
 101cd9a:	6123      	str	r3, [r4, #16]
		EEPROM_writer(DSP_CTRL_M_ADDR, &VMetrology.DSP_CTRL.M.WORD, 4);
 101cd9c:	f44f 7044 	mov.w	r0, #784	; 0x310
 101cda0:	47a8      	blx	r5
		data_ok = false;
 101cda2:	2300      	movs	r3, #0
 101cda4:	7033      	strb	r3, [r6, #0]
	if ( VMetrology.DSP_CTRL.N_MAX.WORD != (uint32_t)DEFAULT_DSP_CTRL_N_MAX ) {
 101cda6:	6962      	ldr	r2, [r4, #20]
 101cda8:	f241 1330 	movw	r3, #4400	; 0x1130
 101cdac:	429a      	cmp	r2, r3
 101cdae:	d008      	beq.n	101cdc2 <METROLOGY_APP_vDsp_ctrl_verification+0xae>
		EEPROM_writer(DSP_CTRL_N_MAX_ADDR, &VMetrology.DSP_CTRL.N_MAX.WORD, 4);
 101cdb0:	2204      	movs	r2, #4
 101cdb2:	4996      	ldr	r1, [pc, #600]	; (101d00c <METROLOGY_APP_vDsp_ctrl_verification+0x2f8>)
 101cdb4:	4d8f      	ldr	r5, [pc, #572]	; (101cff4 <METROLOGY_APP_vDsp_ctrl_verification+0x2e0>)
		VMetrology.DSP_CTRL.N_MAX.WORD = (uint32_t)DEFAULT_DSP_CTRL_N_MAX;
 101cdb6:	6163      	str	r3, [r4, #20]
		EEPROM_writer(DSP_CTRL_N_MAX_ADDR, &VMetrology.DSP_CTRL.N_MAX.WORD, 4);
 101cdb8:	f44f 7045 	mov.w	r0, #788	; 0x314
 101cdbc:	47a8      	blx	r5
		data_ok = false;
 101cdbe:	2300      	movs	r3, #0
 101cdc0:	7033      	strb	r3, [r6, #0]
	if ( meter.system_state.initialiting ) {
 101cdc2:	4b93      	ldr	r3, [pc, #588]	; (101d010 <METROLOGY_APP_vDsp_ctrl_verification+0x2fc>)
 101cdc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 101cdc8:	2b00      	cmp	r3, #0
 101cdca:	d04d      	beq.n	101ce68 <METROLOGY_APP_vDsp_ctrl_verification+0x154>
		if ( VMetrology.DSP_CTRL.PULSE0_CTRL.WORD != (uint32_t)DEFAULT_DSP_CTRL_PULSE0_CTRL ) {
 101cdcc:	4b91      	ldr	r3, [pc, #580]	; (101d014 <METROLOGY_APP_vDsp_ctrl_verification+0x300>)
 101cdce:	69a2      	ldr	r2, [r4, #24]
 101cdd0:	429a      	cmp	r2, r3
 101cdd2:	d008      	beq.n	101cde6 <METROLOGY_APP_vDsp_ctrl_verification+0xd2>
			EEPROM_writer(DSP_CTRL_PULSE0_CTRL_ADDR, &VMetrology.DSP_CTRL.PULSE0_CTRL.WORD, 4);
 101cdd4:	2204      	movs	r2, #4
 101cdd6:	4990      	ldr	r1, [pc, #576]	; (101d018 <METROLOGY_APP_vDsp_ctrl_verification+0x304>)
 101cdd8:	4d86      	ldr	r5, [pc, #536]	; (101cff4 <METROLOGY_APP_vDsp_ctrl_verification+0x2e0>)
			VMetrology.DSP_CTRL.PULSE0_CTRL.WORD = (uint32_t)DEFAULT_DSP_CTRL_PULSE0_CTRL;
 101cdda:	61a3      	str	r3, [r4, #24]
			EEPROM_writer(DSP_CTRL_PULSE0_CTRL_ADDR, &VMetrology.DSP_CTRL.PULSE0_CTRL.WORD, 4);
 101cddc:	f44f 7046 	mov.w	r0, #792	; 0x318
 101cde0:	47a8      	blx	r5
			data_ok = false;
 101cde2:	2300      	movs	r3, #0
 101cde4:	7033      	strb	r3, [r6, #0]
		if ( VMetrology.DSP_CTRL.PULSE1_CTRL.WORD != (uint32_t)DEFAULT_DSP_CTRL_PULSE1_CTRL ) {
 101cde6:	4b8d      	ldr	r3, [pc, #564]	; (101d01c <METROLOGY_APP_vDsp_ctrl_verification+0x308>)
 101cde8:	69e2      	ldr	r2, [r4, #28]
 101cdea:	429a      	cmp	r2, r3
 101cdec:	d008      	beq.n	101ce00 <METROLOGY_APP_vDsp_ctrl_verification+0xec>
			EEPROM_writer(DSP_CTRL_PULSE1_CTRL_ADDR, &VMetrology.DSP_CTRL.PULSE1_CTRL.WORD, 4);
 101cdee:	2204      	movs	r2, #4
 101cdf0:	498b      	ldr	r1, [pc, #556]	; (101d020 <METROLOGY_APP_vDsp_ctrl_verification+0x30c>)
 101cdf2:	4d80      	ldr	r5, [pc, #512]	; (101cff4 <METROLOGY_APP_vDsp_ctrl_verification+0x2e0>)
			VMetrology.DSP_CTRL.PULSE1_CTRL.WORD = (uint32_t)DEFAULT_DSP_CTRL_PULSE1_CTRL;
 101cdf4:	61e3      	str	r3, [r4, #28]
			EEPROM_writer(DSP_CTRL_PULSE1_CTRL_ADDR, &VMetrology.DSP_CTRL.PULSE1_CTRL.WORD, 4);
 101cdf6:	f44f 7047 	mov.w	r0, #796	; 0x31c
 101cdfa:	47a8      	blx	r5
			data_ok = false;
 101cdfc:	2300      	movs	r3, #0
 101cdfe:	7033      	strb	r3, [r6, #0]
		if ( VMetrology.DSP_CTRL.PULSE2_CTRL.WORD != (uint32_t)DEFAULT_DSP_CTRL_PULSE2_CTRL ) {
 101ce00:	4b88      	ldr	r3, [pc, #544]	; (101d024 <METROLOGY_APP_vDsp_ctrl_verification+0x310>)
 101ce02:	6a22      	ldr	r2, [r4, #32]
 101ce04:	429a      	cmp	r2, r3
 101ce06:	d008      	beq.n	101ce1a <METROLOGY_APP_vDsp_ctrl_verification+0x106>
			EEPROM_writer(DSP_CTRL_PULSE2_CTRL_ADDR, &VMetrology.DSP_CTRL.PULSE2_CTRL.WORD, 4);
 101ce08:	2204      	movs	r2, #4
 101ce0a:	4987      	ldr	r1, [pc, #540]	; (101d028 <METROLOGY_APP_vDsp_ctrl_verification+0x314>)
 101ce0c:	4d79      	ldr	r5, [pc, #484]	; (101cff4 <METROLOGY_APP_vDsp_ctrl_verification+0x2e0>)
			VMetrology.DSP_CTRL.PULSE2_CTRL.WORD = (uint32_t)DEFAULT_DSP_CTRL_PULSE2_CTRL;
 101ce0e:	6223      	str	r3, [r4, #32]
			EEPROM_writer(DSP_CTRL_PULSE2_CTRL_ADDR, &VMetrology.DSP_CTRL.PULSE2_CTRL.WORD, 4);
 101ce10:	f44f 7048 	mov.w	r0, #800	; 0x320
 101ce14:	47a8      	blx	r5
			data_ok = false;
 101ce16:	2300      	movs	r3, #0
 101ce18:	7033      	strb	r3, [r6, #0]
		if ( VMetrology.DSP_CTRL.P_K_T != (uint32_t)DEFAULT_DSP_CTRL_P_K_T ) {
 101ce1a:	4b84      	ldr	r3, [pc, #528]	; (101d02c <METROLOGY_APP_vDsp_ctrl_verification+0x318>)
 101ce1c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 101ce1e:	429a      	cmp	r2, r3
 101ce20:	d008      	beq.n	101ce34 <METROLOGY_APP_vDsp_ctrl_verification+0x120>
			EEPROM_writer(DSP_CTRL_P_K_T_ADDR, &VMetrology.DSP_CTRL.P_K_T, 4);
 101ce22:	2204      	movs	r2, #4
 101ce24:	4982      	ldr	r1, [pc, #520]	; (101d030 <METROLOGY_APP_vDsp_ctrl_verification+0x31c>)
 101ce26:	4d73      	ldr	r5, [pc, #460]	; (101cff4 <METROLOGY_APP_vDsp_ctrl_verification+0x2e0>)
			VMetrology.DSP_CTRL.P_K_T = (uint32_t)DEFAULT_DSP_CTRL_P_K_T;
 101ce28:	6263      	str	r3, [r4, #36]	; 0x24
			EEPROM_writer(DSP_CTRL_P_K_T_ADDR, &VMetrology.DSP_CTRL.P_K_T, 4);
 101ce2a:	f44f 7049 	mov.w	r0, #804	; 0x324
 101ce2e:	47a8      	blx	r5
			data_ok = false;
 101ce30:	2300      	movs	r3, #0
 101ce32:	7033      	strb	r3, [r6, #0]
		if ( VMetrology.DSP_CTRL.Q_K_T != (uint32_t)DEFAULT_DSP_CTRL_Q_K_T ) {
 101ce34:	4b7d      	ldr	r3, [pc, #500]	; (101d02c <METROLOGY_APP_vDsp_ctrl_verification+0x318>)
 101ce36:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 101ce38:	429a      	cmp	r2, r3
 101ce3a:	d008      	beq.n	101ce4e <METROLOGY_APP_vDsp_ctrl_verification+0x13a>
			EEPROM_writer(DSP_CTRL_Q_K_T_ADDR, &VMetrology.DSP_CTRL.Q_K_T, 4);
 101ce3c:	2204      	movs	r2, #4
 101ce3e:	497d      	ldr	r1, [pc, #500]	; (101d034 <METROLOGY_APP_vDsp_ctrl_verification+0x320>)
 101ce40:	4d6c      	ldr	r5, [pc, #432]	; (101cff4 <METROLOGY_APP_vDsp_ctrl_verification+0x2e0>)
			VMetrology.DSP_CTRL.Q_K_T = (uint32_t)DEFAULT_DSP_CTRL_Q_K_T;
 101ce42:	62a3      	str	r3, [r4, #40]	; 0x28
			EEPROM_writer(DSP_CTRL_Q_K_T_ADDR, &VMetrology.DSP_CTRL.Q_K_T, 4);
 101ce44:	f44f 704a 	mov.w	r0, #808	; 0x328
 101ce48:	47a8      	blx	r5
			data_ok = false;
 101ce4a:	2300      	movs	r3, #0
 101ce4c:	7033      	strb	r3, [r6, #0]
		if ( VMetrology.DSP_CTRL.I_K_T != (uint32_t)DEFAULT_DSP_CTRL_I_K_T ) {
 101ce4e:	4b77      	ldr	r3, [pc, #476]	; (101d02c <METROLOGY_APP_vDsp_ctrl_verification+0x318>)
 101ce50:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 101ce52:	429a      	cmp	r2, r3
 101ce54:	d008      	beq.n	101ce68 <METROLOGY_APP_vDsp_ctrl_verification+0x154>
			EEPROM_writer(DSP_CTRL_I_K_T_ADDR, &VMetrology.DSP_CTRL.I_K_T, 4);
 101ce56:	2204      	movs	r2, #4
 101ce58:	4977      	ldr	r1, [pc, #476]	; (101d038 <METROLOGY_APP_vDsp_ctrl_verification+0x324>)
 101ce5a:	4d66      	ldr	r5, [pc, #408]	; (101cff4 <METROLOGY_APP_vDsp_ctrl_verification+0x2e0>)
			VMetrology.DSP_CTRL.I_K_T = (uint32_t)DEFAULT_DSP_CTRL_I_K_T;
 101ce5c:	62e3      	str	r3, [r4, #44]	; 0x2c
			EEPROM_writer(DSP_CTRL_I_K_T_ADDR, &VMetrology.DSP_CTRL.I_K_T, 4);
 101ce5e:	f44f 704b 	mov.w	r0, #812	; 0x32c
 101ce62:	47a8      	blx	r5
			data_ok = false;
 101ce64:	2300      	movs	r3, #0
 101ce66:	7033      	strb	r3, [r6, #0]
	if ( VMetrology.DSP_CTRL.CREEP_THR_P != (uint32_t)DEFAULT_CREEP_THRESHOLD_P ) {
 101ce68:	6b22      	ldr	r2, [r4, #48]	; 0x30
 101ce6a:	f645 5335 	movw	r3, #23861	; 0x5d35
 101ce6e:	429a      	cmp	r2, r3
 101ce70:	d008      	beq.n	101ce84 <METROLOGY_APP_vDsp_ctrl_verification+0x170>
		EEPROM_writer(DSP_CTRL_CREEP_THR_P_ADDR, &VMetrology.DSP_CTRL.CREEP_THR_P, 4);
 101ce72:	2204      	movs	r2, #4
 101ce74:	4971      	ldr	r1, [pc, #452]	; (101d03c <METROLOGY_APP_vDsp_ctrl_verification+0x328>)
 101ce76:	4d5f      	ldr	r5, [pc, #380]	; (101cff4 <METROLOGY_APP_vDsp_ctrl_verification+0x2e0>)
		VMetrology.DSP_CTRL.CREEP_THR_P = (uint32_t)DEFAULT_CREEP_THRESHOLD_P;
 101ce78:	6323      	str	r3, [r4, #48]	; 0x30
		EEPROM_writer(DSP_CTRL_CREEP_THR_P_ADDR, &VMetrology.DSP_CTRL.CREEP_THR_P, 4);
 101ce7a:	f44f 704c 	mov.w	r0, #816	; 0x330
 101ce7e:	47a8      	blx	r5
		data_ok = false;
 101ce80:	2300      	movs	r3, #0
 101ce82:	7033      	strb	r3, [r6, #0]
	if ( VMetrology.DSP_CTRL.CREEP_THR_Q != (uint32_t)DEFAULT_CREEP_THRESHOLD_Q ) {
 101ce84:	6b62      	ldr	r2, [r4, #52]	; 0x34
 101ce86:	f645 5335 	movw	r3, #23861	; 0x5d35
 101ce8a:	429a      	cmp	r2, r3
 101ce8c:	d008      	beq.n	101cea0 <METROLOGY_APP_vDsp_ctrl_verification+0x18c>
		EEPROM_writer(DSP_CTRL_CREEP_THR_Q_ADDR, &VMetrology.DSP_CTRL.CREEP_THR_Q, 4);
 101ce8e:	2204      	movs	r2, #4
 101ce90:	496b      	ldr	r1, [pc, #428]	; (101d040 <METROLOGY_APP_vDsp_ctrl_verification+0x32c>)
 101ce92:	4d58      	ldr	r5, [pc, #352]	; (101cff4 <METROLOGY_APP_vDsp_ctrl_verification+0x2e0>)
		VMetrology.DSP_CTRL.CREEP_THR_Q = (uint32_t)DEFAULT_CREEP_THRESHOLD_Q;
 101ce94:	6363      	str	r3, [r4, #52]	; 0x34
		EEPROM_writer(DSP_CTRL_CREEP_THR_Q_ADDR, &VMetrology.DSP_CTRL.CREEP_THR_Q, 4);
 101ce96:	f44f 704d 	mov.w	r0, #820	; 0x334
 101ce9a:	47a8      	blx	r5
		data_ok = false;
 101ce9c:	2300      	movs	r3, #0
 101ce9e:	7033      	strb	r3, [r6, #0]
	if ( VMetrology.DSP_CTRL.CREEP_THR_I != (uint32_t)DEFAULT_CREEP_THRESHOLD_I((double)(DEFAULT_DSP_CTRL_K_Ix/K_Ix_MULTIPLIER)) ) {
 101cea0:	4b68      	ldr	r3, [pc, #416]	; (101d044 <METROLOGY_APP_vDsp_ctrl_verification+0x330>)
 101cea2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 101cea4:	429a      	cmp	r2, r3
 101cea6:	d008      	beq.n	101ceba <METROLOGY_APP_vDsp_ctrl_verification+0x1a6>
		EEPROM_writer(DSP_CTRL_CREEP_THR_I_ADDR, &VMetrology.DSP_CTRL.CREEP_THR_I, 4);
 101cea8:	2204      	movs	r2, #4
 101ceaa:	4967      	ldr	r1, [pc, #412]	; (101d048 <METROLOGY_APP_vDsp_ctrl_verification+0x334>)
 101ceac:	4d51      	ldr	r5, [pc, #324]	; (101cff4 <METROLOGY_APP_vDsp_ctrl_verification+0x2e0>)
		VMetrology.DSP_CTRL.CREEP_THR_I = (uint32_t)DEFAULT_CREEP_THRESHOLD_I((double)(DEFAULT_DSP_CTRL_K_Ix/K_Ix_MULTIPLIER));
 101ceae:	63a3      	str	r3, [r4, #56]	; 0x38
		EEPROM_writer(DSP_CTRL_CREEP_THR_I_ADDR, &VMetrology.DSP_CTRL.CREEP_THR_I, 4);
 101ceb0:	f44f 704e 	mov.w	r0, #824	; 0x338
 101ceb4:	47a8      	blx	r5
		data_ok = false;
 101ceb6:	2300      	movs	r3, #0
 101ceb8:	7033      	strb	r3, [r6, #0]
	if ( VMetrology.DSP_CTRL.POWER_OFFSET_CTRL.WORD != (uint32_t)DEFAULT_DSP_CTRL_POWER_OFFSET_CTRL ) {
 101ceba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 101cebc:	2b00      	cmp	r3, #0
 101cebe:	f040 818d 	bne.w	101d1dc <METROLOGY_APP_vDsp_ctrl_verification+0x4c8>
	if ( VMetrology.DSP_CTRL.POWER_OFFSET_CTRL.BIT.ACTIVE_PO_EN == 0 ) {
 101cec2:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 101cec6:	061a      	lsls	r2, r3, #24
 101cec8:	d403      	bmi.n	101ced2 <METROLOGY_APP_vDsp_ctrl_verification+0x1be>
		if ( VMetrology.DSP_CTRL.POWER_OFFSET_P != (uint32_t)DEFAULT_DSP_CTRL_POWER_OFFSET_P ) {
 101ceca:	6c22      	ldr	r2, [r4, #64]	; 0x40
 101cecc:	2a00      	cmp	r2, #0
 101cece:	f040 81f9 	bne.w	101d2c4 <METROLOGY_APP_vDsp_ctrl_verification+0x5b0>
	if ( VMetrology.DSP_CTRL.POWER_OFFSET_CTRL.BIT.REACTIVE_PO_EN == 0 ) {
 101ced2:	f013 0708 	ands.w	r7, r3, #8
 101ced6:	d103      	bne.n	101cee0 <METROLOGY_APP_vDsp_ctrl_verification+0x1cc>
		if ( VMetrology.DSP_CTRL.POWER_OFFSET_Q != DEFAULT_DSP_CTRL_POWER_OFFSET_Q ) {
 101ced8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 101ceda:	2b00      	cmp	r3, #0
 101cedc:	f040 81fe 	bne.w	101d2dc <METROLOGY_APP_vDsp_ctrl_verification+0x5c8>
	if ( VMetrology.DSP_CTRL.SWELL_THR_VA != (uint32_t)DEFAULT_DSP_CTRL_SWELL_THRESHOLD_Vx ) {
 101cee0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 101cee2:	2b00      	cmp	r3, #0
 101cee4:	f040 812f 	bne.w	101d146 <METROLOGY_APP_vDsp_ctrl_verification+0x432>
	if ( VMetrology.DSP_CTRL.SWELL_THR_VB != (uint32_t)DEFAULT_DSP_CTRL_SWELL_THRESHOLD_Vx ) {
 101cee8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 101ceea:	2b00      	cmp	r3, #0
 101ceec:	f040 8138 	bne.w	101d160 <METROLOGY_APP_vDsp_ctrl_verification+0x44c>
	if ( VMetrology.DSP_CTRL.SWELL_THR_VC != (uint32_t)DEFAULT_DSP_CTRL_SWELL_THRESHOLD_Vx ) {
 101cef0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 101cef2:	2b00      	cmp	r3, #0
 101cef4:	f040 8141 	bne.w	101d17a <METROLOGY_APP_vDsp_ctrl_verification+0x466>
	if ( VMetrology.DSP_CTRL.SAG_THR_VA != (uint32_t)DEFAULT_DSP_CTRL_SAG_THRESHOLD_Vx ) {
 101cef8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 101cefa:	2b00      	cmp	r3, #0
 101cefc:	f040 814a 	bne.w	101d194 <METROLOGY_APP_vDsp_ctrl_verification+0x480>
	if ( VMetrology.DSP_CTRL.SAG_THR_VB != (uint32_t)DEFAULT_DSP_CTRL_SAG_THRESHOLD_Vx ) {
 101cf00:	6da3      	ldr	r3, [r4, #88]	; 0x58
 101cf02:	2b00      	cmp	r3, #0
 101cf04:	f040 8153 	bne.w	101d1ae <METROLOGY_APP_vDsp_ctrl_verification+0x49a>
	if ( VMetrology.DSP_CTRL.SAG_THR_VC != (uint32_t)DEFAULT_DSP_CTRL_SAG_THRESHOLD_Vx ) {
 101cf08:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 101cf0a:	2b00      	cmp	r3, #0
 101cf0c:	f040 815c 	bne.w	101d1c8 <METROLOGY_APP_vDsp_ctrl_verification+0x4b4>
		   VMetrology.DSP_CTRL.RESERVED7 | VMetrology.DSP_CTRL.RESERVED8 | VMetrology.DSP_CTRL.RESERVED9 | \
 101cf10:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 101cf14:	c887      	ldmia	r0, {r0, r1, r2, r7}
 101cf16:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 101cf1a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 101cf1c:	432b      	orrs	r3, r5
 101cf1e:	4303      	orrs	r3, r0
 101cf20:	430b      	orrs	r3, r1
 101cf22:	4313      	orrs	r3, r2
 101cf24:	f8d4 50c8 	ldr.w	r5, [r4, #200]	; 0xc8
 101cf28:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
 101cf2c:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 101cf30:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 101cf34:	433b      	orrs	r3, r7
 101cf36:	432b      	orrs	r3, r5
 101cf38:	4303      	orrs	r3, r0
 101cf3a:	430b      	orrs	r3, r1
	if ( ( VMetrology.DSP_CTRL.RESERVED1 | VMetrology.DSP_CTRL.RESERVED2 | VMetrology.DSP_CTRL.RESERVED3 | \
 101cf3c:	4313      	orrs	r3, r2
 101cf3e:	f040 8178 	bne.w	101d232 <METROLOGY_APP_vDsp_ctrl_verification+0x51e>
	if ( VMetrology.DSP_CTRL.ATsense_CTRL_20_23.WORD != (uint32_t)DEFAULT_DSP_CTRL_ATSENSE_CTRL_20_23_MASK ) {
 101cf42:	4b42      	ldr	r3, [pc, #264]	; (101d04c <METROLOGY_APP_vDsp_ctrl_verification+0x338>)
 101cf44:	f8d4 20cc 	ldr.w	r2, [r4, #204]	; 0xcc
 101cf48:	429a      	cmp	r2, r3
 101cf4a:	d009      	beq.n	101cf60 <METROLOGY_APP_vDsp_ctrl_verification+0x24c>
		EEPROM_writer(DSP_CTRL_ATSENSE_CTRL_20_23_ADDR, &VMetrology.DSP_CTRL.ATsense_CTRL_20_23.WORD, 4);
 101cf4c:	2204      	movs	r2, #4
 101cf4e:	4940      	ldr	r1, [pc, #256]	; (101d050 <METROLOGY_APP_vDsp_ctrl_verification+0x33c>)
 101cf50:	4d28      	ldr	r5, [pc, #160]	; (101cff4 <METROLOGY_APP_vDsp_ctrl_verification+0x2e0>)
		VMetrology.DSP_CTRL.ATsense_CTRL_20_23.WORD = (uint32_t)DEFAULT_DSP_CTRL_ATSENSE_CTRL_20_23_MASK;
 101cf52:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
		EEPROM_writer(DSP_CTRL_ATSENSE_CTRL_20_23_ADDR, &VMetrology.DSP_CTRL.ATsense_CTRL_20_23.WORD, 4);
 101cf56:	f44f 7073 	mov.w	r0, #972	; 0x3cc
 101cf5a:	47a8      	blx	r5
		data_ok = false;
 101cf5c:	2300      	movs	r3, #0
 101cf5e:	7033      	strb	r3, [r6, #0]
	if ( VMetrology.DSP_CTRL.ATsense_CTRL_24_27.WORD != (uint32_t)DEFAULT_DSP_CTRL_ATSENSE_CTRL_24_27_MASK ) {
 101cf60:	4b3c      	ldr	r3, [pc, #240]	; (101d054 <METROLOGY_APP_vDsp_ctrl_verification+0x340>)
 101cf62:	f8d4 20d0 	ldr.w	r2, [r4, #208]	; 0xd0
 101cf66:	429a      	cmp	r2, r3
 101cf68:	d009      	beq.n	101cf7e <METROLOGY_APP_vDsp_ctrl_verification+0x26a>
		EEPROM_writer(DSP_CTRL_ATSENSE_CTRL_24_27_ADDR, &VMetrology.DSP_CTRL.ATsense_CTRL_24_27.WORD, 4);
 101cf6a:	2204      	movs	r2, #4
 101cf6c:	493a      	ldr	r1, [pc, #232]	; (101d058 <METROLOGY_APP_vDsp_ctrl_verification+0x344>)
 101cf6e:	4d21      	ldr	r5, [pc, #132]	; (101cff4 <METROLOGY_APP_vDsp_ctrl_verification+0x2e0>)
		VMetrology.DSP_CTRL.ATsense_CTRL_24_27.WORD = (uint32_t)DEFAULT_DSP_CTRL_ATSENSE_CTRL_24_27_MASK;
 101cf70:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
		EEPROM_writer(DSP_CTRL_ATSENSE_CTRL_24_27_ADDR, &VMetrology.DSP_CTRL.ATsense_CTRL_24_27.WORD, 4);
 101cf74:	f44f 7074 	mov.w	r0, #976	; 0x3d0
 101cf78:	47a8      	blx	r5
		data_ok = false;
 101cf7a:	2300      	movs	r3, #0
 101cf7c:	7033      	strb	r3, [r6, #0]
	while ( VMetrology.DSP_CTRL.ATsense_CTRL_28_2B.WORD != (uint32_t)DEFAULT_DSP_CTRL_ATSENSE_CTRL_28_2B_MASK ) {
 101cf7e:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 101cf82:	2b03      	cmp	r3, #3
 101cf84:	d010      	beq.n	101cfa8 <METROLOGY_APP_vDsp_ctrl_verification+0x294>
 101cf86:	4d1b      	ldr	r5, [pc, #108]	; (101cff4 <METROLOGY_APP_vDsp_ctrl_verification+0x2e0>)
		EEPROM_writer(DSP_CTRL_ATSENSE_CTRL_28_2B_ADDR, &VMetrology.DSP_CTRL.ATsense_CTRL_28_2B.WORD, 4);
 101cf88:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 101d05c <METROLOGY_APP_vDsp_ctrl_verification+0x348>
		VMetrology.DSP_CTRL.ATsense_CTRL_28_2B.WORD = (uint32_t)DEFAULT_DSP_CTRL_ATSENSE_CTRL_28_2B_MASK;
 101cf8c:	2703      	movs	r7, #3
		EEPROM_writer(DSP_CTRL_ATSENSE_CTRL_28_2B_ADDR, &VMetrology.DSP_CTRL.ATsense_CTRL_28_2B.WORD, 4);
 101cf8e:	2204      	movs	r2, #4
 101cf90:	4641      	mov	r1, r8
 101cf92:	f44f 7075 	mov.w	r0, #980	; 0x3d4
		VMetrology.DSP_CTRL.ATsense_CTRL_28_2B.WORD = (uint32_t)DEFAULT_DSP_CTRL_ATSENSE_CTRL_28_2B_MASK;
 101cf96:	f8c4 70d4 	str.w	r7, [r4, #212]	; 0xd4
		EEPROM_writer(DSP_CTRL_ATSENSE_CTRL_28_2B_ADDR, &VMetrology.DSP_CTRL.ATsense_CTRL_28_2B.WORD, 4);
 101cf9a:	47a8      	blx	r5
	while ( VMetrology.DSP_CTRL.ATsense_CTRL_28_2B.WORD != (uint32_t)DEFAULT_DSP_CTRL_ATSENSE_CTRL_28_2B_MASK ) {
 101cf9c:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
		data_ok = false;
 101cfa0:	2200      	movs	r2, #0
	while ( VMetrology.DSP_CTRL.ATsense_CTRL_28_2B.WORD != (uint32_t)DEFAULT_DSP_CTRL_ATSENSE_CTRL_28_2B_MASK ) {
 101cfa2:	2b03      	cmp	r3, #3
		data_ok = false;
 101cfa4:	7032      	strb	r2, [r6, #0]
	while ( VMetrology.DSP_CTRL.ATsense_CTRL_28_2B.WORD != (uint32_t)DEFAULT_DSP_CTRL_ATSENSE_CTRL_28_2B_MASK ) {
 101cfa6:	d1f2      	bne.n	101cf8e <METROLOGY_APP_vDsp_ctrl_verification+0x27a>
	if ( (VMetrology.DSP_CTRL.CAL_M_IA == 0xFFFFFFFF) || (VMetrology.DSP_CTRL.CAL_M_IA == 0) ) {
 101cfa8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 101cfaa:	3301      	adds	r3, #1
 101cfac:	2b01      	cmp	r3, #1
 101cfae:	f240 825d 	bls.w	101d46c <METROLOGY_APP_vDsp_ctrl_verification+0x758>
	if ( (VMetrology.DSP_CTRL.CAL_M_IB == 0xFFFFFFFF) || (VMetrology.DSP_CTRL.CAL_M_IB == 0) ) {
 101cfb2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 101cfb6:	3301      	adds	r3, #1
 101cfb8:	2b01      	cmp	r3, #1
 101cfba:	f240 824a 	bls.w	101d452 <METROLOGY_APP_vDsp_ctrl_verification+0x73e>
	if ( (VMetrology.DSP_CTRL.CAL_M_IC == 0xFFFFFFFF) || (VMetrology.DSP_CTRL.CAL_M_IC == 0) ) {
 101cfbe:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 101cfc2:	3301      	adds	r3, #1
 101cfc4:	2b01      	cmp	r3, #1
 101cfc6:	f240 8201 	bls.w	101d3cc <METROLOGY_APP_vDsp_ctrl_verification+0x6b8>
	if ( (VMetrology.DSP_CTRL.CAL_M_VA == 0xFFFFFFFF) || (VMetrology.DSP_CTRL.CAL_M_VA == 0) ) {
 101cfca:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 101cfce:	3301      	adds	r3, #1
 101cfd0:	2b01      	cmp	r3, #1
 101cfd2:	f240 820d 	bls.w	101d3f0 <METROLOGY_APP_vDsp_ctrl_verification+0x6dc>
	if ( (VMetrology.DSP_CTRL.CAL_M_VB == 0xFFFFFFFF) || (VMetrology.DSP_CTRL.CAL_M_VB == 0) ) {
 101cfd6:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 101cfda:	3301      	adds	r3, #1
 101cfdc:	2b01      	cmp	r3, #1
 101cfde:	f240 8219 	bls.w	101d414 <METROLOGY_APP_vDsp_ctrl_verification+0x700>
	if ( (VMetrology.DSP_CTRL.CAL_M_VC == 0xFFFFFFFF) || (VMetrology.DSP_CTRL.CAL_M_VC == 0) ) {
 101cfe2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 101cfe6:	3301      	adds	r3, #1
 101cfe8:	2b01      	cmp	r3, #1
 101cfea:	f240 8225 	bls.w	101d438 <METROLOGY_APP_vDsp_ctrl_verification+0x724>
 101cfee:	e037      	b.n	101d060 <METROLOGY_APP_vDsp_ctrl_verification+0x34c>
 101cff0:	20016770 	.word	0x20016770
 101cff4:	01017509 	.word	0x01017509
 101cff8:	2000008c 	.word	0x2000008c
 101cffc:	20016774 	.word	0x20016774
 101d000:	20016778 	.word	0x20016778
 101d004:	2001677c 	.word	0x2001677c
 101d008:	20016780 	.word	0x20016780
 101d00c:	20016784 	.word	0x20016784
 101d010:	20016c2c 	.word	0x20016c2c
 101d014:	900007d0 	.word	0x900007d0
 101d018:	20016788 	.word	0x20016788
 101d01c:	120207d0 	.word	0x120207d0
 101d020:	2001678c 	.word	0x2001678c
 101d024:	120407d0 	.word	0x120407d0
 101d028:	20016790 	.word	0x20016790
 101d02c:	004ccccd 	.word	0x004ccccd
 101d030:	20016794 	.word	0x20016794
 101d034:	20016798 	.word	0x20016798
 101d038:	2001679c 	.word	0x2001679c
 101d03c:	200167a0 	.word	0x200167a0
 101d040:	200167a4 	.word	0x200167a4
 101d044:	0001096c 	.word	0x0001096c
 101d048:	200167a8 	.word	0x200167a8
 101d04c:	01010100 	.word	0x01010100
 101d050:	2001683c 	.word	0x2001683c
 101d054:	07010101 	.word	0x07010101
 101d058:	20016840 	.word	0x20016840
 101d05c:	20016844 	.word	0x20016844
	if ( VMetrology.DSP_CTRL.CAL_PH_IA == 0xFFFFFFFF ) {
 101d060:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 101d064:	3301      	adds	r3, #1
 101d066:	f000 8142 	beq.w	101d2ee <METROLOGY_APP_vDsp_ctrl_verification+0x5da>
 	if ( VMetrology.DSP_CTRL.CAL_PH_IB == 0xFFFFFFFF ) {
 101d06a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 101d06e:	3301      	adds	r3, #1
 101d070:	f000 814c 	beq.w	101d30c <METROLOGY_APP_vDsp_ctrl_verification+0x5f8>
 	if ( VMetrology.DSP_CTRL.CAL_PH_IC == 0xFFFFFFFF ) {
 101d074:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 101d078:	3301      	adds	r3, #1
 101d07a:	f000 8156 	beq.w	101d32a <METROLOGY_APP_vDsp_ctrl_verification+0x616>
	if ( VMetrology.DSP_CTRL.CAL_PH_VA != 0 ) {
 101d07e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 101d082:	2b00      	cmp	r3, #0
 101d084:	f040 80ca 	bne.w	101d21c <METROLOGY_APP_vDsp_ctrl_verification+0x508>
	if ( VMetrology.DSP_CTRL.CAL_PH_VB != 0 ) {
 101d088:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 101d08c:	2b00      	cmp	r3, #0
 101d08e:	f040 80ba 	bne.w	101d206 <METROLOGY_APP_vDsp_ctrl_verification+0x4f2>
	if ( VMetrology.DSP_CTRL.CAL_PH_VC != 0 ) {
 101d092:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 101d096:	2b00      	cmp	r3, #0
 101d098:	f040 80aa 	bne.w	101d1f0 <METROLOGY_APP_vDsp_ctrl_verification+0x4dc>
	if ( VMetrology.DSP_CTRL.K_IA != (uint32_t)DEFAULT_DSP_CTRL_K_Ix ) {
 101d09c:	4ba8      	ldr	r3, [pc, #672]	; (101d340 <METROLOGY_APP_vDsp_ctrl_verification+0x62c>)
 101d09e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 101d0a0:	429a      	cmp	r2, r3
 101d0a2:	d008      	beq.n	101d0b6 <METROLOGY_APP_vDsp_ctrl_verification+0x3a2>
		EEPROM_writer(DSP_CTRL_K_IA_ADDR, &VMetrology.DSP_CTRL.K_IA, 4);
 101d0a4:	2204      	movs	r2, #4
 101d0a6:	49a7      	ldr	r1, [pc, #668]	; (101d344 <METROLOGY_APP_vDsp_ctrl_verification+0x630>)
 101d0a8:	4da7      	ldr	r5, [pc, #668]	; (101d348 <METROLOGY_APP_vDsp_ctrl_verification+0x634>)
		VMetrology.DSP_CTRL.K_IA = (uint32_t)DEFAULT_DSP_CTRL_K_Ix;
 101d0aa:	6623      	str	r3, [r4, #96]	; 0x60
		EEPROM_writer(DSP_CTRL_K_IA_ADDR, &VMetrology.DSP_CTRL.K_IA, 4);
 101d0ac:	f44f 7058 	mov.w	r0, #864	; 0x360
 101d0b0:	47a8      	blx	r5
		data_ok = false;
 101d0b2:	2300      	movs	r3, #0
 101d0b4:	7033      	strb	r3, [r6, #0]
	if ( VMetrology.DSP_CTRL.K_IB != (uint32_t)DEFAULT_DSP_CTRL_K_Ix ) {
 101d0b6:	4ba2      	ldr	r3, [pc, #648]	; (101d340 <METROLOGY_APP_vDsp_ctrl_verification+0x62c>)
 101d0b8:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 101d0ba:	429a      	cmp	r2, r3
 101d0bc:	d008      	beq.n	101d0d0 <METROLOGY_APP_vDsp_ctrl_verification+0x3bc>
		EEPROM_writer(DSP_CTRL_K_IB_ADDR, &VMetrology.DSP_CTRL.K_IB, 4);
 101d0be:	2204      	movs	r2, #4
 101d0c0:	49a2      	ldr	r1, [pc, #648]	; (101d34c <METROLOGY_APP_vDsp_ctrl_verification+0x638>)
 101d0c2:	4da1      	ldr	r5, [pc, #644]	; (101d348 <METROLOGY_APP_vDsp_ctrl_verification+0x634>)
		VMetrology.DSP_CTRL.K_IB = (uint32_t)DEFAULT_DSP_CTRL_K_Ix;
 101d0c4:	66a3      	str	r3, [r4, #104]	; 0x68
		EEPROM_writer(DSP_CTRL_K_IB_ADDR, &VMetrology.DSP_CTRL.K_IB, 4);
 101d0c6:	f44f 705a 	mov.w	r0, #872	; 0x368
 101d0ca:	47a8      	blx	r5
		data_ok = false;
 101d0cc:	2300      	movs	r3, #0
 101d0ce:	7033      	strb	r3, [r6, #0]
	if ( VMetrology.DSP_CTRL.K_IC != (uint32_t)DEFAULT_DSP_CTRL_K_Ix ) {
 101d0d0:	4b9b      	ldr	r3, [pc, #620]	; (101d340 <METROLOGY_APP_vDsp_ctrl_verification+0x62c>)
 101d0d2:	6f22      	ldr	r2, [r4, #112]	; 0x70
 101d0d4:	429a      	cmp	r2, r3
 101d0d6:	d008      	beq.n	101d0ea <METROLOGY_APP_vDsp_ctrl_verification+0x3d6>
		EEPROM_writer(DSP_CTRL_K_IC_ADDR, &VMetrology.DSP_CTRL.K_IC, 4);
 101d0d8:	2204      	movs	r2, #4
 101d0da:	499d      	ldr	r1, [pc, #628]	; (101d350 <METROLOGY_APP_vDsp_ctrl_verification+0x63c>)
 101d0dc:	4d9a      	ldr	r5, [pc, #616]	; (101d348 <METROLOGY_APP_vDsp_ctrl_verification+0x634>)
		VMetrology.DSP_CTRL.K_IC = (uint32_t)DEFAULT_DSP_CTRL_K_Ix;
 101d0de:	6723      	str	r3, [r4, #112]	; 0x70
		EEPROM_writer(DSP_CTRL_K_IC_ADDR, &VMetrology.DSP_CTRL.K_IC, 4);
 101d0e0:	f44f 705c 	mov.w	r0, #880	; 0x370
 101d0e4:	47a8      	blx	r5
		data_ok = false;
 101d0e6:	2300      	movs	r3, #0
 101d0e8:	7033      	strb	r3, [r6, #0]
	if ( VMetrology.DSP_CTRL.K_VA != (uint32_t)DEFAULT_DSP_CTRL_K_Vx ) {
 101d0ea:	4b9a      	ldr	r3, [pc, #616]	; (101d354 <METROLOGY_APP_vDsp_ctrl_verification+0x640>)
 101d0ec:	6e62      	ldr	r2, [r4, #100]	; 0x64
 101d0ee:	429a      	cmp	r2, r3
 101d0f0:	d008      	beq.n	101d104 <METROLOGY_APP_vDsp_ctrl_verification+0x3f0>
		EEPROM_writer(DSP_CTRL_K_VA_ADDR, &VMetrology.DSP_CTRL.K_VA, 4);
 101d0f2:	2204      	movs	r2, #4
 101d0f4:	4998      	ldr	r1, [pc, #608]	; (101d358 <METROLOGY_APP_vDsp_ctrl_verification+0x644>)
 101d0f6:	4d94      	ldr	r5, [pc, #592]	; (101d348 <METROLOGY_APP_vDsp_ctrl_verification+0x634>)
		VMetrology.DSP_CTRL.K_VA = (uint32_t)DEFAULT_DSP_CTRL_K_Vx;
 101d0f8:	6663      	str	r3, [r4, #100]	; 0x64
		EEPROM_writer(DSP_CTRL_K_VA_ADDR, &VMetrology.DSP_CTRL.K_VA, 4);
 101d0fa:	f44f 7059 	mov.w	r0, #868	; 0x364
 101d0fe:	47a8      	blx	r5
		data_ok = false;
 101d100:	2300      	movs	r3, #0
 101d102:	7033      	strb	r3, [r6, #0]
	if ( VMetrology.DSP_CTRL.K_VB != (uint32_t)DEFAULT_DSP_CTRL_K_Vx ) {
 101d104:	4b93      	ldr	r3, [pc, #588]	; (101d354 <METROLOGY_APP_vDsp_ctrl_verification+0x640>)
 101d106:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 101d108:	429a      	cmp	r2, r3
 101d10a:	d008      	beq.n	101d11e <METROLOGY_APP_vDsp_ctrl_verification+0x40a>
		EEPROM_writer(DSP_CTRL_K_VB_ADDR, &VMetrology.DSP_CTRL.K_VB, 4);
 101d10c:	2204      	movs	r2, #4
 101d10e:	4993      	ldr	r1, [pc, #588]	; (101d35c <METROLOGY_APP_vDsp_ctrl_verification+0x648>)
 101d110:	4d8d      	ldr	r5, [pc, #564]	; (101d348 <METROLOGY_APP_vDsp_ctrl_verification+0x634>)
		VMetrology.DSP_CTRL.K_VB = (uint32_t)DEFAULT_DSP_CTRL_K_Vx;
 101d112:	66e3      	str	r3, [r4, #108]	; 0x6c
		EEPROM_writer(DSP_CTRL_K_VB_ADDR, &VMetrology.DSP_CTRL.K_VB, 4);
 101d114:	f44f 705b 	mov.w	r0, #876	; 0x36c
 101d118:	47a8      	blx	r5
		data_ok = false;
 101d11a:	2300      	movs	r3, #0
 101d11c:	7033      	strb	r3, [r6, #0]
	if ( VMetrology.DSP_CTRL.K_VC != (uint32_t)DEFAULT_DSP_CTRL_K_Vx ) {
 101d11e:	4b8d      	ldr	r3, [pc, #564]	; (101d354 <METROLOGY_APP_vDsp_ctrl_verification+0x640>)
 101d120:	6f62      	ldr	r2, [r4, #116]	; 0x74
 101d122:	429a      	cmp	r2, r3
 101d124:	d00c      	beq.n	101d140 <METROLOGY_APP_vDsp_ctrl_verification+0x42c>
		EEPROM_writer(DSP_CTRL_K_VC_ADDR, &VMetrology.DSP_CTRL.K_VC, 4);
 101d126:	2204      	movs	r2, #4
 101d128:	498d      	ldr	r1, [pc, #564]	; (101d360 <METROLOGY_APP_vDsp_ctrl_verification+0x64c>)
 101d12a:	4d87      	ldr	r5, [pc, #540]	; (101d348 <METROLOGY_APP_vDsp_ctrl_verification+0x634>)
		VMetrology.DSP_CTRL.K_VC = (uint32_t)DEFAULT_DSP_CTRL_K_Vx;
 101d12c:	6763      	str	r3, [r4, #116]	; 0x74
		EEPROM_writer(DSP_CTRL_K_VC_ADDR, &VMetrology.DSP_CTRL.K_VC, 4);
 101d12e:	f44f 705d 	mov.w	r0, #884	; 0x374
 101d132:	47a8      	blx	r5
		data_ok = false;
 101d134:	2000      	movs	r0, #0
 101d136:	7030      	strb	r0, [r6, #0]
}
 101d138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 101d13c:	4e89      	ldr	r6, [pc, #548]	; (101d364 <METROLOGY_APP_vDsp_ctrl_verification+0x650>)
 101d13e:	e5fb      	b.n	101cd38 <METROLOGY_APP_vDsp_ctrl_verification+0x24>
 101d140:	7830      	ldrb	r0, [r6, #0]
 101d142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		VMetrology.DSP_CTRL.SWELL_THR_VA = (uint32_t)DEFAULT_DSP_CTRL_SWELL_THRESHOLD_Vx;
 101d146:	2700      	movs	r7, #0
		EEPROM_writer(DSP_CTRL_SWELL_THR_VA_ADDR, &VMetrology.DSP_CTRL.SWELL_THR_VA, 4);
 101d148:	2204      	movs	r2, #4
 101d14a:	4987      	ldr	r1, [pc, #540]	; (101d368 <METROLOGY_APP_vDsp_ctrl_verification+0x654>)
 101d14c:	4d7e      	ldr	r5, [pc, #504]	; (101d348 <METROLOGY_APP_vDsp_ctrl_verification+0x634>)
		VMetrology.DSP_CTRL.SWELL_THR_VA = (uint32_t)DEFAULT_DSP_CTRL_SWELL_THRESHOLD_Vx;
 101d14e:	64a7      	str	r7, [r4, #72]	; 0x48
		EEPROM_writer(DSP_CTRL_SWELL_THR_VA_ADDR, &VMetrology.DSP_CTRL.SWELL_THR_VA, 4);
 101d150:	f44f 7052 	mov.w	r0, #840	; 0x348
 101d154:	47a8      	blx	r5
	if ( VMetrology.DSP_CTRL.SWELL_THR_VB != (uint32_t)DEFAULT_DSP_CTRL_SWELL_THRESHOLD_Vx ) {
 101d156:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
		data_ok = false;
 101d158:	7037      	strb	r7, [r6, #0]
	if ( VMetrology.DSP_CTRL.SWELL_THR_VB != (uint32_t)DEFAULT_DSP_CTRL_SWELL_THRESHOLD_Vx ) {
 101d15a:	2b00      	cmp	r3, #0
 101d15c:	f43f aec8 	beq.w	101cef0 <METROLOGY_APP_vDsp_ctrl_verification+0x1dc>
		VMetrology.DSP_CTRL.SWELL_THR_VB = (uint32_t)DEFAULT_DSP_CTRL_SWELL_THRESHOLD_Vx;
 101d160:	2700      	movs	r7, #0
		EEPROM_writer(DSP_CTRL_SWELL_THR_VB_ADDR, &VMetrology.DSP_CTRL.SWELL_THR_VB, 4);
 101d162:	2204      	movs	r2, #4
 101d164:	4981      	ldr	r1, [pc, #516]	; (101d36c <METROLOGY_APP_vDsp_ctrl_verification+0x658>)
 101d166:	4d78      	ldr	r5, [pc, #480]	; (101d348 <METROLOGY_APP_vDsp_ctrl_verification+0x634>)
		VMetrology.DSP_CTRL.SWELL_THR_VB = (uint32_t)DEFAULT_DSP_CTRL_SWELL_THRESHOLD_Vx;
 101d168:	64e7      	str	r7, [r4, #76]	; 0x4c
		EEPROM_writer(DSP_CTRL_SWELL_THR_VB_ADDR, &VMetrology.DSP_CTRL.SWELL_THR_VB, 4);
 101d16a:	f44f 7053 	mov.w	r0, #844	; 0x34c
 101d16e:	47a8      	blx	r5
	if ( VMetrology.DSP_CTRL.SWELL_THR_VC != (uint32_t)DEFAULT_DSP_CTRL_SWELL_THRESHOLD_Vx ) {
 101d170:	6d23      	ldr	r3, [r4, #80]	; 0x50
		data_ok = false;
 101d172:	7037      	strb	r7, [r6, #0]
	if ( VMetrology.DSP_CTRL.SWELL_THR_VC != (uint32_t)DEFAULT_DSP_CTRL_SWELL_THRESHOLD_Vx ) {
 101d174:	2b00      	cmp	r3, #0
 101d176:	f43f aebf 	beq.w	101cef8 <METROLOGY_APP_vDsp_ctrl_verification+0x1e4>
		VMetrology.DSP_CTRL.SWELL_THR_VC = (uint32_t)DEFAULT_DSP_CTRL_SWELL_THRESHOLD_Vx;
 101d17a:	2700      	movs	r7, #0
		EEPROM_writer(DSP_CTRL_SWELL_THR_VC_ADDR, &VMetrology.DSP_CTRL.SWELL_THR_VC, 4);
 101d17c:	2204      	movs	r2, #4
 101d17e:	497c      	ldr	r1, [pc, #496]	; (101d370 <METROLOGY_APP_vDsp_ctrl_verification+0x65c>)
 101d180:	4d71      	ldr	r5, [pc, #452]	; (101d348 <METROLOGY_APP_vDsp_ctrl_verification+0x634>)
		VMetrology.DSP_CTRL.SWELL_THR_VC = (uint32_t)DEFAULT_DSP_CTRL_SWELL_THRESHOLD_Vx;
 101d182:	6527      	str	r7, [r4, #80]	; 0x50
		EEPROM_writer(DSP_CTRL_SWELL_THR_VC_ADDR, &VMetrology.DSP_CTRL.SWELL_THR_VC, 4);
 101d184:	f44f 7054 	mov.w	r0, #848	; 0x350
 101d188:	47a8      	blx	r5
	if ( VMetrology.DSP_CTRL.SAG_THR_VA != (uint32_t)DEFAULT_DSP_CTRL_SAG_THRESHOLD_Vx ) {
 101d18a:	6d63      	ldr	r3, [r4, #84]	; 0x54
		data_ok = false;
 101d18c:	7037      	strb	r7, [r6, #0]
	if ( VMetrology.DSP_CTRL.SAG_THR_VA != (uint32_t)DEFAULT_DSP_CTRL_SAG_THRESHOLD_Vx ) {
 101d18e:	2b00      	cmp	r3, #0
 101d190:	f43f aeb6 	beq.w	101cf00 <METROLOGY_APP_vDsp_ctrl_verification+0x1ec>
		VMetrology.DSP_CTRL.SAG_THR_VA = (uint32_t)DEFAULT_DSP_CTRL_SAG_THRESHOLD_Vx;
 101d194:	2700      	movs	r7, #0
		EEPROM_writer(DSP_CTRL_SAG_THR_VA_ADDR, &VMetrology.DSP_CTRL.SAG_THR_VA, 4);
 101d196:	2204      	movs	r2, #4
 101d198:	4976      	ldr	r1, [pc, #472]	; (101d374 <METROLOGY_APP_vDsp_ctrl_verification+0x660>)
 101d19a:	4d6b      	ldr	r5, [pc, #428]	; (101d348 <METROLOGY_APP_vDsp_ctrl_verification+0x634>)
		VMetrology.DSP_CTRL.SAG_THR_VA = (uint32_t)DEFAULT_DSP_CTRL_SAG_THRESHOLD_Vx;
 101d19c:	6567      	str	r7, [r4, #84]	; 0x54
		EEPROM_writer(DSP_CTRL_SAG_THR_VA_ADDR, &VMetrology.DSP_CTRL.SAG_THR_VA, 4);
 101d19e:	f44f 7055 	mov.w	r0, #852	; 0x354
 101d1a2:	47a8      	blx	r5
	if ( VMetrology.DSP_CTRL.SAG_THR_VB != (uint32_t)DEFAULT_DSP_CTRL_SAG_THRESHOLD_Vx ) {
 101d1a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
		data_ok = false;
 101d1a6:	7037      	strb	r7, [r6, #0]
	if ( VMetrology.DSP_CTRL.SAG_THR_VB != (uint32_t)DEFAULT_DSP_CTRL_SAG_THRESHOLD_Vx ) {
 101d1a8:	2b00      	cmp	r3, #0
 101d1aa:	f43f aead 	beq.w	101cf08 <METROLOGY_APP_vDsp_ctrl_verification+0x1f4>
		VMetrology.DSP_CTRL.SAG_THR_VB = (uint32_t)DEFAULT_DSP_CTRL_SAG_THRESHOLD_Vx;
 101d1ae:	2700      	movs	r7, #0
		EEPROM_writer(DSP_CTRL_SAG_THR_VB_ADDR, &VMetrology.DSP_CTRL.SAG_THR_VB, 4);
 101d1b0:	2204      	movs	r2, #4
 101d1b2:	4971      	ldr	r1, [pc, #452]	; (101d378 <METROLOGY_APP_vDsp_ctrl_verification+0x664>)
 101d1b4:	4d64      	ldr	r5, [pc, #400]	; (101d348 <METROLOGY_APP_vDsp_ctrl_verification+0x634>)
		VMetrology.DSP_CTRL.SAG_THR_VB = (uint32_t)DEFAULT_DSP_CTRL_SAG_THRESHOLD_Vx;
 101d1b6:	65a7      	str	r7, [r4, #88]	; 0x58
		EEPROM_writer(DSP_CTRL_SAG_THR_VB_ADDR, &VMetrology.DSP_CTRL.SAG_THR_VB, 4);
 101d1b8:	f44f 7056 	mov.w	r0, #856	; 0x358
 101d1bc:	47a8      	blx	r5
	if ( VMetrology.DSP_CTRL.SAG_THR_VC != (uint32_t)DEFAULT_DSP_CTRL_SAG_THRESHOLD_Vx ) {
 101d1be:	6de3      	ldr	r3, [r4, #92]	; 0x5c
		data_ok = false;
 101d1c0:	7037      	strb	r7, [r6, #0]
	if ( VMetrology.DSP_CTRL.SAG_THR_VC != (uint32_t)DEFAULT_DSP_CTRL_SAG_THRESHOLD_Vx ) {
 101d1c2:	2b00      	cmp	r3, #0
 101d1c4:	f43f aea4 	beq.w	101cf10 <METROLOGY_APP_vDsp_ctrl_verification+0x1fc>
		VMetrology.DSP_CTRL.SAG_THR_VC = (uint32_t)DEFAULT_DSP_CTRL_SAG_THRESHOLD_Vx;
 101d1c8:	2700      	movs	r7, #0
		EEPROM_writer(DSP_CTRL_SAG_THR_VC_ADDR, &VMetrology.DSP_CTRL.SAG_THR_VC, 4);
 101d1ca:	2204      	movs	r2, #4
 101d1cc:	496b      	ldr	r1, [pc, #428]	; (101d37c <METROLOGY_APP_vDsp_ctrl_verification+0x668>)
 101d1ce:	4d5e      	ldr	r5, [pc, #376]	; (101d348 <METROLOGY_APP_vDsp_ctrl_verification+0x634>)
		VMetrology.DSP_CTRL.SAG_THR_VC = (uint32_t)DEFAULT_DSP_CTRL_SAG_THRESHOLD_Vx;
 101d1d0:	65e7      	str	r7, [r4, #92]	; 0x5c
		EEPROM_writer(DSP_CTRL_SAG_THR_VC_ADDR, &VMetrology.DSP_CTRL.SAG_THR_VC, 4);
 101d1d2:	f44f 7057 	mov.w	r0, #860	; 0x35c
 101d1d6:	47a8      	blx	r5
		data_ok = false;
 101d1d8:	7037      	strb	r7, [r6, #0]
 101d1da:	e699      	b.n	101cf10 <METROLOGY_APP_vDsp_ctrl_verification+0x1fc>
		VMetrology.DSP_CTRL.POWER_OFFSET_CTRL.WORD = (uint32_t)DEFAULT_DSP_CTRL_POWER_OFFSET_CTRL;
 101d1dc:	2700      	movs	r7, #0
		EEPROM_writer(DSP_CTRL_POWER_OFFSET_CTRL_ADDR, &VMetrology.DSP_CTRL.POWER_OFFSET_CTRL.WORD, 4);
 101d1de:	2204      	movs	r2, #4
 101d1e0:	4967      	ldr	r1, [pc, #412]	; (101d380 <METROLOGY_APP_vDsp_ctrl_verification+0x66c>)
 101d1e2:	4d59      	ldr	r5, [pc, #356]	; (101d348 <METROLOGY_APP_vDsp_ctrl_verification+0x634>)
		VMetrology.DSP_CTRL.POWER_OFFSET_CTRL.WORD = (uint32_t)DEFAULT_DSP_CTRL_POWER_OFFSET_CTRL;
 101d1e4:	63e7      	str	r7, [r4, #60]	; 0x3c
		EEPROM_writer(DSP_CTRL_POWER_OFFSET_CTRL_ADDR, &VMetrology.DSP_CTRL.POWER_OFFSET_CTRL.WORD, 4);
 101d1e6:	f44f 704f 	mov.w	r0, #828	; 0x33c
 101d1ea:	47a8      	blx	r5
		data_ok = false;
 101d1ec:	7037      	strb	r7, [r6, #0]
 101d1ee:	e668      	b.n	101cec2 <METROLOGY_APP_vDsp_ctrl_verification+0x1ae>
		VMetrology.DSP_CTRL.CAL_PH_VC = 0;
 101d1f0:	2500      	movs	r5, #0
		EEPROM_writer(DSP_CTRL_CAL_PH_VC_ADDR, &VMetrology.DSP_CTRL.CAL_PH_VC, 4);
 101d1f2:	2204      	movs	r2, #4
 101d1f4:	4963      	ldr	r1, [pc, #396]	; (101d384 <METROLOGY_APP_vDsp_ctrl_verification+0x670>)
 101d1f6:	4b54      	ldr	r3, [pc, #336]	; (101d348 <METROLOGY_APP_vDsp_ctrl_verification+0x634>)
		VMetrology.DSP_CTRL.CAL_PH_VC = 0;
 101d1f8:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
		EEPROM_writer(DSP_CTRL_CAL_PH_VC_ADDR, &VMetrology.DSP_CTRL.CAL_PH_VC, 4);
 101d1fc:	f44f 706b 	mov.w	r0, #940	; 0x3ac
 101d200:	4798      	blx	r3
		data_ok = false;
 101d202:	7035      	strb	r5, [r6, #0]
 101d204:	e74a      	b.n	101d09c <METROLOGY_APP_vDsp_ctrl_verification+0x388>
		VMetrology.DSP_CTRL.CAL_PH_VB = 0;
 101d206:	2500      	movs	r5, #0
		EEPROM_writer(DSP_CTRL_CAL_PH_VB_ADDR, &VMetrology.DSP_CTRL.CAL_PH_VB, 4);
 101d208:	2204      	movs	r2, #4
 101d20a:	495f      	ldr	r1, [pc, #380]	; (101d388 <METROLOGY_APP_vDsp_ctrl_verification+0x674>)
 101d20c:	4b4e      	ldr	r3, [pc, #312]	; (101d348 <METROLOGY_APP_vDsp_ctrl_verification+0x634>)
		VMetrology.DSP_CTRL.CAL_PH_VB = 0;
 101d20e:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
		EEPROM_writer(DSP_CTRL_CAL_PH_VB_ADDR, &VMetrology.DSP_CTRL.CAL_PH_VB, 4);
 101d212:	f44f 7069 	mov.w	r0, #932	; 0x3a4
 101d216:	4798      	blx	r3
		data_ok = false;
 101d218:	7035      	strb	r5, [r6, #0]
 101d21a:	e73a      	b.n	101d092 <METROLOGY_APP_vDsp_ctrl_verification+0x37e>
		VMetrology.DSP_CTRL.CAL_PH_VA = 0;
 101d21c:	2500      	movs	r5, #0
		EEPROM_writer(DSP_CTRL_CAL_PH_VA_ADDR, &VMetrology.DSP_CTRL.CAL_PH_VA, 4);
 101d21e:	2204      	movs	r2, #4
 101d220:	495a      	ldr	r1, [pc, #360]	; (101d38c <METROLOGY_APP_vDsp_ctrl_verification+0x678>)
 101d222:	4b49      	ldr	r3, [pc, #292]	; (101d348 <METROLOGY_APP_vDsp_ctrl_verification+0x634>)
		VMetrology.DSP_CTRL.CAL_PH_VA = 0;
 101d224:	f8c4 509c 	str.w	r5, [r4, #156]	; 0x9c
		EEPROM_writer(DSP_CTRL_CAL_PH_VA_ADDR, &VMetrology.DSP_CTRL.CAL_PH_VA, 4);
 101d228:	f44f 7067 	mov.w	r0, #924	; 0x39c
 101d22c:	4798      	blx	r3
		data_ok = false;
 101d22e:	7035      	strb	r5, [r6, #0]
 101d230:	e72a      	b.n	101d088 <METROLOGY_APP_vDsp_ctrl_verification+0x374>
		VMetrology.DSP_CTRL.RESERVED1 = 0;
 101d232:	2700      	movs	r7, #0
		EEPROM_writer(DSP_CTRL_RESERVED1_ADDR, &VMetrology.DSP_CTRL.RESERVED1, 4);
 101d234:	4d44      	ldr	r5, [pc, #272]	; (101d348 <METROLOGY_APP_vDsp_ctrl_verification+0x634>)
 101d236:	4956      	ldr	r1, [pc, #344]	; (101d390 <METROLOGY_APP_vDsp_ctrl_verification+0x67c>)
		VMetrology.DSP_CTRL.RESERVED1 = 0;
 101d238:	67a7      	str	r7, [r4, #120]	; 0x78
		EEPROM_writer(DSP_CTRL_RESERVED1_ADDR, &VMetrology.DSP_CTRL.RESERVED1, 4);
 101d23a:	2204      	movs	r2, #4
 101d23c:	f44f 705e 	mov.w	r0, #888	; 0x378
 101d240:	47a8      	blx	r5
		EEPROM_writer(DSP_CTRL_RESERVED2_ADDR, &VMetrology.DSP_CTRL.RESERVED2, 4);
 101d242:	2204      	movs	r2, #4
 101d244:	4953      	ldr	r1, [pc, #332]	; (101d394 <METROLOGY_APP_vDsp_ctrl_verification+0x680>)
		VMetrology.DSP_CTRL.RESERVED2 = 0;
 101d246:	f8c4 7094 	str.w	r7, [r4, #148]	; 0x94
		EEPROM_writer(DSP_CTRL_RESERVED2_ADDR, &VMetrology.DSP_CTRL.RESERVED2, 4);
 101d24a:	f44f 7065 	mov.w	r0, #916	; 0x394
 101d24e:	47a8      	blx	r5
		EEPROM_writer(DSP_CTRL_RESERVED3_ADDR, &VMetrology.DSP_CTRL.RESERVED3, 4);
 101d250:	2204      	movs	r2, #4
 101d252:	4951      	ldr	r1, [pc, #324]	; (101d398 <METROLOGY_APP_vDsp_ctrl_verification+0x684>)
		VMetrology.DSP_CTRL.RESERVED3 = 0;
 101d254:	f8c4 70b0 	str.w	r7, [r4, #176]	; 0xb0
		EEPROM_writer(DSP_CTRL_RESERVED3_ADDR, &VMetrology.DSP_CTRL.RESERVED3, 4);
 101d258:	f44f 706c 	mov.w	r0, #944	; 0x3b0
 101d25c:	47a8      	blx	r5
		EEPROM_writer(DSP_CTRL_RESERVED4_ADDR, &VMetrology.DSP_CTRL.RESERVED4, 4);
 101d25e:	2204      	movs	r2, #4
 101d260:	494e      	ldr	r1, [pc, #312]	; (101d39c <METROLOGY_APP_vDsp_ctrl_verification+0x688>)
		VMetrology.DSP_CTRL.RESERVED4 = 0;
 101d262:	f8c4 70b4 	str.w	r7, [r4, #180]	; 0xb4
		EEPROM_writer(DSP_CTRL_RESERVED4_ADDR, &VMetrology.DSP_CTRL.RESERVED4, 4);
 101d266:	f44f 706d 	mov.w	r0, #948	; 0x3b4
 101d26a:	47a8      	blx	r5
		EEPROM_writer(DSP_CTRL_RESERVED5_ADDR, &VMetrology.DSP_CTRL.RESERVED5, 4);
 101d26c:	2204      	movs	r2, #4
 101d26e:	494c      	ldr	r1, [pc, #304]	; (101d3a0 <METROLOGY_APP_vDsp_ctrl_verification+0x68c>)
		VMetrology.DSP_CTRL.RESERVED5 = 0;
 101d270:	f8c4 70b8 	str.w	r7, [r4, #184]	; 0xb8
		EEPROM_writer(DSP_CTRL_RESERVED5_ADDR, &VMetrology.DSP_CTRL.RESERVED5, 4);
 101d274:	f44f 706e 	mov.w	r0, #952	; 0x3b8
 101d278:	47a8      	blx	r5
		EEPROM_writer(DSP_CTRL_RESERVED6_ADDR, &VMetrology.DSP_CTRL.RESERVED6, 4);
 101d27a:	2204      	movs	r2, #4
 101d27c:	4949      	ldr	r1, [pc, #292]	; (101d3a4 <METROLOGY_APP_vDsp_ctrl_verification+0x690>)
		VMetrology.DSP_CTRL.RESERVED6 = 0;
 101d27e:	f8c4 70bc 	str.w	r7, [r4, #188]	; 0xbc
		EEPROM_writer(DSP_CTRL_RESERVED6_ADDR, &VMetrology.DSP_CTRL.RESERVED6, 4);
 101d282:	f44f 706f 	mov.w	r0, #956	; 0x3bc
 101d286:	47a8      	blx	r5
		EEPROM_writer(DSP_CTRL_RESERVED7_ADDR, &VMetrology.DSP_CTRL.RESERVED7, 4);
 101d288:	2204      	movs	r2, #4
 101d28a:	4947      	ldr	r1, [pc, #284]	; (101d3a8 <METROLOGY_APP_vDsp_ctrl_verification+0x694>)
		VMetrology.DSP_CTRL.RESERVED7 = 0;
 101d28c:	f8c4 70c0 	str.w	r7, [r4, #192]	; 0xc0
		EEPROM_writer(DSP_CTRL_RESERVED7_ADDR, &VMetrology.DSP_CTRL.RESERVED7, 4);
 101d290:	f44f 7070 	mov.w	r0, #960	; 0x3c0
 101d294:	47a8      	blx	r5
		EEPROM_writer(DSP_CTRL_RESERVED8_ADDR, &VMetrology.DSP_CTRL.RESERVED8, 4);
 101d296:	2204      	movs	r2, #4
 101d298:	4944      	ldr	r1, [pc, #272]	; (101d3ac <METROLOGY_APP_vDsp_ctrl_verification+0x698>)
		VMetrology.DSP_CTRL.RESERVED8 = 0;
 101d29a:	f8c4 70c4 	str.w	r7, [r4, #196]	; 0xc4
		EEPROM_writer(DSP_CTRL_RESERVED8_ADDR, &VMetrology.DSP_CTRL.RESERVED8, 4);
 101d29e:	f44f 7071 	mov.w	r0, #964	; 0x3c4
 101d2a2:	47a8      	blx	r5
		EEPROM_writer(DSP_CTRL_RESERVED9_ADDR, &VMetrology.DSP_CTRL.RESERVED9, 4);
 101d2a4:	2204      	movs	r2, #4
 101d2a6:	4942      	ldr	r1, [pc, #264]	; (101d3b0 <METROLOGY_APP_vDsp_ctrl_verification+0x69c>)
		VMetrology.DSP_CTRL.RESERVED9 = 0;
 101d2a8:	f8c4 70c8 	str.w	r7, [r4, #200]	; 0xc8
		EEPROM_writer(DSP_CTRL_RESERVED9_ADDR, &VMetrology.DSP_CTRL.RESERVED9, 4);
 101d2ac:	f44f 7072 	mov.w	r0, #968	; 0x3c8
 101d2b0:	47a8      	blx	r5
		EEPROM_writer(DSP_CTRL_RESERVED10_ADDR, &VMetrology.DSP_CTRL.RESERVED10, 4);
 101d2b2:	2204      	movs	r2, #4
 101d2b4:	493f      	ldr	r1, [pc, #252]	; (101d3b4 <METROLOGY_APP_vDsp_ctrl_verification+0x6a0>)
		VMetrology.DSP_CTRL.RESERVED10 = 0;
 101d2b6:	f8c4 70d8 	str.w	r7, [r4, #216]	; 0xd8
		EEPROM_writer(DSP_CTRL_RESERVED10_ADDR, &VMetrology.DSP_CTRL.RESERVED10, 4);
 101d2ba:	f44f 7076 	mov.w	r0, #984	; 0x3d8
 101d2be:	47a8      	blx	r5
		data_ok = false;
 101d2c0:	7037      	strb	r7, [r6, #0]
 101d2c2:	e63e      	b.n	101cf42 <METROLOGY_APP_vDsp_ctrl_verification+0x22e>
			VMetrology.DSP_CTRL.POWER_OFFSET_P = (uint32_t)DEFAULT_DSP_CTRL_POWER_OFFSET_P;
 101d2c4:	2700      	movs	r7, #0
			EEPROM_writer(DSP_CTRL_POWER_OFFSET_P_ADDR, &VMetrology.DSP_CTRL.POWER_OFFSET_P, 4);
 101d2c6:	2204      	movs	r2, #4
 101d2c8:	493b      	ldr	r1, [pc, #236]	; (101d3b8 <METROLOGY_APP_vDsp_ctrl_verification+0x6a4>)
 101d2ca:	4d1f      	ldr	r5, [pc, #124]	; (101d348 <METROLOGY_APP_vDsp_ctrl_verification+0x634>)
			VMetrology.DSP_CTRL.POWER_OFFSET_P = (uint32_t)DEFAULT_DSP_CTRL_POWER_OFFSET_P;
 101d2cc:	6427      	str	r7, [r4, #64]	; 0x40
			EEPROM_writer(DSP_CTRL_POWER_OFFSET_P_ADDR, &VMetrology.DSP_CTRL.POWER_OFFSET_P, 4);
 101d2ce:	f44f 7050 	mov.w	r0, #832	; 0x340
 101d2d2:	47a8      	blx	r5
 101d2d4:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
			data_ok = false;
 101d2d8:	7037      	strb	r7, [r6, #0]
 101d2da:	e5fa      	b.n	101ced2 <METROLOGY_APP_vDsp_ctrl_verification+0x1be>
			EEPROM_writer(DSP_CTRL_POWER_OFFSET_Q_ADDR, &VMetrology.DSP_CTRL.POWER_OFFSET_Q, 4);
 101d2dc:	2204      	movs	r2, #4
 101d2de:	4937      	ldr	r1, [pc, #220]	; (101d3bc <METROLOGY_APP_vDsp_ctrl_verification+0x6a8>)
 101d2e0:	4d19      	ldr	r5, [pc, #100]	; (101d348 <METROLOGY_APP_vDsp_ctrl_verification+0x634>)
			VMetrology.DSP_CTRL.POWER_OFFSET_Q = (uint32_t)DEFAULT_DSP_CTRL_POWER_OFFSET_Q;
 101d2e2:	6467      	str	r7, [r4, #68]	; 0x44
			EEPROM_writer(DSP_CTRL_POWER_OFFSET_Q_ADDR, &VMetrology.DSP_CTRL.POWER_OFFSET_Q, 4);
 101d2e4:	f44f 7051 	mov.w	r0, #836	; 0x344
 101d2e8:	47a8      	blx	r5
			data_ok = false;
 101d2ea:	7037      	strb	r7, [r6, #0]
 101d2ec:	e5f8      	b.n	101cee0 <METROLOGY_APP_vDsp_ctrl_verification+0x1cc>
		VMetrology.DSP_CTRL.CAL_PH_IA = 0;
 101d2ee:	2500      	movs	r5, #0
		EEPROM_writer(DSP_CTRL_CAL_PH_IA_ADDR, &VMetrology.DSP_CTRL.CAL_PH_IA, 4);
 101d2f0:	4b15      	ldr	r3, [pc, #84]	; (101d348 <METROLOGY_APP_vDsp_ctrl_verification+0x634>)
 101d2f2:	4933      	ldr	r1, [pc, #204]	; (101d3c0 <METROLOGY_APP_vDsp_ctrl_verification+0x6ac>)
		VMetrology.DSP_CTRL.CAL_PH_IA = 0;
 101d2f4:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
		EEPROM_writer(DSP_CTRL_CAL_PH_IA_ADDR, &VMetrology.DSP_CTRL.CAL_PH_IA, 4);
 101d2f8:	2204      	movs	r2, #4
 101d2fa:	f44f 7066 	mov.w	r0, #920	; 0x398
 101d2fe:	4798      	blx	r3
 	if ( VMetrology.DSP_CTRL.CAL_PH_IB == 0xFFFFFFFF ) {
 101d300:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
		data_ok = false;
 101d304:	7035      	strb	r5, [r6, #0]
 	if ( VMetrology.DSP_CTRL.CAL_PH_IB == 0xFFFFFFFF ) {
 101d306:	3301      	adds	r3, #1
 101d308:	f47f aeb4 	bne.w	101d074 <METROLOGY_APP_vDsp_ctrl_verification+0x360>
		VMetrology.DSP_CTRL.CAL_PH_IB = 0;
 101d30c:	2500      	movs	r5, #0
		EEPROM_writer(DSP_CTRL_CAL_PH_IB_ADDR, &VMetrology.DSP_CTRL.CAL_PH_IB, 4);
 101d30e:	4b0e      	ldr	r3, [pc, #56]	; (101d348 <METROLOGY_APP_vDsp_ctrl_verification+0x634>)
 101d310:	492c      	ldr	r1, [pc, #176]	; (101d3c4 <METROLOGY_APP_vDsp_ctrl_verification+0x6b0>)
		VMetrology.DSP_CTRL.CAL_PH_IB = 0;
 101d312:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		EEPROM_writer(DSP_CTRL_CAL_PH_IB_ADDR, &VMetrology.DSP_CTRL.CAL_PH_IB, 4);
 101d316:	2204      	movs	r2, #4
 101d318:	f44f 7068 	mov.w	r0, #928	; 0x3a0
 101d31c:	4798      	blx	r3
 	if ( VMetrology.DSP_CTRL.CAL_PH_IC == 0xFFFFFFFF ) {
 101d31e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
		data_ok = false;
 101d322:	7035      	strb	r5, [r6, #0]
 	if ( VMetrology.DSP_CTRL.CAL_PH_IC == 0xFFFFFFFF ) {
 101d324:	3301      	adds	r3, #1
 101d326:	f47f aeaa 	bne.w	101d07e <METROLOGY_APP_vDsp_ctrl_verification+0x36a>
		VMetrology.DSP_CTRL.CAL_PH_IC = 0;
 101d32a:	2500      	movs	r5, #0
		EEPROM_writer(DSP_CTRL_CAL_PH_IC_ADDR, &VMetrology.DSP_CTRL.CAL_PH_IC, 4);
 101d32c:	2204      	movs	r2, #4
 101d32e:	4926      	ldr	r1, [pc, #152]	; (101d3c8 <METROLOGY_APP_vDsp_ctrl_verification+0x6b4>)
 101d330:	4b05      	ldr	r3, [pc, #20]	; (101d348 <METROLOGY_APP_vDsp_ctrl_verification+0x634>)
		VMetrology.DSP_CTRL.CAL_PH_IC = 0;
 101d332:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
		EEPROM_writer(DSP_CTRL_CAL_PH_IC_ADDR, &VMetrology.DSP_CTRL.CAL_PH_IC, 4);
 101d336:	f44f 706a 	mov.w	r0, #936	; 0x3a8
 101d33a:	4798      	blx	r3
		data_ok = false;
 101d33c:	7035      	strb	r5, [r6, #0]
 101d33e:	e69e      	b.n	101d07e <METROLOGY_APP_vDsp_ctrl_verification+0x36a>
 101d340:	000c0e6b 	.word	0x000c0e6b
 101d344:	200167d0 	.word	0x200167d0
 101d348:	01017509 	.word	0x01017509
 101d34c:	200167d8 	.word	0x200167d8
 101d350:	200167e0 	.word	0x200167e0
 101d354:	0019cc00 	.word	0x0019cc00
 101d358:	200167d4 	.word	0x200167d4
 101d35c:	200167dc 	.word	0x200167dc
 101d360:	200167e4 	.word	0x200167e4
 101d364:	2000008c 	.word	0x2000008c
 101d368:	200167b8 	.word	0x200167b8
 101d36c:	200167bc 	.word	0x200167bc
 101d370:	200167c0 	.word	0x200167c0
 101d374:	200167c4 	.word	0x200167c4
 101d378:	200167c8 	.word	0x200167c8
 101d37c:	200167cc 	.word	0x200167cc
 101d380:	200167ac 	.word	0x200167ac
 101d384:	2001681c 	.word	0x2001681c
 101d388:	20016814 	.word	0x20016814
 101d38c:	2001680c 	.word	0x2001680c
 101d390:	200167e8 	.word	0x200167e8
 101d394:	20016804 	.word	0x20016804
 101d398:	20016820 	.word	0x20016820
 101d39c:	20016824 	.word	0x20016824
 101d3a0:	20016828 	.word	0x20016828
 101d3a4:	2001682c 	.word	0x2001682c
 101d3a8:	20016830 	.word	0x20016830
 101d3ac:	20016834 	.word	0x20016834
 101d3b0:	20016838 	.word	0x20016838
 101d3b4:	20016848 	.word	0x20016848
 101d3b8:	200167b0 	.word	0x200167b0
 101d3bc:	200167b4 	.word	0x200167b4
 101d3c0:	20016808 	.word	0x20016808
 101d3c4:	20016810 	.word	0x20016810
 101d3c8:	20016818 	.word	0x20016818
		VMetrology.DSP_CTRL.CAL_M_IC = (uint32_t)0x20000000;
 101d3cc:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
		EEPROM_writer(DSP_CTRL_CAL_M_IC_ADDR, &VMetrology.DSP_CTRL.CAL_M_IC, 4);
 101d3d0:	4b2c      	ldr	r3, [pc, #176]	; (101d484 <METROLOGY_APP_vDsp_ctrl_verification+0x770>)
		VMetrology.DSP_CTRL.CAL_M_IC = (uint32_t)0x20000000;
 101d3d2:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
		EEPROM_writer(DSP_CTRL_CAL_M_IC_ADDR, &VMetrology.DSP_CTRL.CAL_M_IC, 4);
 101d3d6:	2204      	movs	r2, #4
 101d3d8:	492b      	ldr	r1, [pc, #172]	; (101d488 <METROLOGY_APP_vDsp_ctrl_verification+0x774>)
 101d3da:	f44f 7063 	mov.w	r0, #908	; 0x38c
 101d3de:	4798      	blx	r3
		data_ok = false;
 101d3e0:	2300      	movs	r3, #0
 101d3e2:	7033      	strb	r3, [r6, #0]
	if ( (VMetrology.DSP_CTRL.CAL_M_VA == 0xFFFFFFFF) || (VMetrology.DSP_CTRL.CAL_M_VA == 0) ) {
 101d3e4:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 101d3e8:	3301      	adds	r3, #1
 101d3ea:	2b01      	cmp	r3, #1
 101d3ec:	f63f adf3 	bhi.w	101cfd6 <METROLOGY_APP_vDsp_ctrl_verification+0x2c2>
		VMetrology.DSP_CTRL.CAL_M_VA = (uint32_t)0x20000000;
 101d3f0:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
		EEPROM_writer(DSP_CTRL_CAL_M_VA_ADDR, &VMetrology.DSP_CTRL.CAL_M_VA, 4);
 101d3f4:	4b23      	ldr	r3, [pc, #140]	; (101d484 <METROLOGY_APP_vDsp_ctrl_verification+0x770>)
		VMetrology.DSP_CTRL.CAL_M_VA = (uint32_t)0x20000000;
 101d3f6:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
		EEPROM_writer(DSP_CTRL_CAL_M_VA_ADDR, &VMetrology.DSP_CTRL.CAL_M_VA, 4);
 101d3fa:	2204      	movs	r2, #4
 101d3fc:	4923      	ldr	r1, [pc, #140]	; (101d48c <METROLOGY_APP_vDsp_ctrl_verification+0x778>)
 101d3fe:	f44f 7060 	mov.w	r0, #896	; 0x380
 101d402:	4798      	blx	r3
		data_ok = false;
 101d404:	2300      	movs	r3, #0
 101d406:	7033      	strb	r3, [r6, #0]
	if ( (VMetrology.DSP_CTRL.CAL_M_VB == 0xFFFFFFFF) || (VMetrology.DSP_CTRL.CAL_M_VB == 0) ) {
 101d408:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 101d40c:	3301      	adds	r3, #1
 101d40e:	2b01      	cmp	r3, #1
 101d410:	f63f ade7 	bhi.w	101cfe2 <METROLOGY_APP_vDsp_ctrl_verification+0x2ce>
		VMetrology.DSP_CTRL.CAL_M_VB = (uint32_t)0x20000000;
 101d414:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
		EEPROM_writer(DSP_CTRL_CAL_M_VB_ADDR, &VMetrology.DSP_CTRL.CAL_M_VB, 4);
 101d418:	4b1a      	ldr	r3, [pc, #104]	; (101d484 <METROLOGY_APP_vDsp_ctrl_verification+0x770>)
		VMetrology.DSP_CTRL.CAL_M_VB = (uint32_t)0x20000000;
 101d41a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
		EEPROM_writer(DSP_CTRL_CAL_M_VB_ADDR, &VMetrology.DSP_CTRL.CAL_M_VB, 4);
 101d41e:	2204      	movs	r2, #4
 101d420:	491b      	ldr	r1, [pc, #108]	; (101d490 <METROLOGY_APP_vDsp_ctrl_verification+0x77c>)
 101d422:	f44f 7062 	mov.w	r0, #904	; 0x388
 101d426:	4798      	blx	r3
		data_ok = false;
 101d428:	2300      	movs	r3, #0
 101d42a:	7033      	strb	r3, [r6, #0]
	if ( (VMetrology.DSP_CTRL.CAL_M_VC == 0xFFFFFFFF) || (VMetrology.DSP_CTRL.CAL_M_VC == 0) ) {
 101d42c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 101d430:	3301      	adds	r3, #1
 101d432:	2b01      	cmp	r3, #1
 101d434:	f63f ae14 	bhi.w	101d060 <METROLOGY_APP_vDsp_ctrl_verification+0x34c>
		VMetrology.DSP_CTRL.CAL_M_VC = (uint32_t)0x20000000;
 101d438:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
		EEPROM_writer(DSP_CTRL_CAL_M_VC_ADDR, &VMetrology.DSP_CTRL.CAL_M_VC, 4);
 101d43c:	4b11      	ldr	r3, [pc, #68]	; (101d484 <METROLOGY_APP_vDsp_ctrl_verification+0x770>)
		VMetrology.DSP_CTRL.CAL_M_VC = (uint32_t)0x20000000;
 101d43e:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
		EEPROM_writer(DSP_CTRL_CAL_M_VC_ADDR, &VMetrology.DSP_CTRL.CAL_M_VC, 4);
 101d442:	2204      	movs	r2, #4
 101d444:	4913      	ldr	r1, [pc, #76]	; (101d494 <METROLOGY_APP_vDsp_ctrl_verification+0x780>)
 101d446:	f44f 7064 	mov.w	r0, #912	; 0x390
 101d44a:	4798      	blx	r3
		data_ok = false;
 101d44c:	2300      	movs	r3, #0
 101d44e:	7033      	strb	r3, [r6, #0]
 101d450:	e606      	b.n	101d060 <METROLOGY_APP_vDsp_ctrl_verification+0x34c>
		VMetrology.DSP_CTRL.CAL_M_IB = (uint32_t)0x20000000;
 101d452:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
		EEPROM_writer(DSP_CTRL_CAL_M_IB_ADDR, &VMetrology.DSP_CTRL.CAL_M_IB, 4);
 101d456:	4b0b      	ldr	r3, [pc, #44]	; (101d484 <METROLOGY_APP_vDsp_ctrl_verification+0x770>)
		VMetrology.DSP_CTRL.CAL_M_IB = (uint32_t)0x20000000;
 101d458:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
		EEPROM_writer(DSP_CTRL_CAL_M_IB_ADDR, &VMetrology.DSP_CTRL.CAL_M_IB, 4);
 101d45c:	2204      	movs	r2, #4
 101d45e:	490e      	ldr	r1, [pc, #56]	; (101d498 <METROLOGY_APP_vDsp_ctrl_verification+0x784>)
 101d460:	f44f 7061 	mov.w	r0, #900	; 0x384
 101d464:	4798      	blx	r3
		data_ok = false;
 101d466:	2300      	movs	r3, #0
 101d468:	7033      	strb	r3, [r6, #0]
 101d46a:	e5a8      	b.n	101cfbe <METROLOGY_APP_vDsp_ctrl_verification+0x2aa>
		VMetrology.DSP_CTRL.CAL_M_IA = (uint32_t)0x20000000;
 101d46c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
		EEPROM_writer(DSP_CTRL_CAL_M_IA_ADDR, &VMetrology.DSP_CTRL.CAL_M_IA, 4);
 101d470:	4b04      	ldr	r3, [pc, #16]	; (101d484 <METROLOGY_APP_vDsp_ctrl_verification+0x770>)
		VMetrology.DSP_CTRL.CAL_M_IA = (uint32_t)0x20000000;
 101d472:	67e0      	str	r0, [r4, #124]	; 0x7c
		EEPROM_writer(DSP_CTRL_CAL_M_IA_ADDR, &VMetrology.DSP_CTRL.CAL_M_IA, 4);
 101d474:	2204      	movs	r2, #4
 101d476:	4909      	ldr	r1, [pc, #36]	; (101d49c <METROLOGY_APP_vDsp_ctrl_verification+0x788>)
 101d478:	f44f 705f 	mov.w	r0, #892	; 0x37c
 101d47c:	4798      	blx	r3
		data_ok = false;
 101d47e:	2300      	movs	r3, #0
 101d480:	7033      	strb	r3, [r6, #0]
 101d482:	e596      	b.n	101cfb2 <METROLOGY_APP_vDsp_ctrl_verification+0x29e>
 101d484:	01017509 	.word	0x01017509
 101d488:	200167fc 	.word	0x200167fc
 101d48c:	200167f0 	.word	0x200167f0
 101d490:	200167f8 	.word	0x200167f8
 101d494:	20016800 	.word	0x20016800
 101d498:	200167f4 	.word	0x200167f4
 101d49c:	200167ec 	.word	0x200167ec

0101d4a0 <METROLOGY_APP_vDsp_initialization>:
void METROLOGY_APP_vDsp_initialization(void) {
 101d4a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    VMetrology.DSP_CTRL.STATE_CTRL.BIT.ST_CTRL = iSStatus;
 101d4a4:	4c1d      	ldr	r4, [pc, #116]	; (101d51c <METROLOGY_APP_vDsp_initialization+0x7c>)
    ( ( DSP_CTRL_TYPE * )( mem_reg_in ) )->STATE_CTRL.BIT.ST_CTRL = iSStatus;
 101d4a6:	4a1e      	ldr	r2, [pc, #120]	; (101d520 <METROLOGY_APP_vDsp_initialization+0x80>)
    VMetrology.DSP_CTRL.STATE_CTRL.BIT.ST_CTRL = iSStatus;
 101d4a8:	7823      	ldrb	r3, [r4, #0]
 101d4aa:	f36f 0303 	bfc	r3, #0, #4
 101d4ae:	7023      	strb	r3, [r4, #0]
    ( ( DSP_CTRL_TYPE * )( mem_reg_in ) )->STATE_CTRL.BIT.ST_CTRL = iSStatus;
 101d4b0:	7813      	ldrb	r3, [r2, #0]
 101d4b2:	f36f 0303 	bfc	r3, #0, #4
 101d4b6:	7013      	strb	r3, [r2, #0]
 101d4b8:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
 101d4bc:	4623      	mov	r3, r4
        *( ( uint32_t * )( mem_reg_in ) + i ) = *( ( &VMetrology.DSP_CTRL.STATE_CTRL.WORD ) + i );
 101d4be:	f853 1f04 	ldr.w	r1, [r3, #4]!
 101d4c2:	f842 1f04 	str.w	r1, [r2, #4]!
    for ( i = 1; i < ( DSP_CONTROL_SIZE ); i++ ) {
 101d4c6:	4283      	cmp	r3, r0
 101d4c8:	d1f9      	bne.n	101d4be <METROLOGY_APP_vDsp_initialization+0x1e>
    VMetrology.DSP_CTRL.STATE_CTRL.BIT.ST_CTRL = iSStatus;
 101d4ca:	7823      	ldrb	r3, [r4, #0]
    ( ( DSP_CTRL_TYPE * )( mem_reg_in ) )->STATE_CTRL.BIT.ST_CTRL = iSStatus;
 101d4cc:	4d14      	ldr	r5, [pc, #80]	; (101d520 <METROLOGY_APP_vDsp_initialization+0x80>)
    delay_ms( 100 );
 101d4ce:	4815      	ldr	r0, [pc, #84]	; (101d524 <METROLOGY_APP_vDsp_initialization+0x84>)
 101d4d0:	4915      	ldr	r1, [pc, #84]	; (101d528 <METROLOGY_APP_vDsp_initialization+0x88>)
    ( ( DSP_ACC_TYPE * )( mem_acc_out ) )->ACC_T2 = VMetrology.DSP_ACC.ACC_T2;
 101d4d2:	4f16      	ldr	r7, [pc, #88]	; (101d52c <METROLOGY_APP_vDsp_initialization+0x8c>)
    VMetrology.DSP_CTRL.STATE_CTRL.BIT.ST_CTRL = iSStatus;
 101d4d4:	2201      	movs	r2, #1
 101d4d6:	f362 0303 	bfi	r3, r2, #0, #4
 101d4da:	7023      	strb	r3, [r4, #0]
    ( ( DSP_CTRL_TYPE * )( mem_reg_in ) )->STATE_CTRL.BIT.ST_CTRL = iSStatus;
 101d4dc:	782b      	ldrb	r3, [r5, #0]
 101d4de:	f362 0303 	bfi	r3, r2, #0, #4
 101d4e2:	702b      	strb	r3, [r5, #0]
    delay_ms( 100 );
 101d4e4:	4788      	blx	r1
    ( ( DSP_ACC_TYPE * )( mem_acc_out ) )->ACC_T0 = VMetrology.DSP_ACC.ACC_T0;
 101d4e6:	4b12      	ldr	r3, [pc, #72]	; (101d530 <METROLOGY_APP_vDsp_initialization+0x90>)
    VMetrology.DSP_CTRL.STATE_CTRL.BIT.ST_CTRL = iSStatus;
 101d4e8:	7822      	ldrb	r2, [r4, #0]
    ( ( DSP_ACC_TYPE * )( mem_acc_out ) )->ACC_T0 = VMetrology.DSP_ACC.ACC_T0;
 101d4ea:	4912      	ldr	r1, [pc, #72]	; (101d534 <METROLOGY_APP_vDsp_initialization+0x94>)
    ( ( DSP_ACC_TYPE * )( mem_acc_out ) )->ACC_T1 = VMetrology.DSP_ACC.ACC_T1;
 101d4ec:	f8df e048 	ldr.w	lr, [pc, #72]	; 101d538 <METROLOGY_APP_vDsp_initialization+0x98>
    ( ( DSP_ACC_TYPE * )( mem_acc_out ) )->ACC_T0 = VMetrology.DSP_ACC.ACC_T0;
 101d4f0:	e9d3 8900 	ldrd	r8, r9, [r3]
    VMetrology.DSP_CTRL.STATE_CTRL.BIT.ST_CTRL = iSStatus;
 101d4f4:	2602      	movs	r6, #2
 101d4f6:	f366 0203 	bfi	r2, r6, #0, #4
 101d4fa:	7022      	strb	r2, [r4, #0]
    ( ( DSP_CTRL_TYPE * )( mem_reg_in ) )->STATE_CTRL.BIT.ST_CTRL = iSStatus;
 101d4fc:	782a      	ldrb	r2, [r5, #0]
    ( ( DSP_ACC_TYPE * )( mem_acc_out ) )->ACC_T0 = VMetrology.DSP_ACC.ACC_T0;
 101d4fe:	e9c1 8900 	strd	r8, r9, [r1]
    ( ( DSP_ACC_TYPE * )( mem_acc_out ) )->ACC_T1 = VMetrology.DSP_ACC.ACC_T1;
 101d502:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
    ( ( DSP_ACC_TYPE * )( mem_acc_out ) )->ACC_T2 = VMetrology.DSP_ACC.ACC_T2;
 101d506:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
    ( ( DSP_ACC_TYPE * )( mem_acc_out ) )->ACC_T1 = VMetrology.DSP_ACC.ACC_T1;
 101d50a:	e9ce 0100 	strd	r0, r1, [lr]
    ( ( DSP_ACC_TYPE * )( mem_acc_out ) )->ACC_T2 = VMetrology.DSP_ACC.ACC_T2;
 101d50e:	e9c7 8900 	strd	r8, r9, [r7]
    ( ( DSP_CTRL_TYPE * )( mem_reg_in ) )->STATE_CTRL.BIT.ST_CTRL = iSStatus;
 101d512:	f366 0203 	bfi	r2, r6, #0, #4
 101d516:	702a      	strb	r2, [r5, #0]
 101d518:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 101d51c:	20016770 	.word	0x20016770
 101d520:	20100000 	.word	0x20100000
 101d524:	000b2925 	.word	0x000b2925
 101d528:	20000001 	.word	0x20000001
 101d52c:	20100308 	.word	0x20100308
 101d530:	20016a68 	.word	0x20016a68
 101d534:	201002f8 	.word	0x201002f8
 101d538:	20100300 	.word	0x20100300
 101d53c:	00000000 	.word	0x00000000

0101d540 <METROLOGY_APP_dCalculate_Ix_rms>:
double METROLOGY_APP_dCalculate_Ix_rms(uint64_t acc_ix, uint32_t nbr_samples) {
 101d540:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	ix_rms = (double)(acc_ix);
 101d544:	4b22      	ldr	r3, [pc, #136]	; (101d5d0 <METROLOGY_APP_dCalculate_Ix_rms+0x90>)
 101d546:	4c23      	ldr	r4, [pc, #140]	; (101d5d4 <METROLOGY_APP_dCalculate_Ix_rms+0x94>)
	ix_rms /= pow(2, 40);						 	       
 101d548:	4d23      	ldr	r5, [pc, #140]	; (101d5d8 <METROLOGY_APP_dCalculate_Ix_rms+0x98>)
double METROLOGY_APP_dCalculate_Ix_rms(uint64_t acc_ix, uint32_t nbr_samples) {
 101d54a:	4616      	mov	r6, r2
	ix_rms = (double)(acc_ix);
 101d54c:	4798      	blx	r3
	ix_rms /= nbr_samples;  
 101d54e:	4b23      	ldr	r3, [pc, #140]	; (101d5dc <METROLOGY_APP_dCalculate_Ix_rms+0x9c>)
	ix_rms = (double)(acc_ix);
 101d550:	e9c4 0100 	strd	r0, r1, [r4]
	ix_rms /= nbr_samples;  
 101d554:	4630      	mov	r0, r6
 101d556:	4798      	blx	r3
 101d558:	e9d4 8900 	ldrd	r8, r9, [r4]
 101d55c:	4602      	mov	r2, r0
 101d55e:	460b      	mov	r3, r1
 101d560:	4e1f      	ldr	r6, [pc, #124]	; (101d5e0 <METROLOGY_APP_dCalculate_Ix_rms+0xa0>)
 101d562:	4640      	mov	r0, r8
 101d564:	4649      	mov	r1, r9
 101d566:	47b0      	blx	r6
 101d568:	e9c4 0100 	strd	r0, r1, [r4]
	ix_rms /= pow(2, 40);						 	       
 101d56c:	2200      	movs	r2, #0
 101d56e:	e9d4 0100 	ldrd	r0, r1, [r4]
 101d572:	4b1c      	ldr	r3, [pc, #112]	; (101d5e4 <METROLOGY_APP_dCalculate_Ix_rms+0xa4>)
 101d574:	47a8      	blx	r5
 101d576:	e9c4 0100 	strd	r0, r1, [r4]
	ix_rms = sqrt(ix_rms);					
 101d57a:	4b1b      	ldr	r3, [pc, #108]	; (101d5e8 <METROLOGY_APP_dCalculate_Ix_rms+0xa8>)
 101d57c:	e9d4 0100 	ldrd	r0, r1, [r4]
 101d580:	4798      	blx	r3
 101d582:	e9c4 0100 	strd	r0, r1, [r4]
	ix_rms *= CURRENT_CONV_FACTOR;      
 101d586:	a310      	add	r3, pc, #64	; (adr r3, 101d5c8 <METROLOGY_APP_dCalculate_Ix_rms+0x88>)
 101d588:	e9d3 2300 	ldrd	r2, r3, [r3]
 101d58c:	e9d4 0100 	ldrd	r0, r1, [r4]
 101d590:	47a8      	blx	r5
 101d592:	e9c4 0100 	strd	r0, r1, [r4]
	ix_rms *= 1000;
 101d596:	2200      	movs	r2, #0
 101d598:	e9d4 0100 	ldrd	r0, r1, [r4]
 101d59c:	4b13      	ldr	r3, [pc, #76]	; (101d5ec <METROLOGY_APP_dCalculate_Ix_rms+0xac>)
 101d59e:	47a8      	blx	r5
 101d5a0:	e9c4 0100 	strd	r0, r1, [r4]
	ix_rms = (ix_rms < CREEP_THRESHOLD_I) ? 0 : ix_rms;
 101d5a4:	4d12      	ldr	r5, [pc, #72]	; (101d5f0 <METROLOGY_APP_dCalculate_Ix_rms+0xb0>)
 101d5a6:	4b13      	ldr	r3, [pc, #76]	; (101d5f4 <METROLOGY_APP_dCalculate_Ix_rms+0xb4>)
 101d5a8:	e9d4 0100 	ldrd	r0, r1, [r4]
 101d5ac:	2200      	movs	r2, #0
 101d5ae:	47a8      	blx	r5
 101d5b0:	b938      	cbnz	r0, 101d5c2 <METROLOGY_APP_dCalculate_Ix_rms+0x82>
 101d5b2:	e9d4 2300 	ldrd	r2, r3, [r4]
 101d5b6:	e9c4 2300 	strd	r2, r3, [r4]
}
 101d5ba:	e9d4 0100 	ldrd	r0, r1, [r4]
 101d5be:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	ix_rms = (ix_rms < CREEP_THRESHOLD_I) ? 0 : ix_rms;
 101d5c2:	2200      	movs	r2, #0
 101d5c4:	2300      	movs	r3, #0
 101d5c6:	e7f6      	b.n	101d5b6 <METROLOGY_APP_dCalculate_Ix_rms+0x76>
 101d5c8:	eac86057 	.word	0xeac86057
 101d5cc:	40881cd6 	.word	0x40881cd6
 101d5d0:	0102ff99 	.word	0x0102ff99
 101d5d4:	20000c40 	.word	0x20000c40
 101d5d8:	01030005 	.word	0x01030005
 101d5dc:	0102ff19 	.word	0x0102ff19
 101d5e0:	01030259 	.word	0x01030259
 101d5e4:	3d700000 	.word	0x3d700000
 101d5e8:	0102fa5d 	.word	0x0102fa5d
 101d5ec:	408f4000 	.word	0x408f4000
 101d5f0:	010304e9 	.word	0x010304e9
 101d5f4:	40490000 	.word	0x40490000

0101d5f8 <METROLOGY_APP_dCalculate_Vx_rms>:
double METROLOGY_APP_dCalculate_Vx_rms(uint64_t acc_vx, uint32_t nbr_samples) {
 101d5f8:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	vx_rms = (double)(acc_vx);
 101d5fc:	4b26      	ldr	r3, [pc, #152]	; (101d698 <METROLOGY_APP_dCalculate_Vx_rms+0xa0>)
 101d5fe:	4c27      	ldr	r4, [pc, #156]	; (101d69c <METROLOGY_APP_dCalculate_Vx_rms+0xa4>)
	vx_rms /= pow(2, 40);						 	       
 101d600:	4d27      	ldr	r5, [pc, #156]	; (101d6a0 <METROLOGY_APP_dCalculate_Vx_rms+0xa8>)
double METROLOGY_APP_dCalculate_Vx_rms(uint64_t acc_vx, uint32_t nbr_samples) {
 101d602:	4616      	mov	r6, r2
	vx_rms = (double)(acc_vx);
 101d604:	4798      	blx	r3
	vx_rms /= nbr_samples;  
 101d606:	4b27      	ldr	r3, [pc, #156]	; (101d6a4 <METROLOGY_APP_dCalculate_Vx_rms+0xac>)
	vx_rms = (double)(acc_vx);
 101d608:	e9c4 0100 	strd	r0, r1, [r4]
	vx_rms /= nbr_samples;  
 101d60c:	4630      	mov	r0, r6
 101d60e:	4798      	blx	r3
 101d610:	e9d4 8900 	ldrd	r8, r9, [r4]
 101d614:	4602      	mov	r2, r0
 101d616:	460b      	mov	r3, r1
 101d618:	4e23      	ldr	r6, [pc, #140]	; (101d6a8 <METROLOGY_APP_dCalculate_Vx_rms+0xb0>)
 101d61a:	4640      	mov	r0, r8
 101d61c:	4649      	mov	r1, r9
 101d61e:	47b0      	blx	r6
 101d620:	e9c4 0100 	strd	r0, r1, [r4]
	vx_rms /= pow(2, 40);						 	       
 101d624:	2200      	movs	r2, #0
 101d626:	e9d4 0100 	ldrd	r0, r1, [r4]
 101d62a:	4b20      	ldr	r3, [pc, #128]	; (101d6ac <METROLOGY_APP_dCalculate_Vx_rms+0xb4>)
 101d62c:	47a8      	blx	r5
 101d62e:	e9c4 0100 	strd	r0, r1, [r4]
	vx_rms = sqrt(vx_rms);					
 101d632:	4b1f      	ldr	r3, [pc, #124]	; (101d6b0 <METROLOGY_APP_dCalculate_Vx_rms+0xb8>)
 101d634:	e9d4 0100 	ldrd	r0, r1, [r4]
 101d638:	4798      	blx	r3
 101d63a:	e9c4 0100 	strd	r0, r1, [r4]
	vx_rms *= VOLTAGE_CONV_FACTOR;      
 101d63e:	a312      	add	r3, pc, #72	; (adr r3, 101d688 <METROLOGY_APP_dCalculate_Vx_rms+0x90>)
 101d640:	e9d3 2300 	ldrd	r2, r3, [r3]
 101d644:	e9d4 0100 	ldrd	r0, r1, [r4]
 101d648:	47a8      	blx	r5
 101d64a:	e9c4 0100 	strd	r0, r1, [r4]
	vx_rms *= 1000;
 101d64e:	2200      	movs	r2, #0
 101d650:	e9d4 0100 	ldrd	r0, r1, [r4]
 101d654:	4b17      	ldr	r3, [pc, #92]	; (101d6b4 <METROLOGY_APP_dCalculate_Vx_rms+0xbc>)
 101d656:	47a8      	blx	r5
 101d658:	e9c4 0100 	strd	r0, r1, [r4]
	vx_rms = (vx_rms < CREEP_THRESHOLD_V) ? 0 : vx_rms;
 101d65c:	4d16      	ldr	r5, [pc, #88]	; (101d6b8 <METROLOGY_APP_dCalculate_Vx_rms+0xc0>)
 101d65e:	e9d4 0100 	ldrd	r0, r1, [r4]
 101d662:	a30b      	add	r3, pc, #44	; (adr r3, 101d690 <METROLOGY_APP_dCalculate_Vx_rms+0x98>)
 101d664:	e9d3 2300 	ldrd	r2, r3, [r3]
 101d668:	47a8      	blx	r5
 101d66a:	b938      	cbnz	r0, 101d67c <METROLOGY_APP_dCalculate_Vx_rms+0x84>
 101d66c:	e9d4 2300 	ldrd	r2, r3, [r4]
 101d670:	e9c4 2300 	strd	r2, r3, [r4]
}
 101d674:	e9d4 0100 	ldrd	r0, r1, [r4]
 101d678:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	vx_rms = (vx_rms < CREEP_THRESHOLD_V) ? 0 : vx_rms;
 101d67c:	2200      	movs	r2, #0
 101d67e:	2300      	movs	r3, #0
 101d680:	e7f6      	b.n	101d670 <METROLOGY_APP_dCalculate_Vx_rms+0x78>
 101d682:	bf00      	nop
 101d684:	f3af 8000 	nop.w
 101d688:	00000000 	.word	0x00000000
 101d68c:	4099cc00 	.word	0x4099cc00
 101d690:	00000000 	.word	0x00000000
 101d694:	40c77000 	.word	0x40c77000
 101d698:	0102ff99 	.word	0x0102ff99
 101d69c:	20000c58 	.word	0x20000c58
 101d6a0:	01030005 	.word	0x01030005
 101d6a4:	0102ff19 	.word	0x0102ff19
 101d6a8:	01030259 	.word	0x01030259
 101d6ac:	3d700000 	.word	0x3d700000
 101d6b0:	0102fa5d 	.word	0x0102fa5d
 101d6b4:	408f4000 	.word	0x408f4000
 101d6b8:	010304e9 	.word	0x010304e9
 101d6bc:	00000000 	.word	0x00000000

0101d6c0 <METROLOGY_APP_dCalculate_PF_angle>:
*
* \param void
* \retval calculated angle
******************************************************************************
*/
double METROLOGY_APP_dCalculate_PF_angle(int64_t p, int64_t q) {
 101d6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 101d6c4:	b083      	sub	sp, #12
 101d6c6:	461f      	mov	r7, r3
	
	double angle;
	
	angle = ( (180 * atan((double)q / (double)p)) / (double)CONST_Pi );
 101d6c8:	4b3d      	ldr	r3, [pc, #244]	; (101d7c0 <METROLOGY_APP_dCalculate_PF_angle+0x100>)
 101d6ca:	9301      	str	r3, [sp, #4]
double METROLOGY_APP_dCalculate_PF_angle(int64_t p, int64_t q) {
 101d6cc:	4604      	mov	r4, r0
 101d6ce:	460d      	mov	r5, r1
	angle = ( (180 * atan((double)q / (double)p)) / (double)CONST_Pi );
 101d6d0:	4610      	mov	r0, r2
 101d6d2:	4639      	mov	r1, r7
double METROLOGY_APP_dCalculate_PF_angle(int64_t p, int64_t q) {
 101d6d4:	4616      	mov	r6, r2
	angle = ( (180 * atan((double)q / (double)p)) / (double)CONST_Pi );
 101d6d6:	4798      	blx	r3
 101d6d8:	9b01      	ldr	r3, [sp, #4]
 101d6da:	f8df b0f8 	ldr.w	fp, [pc, #248]	; 101d7d4 <METROLOGY_APP_dCalculate_PF_angle+0x114>
 101d6de:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 101d7d8 <METROLOGY_APP_dCalculate_PF_angle+0x118>
 101d6e2:	4680      	mov	r8, r0
 101d6e4:	4689      	mov	r9, r1
 101d6e6:	4620      	mov	r0, r4
 101d6e8:	4629      	mov	r1, r5
 101d6ea:	4798      	blx	r3
 101d6ec:	4602      	mov	r2, r0
 101d6ee:	460b      	mov	r3, r1
 101d6f0:	4640      	mov	r0, r8
 101d6f2:	4649      	mov	r1, r9
 101d6f4:	47d8      	blx	fp
 101d6f6:	4b33      	ldr	r3, [pc, #204]	; (101d7c4 <METROLOGY_APP_dCalculate_PF_angle+0x104>)
 101d6f8:	4798      	blx	r3
 101d6fa:	2200      	movs	r2, #0
 101d6fc:	4b32      	ldr	r3, [pc, #200]	; (101d7c8 <METROLOGY_APP_dCalculate_PF_angle+0x108>)
 101d6fe:	47d0      	blx	sl
 101d700:	a32d      	add	r3, pc, #180	; (adr r3, 101d7b8 <METROLOGY_APP_dCalculate_PF_angle+0xf8>)
 101d702:	e9d3 2300 	ldrd	r2, r3, [r3]
 101d706:	47d8      	blx	fp
	angle = fabs(angle);
	
	if ( (p >= 0) && (q >= 0) ) {
 101d708:	2c00      	cmp	r4, #0
 101d70a:	f175 0300 	sbcs.w	r3, r5, #0
	angle = fabs(angle);
 101d70e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
	if ( (p >= 0) && (q >= 0) ) {
 101d712:	db3a      	blt.n	101d78a <METROLOGY_APP_dCalculate_PF_angle+0xca>
 101d714:	2e00      	cmp	r6, #0
 101d716:	f177 0300 	sbcs.w	r3, r7, #0
 101d71a:	db29      	blt.n	101d770 <METROLOGY_APP_dCalculate_PF_angle+0xb0>
		angle =   0 + angle;
 101d71c:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 101d7dc <METROLOGY_APP_dCalculate_PF_angle+0x11c>
 101d720:	2200      	movs	r2, #0
 101d722:	2300      	movs	r3, #0
 101d724:	47c0      	blx	r8
 101d726:	4680      	mov	r8, r0
 101d728:	4689      	mov	r9, r1
	}
	else if ( (p >= 0) && (q <= 0) ) {
		angle = 360 - angle;
	}
	
	if ( (angle <= 0) || (angle >= 360) || ( (p == 0) && (q == 0) ) ) {
 101d72a:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 101d7e0 <METROLOGY_APP_dCalculate_PF_angle+0x120>
 101d72e:	2200      	movs	r2, #0
 101d730:	2300      	movs	r3, #0
 101d732:	4640      	mov	r0, r8
 101d734:	4649      	mov	r1, r9
 101d736:	47d8      	blx	fp
 101d738:	b938      	cbnz	r0, 101d74a <METROLOGY_APP_dCalculate_PF_angle+0x8a>
 101d73a:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 101d7e4 <METROLOGY_APP_dCalculate_PF_angle+0x124>
 101d73e:	4b23      	ldr	r3, [pc, #140]	; (101d7cc <METROLOGY_APP_dCalculate_PF_angle+0x10c>)
 101d740:	2200      	movs	r2, #0
 101d742:	4640      	mov	r0, r8
 101d744:	4649      	mov	r1, r9
 101d746:	47d8      	blx	fp
 101d748:	b120      	cbz	r0, 101d754 <METROLOGY_APP_dCalculate_PF_angle+0x94>
 101d74a:	2000      	movs	r0, #0
 101d74c:	2100      	movs	r1, #0
	}
	
	angle *= 1000;
	
	return angle;
}
 101d74e:	b003      	add	sp, #12
 101d750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ( (angle <= 0) || (angle >= 360) || ( (p == 0) && (q == 0) ) ) {
 101d754:	ea54 0305 	orrs.w	r3, r4, r5
 101d758:	d102      	bne.n	101d760 <METROLOGY_APP_dCalculate_PF_angle+0xa0>
 101d75a:	ea56 0307 	orrs.w	r3, r6, r7
 101d75e:	d0f4      	beq.n	101d74a <METROLOGY_APP_dCalculate_PF_angle+0x8a>
 101d760:	4640      	mov	r0, r8
 101d762:	4649      	mov	r1, r9
 101d764:	2200      	movs	r2, #0
 101d766:	4b1a      	ldr	r3, [pc, #104]	; (101d7d0 <METROLOGY_APP_dCalculate_PF_angle+0x110>)
 101d768:	47d0      	blx	sl
}
 101d76a:	b003      	add	sp, #12
 101d76c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	else if ( (p <= 0) && (q >= 0) ) {
 101d770:	ea54 0305 	orrs.w	r3, r4, r5
 101d774:	d017      	beq.n	101d7a6 <METROLOGY_APP_dCalculate_PF_angle+0xe6>
		angle = 360 - angle;
 101d776:	4602      	mov	r2, r0
 101d778:	460b      	mov	r3, r1
 101d77a:	f8df 806c 	ldr.w	r8, [pc, #108]	; 101d7e8 <METROLOGY_APP_dCalculate_PF_angle+0x128>
 101d77e:	4913      	ldr	r1, [pc, #76]	; (101d7cc <METROLOGY_APP_dCalculate_PF_angle+0x10c>)
 101d780:	2000      	movs	r0, #0
 101d782:	47c0      	blx	r8
 101d784:	4680      	mov	r8, r0
 101d786:	4689      	mov	r9, r1
 101d788:	e7cf      	b.n	101d72a <METROLOGY_APP_dCalculate_PF_angle+0x6a>
	else if ( (p <= 0) && (q >= 0) ) {
 101d78a:	2e00      	cmp	r6, #0
 101d78c:	f177 0300 	sbcs.w	r3, r7, #0
 101d790:	db09      	blt.n	101d7a6 <METROLOGY_APP_dCalculate_PF_angle+0xe6>
		angle = 180 - angle;
 101d792:	4602      	mov	r2, r0
 101d794:	460b      	mov	r3, r1
 101d796:	f8df 8050 	ldr.w	r8, [pc, #80]	; 101d7e8 <METROLOGY_APP_dCalculate_PF_angle+0x128>
 101d79a:	490b      	ldr	r1, [pc, #44]	; (101d7c8 <METROLOGY_APP_dCalculate_PF_angle+0x108>)
 101d79c:	2000      	movs	r0, #0
 101d79e:	47c0      	blx	r8
 101d7a0:	4680      	mov	r8, r0
 101d7a2:	4689      	mov	r9, r1
 101d7a4:	e7c1      	b.n	101d72a <METROLOGY_APP_dCalculate_PF_angle+0x6a>
		angle = 180 + angle;
 101d7a6:	f8df 8034 	ldr.w	r8, [pc, #52]	; 101d7dc <METROLOGY_APP_dCalculate_PF_angle+0x11c>
 101d7aa:	4b07      	ldr	r3, [pc, #28]	; (101d7c8 <METROLOGY_APP_dCalculate_PF_angle+0x108>)
 101d7ac:	2200      	movs	r2, #0
 101d7ae:	47c0      	blx	r8
 101d7b0:	4680      	mov	r8, r0
 101d7b2:	4689      	mov	r9, r1
 101d7b4:	e7b9      	b.n	101d72a <METROLOGY_APP_dCalculate_PF_angle+0x6a>
 101d7b6:	bf00      	nop
 101d7b8:	4d12d84a 	.word	0x4d12d84a
 101d7bc:	400921fb 	.word	0x400921fb
 101d7c0:	0102ffa9 	.word	0x0102ffa9
 101d7c4:	0102f711 	.word	0x0102f711
 101d7c8:	40668000 	.word	0x40668000
 101d7cc:	40768000 	.word	0x40768000
 101d7d0:	408f4000 	.word	0x408f4000
 101d7d4:	01030259 	.word	0x01030259
 101d7d8:	01030005 	.word	0x01030005
 101d7dc:	0102fca1 	.word	0x0102fca1
 101d7e0:	010304fd 	.word	0x010304fd
 101d7e4:	01030511 	.word	0x01030511
 101d7e8:	0102fc9d 	.word	0x0102fc9d

0101d7ec <METROLOGY_APP_vLoad_dsp_ctrl_eeprom.part.0>:
void METROLOGY_APP_vLoad_dsp_ctrl_eeprom(void) {
 101d7ec:	b570      	push	{r4, r5, r6, lr}
 101d7ee:	4e07      	ldr	r6, [pc, #28]	; (101d80c <METROLOGY_APP_vLoad_dsp_ctrl_eeprom.part.0+0x20>)
 101d7f0:	4d07      	ldr	r5, [pc, #28]	; (101d810 <METROLOGY_APP_vLoad_dsp_ctrl_eeprom.part.0+0x24>)
 101d7f2:	f44f 7440 	mov.w	r4, #768	; 0x300
			EEPROM_reader( DSP_CTRL_STATE_CTRL_ADDR + ( i * 4 ), ptr + ( i * 4 ) , 4 );
 101d7f6:	f5a4 7140 	sub.w	r1, r4, #768	; 0x300
 101d7fa:	2204      	movs	r2, #4
 101d7fc:	4620      	mov	r0, r4
 101d7fe:	4431      	add	r1, r6
 101d800:	4414      	add	r4, r2
 101d802:	47a8      	blx	r5
		for ( i = 0; i < DSP_CONTROL_SIZE; i++ ) {
 101d804:	f5b4 7f77 	cmp.w	r4, #988	; 0x3dc
 101d808:	d1f5      	bne.n	101d7f6 <METROLOGY_APP_vLoad_dsp_ctrl_eeprom.part.0+0xa>
}
 101d80a:	bd70      	pop	{r4, r5, r6, pc}
 101d80c:	20016770 	.word	0x20016770
 101d810:	01017511 	.word	0x01017511

0101d814 <METROLOGY_APP_vInitialize>:
void METROLOGY_APP_vInitialize(void) {
 101d814:	b508      	push	{r3, lr}
	if ( meter.power_failure == false ) {
 101d816:	4b07      	ldr	r3, [pc, #28]	; (101d834 <METROLOGY_APP_vInitialize+0x20>)
 101d818:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 101d81c:	b90b      	cbnz	r3, 101d822 <METROLOGY_APP_vInitialize+0xe>
 101d81e:	4b06      	ldr	r3, [pc, #24]	; (101d838 <METROLOGY_APP_vInitialize+0x24>)
 101d820:	4798      	blx	r3
	METROLOGY_APP_vDsp_ctrl_verification();
 101d822:	4b06      	ldr	r3, [pc, #24]	; (101d83c <METROLOGY_APP_vInitialize+0x28>)
 101d824:	4798      	blx	r3
	METROLOGY_APP_vDsp_initialization();
 101d826:	4b06      	ldr	r3, [pc, #24]	; (101d840 <METROLOGY_APP_vInitialize+0x2c>)
 101d828:	4798      	blx	r3
	PIOC->PIO_MDER = PIO_MDER_P6;
 101d82a:	4b06      	ldr	r3, [pc, #24]	; (101d844 <METROLOGY_APP_vInitialize+0x30>)
 101d82c:	2240      	movs	r2, #64	; 0x40
 101d82e:	651a      	str	r2, [r3, #80]	; 0x50
 101d830:	bd08      	pop	{r3, pc}
 101d832:	bf00      	nop
 101d834:	20016c2c 	.word	0x20016c2c
 101d838:	0101d7ed 	.word	0x0101d7ed
 101d83c:	0101cd15 	.word	0x0101cd15
 101d840:	0101d4a1 	.word	0x0101d4a1
 101d844:	4800c000 	.word	0x4800c000

0101d848 <METROLOGY_APP_vCheck_task>:
void METROLOGY_APP_vCheck_task(void) {
 101d848:	b510      	push	{r4, lr}
	if ( TIMER_is_ms_timer_expired(METROLOGY_CHECK_TIMER) ) {
 101d84a:	200a      	movs	r0, #10
 101d84c:	4b10      	ldr	r3, [pc, #64]	; (101d890 <METROLOGY_APP_vCheck_task+0x48>)
 101d84e:	4798      	blx	r3
 101d850:	b1d0      	cbz	r0, 101d888 <METROLOGY_APP_vCheck_task+0x40>
		meter.metrology_over_timer++;
 101d852:	4a10      	ldr	r2, [pc, #64]	; (101d894 <METROLOGY_APP_vCheck_task+0x4c>)
 101d854:	7813      	ldrb	r3, [r2, #0]
 101d856:	3301      	adds	r3, #1
 101d858:	b2db      	uxtb	r3, r3
		if ( meter.metrology_over_timer >= 3 ) {
 101d85a:	2b02      	cmp	r3, #2
 101d85c:	d90b      	bls.n	101d876 <METROLOGY_APP_vCheck_task+0x2e>
	if ( meter.power_failure == false ) {
 101d85e:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
			meter.metrology_over_timer = 0;
 101d862:	2100      	movs	r1, #0
 101d864:	7011      	strb	r1, [r2, #0]
	if ( meter.power_failure == false ) {
 101d866:	b183      	cbz	r3, 101d88a <METROLOGY_APP_vCheck_task+0x42>
			METROLOGY_APP_vDsp_ctrl_verification();
 101d868:	4b0b      	ldr	r3, [pc, #44]	; (101d898 <METROLOGY_APP_vCheck_task+0x50>)
 101d86a:	4798      	blx	r3
			Init_Core1();
 101d86c:	4b0b      	ldr	r3, [pc, #44]	; (101d89c <METROLOGY_APP_vCheck_task+0x54>)
 101d86e:	4798      	blx	r3
			METROLOGY_APP_vDsp_initialization();
 101d870:	4b0b      	ldr	r3, [pc, #44]	; (101d8a0 <METROLOGY_APP_vCheck_task+0x58>)
 101d872:	4798      	blx	r3
 101d874:	e000      	b.n	101d878 <METROLOGY_APP_vCheck_task+0x30>
		meter.metrology_over_timer++;
 101d876:	7013      	strb	r3, [r2, #0]
		TIMER_start_ms_timer(METROLOGY_CHECK_TIMER, TIMER_ms_to_tic(1000), null_action);
 101d878:	4a0a      	ldr	r2, [pc, #40]	; (101d8a4 <METROLOGY_APP_vCheck_task+0x5c>)
 101d87a:	4b0b      	ldr	r3, [pc, #44]	; (101d8a8 <METROLOGY_APP_vCheck_task+0x60>)
 101d87c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 101d880:	200a      	movs	r0, #10
}
 101d882:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		TIMER_start_ms_timer(METROLOGY_CHECK_TIMER, TIMER_ms_to_tic(1000), null_action);
 101d886:	4718      	bx	r3
 101d888:	bd10      	pop	{r4, pc}
 101d88a:	4b08      	ldr	r3, [pc, #32]	; (101d8ac <METROLOGY_APP_vCheck_task+0x64>)
 101d88c:	4798      	blx	r3
 101d88e:	e7eb      	b.n	101d868 <METROLOGY_APP_vCheck_task+0x20>
 101d890:	0102baf5 	.word	0x0102baf5
 101d894:	20016c2c 	.word	0x20016c2c
 101d898:	0101cd15 	.word	0x0101cd15
 101d89c:	0102b6c5 	.word	0x0102b6c5
 101d8a0:	0101d4a1 	.word	0x0101d4a1
 101d8a4:	0102ba4d 	.word	0x0102ba4d
 101d8a8:	0102ba8d 	.word	0x0102ba8d
 101d8ac:	0101d7ed 	.word	0x0101d7ed

0101d8b0 <METROLOGY_APP_bWrite_cal_m_ia>:
bool METROLOGY_APP_bWrite_cal_m_ia(uint32_t adjust_value) {
 101d8b0:	b530      	push	{r4, r5, lr}
		VMetrology.DSP_CTRL.CAL_M_IA = (uint32_t)(adjust_value);
 101d8b2:	4d0e      	ldr	r5, [pc, #56]	; (101d8ec <METROLOGY_APP_bWrite_cal_m_ia+0x3c>)
		EEPROM_writer(DSP_CTRL_CAL_M_IA_ADDR, (uint8_t*)(&VMetrology.DSP_CTRL.CAL_M_IA), 4);
 101d8b4:	4b0e      	ldr	r3, [pc, #56]	; (101d8f0 <METROLOGY_APP_bWrite_cal_m_ia+0x40>)
		VMetrology.DSP_CTRL.CAL_M_IA = (uint32_t)(adjust_value);
 101d8b6:	4629      	mov	r1, r5
bool METROLOGY_APP_bWrite_cal_m_ia(uint32_t adjust_value) {
 101d8b8:	b083      	sub	sp, #12
 101d8ba:	4604      	mov	r4, r0
		VMetrology.DSP_CTRL.CAL_M_IA = (uint32_t)(adjust_value);
 101d8bc:	f841 0f7c 	str.w	r0, [r1, #124]!
		EEPROM_writer(DSP_CTRL_CAL_M_IA_ADDR, (uint8_t*)(&VMetrology.DSP_CTRL.CAL_M_IA), 4);
 101d8c0:	2204      	movs	r2, #4
 101d8c2:	f44f 705f 	mov.w	r0, #892	; 0x37c
 101d8c6:	4798      	blx	r3
		((DSP_CTRL_TYPE*)(mem_reg_in))->CAL_M_IA = VMetrology.DSP_CTRL.CAL_M_IA;
 101d8c8:	4b0a      	ldr	r3, [pc, #40]	; (101d8f4 <METROLOGY_APP_bWrite_cal_m_ia+0x44>)
 101d8ca:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 101d8cc:	67da      	str	r2, [r3, #124]	; 0x7c
		EEPROM_reader(DSP_CTRL_CAL_M_IA_ADDR, (uint8_t*)(&comp_value), 4);
 101d8ce:	2204      	movs	r2, #4
 101d8d0:	eb0d 0102 	add.w	r1, sp, r2
 101d8d4:	4b08      	ldr	r3, [pc, #32]	; (101d8f8 <METROLOGY_APP_bWrite_cal_m_ia+0x48>)
 101d8d6:	f44f 705f 	mov.w	r0, #892	; 0x37c
 101d8da:	4798      	blx	r3
		is_ok = (comp_value == adjust_value) ? true : false;
 101d8dc:	9801      	ldr	r0, [sp, #4]
}
 101d8de:	1b00      	subs	r0, r0, r4
 101d8e0:	fab0 f080 	clz	r0, r0
 101d8e4:	0940      	lsrs	r0, r0, #5
 101d8e6:	b003      	add	sp, #12
 101d8e8:	bd30      	pop	{r4, r5, pc}
 101d8ea:	bf00      	nop
 101d8ec:	20016770 	.word	0x20016770
 101d8f0:	01017509 	.word	0x01017509
 101d8f4:	20100000 	.word	0x20100000
 101d8f8:	01017511 	.word	0x01017511

0101d8fc <METROLOGY_APP_bCalibrate_m_ia>:
bool METROLOGY_APP_bCalibrate_m_ia(uint32_t mA_in) {
 101d8fc:	b5d0      	push	{r4, r6, r7, lr}
	cal_m_i = (double)(mA_in * pow(2, 29));
 101d8fe:	4b0e      	ldr	r3, [pc, #56]	; (101d938 <METROLOGY_APP_bCalibrate_m_ia+0x3c>)
 101d900:	4c0e      	ldr	r4, [pc, #56]	; (101d93c <METROLOGY_APP_bCalibrate_m_ia+0x40>)
 101d902:	4798      	blx	r3
 101d904:	2200      	movs	r2, #0
 101d906:	4b0e      	ldr	r3, [pc, #56]	; (101d940 <METROLOGY_APP_bCalibrate_m_ia+0x44>)
 101d908:	47a0      	blx	r4
	cal_m_i /= METROLOGY_APP_dCalculate_Ix_rms(VMetrology.DSP_ACC.I_A, VMetrology.DSP_ST.N);
 101d90a:	4b0e      	ldr	r3, [pc, #56]	; (101d944 <METROLOGY_APP_bCalibrate_m_ia+0x48>)
 101d90c:	4c0e      	ldr	r4, [pc, #56]	; (101d948 <METROLOGY_APP_bCalibrate_m_ia+0x4c>)
 101d90e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 101d912:	f503 73b4 	add.w	r3, r3, #360	; 0x168
	cal_m_i = (double)(mA_in * pow(2, 29));
 101d916:	4606      	mov	r6, r0
 101d918:	460f      	mov	r7, r1
	cal_m_i /= METROLOGY_APP_dCalculate_Ix_rms(VMetrology.DSP_ACC.I_A, VMetrology.DSP_ST.N);
 101d91a:	e9d3 0100 	ldrd	r0, r1, [r3]
 101d91e:	47a0      	blx	r4
 101d920:	4c0a      	ldr	r4, [pc, #40]	; (101d94c <METROLOGY_APP_bCalibrate_m_ia+0x50>)
 101d922:	4602      	mov	r2, r0
 101d924:	460b      	mov	r3, r1
 101d926:	4630      	mov	r0, r6
 101d928:	4639      	mov	r1, r7
 101d92a:	47a0      	blx	r4
	return METROLOGY_APP_bWrite_cal_m_ia((uint32_t)cal_m_i);
 101d92c:	4b08      	ldr	r3, [pc, #32]	; (101d950 <METROLOGY_APP_bCalibrate_m_ia+0x54>)
 101d92e:	4798      	blx	r3
 101d930:	4b08      	ldr	r3, [pc, #32]	; (101d954 <METROLOGY_APP_bCalibrate_m_ia+0x58>)
}
 101d932:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
	return METROLOGY_APP_bWrite_cal_m_ia((uint32_t)cal_m_i);
 101d936:	4718      	bx	r3
 101d938:	0102ff19 	.word	0x0102ff19
 101d93c:	01030005 	.word	0x01030005
 101d940:	41c00000 	.word	0x41c00000
 101d944:	20016770 	.word	0x20016770
 101d948:	0101d541 	.word	0x0101d541
 101d94c:	01030259 	.word	0x01030259
 101d950:	010305b5 	.word	0x010305b5
 101d954:	0101d8b1 	.word	0x0101d8b1

0101d958 <METROLOGY_APP_bWrite_cal_m_va>:
bool METROLOGY_APP_bWrite_cal_m_va(uint32_t adjust_value) {
 101d958:	b530      	push	{r4, r5, lr}
		VMetrology.DSP_CTRL.CAL_M_VA = (uint32_t)adjust_value;
 101d95a:	4d0f      	ldr	r5, [pc, #60]	; (101d998 <METROLOGY_APP_bWrite_cal_m_va+0x40>)
		EEPROM_writer(DSP_CTRL_CAL_M_VA_ADDR, (uint8_t*)(&VMetrology.DSP_CTRL.CAL_M_VA), 4);
 101d95c:	4b0f      	ldr	r3, [pc, #60]	; (101d99c <METROLOGY_APP_bWrite_cal_m_va+0x44>)
		VMetrology.DSP_CTRL.CAL_M_VA = (uint32_t)adjust_value;
 101d95e:	4629      	mov	r1, r5
bool METROLOGY_APP_bWrite_cal_m_va(uint32_t adjust_value) {
 101d960:	b083      	sub	sp, #12
 101d962:	4604      	mov	r4, r0
		VMetrology.DSP_CTRL.CAL_M_VA = (uint32_t)adjust_value;
 101d964:	f841 0f80 	str.w	r0, [r1, #128]!
		EEPROM_writer(DSP_CTRL_CAL_M_VA_ADDR, (uint8_t*)(&VMetrology.DSP_CTRL.CAL_M_VA), 4);
 101d968:	2204      	movs	r2, #4
 101d96a:	f44f 7060 	mov.w	r0, #896	; 0x380
 101d96e:	4798      	blx	r3
		((DSP_CTRL_TYPE*)(mem_reg_in))->CAL_M_VA = VMetrology.DSP_CTRL.CAL_M_VA;
 101d970:	4b0b      	ldr	r3, [pc, #44]	; (101d9a0 <METROLOGY_APP_bWrite_cal_m_va+0x48>)
 101d972:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
 101d976:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		EEPROM_reader(DSP_CTRL_CAL_M_VA_ADDR, (uint8_t*)(&comp_value), 4);
 101d97a:	2204      	movs	r2, #4
 101d97c:	eb0d 0102 	add.w	r1, sp, r2
 101d980:	4b08      	ldr	r3, [pc, #32]	; (101d9a4 <METROLOGY_APP_bWrite_cal_m_va+0x4c>)
 101d982:	f44f 7060 	mov.w	r0, #896	; 0x380
 101d986:	4798      	blx	r3
		is_ok = (comp_value == adjust_value) ? true : false;
 101d988:	9801      	ldr	r0, [sp, #4]
}
 101d98a:	1b00      	subs	r0, r0, r4
 101d98c:	fab0 f080 	clz	r0, r0
 101d990:	0940      	lsrs	r0, r0, #5
 101d992:	b003      	add	sp, #12
 101d994:	bd30      	pop	{r4, r5, pc}
 101d996:	bf00      	nop
 101d998:	20016770 	.word	0x20016770
 101d99c:	01017509 	.word	0x01017509
 101d9a0:	20100000 	.word	0x20100000
 101d9a4:	01017511 	.word	0x01017511

0101d9a8 <METROLOGY_APP_bCalibrate_m_va>:
bool METROLOGY_APP_bCalibrate_m_va(uint32_t mV_in) {
 101d9a8:	b5d0      	push	{r4, r6, r7, lr}
	cal_m_v = (double)(mV_in * pow(2, 29));
 101d9aa:	4b0e      	ldr	r3, [pc, #56]	; (101d9e4 <METROLOGY_APP_bCalibrate_m_va+0x3c>)
 101d9ac:	4c0e      	ldr	r4, [pc, #56]	; (101d9e8 <METROLOGY_APP_bCalibrate_m_va+0x40>)
 101d9ae:	4798      	blx	r3
 101d9b0:	2200      	movs	r2, #0
 101d9b2:	4b0e      	ldr	r3, [pc, #56]	; (101d9ec <METROLOGY_APP_bCalibrate_m_va+0x44>)
 101d9b4:	47a0      	blx	r4
	cal_m_v /= METROLOGY_APP_dCalculate_Vx_rms(VMetrology.DSP_ACC.V_A, VMetrology.DSP_ST.N);
 101d9b6:	4b0e      	ldr	r3, [pc, #56]	; (101d9f0 <METROLOGY_APP_bCalibrate_m_va+0x48>)
 101d9b8:	4c0e      	ldr	r4, [pc, #56]	; (101d9f4 <METROLOGY_APP_bCalibrate_m_va+0x4c>)
 101d9ba:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 101d9be:	f503 731c 	add.w	r3, r3, #624	; 0x270
	cal_m_v = (double)(mV_in * pow(2, 29));
 101d9c2:	4606      	mov	r6, r0
 101d9c4:	460f      	mov	r7, r1
	cal_m_v /= METROLOGY_APP_dCalculate_Vx_rms(VMetrology.DSP_ACC.V_A, VMetrology.DSP_ST.N);
 101d9c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 101d9ca:	47a0      	blx	r4
 101d9cc:	4c0a      	ldr	r4, [pc, #40]	; (101d9f8 <METROLOGY_APP_bCalibrate_m_va+0x50>)
 101d9ce:	4602      	mov	r2, r0
 101d9d0:	460b      	mov	r3, r1
 101d9d2:	4630      	mov	r0, r6
 101d9d4:	4639      	mov	r1, r7
 101d9d6:	47a0      	blx	r4
	return METROLOGY_APP_bWrite_cal_m_va((uint32_t)cal_m_v);
 101d9d8:	4b08      	ldr	r3, [pc, #32]	; (101d9fc <METROLOGY_APP_bCalibrate_m_va+0x54>)
 101d9da:	4798      	blx	r3
 101d9dc:	4b08      	ldr	r3, [pc, #32]	; (101da00 <METROLOGY_APP_bCalibrate_m_va+0x58>)
}
 101d9de:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
	return METROLOGY_APP_bWrite_cal_m_va((uint32_t)cal_m_v);
 101d9e2:	4718      	bx	r3
 101d9e4:	0102ff19 	.word	0x0102ff19
 101d9e8:	01030005 	.word	0x01030005
 101d9ec:	41c00000 	.word	0x41c00000
 101d9f0:	20016770 	.word	0x20016770
 101d9f4:	0101d5f9 	.word	0x0101d5f9
 101d9f8:	01030259 	.word	0x01030259
 101d9fc:	010305b5 	.word	0x010305b5
 101da00:	0101d959 	.word	0x0101d959

0101da04 <METROLOGY_APP_bWrite_cal_ph_ia>:
bool METROLOGY_APP_bWrite_cal_ph_ia(uint32_t adjust_value) {
 101da04:	b570      	push	{r4, r5, r6, lr}
		VMetrology.DSP_CTRL.CAL_PH_IA = (uint32_t)adjust_value;
 101da06:	4c16      	ldr	r4, [pc, #88]	; (101da60 <METROLOGY_APP_bWrite_cal_ph_ia+0x5c>)
		EEPROM_writer(DSP_CTRL_CAL_PH_IA_ADDR, (uint8_t*)(&VMetrology.DSP_CTRL.CAL_PH_IA), 4);
 101da08:	4e16      	ldr	r6, [pc, #88]	; (101da64 <METROLOGY_APP_bWrite_cal_ph_ia+0x60>)
bool METROLOGY_APP_bWrite_cal_ph_ia(uint32_t adjust_value) {
 101da0a:	b082      	sub	sp, #8
 101da0c:	4605      	mov	r5, r0
		VMetrology.DSP_CTRL.CAL_PH_VA = 0;
 101da0e:	2300      	movs	r3, #0
		EEPROM_writer(DSP_CTRL_CAL_PH_IA_ADDR, (uint8_t*)(&VMetrology.DSP_CTRL.CAL_PH_IA), 4);
 101da10:	f104 0198 	add.w	r1, r4, #152	; 0x98
 101da14:	2204      	movs	r2, #4
 101da16:	f44f 7066 	mov.w	r0, #920	; 0x398
		VMetrology.DSP_CTRL.CAL_PH_VA = 0;
 101da1a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
		VMetrology.DSP_CTRL.CAL_PH_IA = (uint32_t)adjust_value;
 101da1e:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
		EEPROM_writer(DSP_CTRL_CAL_PH_IA_ADDR, (uint8_t*)(&VMetrology.DSP_CTRL.CAL_PH_IA), 4);
 101da22:	47b0      	blx	r6
		EEPROM_writer(DSP_CTRL_CAL_PH_VA_ADDR, (uint8_t*)(&VMetrology.DSP_CTRL.CAL_PH_VA), 4);
 101da24:	f104 019c 	add.w	r1, r4, #156	; 0x9c
 101da28:	2204      	movs	r2, #4
 101da2a:	f44f 7067 	mov.w	r0, #924	; 0x39c
 101da2e:	47b0      	blx	r6
		((DSP_CTRL_TYPE*)(mem_reg_in))->CAL_PH_IA = VMetrology.DSP_CTRL.CAL_PH_IA;
 101da30:	4b0d      	ldr	r3, [pc, #52]	; (101da68 <METROLOGY_APP_bWrite_cal_ph_ia+0x64>)
		((DSP_CTRL_TYPE*)(mem_reg_in))->CAL_PH_VA = VMetrology.DSP_CTRL.CAL_PH_VA;
 101da32:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
		((DSP_CTRL_TYPE*)(mem_reg_in))->CAL_PH_IA = VMetrology.DSP_CTRL.CAL_PH_IA;
 101da36:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
		((DSP_CTRL_TYPE*)(mem_reg_in))->CAL_PH_VA = VMetrology.DSP_CTRL.CAL_PH_VA;
 101da3a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		EEPROM_reader(DSP_CTRL_CAL_PH_IA_ADDR, (uint8_t*)(&comp_value), 4);
 101da3e:	2204      	movs	r2, #4
		((DSP_CTRL_TYPE*)(mem_reg_in))->CAL_PH_IA = VMetrology.DSP_CTRL.CAL_PH_IA;
 101da40:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
		EEPROM_reader(DSP_CTRL_CAL_PH_IA_ADDR, (uint8_t*)(&comp_value), 4);
 101da44:	f44f 7066 	mov.w	r0, #920	; 0x398
 101da48:	eb0d 0102 	add.w	r1, sp, r2
 101da4c:	4b07      	ldr	r3, [pc, #28]	; (101da6c <METROLOGY_APP_bWrite_cal_ph_ia+0x68>)
 101da4e:	4798      	blx	r3
		is_ok = (comp_value == adjust_value) ? true : false;
 101da50:	9801      	ldr	r0, [sp, #4]
}
 101da52:	1b40      	subs	r0, r0, r5
 101da54:	fab0 f080 	clz	r0, r0
 101da58:	0940      	lsrs	r0, r0, #5
 101da5a:	b002      	add	sp, #8
 101da5c:	bd70      	pop	{r4, r5, r6, pc}
 101da5e:	bf00      	nop
 101da60:	20016770 	.word	0x20016770
 101da64:	01017509 	.word	0x01017509
 101da68:	20100000 	.word	0x20100000
 101da6c:	01017511 	.word	0x01017511

0101da70 <METROLOGY_APP_bCalibrate_ph_ia>:
bool METROLOGY_APP_bCalibrate_ph_ia(uint32_t ph_error) {
 101da70:	b530      	push	{r4, r5, lr}
	cal_ph_i = (double)((int32_t)ph_error * pow(2, 31)) / (double)(100*1.7320508*CONST_Pi) * 60 / 60;
 101da72:	4b17      	ldr	r3, [pc, #92]	; (101dad0 <METROLOGY_APP_bCalibrate_ph_ia+0x60>)
 101da74:	4d17      	ldr	r5, [pc, #92]	; (101dad4 <METROLOGY_APP_bCalibrate_ph_ia+0x64>)
 101da76:	4c18      	ldr	r4, [pc, #96]	; (101dad8 <METROLOGY_APP_bCalibrate_ph_ia+0x68>)
bool METROLOGY_APP_bCalibrate_ph_ia(uint32_t ph_error) {
 101da78:	b083      	sub	sp, #12
	cal_ph_i = (double)((int32_t)ph_error * pow(2, 31)) / (double)(100*1.7320508*CONST_Pi) * 60 / 60;
 101da7a:	4798      	blx	r3
 101da7c:	2200      	movs	r2, #0
 101da7e:	4b17      	ldr	r3, [pc, #92]	; (101dadc <METROLOGY_APP_bCalibrate_ph_ia+0x6c>)
 101da80:	47a8      	blx	r5
 101da82:	a311      	add	r3, pc, #68	; (adr r3, 101dac8 <METROLOGY_APP_bCalibrate_ph_ia+0x58>)
 101da84:	e9d3 2300 	ldrd	r2, r3, [r3]
 101da88:	47a0      	blx	r4
 101da8a:	2200      	movs	r2, #0
 101da8c:	4b14      	ldr	r3, [pc, #80]	; (101dae0 <METROLOGY_APP_bCalibrate_ph_ia+0x70>)
 101da8e:	47a8      	blx	r5
 101da90:	2200      	movs	r2, #0
 101da92:	4b13      	ldr	r3, [pc, #76]	; (101dae0 <METROLOGY_APP_bCalibrate_ph_ia+0x70>)
 101da94:	47a0      	blx	r4
 101da96:	e9cd 0100 	strd	r0, r1, [sp]
	cal_ph_i /= 1000;
 101da9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 101da9e:	2200      	movs	r2, #0
 101daa0:	4b10      	ldr	r3, [pc, #64]	; (101dae4 <METROLOGY_APP_bCalibrate_ph_ia+0x74>)
 101daa2:	47a0      	blx	r4
 101daa4:	e9cd 0100 	strd	r0, r1, [sp]
	cal_ph_i *= (-1);
 101daa8:	e9dd 0100 	ldrd	r0, r1, [sp]
 101daac:	4602      	mov	r2, r0
 101daae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 101dab2:	e9cd 2300 	strd	r2, r3, [sp]
	return METROLOGY_APP_bWrite_cal_ph_ia((int32_t)cal_ph_i);
 101dab6:	e9dd 0100 	ldrd	r0, r1, [sp]
 101daba:	4b0b      	ldr	r3, [pc, #44]	; (101dae8 <METROLOGY_APP_bCalibrate_ph_ia+0x78>)
 101dabc:	4798      	blx	r3
 101dabe:	4b0b      	ldr	r3, [pc, #44]	; (101daec <METROLOGY_APP_bCalibrate_ph_ia+0x7c>)
 101dac0:	4798      	blx	r3
}
 101dac2:	b003      	add	sp, #12
 101dac4:	bd30      	pop	{r4, r5, pc}
 101dac6:	bf00      	nop
 101dac8:	4e35a617 	.word	0x4e35a617
 101dacc:	4081011e 	.word	0x4081011e
 101dad0:	0102ff39 	.word	0x0102ff39
 101dad4:	01030005 	.word	0x01030005
 101dad8:	01030259 	.word	0x01030259
 101dadc:	41e00000 	.word	0x41e00000
 101dae0:	404e0000 	.word	0x404e0000
 101dae4:	408f4000 	.word	0x408f4000
 101dae8:	01030565 	.word	0x01030565
 101daec:	0101da05 	.word	0x0101da05

0101daf0 <METROLOGY_APP_bBack_up_cal_m_ia>:
bool METROLOGY_APP_bBack_up_cal_m_ia(void) {
 101daf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 101daf2:	4e15      	ldr	r6, [pc, #84]	; (101db48 <METROLOGY_APP_bBack_up_cal_m_ia+0x58>)
		if ( nvm_value == ((DSP_CTRL_TYPE*)(mem_reg_in))->CAL_M_IA ) {
 101daf4:	4d15      	ldr	r5, [pc, #84]	; (101db4c <METROLOGY_APP_bBack_up_cal_m_ia+0x5c>)
			EEPROM_writer(DSP_CTRL_CAL_M_IA_COPY_ADDR, &nvm_value, sizeof(nvm_value));
 101daf6:	4f16      	ldr	r7, [pc, #88]	; (101db50 <METROLOGY_APP_bBack_up_cal_m_ia+0x60>)
bool METROLOGY_APP_bBack_up_cal_m_ia(void) {
 101daf8:	b083      	sub	sp, #12
 101dafa:	2401      	movs	r4, #1
		EEPROM_reader(DSP_CTRL_CAL_M_IA_ADDR, (uint8_t*)(&nvm_value), 4);
 101dafc:	2204      	movs	r2, #4
 101dafe:	eb0d 0102 	add.w	r1, sp, r2
 101db02:	f44f 705f 	mov.w	r0, #892	; 0x37c
 101db06:	47b0      	blx	r6
		if ( nvm_value == ((DSP_CTRL_TYPE*)(mem_reg_in))->CAL_M_IA ) {
 101db08:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 101db0a:	9b01      	ldr	r3, [sp, #4]
 101db0c:	429a      	cmp	r2, r3
 101db0e:	d006      	beq.n	101db1e <METROLOGY_APP_bBack_up_cal_m_ia+0x2e>
 101db10:	3401      	adds	r4, #1
 101db12:	b2e4      	uxtb	r4, r4
	while ( (!is_ok) && (i < 3) ) {
 101db14:	2c04      	cmp	r4, #4
 101db16:	d1f1      	bne.n	101dafc <METROLOGY_APP_bBack_up_cal_m_ia+0xc>
 101db18:	2000      	movs	r0, #0
}
 101db1a:	b003      	add	sp, #12
 101db1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			EEPROM_writer(DSP_CTRL_CAL_M_IA_COPY_ADDR, &nvm_value, sizeof(nvm_value));
 101db1e:	2204      	movs	r2, #4
 101db20:	eb0d 0102 	add.w	r1, sp, r2
 101db24:	f44f 7077 	mov.w	r0, #988	; 0x3dc
 101db28:	47b8      	blx	r7
			EEPROM_reader(DSP_CTRL_CAL_M_IA_COPY_ADDR, &nvm_value, sizeof(nvm_value));
 101db2a:	2204      	movs	r2, #4
			nvm_value = 0;
 101db2c:	2300      	movs	r3, #0
			EEPROM_reader(DSP_CTRL_CAL_M_IA_COPY_ADDR, &nvm_value, sizeof(nvm_value));
 101db2e:	eb0d 0102 	add.w	r1, sp, r2
 101db32:	f44f 7077 	mov.w	r0, #988	; 0x3dc
			nvm_value = 0;
 101db36:	9301      	str	r3, [sp, #4]
			EEPROM_reader(DSP_CTRL_CAL_M_IA_COPY_ADDR, &nvm_value, sizeof(nvm_value));
 101db38:	47b0      	blx	r6
	while ( (!is_ok) && (i < 3) ) {
 101db3a:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 101db3c:	9b01      	ldr	r3, [sp, #4]
 101db3e:	429a      	cmp	r2, r3
 101db40:	d1e6      	bne.n	101db10 <METROLOGY_APP_bBack_up_cal_m_ia+0x20>
 101db42:	2001      	movs	r0, #1
}
 101db44:	b003      	add	sp, #12
 101db46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 101db48:	01017511 	.word	0x01017511
 101db4c:	20100000 	.word	0x20100000
 101db50:	01017509 	.word	0x01017509

0101db54 <METROLOGY_APP_bBack_up_cal_m_va>:
bool METROLOGY_APP_bBack_up_cal_m_va(void) {
 101db54:	b5f0      	push	{r4, r5, r6, r7, lr}
 101db56:	4e16      	ldr	r6, [pc, #88]	; (101dbb0 <METROLOGY_APP_bBack_up_cal_m_va+0x5c>)
		if ( nvm_value == ((DSP_CTRL_TYPE*)(mem_reg_in))->CAL_M_VA ) {
 101db58:	4d16      	ldr	r5, [pc, #88]	; (101dbb4 <METROLOGY_APP_bBack_up_cal_m_va+0x60>)
			EEPROM_writer(DSP_CTRL_CAL_M_VA_COPY_ADDR, &nvm_value, sizeof(nvm_value));
 101db5a:	4f17      	ldr	r7, [pc, #92]	; (101dbb8 <METROLOGY_APP_bBack_up_cal_m_va+0x64>)
bool METROLOGY_APP_bBack_up_cal_m_va(void) {
 101db5c:	b083      	sub	sp, #12
 101db5e:	2401      	movs	r4, #1
		EEPROM_reader(DSP_CTRL_CAL_M_VA_ADDR, (uint8_t*)(&nvm_value), 4);
 101db60:	2204      	movs	r2, #4
 101db62:	eb0d 0102 	add.w	r1, sp, r2
 101db66:	f44f 7060 	mov.w	r0, #896	; 0x380
 101db6a:	47b0      	blx	r6
		if ( nvm_value == ((DSP_CTRL_TYPE*)(mem_reg_in))->CAL_M_VA ) {
 101db6c:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
 101db70:	9b01      	ldr	r3, [sp, #4]
 101db72:	429a      	cmp	r2, r3
 101db74:	d006      	beq.n	101db84 <METROLOGY_APP_bBack_up_cal_m_va+0x30>
 101db76:	3401      	adds	r4, #1
 101db78:	b2e4      	uxtb	r4, r4
	while ( (!is_ok) && (i < 3) ) {
 101db7a:	2c04      	cmp	r4, #4
 101db7c:	d1f0      	bne.n	101db60 <METROLOGY_APP_bBack_up_cal_m_va+0xc>
 101db7e:	2000      	movs	r0, #0
}
 101db80:	b003      	add	sp, #12
 101db82:	bdf0      	pop	{r4, r5, r6, r7, pc}
			EEPROM_writer(DSP_CTRL_CAL_M_VA_COPY_ADDR, &nvm_value, sizeof(nvm_value));
 101db84:	2204      	movs	r2, #4
 101db86:	eb0d 0102 	add.w	r1, sp, r2
 101db8a:	f44f 7078 	mov.w	r0, #992	; 0x3e0
 101db8e:	47b8      	blx	r7
			EEPROM_reader(DSP_CTRL_CAL_M_VA_COPY_ADDR, &nvm_value, sizeof(nvm_value));
 101db90:	2204      	movs	r2, #4
			nvm_value = 0;
 101db92:	2300      	movs	r3, #0
			EEPROM_reader(DSP_CTRL_CAL_M_VA_COPY_ADDR, &nvm_value, sizeof(nvm_value));
 101db94:	eb0d 0102 	add.w	r1, sp, r2
 101db98:	f44f 7078 	mov.w	r0, #992	; 0x3e0
			nvm_value = 0;
 101db9c:	9301      	str	r3, [sp, #4]
			EEPROM_reader(DSP_CTRL_CAL_M_VA_COPY_ADDR, &nvm_value, sizeof(nvm_value));
 101db9e:	47b0      	blx	r6
	while ( (!is_ok) && (i < 3) ) {
 101dba0:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
 101dba4:	9b01      	ldr	r3, [sp, #4]
 101dba6:	429a      	cmp	r2, r3
 101dba8:	d1e5      	bne.n	101db76 <METROLOGY_APP_bBack_up_cal_m_va+0x22>
 101dbaa:	2001      	movs	r0, #1
}
 101dbac:	b003      	add	sp, #12
 101dbae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 101dbb0:	01017511 	.word	0x01017511
 101dbb4:	20100000 	.word	0x20100000
 101dbb8:	01017509 	.word	0x01017509

0101dbbc <METROLOGY_APP_bBack_up_cal_ph_ia>:
bool METROLOGY_APP_bBack_up_cal_ph_ia(void) {
 101dbbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 101dbbe:	4e16      	ldr	r6, [pc, #88]	; (101dc18 <METROLOGY_APP_bBack_up_cal_ph_ia+0x5c>)
		if ( nvm_value == ((DSP_CTRL_TYPE*)(mem_reg_in))->CAL_PH_IA ) {
 101dbc0:	4d16      	ldr	r5, [pc, #88]	; (101dc1c <METROLOGY_APP_bBack_up_cal_ph_ia+0x60>)
			EEPROM_writer(DSP_CTRL_CAL_PH_IA_COPY_ADDR, &nvm_value, sizeof(nvm_value));
 101dbc2:	4f17      	ldr	r7, [pc, #92]	; (101dc20 <METROLOGY_APP_bBack_up_cal_ph_ia+0x64>)
bool METROLOGY_APP_bBack_up_cal_ph_ia(void) {
 101dbc4:	b083      	sub	sp, #12
 101dbc6:	2401      	movs	r4, #1
		EEPROM_reader(DSP_CTRL_CAL_PH_IA_ADDR, (uint8_t*)(&nvm_value), 4);
 101dbc8:	2204      	movs	r2, #4
 101dbca:	eb0d 0102 	add.w	r1, sp, r2
 101dbce:	f44f 7066 	mov.w	r0, #920	; 0x398
 101dbd2:	47b0      	blx	r6
		if ( nvm_value == ((DSP_CTRL_TYPE*)(mem_reg_in))->CAL_PH_IA ) {
 101dbd4:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
 101dbd8:	9b01      	ldr	r3, [sp, #4]
 101dbda:	429a      	cmp	r2, r3
 101dbdc:	d006      	beq.n	101dbec <METROLOGY_APP_bBack_up_cal_ph_ia+0x30>
 101dbde:	3401      	adds	r4, #1
 101dbe0:	b2e4      	uxtb	r4, r4
	while ( (!is_ok) && (i < 3) ) {
 101dbe2:	2c04      	cmp	r4, #4
 101dbe4:	d1f0      	bne.n	101dbc8 <METROLOGY_APP_bBack_up_cal_ph_ia+0xc>
 101dbe6:	2000      	movs	r0, #0
}
 101dbe8:	b003      	add	sp, #12
 101dbea:	bdf0      	pop	{r4, r5, r6, r7, pc}
			EEPROM_writer(DSP_CTRL_CAL_PH_IA_COPY_ADDR, &nvm_value, sizeof(nvm_value));
 101dbec:	2204      	movs	r2, #4
 101dbee:	eb0d 0102 	add.w	r1, sp, r2
 101dbf2:	f44f 7079 	mov.w	r0, #996	; 0x3e4
 101dbf6:	47b8      	blx	r7
			EEPROM_reader(DSP_CTRL_CAL_PH_IA_COPY_ADDR, &nvm_value, sizeof(nvm_value));
 101dbf8:	2204      	movs	r2, #4
			nvm_value = 0;
 101dbfa:	2300      	movs	r3, #0
			EEPROM_reader(DSP_CTRL_CAL_PH_IA_COPY_ADDR, &nvm_value, sizeof(nvm_value));
 101dbfc:	eb0d 0102 	add.w	r1, sp, r2
 101dc00:	f44f 7079 	mov.w	r0, #996	; 0x3e4
			nvm_value = 0;
 101dc04:	9301      	str	r3, [sp, #4]
			EEPROM_reader(DSP_CTRL_CAL_PH_IA_COPY_ADDR, &nvm_value, sizeof(nvm_value));
 101dc06:	47b0      	blx	r6
	while ( (!is_ok) && (i < 3) ) {
 101dc08:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
 101dc0c:	9b01      	ldr	r3, [sp, #4]
 101dc0e:	429a      	cmp	r2, r3
 101dc10:	d1e5      	bne.n	101dbde <METROLOGY_APP_bBack_up_cal_ph_ia+0x22>
 101dc12:	2001      	movs	r0, #1
}
 101dc14:	b003      	add	sp, #12
 101dc16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 101dc18:	01017511 	.word	0x01017511
 101dc1c:	20100000 	.word	0x20100000
 101dc20:	01017509 	.word	0x01017509

0101dc24 <METROLOGY_APP_bRestore_cal_m_ia_backup>:
bool METROLOGY_APP_bRestore_cal_m_ia_backup(void) {
 101dc24:	b570      	push	{r4, r5, r6, lr}
 101dc26:	4e09      	ldr	r6, [pc, #36]	; (101dc4c <METROLOGY_APP_bRestore_cal_m_ia_backup+0x28>)
 101dc28:	4d09      	ldr	r5, [pc, #36]	; (101dc50 <METROLOGY_APP_bRestore_cal_m_ia_backup+0x2c>)
 101dc2a:	b082      	sub	sp, #8
 101dc2c:	2403      	movs	r4, #3
		EEPROM_reader(DSP_CTRL_CAL_M_IA_COPY_ADDR, (uint8_t*)(&nvm_value), 4);
 101dc2e:	2204      	movs	r2, #4
 101dc30:	eb0d 0102 	add.w	r1, sp, r2
 101dc34:	f44f 7077 	mov.w	r0, #988	; 0x3dc
 101dc38:	47b0      	blx	r6
		is_ok = METROLOGY_APP_bWrite_cal_m_ia(nvm_value);
 101dc3a:	9801      	ldr	r0, [sp, #4]
 101dc3c:	47a8      	blx	r5
 101dc3e:	1e63      	subs	r3, r4, #1
	while ( (!is_ok) && (i < 3) ) {
 101dc40:	b910      	cbnz	r0, 101dc48 <METROLOGY_APP_bRestore_cal_m_ia_backup+0x24>
 101dc42:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 101dc46:	d1f2      	bne.n	101dc2e <METROLOGY_APP_bRestore_cal_m_ia_backup+0xa>
}
 101dc48:	b002      	add	sp, #8
 101dc4a:	bd70      	pop	{r4, r5, r6, pc}
 101dc4c:	01017511 	.word	0x01017511
 101dc50:	0101d8b1 	.word	0x0101d8b1

0101dc54 <METROLOGY_APP_bRestore_cal_m_va_backup>:
bool METROLOGY_APP_bRestore_cal_m_va_backup(void) {
 101dc54:	b570      	push	{r4, r5, r6, lr}
 101dc56:	4e09      	ldr	r6, [pc, #36]	; (101dc7c <METROLOGY_APP_bRestore_cal_m_va_backup+0x28>)
 101dc58:	4d09      	ldr	r5, [pc, #36]	; (101dc80 <METROLOGY_APP_bRestore_cal_m_va_backup+0x2c>)
 101dc5a:	b082      	sub	sp, #8
 101dc5c:	2403      	movs	r4, #3
		EEPROM_reader(DSP_CTRL_CAL_M_VA_COPY_ADDR, (uint8_t*)(&nvm_value), 4);
 101dc5e:	2204      	movs	r2, #4
 101dc60:	eb0d 0102 	add.w	r1, sp, r2
 101dc64:	f44f 7078 	mov.w	r0, #992	; 0x3e0
 101dc68:	47b0      	blx	r6
		is_ok = METROLOGY_APP_bWrite_cal_m_va(nvm_value);
 101dc6a:	9801      	ldr	r0, [sp, #4]
 101dc6c:	47a8      	blx	r5
 101dc6e:	1e63      	subs	r3, r4, #1
	while ( (!is_ok) && (i < 3) ) {
 101dc70:	b910      	cbnz	r0, 101dc78 <METROLOGY_APP_bRestore_cal_m_va_backup+0x24>
 101dc72:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 101dc76:	d1f2      	bne.n	101dc5e <METROLOGY_APP_bRestore_cal_m_va_backup+0xa>
}
 101dc78:	b002      	add	sp, #8
 101dc7a:	bd70      	pop	{r4, r5, r6, pc}
 101dc7c:	01017511 	.word	0x01017511
 101dc80:	0101d959 	.word	0x0101d959

0101dc84 <METROLOGY_APP_bRestore_cal_ph_ia_backup>:
bool METROLOGY_APP_bRestore_cal_ph_ia_backup(void) {
 101dc84:	b570      	push	{r4, r5, r6, lr}
 101dc86:	4e09      	ldr	r6, [pc, #36]	; (101dcac <METROLOGY_APP_bRestore_cal_ph_ia_backup+0x28>)
 101dc88:	4d09      	ldr	r5, [pc, #36]	; (101dcb0 <METROLOGY_APP_bRestore_cal_ph_ia_backup+0x2c>)
 101dc8a:	b082      	sub	sp, #8
 101dc8c:	2403      	movs	r4, #3
		EEPROM_reader(DSP_CTRL_CAL_PH_IA_COPY_ADDR, (uint8_t*)(&nvm_value), 4);
 101dc8e:	2204      	movs	r2, #4
 101dc90:	eb0d 0102 	add.w	r1, sp, r2
 101dc94:	f44f 7079 	mov.w	r0, #996	; 0x3e4
 101dc98:	47b0      	blx	r6
		is_ok = METROLOGY_APP_bWrite_cal_ph_ia(nvm_value);
 101dc9a:	9801      	ldr	r0, [sp, #4]
 101dc9c:	47a8      	blx	r5
 101dc9e:	1e63      	subs	r3, r4, #1
	while ( (!is_ok) && (i < 3) ) {
 101dca0:	b910      	cbnz	r0, 101dca8 <METROLOGY_APP_bRestore_cal_ph_ia_backup+0x24>
 101dca2:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 101dca6:	d1f2      	bne.n	101dc8e <METROLOGY_APP_bRestore_cal_ph_ia_backup+0xa>
}
 101dca8:	b002      	add	sp, #8
 101dcaa:	bd70      	pop	{r4, r5, r6, pc}
 101dcac:	01017511 	.word	0x01017511
 101dcb0:	0101da05 	.word	0x0101da05

0101dcb4 <METROLOGY_APP_bWrite_cal_m_ib>:
bool METROLOGY_APP_bWrite_cal_m_ib(uint32_t adjust_value) {
 101dcb4:	b530      	push	{r4, r5, lr}
		VMetrology.DSP_CTRL.CAL_M_IB = (uint32_t)(adjust_value);
 101dcb6:	4d0f      	ldr	r5, [pc, #60]	; (101dcf4 <METROLOGY_APP_bWrite_cal_m_ib+0x40>)
		EEPROM_writer(DSP_CTRL_CAL_M_IB_ADDR, (uint8_t*)(&VMetrology.DSP_CTRL.CAL_M_IB), 4);
 101dcb8:	4b0f      	ldr	r3, [pc, #60]	; (101dcf8 <METROLOGY_APP_bWrite_cal_m_ib+0x44>)
		VMetrology.DSP_CTRL.CAL_M_IB = (uint32_t)(adjust_value);
 101dcba:	4629      	mov	r1, r5
bool METROLOGY_APP_bWrite_cal_m_ib(uint32_t adjust_value) {
 101dcbc:	b083      	sub	sp, #12
 101dcbe:	4604      	mov	r4, r0
		VMetrology.DSP_CTRL.CAL_M_IB = (uint32_t)(adjust_value);
 101dcc0:	f841 0f84 	str.w	r0, [r1, #132]!
		EEPROM_writer(DSP_CTRL_CAL_M_IB_ADDR, (uint8_t*)(&VMetrology.DSP_CTRL.CAL_M_IB), 4);
 101dcc4:	2204      	movs	r2, #4
 101dcc6:	f44f 7061 	mov.w	r0, #900	; 0x384
 101dcca:	4798      	blx	r3
		((DSP_CTRL_TYPE*)(mem_reg_in))->CAL_M_IB = VMetrology.DSP_CTRL.CAL_M_IB;
 101dccc:	4b0b      	ldr	r3, [pc, #44]	; (101dcfc <METROLOGY_APP_bWrite_cal_m_ib+0x48>)
 101dcce:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
 101dcd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		EEPROM_reader(DSP_CTRL_CAL_M_IB_ADDR, (uint8_t*)(&comp_value), 4);
 101dcd6:	2204      	movs	r2, #4
 101dcd8:	eb0d 0102 	add.w	r1, sp, r2
 101dcdc:	4b08      	ldr	r3, [pc, #32]	; (101dd00 <METROLOGY_APP_bWrite_cal_m_ib+0x4c>)
 101dcde:	f44f 7061 	mov.w	r0, #900	; 0x384
 101dce2:	4798      	blx	r3
		is_ok = (comp_value == adjust_value) ? true : false;
 101dce4:	9801      	ldr	r0, [sp, #4]
}
 101dce6:	1b00      	subs	r0, r0, r4
 101dce8:	fab0 f080 	clz	r0, r0
 101dcec:	0940      	lsrs	r0, r0, #5
 101dcee:	b003      	add	sp, #12
 101dcf0:	bd30      	pop	{r4, r5, pc}
 101dcf2:	bf00      	nop
 101dcf4:	20016770 	.word	0x20016770
 101dcf8:	01017509 	.word	0x01017509
 101dcfc:	20100000 	.word	0x20100000
 101dd00:	01017511 	.word	0x01017511

0101dd04 <METROLOGY_APP_bCalibrate_m_ib>:
bool METROLOGY_APP_bCalibrate_m_ib(uint32_t mA_in) {
 101dd04:	b5d0      	push	{r4, r6, r7, lr}
	cal_m_i = (double)(mA_in * pow(2, 29));
 101dd06:	4b0e      	ldr	r3, [pc, #56]	; (101dd40 <METROLOGY_APP_bCalibrate_m_ib+0x3c>)
 101dd08:	4c0e      	ldr	r4, [pc, #56]	; (101dd44 <METROLOGY_APP_bCalibrate_m_ib+0x40>)
 101dd0a:	4798      	blx	r3
 101dd0c:	2200      	movs	r2, #0
 101dd0e:	4b0e      	ldr	r3, [pc, #56]	; (101dd48 <METROLOGY_APP_bCalibrate_m_ib+0x44>)
 101dd10:	47a0      	blx	r4
	cal_m_i /= METROLOGY_APP_dCalculate_Ix_rms(VMetrology.DSP_ACC.I_B, VMetrology.DSP_ST.N);
 101dd12:	4b0e      	ldr	r3, [pc, #56]	; (101dd4c <METROLOGY_APP_bCalibrate_m_ib+0x48>)
 101dd14:	4c0e      	ldr	r4, [pc, #56]	; (101dd50 <METROLOGY_APP_bCalibrate_m_ib+0x4c>)
 101dd16:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 101dd1a:	f503 73b8 	add.w	r3, r3, #368	; 0x170
	cal_m_i = (double)(mA_in * pow(2, 29));
 101dd1e:	4606      	mov	r6, r0
 101dd20:	460f      	mov	r7, r1
	cal_m_i /= METROLOGY_APP_dCalculate_Ix_rms(VMetrology.DSP_ACC.I_B, VMetrology.DSP_ST.N);
 101dd22:	e9d3 0100 	ldrd	r0, r1, [r3]
 101dd26:	47a0      	blx	r4
 101dd28:	4c0a      	ldr	r4, [pc, #40]	; (101dd54 <METROLOGY_APP_bCalibrate_m_ib+0x50>)
 101dd2a:	4602      	mov	r2, r0
 101dd2c:	460b      	mov	r3, r1
 101dd2e:	4630      	mov	r0, r6
 101dd30:	4639      	mov	r1, r7
 101dd32:	47a0      	blx	r4
	return METROLOGY_APP_bWrite_cal_m_ib((uint32_t)cal_m_i);
 101dd34:	4b08      	ldr	r3, [pc, #32]	; (101dd58 <METROLOGY_APP_bCalibrate_m_ib+0x54>)
 101dd36:	4798      	blx	r3
 101dd38:	4b08      	ldr	r3, [pc, #32]	; (101dd5c <METROLOGY_APP_bCalibrate_m_ib+0x58>)
}
 101dd3a:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
	return METROLOGY_APP_bWrite_cal_m_ib((uint32_t)cal_m_i);
 101dd3e:	4718      	bx	r3
 101dd40:	0102ff19 	.word	0x0102ff19
 101dd44:	01030005 	.word	0x01030005
 101dd48:	41c00000 	.word	0x41c00000
 101dd4c:	20016770 	.word	0x20016770
 101dd50:	0101d541 	.word	0x0101d541
 101dd54:	01030259 	.word	0x01030259
 101dd58:	010305b5 	.word	0x010305b5
 101dd5c:	0101dcb5 	.word	0x0101dcb5

0101dd60 <METROLOGY_APP_bWrite_cal_m_vb>:
bool METROLOGY_APP_bWrite_cal_m_vb(uint32_t adjust_value) {
 101dd60:	b530      	push	{r4, r5, lr}
		VMetrology.DSP_CTRL.CAL_M_VB = (uint32_t)adjust_value;
 101dd62:	4d0f      	ldr	r5, [pc, #60]	; (101dda0 <METROLOGY_APP_bWrite_cal_m_vb+0x40>)
		EEPROM_writer(DSP_CTRL_CAL_M_VB_ADDR, (uint8_t*)(&VMetrology.DSP_CTRL.CAL_M_VB), 4);
 101dd64:	4b0f      	ldr	r3, [pc, #60]	; (101dda4 <METROLOGY_APP_bWrite_cal_m_vb+0x44>)
		VMetrology.DSP_CTRL.CAL_M_VB = (uint32_t)adjust_value;
 101dd66:	4629      	mov	r1, r5
bool METROLOGY_APP_bWrite_cal_m_vb(uint32_t adjust_value) {
 101dd68:	b083      	sub	sp, #12
 101dd6a:	4604      	mov	r4, r0
		VMetrology.DSP_CTRL.CAL_M_VB = (uint32_t)adjust_value;
 101dd6c:	f841 0f88 	str.w	r0, [r1, #136]!
		EEPROM_writer(DSP_CTRL_CAL_M_VB_ADDR, (uint8_t*)(&VMetrology.DSP_CTRL.CAL_M_VB), 4);
 101dd70:	2204      	movs	r2, #4
 101dd72:	f44f 7062 	mov.w	r0, #904	; 0x388
 101dd76:	4798      	blx	r3
		((DSP_CTRL_TYPE*)(mem_reg_in))->CAL_M_VB = VMetrology.DSP_CTRL.CAL_M_VB;
 101dd78:	4b0b      	ldr	r3, [pc, #44]	; (101dda8 <METROLOGY_APP_bWrite_cal_m_vb+0x48>)
 101dd7a:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
 101dd7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		EEPROM_reader(DSP_CTRL_CAL_M_VB_ADDR, (uint8_t*)(&comp_value), 4);
 101dd82:	2204      	movs	r2, #4
 101dd84:	eb0d 0102 	add.w	r1, sp, r2
 101dd88:	4b08      	ldr	r3, [pc, #32]	; (101ddac <METROLOGY_APP_bWrite_cal_m_vb+0x4c>)
 101dd8a:	f44f 7062 	mov.w	r0, #904	; 0x388
 101dd8e:	4798      	blx	r3
		if (comp_value == adjust_value) {
 101dd90:	9801      	ldr	r0, [sp, #4]
}
 101dd92:	1b00      	subs	r0, r0, r4
 101dd94:	fab0 f080 	clz	r0, r0
 101dd98:	0940      	lsrs	r0, r0, #5
 101dd9a:	b003      	add	sp, #12
 101dd9c:	bd30      	pop	{r4, r5, pc}
 101dd9e:	bf00      	nop
 101dda0:	20016770 	.word	0x20016770
 101dda4:	01017509 	.word	0x01017509
 101dda8:	20100000 	.word	0x20100000
 101ddac:	01017511 	.word	0x01017511

0101ddb0 <METROLOGY_APP_bCalibrate_m_vb>:
bool METROLOGY_APP_bCalibrate_m_vb(uint32_t mV_in) {
 101ddb0:	b5d0      	push	{r4, r6, r7, lr}
	cal_m_v = (double)(mV_in * pow(2, 29));
 101ddb2:	4b0e      	ldr	r3, [pc, #56]	; (101ddec <METROLOGY_APP_bCalibrate_m_vb+0x3c>)
 101ddb4:	4c0e      	ldr	r4, [pc, #56]	; (101ddf0 <METROLOGY_APP_bCalibrate_m_vb+0x40>)
 101ddb6:	4798      	blx	r3
 101ddb8:	2200      	movs	r2, #0
 101ddba:	4b0e      	ldr	r3, [pc, #56]	; (101ddf4 <METROLOGY_APP_bCalibrate_m_vb+0x44>)
 101ddbc:	47a0      	blx	r4
	cal_m_v /= METROLOGY_APP_dCalculate_Vx_rms(VMetrology.DSP_ACC.V_B, VMetrology.DSP_ST.N);
 101ddbe:	4b0e      	ldr	r3, [pc, #56]	; (101ddf8 <METROLOGY_APP_bCalibrate_m_vb+0x48>)
 101ddc0:	4c0e      	ldr	r4, [pc, #56]	; (101ddfc <METROLOGY_APP_bCalibrate_m_vb+0x4c>)
 101ddc2:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 101ddc6:	f503 731e 	add.w	r3, r3, #632	; 0x278
	cal_m_v = (double)(mV_in * pow(2, 29));
 101ddca:	4606      	mov	r6, r0
 101ddcc:	460f      	mov	r7, r1
	cal_m_v /= METROLOGY_APP_dCalculate_Vx_rms(VMetrology.DSP_ACC.V_B, VMetrology.DSP_ST.N);
 101ddce:	e9d3 0100 	ldrd	r0, r1, [r3]
 101ddd2:	47a0      	blx	r4
 101ddd4:	4c0a      	ldr	r4, [pc, #40]	; (101de00 <METROLOGY_APP_bCalibrate_m_vb+0x50>)
 101ddd6:	4602      	mov	r2, r0
 101ddd8:	460b      	mov	r3, r1
 101ddda:	4630      	mov	r0, r6
 101dddc:	4639      	mov	r1, r7
 101ddde:	47a0      	blx	r4
	return METROLOGY_APP_bWrite_cal_m_vb((uint32_t)cal_m_v);
 101dde0:	4b08      	ldr	r3, [pc, #32]	; (101de04 <METROLOGY_APP_bCalibrate_m_vb+0x54>)
 101dde2:	4798      	blx	r3
 101dde4:	4b08      	ldr	r3, [pc, #32]	; (101de08 <METROLOGY_APP_bCalibrate_m_vb+0x58>)
}
 101dde6:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
	return METROLOGY_APP_bWrite_cal_m_vb((uint32_t)cal_m_v);
 101ddea:	4718      	bx	r3
 101ddec:	0102ff19 	.word	0x0102ff19
 101ddf0:	01030005 	.word	0x01030005
 101ddf4:	41c00000 	.word	0x41c00000
 101ddf8:	20016770 	.word	0x20016770
 101ddfc:	0101d5f9 	.word	0x0101d5f9
 101de00:	01030259 	.word	0x01030259
 101de04:	010305b5 	.word	0x010305b5
 101de08:	0101dd61 	.word	0x0101dd61

0101de0c <METROLOGY_APP_bWrite_cal_ph_ib>:
bool METROLOGY_APP_bWrite_cal_ph_ib(uint32_t adjust_value) {
 101de0c:	b570      	push	{r4, r5, r6, lr}
		VMetrology.DSP_CTRL.CAL_PH_IB = (uint32_t)adjust_value;
 101de0e:	4c16      	ldr	r4, [pc, #88]	; (101de68 <METROLOGY_APP_bWrite_cal_ph_ib+0x5c>)
		EEPROM_writer(DSP_CTRL_CAL_PH_IB_ADDR, (uint8_t*)(&VMetrology.DSP_CTRL.CAL_PH_IB), 4);
 101de10:	4e16      	ldr	r6, [pc, #88]	; (101de6c <METROLOGY_APP_bWrite_cal_ph_ib+0x60>)
bool METROLOGY_APP_bWrite_cal_ph_ib(uint32_t adjust_value) {
 101de12:	b082      	sub	sp, #8
 101de14:	4605      	mov	r5, r0
		VMetrology.DSP_CTRL.CAL_PH_VB = 0;
 101de16:	2300      	movs	r3, #0
		EEPROM_writer(DSP_CTRL_CAL_PH_IB_ADDR, (uint8_t*)(&VMetrology.DSP_CTRL.CAL_PH_IB), 4);
 101de18:	f104 01a0 	add.w	r1, r4, #160	; 0xa0
 101de1c:	2204      	movs	r2, #4
 101de1e:	f44f 7068 	mov.w	r0, #928	; 0x3a0
		VMetrology.DSP_CTRL.CAL_PH_VB = 0;
 101de22:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		VMetrology.DSP_CTRL.CAL_PH_IB = (uint32_t)adjust_value;
 101de26:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		EEPROM_writer(DSP_CTRL_CAL_PH_IB_ADDR, (uint8_t*)(&VMetrology.DSP_CTRL.CAL_PH_IB), 4);
 101de2a:	47b0      	blx	r6
		EEPROM_writer(DSP_CTRL_CAL_PH_VB_ADDR, (uint8_t*)(&VMetrology.DSP_CTRL.CAL_PH_VB), 4);
 101de2c:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
 101de30:	2204      	movs	r2, #4
 101de32:	f44f 7069 	mov.w	r0, #932	; 0x3a4
 101de36:	47b0      	blx	r6
		((DSP_CTRL_TYPE*)(mem_reg_in))->CAL_PH_IB = VMetrology.DSP_CTRL.CAL_PH_IB;
 101de38:	4b0d      	ldr	r3, [pc, #52]	; (101de70 <METROLOGY_APP_bWrite_cal_ph_ib+0x64>)
		((DSP_CTRL_TYPE*)(mem_reg_in))->CAL_PH_VB = VMetrology.DSP_CTRL.CAL_PH_VB;
 101de3a:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
		((DSP_CTRL_TYPE*)(mem_reg_in))->CAL_PH_IB = VMetrology.DSP_CTRL.CAL_PH_IB;
 101de3e:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
		((DSP_CTRL_TYPE*)(mem_reg_in))->CAL_PH_VB = VMetrology.DSP_CTRL.CAL_PH_VB;
 101de42:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		EEPROM_reader(DSP_CTRL_CAL_PH_IB_ADDR, (uint8_t*)(&comp_value), 4);
 101de46:	2204      	movs	r2, #4
		((DSP_CTRL_TYPE*)(mem_reg_in))->CAL_PH_IB = VMetrology.DSP_CTRL.CAL_PH_IB;
 101de48:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		EEPROM_reader(DSP_CTRL_CAL_PH_IB_ADDR, (uint8_t*)(&comp_value), 4);
 101de4c:	f44f 7068 	mov.w	r0, #928	; 0x3a0
 101de50:	eb0d 0102 	add.w	r1, sp, r2
 101de54:	4b07      	ldr	r3, [pc, #28]	; (101de74 <METROLOGY_APP_bWrite_cal_ph_ib+0x68>)
 101de56:	4798      	blx	r3
		is_ok = (comp_value == adjust_value) ? true : false;
 101de58:	9801      	ldr	r0, [sp, #4]
}
 101de5a:	1b40      	subs	r0, r0, r5
 101de5c:	fab0 f080 	clz	r0, r0
 101de60:	0940      	lsrs	r0, r0, #5
 101de62:	b002      	add	sp, #8
 101de64:	bd70      	pop	{r4, r5, r6, pc}
 101de66:	bf00      	nop
 101de68:	20016770 	.word	0x20016770
 101de6c:	01017509 	.word	0x01017509
 101de70:	20100000 	.word	0x20100000
 101de74:	01017511 	.word	0x01017511

0101de78 <METROLOGY_APP_bCalibrate_ph_ib>:
bool METROLOGY_APP_bCalibrate_ph_ib(uint32_t ph_error) {
 101de78:	b530      	push	{r4, r5, lr}
	cal_ph_i = (double)((int32_t)ph_error * pow(2, 31)) / (double)(100*1.7320508*CONST_Pi) * 60 / 60;
 101de7a:	4b17      	ldr	r3, [pc, #92]	; (101ded8 <METROLOGY_APP_bCalibrate_ph_ib+0x60>)
 101de7c:	4d17      	ldr	r5, [pc, #92]	; (101dedc <METROLOGY_APP_bCalibrate_ph_ib+0x64>)
 101de7e:	4c18      	ldr	r4, [pc, #96]	; (101dee0 <METROLOGY_APP_bCalibrate_ph_ib+0x68>)
bool METROLOGY_APP_bCalibrate_ph_ib(uint32_t ph_error) {
 101de80:	b083      	sub	sp, #12
	cal_ph_i = (double)((int32_t)ph_error * pow(2, 31)) / (double)(100*1.7320508*CONST_Pi) * 60 / 60;
 101de82:	4798      	blx	r3
 101de84:	2200      	movs	r2, #0
 101de86:	4b17      	ldr	r3, [pc, #92]	; (101dee4 <METROLOGY_APP_bCalibrate_ph_ib+0x6c>)
 101de88:	47a8      	blx	r5
 101de8a:	a311      	add	r3, pc, #68	; (adr r3, 101ded0 <METROLOGY_APP_bCalibrate_ph_ib+0x58>)
 101de8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 101de90:	47a0      	blx	r4
 101de92:	2200      	movs	r2, #0
 101de94:	4b14      	ldr	r3, [pc, #80]	; (101dee8 <METROLOGY_APP_bCalibrate_ph_ib+0x70>)
 101de96:	47a8      	blx	r5
 101de98:	2200      	movs	r2, #0
 101de9a:	4b13      	ldr	r3, [pc, #76]	; (101dee8 <METROLOGY_APP_bCalibrate_ph_ib+0x70>)
 101de9c:	47a0      	blx	r4
 101de9e:	e9cd 0100 	strd	r0, r1, [sp]
	cal_ph_i /= 1000;
 101dea2:	e9dd 0100 	ldrd	r0, r1, [sp]
 101dea6:	2200      	movs	r2, #0
 101dea8:	4b10      	ldr	r3, [pc, #64]	; (101deec <METROLOGY_APP_bCalibrate_ph_ib+0x74>)
 101deaa:	47a0      	blx	r4
 101deac:	e9cd 0100 	strd	r0, r1, [sp]
	cal_ph_i *= (-1);
 101deb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 101deb4:	4602      	mov	r2, r0
 101deb6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 101deba:	e9cd 2300 	strd	r2, r3, [sp]
	return METROLOGY_APP_bWrite_cal_ph_ib((int32_t)cal_ph_i);
 101debe:	e9dd 0100 	ldrd	r0, r1, [sp]
 101dec2:	4b0b      	ldr	r3, [pc, #44]	; (101def0 <METROLOGY_APP_bCalibrate_ph_ib+0x78>)
 101dec4:	4798      	blx	r3
 101dec6:	4b0b      	ldr	r3, [pc, #44]	; (101def4 <METROLOGY_APP_bCalibrate_ph_ib+0x7c>)
 101dec8:	4798      	blx	r3
}
 101deca:	b003      	add	sp, #12
 101decc:	bd30      	pop	{r4, r5, pc}
 101dece:	bf00      	nop
 101ded0:	4e35a617 	.word	0x4e35a617
 101ded4:	4081011e 	.word	0x4081011e
 101ded8:	0102ff39 	.word	0x0102ff39
 101dedc:	01030005 	.word	0x01030005
 101dee0:	01030259 	.word	0x01030259
 101dee4:	41e00000 	.word	0x41e00000
 101dee8:	404e0000 	.word	0x404e0000
 101deec:	408f4000 	.word	0x408f4000
 101def0:	01030565 	.word	0x01030565
 101def4:	0101de0d 	.word	0x0101de0d

0101def8 <METROLOGY_APP_bBack_up_cal_m_ib>:
bool METROLOGY_APP_bBack_up_cal_m_ib(void) {
 101def8:	b5f0      	push	{r4, r5, r6, r7, lr}
 101defa:	4e16      	ldr	r6, [pc, #88]	; (101df54 <METROLOGY_APP_bBack_up_cal_m_ib+0x5c>)
		if ( nvm_value == ((DSP_CTRL_TYPE*)(mem_reg_in))->CAL_M_IB ) {
 101defc:	4d16      	ldr	r5, [pc, #88]	; (101df58 <METROLOGY_APP_bBack_up_cal_m_ib+0x60>)
			EEPROM_writer(DSP_CTRL_CAL_M_IB_COPY_ADDR, &nvm_value, sizeof(nvm_value));
 101defe:	4f17      	ldr	r7, [pc, #92]	; (101df5c <METROLOGY_APP_bBack_up_cal_m_ib+0x64>)
bool METROLOGY_APP_bBack_up_cal_m_ib(void) {
 101df00:	b083      	sub	sp, #12
 101df02:	2401      	movs	r4, #1
		EEPROM_reader(DSP_CTRL_CAL_M_IB_ADDR, (uint8_t*)(&nvm_value), 4);
 101df04:	2204      	movs	r2, #4
 101df06:	eb0d 0102 	add.w	r1, sp, r2
 101df0a:	f44f 7061 	mov.w	r0, #900	; 0x384
 101df0e:	47b0      	blx	r6
		if ( nvm_value == ((DSP_CTRL_TYPE*)(mem_reg_in))->CAL_M_IB ) {
 101df10:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
 101df14:	9b01      	ldr	r3, [sp, #4]
 101df16:	429a      	cmp	r2, r3
 101df18:	d006      	beq.n	101df28 <METROLOGY_APP_bBack_up_cal_m_ib+0x30>
 101df1a:	3401      	adds	r4, #1
 101df1c:	b2e4      	uxtb	r4, r4
	while ( (!is_ok) && (i < 3) ) {
 101df1e:	2c04      	cmp	r4, #4
 101df20:	d1f0      	bne.n	101df04 <METROLOGY_APP_bBack_up_cal_m_ib+0xc>
 101df22:	2000      	movs	r0, #0
}
 101df24:	b003      	add	sp, #12
 101df26:	bdf0      	pop	{r4, r5, r6, r7, pc}
			EEPROM_writer(DSP_CTRL_CAL_M_IB_COPY_ADDR, &nvm_value, sizeof(nvm_value));
 101df28:	2204      	movs	r2, #4
 101df2a:	eb0d 0102 	add.w	r1, sp, r2
 101df2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 101df32:	47b8      	blx	r7
			EEPROM_reader(DSP_CTRL_CAL_M_IB_COPY_ADDR, &nvm_value, sizeof(nvm_value));
 101df34:	2204      	movs	r2, #4
			nvm_value = 0;
 101df36:	2300      	movs	r3, #0
			EEPROM_reader(DSP_CTRL_CAL_M_IB_COPY_ADDR, &nvm_value, sizeof(nvm_value));
 101df38:	eb0d 0102 	add.w	r1, sp, r2
 101df3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
			nvm_value = 0;
 101df40:	9301      	str	r3, [sp, #4]
			EEPROM_reader(DSP_CTRL_CAL_M_IB_COPY_ADDR, &nvm_value, sizeof(nvm_value));
 101df42:	47b0      	blx	r6
	while ( (!is_ok) && (i < 3) ) {
 101df44:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
 101df48:	9b01      	ldr	r3, [sp, #4]
 101df4a:	429a      	cmp	r2, r3
 101df4c:	d1e5      	bne.n	101df1a <METROLOGY_APP_bBack_up_cal_m_ib+0x22>
 101df4e:	2001      	movs	r0, #1
}
 101df50:	b003      	add	sp, #12
 101df52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 101df54:	01017511 	.word	0x01017511
 101df58:	20100000 	.word	0x20100000
 101df5c:	01017509 	.word	0x01017509

0101df60 <METROLOGY_APP_bBack_up_cal_m_vb>:
bool METROLOGY_APP_bBack_up_cal_m_vb(void) {
 101df60:	b5f0      	push	{r4, r5, r6, r7, lr}
 101df62:	4e16      	ldr	r6, [pc, #88]	; (101dfbc <METROLOGY_APP_bBack_up_cal_m_vb+0x5c>)
		if ( nvm_value == ((DSP_CTRL_TYPE*)(mem_reg_in))->CAL_M_VB ) {
 101df64:	4d16      	ldr	r5, [pc, #88]	; (101dfc0 <METROLOGY_APP_bBack_up_cal_m_vb+0x60>)
			EEPROM_writer(DSP_CTRL_CAL_M_VB_COPY_ADDR, &nvm_value, sizeof(nvm_value));
 101df66:	4f17      	ldr	r7, [pc, #92]	; (101dfc4 <METROLOGY_APP_bBack_up_cal_m_vb+0x64>)
bool METROLOGY_APP_bBack_up_cal_m_vb(void) {
 101df68:	b083      	sub	sp, #12
 101df6a:	2401      	movs	r4, #1
		EEPROM_reader(DSP_CTRL_CAL_M_VB_ADDR, (uint8_t*)(&nvm_value), 4);
 101df6c:	2204      	movs	r2, #4
 101df6e:	eb0d 0102 	add.w	r1, sp, r2
 101df72:	f44f 7062 	mov.w	r0, #904	; 0x388
 101df76:	47b0      	blx	r6
		if ( nvm_value == ((DSP_CTRL_TYPE*)(mem_reg_in))->CAL_M_VB ) {
 101df78:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
 101df7c:	9b01      	ldr	r3, [sp, #4]
 101df7e:	429a      	cmp	r2, r3
 101df80:	d006      	beq.n	101df90 <METROLOGY_APP_bBack_up_cal_m_vb+0x30>
 101df82:	3401      	adds	r4, #1
 101df84:	b2e4      	uxtb	r4, r4
	while ( (!is_ok) && (i < 3) ) {
 101df86:	2c04      	cmp	r4, #4
 101df88:	d1f0      	bne.n	101df6c <METROLOGY_APP_bBack_up_cal_m_vb+0xc>
 101df8a:	2000      	movs	r0, #0
}
 101df8c:	b003      	add	sp, #12
 101df8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			EEPROM_writer(DSP_CTRL_CAL_M_VB_COPY_ADDR, &nvm_value, sizeof(nvm_value));
 101df90:	2204      	movs	r2, #4
 101df92:	eb0d 0102 	add.w	r1, sp, r2
 101df96:	f44f 707b 	mov.w	r0, #1004	; 0x3ec
 101df9a:	47b8      	blx	r7
			EEPROM_reader(DSP_CTRL_CAL_M_VB_COPY_ADDR, &nvm_value, sizeof(nvm_value));
 101df9c:	2204      	movs	r2, #4
			nvm_value = 0;
 101df9e:	2300      	movs	r3, #0
			EEPROM_reader(DSP_CTRL_CAL_M_VB_COPY_ADDR, &nvm_value, sizeof(nvm_value));
 101dfa0:	eb0d 0102 	add.w	r1, sp, r2
 101dfa4:	f44f 707b 	mov.w	r0, #1004	; 0x3ec
			nvm_value = 0;
 101dfa8:	9301      	str	r3, [sp, #4]
			EEPROM_reader(DSP_CTRL_CAL_M_VB_COPY_ADDR, &nvm_value, sizeof(nvm_value));
 101dfaa:	47b0      	blx	r6
	while ( (!is_ok) && (i < 3) ) {
 101dfac:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
 101dfb0:	9b01      	ldr	r3, [sp, #4]
 101dfb2:	429a      	cmp	r2, r3
 101dfb4:	d1e5      	bne.n	101df82 <METROLOGY_APP_bBack_up_cal_m_vb+0x22>
 101dfb6:	2001      	movs	r0, #1
}
 101dfb8:	b003      	add	sp, #12
 101dfba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 101dfbc:	01017511 	.word	0x01017511
 101dfc0:	20100000 	.word	0x20100000
 101dfc4:	01017509 	.word	0x01017509

0101dfc8 <METROLOGY_APP_bBack_up_cal_ph_ib>:
bool METROLOGY_APP_bBack_up_cal_ph_ib(void) {
 101dfc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 101dfca:	4e16      	ldr	r6, [pc, #88]	; (101e024 <METROLOGY_APP_bBack_up_cal_ph_ib+0x5c>)
		if ( nvm_value == ((DSP_CTRL_TYPE*)(mem_reg_in))->CAL_PH_IB ) {
 101dfcc:	4d16      	ldr	r5, [pc, #88]	; (101e028 <METROLOGY_APP_bBack_up_cal_ph_ib+0x60>)
			EEPROM_writer(DSP_CTRL_CAL_PH_IB_COPY_ADDR, &nvm_value, sizeof(nvm_value));
 101dfce:	4f17      	ldr	r7, [pc, #92]	; (101e02c <METROLOGY_APP_bBack_up_cal_ph_ib+0x64>)
bool METROLOGY_APP_bBack_up_cal_ph_ib(void) {
 101dfd0:	b083      	sub	sp, #12
 101dfd2:	2401      	movs	r4, #1
		EEPROM_reader(DSP_CTRL_CAL_PH_IB_ADDR, (uint8_t*)(&nvm_value), 4);
 101dfd4:	2204      	movs	r2, #4
 101dfd6:	eb0d 0102 	add.w	r1, sp, r2
 101dfda:	f44f 7068 	mov.w	r0, #928	; 0x3a0
 101dfde:	47b0      	blx	r6
		if ( nvm_value == ((DSP_CTRL_TYPE*)(mem_reg_in))->CAL_PH_IB ) {
 101dfe0:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
 101dfe4:	9b01      	ldr	r3, [sp, #4]
 101dfe6:	429a      	cmp	r2, r3
 101dfe8:	d006      	beq.n	101dff8 <METROLOGY_APP_bBack_up_cal_ph_ib+0x30>
 101dfea:	3401      	adds	r4, #1
 101dfec:	b2e4      	uxtb	r4, r4
	while ( (!is_ok) && (i < 3) ) {
 101dfee:	2c04      	cmp	r4, #4
 101dff0:	d1f0      	bne.n	101dfd4 <METROLOGY_APP_bBack_up_cal_ph_ib+0xc>
 101dff2:	2000      	movs	r0, #0
}
 101dff4:	b003      	add	sp, #12
 101dff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			EEPROM_writer(DSP_CTRL_CAL_PH_IB_COPY_ADDR, &nvm_value, sizeof(nvm_value));
 101dff8:	2204      	movs	r2, #4
 101dffa:	eb0d 0102 	add.w	r1, sp, r2
 101dffe:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
 101e002:	47b8      	blx	r7
			EEPROM_reader(DSP_CTRL_CAL_PH_IB_COPY_ADDR, &nvm_value, sizeof(nvm_value));
 101e004:	2204      	movs	r2, #4
			nvm_value = 0;
 101e006:	2300      	movs	r3, #0
			EEPROM_reader(DSP_CTRL_CAL_PH_IB_COPY_ADDR, &nvm_value, sizeof(nvm_value));
 101e008:	eb0d 0102 	add.w	r1, sp, r2
 101e00c:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
			nvm_value = 0;
 101e010:	9301      	str	r3, [sp, #4]
			EEPROM_reader(DSP_CTRL_CAL_PH_IB_COPY_ADDR, &nvm_value, sizeof(nvm_value));
 101e012:	47b0      	blx	r6
	while ( (!is_ok) && (i < 3) ) {
 101e014:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
 101e018:	9b01      	ldr	r3, [sp, #4]
 101e01a:	429a      	cmp	r2, r3
 101e01c:	d1e5      	bne.n	101dfea <METROLOGY_APP_bBack_up_cal_ph_ib+0x22>
 101e01e:	2001      	movs	r0, #1
}
 101e020:	b003      	add	sp, #12
 101e022:	bdf0      	pop	{r4, r5, r6, r7, pc}
 101e024:	01017511 	.word	0x01017511
 101e028:	20100000 	.word	0x20100000
 101e02c:	01017509 	.word	0x01017509

0101e030 <METROLOGY_APP_bRestore_cal_m_ib_backup>:
bool METROLOGY_APP_bRestore_cal_m_ib_backup(void) {
 101e030:	b570      	push	{r4, r5, r6, lr}
 101e032:	4e09      	ldr	r6, [pc, #36]	; (101e058 <METROLOGY_APP_bRestore_cal_m_ib_backup+0x28>)
 101e034:	4d09      	ldr	r5, [pc, #36]	; (101e05c <METROLOGY_APP_bRestore_cal_m_ib_backup+0x2c>)
 101e036:	b082      	sub	sp, #8
 101e038:	2403      	movs	r4, #3
		EEPROM_reader(DSP_CTRL_CAL_M_IB_COPY_ADDR, (uint8_t*)(&nvm_value), 4);
 101e03a:	2204      	movs	r2, #4
 101e03c:	eb0d 0102 	add.w	r1, sp, r2
 101e040:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 101e044:	47b0      	blx	r6
		is_ok = METROLOGY_APP_bWrite_cal_m_ib(nvm_value);
 101e046:	9801      	ldr	r0, [sp, #4]
 101e048:	47a8      	blx	r5
 101e04a:	1e63      	subs	r3, r4, #1
	while ( (!is_ok) && (i < 3) ) {
 101e04c:	b910      	cbnz	r0, 101e054 <METROLOGY_APP_bRestore_cal_m_ib_backup+0x24>
 101e04e:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 101e052:	d1f2      	bne.n	101e03a <METROLOGY_APP_bRestore_cal_m_ib_backup+0xa>
}
 101e054:	b002      	add	sp, #8
 101e056:	bd70      	pop	{r4, r5, r6, pc}
 101e058:	01017511 	.word	0x01017511
 101e05c:	0101dcb5 	.word	0x0101dcb5

0101e060 <METROLOGY_APP_bRestore_cal_m_vb_backup>:
bool METROLOGY_APP_bRestore_cal_m_vb_backup(void) {
 101e060:	b570      	push	{r4, r5, r6, lr}
 101e062:	4e09      	ldr	r6, [pc, #36]	; (101e088 <METROLOGY_APP_bRestore_cal_m_vb_backup+0x28>)
 101e064:	4d09      	ldr	r5, [pc, #36]	; (101e08c <METROLOGY_APP_bRestore_cal_m_vb_backup+0x2c>)
 101e066:	b082      	sub	sp, #8
 101e068:	2403      	movs	r4, #3
		EEPROM_reader(DSP_CTRL_CAL_M_VB_COPY_ADDR, (uint8_t*)(&nvm_value), 4);
 101e06a:	2204      	movs	r2, #4
 101e06c:	eb0d 0102 	add.w	r1, sp, r2
 101e070:	f44f 707b 	mov.w	r0, #1004	; 0x3ec
 101e074:	47b0      	blx	r6
		is_ok = METROLOGY_APP_bWrite_cal_m_vb(nvm_value);
 101e076:	9801      	ldr	r0, [sp, #4]
 101e078:	47a8      	blx	r5
 101e07a:	1e63      	subs	r3, r4, #1
	while ( (!is_ok) && (i < 3) ) {
 101e07c:	b910      	cbnz	r0, 101e084 <METROLOGY_APP_bRestore_cal_m_vb_backup+0x24>
 101e07e:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 101e082:	d1f2      	bne.n	101e06a <METROLOGY_APP_bRestore_cal_m_vb_backup+0xa>
}
 101e084:	b002      	add	sp, #8
 101e086:	bd70      	pop	{r4, r5, r6, pc}
 101e088:	01017511 	.word	0x01017511
 101e08c:	0101dd61 	.word	0x0101dd61

0101e090 <METROLOGY_APP_bRestore_cal_ph_ib_backup>:
bool METROLOGY_APP_bRestore_cal_ph_ib_backup(void) {
 101e090:	b570      	push	{r4, r5, r6, lr}
 101e092:	4e09      	ldr	r6, [pc, #36]	; (101e0b8 <METROLOGY_APP_bRestore_cal_ph_ib_backup+0x28>)
 101e094:	4d09      	ldr	r5, [pc, #36]	; (101e0bc <METROLOGY_APP_bRestore_cal_ph_ib_backup+0x2c>)
 101e096:	b082      	sub	sp, #8
 101e098:	2403      	movs	r4, #3
		EEPROM_reader(DSP_CTRL_CAL_PH_IB_COPY_ADDR, (uint8_t*)(&nvm_value), 4);
 101e09a:	2204      	movs	r2, #4
 101e09c:	eb0d 0102 	add.w	r1, sp, r2
 101e0a0:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
 101e0a4:	47b0      	blx	r6
		is_ok = METROLOGY_APP_bWrite_cal_ph_ib(nvm_value);
 101e0a6:	9801      	ldr	r0, [sp, #4]
 101e0a8:	47a8      	blx	r5
 101e0aa:	1e63      	subs	r3, r4, #1
	while ( (!is_ok) && (i < 3) ) {
 101e0ac:	b910      	cbnz	r0, 101e0b4 <METROLOGY_APP_bRestore_cal_ph_ib_backup+0x24>
 101e0ae:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 101e0b2:	d1f2      	bne.n	101e09a <METROLOGY_APP_bRestore_cal_ph_ib_backup+0xa>
}
 101e0b4:	b002      	add	sp, #8
 101e0b6:	bd70      	pop	{r4, r5, r6, pc}
 101e0b8:	01017511 	.word	0x01017511
 101e0bc:	0101de0d 	.word	0x0101de0d

0101e0c0 <METROLOGY_APP_bWrite_cal_m_ic>:
bool METROLOGY_APP_bWrite_cal_m_ic(uint32_t adjust_value) {
 101e0c0:	b530      	push	{r4, r5, lr}
		VMetrology.DSP_CTRL.CAL_M_IC = (uint32_t)(adjust_value);
 101e0c2:	4d0f      	ldr	r5, [pc, #60]	; (101e100 <METROLOGY_APP_bWrite_cal_m_ic+0x40>)
		EEPROM_writer(DSP_CTRL_CAL_M_IC_ADDR, (uint8_t*)(&VMetrology.DSP_CTRL.CAL_M_IC), 4);
 101e0c4:	4b0f      	ldr	r3, [pc, #60]	; (101e104 <METROLOGY_APP_bWrite_cal_m_ic+0x44>)
		VMetrology.DSP_CTRL.CAL_M_IC = (uint32_t)(adjust_value);
 101e0c6:	4629      	mov	r1, r5
bool METROLOGY_APP_bWrite_cal_m_ic(uint32_t adjust_value) {
 101e0c8:	b083      	sub	sp, #12
 101e0ca:	4604      	mov	r4, r0
		VMetrology.DSP_CTRL.CAL_M_IC = (uint32_t)(adjust_value);
 101e0cc:	f841 0f8c 	str.w	r0, [r1, #140]!
		EEPROM_writer(DSP_CTRL_CAL_M_IC_ADDR, (uint8_t*)(&VMetrology.DSP_CTRL.CAL_M_IC), 4);
 101e0d0:	2204      	movs	r2, #4
 101e0d2:	f44f 7063 	mov.w	r0, #908	; 0x38c
 101e0d6:	4798      	blx	r3
		((DSP_CTRL_TYPE*)(mem_reg_in))->CAL_M_IC = VMetrology.DSP_CTRL.CAL_M_IC;
 101e0d8:	4b0b      	ldr	r3, [pc, #44]	; (101e108 <METROLOGY_APP_bWrite_cal_m_ic+0x48>)
 101e0da:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
 101e0de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		EEPROM_reader(DSP_CTRL_CAL_M_IC_ADDR, (uint8_t*)(&comp_value), 4);
 101e0e2:	2204      	movs	r2, #4
 101e0e4:	eb0d 0102 	add.w	r1, sp, r2
 101e0e8:	4b08      	ldr	r3, [pc, #32]	; (101e10c <METROLOGY_APP_bWrite_cal_m_ic+0x4c>)
 101e0ea:	f44f 7063 	mov.w	r0, #908	; 0x38c
 101e0ee:	4798      	blx	r3
		is_ok = (comp_value == adjust_value) ? true : false;
 101e0f0:	9801      	ldr	r0, [sp, #4]
}
 101e0f2:	1b00      	subs	r0, r0, r4
 101e0f4:	fab0 f080 	clz	r0, r0
 101e0f8:	0940      	lsrs	r0, r0, #5
 101e0fa:	b003      	add	sp, #12
 101e0fc:	bd30      	pop	{r4, r5, pc}
 101e0fe:	bf00      	nop
 101e100:	20016770 	.word	0x20016770
 101e104:	01017509 	.word	0x01017509
 101e108:	20100000 	.word	0x20100000
 101e10c:	01017511 	.word	0x01017511

0101e110 <METROLOGY_APP_bCalibrate_m_ic>:
bool METROLOGY_APP_bCalibrate_m_ic(uint32_t mA_in) {
 101e110:	b5d0      	push	{r4, r6, r7, lr}
	cal_m_i = (double)(mA_in * pow(2, 29));
 101e112:	4b0e      	ldr	r3, [pc, #56]	; (101e14c <METROLOGY_APP_bCalibrate_m_ic+0x3c>)
 101e114:	4c0e      	ldr	r4, [pc, #56]	; (101e150 <METROLOGY_APP_bCalibrate_m_ic+0x40>)
 101e116:	4798      	blx	r3
 101e118:	2200      	movs	r2, #0
 101e11a:	4b0e      	ldr	r3, [pc, #56]	; (101e154 <METROLOGY_APP_bCalibrate_m_ic+0x44>)
 101e11c:	47a0      	blx	r4
	cal_m_i /= METROLOGY_APP_dCalculate_Ix_rms(VMetrology.DSP_ACC.I_C, VMetrology.DSP_ST.N);
 101e11e:	4b0e      	ldr	r3, [pc, #56]	; (101e158 <METROLOGY_APP_bCalibrate_m_ic+0x48>)
 101e120:	4c0e      	ldr	r4, [pc, #56]	; (101e15c <METROLOGY_APP_bCalibrate_m_ic+0x4c>)
 101e122:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 101e126:	f503 73bc 	add.w	r3, r3, #376	; 0x178
	cal_m_i = (double)(mA_in * pow(2, 29));
 101e12a:	4606      	mov	r6, r0
 101e12c:	460f      	mov	r7, r1
	cal_m_i /= METROLOGY_APP_dCalculate_Ix_rms(VMetrology.DSP_ACC.I_C, VMetrology.DSP_ST.N);
 101e12e:	e9d3 0100 	ldrd	r0, r1, [r3]
 101e132:	47a0      	blx	r4
 101e134:	4c0a      	ldr	r4, [pc, #40]	; (101e160 <METROLOGY_APP_bCalibrate_m_ic+0x50>)
 101e136:	4602      	mov	r2, r0
 101e138:	460b      	mov	r3, r1
 101e13a:	4630      	mov	r0, r6
 101e13c:	4639      	mov	r1, r7
 101e13e:	47a0      	blx	r4
	return METROLOGY_APP_bWrite_cal_m_ic((uint32_t)cal_m_i);
 101e140:	4b08      	ldr	r3, [pc, #32]	; (101e164 <METROLOGY_APP_bCalibrate_m_ic+0x54>)
 101e142:	4798      	blx	r3
 101e144:	4b08      	ldr	r3, [pc, #32]	; (101e168 <METROLOGY_APP_bCalibrate_m_ic+0x58>)
}
 101e146:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
	return METROLOGY_APP_bWrite_cal_m_ic((uint32_t)cal_m_i);
 101e14a:	4718      	bx	r3
 101e14c:	0102ff19 	.word	0x0102ff19
 101e150:	01030005 	.word	0x01030005
 101e154:	41c00000 	.word	0x41c00000
 101e158:	20016770 	.word	0x20016770
 101e15c:	0101d541 	.word	0x0101d541
 101e160:	01030259 	.word	0x01030259
 101e164:	010305b5 	.word	0x010305b5
 101e168:	0101e0c1 	.word	0x0101e0c1

0101e16c <METROLOGY_APP_bWrite_cal_m_vc>:
bool METROLOGY_APP_bWrite_cal_m_vc(uint32_t adjust_value) {
 101e16c:	b530      	push	{r4, r5, lr}
		VMetrology.DSP_CTRL.CAL_M_VC = (uint32_t)adjust_value;
 101e16e:	4d0f      	ldr	r5, [pc, #60]	; (101e1ac <METROLOGY_APP_bWrite_cal_m_vc+0x40>)
		EEPROM_writer(DSP_CTRL_CAL_M_VC_ADDR, (uint8_t*)(&VMetrology.DSP_CTRL.CAL_M_VC), 4);
 101e170:	4b0f      	ldr	r3, [pc, #60]	; (101e1b0 <METROLOGY_APP_bWrite_cal_m_vc+0x44>)
		VMetrology.DSP_CTRL.CAL_M_VC = (uint32_t)adjust_value;
 101e172:	4629      	mov	r1, r5
bool METROLOGY_APP_bWrite_cal_m_vc(uint32_t adjust_value) {
 101e174:	b083      	sub	sp, #12
 101e176:	4604      	mov	r4, r0
		VMetrology.DSP_CTRL.CAL_M_VC = (uint32_t)adjust_value;
 101e178:	f841 0f90 	str.w	r0, [r1, #144]!
		EEPROM_writer(DSP_CTRL_CAL_M_VC_ADDR, (uint8_t*)(&VMetrology.DSP_CTRL.CAL_M_VC), 4);
 101e17c:	2204      	movs	r2, #4
 101e17e:	f44f 7064 	mov.w	r0, #912	; 0x390
 101e182:	4798      	blx	r3
		((DSP_CTRL_TYPE*)(mem_reg_in))->CAL_M_VC = VMetrology.DSP_CTRL.CAL_M_VC;
 101e184:	4b0b      	ldr	r3, [pc, #44]	; (101e1b4 <METROLOGY_APP_bWrite_cal_m_vc+0x48>)
 101e186:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 101e18a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		EEPROM_reader(DSP_CTRL_CAL_M_VC_ADDR, (uint8_t*)(&comp_value), 4);
 101e18e:	2204      	movs	r2, #4
 101e190:	eb0d 0102 	add.w	r1, sp, r2
 101e194:	4b08      	ldr	r3, [pc, #32]	; (101e1b8 <METROLOGY_APP_bWrite_cal_m_vc+0x4c>)
 101e196:	f44f 7064 	mov.w	r0, #912	; 0x390
 101e19a:	4798      	blx	r3
		is_ok = (comp_value == adjust_value) ? true : false;
 101e19c:	9801      	ldr	r0, [sp, #4]
}
 101e19e:	1b00      	subs	r0, r0, r4
 101e1a0:	fab0 f080 	clz	r0, r0
 101e1a4:	0940      	lsrs	r0, r0, #5
 101e1a6:	b003      	add	sp, #12
 101e1a8:	bd30      	pop	{r4, r5, pc}
 101e1aa:	bf00      	nop
 101e1ac:	20016770 	.word	0x20016770
 101e1b0:	01017509 	.word	0x01017509
 101e1b4:	20100000 	.word	0x20100000
 101e1b8:	01017511 	.word	0x01017511

0101e1bc <METROLOGY_APP_bCalibrate_m_vc>:
bool METROLOGY_APP_bCalibrate_m_vc(uint32_t mV_in) {
 101e1bc:	b5d0      	push	{r4, r6, r7, lr}
	cal_m_v = (double)(mV_in * pow(2, 29));
 101e1be:	4b0e      	ldr	r3, [pc, #56]	; (101e1f8 <METROLOGY_APP_bCalibrate_m_vc+0x3c>)
 101e1c0:	4c0e      	ldr	r4, [pc, #56]	; (101e1fc <METROLOGY_APP_bCalibrate_m_vc+0x40>)
 101e1c2:	4798      	blx	r3
 101e1c4:	2200      	movs	r2, #0
 101e1c6:	4b0e      	ldr	r3, [pc, #56]	; (101e200 <METROLOGY_APP_bCalibrate_m_vc+0x44>)
 101e1c8:	47a0      	blx	r4
	cal_m_v /= METROLOGY_APP_dCalculate_Vx_rms(VMetrology.DSP_ACC.V_C, VMetrology.DSP_ST.N);
 101e1ca:	4b0e      	ldr	r3, [pc, #56]	; (101e204 <METROLOGY_APP_bCalibrate_m_vc+0x48>)
 101e1cc:	4c0e      	ldr	r4, [pc, #56]	; (101e208 <METROLOGY_APP_bCalibrate_m_vc+0x4c>)
 101e1ce:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 101e1d2:	f503 7320 	add.w	r3, r3, #640	; 0x280
	cal_m_v = (double)(mV_in * pow(2, 29));
 101e1d6:	4606      	mov	r6, r0
 101e1d8:	460f      	mov	r7, r1
	cal_m_v /= METROLOGY_APP_dCalculate_Vx_rms(VMetrology.DSP_ACC.V_C, VMetrology.DSP_ST.N);
 101e1da:	e9d3 0100 	ldrd	r0, r1, [r3]
 101e1de:	47a0      	blx	r4
 101e1e0:	4c0a      	ldr	r4, [pc, #40]	; (101e20c <METROLOGY_APP_bCalibrate_m_vc+0x50>)
 101e1e2:	4602      	mov	r2, r0
 101e1e4:	460b      	mov	r3, r1
 101e1e6:	4630      	mov	r0, r6
 101e1e8:	4639      	mov	r1, r7
 101e1ea:	47a0      	blx	r4
	return METROLOGY_APP_bWrite_cal_m_vc((uint32_t)cal_m_v);
 101e1ec:	4b08      	ldr	r3, [pc, #32]	; (101e210 <METROLOGY_APP_bCalibrate_m_vc+0x54>)
 101e1ee:	4798      	blx	r3
 101e1f0:	4b08      	ldr	r3, [pc, #32]	; (101e214 <METROLOGY_APP_bCalibrate_m_vc+0x58>)
}
 101e1f2:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
	return METROLOGY_APP_bWrite_cal_m_vc((uint32_t)cal_m_v);
 101e1f6:	4718      	bx	r3
 101e1f8:	0102ff19 	.word	0x0102ff19
 101e1fc:	01030005 	.word	0x01030005
 101e200:	41c00000 	.word	0x41c00000
 101e204:	20016770 	.word	0x20016770
 101e208:	0101d5f9 	.word	0x0101d5f9
 101e20c:	01030259 	.word	0x01030259
 101e210:	010305b5 	.word	0x010305b5
 101e214:	0101e16d 	.word	0x0101e16d

0101e218 <METROLOGY_APP_bWrite_cal_ph_ic>:
bool METROLOGY_APP_bWrite_cal_ph_ic(uint32_t adjust_value) {
 101e218:	b570      	push	{r4, r5, r6, lr}
		VMetrology.DSP_CTRL.CAL_PH_IC = (uint32_t)adjust_value;
 101e21a:	4c16      	ldr	r4, [pc, #88]	; (101e274 <METROLOGY_APP_bWrite_cal_ph_ic+0x5c>)
		EEPROM_writer(DSP_CTRL_CAL_PH_IC_ADDR, (uint8_t*)(&VMetrology.DSP_CTRL.CAL_PH_IC), 4);
 101e21c:	4e16      	ldr	r6, [pc, #88]	; (101e278 <METROLOGY_APP_bWrite_cal_ph_ic+0x60>)
bool METROLOGY_APP_bWrite_cal_ph_ic(uint32_t adjust_value) {
 101e21e:	b082      	sub	sp, #8
 101e220:	4605      	mov	r5, r0
		VMetrology.DSP_CTRL.CAL_PH_VC = 0;
 101e222:	2300      	movs	r3, #0
		EEPROM_writer(DSP_CTRL_CAL_PH_IC_ADDR, (uint8_t*)(&VMetrology.DSP_CTRL.CAL_PH_IC), 4);
 101e224:	f104 01a8 	add.w	r1, r4, #168	; 0xa8
 101e228:	2204      	movs	r2, #4
 101e22a:	f44f 706a 	mov.w	r0, #936	; 0x3a8
		VMetrology.DSP_CTRL.CAL_PH_VC = 0;
 101e22e:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
		VMetrology.DSP_CTRL.CAL_PH_IC = (uint32_t)adjust_value;
 101e232:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
		EEPROM_writer(DSP_CTRL_CAL_PH_IC_ADDR, (uint8_t*)(&VMetrology.DSP_CTRL.CAL_PH_IC), 4);
 101e236:	47b0      	blx	r6
		EEPROM_writer(DSP_CTRL_CAL_PH_VC_ADDR, (uint8_t*)(&VMetrology.DSP_CTRL.CAL_PH_VC), 4);
 101e238:	f104 01ac 	add.w	r1, r4, #172	; 0xac
 101e23c:	2204      	movs	r2, #4
 101e23e:	f44f 706b 	mov.w	r0, #940	; 0x3ac
 101e242:	47b0      	blx	r6
		((DSP_CTRL_TYPE*)(mem_reg_in))->CAL_PH_IC = VMetrology.DSP_CTRL.CAL_PH_IC;
 101e244:	4b0d      	ldr	r3, [pc, #52]	; (101e27c <METROLOGY_APP_bWrite_cal_ph_ic+0x64>)
		((DSP_CTRL_TYPE*)(mem_reg_in))->CAL_PH_VC = VMetrology.DSP_CTRL.CAL_PH_VC;
 101e246:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
		((DSP_CTRL_TYPE*)(mem_reg_in))->CAL_PH_IC = VMetrology.DSP_CTRL.CAL_PH_IC;
 101e24a:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
		((DSP_CTRL_TYPE*)(mem_reg_in))->CAL_PH_VC = VMetrology.DSP_CTRL.CAL_PH_VC;
 101e24e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		EEPROM_reader(DSP_CTRL_CAL_PH_IC_ADDR, (uint8_t*)(&comp_value), 4);
 101e252:	2204      	movs	r2, #4
		((DSP_CTRL_TYPE*)(mem_reg_in))->CAL_PH_IC = VMetrology.DSP_CTRL.CAL_PH_IC;
 101e254:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
		EEPROM_reader(DSP_CTRL_CAL_PH_IC_ADDR, (uint8_t*)(&comp_value), 4);
 101e258:	f44f 706a 	mov.w	r0, #936	; 0x3a8
 101e25c:	eb0d 0102 	add.w	r1, sp, r2
 101e260:	4b07      	ldr	r3, [pc, #28]	; (101e280 <METROLOGY_APP_bWrite_cal_ph_ic+0x68>)
 101e262:	4798      	blx	r3
		is_ok = (comp_value == adjust_value) ? true : false;
 101e264:	9801      	ldr	r0, [sp, #4]
}
 101e266:	1b40      	subs	r0, r0, r5
 101e268:	fab0 f080 	clz	r0, r0
 101e26c:	0940      	lsrs	r0, r0, #5
 101e26e:	b002      	add	sp, #8
 101e270:	bd70      	pop	{r4, r5, r6, pc}
 101e272:	bf00      	nop
 101e274:	20016770 	.word	0x20016770
 101e278:	01017509 	.word	0x01017509
 101e27c:	20100000 	.word	0x20100000
 101e280:	01017511 	.word	0x01017511
 101e284:	00000000 	.word	0x00000000

0101e288 <METROLOGY_APP_bCalibrate_ph_ic>:
bool METROLOGY_APP_bCalibrate_ph_ic(uint32_t ph_error) {
 101e288:	b530      	push	{r4, r5, lr}
	cal_ph_i = (double)((int32_t)ph_error * pow(2, 31)) / (double)(100*1.7320508*CONST_Pi) * 60 / 60;
 101e28a:	4b17      	ldr	r3, [pc, #92]	; (101e2e8 <METROLOGY_APP_bCalibrate_ph_ic+0x60>)
 101e28c:	4d17      	ldr	r5, [pc, #92]	; (101e2ec <METROLOGY_APP_bCalibrate_ph_ic+0x64>)
 101e28e:	4c18      	ldr	r4, [pc, #96]	; (101e2f0 <METROLOGY_APP_bCalibrate_ph_ic+0x68>)
bool METROLOGY_APP_bCalibrate_ph_ic(uint32_t ph_error) {
 101e290:	b083      	sub	sp, #12
	cal_ph_i = (double)((int32_t)ph_error * pow(2, 31)) / (double)(100*1.7320508*CONST_Pi) * 60 / 60;
 101e292:	4798      	blx	r3
 101e294:	2200      	movs	r2, #0
 101e296:	4b17      	ldr	r3, [pc, #92]	; (101e2f4 <METROLOGY_APP_bCalibrate_ph_ic+0x6c>)
 101e298:	47a8      	blx	r5
 101e29a:	a311      	add	r3, pc, #68	; (adr r3, 101e2e0 <METROLOGY_APP_bCalibrate_ph_ic+0x58>)
 101e29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 101e2a0:	47a0      	blx	r4
 101e2a2:	2200      	movs	r2, #0
 101e2a4:	4b14      	ldr	r3, [pc, #80]	; (101e2f8 <METROLOGY_APP_bCalibrate_ph_ic+0x70>)
 101e2a6:	47a8      	blx	r5
 101e2a8:	2200      	movs	r2, #0
 101e2aa:	4b13      	ldr	r3, [pc, #76]	; (101e2f8 <METROLOGY_APP_bCalibrate_ph_ic+0x70>)
 101e2ac:	47a0      	blx	r4
 101e2ae:	e9cd 0100 	strd	r0, r1, [sp]
	cal_ph_i /= 1000;
 101e2b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 101e2b6:	2200      	movs	r2, #0
 101e2b8:	4b10      	ldr	r3, [pc, #64]	; (101e2fc <METROLOGY_APP_bCalibrate_ph_ic+0x74>)
 101e2ba:	47a0      	blx	r4
 101e2bc:	e9cd 0100 	strd	r0, r1, [sp]
	cal_ph_i *= (-1);
 101e2c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 101e2c4:	4602      	mov	r2, r0
 101e2c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 101e2ca:	e9cd 2300 	strd	r2, r3, [sp]
	return METROLOGY_APP_bWrite_cal_ph_ic((int32_t)cal_ph_i);
 101e2ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 101e2d2:	4b0b      	ldr	r3, [pc, #44]	; (101e300 <METROLOGY_APP_bCalibrate_ph_ic+0x78>)
 101e2d4:	4798      	blx	r3
 101e2d6:	4b0b      	ldr	r3, [pc, #44]	; (101e304 <METROLOGY_APP_bCalibrate_ph_ic+0x7c>)
 101e2d8:	4798      	blx	r3
}
 101e2da:	b003      	add	sp, #12
 101e2dc:	bd30      	pop	{r4, r5, pc}
 101e2de:	bf00      	nop
 101e2e0:	4e35a617 	.word	0x4e35a617
 101e2e4:	4081011e 	.word	0x4081011e
 101e2e8:	0102ff39 	.word	0x0102ff39
 101e2ec:	01030005 	.word	0x01030005
 101e2f0:	01030259 	.word	0x01030259
 101e2f4:	41e00000 	.word	0x41e00000
 101e2f8:	404e0000 	.word	0x404e0000
 101e2fc:	408f4000 	.word	0x408f4000
 101e300:	01030565 	.word	0x01030565
 101e304:	0101e219 	.word	0x0101e219

0101e308 <METROLOGY_APP_bBack_up_cal_m_ic>:
bool METROLOGY_APP_bBack_up_cal_m_ic(void) {
 101e308:	b5f0      	push	{r4, r5, r6, r7, lr}
 101e30a:	4e16      	ldr	r6, [pc, #88]	; (101e364 <METROLOGY_APP_bBack_up_cal_m_ic+0x5c>)
		if ( nvm_value == ((DSP_CTRL_TYPE*)(mem_reg_in))->CAL_M_IC ) {
 101e30c:	4d16      	ldr	r5, [pc, #88]	; (101e368 <METROLOGY_APP_bBack_up_cal_m_ic+0x60>)
			EEPROM_writer(DSP_CTRL_CAL_M_IC_COPY_ADDR, &nvm_value, sizeof(nvm_value));
 101e30e:	4f17      	ldr	r7, [pc, #92]	; (101e36c <METROLOGY_APP_bBack_up_cal_m_ic+0x64>)
bool METROLOGY_APP_bBack_up_cal_m_ic(void) {
 101e310:	b083      	sub	sp, #12
 101e312:	2401      	movs	r4, #1
		EEPROM_reader(DSP_CTRL_CAL_M_IC_ADDR, (uint8_t*)(&nvm_value), 4);
 101e314:	2204      	movs	r2, #4
 101e316:	eb0d 0102 	add.w	r1, sp, r2
 101e31a:	f44f 7063 	mov.w	r0, #908	; 0x38c
 101e31e:	47b0      	blx	r6
		if ( nvm_value == ((DSP_CTRL_TYPE*)(mem_reg_in))->CAL_M_IC ) {
 101e320:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
 101e324:	9b01      	ldr	r3, [sp, #4]
 101e326:	429a      	cmp	r2, r3
 101e328:	d006      	beq.n	101e338 <METROLOGY_APP_bBack_up_cal_m_ic+0x30>
 101e32a:	3401      	adds	r4, #1
 101e32c:	b2e4      	uxtb	r4, r4
	while ( (!is_ok) && (i < 3) ) {
 101e32e:	2c04      	cmp	r4, #4
 101e330:	d1f0      	bne.n	101e314 <METROLOGY_APP_bBack_up_cal_m_ic+0xc>
 101e332:	2000      	movs	r0, #0
}
 101e334:	b003      	add	sp, #12
 101e336:	bdf0      	pop	{r4, r5, r6, r7, pc}
			EEPROM_writer(DSP_CTRL_CAL_M_IC_COPY_ADDR, &nvm_value, sizeof(nvm_value));
 101e338:	2204      	movs	r2, #4
 101e33a:	eb0d 0102 	add.w	r1, sp, r2
 101e33e:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
 101e342:	47b8      	blx	r7
			EEPROM_reader(DSP_CTRL_CAL_M_IC_COPY_ADDR, &nvm_value, sizeof(nvm_value));
 101e344:	2204      	movs	r2, #4
			nvm_value = 0;
 101e346:	2300      	movs	r3, #0
			EEPROM_reader(DSP_CTRL_CAL_M_IC_COPY_ADDR, &nvm_value, sizeof(nvm_value));
 101e348:	eb0d 0102 	add.w	r1, sp, r2
 101e34c:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
			nvm_value = 0;
 101e350:	9301      	str	r3, [sp, #4]
			EEPROM_reader(DSP_CTRL_CAL_M_IC_COPY_ADDR, &nvm_value, sizeof(nvm_value));
 101e352:	47b0      	blx	r6
	while ( (!is_ok) && (i < 3) ) {
 101e354:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
 101e358:	9b01      	ldr	r3, [sp, #4]
 101e35a:	429a      	cmp	r2, r3
 101e35c:	d1e5      	bne.n	101e32a <METROLOGY_APP_bBack_up_cal_m_ic+0x22>
 101e35e:	2001      	movs	r0, #1
}
 101e360:	b003      	add	sp, #12
 101e362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 101e364:	01017511 	.word	0x01017511
 101e368:	20100000 	.word	0x20100000
 101e36c:	01017509 	.word	0x01017509

0101e370 <METROLOGY_APP_bBack_up_cal_m_vc>:
bool METROLOGY_APP_bBack_up_cal_m_vc(void) {
 101e370:	b5f0      	push	{r4, r5, r6, r7, lr}
 101e372:	4e16      	ldr	r6, [pc, #88]	; (101e3cc <METROLOGY_APP_bBack_up_cal_m_vc+0x5c>)
		if ( nvm_value == ((DSP_CTRL_TYPE*)(mem_reg_in))->CAL_M_VC ) {
 101e374:	4d16      	ldr	r5, [pc, #88]	; (101e3d0 <METROLOGY_APP_bBack_up_cal_m_vc+0x60>)
			EEPROM_writer(DSP_CTRL_CAL_M_VC_COPY_ADDR, &nvm_value, sizeof(nvm_value));
 101e376:	4f17      	ldr	r7, [pc, #92]	; (101e3d4 <METROLOGY_APP_bBack_up_cal_m_vc+0x64>)
bool METROLOGY_APP_bBack_up_cal_m_vc(void) {
 101e378:	b083      	sub	sp, #12
 101e37a:	2401      	movs	r4, #1
		EEPROM_reader(DSP_CTRL_CAL_M_VC_ADDR, (uint8_t*)(&nvm_value), 4);
 101e37c:	2204      	movs	r2, #4
 101e37e:	eb0d 0102 	add.w	r1, sp, r2
 101e382:	f44f 7064 	mov.w	r0, #912	; 0x390
 101e386:	47b0      	blx	r6
		if ( nvm_value == ((DSP_CTRL_TYPE*)(mem_reg_in))->CAL_M_VC ) {
 101e388:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 101e38c:	9b01      	ldr	r3, [sp, #4]
 101e38e:	429a      	cmp	r2, r3
 101e390:	d006      	beq.n	101e3a0 <METROLOGY_APP_bBack_up_cal_m_vc+0x30>
 101e392:	3401      	adds	r4, #1
 101e394:	b2e4      	uxtb	r4, r4
	while ( (!is_ok) && (i < 3) ) {
 101e396:	2c04      	cmp	r4, #4
 101e398:	d1f0      	bne.n	101e37c <METROLOGY_APP_bBack_up_cal_m_vc+0xc>
 101e39a:	2000      	movs	r0, #0
}
 101e39c:	b003      	add	sp, #12
 101e39e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			EEPROM_writer(DSP_CTRL_CAL_M_VC_COPY_ADDR, &nvm_value, sizeof(nvm_value));
 101e3a0:	2204      	movs	r2, #4
 101e3a2:	eb0d 0102 	add.w	r1, sp, r2
 101e3a6:	f44f 707e 	mov.w	r0, #1016	; 0x3f8
 101e3aa:	47b8      	blx	r7
			EEPROM_reader(DSP_CTRL_CAL_M_VC_COPY_ADDR, &nvm_value, sizeof(nvm_value));
 101e3ac:	2204      	movs	r2, #4
			nvm_value = 0;
 101e3ae:	2300      	movs	r3, #0
			EEPROM_reader(DSP_CTRL_CAL_M_VC_COPY_ADDR, &nvm_value, sizeof(nvm_value));
 101e3b0:	eb0d 0102 	add.w	r1, sp, r2
 101e3b4:	f44f 707e 	mov.w	r0, #1016	; 0x3f8
			nvm_value = 0;
 101e3b8:	9301      	str	r3, [sp, #4]
			EEPROM_reader(DSP_CTRL_CAL_M_VC_COPY_ADDR, &nvm_value, sizeof(nvm_value));
 101e3ba:	47b0      	blx	r6
	while ( (!is_ok) && (i < 3) ) {
 101e3bc:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 101e3c0:	9b01      	ldr	r3, [sp, #4]
 101e3c2:	429a      	cmp	r2, r3
 101e3c4:	d1e5      	bne.n	101e392 <METROLOGY_APP_bBack_up_cal_m_vc+0x22>
 101e3c6:	2001      	movs	r0, #1
}
 101e3c8:	b003      	add	sp, #12
 101e3ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 101e3cc:	01017511 	.word	0x01017511
 101e3d0:	20100000 	.word	0x20100000
 101e3d4:	01017509 	.word	0x01017509

0101e3d8 <METROLOGY_APP_bBack_up_cal_ph_ic>:
bool METROLOGY_APP_bBack_up_cal_ph_ic(void) {
 101e3d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 101e3da:	4e16      	ldr	r6, [pc, #88]	; (101e434 <METROLOGY_APP_bBack_up_cal_ph_ic+0x5c>)
		if ( nvm_value == ((DSP_CTRL_TYPE*)(mem_reg_in))->CAL_PH_IC ) {
 101e3dc:	4d16      	ldr	r5, [pc, #88]	; (101e438 <METROLOGY_APP_bBack_up_cal_ph_ic+0x60>)
			EEPROM_writer(DSP_CTRL_CAL_PH_IC_COPY_ADDR, &nvm_value, sizeof(nvm_value));
 101e3de:	4f17      	ldr	r7, [pc, #92]	; (101e43c <METROLOGY_APP_bBack_up_cal_ph_ic+0x64>)
bool METROLOGY_APP_bBack_up_cal_ph_ic(void) {
 101e3e0:	b083      	sub	sp, #12
 101e3e2:	2401      	movs	r4, #1
		EEPROM_reader(DSP_CTRL_CAL_PH_IC_ADDR, (uint8_t*)(&nvm_value), 4);
 101e3e4:	2204      	movs	r2, #4
 101e3e6:	eb0d 0102 	add.w	r1, sp, r2
 101e3ea:	f44f 706a 	mov.w	r0, #936	; 0x3a8
 101e3ee:	47b0      	blx	r6
		if ( nvm_value == ((DSP_CTRL_TYPE*)(mem_reg_in))->CAL_PH_IC ) {
 101e3f0:	f8d5 20a8 	ldr.w	r2, [r5, #168]	; 0xa8
 101e3f4:	9b01      	ldr	r3, [sp, #4]
 101e3f6:	429a      	cmp	r2, r3
 101e3f8:	d006      	beq.n	101e408 <METROLOGY_APP_bBack_up_cal_ph_ic+0x30>
 101e3fa:	3401      	adds	r4, #1
 101e3fc:	b2e4      	uxtb	r4, r4
	while ( (!is_ok) && (i < 3) ) {
 101e3fe:	2c04      	cmp	r4, #4
 101e400:	d1f0      	bne.n	101e3e4 <METROLOGY_APP_bBack_up_cal_ph_ic+0xc>
 101e402:	2000      	movs	r0, #0
}
 101e404:	b003      	add	sp, #12
 101e406:	bdf0      	pop	{r4, r5, r6, r7, pc}
			EEPROM_writer(DSP_CTRL_CAL_PH_IC_COPY_ADDR, &nvm_value, sizeof(nvm_value));
 101e408:	2204      	movs	r2, #4
 101e40a:	eb0d 0102 	add.w	r1, sp, r2
 101e40e:	f44f 707f 	mov.w	r0, #1020	; 0x3fc
 101e412:	47b8      	blx	r7
			EEPROM_reader(DSP_CTRL_CAL_PH_IC_COPY_ADDR, &nvm_value, sizeof(nvm_value));
 101e414:	2204      	movs	r2, #4
			nvm_value = 0;
 101e416:	2300      	movs	r3, #0
			EEPROM_reader(DSP_CTRL_CAL_PH_IC_COPY_ADDR, &nvm_value, sizeof(nvm_value));
 101e418:	eb0d 0102 	add.w	r1, sp, r2
 101e41c:	f44f 707f 	mov.w	r0, #1020	; 0x3fc
			nvm_value = 0;
 101e420:	9301      	str	r3, [sp, #4]
			EEPROM_reader(DSP_CTRL_CAL_PH_IC_COPY_ADDR, &nvm_value, sizeof(nvm_value));
 101e422:	47b0      	blx	r6
	while ( (!is_ok) && (i < 3) ) {
 101e424:	f8d5 20a8 	ldr.w	r2, [r5, #168]	; 0xa8
 101e428:	9b01      	ldr	r3, [sp, #4]
 101e42a:	429a      	cmp	r2, r3
 101e42c:	d1e5      	bne.n	101e3fa <METROLOGY_APP_bBack_up_cal_ph_ic+0x22>
 101e42e:	2001      	movs	r0, #1
}
 101e430:	b003      	add	sp, #12
 101e432:	bdf0      	pop	{r4, r5, r6, r7, pc}
 101e434:	01017511 	.word	0x01017511
 101e438:	20100000 	.word	0x20100000
 101e43c:	01017509 	.word	0x01017509

0101e440 <METROLOGY_APP_bRestore_cal_m_ic_backup>:
bool METROLOGY_APP_bRestore_cal_m_ic_backup(void) {
 101e440:	b570      	push	{r4, r5, r6, lr}
 101e442:	4e09      	ldr	r6, [pc, #36]	; (101e468 <METROLOGY_APP_bRestore_cal_m_ic_backup+0x28>)
 101e444:	4d09      	ldr	r5, [pc, #36]	; (101e46c <METROLOGY_APP_bRestore_cal_m_ic_backup+0x2c>)
 101e446:	b082      	sub	sp, #8
 101e448:	2403      	movs	r4, #3
		EEPROM_reader(DSP_CTRL_CAL_M_IC_COPY_ADDR, (uint8_t*)(&nvm_value), 4);
 101e44a:	2204      	movs	r2, #4
 101e44c:	eb0d 0102 	add.w	r1, sp, r2
 101e450:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
 101e454:	47b0      	blx	r6
		is_ok = METROLOGY_APP_bWrite_cal_m_ic(nvm_value);
 101e456:	9801      	ldr	r0, [sp, #4]
 101e458:	47a8      	blx	r5
 101e45a:	1e63      	subs	r3, r4, #1
	while ( (!is_ok) && (i < 3) ) {
 101e45c:	b910      	cbnz	r0, 101e464 <METROLOGY_APP_bRestore_cal_m_ic_backup+0x24>
 101e45e:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 101e462:	d1f2      	bne.n	101e44a <METROLOGY_APP_bRestore_cal_m_ic_backup+0xa>
}
 101e464:	b002      	add	sp, #8
 101e466:	bd70      	pop	{r4, r5, r6, pc}
 101e468:	01017511 	.word	0x01017511
 101e46c:	0101e0c1 	.word	0x0101e0c1

0101e470 <METROLOGY_APP_bRestore_cal_m_vc_backup>:
bool METROLOGY_APP_bRestore_cal_m_vc_backup(void) {
 101e470:	b570      	push	{r4, r5, r6, lr}
 101e472:	4e09      	ldr	r6, [pc, #36]	; (101e498 <METROLOGY_APP_bRestore_cal_m_vc_backup+0x28>)
 101e474:	4d09      	ldr	r5, [pc, #36]	; (101e49c <METROLOGY_APP_bRestore_cal_m_vc_backup+0x2c>)
 101e476:	b082      	sub	sp, #8
 101e478:	2403      	movs	r4, #3
		EEPROM_reader(DSP_CTRL_CAL_M_VC_COPY_ADDR, (uint8_t*)(&nvm_value), 4);
 101e47a:	2204      	movs	r2, #4
 101e47c:	eb0d 0102 	add.w	r1, sp, r2
 101e480:	f44f 707e 	mov.w	r0, #1016	; 0x3f8
 101e484:	47b0      	blx	r6
		is_ok = METROLOGY_APP_bWrite_cal_m_vc(nvm_value);
 101e486:	9801      	ldr	r0, [sp, #4]
 101e488:	47a8      	blx	r5
 101e48a:	1e63      	subs	r3, r4, #1
	while ( (!is_ok) && (i < 3) ) {
 101e48c:	b910      	cbnz	r0, 101e494 <METROLOGY_APP_bRestore_cal_m_vc_backup+0x24>
 101e48e:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 101e492:	d1f2      	bne.n	101e47a <METROLOGY_APP_bRestore_cal_m_vc_backup+0xa>
}
 101e494:	b002      	add	sp, #8
 101e496:	bd70      	pop	{r4, r5, r6, pc}
 101e498:	01017511 	.word	0x01017511
 101e49c:	0101e16d 	.word	0x0101e16d

0101e4a0 <METROLOGY_APP_bRestore_cal_ph_ic_backup>:
bool METROLOGY_APP_bRestore_cal_ph_ic_backup(void) {
 101e4a0:	b570      	push	{r4, r5, r6, lr}
 101e4a2:	4e09      	ldr	r6, [pc, #36]	; (101e4c8 <METROLOGY_APP_bRestore_cal_ph_ic_backup+0x28>)
 101e4a4:	4d09      	ldr	r5, [pc, #36]	; (101e4cc <METROLOGY_APP_bRestore_cal_ph_ic_backup+0x2c>)
 101e4a6:	b082      	sub	sp, #8
 101e4a8:	2403      	movs	r4, #3
		EEPROM_reader(DSP_CTRL_CAL_PH_IC_COPY_ADDR, (uint8_t*)(&nvm_value), 4);
 101e4aa:	2204      	movs	r2, #4
 101e4ac:	eb0d 0102 	add.w	r1, sp, r2
 101e4b0:	f44f 707f 	mov.w	r0, #1020	; 0x3fc
 101e4b4:	47b0      	blx	r6
		is_ok = METROLOGY_APP_bWrite_cal_ph_ic(nvm_value);
 101e4b6:	9801      	ldr	r0, [sp, #4]
 101e4b8:	47a8      	blx	r5
 101e4ba:	1e63      	subs	r3, r4, #1
	while ( (!is_ok) && (i < 3) ) {
 101e4bc:	b910      	cbnz	r0, 101e4c4 <METROLOGY_APP_bRestore_cal_ph_ic_backup+0x24>
 101e4be:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 101e4c2:	d1f2      	bne.n	101e4aa <METROLOGY_APP_bRestore_cal_ph_ic_backup+0xa>
}
 101e4c4:	b002      	add	sp, #8
 101e4c6:	bd70      	pop	{r4, r5, r6, pc}
 101e4c8:	01017511 	.word	0x01017511
 101e4cc:	0101e219 	.word	0x0101e219

0101e4d0 <METROLOGY_APP_vChange_kt>:
void METROLOGY_APP_vChange_kt(uint32_t kt_value) {
 101e4d0:	b570      	push	{r4, r5, r6, lr}
	VMetrology.DSP_CTRL.P_K_T = (uint32_t)(kt_value);
 101e4d2:	4c10      	ldr	r4, [pc, #64]	; (101e514 <METROLOGY_APP_vChange_kt+0x44>)
	EEPROM_writer(DSP_CTRL_P_K_T_ADDR, &VMetrology.DSP_CTRL.P_K_T, 4);
 101e4d4:	4e10      	ldr	r6, [pc, #64]	; (101e518 <METROLOGY_APP_vChange_kt+0x48>)
	( ( DSP_CTRL_TYPE * )( mem_reg_in ) )->P_K_T = VMetrology.DSP_CTRL.P_K_T;
 101e4d6:	4d11      	ldr	r5, [pc, #68]	; (101e51c <METROLOGY_APP_vChange_kt+0x4c>)
void METROLOGY_APP_vChange_kt(uint32_t kt_value) {
 101e4d8:	4603      	mov	r3, r0
	EEPROM_writer(DSP_CTRL_P_K_T_ADDR, &VMetrology.DSP_CTRL.P_K_T, 4);
 101e4da:	f104 0124 	add.w	r1, r4, #36	; 0x24
 101e4de:	2204      	movs	r2, #4
 101e4e0:	f44f 7049 	mov.w	r0, #804	; 0x324
	VMetrology.DSP_CTRL.P_K_T = (uint32_t)(kt_value);
 101e4e4:	6263      	str	r3, [r4, #36]	; 0x24
	VMetrology.DSP_CTRL.I_K_T = VMetrology.DSP_CTRL.P_K_T;
 101e4e6:	62e3      	str	r3, [r4, #44]	; 0x2c
	VMetrology.DSP_CTRL.Q_K_T = VMetrology.DSP_CTRL.P_K_T;
 101e4e8:	62a3      	str	r3, [r4, #40]	; 0x28
	EEPROM_writer(DSP_CTRL_P_K_T_ADDR, &VMetrology.DSP_CTRL.P_K_T, 4);
 101e4ea:	47b0      	blx	r6
	( ( DSP_CTRL_TYPE * )( mem_reg_in ) )->P_K_T = VMetrology.DSP_CTRL.P_K_T;
 101e4ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 101e4ee:	626b      	str	r3, [r5, #36]	; 0x24
	EEPROM_writer(DSP_CTRL_I_K_T_ADDR, &VMetrology.DSP_CTRL.I_K_T, 4);
 101e4f0:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 101e4f4:	2204      	movs	r2, #4
 101e4f6:	f44f 704b 	mov.w	r0, #812	; 0x32c
 101e4fa:	47b0      	blx	r6
	( ( DSP_CTRL_TYPE * )( mem_reg_in ) )->I_K_T = VMetrology.DSP_CTRL.I_K_T;
 101e4fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 101e4fe:	62eb      	str	r3, [r5, #44]	; 0x2c
	EEPROM_writer(DSP_CTRL_Q_K_T_ADDR, &VMetrology.DSP_CTRL.Q_K_T, 4);
 101e500:	f104 0128 	add.w	r1, r4, #40	; 0x28
 101e504:	2204      	movs	r2, #4
 101e506:	f44f 704a 	mov.w	r0, #808	; 0x328
 101e50a:	47b0      	blx	r6
	( ( DSP_CTRL_TYPE * )( mem_reg_in ) )->Q_K_T = VMetrology.DSP_CTRL.Q_K_T;
 101e50c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 101e50e:	62ab      	str	r3, [r5, #40]	; 0x28
 101e510:	bd70      	pop	{r4, r5, r6, pc}
 101e512:	bf00      	nop
 101e514:	20016770 	.word	0x20016770
 101e518:	01017509 	.word	0x01017509
 101e51c:	20100000 	.word	0x20100000

0101e520 <METROLOGY_APP_vEnable_Q_energy_pulse_mode>:
void METROLOGY_APP_vEnable_Q_energy_pulse_mode(void) {
 101e520:	b510      	push	{r4, lr}
	VMetrology.DSP_CTRL.PULSE0_CTRL.WORD = ( DSP_CTRL_PULSEx_CTRL_PCx_WIDTH(DEFAULT_PULSEx_CTRL_PCx_WIDTH)		| \
 101e522:	4c0f      	ldr	r4, [pc, #60]	; (101e560 <METROLOGY_APP_vEnable_Q_energy_pulse_mode+0x40>)
 101e524:	4a0f      	ldr	r2, [pc, #60]	; (101e564 <METROLOGY_APP_vEnable_Q_energy_pulse_mode+0x44>)
 101e526:	61a2      	str	r2, [r4, #24]
void METROLOGY_APP_vEnable_Q_energy_pulse_mode(void) {
 101e528:	b082      	sub	sp, #8
	EEPROM_reader( DSP_CTRL_PULSE0_CTRL_ADDR, &temp_compare, 4);
 101e52a:	2204      	movs	r2, #4
 101e52c:	4b0e      	ldr	r3, [pc, #56]	; (101e568 <METROLOGY_APP_vEnable_Q_energy_pulse_mode+0x48>)
 101e52e:	eb0d 0102 	add.w	r1, sp, r2
 101e532:	f44f 7046 	mov.w	r0, #792	; 0x318
 101e536:	4798      	blx	r3
	if (temp_compare != VMetrology.DSP_CTRL.PULSE0_CTRL.WORD) {
 101e538:	69a2      	ldr	r2, [r4, #24]
 101e53a:	9b01      	ldr	r3, [sp, #4]
 101e53c:	429a      	cmp	r2, r3
 101e53e:	d00d      	beq.n	101e55c <METROLOGY_APP_vEnable_Q_energy_pulse_mode+0x3c>
		delay_ms(1);
 101e540:	f641 4093 	movw	r0, #7315	; 0x1c93
 101e544:	4b09      	ldr	r3, [pc, #36]	; (101e56c <METROLOGY_APP_vEnable_Q_energy_pulse_mode+0x4c>)
 101e546:	4798      	blx	r3
		EEPROM_writer(DSP_CTRL_PULSE0_CTRL_ADDR, &VMetrology.DSP_CTRL.PULSE0_CTRL.WORD, 4);
 101e548:	2204      	movs	r2, #4
 101e54a:	4b09      	ldr	r3, [pc, #36]	; (101e570 <METROLOGY_APP_vEnable_Q_energy_pulse_mode+0x50>)
 101e54c:	f104 0118 	add.w	r1, r4, #24
 101e550:	f44f 7046 	mov.w	r0, #792	; 0x318
 101e554:	4798      	blx	r3
		( ( DSP_CTRL_TYPE * )( mem_reg_in ) )->PULSE0_CTRL.WORD = VMetrology.DSP_CTRL.PULSE0_CTRL.WORD;
 101e556:	4b07      	ldr	r3, [pc, #28]	; (101e574 <METROLOGY_APP_vEnable_Q_energy_pulse_mode+0x54>)
 101e558:	69a2      	ldr	r2, [r4, #24]
 101e55a:	619a      	str	r2, [r3, #24]
}
 101e55c:	b002      	add	sp, #8
 101e55e:	bd10      	pop	{r4, pc}
 101e560:	20016770 	.word	0x20016770
 101e564:	900207d0 	.word	0x900207d0
 101e568:	01017511 	.word	0x01017511
 101e56c:	20000001 	.word	0x20000001
 101e570:	01017509 	.word	0x01017509
 101e574:	20100000 	.word	0x20100000

0101e578 <METROLOGY_APP_vEnable_P_energy_pulse_mode>:
void METROLOGY_APP_vEnable_P_energy_pulse_mode(void) {
 101e578:	b510      	push	{r4, lr}
	VMetrology.DSP_CTRL.PULSE0_CTRL.WORD = ( DSP_CTRL_PULSEx_CTRL_PCx_WIDTH(DEFAULT_PULSEx_CTRL_PCx_WIDTH)		| \
 101e57a:	4c0f      	ldr	r4, [pc, #60]	; (101e5b8 <METROLOGY_APP_vEnable_P_energy_pulse_mode+0x40>)
 101e57c:	4a0f      	ldr	r2, [pc, #60]	; (101e5bc <METROLOGY_APP_vEnable_P_energy_pulse_mode+0x44>)
 101e57e:	61a2      	str	r2, [r4, #24]
void METROLOGY_APP_vEnable_P_energy_pulse_mode(void) {
 101e580:	b082      	sub	sp, #8
	EEPROM_reader(DSP_CTRL_PULSE0_CTRL_ADDR, &temp_compare, 4);
 101e582:	2204      	movs	r2, #4
 101e584:	4b0e      	ldr	r3, [pc, #56]	; (101e5c0 <METROLOGY_APP_vEnable_P_energy_pulse_mode+0x48>)
 101e586:	eb0d 0102 	add.w	r1, sp, r2
 101e58a:	f44f 7046 	mov.w	r0, #792	; 0x318
 101e58e:	4798      	blx	r3
	if (temp_compare != VMetrology.DSP_CTRL.PULSE0_CTRL.WORD) {
 101e590:	69a2      	ldr	r2, [r4, #24]
 101e592:	9b01      	ldr	r3, [sp, #4]
 101e594:	429a      	cmp	r2, r3
 101e596:	d00d      	beq.n	101e5b4 <METROLOGY_APP_vEnable_P_energy_pulse_mode+0x3c>
		delay_ms(1);
 101e598:	f641 4093 	movw	r0, #7315	; 0x1c93
 101e59c:	4b09      	ldr	r3, [pc, #36]	; (101e5c4 <METROLOGY_APP_vEnable_P_energy_pulse_mode+0x4c>)
 101e59e:	4798      	blx	r3
		EEPROM_writer(DSP_CTRL_PULSE0_CTRL_ADDR, &VMetrology.DSP_CTRL.PULSE0_CTRL.WORD, 4);
 101e5a0:	2204      	movs	r2, #4
 101e5a2:	4b09      	ldr	r3, [pc, #36]	; (101e5c8 <METROLOGY_APP_vEnable_P_energy_pulse_mode+0x50>)
 101e5a4:	f104 0118 	add.w	r1, r4, #24
 101e5a8:	f44f 7046 	mov.w	r0, #792	; 0x318
 101e5ac:	4798      	blx	r3
		( ( DSP_CTRL_TYPE * )( mem_reg_in ) )->PULSE0_CTRL.WORD = VMetrology.DSP_CTRL.PULSE0_CTRL.WORD;
 101e5ae:	4b07      	ldr	r3, [pc, #28]	; (101e5cc <METROLOGY_APP_vEnable_P_energy_pulse_mode+0x54>)
 101e5b0:	69a2      	ldr	r2, [r4, #24]
 101e5b2:	619a      	str	r2, [r3, #24]
}
 101e5b4:	b002      	add	sp, #8
 101e5b6:	bd10      	pop	{r4, pc}
 101e5b8:	20016770 	.word	0x20016770
 101e5bc:	900007d0 	.word	0x900007d0
 101e5c0:	01017511 	.word	0x01017511
 101e5c4:	20000001 	.word	0x20000001
 101e5c8:	01017509 	.word	0x01017509
 101e5cc:	20100000 	.word	0x20100000

0101e5d0 <METROLOGY_APP_vRefresh_inst_values>:
void METROLOGY_APP_vRefresh_inst_values(void) {
 101e5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	xMetrology = VMetrology;
 101e5d4:	4ba2      	ldr	r3, [pc, #648]	; (101e860 <METROLOGY_APP_vRefresh_inst_values+0x290>)
	xInst.S_a = sqrt( pow(xInst.P_a, 2) + pow(xInst.Q_a, 2) );
 101e5d6:	4fa3      	ldr	r7, [pc, #652]	; (101e864 <METROLOGY_APP_vRefresh_inst_values+0x294>)
	xMetrology = VMetrology;
 101e5d8:	f8d3 a0f0 	ldr.w	sl, [r3, #240]	; 0xf0
 101e5dc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 101e5e0:	e9d3 3400 	ldrd	r3, r4, [r3]
void METROLOGY_APP_vRefresh_inst_values(void) {
 101e5e4:	b0f3      	sub	sp, #460	; 0x1cc
	xMetrology = VMetrology;
 101e5e6:	e9cd 3400 	strd	r3, r4, [sp]
 101e5ea:	4b9d      	ldr	r3, [pc, #628]	; (101e860 <METROLOGY_APP_vRefresh_inst_values+0x290>)
 101e5ec:	f503 76b8 	add.w	r6, r3, #368	; 0x170
 101e5f0:	e9d6 5600 	ldrd	r5, r6, [r6]
 101e5f4:	f503 7cf8 	add.w	ip, r3, #496	; 0x1f0
 101e5f8:	f503 7e0a 	add.w	lr, r3, #552	; 0x228
 101e5fc:	f503 79f0 	add.w	r9, r3, #480	; 0x1e0
 101e600:	f503 78f4 	add.w	r8, r3, #488	; 0x1e8
 101e604:	f503 741e 	add.w	r4, r3, #632	; 0x278
 101e608:	f503 731c 	add.w	r3, r3, #624	; 0x270
 101e60c:	e9cd 5608 	strd	r5, r6, [sp, #32]
 101e610:	e953 563e 	ldrd	r5, r6, [r3, #-248]	; 0xf8
 101e614:	e9cd 5602 	strd	r5, r6, [sp, #8]
 101e618:	e9d9 5600 	ldrd	r5, r6, [r9]
 101e61c:	e9cd 5604 	strd	r5, r6, [sp, #16]
 101e620:	e953 5610 	ldrd	r5, r6, [r3, #-64]	; 0x40
 101e624:	e9cd 5610 	strd	r5, r6, [sp, #64]	; 0x40
 101e628:	e953 560e 	ldrd	r5, r6, [r3, #-56]	; 0x38
 101e62c:	e9cd 5612 	strd	r5, r6, [sp, #72]	; 0x48
 101e630:	e9d3 5600 	ldrd	r5, r6, [r3]
 101e634:	e9d4 3400 	ldrd	r3, r4, [r4]
 101e638:	e9d8 8900 	ldrd	r8, r9, [r8]
 101e63c:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
 101e640:	e9dc 3424 	ldrd	r3, r4, [ip, #144]	; 0x90
 101e644:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 101e648:	e9dc 8900 	ldrd	r8, r9, [ip]
	memset(&xInst, 0, sizeof(xInst));
 101e64c:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
	xMetrology = VMetrology;
 101e650:	e9cd 3416 	strd	r3, r4, [sp, #88]	; 0x58
	memset(&xInst, 0, sizeof(xInst));
 101e654:	f44f 72ac 	mov.w	r2, #344	; 0x158
 101e658:	2100      	movs	r1, #0
 101e65a:	4b83      	ldr	r3, [pc, #524]	; (101e868 <METROLOGY_APP_vRefresh_inst_values+0x298>)
 101e65c:	4658      	mov	r0, fp
	xMetrology = VMetrology;
 101e65e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 101e662:	e9de 8900 	ldrd	r8, r9, [lr]
	memset(&xInst, 0, sizeof(xInst));
 101e666:	4798      	blx	r3
	xInst.I_a = METROLOGY_APP_dCalculate_Ix_rms(xMetrology.DSP_ACC.I_A, xMetrology.DSP_ST.N);
 101e668:	4652      	mov	r2, sl
 101e66a:	4b80      	ldr	r3, [pc, #512]	; (101e86c <METROLOGY_APP_vRefresh_inst_values+0x29c>)
 101e66c:	e9dd 0100 	ldrd	r0, r1, [sp]
 101e670:	4798      	blx	r3
	xInst.V_a = METROLOGY_APP_dCalculate_Vx_rms(xMetrology.DSP_ACC.V_A, xMetrology.DSP_ST.N);
 101e672:	4652      	mov	r2, sl
	xInst.I_a = METROLOGY_APP_dCalculate_Ix_rms(xMetrology.DSP_ACC.I_A, xMetrology.DSP_ST.N);
 101e674:	e9cb 0124 	strd	r0, r1, [fp, #144]	; 0x90
	xInst.V_a = METROLOGY_APP_dCalculate_Vx_rms(xMetrology.DSP_ACC.V_A, xMetrology.DSP_ST.N);
 101e678:	4b7d      	ldr	r3, [pc, #500]	; (101e870 <METROLOGY_APP_vRefresh_inst_values+0x2a0>)
 101e67a:	4628      	mov	r0, r5
 101e67c:	4631      	mov	r1, r6
 101e67e:	4798      	blx	r3
	xInst.P_a = METROLOGY_APP_dCalculate_Px_rms(xMetrology.DSP_ACC.P_A, xMetrology.DSP_ST.N);
 101e680:	4652      	mov	r2, sl
	xInst.V_a = METROLOGY_APP_dCalculate_Vx_rms(xMetrology.DSP_ACC.V_A, xMetrology.DSP_ST.N);
 101e682:	e9cb 0118 	strd	r0, r1, [fp, #96]	; 0x60
	xInst.P_a = METROLOGY_APP_dCalculate_Px_rms(xMetrology.DSP_ACC.P_A, xMetrology.DSP_ST.N);
 101e686:	4b7b      	ldr	r3, [pc, #492]	; (101e874 <METROLOGY_APP_vRefresh_inst_values+0x2a4>)
 101e688:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 101e68c:	4798      	blx	r3
 101e68e:	4605      	mov	r5, r0
 101e690:	460e      	mov	r6, r1
 101e692:	462b      	mov	r3, r5
 101e694:	4634      	mov	r4, r6
 101e696:	e9cb 3402 	strd	r3, r4, [fp, #8]
	xInst.Q_a = METROLOGY_APP_dCalculate_Qx_rms(xMetrology.DSP_ACC.Q_A, xMetrology.DSP_ST.N);
 101e69a:	4652      	mov	r2, sl
 101e69c:	4640      	mov	r0, r8
 101e69e:	4649      	mov	r1, r9
 101e6a0:	4b75      	ldr	r3, [pc, #468]	; (101e878 <METROLOGY_APP_vRefresh_inst_values+0x2a8>)
 101e6a2:	4798      	blx	r3
 101e6a4:	4680      	mov	r8, r0
 101e6a6:	4689      	mov	r9, r1
	xInst.S_a = sqrt( pow(xInst.P_a, 2) + pow(xInst.Q_a, 2) );
 101e6a8:	462a      	mov	r2, r5
 101e6aa:	4633      	mov	r3, r6
 101e6ac:	e9cd 5606 	strd	r5, r6, [sp, #24]
 101e6b0:	4628      	mov	r0, r5
 101e6b2:	4631      	mov	r1, r6
	xInst.Q_a = METROLOGY_APP_dCalculate_Qx_rms(xMetrology.DSP_ACC.Q_A, xMetrology.DSP_ST.N);
 101e6b4:	4645      	mov	r5, r8
 101e6b6:	464e      	mov	r6, r9
 101e6b8:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 101e6bc:	e9cb 560a 	strd	r5, r6, [fp, #40]	; 0x28
	xInst.S_a = sqrt( pow(xInst.P_a, 2) + pow(xInst.Q_a, 2) );
 101e6c0:	47b8      	blx	r7
 101e6c2:	4642      	mov	r2, r8
 101e6c4:	4604      	mov	r4, r0
 101e6c6:	460d      	mov	r5, r1
 101e6c8:	464b      	mov	r3, r9
 101e6ca:	4640      	mov	r0, r8
 101e6cc:	4649      	mov	r1, r9
 101e6ce:	47b8      	blx	r7
 101e6d0:	4602      	mov	r2, r0
 101e6d2:	460b      	mov	r3, r1
 101e6d4:	4620      	mov	r0, r4
 101e6d6:	4629      	mov	r1, r5
 101e6d8:	4c68      	ldr	r4, [pc, #416]	; (101e87c <METROLOGY_APP_vRefresh_inst_values+0x2ac>)
	xInst.Angle_PF_a = METROLOGY_APP_dCalculate_PF_angle( (int64_t)xInst.P_a, (int64_t)xInst.Q_a );
 101e6da:	4e69      	ldr	r6, [pc, #420]	; (101e880 <METROLOGY_APP_vRefresh_inst_values+0x2b0>)
	xInst.S_a = sqrt( pow(xInst.P_a, 2) + pow(xInst.Q_a, 2) );
 101e6dc:	47a0      	blx	r4
 101e6de:	4b69      	ldr	r3, [pc, #420]	; (101e884 <METROLOGY_APP_vRefresh_inst_values+0x2b4>)
 101e6e0:	4798      	blx	r3
 101e6e2:	4604      	mov	r4, r0
 101e6e4:	460d      	mov	r5, r1
 101e6e6:	e9cb 4512 	strd	r4, r5, [fp, #72]	; 0x48
	xInst.Angle_PF_a = METROLOGY_APP_dCalculate_PF_angle( (int64_t)xInst.P_a, (int64_t)xInst.Q_a );
 101e6ea:	4640      	mov	r0, r8
 101e6ec:	4649      	mov	r1, r9
 101e6ee:	4b66      	ldr	r3, [pc, #408]	; (101e888 <METROLOGY_APP_vRefresh_inst_values+0x2b8>)
 101e6f0:	4798      	blx	r3
 101e6f2:	4b65      	ldr	r3, [pc, #404]	; (101e888 <METROLOGY_APP_vRefresh_inst_values+0x2b8>)
 101e6f4:	4680      	mov	r8, r0
 101e6f6:	4689      	mov	r9, r1
 101e6f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 101e6fc:	4798      	blx	r3
 101e6fe:	4642      	mov	r2, r8
 101e700:	464b      	mov	r3, r9
 101e702:	47b0      	blx	r6
 101e704:	4680      	mov	r8, r0
 101e706:	4689      	mov	r9, r1
	xInst.PF_a = (uint64_t)fabs((xInst.P_a / xInst.S_a) * 1000);
 101e708:	4622      	mov	r2, r4
 101e70a:	462b      	mov	r3, r5
	xInst.Angle_PF_a = METROLOGY_APP_dCalculate_PF_angle( (int64_t)xInst.P_a, (int64_t)xInst.Q_a );
 101e70c:	4644      	mov	r4, r8
 101e70e:	464d      	mov	r5, r9
 101e710:	e9cb 4538 	strd	r4, r5, [fp, #224]	; 0xe0
 101e714:	e9cd 8904 	strd	r8, r9, [sp, #16]
	xInst.PF_a = (uint64_t)fabs((xInst.P_a / xInst.S_a) * 1000);
 101e718:	4c5c      	ldr	r4, [pc, #368]	; (101e88c <METROLOGY_APP_vRefresh_inst_values+0x2bc>)
 101e71a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 101e71e:	47a0      	blx	r4
 101e720:	2200      	movs	r2, #0
 101e722:	4b5b      	ldr	r3, [pc, #364]	; (101e890 <METROLOGY_APP_vRefresh_inst_values+0x2c0>)
	if		( (xInst.Angle_PF_a >= 0)		&& (xInst.Angle_PF_a < 90000) )		{ xInst.Quadrant_a = (double)QUADRANT_1; }
 101e724:	4c5b      	ldr	r4, [pc, #364]	; (101e894 <METROLOGY_APP_vRefresh_inst_values+0x2c4>)
	xInst.PF_a = (uint64_t)fabs((xInst.P_a / xInst.S_a) * 1000);
 101e726:	47b8      	blx	r7
 101e728:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 101e72c:	4619      	mov	r1, r3
 101e72e:	4b5a      	ldr	r3, [pc, #360]	; (101e898 <METROLOGY_APP_vRefresh_inst_values+0x2c8>)
 101e730:	4798      	blx	r3
 101e732:	4b5a      	ldr	r3, [pc, #360]	; (101e89c <METROLOGY_APP_vRefresh_inst_values+0x2cc>)
 101e734:	4798      	blx	r3
 101e736:	ab5c      	add	r3, sp, #368	; 0x170
 101e738:	e9c3 0100 	strd	r0, r1, [r3]
	if		( (xInst.Angle_PF_a >= 0)		&& (xInst.Angle_PF_a < 90000) )		{ xInst.Quadrant_a = (double)QUADRANT_1; }
 101e73c:	2200      	movs	r2, #0
 101e73e:	2300      	movs	r3, #0
 101e740:	4640      	mov	r0, r8
 101e742:	4649      	mov	r1, r9
 101e744:	47a0      	blx	r4
 101e746:	4b56      	ldr	r3, [pc, #344]	; (101e8a0 <METROLOGY_APP_vRefresh_inst_values+0x2d0>)
 101e748:	2800      	cmp	r0, #0
 101e74a:	f000 8299 	beq.w	101ec80 <METROLOGY_APP_vRefresh_inst_values+0x6b0>
 101e74e:	461c      	mov	r4, r3
 101e750:	9300      	str	r3, [sp, #0]
 101e752:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 101e756:	a340      	add	r3, pc, #256	; (adr r3, 101e858 <METROLOGY_APP_vRefresh_inst_values+0x288>)
 101e758:	e9d3 2300 	ldrd	r2, r3, [r3]
 101e75c:	47a0      	blx	r4
 101e75e:	2800      	cmp	r0, #0
 101e760:	f000 828f 	beq.w	101ec82 <METROLOGY_APP_vRefresh_inst_values+0x6b2>
 101e764:	4b4f      	ldr	r3, [pc, #316]	; (101e8a4 <METROLOGY_APP_vRefresh_inst_values+0x2d4>)
 101e766:	2200      	movs	r2, #0
 101e768:	a964      	add	r1, sp, #400	; 0x190
 101e76a:	e9c1 2300 	strd	r2, r3, [r1]
	xInst.I_b = METROLOGY_APP_dCalculate_Ix_rms(xMetrology.DSP_ACC.I_B, xMetrology.DSP_ST.N);
 101e76e:	4652      	mov	r2, sl
 101e770:	4b3e      	ldr	r3, [pc, #248]	; (101e86c <METROLOGY_APP_vRefresh_inst_values+0x29c>)
 101e772:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 101e776:	4798      	blx	r3
	xInst.V_b = METROLOGY_APP_dCalculate_Vx_rms(xMetrology.DSP_ACC.V_B, xMetrology.DSP_ST.N);
 101e778:	4652      	mov	r2, sl
	xInst.I_b = METROLOGY_APP_dCalculate_Ix_rms(xMetrology.DSP_ACC.I_B, xMetrology.DSP_ST.N);
 101e77a:	e9cb 0126 	strd	r0, r1, [fp, #152]	; 0x98
	xInst.V_b = METROLOGY_APP_dCalculate_Vx_rms(xMetrology.DSP_ACC.V_B, xMetrology.DSP_ST.N);
 101e77e:	4b3c      	ldr	r3, [pc, #240]	; (101e870 <METROLOGY_APP_vRefresh_inst_values+0x2a0>)
 101e780:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 101e784:	4798      	blx	r3
 101e786:	4603      	mov	r3, r0
 101e788:	460c      	mov	r4, r1
 101e78a:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
 101e78e:	e9cb 341a 	strd	r3, r4, [fp, #104]	; 0x68
	xInst.P_b = METROLOGY_APP_dCalculate_Px_rms(xMetrology.DSP_ACC.P_B, xMetrology.DSP_ST.N);
 101e792:	4652      	mov	r2, sl
 101e794:	4b37      	ldr	r3, [pc, #220]	; (101e874 <METROLOGY_APP_vRefresh_inst_values+0x2a4>)
 101e796:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 101e79a:	4798      	blx	r3
 101e79c:	4605      	mov	r5, r0
 101e79e:	460e      	mov	r6, r1
 101e7a0:	462b      	mov	r3, r5
 101e7a2:	4634      	mov	r4, r6
 101e7a4:	e9cb 3404 	strd	r3, r4, [fp, #16]
	xInst.Q_b = METROLOGY_APP_dCalculate_Qx_rms(xMetrology.DSP_ACC.Q_B, xMetrology.DSP_ST.N);
 101e7a8:	4652      	mov	r2, sl
 101e7aa:	4b33      	ldr	r3, [pc, #204]	; (101e878 <METROLOGY_APP_vRefresh_inst_values+0x2a8>)
 101e7ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 101e7b0:	4798      	blx	r3
 101e7b2:	4680      	mov	r8, r0
 101e7b4:	4689      	mov	r9, r1
	xInst.S_b = sqrt( pow(xInst.P_b, 2) + pow(xInst.Q_b, 2) );
 101e7b6:	462a      	mov	r2, r5
 101e7b8:	4633      	mov	r3, r6
 101e7ba:	e9cd 5608 	strd	r5, r6, [sp, #32]
 101e7be:	4628      	mov	r0, r5
 101e7c0:	4631      	mov	r1, r6
	xInst.Q_b = METROLOGY_APP_dCalculate_Qx_rms(xMetrology.DSP_ACC.Q_B, xMetrology.DSP_ST.N);
 101e7c2:	4645      	mov	r5, r8
 101e7c4:	464e      	mov	r6, r9
 101e7c6:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 101e7ca:	e9cb 560c 	strd	r5, r6, [fp, #48]	; 0x30
	xInst.S_b = sqrt( pow(xInst.P_b, 2) + pow(xInst.Q_b, 2) );
 101e7ce:	47b8      	blx	r7
 101e7d0:	4642      	mov	r2, r8
 101e7d2:	4604      	mov	r4, r0
 101e7d4:	460d      	mov	r5, r1
 101e7d6:	464b      	mov	r3, r9
 101e7d8:	4640      	mov	r0, r8
 101e7da:	4649      	mov	r1, r9
 101e7dc:	47b8      	blx	r7
 101e7de:	4602      	mov	r2, r0
 101e7e0:	460b      	mov	r3, r1
 101e7e2:	4620      	mov	r0, r4
 101e7e4:	4629      	mov	r1, r5
 101e7e6:	4c25      	ldr	r4, [pc, #148]	; (101e87c <METROLOGY_APP_vRefresh_inst_values+0x2ac>)
	xInst.Angle_PF_b = METROLOGY_APP_dCalculate_PF_angle( (int64_t)xInst.P_b, (int64_t)xInst.Q_b );
 101e7e8:	4e25      	ldr	r6, [pc, #148]	; (101e880 <METROLOGY_APP_vRefresh_inst_values+0x2b0>)
	xInst.S_b = sqrt( pow(xInst.P_b, 2) + pow(xInst.Q_b, 2) );
 101e7ea:	47a0      	blx	r4
 101e7ec:	4b25      	ldr	r3, [pc, #148]	; (101e884 <METROLOGY_APP_vRefresh_inst_values+0x2b4>)
 101e7ee:	4798      	blx	r3
 101e7f0:	4604      	mov	r4, r0
 101e7f2:	460d      	mov	r5, r1
 101e7f4:	e9cb 4514 	strd	r4, r5, [fp, #80]	; 0x50
	xInst.Angle_PF_b = METROLOGY_APP_dCalculate_PF_angle( (int64_t)xInst.P_b, (int64_t)xInst.Q_b );
 101e7f8:	4640      	mov	r0, r8
 101e7fa:	4649      	mov	r1, r9
 101e7fc:	4b22      	ldr	r3, [pc, #136]	; (101e888 <METROLOGY_APP_vRefresh_inst_values+0x2b8>)
 101e7fe:	4798      	blx	r3
 101e800:	4b21      	ldr	r3, [pc, #132]	; (101e888 <METROLOGY_APP_vRefresh_inst_values+0x2b8>)
 101e802:	4680      	mov	r8, r0
 101e804:	4689      	mov	r9, r1
 101e806:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 101e80a:	4798      	blx	r3
 101e80c:	4642      	mov	r2, r8
 101e80e:	464b      	mov	r3, r9
 101e810:	47b0      	blx	r6
 101e812:	4680      	mov	r8, r0
 101e814:	4689      	mov	r9, r1
	xInst.PF_b = (uint64_t)fabs((xInst.P_b / xInst.S_b) * 1000);
 101e816:	4622      	mov	r2, r4
 101e818:	462b      	mov	r3, r5
	xInst.Angle_PF_b = METROLOGY_APP_dCalculate_PF_angle( (int64_t)xInst.P_b, (int64_t)xInst.Q_b );
 101e81a:	4644      	mov	r4, r8
 101e81c:	464d      	mov	r5, r9
 101e81e:	e9cb 453a 	strd	r4, r5, [fp, #232]	; 0xe8
 101e822:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
	xInst.PF_b = (uint64_t)fabs((xInst.P_b / xInst.S_b) * 1000);
 101e826:	4c19      	ldr	r4, [pc, #100]	; (101e88c <METROLOGY_APP_vRefresh_inst_values+0x2bc>)
 101e828:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 101e82c:	47a0      	blx	r4
 101e82e:	2200      	movs	r2, #0
 101e830:	4b17      	ldr	r3, [pc, #92]	; (101e890 <METROLOGY_APP_vRefresh_inst_values+0x2c0>)
 101e832:	47b8      	blx	r7
 101e834:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 101e838:	4619      	mov	r1, r3
 101e83a:	4b17      	ldr	r3, [pc, #92]	; (101e898 <METROLOGY_APP_vRefresh_inst_values+0x2c8>)
 101e83c:	4798      	blx	r3
 101e83e:	4b17      	ldr	r3, [pc, #92]	; (101e89c <METROLOGY_APP_vRefresh_inst_values+0x2cc>)
 101e840:	4798      	blx	r3
 101e842:	ac5e      	add	r4, sp, #376	; 0x178
 101e844:	e9c4 0100 	strd	r0, r1, [r4]
	if		( (xInst.Angle_PF_b >= 0)		&& (xInst.Angle_PF_b < 90000) )		{ xInst.Quadrant_b = (double)QUADRANT_1; }
 101e848:	2200      	movs	r2, #0
 101e84a:	2300      	movs	r3, #0
 101e84c:	4640      	mov	r0, r8
 101e84e:	4649      	mov	r1, r9
 101e850:	e02a      	b.n	101e8a8 <METROLOGY_APP_vRefresh_inst_values+0x2d8>
 101e852:	bf00      	nop
 101e854:	f3af 8000 	nop.w
 101e858:	00000000 	.word	0x00000000
 101e85c:	40f5f900 	.word	0x40f5f900
 101e860:	20016770 	.word	0x20016770
 101e864:	01030005 	.word	0x01030005
 101e868:	01030b71 	.word	0x01030b71
 101e86c:	0101d541 	.word	0x0101d541
 101e870:	0101d5f9 	.word	0x0101d5f9
 101e874:	0101cba9 	.word	0x0101cba9
 101e878:	0101cc61 	.word	0x0101cc61
 101e87c:	0102fca1 	.word	0x0102fca1
 101e880:	0101d6c1 	.word	0x0101d6c1
 101e884:	0102fa5d 	.word	0x0102fa5d
 101e888:	01030625 	.word	0x01030625
 101e88c:	01030259 	.word	0x01030259
 101e890:	408f4000 	.word	0x408f4000
 101e894:	01030511 	.word	0x01030511
 101e898:	01030659 	.word	0x01030659
 101e89c:	0102ff99 	.word	0x0102ff99
 101e8a0:	010304e9 	.word	0x010304e9
 101e8a4:	3ff00000 	.word	0x3ff00000
 101e8a8:	4ca1      	ldr	r4, [pc, #644]	; (101eb30 <METROLOGY_APP_vRefresh_inst_values+0x560>)
 101e8aa:	47a0      	blx	r4
 101e8ac:	2800      	cmp	r0, #0
 101e8ae:	f000 8236 	beq.w	101ed1e <METROLOGY_APP_vRefresh_inst_values+0x74e>
 101e8b2:	a39d      	add	r3, pc, #628	; (adr r3, 101eb28 <METROLOGY_APP_vRefresh_inst_values+0x558>)
 101e8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 101e8b8:	4640      	mov	r0, r8
 101e8ba:	4649      	mov	r1, r9
 101e8bc:	9c00      	ldr	r4, [sp, #0]
 101e8be:	47a0      	blx	r4
 101e8c0:	2800      	cmp	r0, #0
 101e8c2:	f000 822c 	beq.w	101ed1e <METROLOGY_APP_vRefresh_inst_values+0x74e>
 101e8c6:	4b9b      	ldr	r3, [pc, #620]	; (101eb34 <METROLOGY_APP_vRefresh_inst_values+0x564>)
 101e8c8:	2200      	movs	r2, #0
 101e8ca:	a966      	add	r1, sp, #408	; 0x198
 101e8cc:	e9c1 2300 	strd	r2, r3, [r1]
	xInst.I_c = METROLOGY_APP_dCalculate_Ix_rms(xMetrology.DSP_ACC.I_C, xMetrology.DSP_ST.N);
 101e8d0:	4652      	mov	r2, sl
 101e8d2:	4b99      	ldr	r3, [pc, #612]	; (101eb38 <METROLOGY_APP_vRefresh_inst_values+0x568>)
	xInst.S_c = sqrt( pow(xInst.P_c, 2) + pow(xInst.Q_c, 2) );
 101e8d4:	4e99      	ldr	r6, [pc, #612]	; (101eb3c <METROLOGY_APP_vRefresh_inst_values+0x56c>)
	xInst.I_c = METROLOGY_APP_dCalculate_Ix_rms(xMetrology.DSP_ACC.I_C, xMetrology.DSP_ST.N);
 101e8d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 101e8da:	4798      	blx	r3
	xInst.V_c = METROLOGY_APP_dCalculate_Vx_rms(xMetrology.DSP_ACC.V_C, xMetrology.DSP_ST.N);
 101e8dc:	4652      	mov	r2, sl
	xInst.I_c = METROLOGY_APP_dCalculate_Ix_rms(xMetrology.DSP_ACC.I_C, xMetrology.DSP_ST.N);
 101e8de:	e9cb 0128 	strd	r0, r1, [fp, #160]	; 0xa0
	xInst.V_c = METROLOGY_APP_dCalculate_Vx_rms(xMetrology.DSP_ACC.V_C, xMetrology.DSP_ST.N);
 101e8e2:	4b97      	ldr	r3, [pc, #604]	; (101eb40 <METROLOGY_APP_vRefresh_inst_values+0x570>)
 101e8e4:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 101e8e8:	4798      	blx	r3
 101e8ea:	4603      	mov	r3, r0
 101e8ec:	460c      	mov	r4, r1
 101e8ee:	e9cd 3416 	strd	r3, r4, [sp, #88]	; 0x58
 101e8f2:	e9cb 341c 	strd	r3, r4, [fp, #112]	; 0x70
	xInst.P_c = METROLOGY_APP_dCalculate_Px_rms(xMetrology.DSP_ACC.P_C, xMetrology.DSP_ST.N);
 101e8f6:	4652      	mov	r2, sl
 101e8f8:	4b92      	ldr	r3, [pc, #584]	; (101eb44 <METROLOGY_APP_vRefresh_inst_values+0x574>)
 101e8fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 101e8fe:	4798      	blx	r3
	xInst.Q_c = METROLOGY_APP_dCalculate_Qx_rms(xMetrology.DSP_ACC.Q_C, xMetrology.DSP_ST.N);
 101e900:	4652      	mov	r2, sl
	xInst.P_c = METROLOGY_APP_dCalculate_Px_rms(xMetrology.DSP_ACC.P_C, xMetrology.DSP_ST.N);
 101e902:	4680      	mov	r8, r0
 101e904:	4689      	mov	r9, r1
	xInst.Q_c = METROLOGY_APP_dCalculate_Qx_rms(xMetrology.DSP_ACC.Q_C, xMetrology.DSP_ST.N);
 101e906:	4b90      	ldr	r3, [pc, #576]	; (101eb48 <METROLOGY_APP_vRefresh_inst_values+0x578>)
 101e908:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
	xInst.P_c = METROLOGY_APP_dCalculate_Px_rms(xMetrology.DSP_ACC.P_C, xMetrology.DSP_ST.N);
 101e90c:	e9cb 8906 	strd	r8, r9, [fp, #24]
	xInst.Q_c = METROLOGY_APP_dCalculate_Qx_rms(xMetrology.DSP_ACC.Q_C, xMetrology.DSP_ST.N);
 101e910:	4798      	blx	r3
 101e912:	4604      	mov	r4, r0
 101e914:	460d      	mov	r5, r1
 101e916:	e9cd 4502 	strd	r4, r5, [sp, #8]
 101e91a:	e9cb 450e 	strd	r4, r5, [fp, #56]	; 0x38
	xInst.S_c = sqrt( pow(xInst.P_c, 2) + pow(xInst.Q_c, 2) );
 101e91e:	4642      	mov	r2, r8
 101e920:	464b      	mov	r3, r9
 101e922:	4640      	mov	r0, r8
 101e924:	4649      	mov	r1, r9
 101e926:	47b8      	blx	r7
 101e928:	4604      	mov	r4, r0
 101e92a:	460d      	mov	r5, r1
 101e92c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 101e930:	4602      	mov	r2, r0
 101e932:	460b      	mov	r3, r1
 101e934:	47b8      	blx	r7
 101e936:	4602      	mov	r2, r0
 101e938:	460b      	mov	r3, r1
 101e93a:	4620      	mov	r0, r4
 101e93c:	4629      	mov	r1, r5
 101e93e:	47b0      	blx	r6
 101e940:	4b82      	ldr	r3, [pc, #520]	; (101eb4c <METROLOGY_APP_vRefresh_inst_values+0x57c>)
	xInst.Angle_PF_c = METROLOGY_APP_dCalculate_PF_angle( (int64_t)xInst.P_c, (int64_t)xInst.Q_c );
 101e942:	4e83      	ldr	r6, [pc, #524]	; (101eb50 <METROLOGY_APP_vRefresh_inst_values+0x580>)
	xInst.S_c = sqrt( pow(xInst.P_c, 2) + pow(xInst.Q_c, 2) );
 101e944:	4798      	blx	r3
 101e946:	4603      	mov	r3, r0
 101e948:	460c      	mov	r4, r1
 101e94a:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
 101e94e:	e9cb 3416 	strd	r3, r4, [fp, #88]	; 0x58
	xInst.Angle_PF_c = METROLOGY_APP_dCalculate_PF_angle( (int64_t)xInst.P_c, (int64_t)xInst.Q_c );
 101e952:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 101e956:	4b7f      	ldr	r3, [pc, #508]	; (101eb54 <METROLOGY_APP_vRefresh_inst_values+0x584>)
 101e958:	4798      	blx	r3
 101e95a:	4602      	mov	r2, r0
 101e95c:	460b      	mov	r3, r1
 101e95e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 101e962:	4640      	mov	r0, r8
 101e964:	4b7b      	ldr	r3, [pc, #492]	; (101eb54 <METROLOGY_APP_vRefresh_inst_values+0x584>)
 101e966:	4649      	mov	r1, r9
 101e968:	4798      	blx	r3
 101e96a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 101e96e:	47b0      	blx	r6
 101e970:	4604      	mov	r4, r0
 101e972:	460d      	mov	r5, r1
	xInst.PF_c = (uint64_t)fabs((xInst.P_c / xInst.S_c) * 1000);
 101e974:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 101e978:	4e77      	ldr	r6, [pc, #476]	; (101eb58 <METROLOGY_APP_vRefresh_inst_values+0x588>)
	xInst.Angle_PF_c = METROLOGY_APP_dCalculate_PF_angle( (int64_t)xInst.P_c, (int64_t)xInst.Q_c );
 101e97a:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
	xInst.PF_c = (uint64_t)fabs((xInst.P_c / xInst.S_c) * 1000);
 101e97e:	4640      	mov	r0, r8
 101e980:	4649      	mov	r1, r9
	xInst.Angle_PF_c = METROLOGY_APP_dCalculate_PF_angle( (int64_t)xInst.P_c, (int64_t)xInst.Q_c );
 101e982:	e9cb 453c 	strd	r4, r5, [fp, #240]	; 0xf0
	xInst.PF_c = (uint64_t)fabs((xInst.P_c / xInst.S_c) * 1000);
 101e986:	47b0      	blx	r6
 101e988:	2200      	movs	r2, #0
 101e98a:	4b74      	ldr	r3, [pc, #464]	; (101eb5c <METROLOGY_APP_vRefresh_inst_values+0x58c>)
 101e98c:	47b8      	blx	r7
 101e98e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 101e992:	4619      	mov	r1, r3
 101e994:	4b72      	ldr	r3, [pc, #456]	; (101eb60 <METROLOGY_APP_vRefresh_inst_values+0x590>)
 101e996:	4798      	blx	r3
 101e998:	4b72      	ldr	r3, [pc, #456]	; (101eb64 <METROLOGY_APP_vRefresh_inst_values+0x594>)
 101e99a:	4798      	blx	r3
 101e99c:	ae60      	add	r6, sp, #384	; 0x180
 101e99e:	e9c6 0100 	strd	r0, r1, [r6]
	if		( (xInst.Angle_PF_c >= 0)		&& (xInst.Angle_PF_c < 90000) )		{ xInst.Quadrant_c = (double)QUADRANT_1; }
 101e9a2:	2200      	movs	r2, #0
 101e9a4:	2300      	movs	r3, #0
 101e9a6:	4620      	mov	r0, r4
 101e9a8:	4629      	mov	r1, r5
 101e9aa:	4e61      	ldr	r6, [pc, #388]	; (101eb30 <METROLOGY_APP_vRefresh_inst_values+0x560>)
 101e9ac:	47b0      	blx	r6
 101e9ae:	2800      	cmp	r0, #0
 101e9b0:	f000 8264 	beq.w	101ee7c <METROLOGY_APP_vRefresh_inst_values+0x8ac>
 101e9b4:	a35c      	add	r3, pc, #368	; (adr r3, 101eb28 <METROLOGY_APP_vRefresh_inst_values+0x558>)
 101e9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 101e9ba:	4620      	mov	r0, r4
 101e9bc:	4629      	mov	r1, r5
 101e9be:	9e00      	ldr	r6, [sp, #0]
 101e9c0:	47b0      	blx	r6
 101e9c2:	2800      	cmp	r0, #0
 101e9c4:	f000 825a 	beq.w	101ee7c <METROLOGY_APP_vRefresh_inst_values+0x8ac>
 101e9c8:	4b5a      	ldr	r3, [pc, #360]	; (101eb34 <METROLOGY_APP_vRefresh_inst_values+0x564>)
 101e9ca:	2200      	movs	r2, #0
 101e9cc:	a968      	add	r1, sp, #416	; 0x1a0
 101e9ce:	e9c1 2300 	strd	r2, r3, [r1]
	xInst.P_t = xInst.P_a + xInst.P_b + xInst.P_c;
 101e9d2:	4e5a      	ldr	r6, [pc, #360]	; (101eb3c <METROLOGY_APP_vRefresh_inst_values+0x56c>)
 101e9d4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 101e9d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 101e9dc:	47b0      	blx	r6
 101e9de:	4642      	mov	r2, r8
 101e9e0:	464b      	mov	r3, r9
 101e9e2:	47b0      	blx	r6
 101e9e4:	4680      	mov	r8, r0
 101e9e6:	4689      	mov	r9, r1
	xInst.Q_t = xInst.Q_a + xInst.Q_b + xInst.Q_c;
 101e9e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
	xInst.P_t = xInst.P_a + xInst.P_b + xInst.P_c;
 101e9ec:	e9cb 8900 	strd	r8, r9, [fp]
	xInst.Q_t = xInst.Q_a + xInst.Q_b + xInst.Q_c;
 101e9f0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 101e9f4:	47b0      	blx	r6
 101e9f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 101e9fa:	47b0      	blx	r6
 101e9fc:	4604      	mov	r4, r0
 101e9fe:	460d      	mov	r5, r1
	xInst.S_t = sqrt( pow(xInst.P_t, 2) + pow(xInst.Q_t, 2) );
 101ea00:	4642      	mov	r2, r8
 101ea02:	464b      	mov	r3, r9
	xInst.Q_t = xInst.Q_a + xInst.Q_b + xInst.Q_c;
 101ea04:	e9cb 4508 	strd	r4, r5, [fp, #32]
	xInst.S_t = sqrt( pow(xInst.P_t, 2) + pow(xInst.Q_t, 2) );
 101ea08:	4640      	mov	r0, r8
 101ea0a:	4649      	mov	r1, r9
 101ea0c:	47b8      	blx	r7
 101ea0e:	4622      	mov	r2, r4
 101ea10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 101ea14:	462b      	mov	r3, r5
 101ea16:	4620      	mov	r0, r4
 101ea18:	4629      	mov	r1, r5
 101ea1a:	47b8      	blx	r7
 101ea1c:	4602      	mov	r2, r0
 101ea1e:	460b      	mov	r3, r1
 101ea20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 101ea24:	47b0      	blx	r6
 101ea26:	4b49      	ldr	r3, [pc, #292]	; (101eb4c <METROLOGY_APP_vRefresh_inst_values+0x57c>)
	xInst.PF_t = (double)fabs((xInst.P_t / xInst.S_t) * 1000);
 101ea28:	4e4b      	ldr	r6, [pc, #300]	; (101eb58 <METROLOGY_APP_vRefresh_inst_values+0x588>)
	xInst.S_t = sqrt( pow(xInst.P_t, 2) + pow(xInst.Q_t, 2) );
 101ea2a:	4798      	blx	r3
 101ea2c:	4602      	mov	r2, r0
 101ea2e:	460b      	mov	r3, r1
 101ea30:	e9cd 2302 	strd	r2, r3, [sp, #8]
	xInst.Angle_PF_t = METROLOGY_APP_dCalculate_PF_angle( (int64_t)xInst.P_t, (int64_t)xInst.Q_t );
 101ea34:	4620      	mov	r0, r4
	xInst.S_t = sqrt( pow(xInst.P_t, 2) + pow(xInst.Q_t, 2) );
 101ea36:	461c      	mov	r4, r3
 101ea38:	4613      	mov	r3, r2
 101ea3a:	e9cb 3410 	strd	r3, r4, [fp, #64]	; 0x40
	xInst.Angle_PF_t = METROLOGY_APP_dCalculate_PF_angle( (int64_t)xInst.P_t, (int64_t)xInst.Q_t );
 101ea3e:	4629      	mov	r1, r5
 101ea40:	4b44      	ldr	r3, [pc, #272]	; (101eb54 <METROLOGY_APP_vRefresh_inst_values+0x584>)
 101ea42:	4798      	blx	r3
 101ea44:	4b43      	ldr	r3, [pc, #268]	; (101eb54 <METROLOGY_APP_vRefresh_inst_values+0x584>)
 101ea46:	4604      	mov	r4, r0
 101ea48:	460d      	mov	r5, r1
 101ea4a:	4640      	mov	r0, r8
 101ea4c:	4649      	mov	r1, r9
 101ea4e:	4798      	blx	r3
 101ea50:	4622      	mov	r2, r4
 101ea52:	462b      	mov	r3, r5
 101ea54:	4c3e      	ldr	r4, [pc, #248]	; (101eb50 <METROLOGY_APP_vRefresh_inst_values+0x580>)
 101ea56:	47a0      	blx	r4
 101ea58:	4604      	mov	r4, r0
 101ea5a:	460d      	mov	r5, r1
	xInst.PF_t = (double)fabs((xInst.P_t / xInst.S_t) * 1000);
 101ea5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 101ea60:	4640      	mov	r0, r8
 101ea62:	4649      	mov	r1, r9
	xInst.Angle_PF_t = METROLOGY_APP_dCalculate_PF_angle( (int64_t)xInst.P_t, (int64_t)xInst.Q_t );
 101ea64:	e9cb 4536 	strd	r4, r5, [fp, #216]	; 0xd8
	xInst.PF_t = (double)fabs((xInst.P_t / xInst.S_t) * 1000);
 101ea68:	47b0      	blx	r6
 101ea6a:	2200      	movs	r2, #0
 101ea6c:	4b3b      	ldr	r3, [pc, #236]	; (101eb5c <METROLOGY_APP_vRefresh_inst_values+0x58c>)
	xInst.Freq_t = (double)((VMetrology.DSP_ST.FREQ * 1000) >> FREQ_Q);
 101ea6e:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 101eb6c <METROLOGY_APP_vRefresh_inst_values+0x59c>
	xInst.PF_t = (double)fabs((xInst.P_t / xInst.S_t) * 1000);
 101ea72:	47b8      	blx	r7
	xInst.Freq_t = (double)((VMetrology.DSP_ST.FREQ * 1000) >> FREQ_Q);
 101ea74:	4b3c      	ldr	r3, [pc, #240]	; (101eb68 <METROLOGY_APP_vRefresh_inst_values+0x598>)
	xInst.PF_t = (double)fabs((xInst.P_t / xInst.S_t) * 1000);
 101ea76:	f8cb 00f8 	str.w	r0, [fp, #248]	; 0xf8
	xInst.Freq_t = (double)((VMetrology.DSP_ST.FREQ * 1000) >> FREQ_Q);
 101ea7a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 101ea7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 101ea82:	fb00 f003 	mul.w	r0, r0, r3
	xInst.PF_t = (double)fabs((xInst.P_t / xInst.S_t) * 1000);
 101ea86:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
	xInst.Freq_t = (double)((VMetrology.DSP_ST.FREQ * 1000) >> FREQ_Q);
 101ea8a:	0b00      	lsrs	r0, r0, #12
	xInst.PF_t = (double)fabs((xInst.P_t / xInst.S_t) * 1000);
 101ea8c:	f8cb 10fc 	str.w	r1, [fp, #252]	; 0xfc
	xInst.Freq_t = (double)((VMetrology.DSP_ST.FREQ * 1000) >> FREQ_Q);
 101ea90:	47c0      	blx	r8
 101ea92:	ae6a      	add	r6, sp, #424	; 0x1a8
 101ea94:	4681      	mov	r9, r0
 101ea96:	468a      	mov	sl, r1
 101ea98:	e9c6 9a00 	strd	r9, sl, [r6]
 101ea9c:	e9cd 9a02 	strd	r9, sl, [sp, #8]
	if		( (xInst.Angle_PF_t >= 0)		&& (xInst.Angle_PF_t < 90000) )		{ xInst.Quadrant_t = (double)QUADRANT_1; }
 101eaa0:	2200      	movs	r2, #0
 101eaa2:	2300      	movs	r3, #0
 101eaa4:	4620      	mov	r0, r4
 101eaa6:	4629      	mov	r1, r5
 101eaa8:	4e21      	ldr	r6, [pc, #132]	; (101eb30 <METROLOGY_APP_vRefresh_inst_values+0x560>)
 101eaaa:	47b0      	blx	r6
 101eaac:	2800      	cmp	r0, #0
 101eaae:	f000 81a3 	beq.w	101edf8 <METROLOGY_APP_vRefresh_inst_values+0x828>
 101eab2:	a31d      	add	r3, pc, #116	; (adr r3, 101eb28 <METROLOGY_APP_vRefresh_inst_values+0x558>)
 101eab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 101eab8:	4620      	mov	r0, r4
 101eaba:	4629      	mov	r1, r5
 101eabc:	9e00      	ldr	r6, [sp, #0]
 101eabe:	47b0      	blx	r6
 101eac0:	2800      	cmp	r0, #0
 101eac2:	f000 8199 	beq.w	101edf8 <METROLOGY_APP_vRefresh_inst_values+0x828>
 101eac6:	4b1b      	ldr	r3, [pc, #108]	; (101eb34 <METROLOGY_APP_vRefresh_inst_values+0x564>)
 101eac8:	2200      	movs	r2, #0
 101eaca:	a962      	add	r1, sp, #392	; 0x188
 101eacc:	e9c1 2300 	strd	r2, r3, [r1]
	volatile uint32_t ZC_N_REF = 0;
 101ead0:	2300      	movs	r3, #0
 101ead2:	9318      	str	r3, [sp, #96]	; 0x60
	volatile uint32_t ZC_N_VA = VMetrology.DSP_ST.ZC_N_VA;
 101ead4:	4a24      	ldr	r2, [pc, #144]	; (101eb68 <METROLOGY_APP_vRefresh_inst_values+0x598>)
	volatile uint32_t ZC_N_VC = VMetrology.DSP_ST.ZC_N_VC;
 101ead6:	4b24      	ldr	r3, [pc, #144]	; (101eb68 <METROLOGY_APP_vRefresh_inst_values+0x598>)
	volatile uint32_t ZC_N_VA = VMetrology.DSP_ST.ZC_N_VA;
 101ead8:	f8d2 1154 	ldr.w	r1, [r2, #340]	; 0x154
	volatile uint32_t ZC_N_VC = VMetrology.DSP_ST.ZC_N_VC;
 101eadc:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
	volatile uint32_t ZC_N_VB = VMetrology.DSP_ST.ZC_N_VB;
 101eae0:	f8d2 2158 	ldr.w	r2, [r2, #344]	; 0x158
	volatile uint32_t ZC_N_VA = VMetrology.DSP_ST.ZC_N_VA;
 101eae4:	9119      	str	r1, [sp, #100]	; 0x64
	volatile uint32_t ZC_N_VB = VMetrology.DSP_ST.ZC_N_VB;
 101eae6:	921a      	str	r2, [sp, #104]	; 0x68
	volatile uint32_t ZC_N_VC = VMetrology.DSP_ST.ZC_N_VC;
 101eae8:	931b      	str	r3, [sp, #108]	; 0x6c
	ZC_N_REF = ZC_N_VA;
 101eaea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 101eaec:	9318      	str	r3, [sp, #96]	; 0x60
	ZC_N_REF = (ZC_N_VA < ZC_N_REF) ? ZC_N_VA : ZC_N_REF;
 101eaee:	9a19      	ldr	r2, [sp, #100]	; 0x64
 101eaf0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 101eaf2:	429a      	cmp	r2, r3
 101eaf4:	bf34      	ite	cc
 101eaf6:	9b19      	ldrcc	r3, [sp, #100]	; 0x64
 101eaf8:	9b18      	ldrcs	r3, [sp, #96]	; 0x60
 101eafa:	9318      	str	r3, [sp, #96]	; 0x60
	ZC_N_REF = (ZC_N_VB < ZC_N_REF) ? ZC_N_VB : ZC_N_REF;
 101eafc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 101eafe:	9b18      	ldr	r3, [sp, #96]	; 0x60
 101eb00:	429a      	cmp	r2, r3
 101eb02:	bf34      	ite	cc
 101eb04:	9b1a      	ldrcc	r3, [sp, #104]	; 0x68
 101eb06:	9b18      	ldrcs	r3, [sp, #96]	; 0x60
 101eb08:	9318      	str	r3, [sp, #96]	; 0x60
	ZC_N_REF = (ZC_N_VC < ZC_N_REF) ? ZC_N_VC : ZC_N_REF;
 101eb0a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 101eb0c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 101eb0e:	429a      	cmp	r2, r3
 101eb10:	bf34      	ite	cc
 101eb12:	9b1b      	ldrcc	r3, [sp, #108]	; 0x6c
 101eb14:	9b18      	ldrcs	r3, [sp, #96]	; 0x60
 101eb16:	9318      	str	r3, [sp, #96]	; 0x60
	xInst.Angle_V_a = (double)(ZC_N_VA - ZC_N_REF ) * 360 * xInst.Freq_t / (double)(VMetrology.DSP_ST.N * 4096);
 101eb18:	4b13      	ldr	r3, [pc, #76]	; (101eb68 <METROLOGY_APP_vRefresh_inst_values+0x598>)
 101eb1a:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 101eb1e:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
 101eb22:	9e18      	ldr	r6, [sp, #96]	; 0x60
 101eb24:	0300      	lsls	r0, r0, #12
 101eb26:	e023      	b.n	101eb70 <METROLOGY_APP_vRefresh_inst_values+0x5a0>
 101eb28:	00000000 	.word	0x00000000
 101eb2c:	40f5f900 	.word	0x40f5f900
 101eb30:	01030511 	.word	0x01030511
 101eb34:	3ff00000 	.word	0x3ff00000
 101eb38:	0101d541 	.word	0x0101d541
 101eb3c:	0102fca1 	.word	0x0102fca1
 101eb40:	0101d5f9 	.word	0x0101d5f9
 101eb44:	0101cba9 	.word	0x0101cba9
 101eb48:	0101cc61 	.word	0x0101cc61
 101eb4c:	0102fa5d 	.word	0x0102fa5d
 101eb50:	0101d6c1 	.word	0x0101d6c1
 101eb54:	01030625 	.word	0x01030625
 101eb58:	01030259 	.word	0x01030259
 101eb5c:	408f4000 	.word	0x408f4000
 101eb60:	01030659 	.word	0x01030659
 101eb64:	0102ff99 	.word	0x0102ff99
 101eb68:	20016770 	.word	0x20016770
 101eb6c:	0102ff19 	.word	0x0102ff19
 101eb70:	47c0      	blx	r8
 101eb72:	4604      	mov	r4, r0
 101eb74:	ebaa 0006 	sub.w	r0, sl, r6
 101eb78:	460d      	mov	r5, r1
 101eb7a:	47c0      	blx	r8
 101eb7c:	2200      	movs	r2, #0
 101eb7e:	4b94      	ldr	r3, [pc, #592]	; (101edd0 <METROLOGY_APP_vRefresh_inst_values+0x800>)
 101eb80:	4e94      	ldr	r6, [pc, #592]	; (101edd4 <METROLOGY_APP_vRefresh_inst_values+0x804>)
 101eb82:	47b8      	blx	r7
 101eb84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 101eb88:	47b8      	blx	r7
 101eb8a:	4622      	mov	r2, r4
 101eb8c:	462b      	mov	r3, r5
 101eb8e:	47b0      	blx	r6
 101eb90:	4681      	mov	r9, r0
	xInst.Angle_V_b = (double)(ZC_N_VB - ZC_N_REF ) * 360 * xInst.Freq_t / (double)(VMetrology.DSP_ST.N * 4096);
 101eb92:	981a      	ldr	r0, [sp, #104]	; 0x68
 101eb94:	9b18      	ldr	r3, [sp, #96]	; 0x60
	xInst.Angle_V_a = (double)(ZC_N_VA - ZC_N_REF ) * 360 * xInst.Freq_t / (double)(VMetrology.DSP_ST.N * 4096);
 101eb96:	468a      	mov	sl, r1
	xInst.Angle_V_b = (double)(ZC_N_VB - ZC_N_REF ) * 360 * xInst.Freq_t / (double)(VMetrology.DSP_ST.N * 4096);
 101eb98:	1ac0      	subs	r0, r0, r3
	xInst.Angle_V_a = (double)(ZC_N_VA - ZC_N_REF ) * 360 * xInst.Freq_t / (double)(VMetrology.DSP_ST.N * 4096);
 101eb9a:	e9cb 9a2a 	strd	r9, sl, [fp, #168]	; 0xa8
	xInst.Angle_V_b = (double)(ZC_N_VB - ZC_N_REF ) * 360 * xInst.Freq_t / (double)(VMetrology.DSP_ST.N * 4096);
 101eb9e:	47c0      	blx	r8
 101eba0:	2200      	movs	r2, #0
 101eba2:	4b8b      	ldr	r3, [pc, #556]	; (101edd0 <METROLOGY_APP_vRefresh_inst_values+0x800>)
 101eba4:	47b8      	blx	r7
 101eba6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 101ebaa:	47b8      	blx	r7
 101ebac:	4622      	mov	r2, r4
 101ebae:	462b      	mov	r3, r5
 101ebb0:	47b0      	blx	r6
 101ebb2:	460a      	mov	r2, r1
 101ebb4:	4601      	mov	r1, r0
	xInst.Angle_V_c = (double)(ZC_N_VC - ZC_N_REF ) * 360 * xInst.Freq_t / (double)(VMetrology.DSP_ST.N * 4096);
 101ebb6:	981b      	ldr	r0, [sp, #108]	; 0x6c
 101ebb8:	9b18      	ldr	r3, [sp, #96]	; 0x60
	xInst.Angle_V_b = (double)(ZC_N_VB - ZC_N_REF ) * 360 * xInst.Freq_t / (double)(VMetrology.DSP_ST.N * 4096);
 101ebba:	e9cd 1206 	strd	r1, r2, [sp, #24]
	xInst.Angle_V_c = (double)(ZC_N_VC - ZC_N_REF ) * 360 * xInst.Freq_t / (double)(VMetrology.DSP_ST.N * 4096);
 101ebbe:	1ac0      	subs	r0, r0, r3
	xInst.Angle_V_b = (double)(ZC_N_VB - ZC_N_REF ) * 360 * xInst.Freq_t / (double)(VMetrology.DSP_ST.N * 4096);
 101ebc0:	e9cb 122c 	strd	r1, r2, [fp, #176]	; 0xb0
	xInst.Angle_V_c = (double)(ZC_N_VC - ZC_N_REF ) * 360 * xInst.Freq_t / (double)(VMetrology.DSP_ST.N * 4096);
 101ebc4:	47c0      	blx	r8
 101ebc6:	2200      	movs	r2, #0
 101ebc8:	4b81      	ldr	r3, [pc, #516]	; (101edd0 <METROLOGY_APP_vRefresh_inst_values+0x800>)
	if (xInst.Angle_V_a != 0) {
 101ebca:	f8df 8224 	ldr.w	r8, [pc, #548]	; 101edf0 <METROLOGY_APP_vRefresh_inst_values+0x820>
	xInst.Angle_V_c = (double)(ZC_N_VC - ZC_N_REF ) * 360 * xInst.Freq_t / (double)(VMetrology.DSP_ST.N * 4096);
 101ebce:	47b8      	blx	r7
 101ebd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 101ebd4:	47b8      	blx	r7
 101ebd6:	4622      	mov	r2, r4
 101ebd8:	462b      	mov	r3, r5
 101ebda:	47b0      	blx	r6
 101ebdc:	4604      	mov	r4, r0
 101ebde:	460d      	mov	r5, r1
	if (xInst.Angle_V_a != 0) {
 101ebe0:	4648      	mov	r0, r9
 101ebe2:	4651      	mov	r1, sl
 101ebe4:	2200      	movs	r2, #0
 101ebe6:	2300      	movs	r3, #0
	xInst.Angle_V_c = (double)(ZC_N_VC - ZC_N_REF ) * 360 * xInst.Freq_t / (double)(VMetrology.DSP_ST.N * 4096);
 101ebe8:	e9cb 452e 	strd	r4, r5, [fp, #184]	; 0xb8
 101ebec:	e9cd 4502 	strd	r4, r5, [sp, #8]
	xInst.Angle_V_b = (double)(ZC_N_VB - ZC_N_REF ) * 360 * xInst.Freq_t / (double)(VMetrology.DSP_ST.N * 4096);
 101ebf0:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
	if (xInst.Angle_V_a != 0) {
 101ebf4:	47c0      	blx	r8
 101ebf6:	2800      	cmp	r0, #0
 101ebf8:	f000 8188 	beq.w	101ef0c <METROLOGY_APP_vRefresh_inst_values+0x93c>
 101ebfc:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 101edf4 <METROLOGY_APP_vRefresh_inst_values+0x824>
	xInst.Angle_I_a = xInst.Angle_V_a - xInst.Angle_PF_a;
 101ec00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 101ec04:	4648      	mov	r0, r9
 101ec06:	4651      	mov	r1, sl
 101ec08:	47c0      	blx	r8
	xInst.Angle_I_a = (xInst.Angle_I_a < 0) ? (360000 + xInst.Angle_I_a) : xInst.Angle_I_a;
 101ec0a:	2200      	movs	r2, #0
 101ec0c:	2300      	movs	r3, #0
 101ec0e:	9e00      	ldr	r6, [sp, #0]
	xInst.Angle_I_a = xInst.Angle_V_a - xInst.Angle_PF_a;
 101ec10:	4681      	mov	r9, r0
 101ec12:	468a      	mov	sl, r1
	xInst.Angle_I_a = (xInst.Angle_I_a < 0) ? (360000 + xInst.Angle_I_a) : xInst.Angle_I_a;
 101ec14:	47b0      	blx	r6
 101ec16:	2800      	cmp	r0, #0
 101ec18:	f040 81b0 	bne.w	101ef7c <METROLOGY_APP_vRefresh_inst_values+0x9ac>
	xInst.Angle_I_b = xInst.Angle_V_b - xInst.Angle_PF_b;
 101ec1c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	xInst.Angle_I_a = (xInst.Angle_I_a < 0) ? (360000 + xInst.Angle_I_a) : xInst.Angle_I_a;
 101ec20:	e9cb 9a30 	strd	r9, sl, [fp, #192]	; 0xc0
	xInst.Angle_I_b = xInst.Angle_V_b - xInst.Angle_PF_b;
 101ec24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 101ec28:	47c0      	blx	r8
	xInst.Angle_I_b = (xInst.Angle_I_b < 0) ? (360000 + xInst.Angle_I_b) : xInst.Angle_I_b;
 101ec2a:	2200      	movs	r2, #0
 101ec2c:	2300      	movs	r3, #0
 101ec2e:	9e00      	ldr	r6, [sp, #0]
	xInst.Angle_I_b = xInst.Angle_V_b - xInst.Angle_PF_b;
 101ec30:	4681      	mov	r9, r0
 101ec32:	468a      	mov	sl, r1
	xInst.Angle_I_b = (xInst.Angle_I_b < 0) ? (360000 + xInst.Angle_I_b) : xInst.Angle_I_b;
 101ec34:	47b0      	blx	r6
 101ec36:	2800      	cmp	r0, #0
 101ec38:	f040 81aa 	bne.w	101ef90 <METROLOGY_APP_vRefresh_inst_values+0x9c0>
	xInst.Angle_I_c = xInst.Angle_V_c - xInst.Angle_PF_c;
 101ec3c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 101ec40:	4620      	mov	r0, r4
 101ec42:	4629      	mov	r1, r5
	xInst.Angle_I_b = (xInst.Angle_I_b < 0) ? (360000 + xInst.Angle_I_b) : xInst.Angle_I_b;
 101ec44:	e9cb 9a32 	strd	r9, sl, [fp, #200]	; 0xc8
	xInst.Angle_I_c = xInst.Angle_V_c - xInst.Angle_PF_c;
 101ec48:	47c0      	blx	r8
	xInst.Angle_I_c = (xInst.Angle_I_c < 0) ? (360000 + xInst.Angle_I_c) : xInst.Angle_I_c;
 101ec4a:	2200      	movs	r2, #0
 101ec4c:	2300      	movs	r3, #0
 101ec4e:	9e00      	ldr	r6, [sp, #0]
	xInst.Angle_I_c = xInst.Angle_V_c - xInst.Angle_PF_c;
 101ec50:	4604      	mov	r4, r0
 101ec52:	460d      	mov	r5, r1
	xInst.Angle_I_c = (xInst.Angle_I_c < 0) ? (360000 + xInst.Angle_I_c) : xInst.Angle_I_c;
 101ec54:	47b0      	blx	r6
 101ec56:	b140      	cbz	r0, 101ec6a <METROLOGY_APP_vRefresh_inst_values+0x69a>
 101ec58:	4620      	mov	r0, r4
 101ec5a:	4629      	mov	r1, r5
 101ec5c:	4c5e      	ldr	r4, [pc, #376]	; (101edd8 <METROLOGY_APP_vRefresh_inst_values+0x808>)
 101ec5e:	a354      	add	r3, pc, #336	; (adr r3, 101edb0 <METROLOGY_APP_vRefresh_inst_values+0x7e0>)
 101ec60:	e9d3 2300 	ldrd	r2, r3, [r3]
 101ec64:	47a0      	blx	r4
 101ec66:	4604      	mov	r4, r0
 101ec68:	460d      	mov	r5, r1
	xInstantaneous = xInst;
 101ec6a:	4659      	mov	r1, fp
 101ec6c:	f44f 72ac 	mov.w	r2, #344	; 0x158
 101ec70:	4b5a      	ldr	r3, [pc, #360]	; (101eddc <METROLOGY_APP_vRefresh_inst_values+0x80c>)
 101ec72:	485b      	ldr	r0, [pc, #364]	; (101ede0 <METROLOGY_APP_vRefresh_inst_values+0x810>)
	xInst.Angle_I_c = (xInst.Angle_I_c < 0) ? (360000 + xInst.Angle_I_c) : xInst.Angle_I_c;
 101ec74:	e9cb 4534 	strd	r4, r5, [fp, #208]	; 0xd0
	xInstantaneous = xInst;
 101ec78:	4798      	blx	r3
}
 101ec7a:	b073      	add	sp, #460	; 0x1cc
 101ec7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 101ec80:	9300      	str	r3, [sp, #0]
	else if ( (xInst.Angle_PF_a >= 90000)	&& (xInst.Angle_PF_a < 180000) )	{ xInst.Quadrant_a = (double)QUADRANT_2; }
 101ec82:	e9dd 5604 	ldrd	r5, r6, [sp, #16]
 101ec86:	a34c      	add	r3, pc, #304	; (adr r3, 101edb8 <METROLOGY_APP_vRefresh_inst_values+0x7e8>)
 101ec88:	e9d3 2300 	ldrd	r2, r3, [r3]
 101ec8c:	4628      	mov	r0, r5
 101ec8e:	4631      	mov	r1, r6
 101ec90:	4c54      	ldr	r4, [pc, #336]	; (101ede4 <METROLOGY_APP_vRefresh_inst_values+0x814>)
 101ec92:	47a0      	blx	r4
 101ec94:	b9b8      	cbnz	r0, 101ecc6 <METROLOGY_APP_vRefresh_inst_values+0x6f6>
	else if ( (xInst.Angle_PF_a >= 180000)	&& (xInst.Angle_PF_a < 270000) )	{ xInst.Quadrant_a = (double)QUADRANT_3; }
 101ec96:	e9dd 5604 	ldrd	r5, r6, [sp, #16]
 101ec9a:	a349      	add	r3, pc, #292	; (adr r3, 101edc0 <METROLOGY_APP_vRefresh_inst_values+0x7f0>)
 101ec9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 101eca0:	4628      	mov	r0, r5
 101eca2:	4631      	mov	r1, r6
 101eca4:	4c4f      	ldr	r4, [pc, #316]	; (101ede4 <METROLOGY_APP_vRefresh_inst_values+0x814>)
 101eca6:	47a0      	blx	r4
 101eca8:	b1e8      	cbz	r0, 101ece6 <METROLOGY_APP_vRefresh_inst_values+0x716>
 101ecaa:	a347      	add	r3, pc, #284	; (adr r3, 101edc8 <METROLOGY_APP_vRefresh_inst_values+0x7f8>)
 101ecac:	e9d3 2300 	ldrd	r2, r3, [r3]
 101ecb0:	4628      	mov	r0, r5
 101ecb2:	4631      	mov	r1, r6
 101ecb4:	9c00      	ldr	r4, [sp, #0]
 101ecb6:	47a0      	blx	r4
 101ecb8:	b1a8      	cbz	r0, 101ece6 <METROLOGY_APP_vRefresh_inst_values+0x716>
 101ecba:	4b4b      	ldr	r3, [pc, #300]	; (101ede8 <METROLOGY_APP_vRefresh_inst_values+0x818>)
 101ecbc:	2200      	movs	r2, #0
 101ecbe:	a964      	add	r1, sp, #400	; 0x190
 101ecc0:	e9c1 2300 	strd	r2, r3, [r1]
 101ecc4:	e553      	b.n	101e76e <METROLOGY_APP_vRefresh_inst_values+0x19e>
	else if ( (xInst.Angle_PF_a >= 90000)	&& (xInst.Angle_PF_a < 180000) )	{ xInst.Quadrant_a = (double)QUADRANT_2; }
 101ecc6:	a33e      	add	r3, pc, #248	; (adr r3, 101edc0 <METROLOGY_APP_vRefresh_inst_values+0x7f0>)
 101ecc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 101eccc:	4628      	mov	r0, r5
 101ecce:	4631      	mov	r1, r6
 101ecd0:	9c00      	ldr	r4, [sp, #0]
 101ecd2:	47a0      	blx	r4
 101ecd4:	2800      	cmp	r0, #0
 101ecd6:	d0de      	beq.n	101ec96 <METROLOGY_APP_vRefresh_inst_values+0x6c6>
 101ecd8:	2200      	movs	r2, #0
 101ecda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 101ecde:	a964      	add	r1, sp, #400	; 0x190
 101ece0:	e9c1 2300 	strd	r2, r3, [r1]
 101ece4:	e543      	b.n	101e76e <METROLOGY_APP_vRefresh_inst_values+0x19e>
	else if ( (xInst.Angle_PF_a >= 270000)	&& (xInst.Angle_PF_a < 360000) )	{ xInst.Quadrant_a = (double)QUADRANT_4; }
 101ece6:	e9dd 5604 	ldrd	r5, r6, [sp, #16]
 101ecea:	a337      	add	r3, pc, #220	; (adr r3, 101edc8 <METROLOGY_APP_vRefresh_inst_values+0x7f8>)
 101ecec:	e9d3 2300 	ldrd	r2, r3, [r3]
 101ecf0:	4628      	mov	r0, r5
 101ecf2:	4631      	mov	r1, r6
 101ecf4:	4c3b      	ldr	r4, [pc, #236]	; (101ede4 <METROLOGY_APP_vRefresh_inst_values+0x814>)
 101ecf6:	47a0      	blx	r4
 101ecf8:	2800      	cmp	r0, #0
 101ecfa:	f43f ad38 	beq.w	101e76e <METROLOGY_APP_vRefresh_inst_values+0x19e>
 101ecfe:	a32c      	add	r3, pc, #176	; (adr r3, 101edb0 <METROLOGY_APP_vRefresh_inst_values+0x7e0>)
 101ed00:	e9d3 2300 	ldrd	r2, r3, [r3]
 101ed04:	4628      	mov	r0, r5
 101ed06:	4631      	mov	r1, r6
 101ed08:	9c00      	ldr	r4, [sp, #0]
 101ed0a:	47a0      	blx	r4
 101ed0c:	2800      	cmp	r0, #0
 101ed0e:	f43f ad2e 	beq.w	101e76e <METROLOGY_APP_vRefresh_inst_values+0x19e>
 101ed12:	4b36      	ldr	r3, [pc, #216]	; (101edec <METROLOGY_APP_vRefresh_inst_values+0x81c>)
 101ed14:	2200      	movs	r2, #0
 101ed16:	a964      	add	r1, sp, #400	; 0x190
 101ed18:	e9c1 2300 	strd	r2, r3, [r1]
 101ed1c:	e527      	b.n	101e76e <METROLOGY_APP_vRefresh_inst_values+0x19e>
	else if ( (xInst.Angle_PF_b >= 90000)	&& (xInst.Angle_PF_b < 180000) )	{ xInst.Quadrant_b = (double)QUADRANT_2; }
 101ed1e:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 101ed22:	a325      	add	r3, pc, #148	; (adr r3, 101edb8 <METROLOGY_APP_vRefresh_inst_values+0x7e8>)
 101ed24:	e9d3 2300 	ldrd	r2, r3, [r3]
 101ed28:	4628      	mov	r0, r5
 101ed2a:	4631      	mov	r1, r6
 101ed2c:	4c2d      	ldr	r4, [pc, #180]	; (101ede4 <METROLOGY_APP_vRefresh_inst_values+0x814>)
 101ed2e:	47a0      	blx	r4
 101ed30:	b148      	cbz	r0, 101ed46 <METROLOGY_APP_vRefresh_inst_values+0x776>
 101ed32:	a323      	add	r3, pc, #140	; (adr r3, 101edc0 <METROLOGY_APP_vRefresh_inst_values+0x7f0>)
 101ed34:	e9d3 2300 	ldrd	r2, r3, [r3]
 101ed38:	4628      	mov	r0, r5
 101ed3a:	4631      	mov	r1, r6
 101ed3c:	9c00      	ldr	r4, [sp, #0]
 101ed3e:	47a0      	blx	r4
 101ed40:	2800      	cmp	r0, #0
 101ed42:	f040 812f 	bne.w	101efa4 <METROLOGY_APP_vRefresh_inst_values+0x9d4>
	else if ( (xInst.Angle_PF_b >= 180000)	&& (xInst.Angle_PF_b < 270000) )	{ xInst.Quadrant_b = (double)QUADRANT_3; }
 101ed46:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 101ed4a:	a31d      	add	r3, pc, #116	; (adr r3, 101edc0 <METROLOGY_APP_vRefresh_inst_values+0x7f0>)
 101ed4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 101ed50:	4628      	mov	r0, r5
 101ed52:	4631      	mov	r1, r6
 101ed54:	4c23      	ldr	r4, [pc, #140]	; (101ede4 <METROLOGY_APP_vRefresh_inst_values+0x814>)
 101ed56:	47a0      	blx	r4
 101ed58:	b168      	cbz	r0, 101ed76 <METROLOGY_APP_vRefresh_inst_values+0x7a6>
 101ed5a:	a31b      	add	r3, pc, #108	; (adr r3, 101edc8 <METROLOGY_APP_vRefresh_inst_values+0x7f8>)
 101ed5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 101ed60:	4628      	mov	r0, r5
 101ed62:	4631      	mov	r1, r6
 101ed64:	9c00      	ldr	r4, [sp, #0]
 101ed66:	47a0      	blx	r4
 101ed68:	b128      	cbz	r0, 101ed76 <METROLOGY_APP_vRefresh_inst_values+0x7a6>
 101ed6a:	4b1f      	ldr	r3, [pc, #124]	; (101ede8 <METROLOGY_APP_vRefresh_inst_values+0x818>)
 101ed6c:	2200      	movs	r2, #0
 101ed6e:	a966      	add	r1, sp, #408	; 0x198
 101ed70:	e9c1 2300 	strd	r2, r3, [r1]
 101ed74:	e5ac      	b.n	101e8d0 <METROLOGY_APP_vRefresh_inst_values+0x300>
	else if ( (xInst.Angle_PF_b >= 270000)	&& (xInst.Angle_PF_b < 360000) )	{ xInst.Quadrant_b = (double)QUADRANT_4; }
 101ed76:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 101ed7a:	a313      	add	r3, pc, #76	; (adr r3, 101edc8 <METROLOGY_APP_vRefresh_inst_values+0x7f8>)
 101ed7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 101ed80:	4628      	mov	r0, r5
 101ed82:	4631      	mov	r1, r6
 101ed84:	4c17      	ldr	r4, [pc, #92]	; (101ede4 <METROLOGY_APP_vRefresh_inst_values+0x814>)
 101ed86:	47a0      	blx	r4
 101ed88:	2800      	cmp	r0, #0
 101ed8a:	f43f ada1 	beq.w	101e8d0 <METROLOGY_APP_vRefresh_inst_values+0x300>
 101ed8e:	a308      	add	r3, pc, #32	; (adr r3, 101edb0 <METROLOGY_APP_vRefresh_inst_values+0x7e0>)
 101ed90:	e9d3 2300 	ldrd	r2, r3, [r3]
 101ed94:	4628      	mov	r0, r5
 101ed96:	4631      	mov	r1, r6
 101ed98:	9c00      	ldr	r4, [sp, #0]
 101ed9a:	47a0      	blx	r4
 101ed9c:	2800      	cmp	r0, #0
 101ed9e:	f43f ad97 	beq.w	101e8d0 <METROLOGY_APP_vRefresh_inst_values+0x300>
 101eda2:	4b12      	ldr	r3, [pc, #72]	; (101edec <METROLOGY_APP_vRefresh_inst_values+0x81c>)
 101eda4:	2200      	movs	r2, #0
 101eda6:	a966      	add	r1, sp, #408	; 0x198
 101eda8:	e9c1 2300 	strd	r2, r3, [r1]
 101edac:	e590      	b.n	101e8d0 <METROLOGY_APP_vRefresh_inst_values+0x300>
 101edae:	bf00      	nop
 101edb0:	00000000 	.word	0x00000000
 101edb4:	4115f900 	.word	0x4115f900
 101edb8:	00000000 	.word	0x00000000
 101edbc:	40f5f900 	.word	0x40f5f900
 101edc0:	00000000 	.word	0x00000000
 101edc4:	4105f900 	.word	0x4105f900
 101edc8:	00000000 	.word	0x00000000
 101edcc:	41107ac0 	.word	0x41107ac0
 101edd0:	40768000 	.word	0x40768000
 101edd4:	01030259 	.word	0x01030259
 101edd8:	0102fca1 	.word	0x0102fca1
 101eddc:	01030a3d 	.word	0x01030a3d
 101ede0:	20016ad0 	.word	0x20016ad0
 101ede4:	01030511 	.word	0x01030511
 101ede8:	40080000 	.word	0x40080000
 101edec:	40100000 	.word	0x40100000
 101edf0:	010304d5 	.word	0x010304d5
 101edf4:	0102fc9d 	.word	0x0102fc9d
	else if ( (xInst.Angle_PF_t >= 90000)	&& (xInst.Angle_PF_t < 180000) )	{ xInst.Quadrant_t = (double)QUADRANT_2; }
 101edf8:	a38b      	add	r3, pc, #556	; (adr r3, 101f028 <METROLOGY_APP_vRefresh_inst_values+0xa58>)
 101edfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 101edfe:	4620      	mov	r0, r4
 101ee00:	4629      	mov	r1, r5
 101ee02:	4e91      	ldr	r6, [pc, #580]	; (101f048 <METROLOGY_APP_vRefresh_inst_values+0xa78>)
 101ee04:	47b0      	blx	r6
 101ee06:	b148      	cbz	r0, 101ee1c <METROLOGY_APP_vRefresh_inst_values+0x84c>
 101ee08:	a389      	add	r3, pc, #548	; (adr r3, 101f030 <METROLOGY_APP_vRefresh_inst_values+0xa60>)
 101ee0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 101ee0e:	4620      	mov	r0, r4
 101ee10:	4629      	mov	r1, r5
 101ee12:	9e00      	ldr	r6, [sp, #0]
 101ee14:	47b0      	blx	r6
 101ee16:	2800      	cmp	r0, #0
 101ee18:	f040 80d2 	bne.w	101efc0 <METROLOGY_APP_vRefresh_inst_values+0x9f0>
	else if ( (xInst.Angle_PF_t >= 180000)	&& (xInst.Angle_PF_t < 270000) )	{ xInst.Quadrant_t = (double)QUADRANT_3; }
 101ee1c:	a384      	add	r3, pc, #528	; (adr r3, 101f030 <METROLOGY_APP_vRefresh_inst_values+0xa60>)
 101ee1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 101ee22:	4620      	mov	r0, r4
 101ee24:	4629      	mov	r1, r5
 101ee26:	4e88      	ldr	r6, [pc, #544]	; (101f048 <METROLOGY_APP_vRefresh_inst_values+0xa78>)
 101ee28:	47b0      	blx	r6
 101ee2a:	b168      	cbz	r0, 101ee48 <METROLOGY_APP_vRefresh_inst_values+0x878>
 101ee2c:	a382      	add	r3, pc, #520	; (adr r3, 101f038 <METROLOGY_APP_vRefresh_inst_values+0xa68>)
 101ee2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 101ee32:	4620      	mov	r0, r4
 101ee34:	4629      	mov	r1, r5
 101ee36:	9e00      	ldr	r6, [sp, #0]
 101ee38:	47b0      	blx	r6
 101ee3a:	b128      	cbz	r0, 101ee48 <METROLOGY_APP_vRefresh_inst_values+0x878>
 101ee3c:	4b83      	ldr	r3, [pc, #524]	; (101f04c <METROLOGY_APP_vRefresh_inst_values+0xa7c>)
 101ee3e:	2200      	movs	r2, #0
 101ee40:	a962      	add	r1, sp, #392	; 0x188
 101ee42:	e9c1 2300 	strd	r2, r3, [r1]
 101ee46:	e643      	b.n	101ead0 <METROLOGY_APP_vRefresh_inst_values+0x500>
	else if ( (xInst.Angle_PF_t >= 270000)	&& (xInst.Angle_PF_t < 360000) )	{ xInst.Quadrant_t = (double)QUADRANT_4; }
 101ee48:	a37b      	add	r3, pc, #492	; (adr r3, 101f038 <METROLOGY_APP_vRefresh_inst_values+0xa68>)
 101ee4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 101ee4e:	4620      	mov	r0, r4
 101ee50:	4629      	mov	r1, r5
 101ee52:	4e7d      	ldr	r6, [pc, #500]	; (101f048 <METROLOGY_APP_vRefresh_inst_values+0xa78>)
 101ee54:	47b0      	blx	r6
 101ee56:	2800      	cmp	r0, #0
 101ee58:	f43f ae3a 	beq.w	101ead0 <METROLOGY_APP_vRefresh_inst_values+0x500>
 101ee5c:	4620      	mov	r0, r4
 101ee5e:	4629      	mov	r1, r5
 101ee60:	a377      	add	r3, pc, #476	; (adr r3, 101f040 <METROLOGY_APP_vRefresh_inst_values+0xa70>)
 101ee62:	e9d3 2300 	ldrd	r2, r3, [r3]
 101ee66:	9c00      	ldr	r4, [sp, #0]
 101ee68:	47a0      	blx	r4
 101ee6a:	2800      	cmp	r0, #0
 101ee6c:	f43f ae30 	beq.w	101ead0 <METROLOGY_APP_vRefresh_inst_values+0x500>
 101ee70:	4b77      	ldr	r3, [pc, #476]	; (101f050 <METROLOGY_APP_vRefresh_inst_values+0xa80>)
 101ee72:	2200      	movs	r2, #0
 101ee74:	a962      	add	r1, sp, #392	; 0x188
 101ee76:	e9c1 2300 	strd	r2, r3, [r1]
 101ee7a:	e629      	b.n	101ead0 <METROLOGY_APP_vRefresh_inst_values+0x500>
	else if ( (xInst.Angle_PF_c >= 90000)	&& (xInst.Angle_PF_c < 180000) )	{ xInst.Quadrant_c = (double)QUADRANT_2; }
 101ee7c:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
 101ee80:	a369      	add	r3, pc, #420	; (adr r3, 101f028 <METROLOGY_APP_vRefresh_inst_values+0xa58>)
 101ee82:	e9d3 2300 	ldrd	r2, r3, [r3]
 101ee86:	4620      	mov	r0, r4
 101ee88:	4629      	mov	r1, r5
 101ee8a:	4e6f      	ldr	r6, [pc, #444]	; (101f048 <METROLOGY_APP_vRefresh_inst_values+0xa78>)
 101ee8c:	47b0      	blx	r6
 101ee8e:	b148      	cbz	r0, 101eea4 <METROLOGY_APP_vRefresh_inst_values+0x8d4>
 101ee90:	a367      	add	r3, pc, #412	; (adr r3, 101f030 <METROLOGY_APP_vRefresh_inst_values+0xa60>)
 101ee92:	e9d3 2300 	ldrd	r2, r3, [r3]
 101ee96:	4620      	mov	r0, r4
 101ee98:	4629      	mov	r1, r5
 101ee9a:	9e00      	ldr	r6, [sp, #0]
 101ee9c:	47b0      	blx	r6
 101ee9e:	2800      	cmp	r0, #0
 101eea0:	f040 8087 	bne.w	101efb2 <METROLOGY_APP_vRefresh_inst_values+0x9e2>
	else if ( (xInst.Angle_PF_c >= 180000)	&& (xInst.Angle_PF_c < 270000) )	{ xInst.Quadrant_c = (double)QUADRANT_3; }
 101eea4:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
 101eea8:	a361      	add	r3, pc, #388	; (adr r3, 101f030 <METROLOGY_APP_vRefresh_inst_values+0xa60>)
 101eeaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 101eeae:	4620      	mov	r0, r4
 101eeb0:	4629      	mov	r1, r5
 101eeb2:	4e65      	ldr	r6, [pc, #404]	; (101f048 <METROLOGY_APP_vRefresh_inst_values+0xa78>)
 101eeb4:	47b0      	blx	r6
 101eeb6:	b168      	cbz	r0, 101eed4 <METROLOGY_APP_vRefresh_inst_values+0x904>
 101eeb8:	a35f      	add	r3, pc, #380	; (adr r3, 101f038 <METROLOGY_APP_vRefresh_inst_values+0xa68>)
 101eeba:	e9d3 2300 	ldrd	r2, r3, [r3]
 101eebe:	4620      	mov	r0, r4
 101eec0:	4629      	mov	r1, r5
 101eec2:	9e00      	ldr	r6, [sp, #0]
 101eec4:	47b0      	blx	r6
 101eec6:	b128      	cbz	r0, 101eed4 <METROLOGY_APP_vRefresh_inst_values+0x904>
 101eec8:	4b60      	ldr	r3, [pc, #384]	; (101f04c <METROLOGY_APP_vRefresh_inst_values+0xa7c>)
 101eeca:	2200      	movs	r2, #0
 101eecc:	a968      	add	r1, sp, #416	; 0x1a0
 101eece:	e9c1 2300 	strd	r2, r3, [r1]
 101eed2:	e57e      	b.n	101e9d2 <METROLOGY_APP_vRefresh_inst_values+0x402>
	else if ( (xInst.Angle_PF_c >= 270000)	&& (xInst.Angle_PF_c < 360000) )	{ xInst.Quadrant_c = (double)QUADRANT_4; }
 101eed4:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
 101eed8:	a357      	add	r3, pc, #348	; (adr r3, 101f038 <METROLOGY_APP_vRefresh_inst_values+0xa68>)
 101eeda:	e9d3 2300 	ldrd	r2, r3, [r3]
 101eede:	4620      	mov	r0, r4
 101eee0:	4629      	mov	r1, r5
 101eee2:	4e59      	ldr	r6, [pc, #356]	; (101f048 <METROLOGY_APP_vRefresh_inst_values+0xa78>)
 101eee4:	47b0      	blx	r6
 101eee6:	2800      	cmp	r0, #0
 101eee8:	f43f ad73 	beq.w	101e9d2 <METROLOGY_APP_vRefresh_inst_values+0x402>
 101eeec:	a354      	add	r3, pc, #336	; (adr r3, 101f040 <METROLOGY_APP_vRefresh_inst_values+0xa70>)
 101eeee:	e9d3 2300 	ldrd	r2, r3, [r3]
 101eef2:	4620      	mov	r0, r4
 101eef4:	4629      	mov	r1, r5
 101eef6:	9e00      	ldr	r6, [sp, #0]
 101eef8:	47b0      	blx	r6
 101eefa:	2800      	cmp	r0, #0
 101eefc:	f43f ad69 	beq.w	101e9d2 <METROLOGY_APP_vRefresh_inst_values+0x402>
 101ef00:	4b53      	ldr	r3, [pc, #332]	; (101f050 <METROLOGY_APP_vRefresh_inst_values+0xa80>)
 101ef02:	2200      	movs	r2, #0
 101ef04:	a968      	add	r1, sp, #416	; 0x1a0
 101ef06:	e9c1 2300 	strd	r2, r3, [r1]
 101ef0a:	e562      	b.n	101e9d2 <METROLOGY_APP_vRefresh_inst_values+0x402>
		xInst.Angle_V_b -= xInst.Angle_V_a; 
 101ef0c:	f8df 8150 	ldr.w	r8, [pc, #336]	; 101f060 <METROLOGY_APP_vRefresh_inst_values+0xa90>
 101ef10:	464a      	mov	r2, r9
 101ef12:	4653      	mov	r3, sl
 101ef14:	4630      	mov	r0, r6
 101ef16:	4639      	mov	r1, r7
 101ef18:	47c0      	blx	r8
 101ef1a:	4604      	mov	r4, r0
 101ef1c:	460d      	mov	r5, r1
		xInst.Angle_V_c -= xInst.Angle_V_a;
 101ef1e:	464a      	mov	r2, r9
 101ef20:	4653      	mov	r3, sl
		xInst.Angle_V_b -= xInst.Angle_V_a; 
 101ef22:	e9cd 4506 	strd	r4, r5, [sp, #24]
		xInst.Angle_V_c -= xInst.Angle_V_a;
 101ef26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 101ef2a:	47c0      	blx	r8
		xInst.Angle_V_a -= xInst.Angle_V_a;
 101ef2c:	464a      	mov	r2, r9
 101ef2e:	4653      	mov	r3, sl
		xInst.Angle_V_c -= xInst.Angle_V_a;
 101ef30:	4606      	mov	r6, r0
 101ef32:	460f      	mov	r7, r1
		xInst.Angle_V_a -= xInst.Angle_V_a;
 101ef34:	4648      	mov	r0, r9
 101ef36:	4651      	mov	r1, sl
 101ef38:	47c0      	blx	r8
 101ef3a:	4681      	mov	r9, r0
 101ef3c:	468a      	mov	sl, r1
		if ((xInst.Angle_V_b < 0) && (xInst.V_b > 1000)) {
 101ef3e:	4620      	mov	r0, r4
 101ef40:	2200      	movs	r2, #0
 101ef42:	2300      	movs	r3, #0
 101ef44:	4629      	mov	r1, r5
		xInst.Angle_V_a -= xInst.Angle_V_a;
 101ef46:	e9cb 9a2a 	strd	r9, sl, [fp, #168]	; 0xa8
		if ((xInst.Angle_V_b < 0) && (xInst.V_b > 1000)) {
 101ef4a:	9c00      	ldr	r4, [sp, #0]
 101ef4c:	47a0      	blx	r4
 101ef4e:	2800      	cmp	r0, #0
 101ef50:	d155      	bne.n	101effe <METROLOGY_APP_vRefresh_inst_values+0xa2e>
			xInst.Angle_V_b = 0;
 101ef52:	2200      	movs	r2, #0
 101ef54:	2300      	movs	r3, #0
 101ef56:	e9cb 232c 	strd	r2, r3, [fp, #176]	; 0xb0
		if ((xInst.Angle_V_c < 0) && (xInst.V_c > 1000)) {
 101ef5a:	2200      	movs	r2, #0
 101ef5c:	2300      	movs	r3, #0
 101ef5e:	4630      	mov	r0, r6
 101ef60:	4639      	mov	r1, r7
 101ef62:	9c00      	ldr	r4, [sp, #0]
 101ef64:	47a0      	blx	r4
 101ef66:	2800      	cmp	r0, #0
 101ef68:	d131      	bne.n	101efce <METROLOGY_APP_vRefresh_inst_values+0x9fe>
 101ef6a:	e9db 232c 	ldrd	r2, r3, [fp, #176]	; 0xb0
			xInst.Angle_V_c = 0;
 101ef6e:	2400      	movs	r4, #0
 101ef70:	2500      	movs	r5, #0
 101ef72:	e9cb 452e 	strd	r4, r5, [fp, #184]	; 0xb8
 101ef76:	e9cd 2306 	strd	r2, r3, [sp, #24]
 101ef7a:	e641      	b.n	101ec00 <METROLOGY_APP_vRefresh_inst_values+0x630>
	xInst.Angle_I_a = (xInst.Angle_I_a < 0) ? (360000 + xInst.Angle_I_a) : xInst.Angle_I_a;
 101ef7c:	4648      	mov	r0, r9
 101ef7e:	4651      	mov	r1, sl
 101ef80:	a32f      	add	r3, pc, #188	; (adr r3, 101f040 <METROLOGY_APP_vRefresh_inst_values+0xa70>)
 101ef82:	e9d3 2300 	ldrd	r2, r3, [r3]
 101ef86:	4e33      	ldr	r6, [pc, #204]	; (101f054 <METROLOGY_APP_vRefresh_inst_values+0xa84>)
 101ef88:	47b0      	blx	r6
 101ef8a:	4681      	mov	r9, r0
 101ef8c:	468a      	mov	sl, r1
 101ef8e:	e645      	b.n	101ec1c <METROLOGY_APP_vRefresh_inst_values+0x64c>
	xInst.Angle_I_b = (xInst.Angle_I_b < 0) ? (360000 + xInst.Angle_I_b) : xInst.Angle_I_b;
 101ef90:	4648      	mov	r0, r9
 101ef92:	4651      	mov	r1, sl
 101ef94:	a32a      	add	r3, pc, #168	; (adr r3, 101f040 <METROLOGY_APP_vRefresh_inst_values+0xa70>)
 101ef96:	e9d3 2300 	ldrd	r2, r3, [r3]
 101ef9a:	4e2e      	ldr	r6, [pc, #184]	; (101f054 <METROLOGY_APP_vRefresh_inst_values+0xa84>)
 101ef9c:	47b0      	blx	r6
 101ef9e:	4681      	mov	r9, r0
 101efa0:	468a      	mov	sl, r1
 101efa2:	e64b      	b.n	101ec3c <METROLOGY_APP_vRefresh_inst_values+0x66c>
	else if ( (xInst.Angle_PF_b >= 90000)	&& (xInst.Angle_PF_b < 180000) )	{ xInst.Quadrant_b = (double)QUADRANT_2; }
 101efa4:	2200      	movs	r2, #0
 101efa6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 101efaa:	a966      	add	r1, sp, #408	; 0x198
 101efac:	e9c1 2300 	strd	r2, r3, [r1]
 101efb0:	e48e      	b.n	101e8d0 <METROLOGY_APP_vRefresh_inst_values+0x300>
	else if ( (xInst.Angle_PF_c >= 90000)	&& (xInst.Angle_PF_c < 180000) )	{ xInst.Quadrant_c = (double)QUADRANT_2; }
 101efb2:	2200      	movs	r2, #0
 101efb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 101efb8:	a968      	add	r1, sp, #416	; 0x1a0
 101efba:	e9c1 2300 	strd	r2, r3, [r1]
 101efbe:	e508      	b.n	101e9d2 <METROLOGY_APP_vRefresh_inst_values+0x402>
	else if ( (xInst.Angle_PF_t >= 90000)	&& (xInst.Angle_PF_t < 180000) )	{ xInst.Quadrant_t = (double)QUADRANT_2; }
 101efc0:	2200      	movs	r2, #0
 101efc2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 101efc6:	a962      	add	r1, sp, #392	; 0x188
 101efc8:	e9c1 2300 	strd	r2, r3, [r1]
 101efcc:	e580      	b.n	101ead0 <METROLOGY_APP_vRefresh_inst_values+0x500>
		if ((xInst.Angle_V_c < 0) && (xInst.V_c > 1000)) {
 101efce:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 101efd2:	4c21      	ldr	r4, [pc, #132]	; (101f058 <METROLOGY_APP_vRefresh_inst_values+0xa88>)
 101efd4:	4b21      	ldr	r3, [pc, #132]	; (101f05c <METROLOGY_APP_vRefresh_inst_values+0xa8c>)
 101efd6:	2200      	movs	r2, #0
 101efd8:	47a0      	blx	r4
 101efda:	2800      	cmp	r0, #0
 101efdc:	d0c5      	beq.n	101ef6a <METROLOGY_APP_vRefresh_inst_values+0x99a>
			xInst.Angle_V_c += 360000;
 101efde:	a318      	add	r3, pc, #96	; (adr r3, 101f040 <METROLOGY_APP_vRefresh_inst_values+0xa70>)
 101efe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 101efe4:	4c1b      	ldr	r4, [pc, #108]	; (101f054 <METROLOGY_APP_vRefresh_inst_values+0xa84>)
 101efe6:	4630      	mov	r0, r6
 101efe8:	4639      	mov	r1, r7
 101efea:	47a0      	blx	r4
 101efec:	e9db 232c 	ldrd	r2, r3, [fp, #176]	; 0xb0
 101eff0:	4604      	mov	r4, r0
 101eff2:	460d      	mov	r5, r1
 101eff4:	e9cb 452e 	strd	r4, r5, [fp, #184]	; 0xb8
 101eff8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 101effc:	e600      	b.n	101ec00 <METROLOGY_APP_vRefresh_inst_values+0x630>
		if ((xInst.Angle_V_b < 0) && (xInst.V_b > 1000)) {
 101effe:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 101f002:	2200      	movs	r2, #0
 101f004:	4b15      	ldr	r3, [pc, #84]	; (101f05c <METROLOGY_APP_vRefresh_inst_values+0xa8c>)
 101f006:	4c14      	ldr	r4, [pc, #80]	; (101f058 <METROLOGY_APP_vRefresh_inst_values+0xa88>)
 101f008:	47a0      	blx	r4
 101f00a:	2800      	cmp	r0, #0
 101f00c:	d0a1      	beq.n	101ef52 <METROLOGY_APP_vRefresh_inst_values+0x982>
			xInst.Angle_V_b += 360000; 
 101f00e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 101f012:	a30b      	add	r3, pc, #44	; (adr r3, 101f040 <METROLOGY_APP_vRefresh_inst_values+0xa70>)
 101f014:	e9d3 2300 	ldrd	r2, r3, [r3]
 101f018:	4c0e      	ldr	r4, [pc, #56]	; (101f054 <METROLOGY_APP_vRefresh_inst_values+0xa84>)
 101f01a:	47a0      	blx	r4
 101f01c:	e9cb 012c 	strd	r0, r1, [fp, #176]	; 0xb0
 101f020:	e79b      	b.n	101ef5a <METROLOGY_APP_vRefresh_inst_values+0x98a>
 101f022:	bf00      	nop
 101f024:	f3af 8000 	nop.w
 101f028:	00000000 	.word	0x00000000
 101f02c:	40f5f900 	.word	0x40f5f900
 101f030:	00000000 	.word	0x00000000
 101f034:	4105f900 	.word	0x4105f900
 101f038:	00000000 	.word	0x00000000
 101f03c:	41107ac0 	.word	0x41107ac0
 101f040:	00000000 	.word	0x00000000
 101f044:	4115f900 	.word	0x4115f900
 101f048:	01030511 	.word	0x01030511
 101f04c:	40080000 	.word	0x40080000
 101f050:	40100000 	.word	0x40100000
 101f054:	0102fca1 	.word	0x0102fca1
 101f058:	01030525 	.word	0x01030525
 101f05c:	408f4000 	.word	0x408f4000
 101f060:	0102fc9d 	.word	0x0102fc9d

0101f064 <METROLOGY_APP_dGet_instantaneous_value>:
	switch (inst_id) {
 101f064:	282a      	cmp	r0, #42	; 0x2a
 101f066:	f200 80d9 	bhi.w	101f21c <METROLOGY_APP_dGet_instantaneous_value+0x1b8>
 101f06a:	e8df f010 	tbh	[pc, r0, lsl #1]
 101f06e:	00d3      	.short	0x00d3
 101f070:	00cb00cf 	.word	0x00cb00cf
 101f074:	00c300c7 	.word	0x00c300c7
 101f078:	00bb00bf 	.word	0x00bb00bf
 101f07c:	00b300b7 	.word	0x00b300b7
 101f080:	00ab00af 	.word	0x00ab00af
 101f084:	00a300a7 	.word	0x00a300a7
 101f088:	009b009f 	.word	0x009b009f
 101f08c:	00930097 	.word	0x00930097
 101f090:	008b008f 	.word	0x008b008f
 101f094:	00830087 	.word	0x00830087
 101f098:	007b007f 	.word	0x007b007f
 101f09c:	00730077 	.word	0x00730077
 101f0a0:	006b006f 	.word	0x006b006f
 101f0a4:	00630067 	.word	0x00630067
 101f0a8:	005b005f 	.word	0x005b005f
 101f0ac:	00530057 	.word	0x00530057
 101f0b0:	004b004f 	.word	0x004b004f
 101f0b4:	00430047 	.word	0x00430047
 101f0b8:	003b003f 	.word	0x003b003f
 101f0bc:	00330037 	.word	0x00330037
 101f0c0:	002b002f 	.word	0x002b002f
			inst_val = xInstantaneous.Freq_c;
 101f0c4:	4b57      	ldr	r3, [pc, #348]	; (101f224 <METROLOGY_APP_dGet_instantaneous_value+0x1c0>)
 101f0c6:	e9d3 0100 	ldrd	r0, r1, [r3]
			break;
 101f0ca:	4770      	bx	lr
			inst_val = xInstantaneous.Freq_b;
 101f0cc:	4b56      	ldr	r3, [pc, #344]	; (101f228 <METROLOGY_APP_dGet_instantaneous_value+0x1c4>)
 101f0ce:	e9d3 0100 	ldrd	r0, r1, [r3]
			break;
 101f0d2:	4770      	bx	lr
			inst_val = xInstantaneous.Freq_a;
 101f0d4:	4b55      	ldr	r3, [pc, #340]	; (101f22c <METROLOGY_APP_dGet_instantaneous_value+0x1c8>)
 101f0d6:	e9d3 0100 	ldrd	r0, r1, [r3]
			break;
 101f0da:	4770      	bx	lr
			inst_val = xInstantaneous.Freq_t;
 101f0dc:	4b54      	ldr	r3, [pc, #336]	; (101f230 <METROLOGY_APP_dGet_instantaneous_value+0x1cc>)
 101f0de:	e9d3 0100 	ldrd	r0, r1, [r3]
			break;
 101f0e2:	4770      	bx	lr
			inst_val = xInstantaneous.Quadrant_c;
 101f0e4:	4b53      	ldr	r3, [pc, #332]	; (101f234 <METROLOGY_APP_dGet_instantaneous_value+0x1d0>)
 101f0e6:	e9d3 0100 	ldrd	r0, r1, [r3]
			break;
 101f0ea:	4770      	bx	lr
			inst_val = xInstantaneous.Quadrant_b;
 101f0ec:	4b52      	ldr	r3, [pc, #328]	; (101f238 <METROLOGY_APP_dGet_instantaneous_value+0x1d4>)
 101f0ee:	e9d3 0100 	ldrd	r0, r1, [r3]
			break;
 101f0f2:	4770      	bx	lr
			inst_val = xInstantaneous.Quadrant_a;
 101f0f4:	4b51      	ldr	r3, [pc, #324]	; (101f23c <METROLOGY_APP_dGet_instantaneous_value+0x1d8>)
 101f0f6:	e9d3 0100 	ldrd	r0, r1, [r3]
			break;
 101f0fa:	4770      	bx	lr
			inst_val = xInstantaneous.Quadrant_t;
 101f0fc:	4b50      	ldr	r3, [pc, #320]	; (101f240 <METROLOGY_APP_dGet_instantaneous_value+0x1dc>)
 101f0fe:	e9d3 0100 	ldrd	r0, r1, [r3]
			break;
 101f102:	4770      	bx	lr
			inst_val = xInstantaneous.PF_c;
 101f104:	4b4f      	ldr	r3, [pc, #316]	; (101f244 <METROLOGY_APP_dGet_instantaneous_value+0x1e0>)
 101f106:	e9d3 0100 	ldrd	r0, r1, [r3]
			break;
 101f10a:	4770      	bx	lr
			inst_val = xInstantaneous.PF_b;
 101f10c:	4b4e      	ldr	r3, [pc, #312]	; (101f248 <METROLOGY_APP_dGet_instantaneous_value+0x1e4>)
 101f10e:	e9d3 0100 	ldrd	r0, r1, [r3]
			break;
 101f112:	4770      	bx	lr
			inst_val = xInstantaneous.PF_a;
 101f114:	4b4d      	ldr	r3, [pc, #308]	; (101f24c <METROLOGY_APP_dGet_instantaneous_value+0x1e8>)
 101f116:	e9d3 0100 	ldrd	r0, r1, [r3]
			break;
 101f11a:	4770      	bx	lr
			inst_val = xInstantaneous.PF_t;
 101f11c:	4b4c      	ldr	r3, [pc, #304]	; (101f250 <METROLOGY_APP_dGet_instantaneous_value+0x1ec>)
 101f11e:	e9d3 013e 	ldrd	r0, r1, [r3, #248]	; 0xf8
			break;
 101f122:	4770      	bx	lr
			inst_val = xInstantaneous.Angle_PF_c;
 101f124:	4b4a      	ldr	r3, [pc, #296]	; (101f250 <METROLOGY_APP_dGet_instantaneous_value+0x1ec>)
 101f126:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
			break;
 101f12a:	4770      	bx	lr
			inst_val = xInstantaneous.Angle_PF_b;
 101f12c:	4b48      	ldr	r3, [pc, #288]	; (101f250 <METROLOGY_APP_dGet_instantaneous_value+0x1ec>)
 101f12e:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
			break;
 101f132:	4770      	bx	lr
			inst_val = xInstantaneous.Angle_PF_a;
 101f134:	4b46      	ldr	r3, [pc, #280]	; (101f250 <METROLOGY_APP_dGet_instantaneous_value+0x1ec>)
 101f136:	e9d3 0138 	ldrd	r0, r1, [r3, #224]	; 0xe0
			break;
 101f13a:	4770      	bx	lr
			inst_val = xInstantaneous.Angle_PF_t;
 101f13c:	4b44      	ldr	r3, [pc, #272]	; (101f250 <METROLOGY_APP_dGet_instantaneous_value+0x1ec>)
 101f13e:	e9d3 0136 	ldrd	r0, r1, [r3, #216]	; 0xd8
			break;
 101f142:	4770      	bx	lr
			inst_val = xInstantaneous.Angle_I_c;
 101f144:	4b42      	ldr	r3, [pc, #264]	; (101f250 <METROLOGY_APP_dGet_instantaneous_value+0x1ec>)
 101f146:	e9d3 0134 	ldrd	r0, r1, [r3, #208]	; 0xd0
			break;
 101f14a:	4770      	bx	lr
			inst_val = xInstantaneous.Angle_I_b;
 101f14c:	4b40      	ldr	r3, [pc, #256]	; (101f250 <METROLOGY_APP_dGet_instantaneous_value+0x1ec>)
 101f14e:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
			break;
 101f152:	4770      	bx	lr
			inst_val = xInstantaneous.Angle_I_a;
 101f154:	4b3e      	ldr	r3, [pc, #248]	; (101f250 <METROLOGY_APP_dGet_instantaneous_value+0x1ec>)
 101f156:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	; 0xc0
			break;
 101f15a:	4770      	bx	lr
			inst_val = xInstantaneous.Angle_V_c;
 101f15c:	4b3c      	ldr	r3, [pc, #240]	; (101f250 <METROLOGY_APP_dGet_instantaneous_value+0x1ec>)
 101f15e:	e9d3 012e 	ldrd	r0, r1, [r3, #184]	; 0xb8
			break;
 101f162:	4770      	bx	lr
			inst_val = xInstantaneous.Angle_V_b;
 101f164:	4b3a      	ldr	r3, [pc, #232]	; (101f250 <METROLOGY_APP_dGet_instantaneous_value+0x1ec>)
 101f166:	e9d3 012c 	ldrd	r0, r1, [r3, #176]	; 0xb0
			break;
 101f16a:	4770      	bx	lr
			inst_val = xInstantaneous.Angle_V_a;
 101f16c:	4b38      	ldr	r3, [pc, #224]	; (101f250 <METROLOGY_APP_dGet_instantaneous_value+0x1ec>)
 101f16e:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
			break;
 101f172:	4770      	bx	lr
			inst_val = xInstantaneous.I_c;
 101f174:	4b36      	ldr	r3, [pc, #216]	; (101f250 <METROLOGY_APP_dGet_instantaneous_value+0x1ec>)
 101f176:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
			break;
 101f17a:	4770      	bx	lr
			inst_val = xInstantaneous.I_b;
 101f17c:	4b34      	ldr	r3, [pc, #208]	; (101f250 <METROLOGY_APP_dGet_instantaneous_value+0x1ec>)
 101f17e:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
			break;
 101f182:	4770      	bx	lr
			inst_val = xInstantaneous.I_a;
 101f184:	4b32      	ldr	r3, [pc, #200]	; (101f250 <METROLOGY_APP_dGet_instantaneous_value+0x1ec>)
 101f186:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
			break;
 101f18a:	4770      	bx	lr
			inst_val = xInstantaneous.V_ca;
 101f18c:	4b30      	ldr	r3, [pc, #192]	; (101f250 <METROLOGY_APP_dGet_instantaneous_value+0x1ec>)
 101f18e:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
			break;
 101f192:	4770      	bx	lr
			inst_val = xInstantaneous.V_bc;
 101f194:	4b2e      	ldr	r3, [pc, #184]	; (101f250 <METROLOGY_APP_dGet_instantaneous_value+0x1ec>)
 101f196:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
			break;
 101f19a:	4770      	bx	lr
			inst_val = xInstantaneous.V_ab;
 101f19c:	4b2c      	ldr	r3, [pc, #176]	; (101f250 <METROLOGY_APP_dGet_instantaneous_value+0x1ec>)
 101f19e:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
			break;
 101f1a2:	4770      	bx	lr
			inst_val = xInstantaneous.V_c;
 101f1a4:	4b2a      	ldr	r3, [pc, #168]	; (101f250 <METROLOGY_APP_dGet_instantaneous_value+0x1ec>)
 101f1a6:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
			break;
 101f1aa:	4770      	bx	lr
			inst_val = xInstantaneous.V_b;
 101f1ac:	4b28      	ldr	r3, [pc, #160]	; (101f250 <METROLOGY_APP_dGet_instantaneous_value+0x1ec>)
 101f1ae:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
			break;
 101f1b2:	4770      	bx	lr
			inst_val = xInstantaneous.V_a;
 101f1b4:	4b26      	ldr	r3, [pc, #152]	; (101f250 <METROLOGY_APP_dGet_instantaneous_value+0x1ec>)
 101f1b6:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
			break;
 101f1ba:	4770      	bx	lr
			inst_val = xInstantaneous.S_c;
 101f1bc:	4b24      	ldr	r3, [pc, #144]	; (101f250 <METROLOGY_APP_dGet_instantaneous_value+0x1ec>)
 101f1be:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
			break;
 101f1c2:	4770      	bx	lr
			inst_val = xInstantaneous.S_b;
 101f1c4:	4b22      	ldr	r3, [pc, #136]	; (101f250 <METROLOGY_APP_dGet_instantaneous_value+0x1ec>)
 101f1c6:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
			break;
 101f1ca:	4770      	bx	lr
			inst_val = xInstantaneous.S_a;
 101f1cc:	4b20      	ldr	r3, [pc, #128]	; (101f250 <METROLOGY_APP_dGet_instantaneous_value+0x1ec>)
 101f1ce:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
			break;
 101f1d2:	4770      	bx	lr
			inst_val = xInstantaneous.S_t;
 101f1d4:	4b1e      	ldr	r3, [pc, #120]	; (101f250 <METROLOGY_APP_dGet_instantaneous_value+0x1ec>)
 101f1d6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
			break;
 101f1da:	4770      	bx	lr
			inst_val = xInstantaneous.Q_c;
 101f1dc:	4b1c      	ldr	r3, [pc, #112]	; (101f250 <METROLOGY_APP_dGet_instantaneous_value+0x1ec>)
 101f1de:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
			break;
 101f1e2:	4770      	bx	lr
			inst_val = xInstantaneous.Q_b;
 101f1e4:	4b1a      	ldr	r3, [pc, #104]	; (101f250 <METROLOGY_APP_dGet_instantaneous_value+0x1ec>)
 101f1e6:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
			break;
 101f1ea:	4770      	bx	lr
			inst_val = xInstantaneous.Q_a;
 101f1ec:	4b18      	ldr	r3, [pc, #96]	; (101f250 <METROLOGY_APP_dGet_instantaneous_value+0x1ec>)
 101f1ee:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
			break;
 101f1f2:	4770      	bx	lr
			inst_val = xInstantaneous.Q_t;
 101f1f4:	4b16      	ldr	r3, [pc, #88]	; (101f250 <METROLOGY_APP_dGet_instantaneous_value+0x1ec>)
 101f1f6:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
			break;
 101f1fa:	4770      	bx	lr
			inst_val = xInstantaneous.P_c;
 101f1fc:	4b14      	ldr	r3, [pc, #80]	; (101f250 <METROLOGY_APP_dGet_instantaneous_value+0x1ec>)
 101f1fe:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
			break;
 101f202:	4770      	bx	lr
			inst_val = xInstantaneous.P_b;
 101f204:	4b12      	ldr	r3, [pc, #72]	; (101f250 <METROLOGY_APP_dGet_instantaneous_value+0x1ec>)
 101f206:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
			break;
 101f20a:	4770      	bx	lr
			inst_val = xInstantaneous.P_a;
 101f20c:	4b10      	ldr	r3, [pc, #64]	; (101f250 <METROLOGY_APP_dGet_instantaneous_value+0x1ec>)
 101f20e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
			break;
 101f212:	4770      	bx	lr
			inst_val = xInstantaneous.P_t;
 101f214:	4b0e      	ldr	r3, [pc, #56]	; (101f250 <METROLOGY_APP_dGet_instantaneous_value+0x1ec>)
 101f216:	e9d3 0100 	ldrd	r0, r1, [r3]
			break;
 101f21a:	4770      	bx	lr
			inst_val = 0;
 101f21c:	2000      	movs	r0, #0
 101f21e:	2100      	movs	r1, #0
}
 101f220:	4770      	bx	lr
 101f222:	bf00      	nop
 101f224:	20016c20 	.word	0x20016c20
 101f228:	20016c18 	.word	0x20016c18
 101f22c:	20016c10 	.word	0x20016c10
 101f230:	20016c08 	.word	0x20016c08
 101f234:	20016c00 	.word	0x20016c00
 101f238:	20016bf8 	.word	0x20016bf8
 101f23c:	20016bf0 	.word	0x20016bf0
 101f240:	20016be8 	.word	0x20016be8
 101f244:	20016be0 	.word	0x20016be0
 101f248:	20016bd8 	.word	0x20016bd8
 101f24c:	20016bd0 	.word	0x20016bd0
 101f250:	20016ad0 	.word	0x20016ad0

0101f254 <METROLOGY_APP_vCopy_instantaneous_struct>:
void METROLOGY_APP_vCopy_instantaneous_struct(INSTANTANEOUS_VALUES_TYPE* inst_struct_ptr) {
 101f254:	b508      	push	{r3, lr}
	*inst_struct_ptr = xInstantaneous;
 101f256:	f44f 72ac 	mov.w	r2, #344	; 0x158
 101f25a:	4902      	ldr	r1, [pc, #8]	; (101f264 <METROLOGY_APP_vCopy_instantaneous_struct+0x10>)
 101f25c:	4b02      	ldr	r3, [pc, #8]	; (101f268 <METROLOGY_APP_vCopy_instantaneous_struct+0x14>)
 101f25e:	4798      	blx	r3
 101f260:	bd08      	pop	{r3, pc}
 101f262:	bf00      	nop
 101f264:	20016ad0 	.word	0x20016ad0
 101f268:	01030a3d 	.word	0x01030a3d

0101f26c <SM_APP_ucCheck_table_ram_vs_nvm>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
uint8_t SM_APP_ucCheck_table_ram_vs_nvm(DIAGNOSTIC_TABLE_TYPE table) {
 101f26c:	b500      	push	{lr}
 101f26e:	b085      	sub	sp, #20
 101f270:	f10d 0e10 	add.w	lr, sp, #16
 101f274:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
	
	TABLE_STATE_TYPE error_code = 0;	
	
	if ( table.size > 0 ) {
 101f278:	f8bd 0000 	ldrh.w	r0, [sp]
 101f27c:	b168      	cbz	r0, 101f29a <SM_APP_ucCheck_table_ram_vs_nvm+0x2e>
 101f27e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 101f282:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 101f286:	f8bd 2006 	ldrh.w	r2, [sp, #6]
	
		if ( (table.crc_stored == table.crc_ram) && (table.crc_stored == table.crc_nvm) ) {
 101f28a:	4283      	cmp	r3, r0
 101f28c:	d008      	beq.n	101f2a0 <SM_APP_ucCheck_table_ram_vs_nvm+0x34>
			
			/* Configuration OK - There is not nothing to do here, Return Error Code */
			error_code = TBL_DATA_OK;	
		}
		else if ( (table.crc_stored != table.crc_ram) && (table.crc_stored == table.crc_nvm) ) {
 101f28e:	4293      	cmp	r3, r2
 101f290:	d010      	beq.n	101f2b4 <SM_APP_ucCheck_table_ram_vs_nvm+0x48>
			error_code = TBL_NVM_DATA_CORRUPTED;
		}
		else if ( (table.crc_stored != table.crc_ram) && (table.crc_stored != table.crc_nvm) && (table.crc_ram == table.crc_nvm) ) {
			
			/* Corrupted Configuration - Return Error Code */
			error_code = TBL_NVM_CRC_CORRUPTED;
 101f292:	4290      	cmp	r0, r2
 101f294:	bf14      	ite	ne
 101f296:	2004      	movne	r0, #4
 101f298:	2003      	moveq	r0, #3
			error_code = TBL_NVM_RAM_DATA_CORRUPTED;
		}
	}
	
	return (uint8_t)error_code;
}
 101f29a:	b005      	add	sp, #20
 101f29c:	f85d fb04 	ldr.w	pc, [sp], #4
		else if ( (table.crc_stored == table.crc_ram) && (table.crc_stored != table.crc_nvm) ) {
 101f2a0:	4293      	cmp	r3, r2
 101f2a2:	d005      	beq.n	101f2b0 <SM_APP_ucCheck_table_ram_vs_nvm+0x44>
			table.recover_nvm_table();
 101f2a4:	9b02      	ldr	r3, [sp, #8]
 101f2a6:	4798      	blx	r3
			error_code = TBL_NVM_DATA_CORRUPTED;
 101f2a8:	2002      	movs	r0, #2
}
 101f2aa:	b005      	add	sp, #20
 101f2ac:	f85d fb04 	ldr.w	pc, [sp], #4
	TABLE_STATE_TYPE error_code = 0;	
 101f2b0:	2000      	movs	r0, #0
 101f2b2:	e7f2      	b.n	101f29a <SM_APP_ucCheck_table_ram_vs_nvm+0x2e>
			table.recover_ram_table();
 101f2b4:	9b03      	ldr	r3, [sp, #12]
 101f2b6:	4798      	blx	r3
			error_code = TBL_RAM_DATA_CORRUPTED;
 101f2b8:	2001      	movs	r0, #1
 101f2ba:	e7ee      	b.n	101f29a <SM_APP_ucCheck_table_ram_vs_nvm+0x2e>

0101f2bc <SM_APP_bIs_ed_rom_failure>:
bool SM_APP_bIs_ed_rom_failure(void) {
 101f2bc:	b510      	push	{r4, lr}
	crc_total = CRC_app_crc16_calc();
 101f2be:	4b0a      	ldr	r3, [pc, #40]	; (101f2e8 <SM_APP_bIs_ed_rom_failure+0x2c>)
	crc_calculated = (uint32_t)crc_total >> 16;
 101f2c0:	4c0a      	ldr	r4, [pc, #40]	; (101f2ec <SM_APP_bIs_ed_rom_failure+0x30>)
	crc_total = CRC_app_crc16_calc();
 101f2c2:	4798      	blx	r3
 101f2c4:	4b0a      	ldr	r3, [pc, #40]	; (101f2f0 <SM_APP_bIs_ed_rom_failure+0x34>)
	crc_on_flash   = (uint32_t)crc_total;
 101f2c6:	490b      	ldr	r1, [pc, #44]	; (101f2f4 <SM_APP_bIs_ed_rom_failure+0x38>)
	crc_total = CRC_app_crc16_calc();
 101f2c8:	6018      	str	r0, [r3, #0]
	crc_calculated = (uint32_t)crc_total >> 16;
 101f2ca:	681a      	ldr	r2, [r3, #0]
 101f2cc:	0c12      	lsrs	r2, r2, #16
 101f2ce:	8022      	strh	r2, [r4, #0]
	crc_on_flash   = (uint32_t)crc_total;
 101f2d0:	681b      	ldr	r3, [r3, #0]
 101f2d2:	b29b      	uxth	r3, r3
 101f2d4:	800b      	strh	r3, [r1, #0]
	if ( crc_calculated != crc_on_flash ) {
 101f2d6:	8820      	ldrh	r0, [r4, #0]
 101f2d8:	880b      	ldrh	r3, [r1, #0]
 101f2da:	b280      	uxth	r0, r0
 101f2dc:	b29b      	uxth	r3, r3
}
 101f2de:	1ac0      	subs	r0, r0, r3
 101f2e0:	bf18      	it	ne
 101f2e2:	2001      	movne	r0, #1
 101f2e4:	bd10      	pop	{r4, pc}
 101f2e6:	bf00      	nop
 101f2e8:	010170a5 	.word	0x010170a5
 101f2ec:	20000c70 	.word	0x20000c70
 101f2f0:	20000c74 	.word	0x20000c74
 101f2f4:	20000c72 	.word	0x20000c72

0101f2f8 <SM_APP_vFwup_mcu_restart>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
void SM_APP_vFwup_mcu_restart(void) {
 101f2f8:	b500      	push	{lr}
	
	if ( (op_c1218_apl.communication_state == BASE_STATE) && (nic_c1218_apl.communication_state == BASE_STATE) ) {
 101f2fa:	4b0c      	ldr	r3, [pc, #48]	; (101f32c <SM_APP_vFwup_mcu_restart+0x34>)
 101f2fc:	781b      	ldrb	r3, [r3, #0]
void SM_APP_vFwup_mcu_restart(void) {
 101f2fe:	b083      	sub	sp, #12
	if ( (op_c1218_apl.communication_state == BASE_STATE) && (nic_c1218_apl.communication_state == BASE_STATE) ) {
 101f300:	b913      	cbnz	r3, 101f308 <SM_APP_vFwup_mcu_restart+0x10>
 101f302:	4b0b      	ldr	r3, [pc, #44]	; (101f330 <SM_APP_vFwup_mcu_restart+0x38>)
 101f304:	781b      	ldrb	r3, [r3, #0]
 101f306:	b143      	cbz	r3, 101f31a <SM_APP_vFwup_mcu_restart+0x22>
		mcu.restart_cause = FIRMWARE_UPDATE;
		mcu.save_information = true;
		RST_APP_vExecute_mcu_reset(mcu);
	}
	
	TIMER_start_ms_timer(SM_START_RESET_TIMER, START_RESET_MS, SM_APP_vFwup_mcu_restart);
 101f308:	4a0a      	ldr	r2, [pc, #40]	; (101f334 <SM_APP_vFwup_mcu_restart+0x3c>)
 101f30a:	4b0b      	ldr	r3, [pc, #44]	; (101f338 <SM_APP_vFwup_mcu_restart+0x40>)
 101f30c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 101f310:	200f      	movs	r0, #15
}
 101f312:	b003      	add	sp, #12
 101f314:	f85d eb04 	ldr.w	lr, [sp], #4
	TIMER_start_ms_timer(SM_START_RESET_TIMER, START_RESET_MS, SM_APP_vFwup_mcu_restart);
 101f318:	4718      	bx	r3
		mcu.restart_cause = FIRMWARE_UPDATE;
 101f31a:	2301      	movs	r3, #1
 101f31c:	f88d 3005 	strb.w	r3, [sp, #5]
		mcu.save_information = true;
 101f320:	f88d 3004 	strb.w	r3, [sp, #4]
		RST_APP_vExecute_mcu_reset(mcu);
 101f324:	9801      	ldr	r0, [sp, #4]
 101f326:	4b05      	ldr	r3, [pc, #20]	; (101f33c <SM_APP_vFwup_mcu_restart+0x44>)
 101f328:	4798      	blx	r3
 101f32a:	e7ed      	b.n	101f308 <SM_APP_vFwup_mcu_restart+0x10>
 101f32c:	20016ec8 	.word	0x20016ec8
 101f330:	20016eec 	.word	0x20016eec
 101f334:	0101f2f9 	.word	0x0101f2f9
 101f338:	0102ba8d 	.word	0x0102ba8d
 101f33c:	010159f1 	.word	0x010159f1

0101f340 <SM_APP_vInitialize>:
{	
 101f340:	b430      	push	{r4, r5}
	meter.phase_a.voltage_state = VOLTAGE_NORMAL;
 101f342:	4b11      	ldr	r3, [pc, #68]	; (101f388 <SM_APP_vInitialize+0x48>)
	meter_os.test_mode_expired = false;
 101f344:	4c11      	ldr	r4, [pc, #68]	; (101f38c <SM_APP_vInitialize+0x4c>)
	meter.ed_mode.test_mode.active_period = (uint32_t)TIMER_ms_to_tic(1800000);			// Active period to test mode
 101f346:	4812      	ldr	r0, [pc, #72]	; (101f390 <SM_APP_vInitialize+0x50>)
 101f348:	6298      	str	r0, [r3, #40]	; 0x28
	meter.phase_a.voltage_state = VOLTAGE_NORMAL;
 101f34a:	2201      	movs	r2, #1
	meter.ed_mode.metering.active_period = 0;											// Active period to metering mode is undefined
 101f34c:	2100      	movs	r1, #0
	meter.detect_voltage_change_period = (uint32_t)TIMER_ms_to_tic(60000);				// 1 min
 101f34e:	f64e 2560 	movw	r5, #60000	; 0xea60
 101f352:	64dd      	str	r5, [r3, #76]	; 0x4c
	meter.phase_a.voltage_state = VOLTAGE_NORMAL;
 101f354:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	meter.phase_b.voltage_state = VOLTAGE_NORMAL;
 101f358:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	meter.phase_c.voltage_state = VOLTAGE_NORMAL;
 101f35c:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	meter.phase_a.prev_voltage_state = VOLTAGE_NORMAL;
 101f360:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	meter.phase_b.prev_voltage_state = VOLTAGE_NORMAL;
 101f364:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	meter.phase_c.prev_voltage_state = VOLTAGE_NORMAL;
 101f368:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	meter.ed_mode.metering.enabled = true;
 101f36c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	meter.ed_mode.metering.active_period = 0;											// Active period to metering mode is undefined
 101f370:	6319      	str	r1, [r3, #48]	; 0x30
	meter.ed_mode.meter_shop.enabled = false;
 101f372:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
	meter.ed_mode.meter_shop.active_period = 0;											// Meter shop mode is not supported
 101f376:	6399      	str	r1, [r3, #56]	; 0x38
	meter.ed_mode.test_mode.enabled = false;
 101f378:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
	meter.ed_mode.factory.enabled = false;
 101f37c:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
	meter.ed_mode.factory.active_period = (uint32_t)TIMER_ms_to_tic(1800000);			// Active period to factory or manufacturer mode
 101f380:	6418      	str	r0, [r3, #64]	; 0x40
	meter_os.test_mode_expired = false;
 101f382:	7061      	strb	r1, [r4, #1]
}
 101f384:	bc30      	pop	{r4, r5}
 101f386:	4770      	bx	lr
 101f388:	20016c2c 	.word	0x20016c2c
 101f38c:	20016c28 	.word	0x20016c28
 101f390:	001b7740 	.word	0x001b7740

0101f394 <SM_APP_vInitialize_system_state>:
	meter.system_state.changing_configuration = false;
 101f394:	4b04      	ldr	r3, [pc, #16]	; (101f3a8 <SM_APP_vInitialize_system_state+0x14>)
 101f396:	2200      	movs	r2, #0
	meter.system_state.initialiting = true;
 101f398:	2101      	movs	r1, #1
 101f39a:	f883 1020 	strb.w	r1, [r3, #32]
	meter.system_state.changing_configuration = false;
 101f39e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	meter.system_state.busy = false;
 101f3a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 101f3a6:	4770      	bx	lr
 101f3a8:	20016c2c 	.word	0x20016c2c

0101f3ac <SM_APP_vTrigger_timers>:
void SM_APP_vTrigger_timers(void) {
 101f3ac:	b570      	push	{r4, r5, r6, lr}
	TIMER_start_ms_timer( DIAGNOSTICS_EXECUTION_TIMER, (uint32_t)TIMER_ms_to_tic(20000), null_action );
 101f3ae:	4d0c      	ldr	r5, [pc, #48]	; (101f3e0 <SM_APP_vTrigger_timers+0x34>)
 101f3b0:	4c0c      	ldr	r4, [pc, #48]	; (101f3e4 <SM_APP_vTrigger_timers+0x38>)
 101f3b2:	462a      	mov	r2, r5
 101f3b4:	f644 6120 	movw	r1, #20000	; 0x4e20
 101f3b8:	200c      	movs	r0, #12
 101f3ba:	47a0      	blx	r4
	TIMER_start_ms_timer( CONFIGURATION_ERROR_TIMER, (uint32_t)TIMER_ms_to_tic(20000), null_action );
 101f3bc:	462a      	mov	r2, r5
 101f3be:	f644 6120 	movw	r1, #20000	; 0x4e20
 101f3c2:	200d      	movs	r0, #13
 101f3c4:	47a0      	blx	r4
	TIMER_start_ms_timer( IO_MCU_CONFIG_TIMER, TIMER_ms_to_tic(5000), null_action );
 101f3c6:	462a      	mov	r2, r5
 101f3c8:	f241 3188 	movw	r1, #5000	; 0x1388
 101f3cc:	200b      	movs	r0, #11
 101f3ce:	47a0      	blx	r4
	TIMER_start_ms_timer( METROLOGY_CHECK_TIMER, TIMER_ms_to_tic(1000), null_action );
 101f3d0:	462a      	mov	r2, r5
 101f3d2:	4623      	mov	r3, r4
 101f3d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 101f3d8:	200a      	movs	r0, #10
}
 101f3da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	TIMER_start_ms_timer( METROLOGY_CHECK_TIMER, TIMER_ms_to_tic(1000), null_action );
 101f3de:	4718      	bx	r3
 101f3e0:	0102ba4d 	.word	0x0102ba4d
 101f3e4:	0102ba8d 	.word	0x0102ba8d

0101f3e8 <SM_APP_vCreate_task>:
{
 101f3e8:	b510      	push	{r4, lr}
 101f3ea:	b084      	sub	sp, #16
	xTaskCreate( SM_APP_vTask, (const signed char * const ) "SM_APP_vTask", SM_STACK_SIZE, NULL, SM_APP_vTask_PRIO, NULL );
 101f3ec:	2300      	movs	r3, #0
 101f3ee:	9303      	str	r3, [sp, #12]
 101f3f0:	9302      	str	r3, [sp, #8]
 101f3f2:	9301      	str	r3, [sp, #4]
 101f3f4:	9300      	str	r3, [sp, #0]
 101f3f6:	f240 228a 	movw	r2, #650	; 0x28a
 101f3fa:	4903      	ldr	r1, [pc, #12]	; (101f408 <SM_APP_vCreate_task+0x20>)
 101f3fc:	4c03      	ldr	r4, [pc, #12]	; (101f40c <SM_APP_vCreate_task+0x24>)
 101f3fe:	4804      	ldr	r0, [pc, #16]	; (101f410 <SM_APP_vCreate_task+0x28>)
 101f400:	47a0      	blx	r4
}
 101f402:	b004      	add	sp, #16
 101f404:	bd10      	pop	{r4, pc}
 101f406:	bf00      	nop
 101f408:	010315f8 	.word	0x010315f8
 101f40c:	0102e7f9 	.word	0x0102e7f9
 101f410:	0102142d 	.word	0x0102142d

0101f414 <SM_APP_usSt_11_nvm_calculate_crc>:
uint16_t SM_APP_usSt_11_nvm_calculate_crc(void) {
 101f414:	b510      	push	{r4, lr}
	REGS_APP_vCopy_st_11_nvm(&tbl_array[0]);
 101f416:	4c06      	ldr	r4, [pc, #24]	; (101f430 <SM_APP_usSt_11_nvm_calculate_crc+0x1c>)
 101f418:	4b06      	ldr	r3, [pc, #24]	; (101f434 <SM_APP_usSt_11_nvm_calculate_crc+0x20>)
 101f41a:	4620      	mov	r0, r4
 101f41c:	4798      	blx	r3
	return CRC_crc16( &tbl_array[0], REGS_APP_usSt_11_get_size() );
 101f41e:	4b06      	ldr	r3, [pc, #24]	; (101f438 <SM_APP_usSt_11_nvm_calculate_crc+0x24>)
 101f420:	4798      	blx	r3
 101f422:	4b06      	ldr	r3, [pc, #24]	; (101f43c <SM_APP_usSt_11_nvm_calculate_crc+0x28>)
 101f424:	4601      	mov	r1, r0
 101f426:	4620      	mov	r0, r4
}
 101f428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return CRC_crc16( &tbl_array[0], REGS_APP_usSt_11_get_size() );
 101f42c:	4718      	bx	r3
 101f42e:	bf00      	nop
 101f430:	20000c78 	.word	0x20000c78
 101f434:	01026615 	.word	0x01026615
 101f438:	01026711 	.word	0x01026711
 101f43c:	01016b5d 	.word	0x01016b5d

0101f440 <SM_APP_usSt_11_ram_calculate_crc>:
uint16_t SM_APP_usSt_11_ram_calculate_crc(void) {
 101f440:	b510      	push	{r4, lr}
	REGS_APP_vCopy_st_11_ram(&tbl_array[0]);
 101f442:	4c06      	ldr	r4, [pc, #24]	; (101f45c <SM_APP_usSt_11_ram_calculate_crc+0x1c>)
 101f444:	4b06      	ldr	r3, [pc, #24]	; (101f460 <SM_APP_usSt_11_ram_calculate_crc+0x20>)
 101f446:	4620      	mov	r0, r4
 101f448:	4798      	blx	r3
	return CRC_crc16( &tbl_array[0], REGS_APP_usSt_11_get_size() );
 101f44a:	4b06      	ldr	r3, [pc, #24]	; (101f464 <SM_APP_usSt_11_ram_calculate_crc+0x24>)
 101f44c:	4798      	blx	r3
 101f44e:	4b06      	ldr	r3, [pc, #24]	; (101f468 <SM_APP_usSt_11_ram_calculate_crc+0x28>)
 101f450:	4601      	mov	r1, r0
 101f452:	4620      	mov	r0, r4
}
 101f454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return CRC_crc16( &tbl_array[0], REGS_APP_usSt_11_get_size() );
 101f458:	4718      	bx	r3
 101f45a:	bf00      	nop
 101f45c:	20000c78 	.word	0x20000c78
 101f460:	010265e5 	.word	0x010265e5
 101f464:	01026711 	.word	0x01026711
 101f468:	01016b5d 	.word	0x01016b5d

0101f46c <SM_APP_vIs_st_11_corrupted_data>:
bool SM_APP_vIs_st_11_corrupted_data(void) {
 101f46c:	b530      	push	{r4, r5, lr}
	cfg_table.size = REGS_APP_usSt_11_get_size();
 101f46e:	4b16      	ldr	r3, [pc, #88]	; (101f4c8 <SM_APP_vIs_st_11_corrupted_data+0x5c>)
 101f470:	4c16      	ldr	r4, [pc, #88]	; (101f4cc <SM_APP_vIs_st_11_corrupted_data+0x60>)
	meter.config_state.st_11_state = SM_APP_ucCheck_table_ram_vs_nvm(cfg_table);
 101f472:	4d17      	ldr	r5, [pc, #92]	; (101f4d0 <SM_APP_vIs_st_11_corrupted_data+0x64>)
bool SM_APP_vIs_st_11_corrupted_data(void) {
 101f474:	b083      	sub	sp, #12
	cfg_table.size = REGS_APP_usSt_11_get_size();
 101f476:	4798      	blx	r3
	cfg_table.crc_nvm = SM_APP_usSt_11_nvm_calculate_crc();
 101f478:	4b16      	ldr	r3, [pc, #88]	; (101f4d4 <SM_APP_vIs_st_11_corrupted_data+0x68>)
	cfg_table.size = REGS_APP_usSt_11_get_size();
 101f47a:	8020      	strh	r0, [r4, #0]
	cfg_table.crc_nvm = SM_APP_usSt_11_nvm_calculate_crc();
 101f47c:	4798      	blx	r3
	cfg_table.crc_ram = SM_APP_usSt_11_ram_calculate_crc();
 101f47e:	4b16      	ldr	r3, [pc, #88]	; (101f4d8 <SM_APP_vIs_st_11_corrupted_data+0x6c>)
	cfg_table.crc_nvm = SM_APP_usSt_11_nvm_calculate_crc();
 101f480:	80e0      	strh	r0, [r4, #6]
	cfg_table.crc_ram = SM_APP_usSt_11_ram_calculate_crc();
 101f482:	4798      	blx	r3
	EEPROM_reader( ST_11_NVM_CRC_ADDR, &crc, 2 );
 101f484:	f10d 0106 	add.w	r1, sp, #6
	cfg_table.crc_ram = SM_APP_usSt_11_ram_calculate_crc();
 101f488:	80a0      	strh	r0, [r4, #4]
	EEPROM_reader( ST_11_NVM_CRC_ADDR, &crc, 2 );
 101f48a:	2202      	movs	r2, #2
 101f48c:	4b13      	ldr	r3, [pc, #76]	; (101f4dc <SM_APP_vIs_st_11_corrupted_data+0x70>)
 101f48e:	f240 7096 	movw	r0, #1942	; 0x796
 101f492:	4798      	blx	r3
	return crc;
 101f494:	f8bd 1006 	ldrh.w	r1, [sp, #6]
	cfg_table.recover_nvm_table = REGS_APP_vSt_11_recover_nvm;
 101f498:	4a11      	ldr	r2, [pc, #68]	; (101f4e0 <SM_APP_vIs_st_11_corrupted_data+0x74>)
	cfg_table.recover_ram_table = REGS_APP_vSt_11_recover_ram;
 101f49a:	4b12      	ldr	r3, [pc, #72]	; (101f4e4 <SM_APP_vIs_st_11_corrupted_data+0x78>)
	cfg_table.crc_stored = SM_APP_usSt_11_read_crc();
 101f49c:	8061      	strh	r1, [r4, #2]
	cfg_table.recover_nvm_table = REGS_APP_vSt_11_recover_nvm;
 101f49e:	60a2      	str	r2, [r4, #8]
	cfg_table.recover_ram_table = REGS_APP_vSt_11_recover_ram;
 101f4a0:	60e3      	str	r3, [r4, #12]
	meter.config_state.st_11_state = SM_APP_ucCheck_table_ram_vs_nvm(cfg_table);
 101f4a2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 101f4a6:	4c10      	ldr	r4, [pc, #64]	; (101f4e8 <SM_APP_vIs_st_11_corrupted_data+0x7c>)
 101f4a8:	47a0      	blx	r4
 101f4aa:	4629      	mov	r1, r5
	EEPROM_writer( MT_5_ST11_ERROR_CODE_ADDR, &meter.config_state.st_11_state, 1 );
 101f4ac:	2201      	movs	r2, #1
	meter.config_state.st_11_state = SM_APP_ucCheck_table_ram_vs_nvm(cfg_table);
 101f4ae:	f801 0f0a 	strb.w	r0, [r1, #10]!
	EEPROM_writer( MT_5_ST11_ERROR_CODE_ADDR, &meter.config_state.st_11_state, 1 );
 101f4b2:	4b0e      	ldr	r3, [pc, #56]	; (101f4ec <SM_APP_vIs_st_11_corrupted_data+0x80>)
 101f4b4:	f249 2057 	movw	r0, #37463	; 0x9257
 101f4b8:	4798      	blx	r3
	if ( meter.config_state.st_11_state != TBL_DATA_OK ) {
 101f4ba:	7aa8      	ldrb	r0, [r5, #10]
}
 101f4bc:	3000      	adds	r0, #0
 101f4be:	bf18      	it	ne
 101f4c0:	2001      	movne	r0, #1
 101f4c2:	b003      	add	sp, #12
 101f4c4:	bd30      	pop	{r4, r5, pc}
 101f4c6:	bf00      	nop
 101f4c8:	01026711 	.word	0x01026711
 101f4cc:	20000c60 	.word	0x20000c60
 101f4d0:	20016c2c 	.word	0x20016c2c
 101f4d4:	0101f415 	.word	0x0101f415
 101f4d8:	0101f441 	.word	0x0101f441
 101f4dc:	01017511 	.word	0x01017511
 101f4e0:	01026659 	.word	0x01026659
 101f4e4:	01026661 	.word	0x01026661
 101f4e8:	0101f26d 	.word	0x0101f26d
 101f4ec:	01017509 	.word	0x01017509

0101f4f0 <SM_APP_vSt_11_write_crc>:
void SM_APP_vSt_11_write_crc(uint16_t crc) {
 101f4f0:	b500      	push	{lr}
 101f4f2:	b083      	sub	sp, #12
 101f4f4:	a902      	add	r1, sp, #8
	EEPROM_writer( ST_11_NVM_CRC_ADDR, &crc, 2 );
 101f4f6:	2202      	movs	r2, #2
void SM_APP_vSt_11_write_crc(uint16_t crc) {
 101f4f8:	f821 0d02 	strh.w	r0, [r1, #-2]!
	EEPROM_writer( ST_11_NVM_CRC_ADDR, &crc, 2 );
 101f4fc:	4b03      	ldr	r3, [pc, #12]	; (101f50c <SM_APP_vSt_11_write_crc+0x1c>)
 101f4fe:	f240 7096 	movw	r0, #1942	; 0x796
 101f502:	4798      	blx	r3
}
 101f504:	b003      	add	sp, #12
 101f506:	f85d fb04 	ldr.w	pc, [sp], #4
 101f50a:	bf00      	nop
 101f50c:	01017509 	.word	0x01017509

0101f510 <SM_APP_usSt_21_nvm_calculate_crc>:
uint16_t SM_APP_usSt_21_nvm_calculate_crc(void) {
 101f510:	b510      	push	{r4, lr}
	REGS_APP_vCopy_st_21_nvm(&tbl_array[0]);
 101f512:	4c06      	ldr	r4, [pc, #24]	; (101f52c <SM_APP_usSt_21_nvm_calculate_crc+0x1c>)
 101f514:	4b06      	ldr	r3, [pc, #24]	; (101f530 <SM_APP_usSt_21_nvm_calculate_crc+0x20>)
 101f516:	4620      	mov	r0, r4
 101f518:	4798      	blx	r3
	return CRC_crc16( &tbl_array[0], REGS_APP_usSt_21_get_size() );
 101f51a:	4b06      	ldr	r3, [pc, #24]	; (101f534 <SM_APP_usSt_21_nvm_calculate_crc+0x24>)
 101f51c:	4798      	blx	r3
 101f51e:	4b06      	ldr	r3, [pc, #24]	; (101f538 <SM_APP_usSt_21_nvm_calculate_crc+0x28>)
 101f520:	4601      	mov	r1, r0
 101f522:	4620      	mov	r0, r4
}
 101f524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return CRC_crc16( &tbl_array[0], REGS_APP_usSt_21_get_size() );
 101f528:	4718      	bx	r3
 101f52a:	bf00      	nop
 101f52c:	20000c78 	.word	0x20000c78
 101f530:	01026cb9 	.word	0x01026cb9
 101f534:	01026de5 	.word	0x01026de5
 101f538:	01016b5d 	.word	0x01016b5d

0101f53c <SM_APP_usSt_21_ram_calculate_crc>:
uint16_t SM_APP_usSt_21_ram_calculate_crc(void) {
 101f53c:	b510      	push	{r4, lr}
	REGS_APP_vCopy_st_21_ram(&tbl_array[0]);
 101f53e:	4c06      	ldr	r4, [pc, #24]	; (101f558 <SM_APP_usSt_21_ram_calculate_crc+0x1c>)
 101f540:	4b06      	ldr	r3, [pc, #24]	; (101f55c <SM_APP_usSt_21_ram_calculate_crc+0x20>)
 101f542:	4620      	mov	r0, r4
 101f544:	4798      	blx	r3
	return CRC_crc16( &tbl_array[0], REGS_APP_usSt_21_get_size() );
 101f546:	4b06      	ldr	r3, [pc, #24]	; (101f560 <SM_APP_usSt_21_ram_calculate_crc+0x24>)
 101f548:	4798      	blx	r3
 101f54a:	4b06      	ldr	r3, [pc, #24]	; (101f564 <SM_APP_usSt_21_ram_calculate_crc+0x28>)
 101f54c:	4601      	mov	r1, r0
 101f54e:	4620      	mov	r0, r4
}
 101f550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return CRC_crc16( &tbl_array[0], REGS_APP_usSt_21_get_size() );
 101f554:	4718      	bx	r3
 101f556:	bf00      	nop
 101f558:	20000c78 	.word	0x20000c78
 101f55c:	01026c75 	.word	0x01026c75
 101f560:	01026de5 	.word	0x01026de5
 101f564:	01016b5d 	.word	0x01016b5d

0101f568 <SM_APP_vIs_st_21_corrupted_data>:
bool SM_APP_vIs_st_21_corrupted_data(void) {
 101f568:	b530      	push	{r4, r5, lr}
	cfg_table.size = REGS_APP_usSt_21_get_size();
 101f56a:	4b16      	ldr	r3, [pc, #88]	; (101f5c4 <SM_APP_vIs_st_21_corrupted_data+0x5c>)
 101f56c:	4c16      	ldr	r4, [pc, #88]	; (101f5c8 <SM_APP_vIs_st_21_corrupted_data+0x60>)
	meter.config_state.st_21_state = (TABLE_STATE_TYPE)SM_APP_ucCheck_table_ram_vs_nvm(cfg_table);
 101f56e:	4d17      	ldr	r5, [pc, #92]	; (101f5cc <SM_APP_vIs_st_21_corrupted_data+0x64>)
bool SM_APP_vIs_st_21_corrupted_data(void) {
 101f570:	b083      	sub	sp, #12
	cfg_table.size = REGS_APP_usSt_21_get_size();
 101f572:	4798      	blx	r3
	cfg_table.crc_nvm = SM_APP_usSt_21_nvm_calculate_crc();
 101f574:	4b16      	ldr	r3, [pc, #88]	; (101f5d0 <SM_APP_vIs_st_21_corrupted_data+0x68>)
	cfg_table.size = REGS_APP_usSt_21_get_size();
 101f576:	8020      	strh	r0, [r4, #0]
	cfg_table.crc_nvm = SM_APP_usSt_21_nvm_calculate_crc();
 101f578:	4798      	blx	r3
	cfg_table.crc_ram = SM_APP_usSt_21_ram_calculate_crc();
 101f57a:	4b16      	ldr	r3, [pc, #88]	; (101f5d4 <SM_APP_vIs_st_21_corrupted_data+0x6c>)
	cfg_table.crc_nvm = SM_APP_usSt_21_nvm_calculate_crc();
 101f57c:	80e0      	strh	r0, [r4, #6]
	cfg_table.crc_ram = SM_APP_usSt_21_ram_calculate_crc();
 101f57e:	4798      	blx	r3
	EEPROM_reader( ST_21_NVM_CRC_ADDR, &crc, 2 );
 101f580:	f10d 0106 	add.w	r1, sp, #6
	cfg_table.crc_ram = SM_APP_usSt_21_ram_calculate_crc();
 101f584:	80a0      	strh	r0, [r4, #4]
	EEPROM_reader( ST_21_NVM_CRC_ADDR, &crc, 2 );
 101f586:	2202      	movs	r2, #2
 101f588:	4b13      	ldr	r3, [pc, #76]	; (101f5d8 <SM_APP_vIs_st_21_corrupted_data+0x70>)
 101f58a:	f240 70b4 	movw	r0, #1972	; 0x7b4
 101f58e:	4798      	blx	r3
	return crc;
 101f590:	f8bd 1006 	ldrh.w	r1, [sp, #6]
	cfg_table.recover_nvm_table = REGS_APP_vSt_21_recover_nvm;
 101f594:	4a11      	ldr	r2, [pc, #68]	; (101f5dc <SM_APP_vIs_st_21_corrupted_data+0x74>)
	cfg_table.recover_ram_table = REGS_APP_vSt_21_recover_ram;
 101f596:	4b12      	ldr	r3, [pc, #72]	; (101f5e0 <SM_APP_vIs_st_21_corrupted_data+0x78>)
	cfg_table.crc_stored = SM_APP_usSt_21_read_crc();
 101f598:	8061      	strh	r1, [r4, #2]
	cfg_table.recover_nvm_table = REGS_APP_vSt_21_recover_nvm;
 101f59a:	60a2      	str	r2, [r4, #8]
	cfg_table.recover_ram_table = REGS_APP_vSt_21_recover_ram;
 101f59c:	60e3      	str	r3, [r4, #12]
	meter.config_state.st_21_state = (TABLE_STATE_TYPE)SM_APP_ucCheck_table_ram_vs_nvm(cfg_table);
 101f59e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 101f5a2:	4c10      	ldr	r4, [pc, #64]	; (101f5e4 <SM_APP_vIs_st_21_corrupted_data+0x7c>)
 101f5a4:	47a0      	blx	r4
 101f5a6:	4629      	mov	r1, r5
	EEPROM_writer( MT_5_ST21_ERROR_CODE_ADDR, &meter.config_state.st_21_state, 1 );
 101f5a8:	2201      	movs	r2, #1
	meter.config_state.st_21_state = (TABLE_STATE_TYPE)SM_APP_ucCheck_table_ram_vs_nvm(cfg_table);
 101f5aa:	f801 0f0c 	strb.w	r0, [r1, #12]!
	EEPROM_writer( MT_5_ST21_ERROR_CODE_ADDR, &meter.config_state.st_21_state, 1 );
 101f5ae:	4b0e      	ldr	r3, [pc, #56]	; (101f5e8 <SM_APP_vIs_st_21_corrupted_data+0x80>)
 101f5b0:	f249 2059 	movw	r0, #37465	; 0x9259
 101f5b4:	4798      	blx	r3
	if ( meter.config_state.st_21_state != TBL_DATA_OK ) {
 101f5b6:	7b28      	ldrb	r0, [r5, #12]
}
 101f5b8:	3000      	adds	r0, #0
 101f5ba:	bf18      	it	ne
 101f5bc:	2001      	movne	r0, #1
 101f5be:	b003      	add	sp, #12
 101f5c0:	bd30      	pop	{r4, r5, pc}
 101f5c2:	bf00      	nop
 101f5c4:	01026de5 	.word	0x01026de5
 101f5c8:	20000c60 	.word	0x20000c60
 101f5cc:	20016c2c 	.word	0x20016c2c
 101f5d0:	0101f511 	.word	0x0101f511
 101f5d4:	0101f53d 	.word	0x0101f53d
 101f5d8:	01017511 	.word	0x01017511
 101f5dc:	01026d09 	.word	0x01026d09
 101f5e0:	01026d11 	.word	0x01026d11
 101f5e4:	0101f26d 	.word	0x0101f26d
 101f5e8:	01017509 	.word	0x01017509

0101f5ec <SM_APP_vSt_21_write_crc>:
void SM_APP_vSt_21_write_crc(uint16_t crc) {
 101f5ec:	b500      	push	{lr}
 101f5ee:	b083      	sub	sp, #12
 101f5f0:	a902      	add	r1, sp, #8
	EEPROM_writer( ST_21_NVM_CRC_ADDR, &crc, 2 );
 101f5f2:	2202      	movs	r2, #2
void SM_APP_vSt_21_write_crc(uint16_t crc) {
 101f5f4:	f821 0d02 	strh.w	r0, [r1, #-2]!
	EEPROM_writer( ST_21_NVM_CRC_ADDR, &crc, 2 );
 101f5f8:	4b03      	ldr	r3, [pc, #12]	; (101f608 <SM_APP_vSt_21_write_crc+0x1c>)
 101f5fa:	f240 70b4 	movw	r0, #1972	; 0x7b4
 101f5fe:	4798      	blx	r3
}
 101f600:	b003      	add	sp, #12
 101f602:	f85d fb04 	ldr.w	pc, [sp], #4
 101f606:	bf00      	nop
 101f608:	01017509 	.word	0x01017509

0101f60c <SM_APP_usSt_22_nvm_calculate_crc>:
uint16_t SM_APP_usSt_22_nvm_calculate_crc(void) {
 101f60c:	b510      	push	{r4, lr}
	REGS_APP_vCopy_st_22_nvm(&tbl_array[0]);
 101f60e:	4c06      	ldr	r4, [pc, #24]	; (101f628 <SM_APP_usSt_22_nvm_calculate_crc+0x1c>)
 101f610:	4b06      	ldr	r3, [pc, #24]	; (101f62c <SM_APP_usSt_22_nvm_calculate_crc+0x20>)
 101f612:	4620      	mov	r0, r4
 101f614:	4798      	blx	r3
	return CRC_crc16( &tbl_array[0], REGS_APP_usSt_22_get_size() );
 101f616:	4b06      	ldr	r3, [pc, #24]	; (101f630 <SM_APP_usSt_22_nvm_calculate_crc+0x24>)
 101f618:	4798      	blx	r3
 101f61a:	4b06      	ldr	r3, [pc, #24]	; (101f634 <SM_APP_usSt_22_nvm_calculate_crc+0x28>)
 101f61c:	4601      	mov	r1, r0
 101f61e:	4620      	mov	r0, r4
}
 101f620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return CRC_crc16( &tbl_array[0], REGS_APP_usSt_22_get_size() );
 101f624:	4718      	bx	r3
 101f626:	bf00      	nop
 101f628:	20000c78 	.word	0x20000c78
 101f62c:	01026f05 	.word	0x01026f05
 101f630:	0102701d 	.word	0x0102701d
 101f634:	01016b5d 	.word	0x01016b5d

0101f638 <SM_APP_usSt_22_ram_calculate_crc>:
uint16_t SM_APP_usSt_22_ram_calculate_crc(void) {
 101f638:	b510      	push	{r4, lr}
	REGS_APP_vCopy_st_22_ram(&tbl_array[0]);
 101f63a:	4c06      	ldr	r4, [pc, #24]	; (101f654 <SM_APP_usSt_22_ram_calculate_crc+0x1c>)
 101f63c:	4b06      	ldr	r3, [pc, #24]	; (101f658 <SM_APP_usSt_22_ram_calculate_crc+0x20>)
 101f63e:	4620      	mov	r0, r4
 101f640:	4798      	blx	r3
	return CRC_crc16( &tbl_array[0], REGS_APP_usSt_22_get_size() );
 101f642:	4b06      	ldr	r3, [pc, #24]	; (101f65c <SM_APP_usSt_22_ram_calculate_crc+0x24>)
 101f644:	4798      	blx	r3
 101f646:	4b06      	ldr	r3, [pc, #24]	; (101f660 <SM_APP_usSt_22_ram_calculate_crc+0x28>)
 101f648:	4601      	mov	r1, r0
 101f64a:	4620      	mov	r0, r4
}
 101f64c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return CRC_crc16( &tbl_array[0], REGS_APP_usSt_22_get_size() );
 101f650:	4718      	bx	r3
 101f652:	bf00      	nop
 101f654:	20000c78 	.word	0x20000c78
 101f658:	01026eed 	.word	0x01026eed
 101f65c:	0102701d 	.word	0x0102701d
 101f660:	01016b5d 	.word	0x01016b5d

0101f664 <SM_APP_vIs_st_22_corrupted_data>:
bool SM_APP_vIs_st_22_corrupted_data(void) {
 101f664:	b530      	push	{r4, r5, lr}
	cfg_table.size = REGS_APP_usSt_22_get_size();
 101f666:	4b16      	ldr	r3, [pc, #88]	; (101f6c0 <SM_APP_vIs_st_22_corrupted_data+0x5c>)
 101f668:	4c16      	ldr	r4, [pc, #88]	; (101f6c4 <SM_APP_vIs_st_22_corrupted_data+0x60>)
	meter.config_state.st_22_state = SM_APP_ucCheck_table_ram_vs_nvm(cfg_table);
 101f66a:	4d17      	ldr	r5, [pc, #92]	; (101f6c8 <SM_APP_vIs_st_22_corrupted_data+0x64>)
bool SM_APP_vIs_st_22_corrupted_data(void) {
 101f66c:	b083      	sub	sp, #12
	cfg_table.size = REGS_APP_usSt_22_get_size();
 101f66e:	4798      	blx	r3
	cfg_table.crc_nvm = SM_APP_usSt_22_nvm_calculate_crc();
 101f670:	4b16      	ldr	r3, [pc, #88]	; (101f6cc <SM_APP_vIs_st_22_corrupted_data+0x68>)
	cfg_table.size = REGS_APP_usSt_22_get_size();
 101f672:	8020      	strh	r0, [r4, #0]
	cfg_table.crc_nvm = SM_APP_usSt_22_nvm_calculate_crc();
 101f674:	4798      	blx	r3
	cfg_table.crc_ram = SM_APP_usSt_22_ram_calculate_crc();
 101f676:	4b16      	ldr	r3, [pc, #88]	; (101f6d0 <SM_APP_vIs_st_22_corrupted_data+0x6c>)
	cfg_table.crc_nvm = SM_APP_usSt_22_nvm_calculate_crc();
 101f678:	80e0      	strh	r0, [r4, #6]
	cfg_table.crc_ram = SM_APP_usSt_22_ram_calculate_crc();
 101f67a:	4798      	blx	r3
	EEPROM_reader( ST_22_NVM_CRC_ADDR, &crc, 2 );
 101f67c:	f10d 0106 	add.w	r1, sp, #6
	cfg_table.crc_ram = SM_APP_usSt_22_ram_calculate_crc();
 101f680:	80a0      	strh	r0, [r4, #4]
	EEPROM_reader( ST_22_NVM_CRC_ADDR, &crc, 2 );
 101f682:	2202      	movs	r2, #2
 101f684:	4b13      	ldr	r3, [pc, #76]	; (101f6d4 <SM_APP_vIs_st_22_corrupted_data+0x70>)
 101f686:	f240 70c6 	movw	r0, #1990	; 0x7c6
 101f68a:	4798      	blx	r3
	return crc;
 101f68c:	f8bd 1006 	ldrh.w	r1, [sp, #6]
	cfg_table.recover_nvm_table = REGS_APP_vSt_22_recover_nvm;
 101f690:	4a11      	ldr	r2, [pc, #68]	; (101f6d8 <SM_APP_vIs_st_22_corrupted_data+0x74>)
	cfg_table.recover_ram_table = REGS_APP_vSt_22_recover_ram;
 101f692:	4b12      	ldr	r3, [pc, #72]	; (101f6dc <SM_APP_vIs_st_22_corrupted_data+0x78>)
	cfg_table.crc_stored = SM_APP_usSt_22_read_crc();
 101f694:	8061      	strh	r1, [r4, #2]
	cfg_table.recover_nvm_table = REGS_APP_vSt_22_recover_nvm;
 101f696:	60a2      	str	r2, [r4, #8]
	cfg_table.recover_ram_table = REGS_APP_vSt_22_recover_ram;
 101f698:	60e3      	str	r3, [r4, #12]
	meter.config_state.st_22_state = SM_APP_ucCheck_table_ram_vs_nvm(cfg_table);
 101f69a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 101f69e:	4c10      	ldr	r4, [pc, #64]	; (101f6e0 <SM_APP_vIs_st_22_corrupted_data+0x7c>)
 101f6a0:	47a0      	blx	r4
 101f6a2:	4629      	mov	r1, r5
	EEPROM_writer( MT_5_ST22_ERROR_CODE_ADDR, &meter.config_state.st_22_state, 1 );
 101f6a4:	2201      	movs	r2, #1
	meter.config_state.st_22_state = SM_APP_ucCheck_table_ram_vs_nvm(cfg_table);
 101f6a6:	f801 0f0d 	strb.w	r0, [r1, #13]!
	EEPROM_writer( MT_5_ST22_ERROR_CODE_ADDR, &meter.config_state.st_22_state, 1 );
 101f6aa:	4b0e      	ldr	r3, [pc, #56]	; (101f6e4 <SM_APP_vIs_st_22_corrupted_data+0x80>)
 101f6ac:	f249 205a 	movw	r0, #37466	; 0x925a
 101f6b0:	4798      	blx	r3
	if ( meter.config_state.st_22_state != TBL_DATA_OK ) {
 101f6b2:	7b68      	ldrb	r0, [r5, #13]
}
 101f6b4:	3000      	adds	r0, #0
 101f6b6:	bf18      	it	ne
 101f6b8:	2001      	movne	r0, #1
 101f6ba:	b003      	add	sp, #12
 101f6bc:	bd30      	pop	{r4, r5, pc}
 101f6be:	bf00      	nop
 101f6c0:	0102701d 	.word	0x0102701d
 101f6c4:	20000c60 	.word	0x20000c60
 101f6c8:	20016c2c 	.word	0x20016c2c
 101f6cc:	0101f60d 	.word	0x0101f60d
 101f6d0:	0101f639 	.word	0x0101f639
 101f6d4:	01017511 	.word	0x01017511
 101f6d8:	01026f29 	.word	0x01026f29
 101f6dc:	01026f31 	.word	0x01026f31
 101f6e0:	0101f26d 	.word	0x0101f26d
 101f6e4:	01017509 	.word	0x01017509

0101f6e8 <SM_APP_vSt_22_write_crc>:
void SM_APP_vSt_22_write_crc(uint16_t crc) {
 101f6e8:	b500      	push	{lr}
 101f6ea:	b083      	sub	sp, #12
 101f6ec:	a902      	add	r1, sp, #8
	EEPROM_writer( ST_22_NVM_CRC_ADDR, &crc, 2 );
 101f6ee:	2202      	movs	r2, #2
void SM_APP_vSt_22_write_crc(uint16_t crc) {
 101f6f0:	f821 0d02 	strh.w	r0, [r1, #-2]!
	EEPROM_writer( ST_22_NVM_CRC_ADDR, &crc, 2 );
 101f6f4:	4b03      	ldr	r3, [pc, #12]	; (101f704 <SM_APP_vSt_22_write_crc+0x1c>)
 101f6f6:	f240 70c6 	movw	r0, #1990	; 0x7c6
 101f6fa:	4798      	blx	r3
}
 101f6fc:	b003      	add	sp, #12
 101f6fe:	f85d fb04 	ldr.w	pc, [sp], #4
 101f702:	bf00      	nop
 101f704:	01017509 	.word	0x01017509

0101f708 <SM_APP_usSt_27_nvm_calculate_crc>:
uint16_t SM_APP_usSt_27_nvm_calculate_crc(void) {
 101f708:	b510      	push	{r4, lr}
	REGS_APP_vCopy_st_27_nvm(&tbl_array[0]);
 101f70a:	4c06      	ldr	r4, [pc, #24]	; (101f724 <SM_APP_usSt_27_nvm_calculate_crc+0x1c>)
 101f70c:	4b06      	ldr	r3, [pc, #24]	; (101f728 <SM_APP_usSt_27_nvm_calculate_crc+0x20>)
 101f70e:	4620      	mov	r0, r4
 101f710:	4798      	blx	r3
	return CRC_crc16( &tbl_array[0], REGS_APP_usSt_27_get_size() );
 101f712:	4b06      	ldr	r3, [pc, #24]	; (101f72c <SM_APP_usSt_27_nvm_calculate_crc+0x24>)
 101f714:	4798      	blx	r3
 101f716:	4b06      	ldr	r3, [pc, #24]	; (101f730 <SM_APP_usSt_27_nvm_calculate_crc+0x28>)
 101f718:	4601      	mov	r1, r0
 101f71a:	4620      	mov	r0, r4
}
 101f71c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return CRC_crc16( &tbl_array[0], REGS_APP_usSt_27_get_size() );
 101f720:	4718      	bx	r3
 101f722:	bf00      	nop
 101f724:	20000c78 	.word	0x20000c78
 101f728:	010285b9 	.word	0x010285b9
 101f72c:	01028701 	.word	0x01028701
 101f730:	01016b5d 	.word	0x01016b5d

0101f734 <SM_APP_usSt_27_ram_calculate_crc>:
uint16_t SM_APP_usSt_27_ram_calculate_crc(void) {
 101f734:	b510      	push	{r4, lr}
	REGS_APP_vCopy_st_27_ram(&tbl_array[0]);
 101f736:	4c06      	ldr	r4, [pc, #24]	; (101f750 <SM_APP_usSt_27_ram_calculate_crc+0x1c>)
 101f738:	4b06      	ldr	r3, [pc, #24]	; (101f754 <SM_APP_usSt_27_ram_calculate_crc+0x20>)
 101f73a:	4620      	mov	r0, r4
 101f73c:	4798      	blx	r3
	return CRC_crc16( &tbl_array[0], REGS_APP_usSt_27_get_size() );
 101f73e:	4b06      	ldr	r3, [pc, #24]	; (101f758 <SM_APP_usSt_27_ram_calculate_crc+0x24>)
 101f740:	4798      	blx	r3
 101f742:	4b06      	ldr	r3, [pc, #24]	; (101f75c <SM_APP_usSt_27_ram_calculate_crc+0x28>)
 101f744:	4601      	mov	r1, r0
 101f746:	4620      	mov	r0, r4
}
 101f748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return CRC_crc16( &tbl_array[0], REGS_APP_usSt_27_get_size() );
 101f74c:	4718      	bx	r3
 101f74e:	bf00      	nop
 101f750:	20000c78 	.word	0x20000c78
 101f754:	01028555 	.word	0x01028555
 101f758:	01028701 	.word	0x01028701
 101f75c:	01016b5d 	.word	0x01016b5d

0101f760 <SM_APP_vIs_st_27_corrupted_data>:
bool SM_APP_vIs_st_27_corrupted_data(void) {
 101f760:	b530      	push	{r4, r5, lr}
	cfg_table.size = REGS_APP_usSt_27_get_size();
 101f762:	4b16      	ldr	r3, [pc, #88]	; (101f7bc <SM_APP_vIs_st_27_corrupted_data+0x5c>)
 101f764:	4c16      	ldr	r4, [pc, #88]	; (101f7c0 <SM_APP_vIs_st_27_corrupted_data+0x60>)
	meter.config_state.st_27_state = SM_APP_ucCheck_table_ram_vs_nvm(cfg_table);
 101f766:	4d17      	ldr	r5, [pc, #92]	; (101f7c4 <SM_APP_vIs_st_27_corrupted_data+0x64>)
bool SM_APP_vIs_st_27_corrupted_data(void) {
 101f768:	b083      	sub	sp, #12
	cfg_table.size = REGS_APP_usSt_27_get_size();
 101f76a:	4798      	blx	r3
	cfg_table.crc_nvm = SM_APP_usSt_27_nvm_calculate_crc();
 101f76c:	4b16      	ldr	r3, [pc, #88]	; (101f7c8 <SM_APP_vIs_st_27_corrupted_data+0x68>)
	cfg_table.size = REGS_APP_usSt_27_get_size();
 101f76e:	8020      	strh	r0, [r4, #0]
	cfg_table.crc_nvm = SM_APP_usSt_27_nvm_calculate_crc();
 101f770:	4798      	blx	r3
	cfg_table.crc_ram = SM_APP_usSt_27_ram_calculate_crc();
 101f772:	4b16      	ldr	r3, [pc, #88]	; (101f7cc <SM_APP_vIs_st_27_corrupted_data+0x6c>)
	cfg_table.crc_nvm = SM_APP_usSt_27_nvm_calculate_crc();
 101f774:	80e0      	strh	r0, [r4, #6]
	cfg_table.crc_ram = SM_APP_usSt_27_ram_calculate_crc();
 101f776:	4798      	blx	r3
	EEPROM_reader( ST_27_NVM_CRC_ADDR, &crc, 2 );
 101f778:	f10d 0106 	add.w	r1, sp, #6
	cfg_table.crc_ram = SM_APP_usSt_27_ram_calculate_crc();
 101f77c:	80a0      	strh	r0, [r4, #4]
	EEPROM_reader( ST_27_NVM_CRC_ADDR, &crc, 2 );
 101f77e:	2202      	movs	r2, #2
 101f780:	4b13      	ldr	r3, [pc, #76]	; (101f7d0 <SM_APP_vIs_st_27_corrupted_data+0x70>)
 101f782:	f240 70d6 	movw	r0, #2006	; 0x7d6
 101f786:	4798      	blx	r3
	return crc;
 101f788:	f8bd 1006 	ldrh.w	r1, [sp, #6]
	cfg_table.recover_nvm_table = REGS_APP_vSt_27_recover_nvm;
 101f78c:	4a11      	ldr	r2, [pc, #68]	; (101f7d4 <SM_APP_vIs_st_27_corrupted_data+0x74>)
	cfg_table.recover_ram_table = REGS_APP_vSt_27_recover_ram;
 101f78e:	4b12      	ldr	r3, [pc, #72]	; (101f7d8 <SM_APP_vIs_st_27_corrupted_data+0x78>)
	cfg_table.crc_stored = SM_APP_usSt_27_read_crc();
 101f790:	8061      	strh	r1, [r4, #2]
	cfg_table.recover_nvm_table = REGS_APP_vSt_27_recover_nvm;
 101f792:	60a2      	str	r2, [r4, #8]
	cfg_table.recover_ram_table = REGS_APP_vSt_27_recover_ram;
 101f794:	60e3      	str	r3, [r4, #12]
	meter.config_state.st_27_state = SM_APP_ucCheck_table_ram_vs_nvm(cfg_table);
 101f796:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 101f79a:	4c10      	ldr	r4, [pc, #64]	; (101f7dc <SM_APP_vIs_st_27_corrupted_data+0x7c>)
 101f79c:	47a0      	blx	r4
 101f79e:	4629      	mov	r1, r5
	EEPROM_writer( MT_5_ST27_ERROR_CODE_ADDR, &meter.config_state.st_27_state, 1 );
 101f7a0:	2201      	movs	r2, #1
	meter.config_state.st_27_state = SM_APP_ucCheck_table_ram_vs_nvm(cfg_table);
 101f7a2:	f801 0f0e 	strb.w	r0, [r1, #14]!
	EEPROM_writer( MT_5_ST27_ERROR_CODE_ADDR, &meter.config_state.st_27_state, 1 );
 101f7a6:	4b0e      	ldr	r3, [pc, #56]	; (101f7e0 <SM_APP_vIs_st_27_corrupted_data+0x80>)
 101f7a8:	f249 205b 	movw	r0, #37467	; 0x925b
 101f7ac:	4798      	blx	r3
	if ( meter.config_state.st_27_state != TBL_DATA_OK ) {
 101f7ae:	7ba8      	ldrb	r0, [r5, #14]
}
 101f7b0:	3000      	adds	r0, #0
 101f7b2:	bf18      	it	ne
 101f7b4:	2001      	movne	r0, #1
 101f7b6:	b003      	add	sp, #12
 101f7b8:	bd30      	pop	{r4, r5, pc}
 101f7ba:	bf00      	nop
 101f7bc:	01028701 	.word	0x01028701
 101f7c0:	20000c60 	.word	0x20000c60
 101f7c4:	20016c2c 	.word	0x20016c2c
 101f7c8:	0101f709 	.word	0x0101f709
 101f7cc:	0101f735 	.word	0x0101f735
 101f7d0:	01017511 	.word	0x01017511
 101f7d4:	01028621 	.word	0x01028621
 101f7d8:	01028629 	.word	0x01028629
 101f7dc:	0101f26d 	.word	0x0101f26d
 101f7e0:	01017509 	.word	0x01017509

0101f7e4 <SM_APP_vSt_27_write_crc>:
void SM_APP_vSt_27_write_crc(uint16_t crc) {
 101f7e4:	b500      	push	{lr}
 101f7e6:	b083      	sub	sp, #12
 101f7e8:	a902      	add	r1, sp, #8
	EEPROM_writer( ST_27_NVM_CRC_ADDR, &crc, 2 );
 101f7ea:	2202      	movs	r2, #2
void SM_APP_vSt_27_write_crc(uint16_t crc) {
 101f7ec:	f821 0d02 	strh.w	r0, [r1, #-2]!
	EEPROM_writer( ST_27_NVM_CRC_ADDR, &crc, 2 );
 101f7f0:	4b03      	ldr	r3, [pc, #12]	; (101f800 <SM_APP_vSt_27_write_crc+0x1c>)
 101f7f2:	f240 70d6 	movw	r0, #2006	; 0x7d6
 101f7f6:	4798      	blx	r3
}
 101f7f8:	b003      	add	sp, #12
 101f7fa:	f85d fb04 	ldr.w	pc, [sp], #4
 101f7fe:	bf00      	nop
 101f800:	01017509 	.word	0x01017509

0101f804 <SM_APP_usSt_41_nvm_calculate_crc>:
uint16_t SM_APP_usSt_41_nvm_calculate_crc(void) {
 101f804:	b510      	push	{r4, lr}
	SECR_APP_vCopy_st_41_nvm(&tbl_array[0]);
 101f806:	4c06      	ldr	r4, [pc, #24]	; (101f820 <SM_APP_usSt_41_nvm_calculate_crc+0x1c>)
 101f808:	4b06      	ldr	r3, [pc, #24]	; (101f824 <SM_APP_usSt_41_nvm_calculate_crc+0x20>)
 101f80a:	4620      	mov	r0, r4
 101f80c:	4798      	blx	r3
	return CRC_crc16( &tbl_array[0], SECR_APP_usSt_41_get_size() );
 101f80e:	4b06      	ldr	r3, [pc, #24]	; (101f828 <SM_APP_usSt_41_nvm_calculate_crc+0x24>)
 101f810:	4798      	blx	r3
 101f812:	4b06      	ldr	r3, [pc, #24]	; (101f82c <SM_APP_usSt_41_nvm_calculate_crc+0x28>)
 101f814:	4601      	mov	r1, r0
 101f816:	4620      	mov	r0, r4
}
 101f818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return CRC_crc16( &tbl_array[0], SECR_APP_usSt_41_get_size() );
 101f81c:	4718      	bx	r3
 101f81e:	bf00      	nop
 101f820:	20000c78 	.word	0x20000c78
 101f824:	0102ab4d 	.word	0x0102ab4d
 101f828:	0102ac29 	.word	0x0102ac29
 101f82c:	01016b5d 	.word	0x01016b5d

0101f830 <SM_APP_usSt_41_ram_calculate_crc>:
uint16_t SM_APP_usSt_41_ram_calculate_crc(void) {
 101f830:	b510      	push	{r4, lr}
	SECR_APP_vCopy_st_41_ram(&tbl_array[0]);
 101f832:	4c06      	ldr	r4, [pc, #24]	; (101f84c <SM_APP_usSt_41_ram_calculate_crc+0x1c>)
 101f834:	4b06      	ldr	r3, [pc, #24]	; (101f850 <SM_APP_usSt_41_ram_calculate_crc+0x20>)
 101f836:	4620      	mov	r0, r4
 101f838:	4798      	blx	r3
	return CRC_crc16( &tbl_array[0], SECR_APP_usSt_41_get_size() );
 101f83a:	4b06      	ldr	r3, [pc, #24]	; (101f854 <SM_APP_usSt_41_ram_calculate_crc+0x24>)
 101f83c:	4798      	blx	r3
 101f83e:	4b06      	ldr	r3, [pc, #24]	; (101f858 <SM_APP_usSt_41_ram_calculate_crc+0x28>)
 101f840:	4601      	mov	r1, r0
 101f842:	4620      	mov	r0, r4
}
 101f844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return CRC_crc16( &tbl_array[0], SECR_APP_usSt_41_get_size() );
 101f848:	4718      	bx	r3
 101f84a:	bf00      	nop
 101f84c:	20000c78 	.word	0x20000c78
 101f850:	0102ab29 	.word	0x0102ab29
 101f854:	0102ac29 	.word	0x0102ac29
 101f858:	01016b5d 	.word	0x01016b5d

0101f85c <SM_APP_vIs_st_41_corrupted_data>:
bool SM_APP_vIs_st_41_corrupted_data(void) {
 101f85c:	b530      	push	{r4, r5, lr}
	cfg_table.size = SECR_APP_usSt_41_get_size();
 101f85e:	4b16      	ldr	r3, [pc, #88]	; (101f8b8 <SM_APP_vIs_st_41_corrupted_data+0x5c>)
 101f860:	4c16      	ldr	r4, [pc, #88]	; (101f8bc <SM_APP_vIs_st_41_corrupted_data+0x60>)
	meter.config_state.st_41_state = SM_APP_ucCheck_table_ram_vs_nvm(cfg_table);
 101f862:	4d17      	ldr	r5, [pc, #92]	; (101f8c0 <SM_APP_vIs_st_41_corrupted_data+0x64>)
bool SM_APP_vIs_st_41_corrupted_data(void) {
 101f864:	b083      	sub	sp, #12
	cfg_table.size = SECR_APP_usSt_41_get_size();
 101f866:	4798      	blx	r3
	cfg_table.crc_nvm = SM_APP_usSt_41_nvm_calculate_crc();
 101f868:	4b16      	ldr	r3, [pc, #88]	; (101f8c4 <SM_APP_vIs_st_41_corrupted_data+0x68>)
	cfg_table.size = SECR_APP_usSt_41_get_size();
 101f86a:	8020      	strh	r0, [r4, #0]
	cfg_table.crc_nvm = SM_APP_usSt_41_nvm_calculate_crc();
 101f86c:	4798      	blx	r3
	cfg_table.crc_ram = SM_APP_usSt_41_ram_calculate_crc();
 101f86e:	4b16      	ldr	r3, [pc, #88]	; (101f8c8 <SM_APP_vIs_st_41_corrupted_data+0x6c>)
	cfg_table.crc_nvm = SM_APP_usSt_41_nvm_calculate_crc();
 101f870:	80e0      	strh	r0, [r4, #6]
	cfg_table.crc_ram = SM_APP_usSt_41_ram_calculate_crc();
 101f872:	4798      	blx	r3
	EEPROM_reader( ST_41_NVM_CRC_ADDR, &crc, 2 );
 101f874:	f10d 0106 	add.w	r1, sp, #6
	cfg_table.crc_ram = SM_APP_usSt_41_ram_calculate_crc();
 101f878:	80a0      	strh	r0, [r4, #4]
	EEPROM_reader( ST_41_NVM_CRC_ADDR, &crc, 2 );
 101f87a:	2202      	movs	r2, #2
 101f87c:	4b13      	ldr	r3, [pc, #76]	; (101f8cc <SM_APP_vIs_st_41_corrupted_data+0x70>)
 101f87e:	f640 000c 	movw	r0, #2060	; 0x80c
 101f882:	4798      	blx	r3
	return crc;
 101f884:	f8bd 1006 	ldrh.w	r1, [sp, #6]
	cfg_table.recover_nvm_table = SECR_APP_vSt_41_recover_nvm;
 101f888:	4a11      	ldr	r2, [pc, #68]	; (101f8d0 <SM_APP_vIs_st_41_corrupted_data+0x74>)
	cfg_table.recover_ram_table = SECR_APP_vSt_41_recover_ram;
 101f88a:	4b12      	ldr	r3, [pc, #72]	; (101f8d4 <SM_APP_vIs_st_41_corrupted_data+0x78>)
	cfg_table.crc_stored = SM_APP_usSt_41_read_crc();
 101f88c:	8061      	strh	r1, [r4, #2]
	cfg_table.recover_nvm_table = SECR_APP_vSt_41_recover_nvm;
 101f88e:	60a2      	str	r2, [r4, #8]
	cfg_table.recover_ram_table = SECR_APP_vSt_41_recover_ram;
 101f890:	60e3      	str	r3, [r4, #12]
	meter.config_state.st_41_state = SM_APP_ucCheck_table_ram_vs_nvm(cfg_table);
 101f892:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 101f896:	4c10      	ldr	r4, [pc, #64]	; (101f8d8 <SM_APP_vIs_st_41_corrupted_data+0x7c>)
 101f898:	47a0      	blx	r4
 101f89a:	4629      	mov	r1, r5
	EEPROM_writer( MT_5_ST41_ERROR_CODE_ADDR, &meter.config_state.st_41_state, 1 );
 101f89c:	2201      	movs	r2, #1
	meter.config_state.st_41_state = SM_APP_ucCheck_table_ram_vs_nvm(cfg_table);
 101f89e:	f801 0f0f 	strb.w	r0, [r1, #15]!
	EEPROM_writer( MT_5_ST41_ERROR_CODE_ADDR, &meter.config_state.st_41_state, 1 );
 101f8a2:	4b0e      	ldr	r3, [pc, #56]	; (101f8dc <SM_APP_vIs_st_41_corrupted_data+0x80>)
 101f8a4:	f249 205c 	movw	r0, #37468	; 0x925c
 101f8a8:	4798      	blx	r3
	if ( meter.config_state.st_41_state != TBL_DATA_OK ) {
 101f8aa:	7be8      	ldrb	r0, [r5, #15]
}
 101f8ac:	3000      	adds	r0, #0
 101f8ae:	bf18      	it	ne
 101f8b0:	2001      	movne	r0, #1
 101f8b2:	b003      	add	sp, #12
 101f8b4:	bd30      	pop	{r4, r5, pc}
 101f8b6:	bf00      	nop
 101f8b8:	0102ac29 	.word	0x0102ac29
 101f8bc:	20000c60 	.word	0x20000c60
 101f8c0:	20016c2c 	.word	0x20016c2c
 101f8c4:	0101f805 	.word	0x0101f805
 101f8c8:	0101f831 	.word	0x0101f831
 101f8cc:	01017511 	.word	0x01017511
 101f8d0:	0102ab85 	.word	0x0102ab85
 101f8d4:	0102ab8d 	.word	0x0102ab8d
 101f8d8:	0101f26d 	.word	0x0101f26d
 101f8dc:	01017509 	.word	0x01017509

0101f8e0 <SM_APP_vSt_41_write_crc>:
void SM_APP_vSt_41_write_crc(uint16_t crc) {
 101f8e0:	b500      	push	{lr}
 101f8e2:	b083      	sub	sp, #12
 101f8e4:	a902      	add	r1, sp, #8
	EEPROM_writer( ST_41_NVM_CRC_ADDR, &crc, 2 );
 101f8e6:	2202      	movs	r2, #2
void SM_APP_vSt_41_write_crc(uint16_t crc) {
 101f8e8:	f821 0d02 	strh.w	r0, [r1, #-2]!
	EEPROM_writer( ST_41_NVM_CRC_ADDR, &crc, 2 );
 101f8ec:	4b03      	ldr	r3, [pc, #12]	; (101f8fc <SM_APP_vSt_41_write_crc+0x1c>)
 101f8ee:	f640 000c 	movw	r0, #2060	; 0x80c
 101f8f2:	4798      	blx	r3
}
 101f8f4:	b003      	add	sp, #12
 101f8f6:	f85d fb04 	ldr.w	pc, [sp], #4
 101f8fa:	bf00      	nop
 101f8fc:	01017509 	.word	0x01017509

0101f900 <SM_APP_usSt_42_nvm_calculate_crc>:
uint16_t SM_APP_usSt_42_nvm_calculate_crc(void) {
 101f900:	b510      	push	{r4, lr}
	SECR_APP_vCopy_st_42_nvm(&tbl_array[0]);
 101f902:	4c06      	ldr	r4, [pc, #24]	; (101f91c <SM_APP_usSt_42_nvm_calculate_crc+0x1c>)
 101f904:	4b06      	ldr	r3, [pc, #24]	; (101f920 <SM_APP_usSt_42_nvm_calculate_crc+0x20>)
 101f906:	4620      	mov	r0, r4
 101f908:	4798      	blx	r3
	return CRC_crc16( &tbl_array[0], SECR_APP_usSt_42_get_size() );
 101f90a:	4b06      	ldr	r3, [pc, #24]	; (101f924 <SM_APP_usSt_42_nvm_calculate_crc+0x24>)
 101f90c:	4798      	blx	r3
 101f90e:	4b06      	ldr	r3, [pc, #24]	; (101f928 <SM_APP_usSt_42_nvm_calculate_crc+0x28>)
 101f910:	4601      	mov	r1, r0
 101f912:	4620      	mov	r0, r4
}
 101f914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return CRC_crc16( &tbl_array[0], SECR_APP_usSt_42_get_size() );
 101f918:	4718      	bx	r3
 101f91a:	bf00      	nop
 101f91c:	20000c78 	.word	0x20000c78
 101f920:	0102ad59 	.word	0x0102ad59
 101f924:	0102ae6d 	.word	0x0102ae6d
 101f928:	01016b5d 	.word	0x01016b5d

0101f92c <SM_APP_usSt_42_ram_calculate_crc>:
uint16_t SM_APP_usSt_42_ram_calculate_crc(void) {
 101f92c:	b510      	push	{r4, lr}
	SECR_APP_vCopy_st_42_ram(&tbl_array[0]);
 101f92e:	4c06      	ldr	r4, [pc, #24]	; (101f948 <SM_APP_usSt_42_ram_calculate_crc+0x1c>)
 101f930:	4b06      	ldr	r3, [pc, #24]	; (101f94c <SM_APP_usSt_42_ram_calculate_crc+0x20>)
 101f932:	4620      	mov	r0, r4
 101f934:	4798      	blx	r3
	return CRC_crc16( &tbl_array[0], SECR_APP_usSt_42_get_size() );
 101f936:	4b06      	ldr	r3, [pc, #24]	; (101f950 <SM_APP_usSt_42_ram_calculate_crc+0x24>)
 101f938:	4798      	blx	r3
 101f93a:	4b06      	ldr	r3, [pc, #24]	; (101f954 <SM_APP_usSt_42_ram_calculate_crc+0x28>)
 101f93c:	4601      	mov	r1, r0
 101f93e:	4620      	mov	r0, r4
}
 101f940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return CRC_crc16( &tbl_array[0], SECR_APP_usSt_42_get_size() );
 101f944:	4718      	bx	r3
 101f946:	bf00      	nop
 101f948:	20000c78 	.word	0x20000c78
 101f94c:	0102ad21 	.word	0x0102ad21
 101f950:	0102ae6d 	.word	0x0102ae6d
 101f954:	01016b5d 	.word	0x01016b5d

0101f958 <SM_APP_vIs_st_42_corrupted_data>:
bool SM_APP_vIs_st_42_corrupted_data(void) {
 101f958:	b530      	push	{r4, r5, lr}
	cfg_table.size = SECR_APP_usSt_42_get_size();
 101f95a:	4b16      	ldr	r3, [pc, #88]	; (101f9b4 <SM_APP_vIs_st_42_corrupted_data+0x5c>)
 101f95c:	4c16      	ldr	r4, [pc, #88]	; (101f9b8 <SM_APP_vIs_st_42_corrupted_data+0x60>)
	meter.config_state.st_42_state = SM_APP_ucCheck_table_ram_vs_nvm(cfg_table);
 101f95e:	4d17      	ldr	r5, [pc, #92]	; (101f9bc <SM_APP_vIs_st_42_corrupted_data+0x64>)
bool SM_APP_vIs_st_42_corrupted_data(void) {
 101f960:	b083      	sub	sp, #12
	cfg_table.size = SECR_APP_usSt_42_get_size();
 101f962:	4798      	blx	r3
	cfg_table.crc_nvm = SM_APP_usSt_42_nvm_calculate_crc();
 101f964:	4b16      	ldr	r3, [pc, #88]	; (101f9c0 <SM_APP_vIs_st_42_corrupted_data+0x68>)
	cfg_table.size = SECR_APP_usSt_42_get_size();
 101f966:	8020      	strh	r0, [r4, #0]
	cfg_table.crc_nvm = SM_APP_usSt_42_nvm_calculate_crc();
 101f968:	4798      	blx	r3
	cfg_table.crc_ram = SM_APP_usSt_42_ram_calculate_crc();
 101f96a:	4b16      	ldr	r3, [pc, #88]	; (101f9c4 <SM_APP_vIs_st_42_corrupted_data+0x6c>)
	cfg_table.crc_nvm = SM_APP_usSt_42_nvm_calculate_crc();
 101f96c:	80e0      	strh	r0, [r4, #6]
	cfg_table.crc_ram = SM_APP_usSt_42_ram_calculate_crc();
 101f96e:	4798      	blx	r3
	EEPROM_reader( ST_42_NVM_CRC_ADDR, &crc, 2 );
 101f970:	f10d 0106 	add.w	r1, sp, #6
	cfg_table.crc_ram = SM_APP_usSt_42_ram_calculate_crc();
 101f974:	80a0      	strh	r0, [r4, #4]
	EEPROM_reader( ST_42_NVM_CRC_ADDR, &crc, 2 );
 101f976:	2202      	movs	r2, #2
 101f978:	4b13      	ldr	r3, [pc, #76]	; (101f9c8 <SM_APP_vIs_st_42_corrupted_data+0x70>)
 101f97a:	f640 0018 	movw	r0, #2072	; 0x818
 101f97e:	4798      	blx	r3
	return crc;
 101f980:	f8bd 1006 	ldrh.w	r1, [sp, #6]
	cfg_table.recover_nvm_table = SECR_APP_vSt_42_recover_nvm;
 101f984:	4a11      	ldr	r2, [pc, #68]	; (101f9cc <SM_APP_vIs_st_42_corrupted_data+0x74>)
	cfg_table.recover_ram_table = SECR_APP_vSt_42_recover_ram;
 101f986:	4b12      	ldr	r3, [pc, #72]	; (101f9d0 <SM_APP_vIs_st_42_corrupted_data+0x78>)
	cfg_table.crc_stored = SM_APP_usSt_42_read_crc();
 101f988:	8061      	strh	r1, [r4, #2]
	cfg_table.recover_nvm_table = SECR_APP_vSt_42_recover_nvm;
 101f98a:	60a2      	str	r2, [r4, #8]
	cfg_table.recover_ram_table = SECR_APP_vSt_42_recover_ram;
 101f98c:	60e3      	str	r3, [r4, #12]
	meter.config_state.st_42_state = SM_APP_ucCheck_table_ram_vs_nvm(cfg_table);
 101f98e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 101f992:	4c10      	ldr	r4, [pc, #64]	; (101f9d4 <SM_APP_vIs_st_42_corrupted_data+0x7c>)
 101f994:	47a0      	blx	r4
 101f996:	4629      	mov	r1, r5
	EEPROM_writer( MT_5_ST42_ERROR_CODE_ADDR, &meter.config_state.st_42_state, 1 );
 101f998:	2201      	movs	r2, #1
	meter.config_state.st_42_state = SM_APP_ucCheck_table_ram_vs_nvm(cfg_table);
 101f99a:	f801 0f10 	strb.w	r0, [r1, #16]!
	EEPROM_writer( MT_5_ST42_ERROR_CODE_ADDR, &meter.config_state.st_42_state, 1 );
 101f99e:	4b0e      	ldr	r3, [pc, #56]	; (101f9d8 <SM_APP_vIs_st_42_corrupted_data+0x80>)
 101f9a0:	f249 205d 	movw	r0, #37469	; 0x925d
 101f9a4:	4798      	blx	r3
	if ( meter.config_state.st_42_state != TBL_DATA_OK ) {
 101f9a6:	7c28      	ldrb	r0, [r5, #16]
}
 101f9a8:	3000      	adds	r0, #0
 101f9aa:	bf18      	it	ne
 101f9ac:	2001      	movne	r0, #1
 101f9ae:	b003      	add	sp, #12
 101f9b0:	bd30      	pop	{r4, r5, pc}
 101f9b2:	bf00      	nop
 101f9b4:	0102ae6d 	.word	0x0102ae6d
 101f9b8:	20000c60 	.word	0x20000c60
 101f9bc:	20016c2c 	.word	0x20016c2c
 101f9c0:	0101f901 	.word	0x0101f901
 101f9c4:	0101f92d 	.word	0x0101f92d
 101f9c8:	01017511 	.word	0x01017511
 101f9cc:	0102ad91 	.word	0x0102ad91
 101f9d0:	0102ad99 	.word	0x0102ad99
 101f9d4:	0101f26d 	.word	0x0101f26d
 101f9d8:	01017509 	.word	0x01017509

0101f9dc <SM_APP_vSt_42_write_crc>:
void SM_APP_vSt_42_write_crc(uint16_t crc) {
 101f9dc:	b500      	push	{lr}
 101f9de:	b083      	sub	sp, #12
 101f9e0:	a902      	add	r1, sp, #8
	EEPROM_writer( ST_42_NVM_CRC_ADDR, &crc, 2 );
 101f9e2:	2202      	movs	r2, #2
void SM_APP_vSt_42_write_crc(uint16_t crc) {
 101f9e4:	f821 0d02 	strh.w	r0, [r1, #-2]!
	EEPROM_writer( ST_42_NVM_CRC_ADDR, &crc, 2 );
 101f9e8:	4b03      	ldr	r3, [pc, #12]	; (101f9f8 <SM_APP_vSt_42_write_crc+0x1c>)
 101f9ea:	f640 0018 	movw	r0, #2072	; 0x818
 101f9ee:	4798      	blx	r3
}
 101f9f0:	b003      	add	sp, #12
 101f9f2:	f85d fb04 	ldr.w	pc, [sp], #4
 101f9f6:	bf00      	nop
 101f9f8:	01017509 	.word	0x01017509

0101f9fc <SM_APP_usSt_43_nvm_calculate_crc>:
uint16_t SM_APP_usSt_43_nvm_calculate_crc(void) {
 101f9fc:	b510      	push	{r4, lr}
	SECR_APP_vCopy_st_43_nvm(&tbl_array[0]);
 101f9fe:	4c06      	ldr	r4, [pc, #24]	; (101fa18 <SM_APP_usSt_43_nvm_calculate_crc+0x1c>)
 101fa00:	4b06      	ldr	r3, [pc, #24]	; (101fa1c <SM_APP_usSt_43_nvm_calculate_crc+0x20>)
 101fa02:	4620      	mov	r0, r4
 101fa04:	4798      	blx	r3
	return CRC_crc16( &tbl_array[0], SECR_APP_usSt_43_get_size() );
 101fa06:	4b06      	ldr	r3, [pc, #24]	; (101fa20 <SM_APP_usSt_43_nvm_calculate_crc+0x24>)
 101fa08:	4798      	blx	r3
 101fa0a:	4b06      	ldr	r3, [pc, #24]	; (101fa24 <SM_APP_usSt_43_nvm_calculate_crc+0x28>)
 101fa0c:	4601      	mov	r1, r0
 101fa0e:	4620      	mov	r0, r4
}
 101fa10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return CRC_crc16( &tbl_array[0], SECR_APP_usSt_43_get_size() );
 101fa14:	4718      	bx	r3
 101fa16:	bf00      	nop
 101fa18:	20000c78 	.word	0x20000c78
 101fa1c:	0102af25 	.word	0x0102af25
 101fa20:	0102afed 	.word	0x0102afed
 101fa24:	01016b5d 	.word	0x01016b5d

0101fa28 <SM_APP_usSt_43_ram_calculate_crc>:
uint16_t SM_APP_usSt_43_ram_calculate_crc(void) {
 101fa28:	b510      	push	{r4, lr}
	SECR_APP_vCopy_st_43_ram(&tbl_array[0]);
 101fa2a:	4c06      	ldr	r4, [pc, #24]	; (101fa44 <SM_APP_usSt_43_ram_calculate_crc+0x1c>)
 101fa2c:	4b06      	ldr	r3, [pc, #24]	; (101fa48 <SM_APP_usSt_43_ram_calculate_crc+0x20>)
 101fa2e:	4620      	mov	r0, r4
 101fa30:	4798      	blx	r3
	return CRC_crc16( &tbl_array[0], SECR_APP_usSt_43_get_size() );
 101fa32:	4b06      	ldr	r3, [pc, #24]	; (101fa4c <SM_APP_usSt_43_ram_calculate_crc+0x24>)
 101fa34:	4798      	blx	r3
 101fa36:	4b06      	ldr	r3, [pc, #24]	; (101fa50 <SM_APP_usSt_43_ram_calculate_crc+0x28>)
 101fa38:	4601      	mov	r1, r0
 101fa3a:	4620      	mov	r0, r4
}
 101fa3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return CRC_crc16( &tbl_array[0], SECR_APP_usSt_43_get_size() );
 101fa40:	4718      	bx	r3
 101fa42:	bf00      	nop
 101fa44:	20000c78 	.word	0x20000c78
 101fa48:	0102aef5 	.word	0x0102aef5
 101fa4c:	0102afed 	.word	0x0102afed
 101fa50:	01016b5d 	.word	0x01016b5d

0101fa54 <SM_APP_vIs_st_43_corrupted_data>:
bool SM_APP_vIs_st_43_corrupted_data(void) {
 101fa54:	b530      	push	{r4, r5, lr}
	cfg_table.size = SECR_APP_usSt_43_get_size();
 101fa56:	4b16      	ldr	r3, [pc, #88]	; (101fab0 <SM_APP_vIs_st_43_corrupted_data+0x5c>)
 101fa58:	4c16      	ldr	r4, [pc, #88]	; (101fab4 <SM_APP_vIs_st_43_corrupted_data+0x60>)
	meter.config_state.st_43_state = SM_APP_ucCheck_table_ram_vs_nvm(cfg_table);
 101fa5a:	4d17      	ldr	r5, [pc, #92]	; (101fab8 <SM_APP_vIs_st_43_corrupted_data+0x64>)
bool SM_APP_vIs_st_43_corrupted_data(void) {
 101fa5c:	b083      	sub	sp, #12
	cfg_table.size = SECR_APP_usSt_43_get_size();
 101fa5e:	4798      	blx	r3
	cfg_table.crc_nvm = SM_APP_usSt_43_nvm_calculate_crc();
 101fa60:	4b16      	ldr	r3, [pc, #88]	; (101fabc <SM_APP_vIs_st_43_corrupted_data+0x68>)
	cfg_table.size = SECR_APP_usSt_43_get_size();
 101fa62:	8020      	strh	r0, [r4, #0]
	cfg_table.crc_nvm = SM_APP_usSt_43_nvm_calculate_crc();
 101fa64:	4798      	blx	r3
	cfg_table.crc_ram = SM_APP_usSt_43_ram_calculate_crc();
 101fa66:	4b16      	ldr	r3, [pc, #88]	; (101fac0 <SM_APP_vIs_st_43_corrupted_data+0x6c>)
	cfg_table.crc_nvm = SM_APP_usSt_43_nvm_calculate_crc();
 101fa68:	80e0      	strh	r0, [r4, #6]
	cfg_table.crc_ram = SM_APP_usSt_43_ram_calculate_crc();
 101fa6a:	4798      	blx	r3
	EEPROM_reader( ST_43_NVM_CRC_ADDR, &crc, 2 );
 101fa6c:	f10d 0106 	add.w	r1, sp, #6
	cfg_table.crc_ram = SM_APP_usSt_43_ram_calculate_crc();
 101fa70:	80a0      	strh	r0, [r4, #4]
	EEPROM_reader( ST_43_NVM_CRC_ADDR, &crc, 2 );
 101fa72:	2202      	movs	r2, #2
 101fa74:	4b13      	ldr	r3, [pc, #76]	; (101fac4 <SM_APP_vIs_st_43_corrupted_data+0x70>)
 101fa76:	f640 00d8 	movw	r0, #2264	; 0x8d8
 101fa7a:	4798      	blx	r3
	return crc;
 101fa7c:	f8bd 1006 	ldrh.w	r1, [sp, #6]
	cfg_table.recover_nvm_table = SECR_APP_vSt_43_recover_nvm;
 101fa80:	4a11      	ldr	r2, [pc, #68]	; (101fac8 <SM_APP_vIs_st_43_corrupted_data+0x74>)
	cfg_table.recover_ram_table = SECR_APP_vSt_43_recover_ram;
 101fa82:	4b12      	ldr	r3, [pc, #72]	; (101facc <SM_APP_vIs_st_43_corrupted_data+0x78>)
	cfg_table.crc_stored = SM_APP_usSt_43_read_crc();
 101fa84:	8061      	strh	r1, [r4, #2]
	cfg_table.recover_nvm_table = SECR_APP_vSt_43_recover_nvm;
 101fa86:	60a2      	str	r2, [r4, #8]
	cfg_table.recover_ram_table = SECR_APP_vSt_43_recover_ram;
 101fa88:	60e3      	str	r3, [r4, #12]
	meter.config_state.st_43_state = SM_APP_ucCheck_table_ram_vs_nvm(cfg_table);
 101fa8a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 101fa8e:	4c10      	ldr	r4, [pc, #64]	; (101fad0 <SM_APP_vIs_st_43_corrupted_data+0x7c>)
 101fa90:	47a0      	blx	r4
 101fa92:	4629      	mov	r1, r5
	EEPROM_writer( MT_5_ST43_ERROR_CODE_ADDR, &meter.config_state.st_43_state, 1 );
 101fa94:	2201      	movs	r2, #1
	meter.config_state.st_43_state = SM_APP_ucCheck_table_ram_vs_nvm(cfg_table);
 101fa96:	f801 0f11 	strb.w	r0, [r1, #17]!
	EEPROM_writer( MT_5_ST43_ERROR_CODE_ADDR, &meter.config_state.st_43_state, 1 );
 101fa9a:	4b0e      	ldr	r3, [pc, #56]	; (101fad4 <SM_APP_vIs_st_43_corrupted_data+0x80>)
 101fa9c:	f249 205e 	movw	r0, #37470	; 0x925e
 101faa0:	4798      	blx	r3
	if ( meter.config_state.st_43_state != TBL_DATA_OK ) {
 101faa2:	7c68      	ldrb	r0, [r5, #17]
}
 101faa4:	3000      	adds	r0, #0
 101faa6:	bf18      	it	ne
 101faa8:	2001      	movne	r0, #1
 101faaa:	b003      	add	sp, #12
 101faac:	bd30      	pop	{r4, r5, pc}
 101faae:	bf00      	nop
 101fab0:	0102afed 	.word	0x0102afed
 101fab4:	20000c60 	.word	0x20000c60
 101fab8:	20016c2c 	.word	0x20016c2c
 101fabc:	0101f9fd 	.word	0x0101f9fd
 101fac0:	0101fa29 	.word	0x0101fa29
 101fac4:	01017511 	.word	0x01017511
 101fac8:	0102af65 	.word	0x0102af65
 101facc:	0102af6d 	.word	0x0102af6d
 101fad0:	0101f26d 	.word	0x0101f26d
 101fad4:	01017509 	.word	0x01017509

0101fad8 <SM_APP_vSt_43_write_crc>:
void SM_APP_vSt_43_write_crc(uint16_t crc) {
 101fad8:	b500      	push	{lr}
 101fada:	b083      	sub	sp, #12
 101fadc:	a902      	add	r1, sp, #8
	EEPROM_writer( ST_43_NVM_CRC_ADDR, &crc, 2 );
 101fade:	2202      	movs	r2, #2
void SM_APP_vSt_43_write_crc(uint16_t crc) {
 101fae0:	f821 0d02 	strh.w	r0, [r1, #-2]!
	EEPROM_writer( ST_43_NVM_CRC_ADDR, &crc, 2 );
 101fae4:	4b03      	ldr	r3, [pc, #12]	; (101faf4 <SM_APP_vSt_43_write_crc+0x1c>)
 101fae6:	f640 00d8 	movw	r0, #2264	; 0x8d8
 101faea:	4798      	blx	r3
}
 101faec:	b003      	add	sp, #12
 101faee:	f85d fb04 	ldr.w	pc, [sp], #4
 101faf2:	bf00      	nop
 101faf4:	01017509 	.word	0x01017509

0101faf8 <SM_APP_usSt_44_nvm_calculate_crc>:
uint16_t SM_APP_usSt_44_nvm_calculate_crc(void) {
 101faf8:	b510      	push	{r4, lr}
	memset(&tbl_array[0], 0, sizeof(tbl_array));
 101fafa:	4c09      	ldr	r4, [pc, #36]	; (101fb20 <SM_APP_usSt_44_nvm_calculate_crc+0x28>)
 101fafc:	4b09      	ldr	r3, [pc, #36]	; (101fb24 <SM_APP_usSt_44_nvm_calculate_crc+0x2c>)
 101fafe:	2100      	movs	r1, #0
 101fb00:	f44f 7216 	mov.w	r2, #600	; 0x258
 101fb04:	4620      	mov	r0, r4
 101fb06:	4798      	blx	r3
	SECR_APP_vCopy_st_44_nvm(&tbl_array[0]);
 101fb08:	4620      	mov	r0, r4
 101fb0a:	4b07      	ldr	r3, [pc, #28]	; (101fb28 <SM_APP_usSt_44_nvm_calculate_crc+0x30>)
 101fb0c:	4798      	blx	r3
	return CRC_crc16( &tbl_array[0], SECR_APP_usSt_44_get_size() );
 101fb0e:	4b07      	ldr	r3, [pc, #28]	; (101fb2c <SM_APP_usSt_44_nvm_calculate_crc+0x34>)
 101fb10:	4798      	blx	r3
 101fb12:	4b07      	ldr	r3, [pc, #28]	; (101fb30 <SM_APP_usSt_44_nvm_calculate_crc+0x38>)
 101fb14:	4601      	mov	r1, r0
 101fb16:	4620      	mov	r0, r4
}
 101fb18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return CRC_crc16( &tbl_array[0], SECR_APP_usSt_44_get_size() );
 101fb1c:	4718      	bx	r3
 101fb1e:	bf00      	nop
 101fb20:	20000c78 	.word	0x20000c78
 101fb24:	01030b71 	.word	0x01030b71
 101fb28:	0102b115 	.word	0x0102b115
 101fb2c:	0102b285 	.word	0x0102b285
 101fb30:	01016b5d 	.word	0x01016b5d

0101fb34 <SM_APP_usSt_44_ram_calculate_crc>:
uint16_t SM_APP_usSt_44_ram_calculate_crc(void) {
 101fb34:	b510      	push	{r4, lr}
	memset(&tbl_array[0], 0, sizeof(tbl_array));
 101fb36:	4c09      	ldr	r4, [pc, #36]	; (101fb5c <SM_APP_usSt_44_ram_calculate_crc+0x28>)
 101fb38:	4b09      	ldr	r3, [pc, #36]	; (101fb60 <SM_APP_usSt_44_ram_calculate_crc+0x2c>)
 101fb3a:	2100      	movs	r1, #0
 101fb3c:	f44f 7216 	mov.w	r2, #600	; 0x258
 101fb40:	4620      	mov	r0, r4
 101fb42:	4798      	blx	r3
	SECR_APP_vCopy_st_44_ram(&tbl_array[0]);
 101fb44:	4620      	mov	r0, r4
 101fb46:	4b07      	ldr	r3, [pc, #28]	; (101fb64 <SM_APP_usSt_44_ram_calculate_crc+0x30>)
 101fb48:	4798      	blx	r3
	return CRC_crc16( &tbl_array[0], SECR_APP_usSt_44_get_size() );
 101fb4a:	4b07      	ldr	r3, [pc, #28]	; (101fb68 <SM_APP_usSt_44_ram_calculate_crc+0x34>)
 101fb4c:	4798      	blx	r3
 101fb4e:	4b07      	ldr	r3, [pc, #28]	; (101fb6c <SM_APP_usSt_44_ram_calculate_crc+0x38>)
 101fb50:	4601      	mov	r1, r0
 101fb52:	4620      	mov	r0, r4
}
 101fb54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return CRC_crc16( &tbl_array[0], SECR_APP_usSt_44_get_size() );
 101fb58:	4718      	bx	r3
 101fb5a:	bf00      	nop
 101fb5c:	20000c78 	.word	0x20000c78
 101fb60:	01030b71 	.word	0x01030b71
 101fb64:	0102b0a9 	.word	0x0102b0a9
 101fb68:	0102b285 	.word	0x0102b285
 101fb6c:	01016b5d 	.word	0x01016b5d

0101fb70 <SM_APP_vIs_st_44_corrupted_data>:
bool SM_APP_vIs_st_44_corrupted_data(void) {
 101fb70:	b530      	push	{r4, r5, lr}
	cfg_table.size = SECR_APP_usSt_44_get_size();
 101fb72:	4b16      	ldr	r3, [pc, #88]	; (101fbcc <SM_APP_vIs_st_44_corrupted_data+0x5c>)
 101fb74:	4c16      	ldr	r4, [pc, #88]	; (101fbd0 <SM_APP_vIs_st_44_corrupted_data+0x60>)
	meter.config_state.st_44_state = SM_APP_ucCheck_table_ram_vs_nvm(cfg_table);
 101fb76:	4d17      	ldr	r5, [pc, #92]	; (101fbd4 <SM_APP_vIs_st_44_corrupted_data+0x64>)
bool SM_APP_vIs_st_44_corrupted_data(void) {
 101fb78:	b083      	sub	sp, #12
	cfg_table.size = SECR_APP_usSt_44_get_size();
 101fb7a:	4798      	blx	r3
	cfg_table.crc_nvm = SM_APP_usSt_44_nvm_calculate_crc();
 101fb7c:	4b16      	ldr	r3, [pc, #88]	; (101fbd8 <SM_APP_vIs_st_44_corrupted_data+0x68>)
	cfg_table.size = SECR_APP_usSt_44_get_size();
 101fb7e:	8020      	strh	r0, [r4, #0]
	cfg_table.crc_nvm = SM_APP_usSt_44_nvm_calculate_crc();
 101fb80:	4798      	blx	r3
	cfg_table.crc_ram = SM_APP_usSt_44_ram_calculate_crc();
 101fb82:	4b16      	ldr	r3, [pc, #88]	; (101fbdc <SM_APP_vIs_st_44_corrupted_data+0x6c>)
	cfg_table.crc_nvm = SM_APP_usSt_44_nvm_calculate_crc();
 101fb84:	80e0      	strh	r0, [r4, #6]
	cfg_table.crc_ram = SM_APP_usSt_44_ram_calculate_crc();
 101fb86:	4798      	blx	r3
	EEPROM_reader( ST_44_NVM_CRC_ADDR, &crc, 2 );
 101fb88:	f10d 0106 	add.w	r1, sp, #6
	cfg_table.crc_ram = SM_APP_usSt_44_ram_calculate_crc();
 101fb8c:	80a0      	strh	r0, [r4, #4]
	EEPROM_reader( ST_44_NVM_CRC_ADDR, &crc, 2 );
 101fb8e:	2202      	movs	r2, #2
 101fb90:	4b13      	ldr	r3, [pc, #76]	; (101fbe0 <SM_APP_vIs_st_44_corrupted_data+0x70>)
 101fb92:	f640 00e7 	movw	r0, #2279	; 0x8e7
 101fb96:	4798      	blx	r3
	return crc;
 101fb98:	f8bd 1006 	ldrh.w	r1, [sp, #6]
	cfg_table.recover_nvm_table = SECR_APP_vSt_44_recover_nvm;
 101fb9c:	4a11      	ldr	r2, [pc, #68]	; (101fbe4 <SM_APP_vIs_st_44_corrupted_data+0x74>)
	cfg_table.recover_ram_table = SECR_APP_vSt_44_recover_ram;
 101fb9e:	4b12      	ldr	r3, [pc, #72]	; (101fbe8 <SM_APP_vIs_st_44_corrupted_data+0x78>)
	cfg_table.crc_stored = SM_APP_usSt_44_read_crc();
 101fba0:	8061      	strh	r1, [r4, #2]
	cfg_table.recover_nvm_table = SECR_APP_vSt_44_recover_nvm;
 101fba2:	60a2      	str	r2, [r4, #8]
	cfg_table.recover_ram_table = SECR_APP_vSt_44_recover_ram;
 101fba4:	60e3      	str	r3, [r4, #12]
	meter.config_state.st_44_state = SM_APP_ucCheck_table_ram_vs_nvm(cfg_table);
 101fba6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 101fbaa:	4c10      	ldr	r4, [pc, #64]	; (101fbec <SM_APP_vIs_st_44_corrupted_data+0x7c>)
 101fbac:	47a0      	blx	r4
 101fbae:	4629      	mov	r1, r5
	EEPROM_writer( MT_5_ST44_ERROR_CODE_ADDR, &meter.config_state.st_44_state, 1 );
 101fbb0:	2201      	movs	r2, #1
	meter.config_state.st_44_state = SM_APP_ucCheck_table_ram_vs_nvm(cfg_table);
 101fbb2:	f801 0f12 	strb.w	r0, [r1, #18]!
	EEPROM_writer( MT_5_ST44_ERROR_CODE_ADDR, &meter.config_state.st_44_state, 1 );
 101fbb6:	4b0e      	ldr	r3, [pc, #56]	; (101fbf0 <SM_APP_vIs_st_44_corrupted_data+0x80>)
 101fbb8:	f249 205f 	movw	r0, #37471	; 0x925f
 101fbbc:	4798      	blx	r3
	if ( meter.config_state.st_44_state != TBL_DATA_OK ) {
 101fbbe:	7ca8      	ldrb	r0, [r5, #18]
}
 101fbc0:	3000      	adds	r0, #0
 101fbc2:	bf18      	it	ne
 101fbc4:	2001      	movne	r0, #1
 101fbc6:	b003      	add	sp, #12
 101fbc8:	bd30      	pop	{r4, r5, pc}
 101fbca:	bf00      	nop
 101fbcc:	0102b285 	.word	0x0102b285
 101fbd0:	20000c60 	.word	0x20000c60
 101fbd4:	20016c2c 	.word	0x20016c2c
 101fbd8:	0101faf9 	.word	0x0101faf9
 101fbdc:	0101fb35 	.word	0x0101fb35
 101fbe0:	01017511 	.word	0x01017511
 101fbe4:	0102b191 	.word	0x0102b191
 101fbe8:	0102b199 	.word	0x0102b199
 101fbec:	0101f26d 	.word	0x0101f26d
 101fbf0:	01017509 	.word	0x01017509

0101fbf4 <SM_APP_vSt_44_write_crc>:
void SM_APP_vSt_44_write_crc(uint16_t crc) {
 101fbf4:	b500      	push	{lr}
 101fbf6:	b083      	sub	sp, #12
 101fbf8:	a902      	add	r1, sp, #8
	EEPROM_writer( ST_44_NVM_CRC_ADDR, &crc, 2 );
 101fbfa:	2202      	movs	r2, #2
void SM_APP_vSt_44_write_crc(uint16_t crc) {
 101fbfc:	f821 0d02 	strh.w	r0, [r1, #-2]!
	EEPROM_writer( ST_44_NVM_CRC_ADDR, &crc, 2 );
 101fc00:	4b03      	ldr	r3, [pc, #12]	; (101fc10 <SM_APP_vSt_44_write_crc+0x1c>)
 101fc02:	f640 00e7 	movw	r0, #2279	; 0x8e7
 101fc06:	4798      	blx	r3
}
 101fc08:	b003      	add	sp, #12
 101fc0a:	f85d fb04 	ldr.w	pc, [sp], #4
 101fc0e:	bf00      	nop
 101fc10:	01017509 	.word	0x01017509

0101fc14 <SM_APP_usSt_51_nvm_calculate_crc>:
uint16_t SM_APP_usSt_51_nvm_calculate_crc(void) {
 101fc14:	b510      	push	{r4, lr}
	TOU_APP_vCopy_st_51_nvm(&tbl_array[0]);
 101fc16:	4c06      	ldr	r4, [pc, #24]	; (101fc30 <SM_APP_usSt_51_nvm_calculate_crc+0x1c>)
 101fc18:	4b06      	ldr	r3, [pc, #24]	; (101fc34 <SM_APP_usSt_51_nvm_calculate_crc+0x20>)
 101fc1a:	4620      	mov	r0, r4
 101fc1c:	4798      	blx	r3
	return CRC_crc16( &tbl_array[0], TOU_APP_usSt_51_get_size() );
 101fc1e:	4b06      	ldr	r3, [pc, #24]	; (101fc38 <SM_APP_usSt_51_nvm_calculate_crc+0x24>)
 101fc20:	4798      	blx	r3
 101fc22:	4b06      	ldr	r3, [pc, #24]	; (101fc3c <SM_APP_usSt_51_nvm_calculate_crc+0x28>)
 101fc24:	4601      	mov	r1, r0
 101fc26:	4620      	mov	r0, r4
}
 101fc28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return CRC_crc16( &tbl_array[0], TOU_APP_usSt_51_get_size() );
 101fc2c:	4718      	bx	r3
 101fc2e:	bf00      	nop
 101fc30:	20000c78 	.word	0x20000c78
 101fc34:	0102c425 	.word	0x0102c425
 101fc38:	0102bf25 	.word	0x0102bf25
 101fc3c:	01016b5d 	.word	0x01016b5d

0101fc40 <SM_APP_usSt_51_ram_calculate_crc>:
uint16_t SM_APP_usSt_51_ram_calculate_crc(void) {
 101fc40:	b510      	push	{r4, lr}
	TOU_APP_vCopy_st_51_ram(&tbl_array[0]);
 101fc42:	4c06      	ldr	r4, [pc, #24]	; (101fc5c <SM_APP_usSt_51_ram_calculate_crc+0x1c>)
 101fc44:	4b06      	ldr	r3, [pc, #24]	; (101fc60 <SM_APP_usSt_51_ram_calculate_crc+0x20>)
 101fc46:	4620      	mov	r0, r4
 101fc48:	4798      	blx	r3
	return CRC_crc16( &tbl_array[0], TOU_APP_usSt_51_get_size() );
 101fc4a:	4b06      	ldr	r3, [pc, #24]	; (101fc64 <SM_APP_usSt_51_ram_calculate_crc+0x24>)
 101fc4c:	4798      	blx	r3
 101fc4e:	4b06      	ldr	r3, [pc, #24]	; (101fc68 <SM_APP_usSt_51_ram_calculate_crc+0x28>)
 101fc50:	4601      	mov	r1, r0
 101fc52:	4620      	mov	r0, r4
}
 101fc54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return CRC_crc16( &tbl_array[0], TOU_APP_usSt_51_get_size() );
 101fc58:	4718      	bx	r3
 101fc5a:	bf00      	nop
 101fc5c:	20000c78 	.word	0x20000c78
 101fc60:	0102c3e9 	.word	0x0102c3e9
 101fc64:	0102bf25 	.word	0x0102bf25
 101fc68:	01016b5d 	.word	0x01016b5d

0101fc6c <SM_APP_vIs_st_51_corrupted_data>:
bool SM_APP_vIs_st_51_corrupted_data(void) {
 101fc6c:	b530      	push	{r4, r5, lr}
	cfg_table.size = TOU_APP_usSt_51_get_size();
 101fc6e:	4b16      	ldr	r3, [pc, #88]	; (101fcc8 <SM_APP_vIs_st_51_corrupted_data+0x5c>)
 101fc70:	4c16      	ldr	r4, [pc, #88]	; (101fccc <SM_APP_vIs_st_51_corrupted_data+0x60>)
	meter.config_state.st_51_state = SM_APP_ucCheck_table_ram_vs_nvm(cfg_table);
 101fc72:	4d17      	ldr	r5, [pc, #92]	; (101fcd0 <SM_APP_vIs_st_51_corrupted_data+0x64>)
bool SM_APP_vIs_st_51_corrupted_data(void) {
 101fc74:	b083      	sub	sp, #12
	cfg_table.size = TOU_APP_usSt_51_get_size();
 101fc76:	4798      	blx	r3
	cfg_table.crc_nvm = SM_APP_usSt_51_nvm_calculate_crc();
 101fc78:	4b16      	ldr	r3, [pc, #88]	; (101fcd4 <SM_APP_vIs_st_51_corrupted_data+0x68>)
	cfg_table.size = TOU_APP_usSt_51_get_size();
 101fc7a:	8020      	strh	r0, [r4, #0]
	cfg_table.crc_nvm = SM_APP_usSt_51_nvm_calculate_crc();
 101fc7c:	4798      	blx	r3
	cfg_table.crc_ram = SM_APP_usSt_51_ram_calculate_crc();
 101fc7e:	4b16      	ldr	r3, [pc, #88]	; (101fcd8 <SM_APP_vIs_st_51_corrupted_data+0x6c>)
	cfg_table.crc_nvm = SM_APP_usSt_51_nvm_calculate_crc();
 101fc80:	80e0      	strh	r0, [r4, #6]
	cfg_table.crc_ram = SM_APP_usSt_51_ram_calculate_crc();
 101fc82:	4798      	blx	r3
	EEPROM_reader( ST_51_NVM_CRC_ADDR, &crc, 2 );
 101fc84:	f10d 0106 	add.w	r1, sp, #6
	cfg_table.crc_ram = SM_APP_usSt_51_ram_calculate_crc();
 101fc88:	80a0      	strh	r0, [r4, #4]
	EEPROM_reader( ST_51_NVM_CRC_ADDR, &crc, 2 );
 101fc8a:	2202      	movs	r2, #2
 101fc8c:	4b13      	ldr	r3, [pc, #76]	; (101fcdc <SM_APP_vIs_st_51_corrupted_data+0x70>)
 101fc8e:	f640 206a 	movw	r0, #2666	; 0xa6a
 101fc92:	4798      	blx	r3
	return crc;
 101fc94:	f8bd 1006 	ldrh.w	r1, [sp, #6]
	cfg_table.recover_nvm_table = TOU_APP_vSt_51_recover_nvm;
 101fc98:	4a11      	ldr	r2, [pc, #68]	; (101fce0 <SM_APP_vIs_st_51_corrupted_data+0x74>)
	cfg_table.recover_ram_table = TOU_APP_vSt_51_recover_ram;
 101fc9a:	4b12      	ldr	r3, [pc, #72]	; (101fce4 <SM_APP_vIs_st_51_corrupted_data+0x78>)
	cfg_table.crc_stored = SM_APP_usSt_51_read_crc();
 101fc9c:	8061      	strh	r1, [r4, #2]
	cfg_table.recover_nvm_table = TOU_APP_vSt_51_recover_nvm;
 101fc9e:	60a2      	str	r2, [r4, #8]
	cfg_table.recover_ram_table = TOU_APP_vSt_51_recover_ram;
 101fca0:	60e3      	str	r3, [r4, #12]
	meter.config_state.st_51_state = SM_APP_ucCheck_table_ram_vs_nvm(cfg_table);
 101fca2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 101fca6:	4c10      	ldr	r4, [pc, #64]	; (101fce8 <SM_APP_vIs_st_51_corrupted_data+0x7c>)
 101fca8:	47a0      	blx	r4
 101fcaa:	4629      	mov	r1, r5
	EEPROM_writer( MT_5_ST51_ERROR_CODE_ADDR, &meter.config_state.st_51_state, 1 );
 101fcac:	2201      	movs	r2, #1
	meter.config_state.st_51_state = SM_APP_ucCheck_table_ram_vs_nvm(cfg_table);
 101fcae:	f801 0f13 	strb.w	r0, [r1, #19]!
	EEPROM_writer( MT_5_ST51_ERROR_CODE_ADDR, &meter.config_state.st_51_state, 1 );
 101fcb2:	4b0e      	ldr	r3, [pc, #56]	; (101fcec <SM_APP_vIs_st_51_corrupted_data+0x80>)
 101fcb4:	f249 2060 	movw	r0, #37472	; 0x9260
 101fcb8:	4798      	blx	r3
	if ( meter.config_state.st_51_state != TBL_DATA_OK ) {
 101fcba:	7ce8      	ldrb	r0, [r5, #19]
}
 101fcbc:	3000      	adds	r0, #0
 101fcbe:	bf18      	it	ne
 101fcc0:	2001      	movne	r0, #1
 101fcc2:	b003      	add	sp, #12
 101fcc4:	bd30      	pop	{r4, r5, pc}
 101fcc6:	bf00      	nop
 101fcc8:	0102bf25 	.word	0x0102bf25
 101fccc:	20000c60 	.word	0x20000c60
 101fcd0:	20016c2c 	.word	0x20016c2c
 101fcd4:	0101fc15 	.word	0x0101fc15
 101fcd8:	0101fc41 	.word	0x0101fc41
 101fcdc:	01017511 	.word	0x01017511
 101fce0:	0102be9d 	.word	0x0102be9d
 101fce4:	0102bea5 	.word	0x0102bea5
 101fce8:	0101f26d 	.word	0x0101f26d
 101fcec:	01017509 	.word	0x01017509

0101fcf0 <SM_APP_vSt_51_write_crc>:
void SM_APP_vSt_51_write_crc(uint16_t crc) {
 101fcf0:	b500      	push	{lr}
 101fcf2:	b083      	sub	sp, #12
 101fcf4:	a902      	add	r1, sp, #8
	EEPROM_writer( ST_51_NVM_CRC_ADDR, &crc, 2 );
 101fcf6:	2202      	movs	r2, #2
void SM_APP_vSt_51_write_crc(uint16_t crc) {
 101fcf8:	f821 0d02 	strh.w	r0, [r1, #-2]!
	EEPROM_writer( ST_51_NVM_CRC_ADDR, &crc, 2 );
 101fcfc:	4b03      	ldr	r3, [pc, #12]	; (101fd0c <SM_APP_vSt_51_write_crc+0x1c>)
 101fcfe:	f640 206a 	movw	r0, #2666	; 0xa6a
 101fd02:	4798      	blx	r3
}
 101fd04:	b003      	add	sp, #12
 101fd06:	f85d fb04 	ldr.w	pc, [sp], #4
 101fd0a:	bf00      	nop
 101fd0c:	01017509 	.word	0x01017509

0101fd10 <SM_APP_usSt_61_nvm_calculate_crc>:
uint16_t SM_APP_usSt_61_nvm_calculate_crc(void) {
 101fd10:	b510      	push	{r4, lr}
	LP_APP_vCopy_st_61_nvm(&tbl_array[0]);
 101fd12:	4c06      	ldr	r4, [pc, #24]	; (101fd2c <SM_APP_usSt_61_nvm_calculate_crc+0x1c>)
 101fd14:	4b06      	ldr	r3, [pc, #24]	; (101fd30 <SM_APP_usSt_61_nvm_calculate_crc+0x20>)
 101fd16:	4620      	mov	r0, r4
 101fd18:	4798      	blx	r3
	return CRC_crc16( &tbl_array[0], LP_APP_usSt_61_get_size() );
 101fd1a:	4b06      	ldr	r3, [pc, #24]	; (101fd34 <SM_APP_usSt_61_nvm_calculate_crc+0x24>)
 101fd1c:	4798      	blx	r3
 101fd1e:	4b06      	ldr	r3, [pc, #24]	; (101fd38 <SM_APP_usSt_61_nvm_calculate_crc+0x28>)
 101fd20:	4601      	mov	r1, r0
 101fd22:	4620      	mov	r0, r4
}
 101fd24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return CRC_crc16( &tbl_array[0], LP_APP_usSt_61_get_size() );
 101fd28:	4718      	bx	r3
 101fd2a:	bf00      	nop
 101fd2c:	20000c78 	.word	0x20000c78
 101fd30:	0101b5a1 	.word	0x0101b5a1
 101fd34:	0101b65d 	.word	0x0101b65d
 101fd38:	01016b5d 	.word	0x01016b5d

0101fd3c <SM_APP_usSt_61_ram_calculate_crc>:
uint16_t SM_APP_usSt_61_ram_calculate_crc(void) {
 101fd3c:	b510      	push	{r4, lr}
	LP_APP_vCopy_st_61_ram(&tbl_array[0]);
 101fd3e:	4c06      	ldr	r4, [pc, #24]	; (101fd58 <SM_APP_usSt_61_ram_calculate_crc+0x1c>)
 101fd40:	4b06      	ldr	r3, [pc, #24]	; (101fd5c <SM_APP_usSt_61_ram_calculate_crc+0x20>)
 101fd42:	4620      	mov	r0, r4
 101fd44:	4798      	blx	r3
	return CRC_crc16( &tbl_array[0], LP_APP_usSt_61_get_size() );
 101fd46:	4b06      	ldr	r3, [pc, #24]	; (101fd60 <SM_APP_usSt_61_ram_calculate_crc+0x24>)
 101fd48:	4798      	blx	r3
 101fd4a:	4b06      	ldr	r3, [pc, #24]	; (101fd64 <SM_APP_usSt_61_ram_calculate_crc+0x28>)
 101fd4c:	4601      	mov	r1, r0
 101fd4e:	4620      	mov	r0, r4
}
 101fd50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return CRC_crc16( &tbl_array[0], LP_APP_usSt_61_get_size() );
 101fd54:	4718      	bx	r3
 101fd56:	bf00      	nop
 101fd58:	20000c78 	.word	0x20000c78
 101fd5c:	0101b555 	.word	0x0101b555
 101fd60:	0101b65d 	.word	0x0101b65d
 101fd64:	01016b5d 	.word	0x01016b5d

0101fd68 <SM_APP_vIs_st_61_corrupted_data>:
bool SM_APP_vIs_st_61_corrupted_data(void) {
 101fd68:	b530      	push	{r4, r5, lr}
	cfg_table.size = LP_APP_usSt_61_get_size();
 101fd6a:	4b16      	ldr	r3, [pc, #88]	; (101fdc4 <SM_APP_vIs_st_61_corrupted_data+0x5c>)
 101fd6c:	4c16      	ldr	r4, [pc, #88]	; (101fdc8 <SM_APP_vIs_st_61_corrupted_data+0x60>)
	meter.config_state.st_61_state = SM_APP_ucCheck_table_ram_vs_nvm(cfg_table);
 101fd6e:	4d17      	ldr	r5, [pc, #92]	; (101fdcc <SM_APP_vIs_st_61_corrupted_data+0x64>)
bool SM_APP_vIs_st_61_corrupted_data(void) {
 101fd70:	b083      	sub	sp, #12
	cfg_table.size = LP_APP_usSt_61_get_size();
 101fd72:	4798      	blx	r3
	cfg_table.crc_nvm = SM_APP_usSt_61_nvm_calculate_crc();
 101fd74:	4b16      	ldr	r3, [pc, #88]	; (101fdd0 <SM_APP_vIs_st_61_corrupted_data+0x68>)
	cfg_table.size = LP_APP_usSt_61_get_size();
 101fd76:	8020      	strh	r0, [r4, #0]
	cfg_table.crc_nvm = SM_APP_usSt_61_nvm_calculate_crc();
 101fd78:	4798      	blx	r3
	cfg_table.crc_ram = SM_APP_usSt_61_ram_calculate_crc();
 101fd7a:	4b16      	ldr	r3, [pc, #88]	; (101fdd4 <SM_APP_vIs_st_61_corrupted_data+0x6c>)
	cfg_table.crc_nvm = SM_APP_usSt_61_nvm_calculate_crc();
 101fd7c:	80e0      	strh	r0, [r4, #6]
	cfg_table.crc_ram = SM_APP_usSt_61_ram_calculate_crc();
 101fd7e:	4798      	blx	r3
	EEPROM_reader( ST_61_NVM_CRC_ADDR, &crc, 2 );
 101fd80:	f10d 0106 	add.w	r1, sp, #6
	cfg_table.crc_ram = SM_APP_usSt_61_ram_calculate_crc();
 101fd84:	80a0      	strh	r0, [r4, #4]
	EEPROM_reader( ST_61_NVM_CRC_ADDR, &crc, 2 );
 101fd86:	2202      	movs	r2, #2
 101fd88:	4b13      	ldr	r3, [pc, #76]	; (101fdd8 <SM_APP_vIs_st_61_corrupted_data+0x70>)
 101fd8a:	f640 50db 	movw	r0, #3547	; 0xddb
 101fd8e:	4798      	blx	r3
	return crc;
 101fd90:	f8bd 1006 	ldrh.w	r1, [sp, #6]
	cfg_table.recover_nvm_table = LP_APP_vSt_61_recover_nvm;
 101fd94:	4a11      	ldr	r2, [pc, #68]	; (101fddc <SM_APP_vIs_st_61_corrupted_data+0x74>)
	cfg_table.recover_ram_table = LP_APP_vSt_61_recover_ram;
 101fd96:	4b12      	ldr	r3, [pc, #72]	; (101fde0 <SM_APP_vIs_st_61_corrupted_data+0x78>)
	cfg_table.crc_stored = SM_APP_usSt_61_read_crc();
 101fd98:	8061      	strh	r1, [r4, #2]
	cfg_table.recover_nvm_table = LP_APP_vSt_61_recover_nvm;
 101fd9a:	60a2      	str	r2, [r4, #8]
	cfg_table.recover_ram_table = LP_APP_vSt_61_recover_ram;
 101fd9c:	60e3      	str	r3, [r4, #12]
	meter.config_state.st_61_state = SM_APP_ucCheck_table_ram_vs_nvm(cfg_table);
 101fd9e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 101fda2:	4c10      	ldr	r4, [pc, #64]	; (101fde4 <SM_APP_vIs_st_61_corrupted_data+0x7c>)
 101fda4:	47a0      	blx	r4
 101fda6:	4629      	mov	r1, r5
	EEPROM_writer( MT_5_ST61_ERROR_CODE_ADDR, &meter.config_state.st_61_state, 1 );
 101fda8:	2201      	movs	r2, #1
	meter.config_state.st_61_state = SM_APP_ucCheck_table_ram_vs_nvm(cfg_table);
 101fdaa:	f801 0f16 	strb.w	r0, [r1, #22]!
	EEPROM_writer( MT_5_ST61_ERROR_CODE_ADDR, &meter.config_state.st_61_state, 1 );
 101fdae:	4b0e      	ldr	r3, [pc, #56]	; (101fde8 <SM_APP_vIs_st_61_corrupted_data+0x80>)
 101fdb0:	f249 2062 	movw	r0, #37474	; 0x9262
 101fdb4:	4798      	blx	r3
	if ( meter.config_state.st_61_state != TBL_DATA_OK ) {
 101fdb6:	7da8      	ldrb	r0, [r5, #22]
}
 101fdb8:	3000      	adds	r0, #0
 101fdba:	bf18      	it	ne
 101fdbc:	2001      	movne	r0, #1
 101fdbe:	b003      	add	sp, #12
 101fdc0:	bd30      	pop	{r4, r5, pc}
 101fdc2:	bf00      	nop
 101fdc4:	0101b65d 	.word	0x0101b65d
 101fdc8:	20000c60 	.word	0x20000c60
 101fdcc:	20016c2c 	.word	0x20016c2c
 101fdd0:	0101fd11 	.word	0x0101fd11
 101fdd4:	0101fd3d 	.word	0x0101fd3d
 101fdd8:	01017511 	.word	0x01017511
 101fddc:	0101b5f9 	.word	0x0101b5f9
 101fde0:	0101b601 	.word	0x0101b601
 101fde4:	0101f26d 	.word	0x0101f26d
 101fde8:	01017509 	.word	0x01017509

0101fdec <SM_APP_vSt_61_write_crc>:
void SM_APP_vSt_61_write_crc(uint16_t crc) {
 101fdec:	b500      	push	{lr}
 101fdee:	b083      	sub	sp, #12
 101fdf0:	a902      	add	r1, sp, #8
	EEPROM_writer( ST_61_NVM_CRC_ADDR, &crc, 2 );
 101fdf2:	2202      	movs	r2, #2
void SM_APP_vSt_61_write_crc(uint16_t crc) {
 101fdf4:	f821 0d02 	strh.w	r0, [r1, #-2]!
	EEPROM_writer( ST_61_NVM_CRC_ADDR, &crc, 2 );
 101fdf8:	4b03      	ldr	r3, [pc, #12]	; (101fe08 <SM_APP_vSt_61_write_crc+0x1c>)
 101fdfa:	f640 50db 	movw	r0, #3547	; 0xddb
 101fdfe:	4798      	blx	r3
}
 101fe00:	b003      	add	sp, #12
 101fe02:	f85d fb04 	ldr.w	pc, [sp], #4
 101fe06:	bf00      	nop
 101fe08:	01017509 	.word	0x01017509

0101fe0c <SM_APP_usSt_62_nvm_calculate_crc>:
uint16_t SM_APP_usSt_62_nvm_calculate_crc(void) {
 101fe0c:	b510      	push	{r4, lr}
	LP_APP_vCopy_st_62_nvm(&tbl_array[0]);
 101fe0e:	4c06      	ldr	r4, [pc, #24]	; (101fe28 <SM_APP_usSt_62_nvm_calculate_crc+0x1c>)
 101fe10:	4b06      	ldr	r3, [pc, #24]	; (101fe2c <SM_APP_usSt_62_nvm_calculate_crc+0x20>)
 101fe12:	4620      	mov	r0, r4
 101fe14:	4798      	blx	r3
	return CRC_crc16( &tbl_array[0], LP_APP_usSt_62_get_size() );
 101fe16:	4b06      	ldr	r3, [pc, #24]	; (101fe30 <SM_APP_usSt_62_nvm_calculate_crc+0x24>)
 101fe18:	4798      	blx	r3
 101fe1a:	4b06      	ldr	r3, [pc, #24]	; (101fe34 <SM_APP_usSt_62_nvm_calculate_crc+0x28>)
 101fe1c:	4601      	mov	r1, r0
 101fe1e:	4620      	mov	r0, r4
}
 101fe20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return CRC_crc16( &tbl_array[0], LP_APP_usSt_62_get_size() );
 101fe24:	4718      	bx	r3
 101fe26:	bf00      	nop
 101fe28:	20000c78 	.word	0x20000c78
 101fe2c:	0101b84d 	.word	0x0101b84d
 101fe30:	0101b9ed 	.word	0x0101b9ed
 101fe34:	01016b5d 	.word	0x01016b5d

0101fe38 <SM_APP_usSt_62_ram_calculate_crc>:
uint16_t SM_APP_usSt_62_ram_calculate_crc(void) {
 101fe38:	b510      	push	{r4, lr}
	LP_APP_vCopy_st_62_ram(&tbl_array[0]);
 101fe3a:	4c06      	ldr	r4, [pc, #24]	; (101fe54 <SM_APP_usSt_62_ram_calculate_crc+0x1c>)
 101fe3c:	4b06      	ldr	r3, [pc, #24]	; (101fe58 <SM_APP_usSt_62_ram_calculate_crc+0x20>)
 101fe3e:	4620      	mov	r0, r4
 101fe40:	4798      	blx	r3
	return CRC_crc16( &tbl_array[0], LP_APP_usSt_62_get_size() );
 101fe42:	4b06      	ldr	r3, [pc, #24]	; (101fe5c <SM_APP_usSt_62_ram_calculate_crc+0x24>)
 101fe44:	4798      	blx	r3
 101fe46:	4b06      	ldr	r3, [pc, #24]	; (101fe60 <SM_APP_usSt_62_ram_calculate_crc+0x28>)
 101fe48:	4601      	mov	r1, r0
 101fe4a:	4620      	mov	r0, r4
}
 101fe4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return CRC_crc16( &tbl_array[0], LP_APP_usSt_62_get_size() );
 101fe50:	4718      	bx	r3
 101fe52:	bf00      	nop
 101fe54:	20000c78 	.word	0x20000c78
 101fe58:	0101b815 	.word	0x0101b815
 101fe5c:	0101b9ed 	.word	0x0101b9ed
 101fe60:	01016b5d 	.word	0x01016b5d

0101fe64 <SM_APP_vIs_st_62_corrupted_data>:
bool SM_APP_vIs_st_62_corrupted_data(void) {
 101fe64:	b530      	push	{r4, r5, lr}
	cfg_table.size = LP_APP_usSt_62_get_size();
 101fe66:	4b16      	ldr	r3, [pc, #88]	; (101fec0 <SM_APP_vIs_st_62_corrupted_data+0x5c>)
 101fe68:	4c16      	ldr	r4, [pc, #88]	; (101fec4 <SM_APP_vIs_st_62_corrupted_data+0x60>)
	meter.config_state.st_62_state = SM_APP_ucCheck_table_ram_vs_nvm(cfg_table);
 101fe6a:	4d17      	ldr	r5, [pc, #92]	; (101fec8 <SM_APP_vIs_st_62_corrupted_data+0x64>)
bool SM_APP_vIs_st_62_corrupted_data(void) {
 101fe6c:	b083      	sub	sp, #12
	cfg_table.size = LP_APP_usSt_62_get_size();
 101fe6e:	4798      	blx	r3
	cfg_table.crc_nvm = SM_APP_usSt_62_nvm_calculate_crc();
 101fe70:	4b16      	ldr	r3, [pc, #88]	; (101fecc <SM_APP_vIs_st_62_corrupted_data+0x68>)
	cfg_table.size = LP_APP_usSt_62_get_size();
 101fe72:	8020      	strh	r0, [r4, #0]
	cfg_table.crc_nvm = SM_APP_usSt_62_nvm_calculate_crc();
 101fe74:	4798      	blx	r3
	cfg_table.crc_ram = SM_APP_usSt_62_ram_calculate_crc();
 101fe76:	4b16      	ldr	r3, [pc, #88]	; (101fed0 <SM_APP_vIs_st_62_corrupted_data+0x6c>)
	cfg_table.crc_nvm = SM_APP_usSt_62_nvm_calculate_crc();
 101fe78:	80e0      	strh	r0, [r4, #6]
	cfg_table.crc_ram = SM_APP_usSt_62_ram_calculate_crc();
 101fe7a:	4798      	blx	r3
	EEPROM_reader( ST_62_NVM_CRC_ADDR, &crc, 2 );
 101fe7c:	f10d 0106 	add.w	r1, sp, #6
	cfg_table.crc_ram = SM_APP_usSt_62_ram_calculate_crc();
 101fe80:	80a0      	strh	r0, [r4, #4]
	EEPROM_reader( ST_62_NVM_CRC_ADDR, &crc, 2 );
 101fe82:	2202      	movs	r2, #2
 101fe84:	4b13      	ldr	r3, [pc, #76]	; (101fed4 <SM_APP_vIs_st_62_corrupted_data+0x70>)
 101fe86:	f640 50f1 	movw	r0, #3569	; 0xdf1
 101fe8a:	4798      	blx	r3
	return crc;
 101fe8c:	f8bd 1006 	ldrh.w	r1, [sp, #6]
	cfg_table.recover_nvm_table = LP_APP_vSt_62_recover_nvm;
 101fe90:	4a11      	ldr	r2, [pc, #68]	; (101fed8 <SM_APP_vIs_st_62_corrupted_data+0x74>)
	cfg_table.recover_ram_table = LP_APP_vSt_62_recover_ram;
 101fe92:	4b12      	ldr	r3, [pc, #72]	; (101fedc <SM_APP_vIs_st_62_corrupted_data+0x78>)
	cfg_table.crc_stored = SM_APP_usSt_62_read_crc();
 101fe94:	8061      	strh	r1, [r4, #2]
	cfg_table.recover_nvm_table = LP_APP_vSt_62_recover_nvm;
 101fe96:	60a2      	str	r2, [r4, #8]
	cfg_table.recover_ram_table = LP_APP_vSt_62_recover_ram;
 101fe98:	60e3      	str	r3, [r4, #12]
	meter.config_state.st_62_state = SM_APP_ucCheck_table_ram_vs_nvm(cfg_table);
 101fe9a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 101fe9e:	4c10      	ldr	r4, [pc, #64]	; (101fee0 <SM_APP_vIs_st_62_corrupted_data+0x7c>)
 101fea0:	47a0      	blx	r4
 101fea2:	4629      	mov	r1, r5
	EEPROM_writer( MT_5_ST62_ERROR_CODE_ADDR, &meter.config_state.st_62_state, 1 );
 101fea4:	2201      	movs	r2, #1
	meter.config_state.st_62_state = SM_APP_ucCheck_table_ram_vs_nvm(cfg_table);
 101fea6:	f801 0f17 	strb.w	r0, [r1, #23]!
	EEPROM_writer( MT_5_ST62_ERROR_CODE_ADDR, &meter.config_state.st_62_state, 1 );
 101feaa:	4b0e      	ldr	r3, [pc, #56]	; (101fee4 <SM_APP_vIs_st_62_corrupted_data+0x80>)
 101feac:	f249 2063 	movw	r0, #37475	; 0x9263
 101feb0:	4798      	blx	r3
	if ( meter.config_state.st_62_state != TBL_DATA_OK ) {
 101feb2:	7de8      	ldrb	r0, [r5, #23]
}
 101feb4:	3000      	adds	r0, #0
 101feb6:	bf18      	it	ne
 101feb8:	2001      	movne	r0, #1
 101feba:	b003      	add	sp, #12
 101febc:	bd30      	pop	{r4, r5, pc}
 101febe:	bf00      	nop
 101fec0:	0101b9ed 	.word	0x0101b9ed
 101fec4:	20000c60 	.word	0x20000c60
 101fec8:	20016c2c 	.word	0x20016c2c
 101fecc:	0101fe0d 	.word	0x0101fe0d
 101fed0:	0101fe39 	.word	0x0101fe39
 101fed4:	01017511 	.word	0x01017511
 101fed8:	0101b87d 	.word	0x0101b87d
 101fedc:	0101b885 	.word	0x0101b885
 101fee0:	0101f26d 	.word	0x0101f26d
 101fee4:	01017509 	.word	0x01017509

0101fee8 <SM_APP_vSt_62_write_crc>:
void SM_APP_vSt_62_write_crc(uint16_t crc) {
 101fee8:	b500      	push	{lr}
 101feea:	b083      	sub	sp, #12
 101feec:	a902      	add	r1, sp, #8
	EEPROM_writer( ST_62_NVM_CRC_ADDR, &crc, 2 );
 101feee:	2202      	movs	r2, #2
void SM_APP_vSt_62_write_crc(uint16_t crc) {
 101fef0:	f821 0d02 	strh.w	r0, [r1, #-2]!
	EEPROM_writer( ST_62_NVM_CRC_ADDR, &crc, 2 );
 101fef4:	4b03      	ldr	r3, [pc, #12]	; (101ff04 <SM_APP_vSt_62_write_crc+0x1c>)
 101fef6:	f640 50f1 	movw	r0, #3569	; 0xdf1
 101fefa:	4798      	blx	r3
}
 101fefc:	b003      	add	sp, #12
 101fefe:	f85d fb04 	ldr.w	pc, [sp], #4
 101ff02:	bf00      	nop
 101ff04:	01017509 	.word	0x01017509

0101ff08 <SM_APP_usSt_71_nvm_calculate_crc>:
uint16_t SM_APP_usSt_71_nvm_calculate_crc(void) {
 101ff08:	b510      	push	{r4, lr}
	EVNT_APP_vCopy_st_71_nvm(&tbl_array[0]);
 101ff0a:	4c06      	ldr	r4, [pc, #24]	; (101ff24 <SM_APP_usSt_71_nvm_calculate_crc+0x1c>)
 101ff0c:	4b06      	ldr	r3, [pc, #24]	; (101ff28 <SM_APP_usSt_71_nvm_calculate_crc+0x20>)
 101ff0e:	4620      	mov	r0, r4
 101ff10:	4798      	blx	r3
	return CRC_crc16( &tbl_array[0], EVNT_APP_usSt_71_get_size() );
 101ff12:	4b06      	ldr	r3, [pc, #24]	; (101ff2c <SM_APP_usSt_71_nvm_calculate_crc+0x24>)
 101ff14:	4798      	blx	r3
 101ff16:	4b06      	ldr	r3, [pc, #24]	; (101ff30 <SM_APP_usSt_71_nvm_calculate_crc+0x28>)
 101ff18:	4601      	mov	r1, r0
 101ff1a:	4620      	mov	r0, r4
}
 101ff1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return CRC_crc16( &tbl_array[0], EVNT_APP_usSt_71_get_size() );
 101ff20:	4718      	bx	r3
 101ff22:	bf00      	nop
 101ff24:	20000c78 	.word	0x20000c78
 101ff28:	01018589 	.word	0x01018589
 101ff2c:	01018691 	.word	0x01018691
 101ff30:	01016b5d 	.word	0x01016b5d

0101ff34 <SM_APP_usSt_71_ram_calculate_crc>:
uint16_t SM_APP_usSt_71_ram_calculate_crc(void) {
 101ff34:	b510      	push	{r4, lr}
	EVNT_APP_vCopy_st_71_ram(&tbl_array[0]);
 101ff36:	4c06      	ldr	r4, [pc, #24]	; (101ff50 <SM_APP_usSt_71_ram_calculate_crc+0x1c>)
 101ff38:	4b06      	ldr	r3, [pc, #24]	; (101ff54 <SM_APP_usSt_71_ram_calculate_crc+0x20>)
 101ff3a:	4620      	mov	r0, r4
 101ff3c:	4798      	blx	r3
	return CRC_crc16( &tbl_array[0], EVNT_APP_usSt_71_get_size() );
 101ff3e:	4b06      	ldr	r3, [pc, #24]	; (101ff58 <SM_APP_usSt_71_ram_calculate_crc+0x24>)
 101ff40:	4798      	blx	r3
 101ff42:	4b06      	ldr	r3, [pc, #24]	; (101ff5c <SM_APP_usSt_71_ram_calculate_crc+0x28>)
 101ff44:	4601      	mov	r1, r0
 101ff46:	4620      	mov	r0, r4
}
 101ff48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return CRC_crc16( &tbl_array[0], EVNT_APP_usSt_71_get_size() );
 101ff4c:	4718      	bx	r3
 101ff4e:	bf00      	nop
 101ff50:	20000c78 	.word	0x20000c78
 101ff54:	01018555 	.word	0x01018555
 101ff58:	01018691 	.word	0x01018691
 101ff5c:	01016b5d 	.word	0x01016b5d

0101ff60 <SM_APP_vIs_st_71_corrupted_data>:
bool SM_APP_vIs_st_71_corrupted_data(void) {
 101ff60:	b530      	push	{r4, r5, lr}
	cfg_table.size = EVNT_APP_usSt_71_get_size();
 101ff62:	4b16      	ldr	r3, [pc, #88]	; (101ffbc <SM_APP_vIs_st_71_corrupted_data+0x5c>)
 101ff64:	4c16      	ldr	r4, [pc, #88]	; (101ffc0 <SM_APP_vIs_st_71_corrupted_data+0x60>)
	meter.config_state.st_71_state = SM_APP_ucCheck_table_ram_vs_nvm(cfg_table);
 101ff66:	4d17      	ldr	r5, [pc, #92]	; (101ffc4 <SM_APP_vIs_st_71_corrupted_data+0x64>)
bool SM_APP_vIs_st_71_corrupted_data(void) {
 101ff68:	b083      	sub	sp, #12
	cfg_table.size = EVNT_APP_usSt_71_get_size();
 101ff6a:	4798      	blx	r3
	cfg_table.crc_nvm = SM_APP_usSt_71_nvm_calculate_crc();
 101ff6c:	4b16      	ldr	r3, [pc, #88]	; (101ffc8 <SM_APP_vIs_st_71_corrupted_data+0x68>)
	cfg_table.size = EVNT_APP_usSt_71_get_size();
 101ff6e:	8020      	strh	r0, [r4, #0]
	cfg_table.crc_nvm = SM_APP_usSt_71_nvm_calculate_crc();
 101ff70:	4798      	blx	r3
	cfg_table.crc_ram = SM_APP_usSt_71_ram_calculate_crc();
 101ff72:	4b16      	ldr	r3, [pc, #88]	; (101ffcc <SM_APP_vIs_st_71_corrupted_data+0x6c>)
	cfg_table.crc_nvm = SM_APP_usSt_71_nvm_calculate_crc();
 101ff74:	80e0      	strh	r0, [r4, #6]
	cfg_table.crc_ram = SM_APP_usSt_71_ram_calculate_crc();
 101ff76:	4798      	blx	r3
	EEPROM_reader( ST_71_NVM_CRC_ADDR, &crc, 2 );
 101ff78:	f10d 0106 	add.w	r1, sp, #6
	cfg_table.crc_ram = SM_APP_usSt_71_ram_calculate_crc();
 101ff7c:	80a0      	strh	r0, [r4, #4]
	EEPROM_reader( ST_71_NVM_CRC_ADDR, &crc, 2 );
 101ff7e:	2202      	movs	r2, #2
 101ff80:	4b13      	ldr	r3, [pc, #76]	; (101ffd0 <SM_APP_vIs_st_71_corrupted_data+0x70>)
 101ff82:	f640 601f 	movw	r0, #3615	; 0xe1f
 101ff86:	4798      	blx	r3
	return crc;
 101ff88:	f8bd 1006 	ldrh.w	r1, [sp, #6]
	cfg_table.recover_nvm_table = EVNT_APP_vSt_71_recover_nvm;
 101ff8c:	4a11      	ldr	r2, [pc, #68]	; (101ffd4 <SM_APP_vIs_st_71_corrupted_data+0x74>)
	cfg_table.recover_ram_table = EVNT_APP_vSt_71_recover_ram;
 101ff8e:	4b12      	ldr	r3, [pc, #72]	; (101ffd8 <SM_APP_vIs_st_71_corrupted_data+0x78>)
	cfg_table.crc_stored = SM_APP_usSt_71_read_crc();
 101ff90:	8061      	strh	r1, [r4, #2]
	cfg_table.recover_nvm_table = EVNT_APP_vSt_71_recover_nvm;
 101ff92:	60a2      	str	r2, [r4, #8]
	cfg_table.recover_ram_table = EVNT_APP_vSt_71_recover_ram;
 101ff94:	60e3      	str	r3, [r4, #12]
	meter.config_state.st_71_state = SM_APP_ucCheck_table_ram_vs_nvm(cfg_table);
 101ff96:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 101ff9a:	4c10      	ldr	r4, [pc, #64]	; (101ffdc <SM_APP_vIs_st_71_corrupted_data+0x7c>)
 101ff9c:	47a0      	blx	r4
 101ff9e:	4629      	mov	r1, r5
	EEPROM_writer( MT_5_ST71_ERROR_CODE_ADDR, &meter.config_state.st_71_state, 1 );
 101ffa0:	2201      	movs	r2, #1
	meter.config_state.st_71_state = SM_APP_ucCheck_table_ram_vs_nvm(cfg_table);
 101ffa2:	f801 0f18 	strb.w	r0, [r1, #24]!
	EEPROM_writer( MT_5_ST71_ERROR_CODE_ADDR, &meter.config_state.st_71_state, 1 );
 101ffa6:	4b0e      	ldr	r3, [pc, #56]	; (101ffe0 <SM_APP_vIs_st_71_corrupted_data+0x80>)
 101ffa8:	f249 2064 	movw	r0, #37476	; 0x9264
 101ffac:	4798      	blx	r3
	if ( meter.config_state.st_71_state != TBL_DATA_OK ) {
 101ffae:	7e28      	ldrb	r0, [r5, #24]
}
 101ffb0:	3000      	adds	r0, #0
 101ffb2:	bf18      	it	ne
 101ffb4:	2001      	movne	r0, #1
 101ffb6:	b003      	add	sp, #12
 101ffb8:	bd30      	pop	{r4, r5, pc}
 101ffba:	bf00      	nop
 101ffbc:	01018691 	.word	0x01018691
 101ffc0:	20000c60 	.word	0x20000c60
 101ffc4:	20016c2c 	.word	0x20016c2c
 101ffc8:	0101ff09 	.word	0x0101ff09
 101ffcc:	0101ff35 	.word	0x0101ff35
 101ffd0:	01017511 	.word	0x01017511
 101ffd4:	010185d1 	.word	0x010185d1
 101ffd8:	010185d9 	.word	0x010185d9
 101ffdc:	0101f26d 	.word	0x0101f26d
 101ffe0:	01017509 	.word	0x01017509

0101ffe4 <SM_APP_vSt_71_write_crc>:
void SM_APP_vSt_71_write_crc(uint16_t crc) {
 101ffe4:	b500      	push	{lr}
 101ffe6:	b083      	sub	sp, #12
 101ffe8:	a902      	add	r1, sp, #8
	EEPROM_writer( ST_71_NVM_CRC_ADDR, &crc, 2 );
 101ffea:	2202      	movs	r2, #2
void SM_APP_vSt_71_write_crc(uint16_t crc) {
 101ffec:	f821 0d02 	strh.w	r0, [r1, #-2]!
	EEPROM_writer( ST_71_NVM_CRC_ADDR, &crc, 2 );
 101fff0:	4b03      	ldr	r3, [pc, #12]	; (1020000 <SM_APP_vSt_71_write_crc+0x1c>)
 101fff2:	f640 601f 	movw	r0, #3615	; 0xe1f
 101fff6:	4798      	blx	r3
}
 101fff8:	b003      	add	sp, #12
 101fffa:	f85d fb04 	ldr.w	pc, [sp], #4
 101fffe:	bf00      	nop
 1020000:	01017509 	.word	0x01017509

01020004 <SM_APP_usSt_73_nvm_calculate_crc>:
uint16_t SM_APP_usSt_73_nvm_calculate_crc(void) {
 1020004:	b510      	push	{r4, lr}
	EVNT_APP_vCopy_st_73_nvm(&tbl_array[0]);
 1020006:	4c06      	ldr	r4, [pc, #24]	; (1020020 <SM_APP_usSt_73_nvm_calculate_crc+0x1c>)
 1020008:	4b06      	ldr	r3, [pc, #24]	; (1020024 <SM_APP_usSt_73_nvm_calculate_crc+0x20>)
 102000a:	4620      	mov	r0, r4
 102000c:	4798      	blx	r3
	return CRC_crc16( &tbl_array[0], EVNT_APP_usSt_73_get_size() );
 102000e:	4b06      	ldr	r3, [pc, #24]	; (1020028 <SM_APP_usSt_73_nvm_calculate_crc+0x24>)
 1020010:	4798      	blx	r3
 1020012:	4b06      	ldr	r3, [pc, #24]	; (102002c <SM_APP_usSt_73_nvm_calculate_crc+0x28>)
 1020014:	4601      	mov	r1, r0
 1020016:	4620      	mov	r0, r4
}
 1020018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return CRC_crc16( &tbl_array[0], EVNT_APP_usSt_73_get_size() );
 102001c:	4718      	bx	r3
 102001e:	bf00      	nop
 1020020:	20000c78 	.word	0x20000c78
 1020024:	010188c9 	.word	0x010188c9
 1020028:	01019571 	.word	0x01019571
 102002c:	01016b5d 	.word	0x01016b5d

01020030 <SM_APP_usSt_73_ram_calculate_crc>:
uint16_t SM_APP_usSt_73_ram_calculate_crc(void) {
 1020030:	b510      	push	{r4, lr}
	EVNT_APP_vCopy_st_73_ram(&tbl_array[0]);
 1020032:	4c06      	ldr	r4, [pc, #24]	; (102004c <SM_APP_usSt_73_ram_calculate_crc+0x1c>)
 1020034:	4b06      	ldr	r3, [pc, #24]	; (1020050 <SM_APP_usSt_73_ram_calculate_crc+0x20>)
 1020036:	4620      	mov	r0, r4
 1020038:	4798      	blx	r3
	return CRC_crc16( &tbl_array[0], EVNT_APP_usSt_73_get_size() );
 102003a:	4b06      	ldr	r3, [pc, #24]	; (1020054 <SM_APP_usSt_73_ram_calculate_crc+0x24>)
 102003c:	4798      	blx	r3
 102003e:	4b06      	ldr	r3, [pc, #24]	; (1020058 <SM_APP_usSt_73_ram_calculate_crc+0x28>)
 1020040:	4601      	mov	r1, r0
 1020042:	4620      	mov	r0, r4
}
 1020044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return CRC_crc16( &tbl_array[0], EVNT_APP_usSt_73_get_size() );
 1020048:	4718      	bx	r3
 102004a:	bf00      	nop
 102004c:	20000c78 	.word	0x20000c78
 1020050:	01018891 	.word	0x01018891
 1020054:	01019571 	.word	0x01019571
 1020058:	01016b5d 	.word	0x01016b5d

0102005c <SM_APP_vIs_st_73_corrupted_data>:
bool SM_APP_vIs_st_73_corrupted_data(void) {
 102005c:	b530      	push	{r4, r5, lr}
	cfg_table.size = EVNT_APP_usSt_73_get_size();
 102005e:	4b16      	ldr	r3, [pc, #88]	; (10200b8 <SM_APP_vIs_st_73_corrupted_data+0x5c>)
 1020060:	4c16      	ldr	r4, [pc, #88]	; (10200bc <SM_APP_vIs_st_73_corrupted_data+0x60>)
	meter.config_state.st_73_state = SM_APP_ucCheck_table_ram_vs_nvm(cfg_table);
 1020062:	4d17      	ldr	r5, [pc, #92]	; (10200c0 <SM_APP_vIs_st_73_corrupted_data+0x64>)
bool SM_APP_vIs_st_73_corrupted_data(void) {
 1020064:	b083      	sub	sp, #12
	cfg_table.size = EVNT_APP_usSt_73_get_size();
 1020066:	4798      	blx	r3
	cfg_table.crc_nvm = SM_APP_usSt_73_nvm_calculate_crc();
 1020068:	4b16      	ldr	r3, [pc, #88]	; (10200c4 <SM_APP_vIs_st_73_corrupted_data+0x68>)
	cfg_table.size = EVNT_APP_usSt_73_get_size();
 102006a:	8020      	strh	r0, [r4, #0]
	cfg_table.crc_nvm = SM_APP_usSt_73_nvm_calculate_crc();
 102006c:	4798      	blx	r3
	cfg_table.crc_ram = SM_APP_usSt_73_ram_calculate_crc();
 102006e:	4b16      	ldr	r3, [pc, #88]	; (10200c8 <SM_APP_vIs_st_73_corrupted_data+0x6c>)
	cfg_table.crc_nvm = SM_APP_usSt_73_nvm_calculate_crc();
 1020070:	80e0      	strh	r0, [r4, #6]
	cfg_table.crc_ram = SM_APP_usSt_73_ram_calculate_crc();
 1020072:	4798      	blx	r3
	EEPROM_reader( ST_73_NVM_CRC_ADDR, &crc, 2 );
 1020074:	f10d 0106 	add.w	r1, sp, #6
	cfg_table.crc_ram = SM_APP_usSt_73_ram_calculate_crc();
 1020078:	80a0      	strh	r0, [r4, #4]
	EEPROM_reader( ST_73_NVM_CRC_ADDR, &crc, 2 );
 102007a:	2202      	movs	r2, #2
 102007c:	4b13      	ldr	r3, [pc, #76]	; (10200cc <SM_APP_vIs_st_73_corrupted_data+0x70>)
 102007e:	f640 602f 	movw	r0, #3631	; 0xe2f
 1020082:	4798      	blx	r3
	return crc;
 1020084:	f8bd 1006 	ldrh.w	r1, [sp, #6]
	cfg_table.recover_nvm_table = EVNT_APP_vSt_73_recover_nvm;
 1020088:	4a11      	ldr	r2, [pc, #68]	; (10200d0 <SM_APP_vIs_st_73_corrupted_data+0x74>)
	cfg_table.recover_ram_table = EVNT_APP_vSt_73_recover_ram;
 102008a:	4b12      	ldr	r3, [pc, #72]	; (10200d4 <SM_APP_vIs_st_73_corrupted_data+0x78>)
	cfg_table.crc_stored = SM_APP_usSt_73_read_crc();
 102008c:	8061      	strh	r1, [r4, #2]
	cfg_table.recover_nvm_table = EVNT_APP_vSt_73_recover_nvm;
 102008e:	60a2      	str	r2, [r4, #8]
	cfg_table.recover_ram_table = EVNT_APP_vSt_73_recover_ram;
 1020090:	60e3      	str	r3, [r4, #12]
	meter.config_state.st_73_state = SM_APP_ucCheck_table_ram_vs_nvm(cfg_table);
 1020092:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 1020096:	4c10      	ldr	r4, [pc, #64]	; (10200d8 <SM_APP_vIs_st_73_corrupted_data+0x7c>)
 1020098:	47a0      	blx	r4
 102009a:	4629      	mov	r1, r5
	EEPROM_writer( MT_5_ST73_ERROR_CODE_ADDR, &meter.config_state.st_73_state, 1 );
 102009c:	2201      	movs	r2, #1
	meter.config_state.st_73_state = SM_APP_ucCheck_table_ram_vs_nvm(cfg_table);
 102009e:	f801 0f19 	strb.w	r0, [r1, #25]!
	EEPROM_writer( MT_5_ST73_ERROR_CODE_ADDR, &meter.config_state.st_73_state, 1 );
 10200a2:	4b0e      	ldr	r3, [pc, #56]	; (10200dc <SM_APP_vIs_st_73_corrupted_data+0x80>)
 10200a4:	f249 2065 	movw	r0, #37477	; 0x9265
 10200a8:	4798      	blx	r3
	if ( meter.config_state.st_73_state != TBL_DATA_OK ) {
 10200aa:	7e68      	ldrb	r0, [r5, #25]
}
 10200ac:	3000      	adds	r0, #0
 10200ae:	bf18      	it	ne
 10200b0:	2001      	movne	r0, #1
 10200b2:	b003      	add	sp, #12
 10200b4:	bd30      	pop	{r4, r5, pc}
 10200b6:	bf00      	nop
 10200b8:	01019571 	.word	0x01019571
 10200bc:	20000c60 	.word	0x20000c60
 10200c0:	20016c2c 	.word	0x20016c2c
 10200c4:	01020005 	.word	0x01020005
 10200c8:	01020031 	.word	0x01020031
 10200cc:	01017511 	.word	0x01017511
 10200d0:	010188fd 	.word	0x010188fd
 10200d4:	01018905 	.word	0x01018905
 10200d8:	0101f26d 	.word	0x0101f26d
 10200dc:	01017509 	.word	0x01017509

010200e0 <SM_APP_vSt_73_write_crc>:
void SM_APP_vSt_73_write_crc(uint16_t crc) {
 10200e0:	b500      	push	{lr}
 10200e2:	b083      	sub	sp, #12
 10200e4:	a902      	add	r1, sp, #8
	EEPROM_writer( ST_73_NVM_CRC_ADDR, &crc, 2 );
 10200e6:	2202      	movs	r2, #2
void SM_APP_vSt_73_write_crc(uint16_t crc) {
 10200e8:	f821 0d02 	strh.w	r0, [r1, #-2]!
	EEPROM_writer( ST_73_NVM_CRC_ADDR, &crc, 2 );
 10200ec:	4b03      	ldr	r3, [pc, #12]	; (10200fc <SM_APP_vSt_73_write_crc+0x1c>)
 10200ee:	f640 602f 	movw	r0, #3631	; 0xe2f
 10200f2:	4798      	blx	r3
}
 10200f4:	b003      	add	sp, #12
 10200f6:	f85d fb04 	ldr.w	pc, [sp], #4
 10200fa:	bf00      	nop
 10200fc:	01017509 	.word	0x01017509

01020100 <SM_APP_usSt_75_nvm_calculate_crc>:
uint16_t SM_APP_usSt_75_nvm_calculate_crc(void) {
 1020100:	b510      	push	{r4, lr}
	EVNT_APP_vCopy_st_75_nvm(&tbl_array[0]);
 1020102:	4c06      	ldr	r4, [pc, #24]	; (102011c <SM_APP_usSt_75_nvm_calculate_crc+0x1c>)
 1020104:	4b06      	ldr	r3, [pc, #24]	; (1020120 <SM_APP_usSt_75_nvm_calculate_crc+0x20>)
 1020106:	4620      	mov	r0, r4
 1020108:	4798      	blx	r3
	return CRC_crc16( &tbl_array[0], EVNT_APP_usSt_75_get_size() );
 102010a:	4b06      	ldr	r3, [pc, #24]	; (1020124 <SM_APP_usSt_75_nvm_calculate_crc+0x24>)
 102010c:	4798      	blx	r3
 102010e:	4b06      	ldr	r3, [pc, #24]	; (1020128 <SM_APP_usSt_75_nvm_calculate_crc+0x28>)
 1020110:	4601      	mov	r1, r0
 1020112:	4620      	mov	r0, r4
}
 1020114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return CRC_crc16( &tbl_array[0], EVNT_APP_usSt_75_get_size() );
 1020118:	4718      	bx	r3
 102011a:	bf00      	nop
 102011c:	20000c78 	.word	0x20000c78
 1020120:	01019355 	.word	0x01019355
 1020124:	01019531 	.word	0x01019531
 1020128:	01016b5d 	.word	0x01016b5d

0102012c <SM_APP_usSt_75_ram_calculate_crc>:
uint16_t SM_APP_usSt_75_ram_calculate_crc(void) {
 102012c:	b510      	push	{r4, lr}
	EVNT_APP_vCopy_st_75_ram(&tbl_array[0]);
 102012e:	4c06      	ldr	r4, [pc, #24]	; (1020148 <SM_APP_usSt_75_ram_calculate_crc+0x1c>)
 1020130:	4b06      	ldr	r3, [pc, #24]	; (102014c <SM_APP_usSt_75_ram_calculate_crc+0x20>)
 1020132:	4620      	mov	r0, r4
 1020134:	4798      	blx	r3
	return CRC_crc16( &tbl_array[0], EVNT_APP_usSt_75_get_size() );
 1020136:	4b06      	ldr	r3, [pc, #24]	; (1020150 <SM_APP_usSt_75_ram_calculate_crc+0x24>)
 1020138:	4798      	blx	r3
 102013a:	4b06      	ldr	r3, [pc, #24]	; (1020154 <SM_APP_usSt_75_ram_calculate_crc+0x28>)
 102013c:	4601      	mov	r1, r0
 102013e:	4620      	mov	r0, r4
}
 1020140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return CRC_crc16( &tbl_array[0], EVNT_APP_usSt_75_get_size() );
 1020144:	4718      	bx	r3
 1020146:	bf00      	nop
 1020148:	20000c78 	.word	0x20000c78
 102014c:	0101931d 	.word	0x0101931d
 1020150:	01019531 	.word	0x01019531
 1020154:	01016b5d 	.word	0x01016b5d

01020158 <SM_APP_vIs_st_75_corrupted_data>:
bool SM_APP_vIs_st_75_corrupted_data(void) {
 1020158:	b530      	push	{r4, r5, lr}
	cfg_table.size = EVNT_APP_usSt_75_get_size();
 102015a:	4b16      	ldr	r3, [pc, #88]	; (10201b4 <SM_APP_vIs_st_75_corrupted_data+0x5c>)
 102015c:	4c16      	ldr	r4, [pc, #88]	; (10201b8 <SM_APP_vIs_st_75_corrupted_data+0x60>)
	meter.config_state.st_75_state = SM_APP_ucCheck_table_ram_vs_nvm(cfg_table);
 102015e:	4d17      	ldr	r5, [pc, #92]	; (10201bc <SM_APP_vIs_st_75_corrupted_data+0x64>)
bool SM_APP_vIs_st_75_corrupted_data(void) {
 1020160:	b083      	sub	sp, #12
	cfg_table.size = EVNT_APP_usSt_75_get_size();
 1020162:	4798      	blx	r3
	cfg_table.crc_nvm = SM_APP_usSt_75_nvm_calculate_crc();
 1020164:	4b16      	ldr	r3, [pc, #88]	; (10201c0 <SM_APP_vIs_st_75_corrupted_data+0x68>)
	cfg_table.size = EVNT_APP_usSt_75_get_size();
 1020166:	8020      	strh	r0, [r4, #0]
	cfg_table.crc_nvm = SM_APP_usSt_75_nvm_calculate_crc();
 1020168:	4798      	blx	r3
	cfg_table.crc_ram = SM_APP_usSt_75_ram_calculate_crc();
 102016a:	4b16      	ldr	r3, [pc, #88]	; (10201c4 <SM_APP_vIs_st_75_corrupted_data+0x6c>)
	cfg_table.crc_nvm = SM_APP_usSt_75_nvm_calculate_crc();
 102016c:	80e0      	strh	r0, [r4, #6]
	cfg_table.crc_ram = SM_APP_usSt_75_ram_calculate_crc();
 102016e:	4798      	blx	r3
	EEPROM_reader( ST_75_NVM_CRC_ADDR, &crc, 2 );
 1020170:	f10d 0106 	add.w	r1, sp, #6
	cfg_table.crc_ram = SM_APP_usSt_75_ram_calculate_crc();
 1020174:	80a0      	strh	r0, [r4, #4]
	EEPROM_reader( ST_75_NVM_CRC_ADDR, &crc, 2 );
 1020176:	2202      	movs	r2, #2
 1020178:	4b13      	ldr	r3, [pc, #76]	; (10201c8 <SM_APP_vIs_st_75_corrupted_data+0x70>)
 102017a:	f640 60b3 	movw	r0, #3763	; 0xeb3
 102017e:	4798      	blx	r3
	return crc;
 1020180:	f8bd 1006 	ldrh.w	r1, [sp, #6]
	cfg_table.recover_nvm_table = EVNT_APP_vSt_75_recover_nvm;
 1020184:	4a11      	ldr	r2, [pc, #68]	; (10201cc <SM_APP_vIs_st_75_corrupted_data+0x74>)
	cfg_table.recover_ram_table = EVNT_APP_vSt_75_recover_ram;
 1020186:	4b12      	ldr	r3, [pc, #72]	; (10201d0 <SM_APP_vIs_st_75_corrupted_data+0x78>)
	cfg_table.crc_stored = SM_APP_usSt_75_read_crc();
 1020188:	8061      	strh	r1, [r4, #2]
	cfg_table.recover_nvm_table = EVNT_APP_vSt_75_recover_nvm;
 102018a:	60a2      	str	r2, [r4, #8]
	cfg_table.recover_ram_table = EVNT_APP_vSt_75_recover_ram;
 102018c:	60e3      	str	r3, [r4, #12]
	meter.config_state.st_75_state = SM_APP_ucCheck_table_ram_vs_nvm(cfg_table);
 102018e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 1020192:	4c10      	ldr	r4, [pc, #64]	; (10201d4 <SM_APP_vIs_st_75_corrupted_data+0x7c>)
 1020194:	47a0      	blx	r4
 1020196:	4629      	mov	r1, r5
	EEPROM_writer( MT_5_ST75_ERROR_CODE_ADDR, &meter.config_state.st_75_state, 1 );
 1020198:	2201      	movs	r2, #1
	meter.config_state.st_75_state = SM_APP_ucCheck_table_ram_vs_nvm(cfg_table);
 102019a:	f801 0f1a 	strb.w	r0, [r1, #26]!
	EEPROM_writer( MT_5_ST75_ERROR_CODE_ADDR, &meter.config_state.st_75_state, 1 );
 102019e:	4b0e      	ldr	r3, [pc, #56]	; (10201d8 <SM_APP_vIs_st_75_corrupted_data+0x80>)
 10201a0:	f249 2066 	movw	r0, #37478	; 0x9266
 10201a4:	4798      	blx	r3
	if ( meter.config_state.st_75_state != TBL_DATA_OK ) {
 10201a6:	7ea8      	ldrb	r0, [r5, #26]
}
 10201a8:	3000      	adds	r0, #0
 10201aa:	bf18      	it	ne
 10201ac:	2001      	movne	r0, #1
 10201ae:	b003      	add	sp, #12
 10201b0:	bd30      	pop	{r4, r5, pc}
 10201b2:	bf00      	nop
 10201b4:	01019531 	.word	0x01019531
 10201b8:	20000c60 	.word	0x20000c60
 10201bc:	20016c2c 	.word	0x20016c2c
 10201c0:	01020101 	.word	0x01020101
 10201c4:	0102012d 	.word	0x0102012d
 10201c8:	01017511 	.word	0x01017511
 10201cc:	01019389 	.word	0x01019389
 10201d0:	01019391 	.word	0x01019391
 10201d4:	0101f26d 	.word	0x0101f26d
 10201d8:	01017509 	.word	0x01017509

010201dc <SM_APP_vSt_75_write_crc>:
void SM_APP_vSt_75_write_crc(uint16_t crc) {
 10201dc:	b500      	push	{lr}
 10201de:	b083      	sub	sp, #12
 10201e0:	a902      	add	r1, sp, #8
	EEPROM_writer( ST_75_NVM_CRC_ADDR, &crc, 2 );
 10201e2:	2202      	movs	r2, #2
void SM_APP_vSt_75_write_crc(uint16_t crc) {
 10201e4:	f821 0d02 	strh.w	r0, [r1, #-2]!
	EEPROM_writer( ST_75_NVM_CRC_ADDR, &crc, 2 );
 10201e8:	4b03      	ldr	r3, [pc, #12]	; (10201f8 <SM_APP_vSt_75_write_crc+0x1c>)
 10201ea:	f640 60b3 	movw	r0, #3763	; 0xeb3
 10201ee:	4798      	blx	r3
}
 10201f0:	b003      	add	sp, #12
 10201f2:	f85d fb04 	ldr.w	pc, [sp], #4
 10201f6:	bf00      	nop
 10201f8:	01017509 	.word	0x01017509

010201fc <SM_APP_usMt_73_nvm_calculate_crc>:
uint16_t SM_APP_usMt_73_nvm_calculate_crc(void) {
 10201fc:	b510      	push	{r4, lr}
	EVNT_APP_vCopy_mt_73_nvm(&tbl_array[0]);
 10201fe:	4c06      	ldr	r4, [pc, #24]	; (1020218 <SM_APP_usMt_73_nvm_calculate_crc+0x1c>)
 1020200:	4b06      	ldr	r3, [pc, #24]	; (102021c <SM_APP_usMt_73_nvm_calculate_crc+0x20>)
 1020202:	4620      	mov	r0, r4
 1020204:	4798      	blx	r3
	return CRC_crc16( &tbl_array[0], EVNT_APP_usMt_73_get_size() );
 1020206:	4b06      	ldr	r3, [pc, #24]	; (1020220 <SM_APP_usMt_73_nvm_calculate_crc+0x24>)
 1020208:	4798      	blx	r3
 102020a:	4b06      	ldr	r3, [pc, #24]	; (1020224 <SM_APP_usMt_73_nvm_calculate_crc+0x28>)
 102020c:	4601      	mov	r1, r0
 102020e:	4620      	mov	r0, r4
}
 1020210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return CRC_crc16( &tbl_array[0], EVNT_APP_usMt_73_get_size() );
 1020214:	4718      	bx	r3
 1020216:	bf00      	nop
 1020218:	20000c78 	.word	0x20000c78
 102021c:	01018c29 	.word	0x01018c29
 1020220:	01018d95 	.word	0x01018d95
 1020224:	01016b5d 	.word	0x01016b5d

01020228 <SM_APP_usMt_73_ram_calculate_crc>:
uint16_t SM_APP_usMt_73_ram_calculate_crc(void) {
 1020228:	b510      	push	{r4, lr}
	EVNT_APP_vCopy_mt_73_ram(&tbl_array[0]);
 102022a:	4c06      	ldr	r4, [pc, #24]	; (1020244 <SM_APP_usMt_73_ram_calculate_crc+0x1c>)
 102022c:	4b06      	ldr	r3, [pc, #24]	; (1020248 <SM_APP_usMt_73_ram_calculate_crc+0x20>)
 102022e:	4620      	mov	r0, r4
 1020230:	4798      	blx	r3
	return CRC_crc16( &tbl_array[0], EVNT_APP_usMt_73_get_size() );
 1020232:	4b06      	ldr	r3, [pc, #24]	; (102024c <SM_APP_usMt_73_ram_calculate_crc+0x24>)
 1020234:	4798      	blx	r3
 1020236:	4b06      	ldr	r3, [pc, #24]	; (1020250 <SM_APP_usMt_73_ram_calculate_crc+0x28>)
 1020238:	4601      	mov	r1, r0
 102023a:	4620      	mov	r0, r4
}
 102023c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return CRC_crc16( &tbl_array[0], EVNT_APP_usMt_73_get_size() );
 1020240:	4718      	bx	r3
 1020242:	bf00      	nop
 1020244:	20000c78 	.word	0x20000c78
 1020248:	01018bc1 	.word	0x01018bc1
 102024c:	01018d95 	.word	0x01018d95
 1020250:	01016b5d 	.word	0x01016b5d

01020254 <SM_APP_vIs_mt_73_corrupted_data>:
bool SM_APP_vIs_mt_73_corrupted_data(void) {
 1020254:	b530      	push	{r4, r5, lr}
	cfg_table.size = EVNT_APP_usMt_73_get_size();
 1020256:	4b16      	ldr	r3, [pc, #88]	; (10202b0 <SM_APP_vIs_mt_73_corrupted_data+0x5c>)
 1020258:	4c16      	ldr	r4, [pc, #88]	; (10202b4 <SM_APP_vIs_mt_73_corrupted_data+0x60>)
	meter.config_state.mt_73_state = SM_APP_ucCheck_table_ram_vs_nvm(cfg_table);
 102025a:	4d17      	ldr	r5, [pc, #92]	; (10202b8 <SM_APP_vIs_mt_73_corrupted_data+0x64>)
bool SM_APP_vIs_mt_73_corrupted_data(void) {
 102025c:	b083      	sub	sp, #12
	cfg_table.size = EVNT_APP_usMt_73_get_size();
 102025e:	4798      	blx	r3
	cfg_table.crc_nvm = SM_APP_usMt_73_nvm_calculate_crc();
 1020260:	4b16      	ldr	r3, [pc, #88]	; (10202bc <SM_APP_vIs_mt_73_corrupted_data+0x68>)
	cfg_table.size = EVNT_APP_usMt_73_get_size();
 1020262:	8020      	strh	r0, [r4, #0]
	cfg_table.crc_nvm = SM_APP_usMt_73_nvm_calculate_crc();
 1020264:	4798      	blx	r3
	cfg_table.crc_ram = SM_APP_usMt_73_ram_calculate_crc();
 1020266:	4b16      	ldr	r3, [pc, #88]	; (10202c0 <SM_APP_vIs_mt_73_corrupted_data+0x6c>)
	cfg_table.crc_nvm = SM_APP_usMt_73_nvm_calculate_crc();
 1020268:	80e0      	strh	r0, [r4, #6]
	cfg_table.crc_ram = SM_APP_usMt_73_ram_calculate_crc();
 102026a:	4798      	blx	r3
	EEPROM_reader( MT_73_NVM_CRC_ADDR, &crc, 2 );
 102026c:	f10d 0106 	add.w	r1, sp, #6
	cfg_table.crc_ram = SM_APP_usMt_73_ram_calculate_crc();
 1020270:	80a0      	strh	r0, [r4, #4]
	EEPROM_reader( MT_73_NVM_CRC_ADDR, &crc, 2 );
 1020272:	2202      	movs	r2, #2
 1020274:	4b13      	ldr	r3, [pc, #76]	; (10202c4 <SM_APP_vIs_mt_73_corrupted_data+0x70>)
 1020276:	f241 00e5 	movw	r0, #4325	; 0x10e5
 102027a:	4798      	blx	r3
	return crc;
 102027c:	f8bd 1006 	ldrh.w	r1, [sp, #6]
	cfg_table.recover_nvm_table = EVNT_APP_vMt_73_recover_nvm;
 1020280:	4a11      	ldr	r2, [pc, #68]	; (10202c8 <SM_APP_vIs_mt_73_corrupted_data+0x74>)
	cfg_table.recover_ram_table = EVNT_APP_vMt_73_recover_ram;
 1020282:	4b12      	ldr	r3, [pc, #72]	; (10202cc <SM_APP_vIs_mt_73_corrupted_data+0x78>)
	cfg_table.crc_stored = SM_APP_usMt_73_read_crc();
 1020284:	8061      	strh	r1, [r4, #2]
	cfg_table.recover_nvm_table = EVNT_APP_vMt_73_recover_nvm;
 1020286:	60a2      	str	r2, [r4, #8]
	cfg_table.recover_ram_table = EVNT_APP_vMt_73_recover_ram;
 1020288:	60e3      	str	r3, [r4, #12]
	meter.config_state.mt_73_state = SM_APP_ucCheck_table_ram_vs_nvm(cfg_table);
 102028a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 102028e:	4c10      	ldr	r4, [pc, #64]	; (10202d0 <SM_APP_vIs_mt_73_corrupted_data+0x7c>)
 1020290:	47a0      	blx	r4
 1020292:	4629      	mov	r1, r5
	EEPROM_writer( MT_5_MT73_ERROR_CODE_ADDR, &meter.config_state.mt_73_state, 1 );
 1020294:	2201      	movs	r2, #1
	meter.config_state.mt_73_state = SM_APP_ucCheck_table_ram_vs_nvm(cfg_table);
 1020296:	f801 0f1f 	strb.w	r0, [r1, #31]!
	EEPROM_writer( MT_5_MT73_ERROR_CODE_ADDR, &meter.config_state.mt_73_state, 1 );
 102029a:	4b0e      	ldr	r3, [pc, #56]	; (10202d4 <SM_APP_vIs_mt_73_corrupted_data+0x80>)
 102029c:	f249 2067 	movw	r0, #37479	; 0x9267
 10202a0:	4798      	blx	r3
	if ( meter.config_state.mt_73_state != TBL_DATA_OK ) {
 10202a2:	7fe8      	ldrb	r0, [r5, #31]
}
 10202a4:	3000      	adds	r0, #0
 10202a6:	bf18      	it	ne
 10202a8:	2001      	movne	r0, #1
 10202aa:	b003      	add	sp, #12
 10202ac:	bd30      	pop	{r4, r5, pc}
 10202ae:	bf00      	nop
 10202b0:	01018d95 	.word	0x01018d95
 10202b4:	20000c60 	.word	0x20000c60
 10202b8:	20016c2c 	.word	0x20016c2c
 10202bc:	010201fd 	.word	0x010201fd
 10202c0:	01020229 	.word	0x01020229
 10202c4:	01017511 	.word	0x01017511
 10202c8:	01018c8d 	.word	0x01018c8d
 10202cc:	01018c95 	.word	0x01018c95
 10202d0:	0101f26d 	.word	0x0101f26d
 10202d4:	01017509 	.word	0x01017509

010202d8 <SM_APP_bIs_ed_configuration_error>:
	if ( !meter.ed_mode.test_mode.enabled ) {
 10202d8:	4b21      	ldr	r3, [pc, #132]	; (1020360 <SM_APP_bIs_ed_configuration_error+0x88>)
 10202da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 10202de:	b10b      	cbz	r3, 10202e4 <SM_APP_bIs_ed_configuration_error+0xc>
	bool error = false;
 10202e0:	2000      	movs	r0, #0
 10202e2:	4770      	bx	lr
bool SM_APP_bIs_ed_configuration_error(void) {
 10202e4:	b510      	push	{r4, lr}
		if ( SM_APP_vIs_st_11_corrupted_data() ||
 10202e6:	4b1f      	ldr	r3, [pc, #124]	; (1020364 <SM_APP_bIs_ed_configuration_error+0x8c>)
 10202e8:	4798      	blx	r3
 10202ea:	b108      	cbz	r0, 10202f0 <SM_APP_bIs_ed_configuration_error+0x18>
			error = true;
 10202ec:	2001      	movs	r0, #1
 10202ee:	bd10      	pop	{r4, pc}
			 SM_APP_vIs_st_21_corrupted_data() ||
 10202f0:	4b1d      	ldr	r3, [pc, #116]	; (1020368 <SM_APP_bIs_ed_configuration_error+0x90>)
 10202f2:	4798      	blx	r3
		if ( SM_APP_vIs_st_11_corrupted_data() ||
 10202f4:	2800      	cmp	r0, #0
 10202f6:	d1f9      	bne.n	10202ec <SM_APP_bIs_ed_configuration_error+0x14>
			 SM_APP_vIs_st_22_corrupted_data() ||
 10202f8:	4b1c      	ldr	r3, [pc, #112]	; (102036c <SM_APP_bIs_ed_configuration_error+0x94>)
 10202fa:	4798      	blx	r3
			 SM_APP_vIs_st_21_corrupted_data() ||
 10202fc:	2800      	cmp	r0, #0
 10202fe:	d1f5      	bne.n	10202ec <SM_APP_bIs_ed_configuration_error+0x14>
			 SM_APP_vIs_st_27_corrupted_data() ||
 1020300:	4b1b      	ldr	r3, [pc, #108]	; (1020370 <SM_APP_bIs_ed_configuration_error+0x98>)
 1020302:	4798      	blx	r3
			 SM_APP_vIs_st_22_corrupted_data() ||
 1020304:	2800      	cmp	r0, #0
 1020306:	d1f1      	bne.n	10202ec <SM_APP_bIs_ed_configuration_error+0x14>
			 SM_APP_vIs_st_41_corrupted_data() ||
 1020308:	4b1a      	ldr	r3, [pc, #104]	; (1020374 <SM_APP_bIs_ed_configuration_error+0x9c>)
 102030a:	4798      	blx	r3
			 SM_APP_vIs_st_27_corrupted_data() ||
 102030c:	2800      	cmp	r0, #0
 102030e:	d1ed      	bne.n	10202ec <SM_APP_bIs_ed_configuration_error+0x14>
			 SM_APP_vIs_st_42_corrupted_data() ||
 1020310:	4b19      	ldr	r3, [pc, #100]	; (1020378 <SM_APP_bIs_ed_configuration_error+0xa0>)
 1020312:	4798      	blx	r3
			 SM_APP_vIs_st_41_corrupted_data() ||
 1020314:	2800      	cmp	r0, #0
 1020316:	d1e9      	bne.n	10202ec <SM_APP_bIs_ed_configuration_error+0x14>
			 SM_APP_vIs_st_43_corrupted_data() ||
 1020318:	4b18      	ldr	r3, [pc, #96]	; (102037c <SM_APP_bIs_ed_configuration_error+0xa4>)
 102031a:	4798      	blx	r3
			 SM_APP_vIs_st_42_corrupted_data() ||
 102031c:	2800      	cmp	r0, #0
 102031e:	d1e5      	bne.n	10202ec <SM_APP_bIs_ed_configuration_error+0x14>
			 SM_APP_vIs_st_44_corrupted_data() ||
 1020320:	4b17      	ldr	r3, [pc, #92]	; (1020380 <SM_APP_bIs_ed_configuration_error+0xa8>)
 1020322:	4798      	blx	r3
			 SM_APP_vIs_st_43_corrupted_data() ||
 1020324:	2800      	cmp	r0, #0
 1020326:	d1e1      	bne.n	10202ec <SM_APP_bIs_ed_configuration_error+0x14>
			 SM_APP_vIs_st_51_corrupted_data() ||
 1020328:	4b16      	ldr	r3, [pc, #88]	; (1020384 <SM_APP_bIs_ed_configuration_error+0xac>)
 102032a:	4798      	blx	r3
			 SM_APP_vIs_st_44_corrupted_data() ||
 102032c:	2800      	cmp	r0, #0
 102032e:	d1dd      	bne.n	10202ec <SM_APP_bIs_ed_configuration_error+0x14>
			 SM_APP_vIs_st_61_corrupted_data() ||
 1020330:	4b15      	ldr	r3, [pc, #84]	; (1020388 <SM_APP_bIs_ed_configuration_error+0xb0>)
 1020332:	4798      	blx	r3
			 SM_APP_vIs_st_51_corrupted_data() ||
 1020334:	2800      	cmp	r0, #0
 1020336:	d1d9      	bne.n	10202ec <SM_APP_bIs_ed_configuration_error+0x14>
			 SM_APP_vIs_st_62_corrupted_data() ||
 1020338:	4b14      	ldr	r3, [pc, #80]	; (102038c <SM_APP_bIs_ed_configuration_error+0xb4>)
 102033a:	4798      	blx	r3
			 SM_APP_vIs_st_61_corrupted_data() ||
 102033c:	2800      	cmp	r0, #0
 102033e:	d1d5      	bne.n	10202ec <SM_APP_bIs_ed_configuration_error+0x14>
			 SM_APP_vIs_st_71_corrupted_data() ||
 1020340:	4b13      	ldr	r3, [pc, #76]	; (1020390 <SM_APP_bIs_ed_configuration_error+0xb8>)
 1020342:	4798      	blx	r3
			 SM_APP_vIs_st_62_corrupted_data() ||
 1020344:	2800      	cmp	r0, #0
 1020346:	d1d1      	bne.n	10202ec <SM_APP_bIs_ed_configuration_error+0x14>
			 SM_APP_vIs_st_73_corrupted_data() ||
 1020348:	4b12      	ldr	r3, [pc, #72]	; (1020394 <SM_APP_bIs_ed_configuration_error+0xbc>)
 102034a:	4798      	blx	r3
			 SM_APP_vIs_st_71_corrupted_data() ||
 102034c:	2800      	cmp	r0, #0
 102034e:	d1cd      	bne.n	10202ec <SM_APP_bIs_ed_configuration_error+0x14>
			 SM_APP_vIs_st_75_corrupted_data() ||
 1020350:	4b11      	ldr	r3, [pc, #68]	; (1020398 <SM_APP_bIs_ed_configuration_error+0xc0>)
 1020352:	4798      	blx	r3
			 SM_APP_vIs_st_73_corrupted_data() ||
 1020354:	2800      	cmp	r0, #0
 1020356:	d1c9      	bne.n	10202ec <SM_APP_bIs_ed_configuration_error+0x14>
			 SM_APP_vIs_mt_73_corrupted_data() ){
 1020358:	4b10      	ldr	r3, [pc, #64]	; (102039c <SM_APP_bIs_ed_configuration_error+0xc4>)
}
 102035a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			 SM_APP_vIs_mt_73_corrupted_data() ){
 102035e:	4718      	bx	r3
 1020360:	20016c2c 	.word	0x20016c2c
 1020364:	0101f46d 	.word	0x0101f46d
 1020368:	0101f569 	.word	0x0101f569
 102036c:	0101f665 	.word	0x0101f665
 1020370:	0101f761 	.word	0x0101f761
 1020374:	0101f85d 	.word	0x0101f85d
 1020378:	0101f959 	.word	0x0101f959
 102037c:	0101fa55 	.word	0x0101fa55
 1020380:	0101fb71 	.word	0x0101fb71
 1020384:	0101fc6d 	.word	0x0101fc6d
 1020388:	0101fd69 	.word	0x0101fd69
 102038c:	0101fe65 	.word	0x0101fe65
 1020390:	0101ff61 	.word	0x0101ff61
 1020394:	0102005d 	.word	0x0102005d
 1020398:	01020159 	.word	0x01020159
 102039c:	01020255 	.word	0x01020255

010203a0 <SM_APP_vMt_73_write_crc>:
void SM_APP_vMt_73_write_crc(uint16_t crc) {
 10203a0:	b500      	push	{lr}
 10203a2:	b083      	sub	sp, #12
 10203a4:	a902      	add	r1, sp, #8
	EEPROM_writer( MT_73_NVM_CRC_ADDR, &crc, 2 );
 10203a6:	2202      	movs	r2, #2
void SM_APP_vMt_73_write_crc(uint16_t crc) {
 10203a8:	f821 0d02 	strh.w	r0, [r1, #-2]!
	EEPROM_writer( MT_73_NVM_CRC_ADDR, &crc, 2 );
 10203ac:	4b03      	ldr	r3, [pc, #12]	; (10203bc <SM_APP_vMt_73_write_crc+0x1c>)
 10203ae:	f241 00e5 	movw	r0, #4325	; 0x10e5
 10203b2:	4798      	blx	r3
}
 10203b4:	b003      	add	sp, #12
 10203b6:	f85d fb04 	ldr.w	pc, [sp], #4
 10203ba:	bf00      	nop
 10203bc:	01017509 	.word	0x01017509

010203c0 <SM_APP_vSet_test_mode_expired_flag>:
 * \retval void
 ******************************************************************************
 */
void SM_APP_vSet_test_mode_expired_flag(void) {
	
	meter_os.test_mode_expired = true;
 10203c0:	4b01      	ldr	r3, [pc, #4]	; (10203c8 <SM_APP_vSet_test_mode_expired_flag+0x8>)
 10203c2:	2201      	movs	r2, #1
 10203c4:	705a      	strb	r2, [r3, #1]
 10203c6:	4770      	bx	lr
 10203c8:	20016c28 	.word	0x20016c28

010203cc <SM_APP_ucGet_table_state>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
uint8_t SM_APP_ucGet_table_state(uint32_t table_state_addr) {
 10203cc:	b500      	push	{lr}
 10203ce:	b083      	sub	sp, #12
	
	uint8_t state;
	
	EEPROM_reader( table_state_addr, &state, 1 );
 10203d0:	2201      	movs	r2, #1
 10203d2:	f10d 0107 	add.w	r1, sp, #7
 10203d6:	4b03      	ldr	r3, [pc, #12]	; (10203e4 <SM_APP_ucGet_table_state+0x18>)
 10203d8:	4798      	blx	r3
	
	return state;
}
 10203da:	f89d 0007 	ldrb.w	r0, [sp, #7]
 10203de:	b003      	add	sp, #12
 10203e0:	f85d fb04 	ldr.w	pc, [sp], #4
 10203e4:	01017511 	.word	0x01017511

010203e8 <SM_APP_vChange_table_state>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
void SM_APP_vChange_table_state(uint32_t table_state_addr, uint8_t state) {
 10203e8:	b510      	push	{r4, lr}
 10203ea:	b082      	sub	sp, #8
 10203ec:	ab02      	add	r3, sp, #8
		
	EEPROM_writer( table_state_addr, &state, 1 );
 10203ee:	2201      	movs	r2, #1
void SM_APP_vChange_table_state(uint32_t table_state_addr, uint8_t state) {
 10203f0:	f803 1d01 	strb.w	r1, [r3, #-1]!
	EEPROM_writer( table_state_addr, &state, 1 );
 10203f4:	4c02      	ldr	r4, [pc, #8]	; (1020400 <SM_APP_vChange_table_state+0x18>)
 10203f6:	4619      	mov	r1, r3
 10203f8:	47a0      	blx	r4
}
 10203fa:	b002      	add	sp, #8
 10203fc:	bd10      	pop	{r4, pc}
 10203fe:	bf00      	nop
 1020400:	01017509 	.word	0x01017509

01020404 <SM_APP_vMt_1_restore_default_values>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
void SM_APP_vMt_1_restore_default_values(void) {
 1020404:	b5f0      	push	{r4, r5, r6, r7, lr}
 1020406:	b087      	sub	sp, #28
 1020408:	a906      	add	r1, sp, #24
 102040a:	23ff      	movs	r3, #255	; 0xff
	EEPROM_writer( table_state_addr, &state, 1 );
 102040c:	4d22      	ldr	r5, [pc, #136]	; (1020498 <SM_APP_vMt_1_restore_default_values+0x94>)
 102040e:	f801 3d11 	strb.w	r3, [r1, #-17]!
 1020412:	2201      	movs	r2, #1
 1020414:	f640 7036 	movw	r0, #3894	; 0xf36
 1020418:	47a8      	blx	r5
	uint8_t temp = 0;
	
	SM_APP_vChange_table_state(MT_1_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
	
	memset(&data_1, 0, sizeof(data_1));
	strcpy((char*)&data_1, FW_PART_NUMBER);														// FW Part number
 102041a:	4b20      	ldr	r3, [pc, #128]	; (102049c <SM_APP_vMt_1_restore_default_values+0x98>)
	EEPROM_writer( MT_1_FW_PART_NUMBER_ADDR, &data_1, 8);
	strcpy((char*)&data_1, HW_PART_NUMBER);														// HW Part number
	EEPROM_writer( MT_1_HW_PART_NUMBER_ADDR, &data_1, 8);
	memset((void*)&data_1, temp, 1);															// Identity
	EEPROM_writer( MT_1_ED_IDENTITY_ADDR, &data_1, 1);
	strcpy((char*)&data_1, "0000000000000000");													// Board assembly part number
 102041c:	4c20      	ldr	r4, [pc, #128]	; (10204a0 <SM_APP_vMt_1_restore_default_values+0x9c>)
	strcpy((char*)&data_1, FW_PART_NUMBER);														// FW Part number
 102041e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
	memset(&data_1, 0, sizeof(data_1));
 1020422:	2700      	movs	r7, #0
	strcpy((char*)&data_1, FW_PART_NUMBER);														// FW Part number
 1020424:	ae02      	add	r6, sp, #8
	memset(&data_1, 0, sizeof(data_1));
 1020426:	9704      	str	r7, [sp, #16]
 1020428:	9705      	str	r7, [sp, #20]
	strcpy((char*)&data_1, FW_PART_NUMBER);														// FW Part number
 102042a:	c603      	stmia	r6!, {r0, r1}
	EEPROM_writer( MT_1_FW_PART_NUMBER_ADDR, &data_1, 8);
 102042c:	a902      	add	r1, sp, #8
	strcpy((char*)&data_1, FW_PART_NUMBER);														// FW Part number
 102042e:	7032      	strb	r2, [r6, #0]
	EEPROM_writer( MT_1_FW_PART_NUMBER_ADDR, &data_1, 8);
 1020430:	f640 7039 	movw	r0, #3897	; 0xf39
 1020434:	2208      	movs	r2, #8
 1020436:	47a8      	blx	r5
	strcpy((char*)&data_1, HW_PART_NUMBER);														// HW Part number
 1020438:	4b1a      	ldr	r3, [pc, #104]	; (10204a4 <SM_APP_vMt_1_restore_default_values+0xa0>)
 102043a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 102043e:	ab02      	add	r3, sp, #8
 1020440:	c303      	stmia	r3!, {r0, r1}
 1020442:	7032      	strb	r2, [r6, #0]
	EEPROM_writer( MT_1_HW_PART_NUMBER_ADDR, &data_1, 8);
 1020444:	a902      	add	r1, sp, #8
 1020446:	2208      	movs	r2, #8
 1020448:	f640 7041 	movw	r0, #3905	; 0xf41
 102044c:	47a8      	blx	r5
	EEPROM_writer( MT_1_ED_IDENTITY_ADDR, &data_1, 1);
 102044e:	a902      	add	r1, sp, #8
 1020450:	f88d 7008 	strb.w	r7, [sp, #8]
 1020454:	2201      	movs	r2, #1
	strcpy((char*)&data_1, "0000000000000000");													// Board assembly part number
 1020456:	4627      	mov	r7, r4
	EEPROM_writer( MT_1_ED_IDENTITY_ADDR, &data_1, 1);
 1020458:	f640 7049 	movw	r0, #3913	; 0xf49
 102045c:	47a8      	blx	r5
	strcpy((char*)&data_1, "0000000000000000");													// Board assembly part number
 102045e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 1020460:	ae02      	add	r6, sp, #8
 1020462:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 1020464:	683f      	ldr	r7, [r7, #0]
 1020466:	7037      	strb	r7, [r6, #0]
	EEPROM_writer( MT_1_BOARD_ASSEMBLY_SERIAL_NUMBER_ADDR, &data_1, 16);
 1020468:	a902      	add	r1, sp, #8
 102046a:	2210      	movs	r2, #16
 102046c:	f640 704a 	movw	r0, #3914	; 0xf4a
 1020470:	47a8      	blx	r5
	strcpy((char*)&data_1, "0000000000000000");													// MFG module serial number
 1020472:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 1020474:	ac02      	add	r4, sp, #8
 1020476:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	EEPROM_writer( MT_1_MFG_MODULE_SERIAL_NUMBER_ADDR, &data_1, 16);
 1020478:	a902      	add	r1, sp, #8
 102047a:	2210      	movs	r2, #16
	strcpy((char*)&data_1, "0000000000000000");													// MFG module serial number
 102047c:	7027      	strb	r7, [r4, #0]
	EEPROM_writer( MT_1_MFG_MODULE_SERIAL_NUMBER_ADDR, &data_1, 16);
 102047e:	f640 705a 	movw	r0, #3930	; 0xf5a
 1020482:	47a8      	blx	r5
 1020484:	a906      	add	r1, sp, #24
 1020486:	2345      	movs	r3, #69	; 0x45
 1020488:	f801 3d12 	strb.w	r3, [r1, #-18]!
	EEPROM_writer( table_state_addr, &state, 1 );
 102048c:	2201      	movs	r2, #1
 102048e:	f640 7036 	movw	r0, #3894	; 0xf36
 1020492:	47a8      	blx	r5
	
	SM_APP_vChange_table_state(MT_1_PROG_STATE_ADDR, C1219_TABLE_FULL);
}
 1020494:	b007      	add	sp, #28
 1020496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1020498:	01017509 	.word	0x01017509
 102049c:	01031608 	.word	0x01031608
 10204a0:	010318fc 	.word	0x010318fc
 10204a4:	01031614 	.word	0x01031614

010204a8 <SM_APP_vLoad_mt_1>:
void SM_APP_vLoad_mt_1(void) {
 10204a8:	b500      	push	{lr}
 10204aa:	b083      	sub	sp, #12
	EEPROM_reader( table_state_addr, &state, 1 );
 10204ac:	4b07      	ldr	r3, [pc, #28]	; (10204cc <SM_APP_vLoad_mt_1+0x24>)
 10204ae:	2201      	movs	r2, #1
 10204b0:	f10d 0107 	add.w	r1, sp, #7
 10204b4:	f640 7036 	movw	r0, #3894	; 0xf36
 10204b8:	4798      	blx	r3
	return state;
 10204ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
	if ( SM_APP_ucGet_table_state(MT_1_PROG_STATE_ADDR) != C1219_TABLE_FULL ) {
 10204be:	2b45      	cmp	r3, #69	; 0x45
 10204c0:	d001      	beq.n	10204c6 <SM_APP_vLoad_mt_1+0x1e>
		SM_APP_vMt_1_restore_default_values();
 10204c2:	4b03      	ldr	r3, [pc, #12]	; (10204d0 <SM_APP_vLoad_mt_1+0x28>)
 10204c4:	4798      	blx	r3
}
 10204c6:	b003      	add	sp, #12
 10204c8:	f85d fb04 	ldr.w	pc, [sp], #4
 10204cc:	01017511 	.word	0x01017511
 10204d0:	01020405 	.word	0x01020405

010204d4 <SM_APP_bMt_1_execute_table_reading>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bMt_1_execute_table_reading(uint8_t *table_buffer) {
 10204d4:	b510      	push	{r4, lr}
	
	delay_ms(10);
 10204d6:	4b08      	ldr	r3, [pc, #32]	; (10204f8 <SM_APP_bMt_1_execute_table_reading+0x24>)
bool SM_APP_bMt_1_execute_table_reading(uint8_t *table_buffer) {
 10204d8:	4604      	mov	r4, r0
	delay_ms(10);
 10204da:	4808      	ldr	r0, [pc, #32]	; (10204fc <SM_APP_bMt_1_execute_table_reading+0x28>)
 10204dc:	4798      	blx	r3
	EEPROM_reader( MT_1_START_ADDR, &table_buffer[0], MT_1_SIZE);
 10204de:	4621      	mov	r1, r4
 10204e0:	2231      	movs	r2, #49	; 0x31
 10204e2:	4b07      	ldr	r3, [pc, #28]	; (1020500 <SM_APP_bMt_1_execute_table_reading+0x2c>)
 10204e4:	f640 7039 	movw	r0, #3897	; 0xf39
 10204e8:	4798      	blx	r3
	memcpy((char*)&table_buffer[0], FW_PART_NUMBER, 8);
 10204ea:	4b06      	ldr	r3, [pc, #24]	; (1020504 <SM_APP_bMt_1_execute_table_reading+0x30>)
 10204ec:	cb03      	ldmia	r3!, {r0, r1}
 10204ee:	6020      	str	r0, [r4, #0]
 10204f0:	6061      	str	r1, [r4, #4]
	
	return true;
}
 10204f2:	2001      	movs	r0, #1
 10204f4:	bd10      	pop	{r4, pc}
 10204f6:	bf00      	nop
 10204f8:	20000001 	.word	0x20000001
 10204fc:	00011db7 	.word	0x00011db7
 1020500:	01017511 	.word	0x01017511
 1020504:	01031608 	.word	0x01031608

01020508 <SM_APP_bMt_1_execute_table_writing>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bMt_1_execute_table_writing(uint8_t *table_buffer) {
 1020508:	b508      	push	{r3, lr}
	
	EEPROM_writer(MT_1_START_ADDR, &table_buffer[0], MT_1_SIZE);
 102050a:	4601      	mov	r1, r0
 102050c:	2231      	movs	r2, #49	; 0x31
 102050e:	4b03      	ldr	r3, [pc, #12]	; (102051c <SM_APP_bMt_1_execute_table_writing+0x14>)
 1020510:	f640 7039 	movw	r0, #3897	; 0xf39
 1020514:	4798      	blx	r3
	
	return true;	
}
 1020516:	2001      	movs	r0, #1
 1020518:	bd08      	pop	{r3, pc}
 102051a:	bf00      	nop
 102051c:	01017509 	.word	0x01017509

01020520 <SM_APP_usMt_1_get_size>:
 ******************************************************************************
 */
uint16_t SM_APP_usMt_1_get_size(void) {

	return (uint16_t)MT_1_SIZE;
}
 1020520:	2031      	movs	r0, #49	; 0x31
 1020522:	4770      	bx	lr

01020524 <SM_APP_vMt_3_restore_default_values>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
void SM_APP_vMt_3_restore_default_values(void) {
 1020524:	b510      	push	{r4, lr}
 1020526:	b082      	sub	sp, #8
 1020528:	a902      	add	r1, sp, #8
 102052a:	23ff      	movs	r3, #255	; 0xff
 102052c:	f801 3d06 	strb.w	r3, [r1, #-6]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1020530:	2201      	movs	r2, #1
 1020532:	f640 7082 	movw	r0, #3970	; 0xf82
 1020536:	4c0e      	ldr	r4, [pc, #56]	; (1020570 <SM_APP_vMt_3_restore_default_values+0x4c>)
 1020538:	47a0      	blx	r4
	
	uint32_t nbr_power_outages;
	
	SM_APP_vChange_table_state(MT_3_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
	
	EEPROM_reader(MT_3_NBR_POWER_OUTAGES_ADDR, &nbr_power_outages, 4);
 102053a:	4b0e      	ldr	r3, [pc, #56]	; (1020574 <SM_APP_vMt_3_restore_default_values+0x50>)
 102053c:	a901      	add	r1, sp, #4
 102053e:	2204      	movs	r2, #4
 1020540:	f640 7085 	movw	r0, #3973	; 0xf85
 1020544:	4798      	blx	r3
	
	if (nbr_power_outages == 0xFFFFFFFF) {
 1020546:	9b01      	ldr	r3, [sp, #4]
 1020548:	3301      	adds	r3, #1
 102054a:	d009      	beq.n	1020560 <SM_APP_vMt_3_restore_default_values+0x3c>
 102054c:	a902      	add	r1, sp, #8
 102054e:	2345      	movs	r3, #69	; 0x45
 1020550:	f801 3d05 	strb.w	r3, [r1, #-5]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1020554:	2201      	movs	r2, #1
 1020556:	f640 7082 	movw	r0, #3970	; 0xf82
 102055a:	47a0      	blx	r4
		nbr_power_outages = 0;
		EEPROM_writer(MT_3_NBR_POWER_OUTAGES_ADDR, &nbr_power_outages, 4);
	}
	
	SM_APP_vChange_table_state(MT_3_PROG_STATE_ADDR, C1219_TABLE_FULL);
}
 102055c:	b002      	add	sp, #8
 102055e:	bd10      	pop	{r4, pc}
		nbr_power_outages = 0;
 1020560:	2300      	movs	r3, #0
		EEPROM_writer(MT_3_NBR_POWER_OUTAGES_ADDR, &nbr_power_outages, 4);
 1020562:	a901      	add	r1, sp, #4
 1020564:	2204      	movs	r2, #4
 1020566:	f640 7085 	movw	r0, #3973	; 0xf85
		nbr_power_outages = 0;
 102056a:	9301      	str	r3, [sp, #4]
		EEPROM_writer(MT_3_NBR_POWER_OUTAGES_ADDR, &nbr_power_outages, 4);
 102056c:	47a0      	blx	r4
 102056e:	e7ed      	b.n	102054c <SM_APP_vMt_3_restore_default_values+0x28>
 1020570:	01017509 	.word	0x01017509
 1020574:	01017511 	.word	0x01017511

01020578 <SM_APP_vLoad_mt_3>:
void SM_APP_vLoad_mt_3(void) {
 1020578:	b500      	push	{lr}
 102057a:	b083      	sub	sp, #12
	EEPROM_reader( table_state_addr, &state, 1 );
 102057c:	4b07      	ldr	r3, [pc, #28]	; (102059c <SM_APP_vLoad_mt_3+0x24>)
 102057e:	2201      	movs	r2, #1
 1020580:	f10d 0107 	add.w	r1, sp, #7
 1020584:	f640 7082 	movw	r0, #3970	; 0xf82
 1020588:	4798      	blx	r3
	return state;
 102058a:	f89d 3007 	ldrb.w	r3, [sp, #7]
	if ( SM_APP_ucGet_table_state(MT_3_PROG_STATE_ADDR) != C1219_TABLE_FULL ) {
 102058e:	2b45      	cmp	r3, #69	; 0x45
 1020590:	d001      	beq.n	1020596 <SM_APP_vLoad_mt_3+0x1e>
		SM_APP_vMt_3_restore_default_values();
 1020592:	4b03      	ldr	r3, [pc, #12]	; (10205a0 <SM_APP_vLoad_mt_3+0x28>)
 1020594:	4798      	blx	r3
}
 1020596:	b003      	add	sp, #12
 1020598:	f85d fb04 	ldr.w	pc, [sp], #4
 102059c:	01017511 	.word	0x01017511
 10205a0:	01020525 	.word	0x01020525

010205a4 <SM_APP_bMt_3_execute_table_reading>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bMt_3_execute_table_reading(uint8_t *table_buffer) {
 10205a4:	b510      	push	{r4, lr}
	
	delay_ms(10);
 10205a6:	4b06      	ldr	r3, [pc, #24]	; (10205c0 <SM_APP_bMt_3_execute_table_reading+0x1c>)
bool SM_APP_bMt_3_execute_table_reading(uint8_t *table_buffer) {
 10205a8:	4604      	mov	r4, r0
	delay_ms(10);
 10205aa:	4806      	ldr	r0, [pc, #24]	; (10205c4 <SM_APP_bMt_3_execute_table_reading+0x20>)
 10205ac:	4798      	blx	r3
	EEPROM_reader( MT_3_START_ADDR, &table_buffer[0], MT_3_SIZE);
 10205ae:	4621      	mov	r1, r4
 10205b0:	2296      	movs	r2, #150	; 0x96
 10205b2:	4b05      	ldr	r3, [pc, #20]	; (10205c8 <SM_APP_bMt_3_execute_table_reading+0x24>)
 10205b4:	f640 7085 	movw	r0, #3973	; 0xf85
 10205b8:	4798      	blx	r3
	
	return true;
}
 10205ba:	2001      	movs	r0, #1
 10205bc:	bd10      	pop	{r4, pc}
 10205be:	bf00      	nop
 10205c0:	20000001 	.word	0x20000001
 10205c4:	00011db7 	.word	0x00011db7
 10205c8:	01017511 	.word	0x01017511

010205cc <SM_APP_bMt_3_execute_table_writing>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bMt_3_execute_table_writing(uint8_t *table_buffer) {
 10205cc:	b508      	push	{r3, lr}
	
	EEPROM_writer(MT_3_START_ADDR, &table_buffer[0], MT_3_SIZE);
 10205ce:	4601      	mov	r1, r0
 10205d0:	2296      	movs	r2, #150	; 0x96
 10205d2:	4b03      	ldr	r3, [pc, #12]	; (10205e0 <SM_APP_bMt_3_execute_table_writing+0x14>)
 10205d4:	f640 7085 	movw	r0, #3973	; 0xf85
 10205d8:	4798      	blx	r3
	
	return true;	
}
 10205da:	2001      	movs	r0, #1
 10205dc:	bd08      	pop	{r3, pc}
 10205de:	bf00      	nop
 10205e0:	01017509 	.word	0x01017509

010205e4 <SM_APP_usMt_3_get_size>:
 ******************************************************************************
 */
uint16_t SM_APP_usMt_3_get_size(void) {

	return (uint16_t)MT_3_SIZE;
}
 10205e4:	2096      	movs	r0, #150	; 0x96
 10205e6:	4770      	bx	lr

010205e8 <SM_APP_vMt_23_read_eeprom_values>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
void SM_APP_vMt_23_read_eeprom_values(void) {
 10205e8:	b570      	push	{r4, r5, r6, lr}
	
	delay_ms(10);
	EEPROM_reader( MT_23_VOLT_LOW_LIMIT_ADDR, &meter.voltage_lower_limit, 4 );
 10205ea:	4d09      	ldr	r5, [pc, #36]	; (1020610 <SM_APP_vMt_23_read_eeprom_values+0x28>)
	delay_ms(10);
 10205ec:	4b09      	ldr	r3, [pc, #36]	; (1020614 <SM_APP_vMt_23_read_eeprom_values+0x2c>)
	EEPROM_reader( MT_23_VOLT_LOW_LIMIT_ADDR, &meter.voltage_lower_limit, 4 );
 10205ee:	4c0a      	ldr	r4, [pc, #40]	; (1020618 <SM_APP_vMt_23_read_eeprom_values+0x30>)
	delay_ms(10);
 10205f0:	480a      	ldr	r0, [pc, #40]	; (102061c <SM_APP_vMt_23_read_eeprom_values+0x34>)
 10205f2:	4798      	blx	r3
	EEPROM_reader( MT_23_VOLT_LOW_LIMIT_ADDR, &meter.voltage_lower_limit, 4 );
 10205f4:	4629      	mov	r1, r5
 10205f6:	2204      	movs	r2, #4
 10205f8:	f241 0069 	movw	r0, #4201	; 0x1069
 10205fc:	47a0      	blx	r4
	EEPROM_reader( MT_23_VOLT_HIGH_LIMIT_ADDR, &meter.voltage_upper_limit, 4 );
 10205fe:	1d29      	adds	r1, r5, #4
 1020600:	4623      	mov	r3, r4
 1020602:	2204      	movs	r2, #4
 1020604:	f241 006d 	movw	r0, #4205	; 0x106d
}
 1020608:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	EEPROM_reader( MT_23_VOLT_HIGH_LIMIT_ADDR, &meter.voltage_upper_limit, 4 );
 102060c:	4718      	bx	r3
 102060e:	bf00      	nop
 1020610:	20016c70 	.word	0x20016c70
 1020614:	20000001 	.word	0x20000001
 1020618:	01017511 	.word	0x01017511
 102061c:	00011db7 	.word	0x00011db7

01020620 <SM_APP_vMt_23_write_eeprom_values>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
void SM_APP_vMt_23_write_eeprom_values(void) {
 1020620:	b530      	push	{r4, r5, lr}
 1020622:	b083      	sub	sp, #12
 1020624:	a902      	add	r1, sp, #8
 1020626:	23ff      	movs	r3, #255	; 0xff
	
	SM_APP_vChange_table_state(MT_23_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
	
	EEPROM_writer( MT_23_VOLT_LOW_LIMIT_ADDR, &meter.voltage_lower_limit, 4 );
 1020628:	4d0d      	ldr	r5, [pc, #52]	; (1020660 <SM_APP_vMt_23_write_eeprom_values+0x40>)
 102062a:	f801 3d01 	strb.w	r3, [r1, #-1]!
	EEPROM_writer( table_state_addr, &state, 1 );
 102062e:	4c0d      	ldr	r4, [pc, #52]	; (1020664 <SM_APP_vMt_23_write_eeprom_values+0x44>)
 1020630:	2201      	movs	r2, #1
 1020632:	f241 0066 	movw	r0, #4198	; 0x1066
 1020636:	47a0      	blx	r4
	EEPROM_writer( MT_23_VOLT_LOW_LIMIT_ADDR, &meter.voltage_lower_limit, 4 );
 1020638:	4629      	mov	r1, r5
 102063a:	2204      	movs	r2, #4
 102063c:	f241 0069 	movw	r0, #4201	; 0x1069
 1020640:	47a0      	blx	r4
	EEPROM_writer( MT_23_VOLT_HIGH_LIMIT_ADDR, &meter.voltage_upper_limit, 4 );
 1020642:	1d29      	adds	r1, r5, #4
 1020644:	2204      	movs	r2, #4
 1020646:	f241 006d 	movw	r0, #4205	; 0x106d
 102064a:	47a0      	blx	r4
 102064c:	a902      	add	r1, sp, #8
 102064e:	2345      	movs	r3, #69	; 0x45
 1020650:	f801 3d02 	strb.w	r3, [r1, #-2]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1020654:	2201      	movs	r2, #1
 1020656:	f241 0066 	movw	r0, #4198	; 0x1066
 102065a:	47a0      	blx	r4
	
	SM_APP_vChange_table_state(MT_23_PROG_STATE_ADDR, C1219_TABLE_FULL);
}
 102065c:	b003      	add	sp, #12
 102065e:	bd30      	pop	{r4, r5, pc}
 1020660:	20016c70 	.word	0x20016c70
 1020664:	01017509 	.word	0x01017509

01020668 <SM_APP_vLoad_mt_23>:
void SM_APP_vLoad_mt_23(void) {
 1020668:	b500      	push	{lr}
 102066a:	b083      	sub	sp, #12
	EEPROM_reader( table_state_addr, &state, 1 );
 102066c:	4b0c      	ldr	r3, [pc, #48]	; (10206a0 <SM_APP_vLoad_mt_23+0x38>)
 102066e:	2201      	movs	r2, #1
 1020670:	f10d 0107 	add.w	r1, sp, #7
 1020674:	f241 0066 	movw	r0, #4198	; 0x1066
 1020678:	4798      	blx	r3
	return state;
 102067a:	f89d 3007 	ldrb.w	r3, [sp, #7]
	if ( SM_APP_ucGet_table_state(MT_23_PROG_STATE_ADDR) != C1219_TABLE_FULL ) {
 102067e:	2b45      	cmp	r3, #69	; 0x45
 1020680:	d009      	beq.n	1020696 <SM_APP_vLoad_mt_23+0x2e>
	meter.voltage_lower_limit = 108000;	// 108,000 mV
 1020682:	4b08      	ldr	r3, [pc, #32]	; (10206a4 <SM_APP_vLoad_mt_23+0x3c>)
 1020684:	4808      	ldr	r0, [pc, #32]	; (10206a8 <SM_APP_vLoad_mt_23+0x40>)
	meter.voltage_upper_limit = 132000;	// 132,000 mV
 1020686:	4909      	ldr	r1, [pc, #36]	; (10206ac <SM_APP_vLoad_mt_23+0x44>)
		SM_APP_vMt_23_write_eeprom_values();
 1020688:	4a09      	ldr	r2, [pc, #36]	; (10206b0 <SM_APP_vLoad_mt_23+0x48>)
	meter.voltage_lower_limit = 108000;	// 108,000 mV
 102068a:	6458      	str	r0, [r3, #68]	; 0x44
	meter.voltage_upper_limit = 132000;	// 132,000 mV
 102068c:	6499      	str	r1, [r3, #72]	; 0x48
		SM_APP_vMt_23_write_eeprom_values();
 102068e:	4790      	blx	r2
}
 1020690:	b003      	add	sp, #12
 1020692:	f85d fb04 	ldr.w	pc, [sp], #4
		SM_APP_vMt_23_read_eeprom_values();
 1020696:	4b07      	ldr	r3, [pc, #28]	; (10206b4 <SM_APP_vLoad_mt_23+0x4c>)
 1020698:	4798      	blx	r3
}
 102069a:	b003      	add	sp, #12
 102069c:	f85d fb04 	ldr.w	pc, [sp], #4
 10206a0:	01017511 	.word	0x01017511
 10206a4:	20016c2c 	.word	0x20016c2c
 10206a8:	0001a5e0 	.word	0x0001a5e0
 10206ac:	000203a0 	.word	0x000203a0
 10206b0:	01020621 	.word	0x01020621
 10206b4:	010205e9 	.word	0x010205e9

010206b8 <SM_APP_vMt_23_restore_default_values>:
	meter.voltage_lower_limit = 108000;	// 108,000 mV
 10206b8:	4b03      	ldr	r3, [pc, #12]	; (10206c8 <SM_APP_vMt_23_restore_default_values+0x10>)
 10206ba:	4804      	ldr	r0, [pc, #16]	; (10206cc <SM_APP_vMt_23_restore_default_values+0x14>)
	meter.voltage_upper_limit = 132000;	// 132,000 mV
 10206bc:	4904      	ldr	r1, [pc, #16]	; (10206d0 <SM_APP_vMt_23_restore_default_values+0x18>)
	SM_APP_vMt_23_write_eeprom_values();
 10206be:	4a05      	ldr	r2, [pc, #20]	; (10206d4 <SM_APP_vMt_23_restore_default_values+0x1c>)
	meter.voltage_lower_limit = 108000;	// 108,000 mV
 10206c0:	6458      	str	r0, [r3, #68]	; 0x44
	meter.voltage_upper_limit = 132000;	// 132,000 mV
 10206c2:	6499      	str	r1, [r3, #72]	; 0x48
	SM_APP_vMt_23_write_eeprom_values();
 10206c4:	4710      	bx	r2
 10206c6:	bf00      	nop
 10206c8:	20016c2c 	.word	0x20016c2c
 10206cc:	0001a5e0 	.word	0x0001a5e0
 10206d0:	000203a0 	.word	0x000203a0
 10206d4:	01020621 	.word	0x01020621

010206d8 <SM_APP_bMt_23_execute_table_reading>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bMt_23_execute_table_reading(uint8_t *table_buffer) {
 10206d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	uint8_t k = 0;
	uint32_t phase_voltage;
	
	table_buffer[k++] = (uint8_t)(meter.voltage_lower_limit >> 0);
 10206da:	4d26      	ldr	r5, [pc, #152]	; (1020774 <SM_APP_bMt_23_execute_table_reading+0x9c>)
	table_buffer[k++] = (uint8_t)(meter.voltage_upper_limit >> 24);

#if NBR_PHASES >= 1
	table_buffer[k++] = (uint8_t)(meter.phase_a.failure);
	table_buffer[k++] = (uint8_t)(meter.phase_a.voltage_state);
	phase_voltage = (uint32_t)METROLOGY_APP_dGet_instantaneous_value(V_A_ID);
 10206dc:	4f26      	ldr	r7, [pc, #152]	; (1020778 <SM_APP_bMt_23_execute_table_reading+0xa0>)
	table_buffer[k++] = (uint8_t)(meter.voltage_lower_limit >> 0);
 10206de:	6c6b      	ldr	r3, [r5, #68]	; 0x44
	phase_voltage = (uint32_t)METROLOGY_APP_dGet_instantaneous_value(V_A_ID);
 10206e0:	4e26      	ldr	r6, [pc, #152]	; (102077c <SM_APP_bMt_23_execute_table_reading+0xa4>)
bool SM_APP_bMt_23_execute_table_reading(uint8_t *table_buffer) {
 10206e2:	4604      	mov	r4, r0
	phase_voltage = (uint32_t)METROLOGY_APP_dGet_instantaneous_value(V_A_ID);
 10206e4:	200c      	movs	r0, #12
	table_buffer[k++] = (uint8_t)(meter.voltage_lower_limit >> 0);
 10206e6:	7023      	strb	r3, [r4, #0]
	table_buffer[k++] = (uint8_t)(meter.voltage_lower_limit >> 8);
 10206e8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 10206ea:	0a1b      	lsrs	r3, r3, #8
 10206ec:	7063      	strb	r3, [r4, #1]
	table_buffer[k++] = (uint8_t)(meter.voltage_lower_limit >> 16);
 10206ee:	f8b5 3046 	ldrh.w	r3, [r5, #70]	; 0x46
 10206f2:	70a3      	strb	r3, [r4, #2]
	table_buffer[k++] = (uint8_t)(meter.voltage_lower_limit >> 24);
 10206f4:	f895 3047 	ldrb.w	r3, [r5, #71]	; 0x47
 10206f8:	70e3      	strb	r3, [r4, #3]
	table_buffer[k++] = (uint8_t)(meter.voltage_upper_limit >> 0);
 10206fa:	6cab      	ldr	r3, [r5, #72]	; 0x48
 10206fc:	7123      	strb	r3, [r4, #4]
	table_buffer[k++] = (uint8_t)(meter.voltage_upper_limit >> 8);
 10206fe:	6cab      	ldr	r3, [r5, #72]	; 0x48
 1020700:	0a1b      	lsrs	r3, r3, #8
 1020702:	7163      	strb	r3, [r4, #5]
	table_buffer[k++] = (uint8_t)(meter.voltage_upper_limit >> 16);
 1020704:	f8b5 304a 	ldrh.w	r3, [r5, #74]	; 0x4a
 1020708:	71a3      	strb	r3, [r4, #6]
	table_buffer[k++] = (uint8_t)(meter.voltage_upper_limit >> 24);
 102070a:	f895 304b 	ldrb.w	r3, [r5, #75]	; 0x4b
 102070e:	71e3      	strb	r3, [r4, #7]
	table_buffer[k++] = (uint8_t)(meter.phase_a.failure);
 1020710:	f895 3051 	ldrb.w	r3, [r5, #81]	; 0x51
 1020714:	7223      	strb	r3, [r4, #8]
	table_buffer[k++] = (uint8_t)(meter.phase_a.voltage_state);
 1020716:	f895 3053 	ldrb.w	r3, [r5, #83]	; 0x53
 102071a:	7263      	strb	r3, [r4, #9]
	phase_voltage = (uint32_t)METROLOGY_APP_dGet_instantaneous_value(V_A_ID);
 102071c:	47b8      	blx	r7
 102071e:	47b0      	blx	r6
	table_buffer[k++] = (uint8_t)(phase_voltage >> 0);
	table_buffer[k++] = (uint8_t)(phase_voltage >> 8);
	table_buffer[k++] = (uint8_t)(phase_voltage >> 16);
 1020720:	0c02      	lsrs	r2, r0, #16
	table_buffer[k++] = (uint8_t)(phase_voltage >> 8);
 1020722:	0a01      	lsrs	r1, r0, #8
	table_buffer[k++] = (uint8_t)(phase_voltage >> 24);
 1020724:	0e03      	lsrs	r3, r0, #24
	table_buffer[k++] = (uint8_t)(phase_voltage >> 16);
 1020726:	7322      	strb	r2, [r4, #12]
	table_buffer[k++] = (uint8_t)(phase_voltage >> 0);
 1020728:	72a0      	strb	r0, [r4, #10]
	table_buffer[k++] = (uint8_t)(phase_voltage >> 8);
 102072a:	72e1      	strb	r1, [r4, #11]
	table_buffer[k++] = (uint8_t)(phase_voltage >> 24);
 102072c:	7363      	strb	r3, [r4, #13]
#endif

#if NBR_PHASES >= 2
	table_buffer[k++] = (uint8_t)(meter.phase_b.failure);
 102072e:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 1020732:	73a3      	strb	r3, [r4, #14]
	table_buffer[k++] = (uint8_t)(meter.phase_b.voltage_state);
 1020734:	f895 3057 	ldrb.w	r3, [r5, #87]	; 0x57
 1020738:	73e3      	strb	r3, [r4, #15]
	phase_voltage = (uint32_t)METROLOGY_APP_dGet_instantaneous_value(V_B_ID);
 102073a:	200d      	movs	r0, #13
 102073c:	47b8      	blx	r7
 102073e:	47b0      	blx	r6
	table_buffer[k++] = (uint8_t)(phase_voltage >> 0);
	table_buffer[k++] = (uint8_t)(phase_voltage >> 8);
	table_buffer[k++] = (uint8_t)(phase_voltage >> 16);
 1020740:	0c02      	lsrs	r2, r0, #16
	table_buffer[k++] = (uint8_t)(phase_voltage >> 8);
 1020742:	0a01      	lsrs	r1, r0, #8
	table_buffer[k++] = (uint8_t)(phase_voltage >> 24);
 1020744:	0e03      	lsrs	r3, r0, #24
	table_buffer[k++] = (uint8_t)(phase_voltage >> 16);
 1020746:	74a2      	strb	r2, [r4, #18]
	table_buffer[k++] = (uint8_t)(phase_voltage >> 0);
 1020748:	7420      	strb	r0, [r4, #16]
	table_buffer[k++] = (uint8_t)(phase_voltage >> 8);
 102074a:	7461      	strb	r1, [r4, #17]
	table_buffer[k++] = (uint8_t)(phase_voltage >> 24);
 102074c:	74e3      	strb	r3, [r4, #19]
#endif

#if NBR_PHASES >= 3
	table_buffer[k++] = (uint8_t)(meter.phase_c.failure);
 102074e:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 1020752:	7523      	strb	r3, [r4, #20]
	table_buffer[k++] = (uint8_t)(meter.phase_c.voltage_state);
 1020754:	f895 305b 	ldrb.w	r3, [r5, #91]	; 0x5b
 1020758:	7563      	strb	r3, [r4, #21]
	phase_voltage = (uint32_t)METROLOGY_APP_dGet_instantaneous_value(V_C_ID);
 102075a:	200e      	movs	r0, #14
 102075c:	47b8      	blx	r7
 102075e:	47b0      	blx	r6
	table_buffer[k++] = (uint8_t)(phase_voltage >> 0);
	table_buffer[k++] = (uint8_t)(phase_voltage >> 8);
 1020760:	0a01      	lsrs	r1, r0, #8
	table_buffer[k++] = (uint8_t)(phase_voltage >> 16);
 1020762:	0c02      	lsrs	r2, r0, #16
	table_buffer[k++] = (uint8_t)(phase_voltage >> 24);
 1020764:	0e03      	lsrs	r3, r0, #24
	table_buffer[k++] = (uint8_t)(phase_voltage >> 0);
 1020766:	75a0      	strb	r0, [r4, #22]
	table_buffer[k++] = (uint8_t)(phase_voltage >> 8);
 1020768:	75e1      	strb	r1, [r4, #23]
	table_buffer[k++] = (uint8_t)(phase_voltage >> 16);
 102076a:	7622      	strb	r2, [r4, #24]
	table_buffer[k++] = (uint8_t)(phase_voltage >> 24);
 102076c:	7663      	strb	r3, [r4, #25]
#endif

	return true;
}
 102076e:	2001      	movs	r0, #1
 1020770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 1020772:	bf00      	nop
 1020774:	20016c2c 	.word	0x20016c2c
 1020778:	0101f065 	.word	0x0101f065
 102077c:	010305b5 	.word	0x010305b5

01020780 <SM_APP_usMt_23_get_size>:
 ******************************************************************************
 */
uint16_t SM_APP_usMt_23_get_size(void) {

	return (uint16_t)MT_23_SIZE;
}
 1020780:	201a      	movs	r0, #26
 1020782:	4770      	bx	lr

01020784 <SM_APP_vMt_4_restore_default_values>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
void SM_APP_vMt_4_restore_default_values(void) {
 1020784:	b530      	push	{r4, r5, lr}
 1020786:	b08d      	sub	sp, #52	; 0x34
 1020788:	a90c      	add	r1, sp, #48	; 0x30
 102078a:	23ff      	movs	r3, #255	; 0xff
	EEPROM_writer( table_state_addr, &state, 1 );
 102078c:	4c0d      	ldr	r4, [pc, #52]	; (10207c4 <SM_APP_vMt_4_restore_default_values+0x40>)
 102078e:	f801 3d29 	strb.w	r3, [r1, #-41]!
	
	SM_APP_vChange_table_state(MT_4_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
	
	uint8_t buffer[MT_4_MAX_SIZE];
	memset(&buffer, 0, sizeof(buffer));
 1020792:	2528      	movs	r5, #40	; 0x28
	EEPROM_writer( table_state_addr, &state, 1 );
 1020794:	2201      	movs	r2, #1
 1020796:	f249 2019 	movw	r0, #37401	; 0x9219
 102079a:	47a0      	blx	r4
	memset(&buffer, 0, sizeof(buffer));
 102079c:	462a      	mov	r2, r5
 102079e:	4b0a      	ldr	r3, [pc, #40]	; (10207c8 <SM_APP_vMt_4_restore_default_values+0x44>)
 10207a0:	a802      	add	r0, sp, #8
 10207a2:	2100      	movs	r1, #0
 10207a4:	4798      	blx	r3
	EEPROM_writer(MT_4_START_ADDR, (uint8_t*)&buffer, MT_4_MAX_SIZE);
 10207a6:	462a      	mov	r2, r5
 10207a8:	a902      	add	r1, sp, #8
 10207aa:	f249 201a 	movw	r0, #37402	; 0x921a
 10207ae:	47a0      	blx	r4
 10207b0:	a90c      	add	r1, sp, #48	; 0x30
 10207b2:	2345      	movs	r3, #69	; 0x45
 10207b4:	f801 3d2a 	strb.w	r3, [r1, #-42]!
	EEPROM_writer( table_state_addr, &state, 1 );
 10207b8:	2201      	movs	r2, #1
 10207ba:	f249 2019 	movw	r0, #37401	; 0x9219
 10207be:	47a0      	blx	r4
	
	SM_APP_vChange_table_state(MT_4_PROG_STATE_ADDR, C1219_TABLE_FULL);
}
 10207c0:	b00d      	add	sp, #52	; 0x34
 10207c2:	bd30      	pop	{r4, r5, pc}
 10207c4:	01017509 	.word	0x01017509
 10207c8:	01030b71 	.word	0x01030b71

010207cc <SM_APP_vLoad_mt_4>:
void SM_APP_vLoad_mt_4(void) {
 10207cc:	b510      	push	{r4, lr}
 10207ce:	b082      	sub	sp, #8
	EEPROM_reader( table_state_addr, &state, 1 );
 10207d0:	f10d 0106 	add.w	r1, sp, #6
 10207d4:	2201      	movs	r2, #1
 10207d6:	f249 2019 	movw	r0, #37401	; 0x9219
 10207da:	4c0e      	ldr	r4, [pc, #56]	; (1020814 <SM_APP_vLoad_mt_4+0x48>)
 10207dc:	47a0      	blx	r4
	return state;
 10207de:	f89d 3006 	ldrb.w	r3, [sp, #6]
	if ( SM_APP_ucGet_table_state(MT_4_PROG_STATE_ADDR) != C1219_TABLE_FULL ) {
 10207e2:	2b45      	cmp	r3, #69	; 0x45
 10207e4:	d001      	beq.n	10207ea <SM_APP_vLoad_mt_4+0x1e>
		SM_APP_vMt_4_restore_default_values();
 10207e6:	4b0c      	ldr	r3, [pc, #48]	; (1020818 <SM_APP_vLoad_mt_4+0x4c>)
 10207e8:	4798      	blx	r3
	EEPROM_reader(MT_4_MCU_RESET_TOTAL_COUNTER_ADDR, (uint8_t*)&mcu_reset_total_counter, sizeof(mcu_reset_total_counter));
 10207ea:	f10d 0106 	add.w	r1, sp, #6
 10207ee:	2202      	movs	r2, #2
 10207f0:	f249 201e 	movw	r0, #37406	; 0x921e
 10207f4:	47a0      	blx	r4
	mcu_reset_total_counter++;
 10207f6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	EEPROM_writer(MT_4_MCU_RESET_TOTAL_COUNTER_ADDR, (uint8_t*)&mcu_reset_total_counter, sizeof(mcu_reset_total_counter));
 10207fa:	4c08      	ldr	r4, [pc, #32]	; (102081c <SM_APP_vLoad_mt_4+0x50>)
	mcu_reset_total_counter++;
 10207fc:	3301      	adds	r3, #1
	EEPROM_writer(MT_4_MCU_RESET_TOTAL_COUNTER_ADDR, (uint8_t*)&mcu_reset_total_counter, sizeof(mcu_reset_total_counter));
 10207fe:	f10d 0106 	add.w	r1, sp, #6
 1020802:	2202      	movs	r2, #2
 1020804:	f249 201e 	movw	r0, #37406	; 0x921e
	mcu_reset_total_counter++;
 1020808:	f8ad 3006 	strh.w	r3, [sp, #6]
	EEPROM_writer(MT_4_MCU_RESET_TOTAL_COUNTER_ADDR, (uint8_t*)&mcu_reset_total_counter, sizeof(mcu_reset_total_counter));
 102080c:	47a0      	blx	r4
}
 102080e:	b002      	add	sp, #8
 1020810:	bd10      	pop	{r4, pc}
 1020812:	bf00      	nop
 1020814:	01017511 	.word	0x01017511
 1020818:	01020785 	.word	0x01020785
 102081c:	01017509 	.word	0x01017509

01020820 <SM_APP_bMt_4_execute_table_reading>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bMt_4_execute_table_reading(uint8_t *table_buffer) {
 1020820:	b538      	push	{r3, r4, r5, lr}
	
	uint8_t k = 0;
	
	table_buffer[k++] = (uint8_t)(meter.time_running >> 0);
 1020822:	4b2d      	ldr	r3, [pc, #180]	; (10208d8 <SM_APP_bMt_4_execute_table_reading+0xb8>)
	table_buffer[k++] = (uint8_t)(meter.time_running >> 8);
	table_buffer[k++] = (uint8_t)(meter.time_running >> 16);
	table_buffer[k++] = (uint8_t)(meter.time_running >> 24);
	
	EEPROM_reader(MT_4_MCU_RESET_TOTAL_COUNTER_ADDR, (uint8_t*)&table_buffer[k], 2);
 1020824:	4d2d      	ldr	r5, [pc, #180]	; (10208dc <SM_APP_bMt_4_execute_table_reading+0xbc>)
	table_buffer[k++] = (uint8_t)(meter.time_running >> 0);
 1020826:	685a      	ldr	r2, [r3, #4]
 1020828:	7002      	strb	r2, [r0, #0]
	table_buffer[k++] = (uint8_t)(meter.time_running >> 8);
 102082a:	685a      	ldr	r2, [r3, #4]
 102082c:	0a12      	lsrs	r2, r2, #8
 102082e:	7042      	strb	r2, [r0, #1]
	table_buffer[k++] = (uint8_t)(meter.time_running >> 16);
 1020830:	88da      	ldrh	r2, [r3, #6]
 1020832:	7082      	strb	r2, [r0, #2]
	table_buffer[k++] = (uint8_t)(meter.time_running >> 24);
 1020834:	79db      	ldrb	r3, [r3, #7]
 1020836:	70c3      	strb	r3, [r0, #3]
bool SM_APP_bMt_4_execute_table_reading(uint8_t *table_buffer) {
 1020838:	4604      	mov	r4, r0
	EEPROM_reader(MT_4_MCU_RESET_TOTAL_COUNTER_ADDR, (uint8_t*)&table_buffer[k], 2);
 102083a:	1d01      	adds	r1, r0, #4
 102083c:	2202      	movs	r2, #2
 102083e:	f249 201e 	movw	r0, #37406	; 0x921e
 1020842:	47a8      	blx	r5
	k += 2;
	EEPROM_reader(MT_4_MCU_RESET_POWER_FAILURE_ADDR, (uint8_t*)&table_buffer[k], 2);
 1020844:	1da1      	adds	r1, r4, #6
 1020846:	2202      	movs	r2, #2
 1020848:	f249 2020 	movw	r0, #37408	; 0x9220
 102084c:	47a8      	blx	r5
	k += 2;
	EEPROM_reader(MT_4_MCU_RESET_FIRMWARE_UPDATE_ADDR, (uint8_t*)&table_buffer[k], 2);
 102084e:	f104 0108 	add.w	r1, r4, #8
 1020852:	2202      	movs	r2, #2
 1020854:	f249 2022 	movw	r0, #37410	; 0x9222
 1020858:	47a8      	blx	r5
	k += 2;
	EEPROM_reader(MT_4_MCU_RESET_WATCH_DOG_ADDR, (uint8_t*)&table_buffer[k], 2);
 102085a:	f104 010a 	add.w	r1, r4, #10
 102085e:	2202      	movs	r2, #2
 1020860:	f249 2024 	movw	r0, #37412	; 0x9224
 1020864:	47a8      	blx	r5
	k += 2;
	EEPROM_reader(MT_4_MCU_RESET_COLD_START_ADDR, (uint8_t*)&table_buffer[k], 2);
 1020866:	f104 010c 	add.w	r1, r4, #12
 102086a:	2202      	movs	r2, #2
 102086c:	f249 2026 	movw	r0, #37414	; 0x9226
 1020870:	47a8      	blx	r5
	k += 2;
	EEPROM_reader(MT_4_MCU_RESET_WARM_START_ADDR, (uint8_t*)&table_buffer[k], 2);
 1020872:	f104 010e 	add.w	r1, r4, #14
 1020876:	2202      	movs	r2, #2
 1020878:	f249 2028 	movw	r0, #37416	; 0x9228
 102087c:	47a8      	blx	r5
	k += 2;
	EEPROM_reader(MT_4_MCU_RESET_KT_CONSTANT_CHANGE_ADDR, (uint8_t*)&table_buffer[k], 2);
 102087e:	f104 0110 	add.w	r1, r4, #16
 1020882:	2202      	movs	r2, #2
 1020884:	f249 202c 	movw	r0, #37420	; 0x922c
 1020888:	47a8      	blx	r5
	k += 2;
	EEPROM_reader(MT_4_MCU_RESET_SYSTEM_FAULT_ADDR, (uint8_t*)&table_buffer[k], 2);
 102088a:	f104 0112 	add.w	r1, r4, #18
 102088e:	2202      	movs	r2, #2
 1020890:	f249 202a 	movw	r0, #37418	; 0x922a
 1020894:	47a8      	blx	r5
	k += 2;
	EEPROM_reader(MT_4_MCU_RESET_VLISTINSERT_COUNTER_ADDR, (uint8_t*)&table_buffer[k], 2);
 1020896:	f104 0114 	add.w	r1, r4, #20
 102089a:	2202      	movs	r2, #2
 102089c:	f249 202e 	movw	r0, #37422	; 0x922e
 10208a0:	47a8      	blx	r5
	k += 2;
	EEPROM_reader(MT_4_MCU_RESET_DUMMY_HANDLER_COUNTER_ADDR, (uint8_t*)&table_buffer[k], 2);
 10208a2:	f104 0116 	add.w	r1, r4, #22
 10208a6:	2202      	movs	r2, #2
 10208a8:	f249 2030 	movw	r0, #37424	; 0x9230
 10208ac:	47a8      	blx	r5
	k += 2;
	EEPROM_reader(MT_4_MCU_RESET_ASSERT_TRIGGERED_COUNTER_ADDR, (uint8_t*)&table_buffer[k], 2);
 10208ae:	f104 0118 	add.w	r1, r4, #24
 10208b2:	2202      	movs	r2, #2
 10208b4:	f249 2032 	movw	r0, #37426	; 0x9232
 10208b8:	47a8      	blx	r5
	k += 2;
	EEPROM_reader(MT_4_MCU_RESET_STACK_OVERFLOW_COUNTER_ADDR, (uint8_t*)&table_buffer[k], 2);
 10208ba:	f104 011a 	add.w	r1, r4, #26
 10208be:	2202      	movs	r2, #2
 10208c0:	f249 2034 	movw	r0, #37428	; 0x9234
 10208c4:	47a8      	blx	r5
	k += 2;
	EEPROM_reader(MT_4_RESERVED_ADDR, (uint8_t*)&table_buffer[k], MT_4_RESERVED_SIZE);
 10208c6:	f104 011c 	add.w	r1, r4, #28
 10208ca:	220c      	movs	r2, #12
 10208cc:	f249 2036 	movw	r0, #37430	; 0x9236
 10208d0:	47a8      	blx	r5
	k += MT_4_RESERVED_SIZE;
	
	return true;
}
 10208d2:	2001      	movs	r0, #1
 10208d4:	bd38      	pop	{r3, r4, r5, pc}
 10208d6:	bf00      	nop
 10208d8:	20016c2c 	.word	0x20016c2c
 10208dc:	01017511 	.word	0x01017511

010208e0 <SM_APP_bMt_4_execute_table_writing>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bMt_4_execute_table_writing(uint8_t *table_buffer) {
 10208e0:	b570      	push	{r4, r5, r6, lr}
	
	uint8_t k = 0;
	
	meter.time_running  = (uint32_t)(table_buffer[k++] << 0);
 10208e2:	4e2f      	ldr	r6, [pc, #188]	; (10209a0 <SM_APP_bMt_4_execute_table_writing+0xc0>)
 10208e4:	7803      	ldrb	r3, [r0, #0]
 10208e6:	6073      	str	r3, [r6, #4]
	meter.time_running |= (uint32_t)(table_buffer[k++] << 8);
 10208e8:	7842      	ldrb	r2, [r0, #1]
	meter.time_running |= (uint32_t)(table_buffer[k++] << 16);
	meter.time_running |= (uint32_t)(table_buffer[k++] << 24);
	
	EEPROM_writer(MT_4_MCU_RESET_TOTAL_COUNTER_ADDR, (uint8_t*)&table_buffer[k], 2);
 10208ea:	4d2e      	ldr	r5, [pc, #184]	; (10209a4 <SM_APP_bMt_4_execute_table_writing+0xc4>)
	meter.time_running |= (uint32_t)(table_buffer[k++] << 8);
 10208ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 10208f0:	6073      	str	r3, [r6, #4]
	meter.time_running |= (uint32_t)(table_buffer[k++] << 16);
 10208f2:	7882      	ldrb	r2, [r0, #2]
 10208f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 10208f8:	6073      	str	r3, [r6, #4]
	meter.time_running |= (uint32_t)(table_buffer[k++] << 24);
 10208fa:	78c2      	ldrb	r2, [r0, #3]
bool SM_APP_bMt_4_execute_table_writing(uint8_t *table_buffer) {
 10208fc:	4604      	mov	r4, r0
	meter.time_running |= (uint32_t)(table_buffer[k++] << 24);
 10208fe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
	EEPROM_writer(MT_4_MCU_RESET_TOTAL_COUNTER_ADDR, (uint8_t*)&table_buffer[k], 2);
 1020902:	1d01      	adds	r1, r0, #4
 1020904:	2202      	movs	r2, #2
 1020906:	f249 201e 	movw	r0, #37406	; 0x921e
	meter.time_running |= (uint32_t)(table_buffer[k++] << 24);
 102090a:	6073      	str	r3, [r6, #4]
	EEPROM_writer(MT_4_MCU_RESET_TOTAL_COUNTER_ADDR, (uint8_t*)&table_buffer[k], 2);
 102090c:	47a8      	blx	r5
	k += 2;
	EEPROM_writer(MT_4_MCU_RESET_POWER_FAILURE_ADDR, (uint8_t*)&table_buffer[k], 2);
 102090e:	1da1      	adds	r1, r4, #6
 1020910:	2202      	movs	r2, #2
 1020912:	f249 2020 	movw	r0, #37408	; 0x9220
 1020916:	47a8      	blx	r5
	k += 2;
	EEPROM_writer(MT_4_MCU_RESET_FIRMWARE_UPDATE_ADDR, (uint8_t*)&table_buffer[k], 2);
 1020918:	f104 0108 	add.w	r1, r4, #8
 102091c:	2202      	movs	r2, #2
 102091e:	f249 2022 	movw	r0, #37410	; 0x9222
 1020922:	47a8      	blx	r5
	k += 2;
	EEPROM_writer(MT_4_MCU_RESET_WATCH_DOG_ADDR, (uint8_t*)&table_buffer[k], 2);
 1020924:	f104 010a 	add.w	r1, r4, #10
 1020928:	2202      	movs	r2, #2
 102092a:	f249 2024 	movw	r0, #37412	; 0x9224
 102092e:	47a8      	blx	r5
	k += 2;
	EEPROM_writer(MT_4_MCU_RESET_COLD_START_ADDR, (uint8_t*)&table_buffer[k], 2);
 1020930:	f104 010c 	add.w	r1, r4, #12
 1020934:	2202      	movs	r2, #2
 1020936:	f249 2026 	movw	r0, #37414	; 0x9226
 102093a:	47a8      	blx	r5
	k += 2;
	EEPROM_writer(MT_4_MCU_RESET_WARM_START_ADDR, (uint8_t*)&table_buffer[k], 2);
 102093c:	f104 010e 	add.w	r1, r4, #14
 1020940:	2202      	movs	r2, #2
 1020942:	f249 2028 	movw	r0, #37416	; 0x9228
 1020946:	47a8      	blx	r5
	k += 2;
	EEPROM_writer(MT_4_MCU_RESET_KT_CONSTANT_CHANGE_ADDR, (uint8_t*)&table_buffer[k], 2);
 1020948:	f104 0110 	add.w	r1, r4, #16
 102094c:	2202      	movs	r2, #2
 102094e:	f249 202c 	movw	r0, #37420	; 0x922c
 1020952:	47a8      	blx	r5
	k += 2;
	EEPROM_writer(MT_4_MCU_RESET_SYSTEM_FAULT_ADDR, (uint8_t*)&table_buffer[k], 2);
 1020954:	f104 0112 	add.w	r1, r4, #18
 1020958:	2202      	movs	r2, #2
 102095a:	f249 202a 	movw	r0, #37418	; 0x922a
 102095e:	47a8      	blx	r5
	k += 2;
	EEPROM_writer(MT_4_MCU_RESET_VLISTINSERT_COUNTER_ADDR, (uint8_t*)&table_buffer[k], 2);
 1020960:	f104 0114 	add.w	r1, r4, #20
 1020964:	2202      	movs	r2, #2
 1020966:	f249 202e 	movw	r0, #37422	; 0x922e
 102096a:	47a8      	blx	r5
	k += 2;
	EEPROM_writer(MT_4_MCU_RESET_DUMMY_HANDLER_COUNTER_ADDR, (uint8_t*)&table_buffer[k], 2);
 102096c:	f104 0116 	add.w	r1, r4, #22
 1020970:	2202      	movs	r2, #2
 1020972:	f249 2030 	movw	r0, #37424	; 0x9230
 1020976:	47a8      	blx	r5
	k += 2;
	EEPROM_writer(MT_4_MCU_RESET_ASSERT_TRIGGERED_COUNTER_ADDR, (uint8_t*)&table_buffer[k], 2);
 1020978:	f104 0118 	add.w	r1, r4, #24
 102097c:	2202      	movs	r2, #2
 102097e:	f249 2032 	movw	r0, #37426	; 0x9232
 1020982:	47a8      	blx	r5
	k += 2;
	EEPROM_writer(MT_4_MCU_RESET_STACK_OVERFLOW_COUNTER_ADDR, (uint8_t*)&table_buffer[k], 2);
 1020984:	f104 011a 	add.w	r1, r4, #26
 1020988:	2202      	movs	r2, #2
 102098a:	f249 2034 	movw	r0, #37428	; 0x9234
 102098e:	47a8      	blx	r5
	k += 2;
	EEPROM_writer(MT_4_RESERVED_ADDR, (uint8_t*)&table_buffer[k], MT_4_RESERVED_SIZE);
 1020990:	f104 011c 	add.w	r1, r4, #28
 1020994:	220c      	movs	r2, #12
 1020996:	f249 2036 	movw	r0, #37430	; 0x9236
 102099a:	47a8      	blx	r5
	k += MT_4_RESERVED_SIZE;
	
	return true;
}
 102099c:	2001      	movs	r0, #1
 102099e:	bd70      	pop	{r4, r5, r6, pc}
 10209a0:	20016c2c 	.word	0x20016c2c
 10209a4:	01017509 	.word	0x01017509

010209a8 <SM_APP_usMt_4_get_size>:
 ******************************************************************************
 */
uint16_t SM_APP_usMt_4_get_size(void) {

	return (uint16_t)MT_4_SIZE;
}
 10209a8:	2028      	movs	r0, #40	; 0x28
 10209aa:	4770      	bx	lr

010209ac <SM_APP_vMt_5_restore_default_values>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
void SM_APP_vMt_5_restore_default_values(void) {
 10209ac:	b510      	push	{r4, lr}
 10209ae:	b086      	sub	sp, #24
 10209b0:	a906      	add	r1, sp, #24
 10209b2:	23ff      	movs	r3, #255	; 0xff
	EEPROM_writer( table_state_addr, &state, 1 );
 10209b4:	4c0d      	ldr	r4, [pc, #52]	; (10209ec <SM_APP_vMt_5_restore_default_values+0x40>)
 10209b6:	f801 3d11 	strb.w	r3, [r1, #-17]!
 10209ba:	2201      	movs	r2, #1
 10209bc:	f249 2056 	movw	r0, #37462	; 0x9256
 10209c0:	47a0      	blx	r4
	
	SM_APP_vChange_table_state(Mt_5_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
	
	uint8_t buffer[MT_5_SIZE];
	memset(&buffer, 0, sizeof(buffer));
 10209c2:	2300      	movs	r3, #0
	EEPROM_writer(MT_5_START_ADDR, (uint8_t*)&buffer[0], MT_5_SIZE);
 10209c4:	a902      	add	r1, sp, #8
 10209c6:	2210      	movs	r2, #16
 10209c8:	f249 2057 	movw	r0, #37463	; 0x9257
	memset(&buffer, 0, sizeof(buffer));
 10209cc:	9303      	str	r3, [sp, #12]
 10209ce:	9302      	str	r3, [sp, #8]
 10209d0:	9304      	str	r3, [sp, #16]
 10209d2:	9305      	str	r3, [sp, #20]
	EEPROM_writer(MT_5_START_ADDR, (uint8_t*)&buffer[0], MT_5_SIZE);
 10209d4:	47a0      	blx	r4
 10209d6:	a906      	add	r1, sp, #24
 10209d8:	2345      	movs	r3, #69	; 0x45
 10209da:	f801 3d12 	strb.w	r3, [r1, #-18]!
	EEPROM_writer( table_state_addr, &state, 1 );
 10209de:	2201      	movs	r2, #1
 10209e0:	f249 2056 	movw	r0, #37462	; 0x9256
 10209e4:	47a0      	blx	r4
	
	SM_APP_vChange_table_state(Mt_5_PROG_STATE_ADDR, C1219_TABLE_FULL);
}
 10209e6:	b006      	add	sp, #24
 10209e8:	bd10      	pop	{r4, pc}
 10209ea:	bf00      	nop
 10209ec:	01017509 	.word	0x01017509

010209f0 <SM_APP_vLoad_mt_5>:
void SM_APP_vLoad_mt_5(void) {
 10209f0:	b500      	push	{lr}
 10209f2:	b083      	sub	sp, #12
	EEPROM_reader( table_state_addr, &state, 1 );
 10209f4:	4b07      	ldr	r3, [pc, #28]	; (1020a14 <SM_APP_vLoad_mt_5+0x24>)
 10209f6:	2201      	movs	r2, #1
 10209f8:	f10d 0107 	add.w	r1, sp, #7
 10209fc:	f249 2056 	movw	r0, #37462	; 0x9256
 1020a00:	4798      	blx	r3
	return state;
 1020a02:	f89d 3007 	ldrb.w	r3, [sp, #7]
	if ( SM_APP_ucGet_table_state(Mt_5_PROG_STATE_ADDR) != C1219_TABLE_FULL ) {
 1020a06:	2b45      	cmp	r3, #69	; 0x45
 1020a08:	d001      	beq.n	1020a0e <SM_APP_vLoad_mt_5+0x1e>
		SM_APP_vMt_5_restore_default_values();
 1020a0a:	4b03      	ldr	r3, [pc, #12]	; (1020a18 <SM_APP_vLoad_mt_5+0x28>)
 1020a0c:	4798      	blx	r3
}
 1020a0e:	b003      	add	sp, #12
 1020a10:	f85d fb04 	ldr.w	pc, [sp], #4
 1020a14:	01017511 	.word	0x01017511
 1020a18:	010209ad 	.word	0x010209ad

01020a1c <SM_APP_bMt_5_execute_table_reading>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bMt_5_execute_table_reading(uint8_t *table_buffer) {
 1020a1c:	b508      	push	{r3, lr}
	
	EEPROM_reader(MT_5_START_ADDR, (uint8_t*)&table_buffer[0], MT_5_SIZE);
 1020a1e:	4601      	mov	r1, r0
 1020a20:	2210      	movs	r2, #16
 1020a22:	4b03      	ldr	r3, [pc, #12]	; (1020a30 <SM_APP_bMt_5_execute_table_reading+0x14>)
 1020a24:	f249 2057 	movw	r0, #37463	; 0x9257
 1020a28:	4798      	blx	r3
	
	return true;
}
 1020a2a:	2001      	movs	r0, #1
 1020a2c:	bd08      	pop	{r3, pc}
 1020a2e:	bf00      	nop
 1020a30:	01017511 	.word	0x01017511

01020a34 <SM_APP_bMt_5_execute_table_writing>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bMt_5_execute_table_writing(uint8_t *table_buffer) {
 1020a34:	b508      	push	{r3, lr}
	
	EEPROM_writer(MT_5_START_ADDR, (uint8_t*)&table_buffer[0], MT_5_SIZE);
 1020a36:	4601      	mov	r1, r0
 1020a38:	2210      	movs	r2, #16
 1020a3a:	4b03      	ldr	r3, [pc, #12]	; (1020a48 <SM_APP_bMt_5_execute_table_writing+0x14>)
 1020a3c:	f249 2057 	movw	r0, #37463	; 0x9257
 1020a40:	4798      	blx	r3
	
	return true;
}
 1020a42:	2001      	movs	r0, #1
 1020a44:	bd08      	pop	{r3, pc}
 1020a46:	bf00      	nop
 1020a48:	01017509 	.word	0x01017509

01020a4c <SM_APP_usMt_5_get_size>:
 ******************************************************************************
 */
uint16_t SM_APP_usMt_5_get_size(void) {

	return (uint16_t)MT_5_SIZE;
}
 1020a4c:	2010      	movs	r0, #16
 1020a4e:	4770      	bx	lr

01020a50 <SM_APP_bMt_22_execute_table_reading>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bMt_22_execute_table_reading(uint8_t *table_buffer) {
 1020a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 1020a52:	4604      	mov	r4, r0
 1020a54:	b083      	sub	sp, #12
	/* Phase A Instantaneous Values*/

#if ( NBR_PHASES >= 1 )
	/* Voltage */
	var_temp = 0;
	var_temp = (uint64_t)METROLOGY_APP_dGet_instantaneous_value(V_A_ID);
 1020a56:	4f39      	ldr	r7, [pc, #228]	; (1020b3c <SM_APP_bMt_22_execute_table_reading+0xec>)
 1020a58:	4e39      	ldr	r6, [pc, #228]	; (1020b40 <SM_APP_bMt_22_execute_table_reading+0xf0>)
	UTIL_hex_to_bcd( (uint64_t)(var_temp), &bcd_value[0]);
 1020a5a:	4d3a      	ldr	r5, [pc, #232]	; (1020b44 <SM_APP_bMt_22_execute_table_reading+0xf4>)
	var_temp = (uint64_t)METROLOGY_APP_dGet_instantaneous_value(V_A_ID);
 1020a5c:	200c      	movs	r0, #12
 1020a5e:	47b8      	blx	r7
 1020a60:	47b0      	blx	r6
	UTIL_hex_to_bcd( (uint64_t)(var_temp), &bcd_value[0]);
 1020a62:	466a      	mov	r2, sp
 1020a64:	47a8      	blx	r5
	memcpy(&table_buffer[k], &bcd_value[4], 4);
 1020a66:	9b01      	ldr	r3, [sp, #4]
 1020a68:	6023      	str	r3, [r4, #0]
	k += 4;
	
	/* Current */
	var_temp = 0;
	var_temp = (uint64_t)METROLOGY_APP_dGet_instantaneous_value(I_A_ID);
 1020a6a:	2012      	movs	r0, #18
 1020a6c:	47b8      	blx	r7
 1020a6e:	47b0      	blx	r6
	UTIL_hex_to_bcd( (uint64_t)(var_temp), &bcd_value[0]);
 1020a70:	466a      	mov	r2, sp
 1020a72:	47a8      	blx	r5
	memcpy(&table_buffer[k], &bcd_value[4], 4);
 1020a74:	9b01      	ldr	r3, [sp, #4]
 1020a76:	6063      	str	r3, [r4, #4]
	k += 4;
	
	/* Active Power */
	var_temp = 0;
	var_temp = (uint64_t)( fabs(METROLOGY_APP_dGet_instantaneous_value(P_A_ID)) );
 1020a78:	2001      	movs	r0, #1
 1020a7a:	47b8      	blx	r7
 1020a7c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 1020a80:	4619      	mov	r1, r3
 1020a82:	47b0      	blx	r6
	UTIL_hex_to_bcd( (uint64_t)(var_temp), &bcd_value[0]);
 1020a84:	466a      	mov	r2, sp
 1020a86:	47a8      	blx	r5
	memcpy(&table_buffer[k], &bcd_value[4], 4);
 1020a88:	9b01      	ldr	r3, [sp, #4]
 1020a8a:	60a3      	str	r3, [r4, #8]
	k += 5;
	
	/* Reactive Power */
	var_temp = 0;
	var_temp = (uint64_t)( fabs(METROLOGY_APP_dGet_instantaneous_value(Q_A_ID)) );
 1020a8c:	2005      	movs	r0, #5
 1020a8e:	47b8      	blx	r7
 1020a90:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 1020a94:	4619      	mov	r1, r3
 1020a96:	47b0      	blx	r6
	UTIL_hex_to_bcd( (uint64_t)(var_temp), &bcd_value[0]);
 1020a98:	466a      	mov	r2, sp
 1020a9a:	47a8      	blx	r5
	memcpy(&table_buffer[k], &bcd_value[4], 4);
 1020a9c:	9b01      	ldr	r3, [sp, #4]
 1020a9e:	f8c4 300d 	str.w	r3, [r4, #13]

	/* Phase B Instantaneous Values*/
#if ( NBR_PHASES >= 2 )
	/* Voltage */
	var_temp = 0;
	var_temp = (uint64_t)METROLOGY_APP_dGet_instantaneous_value(V_B_ID);
 1020aa2:	200d      	movs	r0, #13
 1020aa4:	47b8      	blx	r7
 1020aa6:	47b0      	blx	r6
	UTIL_hex_to_bcd( (uint64_t)(var_temp), &bcd_value[0]);
 1020aa8:	466a      	mov	r2, sp
 1020aaa:	47a8      	blx	r5
	memcpy(&table_buffer[k], &bcd_value[4], 4);
 1020aac:	9b01      	ldr	r3, [sp, #4]
 1020aae:	f8c4 3012 	str.w	r3, [r4, #18]
	k += 4;
	
	/* Current */
	var_temp = 0;
	var_temp = (uint64_t)METROLOGY_APP_dGet_instantaneous_value(I_B_ID);
 1020ab2:	2013      	movs	r0, #19
 1020ab4:	47b8      	blx	r7
 1020ab6:	47b0      	blx	r6
	UTIL_hex_to_bcd( (uint64_t)(var_temp), &bcd_value[0]);
 1020ab8:	466a      	mov	r2, sp
 1020aba:	47a8      	blx	r5
	memcpy(&table_buffer[k], &bcd_value[4], 4);
 1020abc:	9b01      	ldr	r3, [sp, #4]
 1020abe:	f8c4 3016 	str.w	r3, [r4, #22]
	k += 4;
	
	/* Active Power */
	var_temp = 0;
	var_temp = (uint64_t)( fabs(METROLOGY_APP_dGet_instantaneous_value(P_B_ID)) );
 1020ac2:	2002      	movs	r0, #2
 1020ac4:	47b8      	blx	r7
 1020ac6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 1020aca:	4619      	mov	r1, r3
 1020acc:	47b0      	blx	r6
	UTIL_hex_to_bcd( (uint64_t)(var_temp), &bcd_value[0]);
 1020ace:	466a      	mov	r2, sp
 1020ad0:	47a8      	blx	r5
	memcpy(&table_buffer[k], &bcd_value[4], 4);
 1020ad2:	9b01      	ldr	r3, [sp, #4]
 1020ad4:	f8c4 301a 	str.w	r3, [r4, #26]
	k += 5;
	
	/* Reactive Power */
	var_temp = 0;
	var_temp = (uint64_t)( fabs(METROLOGY_APP_dGet_instantaneous_value(Q_B_ID)) );
 1020ad8:	2006      	movs	r0, #6
 1020ada:	47b8      	blx	r7
 1020adc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 1020ae0:	4619      	mov	r1, r3
 1020ae2:	47b0      	blx	r6
	UTIL_hex_to_bcd( (uint64_t)(var_temp), &bcd_value[0]);
 1020ae4:	466a      	mov	r2, sp
 1020ae6:	47a8      	blx	r5
	memcpy(&table_buffer[k], &bcd_value[4], 4);
 1020ae8:	9b01      	ldr	r3, [sp, #4]
 1020aea:	f8c4 301f 	str.w	r3, [r4, #31]

	/* Phase C Instantaneous Values*/
#if ( NBR_PHASES >= 3 )
	/* Voltage */
	var_temp = 0;
	var_temp = (uint64_t)METROLOGY_APP_dGet_instantaneous_value(V_C_ID);
 1020aee:	200e      	movs	r0, #14
 1020af0:	47b8      	blx	r7
 1020af2:	47b0      	blx	r6
	UTIL_hex_to_bcd( (uint64_t)(var_temp), &bcd_value[0]);
 1020af4:	466a      	mov	r2, sp
 1020af6:	47a8      	blx	r5
	memcpy(&table_buffer[k], &bcd_value[4], 4);
 1020af8:	9b01      	ldr	r3, [sp, #4]
 1020afa:	6263      	str	r3, [r4, #36]	; 0x24
	k += 4;
	
	/* Current */
	var_temp = 0;
	var_temp = (uint64_t)METROLOGY_APP_dGet_instantaneous_value(I_C_ID);
 1020afc:	2014      	movs	r0, #20
 1020afe:	47b8      	blx	r7
 1020b00:	47b0      	blx	r6
	UTIL_hex_to_bcd( (uint64_t)(var_temp), &bcd_value[0]);
 1020b02:	466a      	mov	r2, sp
 1020b04:	47a8      	blx	r5
	memcpy(&table_buffer[k], &bcd_value[4], 4);
 1020b06:	9b01      	ldr	r3, [sp, #4]
 1020b08:	62a3      	str	r3, [r4, #40]	; 0x28
	k += 4;
	
	/* Active Power */
	var_temp = 0;
	var_temp = (uint64_t)( fabs(METROLOGY_APP_dGet_instantaneous_value(P_C_ID)) );
 1020b0a:	2003      	movs	r0, #3
 1020b0c:	47b8      	blx	r7
 1020b0e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 1020b12:	4619      	mov	r1, r3
 1020b14:	47b0      	blx	r6
	UTIL_hex_to_bcd( (uint64_t)(var_temp), &bcd_value[0]);
 1020b16:	466a      	mov	r2, sp
 1020b18:	47a8      	blx	r5
	memcpy(&table_buffer[k], &bcd_value[4], 4);
 1020b1a:	9b01      	ldr	r3, [sp, #4]
 1020b1c:	62e3      	str	r3, [r4, #44]	; 0x2c
	k += 5;
	
	/* Reactive Power */
	var_temp = 0;
	var_temp = (uint64_t)( fabs(METROLOGY_APP_dGet_instantaneous_value(Q_C_ID)) );
 1020b1e:	2007      	movs	r0, #7
 1020b20:	47b8      	blx	r7
 1020b22:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 1020b26:	4619      	mov	r1, r3
 1020b28:	47b0      	blx	r6
	UTIL_hex_to_bcd( (uint64_t)(var_temp), &bcd_value[0]);
 1020b2a:	466a      	mov	r2, sp
 1020b2c:	47a8      	blx	r5
	memcpy(&table_buffer[k], &bcd_value[4], 4);
 1020b2e:	9b01      	ldr	r3, [sp, #4]
 1020b30:	f8c4 3031 	str.w	r3, [r4, #49]	; 0x31
	k += 5;
#endif

	return true;
}
 1020b34:	2001      	movs	r0, #1
 1020b36:	b003      	add	sp, #12
 1020b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1020b3a:	bf00      	nop
 1020b3c:	0101f065 	.word	0x0101f065
 1020b40:	01030659 	.word	0x01030659
 1020b44:	0102d2e1 	.word	0x0102d2e1

01020b48 <SM_APP_usMt_22_get_size>:
 ******************************************************************************
 */
uint16_t SM_APP_usMt_22_get_size(void) {

	return (uint16_t)MT_22_SIZE;
}
 1020b48:	2036      	movs	r0, #54	; 0x36
 1020b4a:	4770      	bx	lr

01020b4c <SM_APP_vMt_53_restore_default_values>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
void SM_APP_vMt_53_restore_default_values(void) {
 1020b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 1020b4e:	b095      	sub	sp, #84	; 0x54
 1020b50:	a914      	add	r1, sp, #80	; 0x50
 1020b52:	23ff      	movs	r3, #255	; 0xff
 1020b54:	f801 3d49 	strb.w	r3, [r1, #-73]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1020b58:	4e15      	ldr	r6, [pc, #84]	; (1020bb0 <SM_APP_vMt_53_restore_default_values+0x64>)
	
	uint8_t data_1[70];
	
	SM_APP_vChange_table_state(MT_53_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
	
	memset(&data_1, (int)0, sizeof(data_1));
 1020b5a:	4c16      	ldr	r4, [pc, #88]	; (1020bb4 <SM_APP_vMt_53_restore_default_values+0x68>)
	EEPROM_writer( MT_53_WIN_TIMEZONE_INDEX_ADDR, &data_1, 2);
	memset(&data_1, (int)0x20, sizeof(data_1));														
	memcpy((char*)&data_1, "Central Standard Time (Mexico)", 30);
 1020b5c:	4d16      	ldr	r5, [pc, #88]	; (1020bb8 <SM_APP_vMt_53_restore_default_values+0x6c>)
	memset(&data_1, (int)0, sizeof(data_1));
 1020b5e:	2746      	movs	r7, #70	; 0x46
	EEPROM_writer( table_state_addr, &state, 1 );
 1020b60:	2201      	movs	r2, #1
 1020b62:	f241 0075 	movw	r0, #4213	; 0x1075
 1020b66:	47b0      	blx	r6
	memset(&data_1, (int)0, sizeof(data_1));
 1020b68:	463a      	mov	r2, r7
 1020b6a:	a802      	add	r0, sp, #8
 1020b6c:	2100      	movs	r1, #0
 1020b6e:	47a0      	blx	r4
	EEPROM_writer( MT_53_WIN_TIMEZONE_INDEX_ADDR, &data_1, 2);
 1020b70:	a902      	add	r1, sp, #8
 1020b72:	2202      	movs	r2, #2
 1020b74:	f241 0078 	movw	r0, #4216	; 0x1078
 1020b78:	47b0      	blx	r6
	memset(&data_1, (int)0x20, sizeof(data_1));														
 1020b7a:	463a      	mov	r2, r7
 1020b7c:	a802      	add	r0, sp, #8
 1020b7e:	2120      	movs	r1, #32
 1020b80:	47a0      	blx	r4
	memcpy((char*)&data_1, "Central Standard Time (Mexico)", 30);
 1020b82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 1020b84:	ac02      	add	r4, sp, #8
 1020b86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 1020b88:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 1020b8c:	c407      	stmia	r4!, {r0, r1, r2}
	EEPROM_writer( MT_53_WIN_TIMEZONE_NAME_ADDR, &data_1, 70);
 1020b8e:	463a      	mov	r2, r7
 1020b90:	a902      	add	r1, sp, #8
	memcpy((char*)&data_1, "Central Standard Time (Mexico)", 30);
 1020b92:	8023      	strh	r3, [r4, #0]
	EEPROM_writer( MT_53_WIN_TIMEZONE_NAME_ADDR, &data_1, 70);
 1020b94:	f241 007a 	movw	r0, #4218	; 0x107a
 1020b98:	47b0      	blx	r6
 1020b9a:	a914      	add	r1, sp, #80	; 0x50
 1020b9c:	2345      	movs	r3, #69	; 0x45
 1020b9e:	f801 3d4a 	strb.w	r3, [r1, #-74]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1020ba2:	2201      	movs	r2, #1
 1020ba4:	f241 0075 	movw	r0, #4213	; 0x1075
 1020ba8:	47b0      	blx	r6
	
	SM_APP_vChange_table_state(MT_53_PROG_STATE_ADDR, C1219_TABLE_FULL);
}
 1020baa:	b015      	add	sp, #84	; 0x54
 1020bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1020bae:	bf00      	nop
 1020bb0:	01017509 	.word	0x01017509
 1020bb4:	01030b71 	.word	0x01030b71
 1020bb8:	01031620 	.word	0x01031620

01020bbc <SM_APP_vLoad_mt_53>:
void SM_APP_vLoad_mt_53(void) {
 1020bbc:	b500      	push	{lr}
 1020bbe:	b083      	sub	sp, #12
	EEPROM_reader( table_state_addr, &state, 1 );
 1020bc0:	4b07      	ldr	r3, [pc, #28]	; (1020be0 <SM_APP_vLoad_mt_53+0x24>)
 1020bc2:	2201      	movs	r2, #1
 1020bc4:	f10d 0107 	add.w	r1, sp, #7
 1020bc8:	f241 0075 	movw	r0, #4213	; 0x1075
 1020bcc:	4798      	blx	r3
	return state;
 1020bce:	f89d 3007 	ldrb.w	r3, [sp, #7]
	if ( SM_APP_ucGet_table_state(MT_53_PROG_STATE_ADDR) != C1219_TABLE_FULL ) {
 1020bd2:	2b45      	cmp	r3, #69	; 0x45
 1020bd4:	d001      	beq.n	1020bda <SM_APP_vLoad_mt_53+0x1e>
		SM_APP_vMt_53_restore_default_values();
 1020bd6:	4b03      	ldr	r3, [pc, #12]	; (1020be4 <SM_APP_vLoad_mt_53+0x28>)
 1020bd8:	4798      	blx	r3
}
 1020bda:	b003      	add	sp, #12
 1020bdc:	f85d fb04 	ldr.w	pc, [sp], #4
 1020be0:	01017511 	.word	0x01017511
 1020be4:	01020b4d 	.word	0x01020b4d

01020be8 <SM_APP_vLoad_c1219_tables>:
void SM_APP_vLoad_c1219_tables(void) {
 1020be8:	b530      	push	{r4, r5, lr}
 1020bea:	b083      	sub	sp, #12
	new_firmware = FW_VERSION_NUMBER;
 1020bec:	2302      	movs	r3, #2
	EEPROM_reader( ST_1_FW_VERSION_NUMBER_ADDR, &old_firmware, 1);
 1020bee:	2201      	movs	r2, #1
 1020bf0:	f10d 0106 	add.w	r1, sp, #6
 1020bf4:	f240 6011 	movw	r0, #1553	; 0x611
 1020bf8:	4c73      	ldr	r4, [pc, #460]	; (1020dc8 <SM_APP_vLoad_c1219_tables+0x1e0>)
	new_firmware = FW_VERSION_NUMBER;
 1020bfa:	f88d 3007 	strb.w	r3, [sp, #7]
	EEPROM_reader( ST_1_FW_VERSION_NUMBER_ADDR, &old_firmware, 1);
 1020bfe:	47a0      	blx	r4
	if ( new_firmware != old_firmware) {
 1020c00:	f89d 2007 	ldrb.w	r2, [sp, #7]
 1020c04:	f89d 3006 	ldrb.w	r3, [sp, #6]
 1020c08:	429a      	cmp	r2, r3
 1020c0a:	d01b      	beq.n	1020c44 <SM_APP_vLoad_c1219_tables+0x5c>
		EEPROM_writer( ST_1_FW_VERSION_NUMBER_ADDR, &new_firmware, 1);
 1020c0c:	f10d 0107 	add.w	r1, sp, #7
 1020c10:	2201      	movs	r2, #1
 1020c12:	f240 6011 	movw	r0, #1553	; 0x611
 1020c16:	4d6d      	ldr	r5, [pc, #436]	; (1020dcc <SM_APP_vLoad_c1219_tables+0x1e4>)
 1020c18:	47a8      	blx	r5
		new_firmware = FW_REVISION_NUMBER;
 1020c1a:	2300      	movs	r3, #0
		EEPROM_reader( ST_1_FW_REVISION_NUMBER_ADDR, &old_firmware, 1);
 1020c1c:	2201      	movs	r2, #1
 1020c1e:	f10d 0106 	add.w	r1, sp, #6
 1020c22:	f240 6012 	movw	r0, #1554	; 0x612
		new_firmware = FW_REVISION_NUMBER;
 1020c26:	f88d 3007 	strb.w	r3, [sp, #7]
		EEPROM_reader( ST_1_FW_REVISION_NUMBER_ADDR, &old_firmware, 1);
 1020c2a:	47a0      	blx	r4
		if ( new_firmware != old_firmware) {
 1020c2c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 1020c30:	f89d 3006 	ldrb.w	r3, [sp, #6]
 1020c34:	429a      	cmp	r2, r3
 1020c36:	d005      	beq.n	1020c44 <SM_APP_vLoad_c1219_tables+0x5c>
			EEPROM_writer( ST_1_FW_REVISION_NUMBER_ADDR, &new_firmware, 1);
 1020c38:	f10d 0107 	add.w	r1, sp, #7
 1020c3c:	2201      	movs	r2, #1
 1020c3e:	f240 6012 	movw	r0, #1554	; 0x612
 1020c42:	47a8      	blx	r5
	WATCHDOG_APP_vRestart();
 1020c44:	4d62      	ldr	r5, [pc, #392]	; (1020dd0 <SM_APP_vLoad_c1219_tables+0x1e8>)
	PFAIL_APP_vTask();
 1020c46:	4c63      	ldr	r4, [pc, #396]	; (1020dd4 <SM_APP_vLoad_c1219_tables+0x1ec>)
	WATCHDOG_APP_vRestart();
 1020c48:	47a8      	blx	r5
	PFAIL_APP_vTask();
 1020c4a:	47a0      	blx	r4
	GRAL_APP_bLoad_st_1();
 1020c4c:	4b62      	ldr	r3, [pc, #392]	; (1020dd8 <SM_APP_vLoad_c1219_tables+0x1f0>)
 1020c4e:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 1020c50:	47a8      	blx	r5
	PFAIL_APP_vTask();
 1020c52:	47a0      	blx	r4
	GRAL_APP_bLoad_st_3();
 1020c54:	4b61      	ldr	r3, [pc, #388]	; (1020ddc <SM_APP_vLoad_c1219_tables+0x1f4>)
 1020c56:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 1020c58:	47a8      	blx	r5
	PFAIL_APP_vTask();
 1020c5a:	47a0      	blx	r4
	GRAL_APP_bLoad_st_6();
 1020c5c:	4b60      	ldr	r3, [pc, #384]	; (1020de0 <SM_APP_vLoad_c1219_tables+0x1f8>)
 1020c5e:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 1020c60:	47a8      	blx	r5
	PFAIL_APP_vTask();
 1020c62:	47a0      	blx	r4
	SM_APP_vLoad_mt_1();
 1020c64:	4b5f      	ldr	r3, [pc, #380]	; (1020de4 <SM_APP_vLoad_c1219_tables+0x1fc>)
 1020c66:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 1020c68:	47a8      	blx	r5
	PFAIL_APP_vTask();
 1020c6a:	47a0      	blx	r4
	SM_APP_vLoad_mt_3();
 1020c6c:	4b5e      	ldr	r3, [pc, #376]	; (1020de8 <SM_APP_vLoad_c1219_tables+0x200>)
 1020c6e:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 1020c70:	47a8      	blx	r5
	PFAIL_APP_vTask();
 1020c72:	47a0      	blx	r4
	SM_APP_vLoad_mt_23();
 1020c74:	4b5d      	ldr	r3, [pc, #372]	; (1020dec <SM_APP_vLoad_c1219_tables+0x204>)
 1020c76:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 1020c78:	47a8      	blx	r5
	PFAIL_APP_vTask();
 1020c7a:	47a0      	blx	r4
	SM_APP_vLoad_mt_4();
 1020c7c:	4b5c      	ldr	r3, [pc, #368]	; (1020df0 <SM_APP_vLoad_c1219_tables+0x208>)
 1020c7e:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 1020c80:	47a8      	blx	r5
	PFAIL_APP_vTask();
 1020c82:	47a0      	blx	r4
	SM_APP_vLoad_mt_5();
 1020c84:	4b5b      	ldr	r3, [pc, #364]	; (1020df4 <SM_APP_vLoad_c1219_tables+0x20c>)
 1020c86:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 1020c88:	47a8      	blx	r5
	PFAIL_APP_vTask();
 1020c8a:	47a0      	blx	r4
	SM_APP_vLoad_mt_53();
 1020c8c:	4b5a      	ldr	r3, [pc, #360]	; (1020df8 <SM_APP_vLoad_c1219_tables+0x210>)
 1020c8e:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 1020c90:	47a8      	blx	r5
	PFAIL_APP_vTask();
 1020c92:	47a0      	blx	r4
	REGS_APP_bLoad_st_11();
 1020c94:	4b59      	ldr	r3, [pc, #356]	; (1020dfc <SM_APP_vLoad_c1219_tables+0x214>)
 1020c96:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 1020c98:	47a8      	blx	r5
	PFAIL_APP_vTask();
 1020c9a:	47a0      	blx	r4
	SM_APP_vIs_st_11_corrupted_data();
 1020c9c:	4b58      	ldr	r3, [pc, #352]	; (1020e00 <SM_APP_vLoad_c1219_tables+0x218>)
 1020c9e:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 1020ca0:	47a8      	blx	r5
	PFAIL_APP_vTask();
 1020ca2:	47a0      	blx	r4
	REGS_APP_bLoad_st_13();
 1020ca4:	4b57      	ldr	r3, [pc, #348]	; (1020e04 <SM_APP_vLoad_c1219_tables+0x21c>)
 1020ca6:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 1020ca8:	47a8      	blx	r5
	PFAIL_APP_vTask();
 1020caa:	47a0      	blx	r4
	REGS_APP_bLoad_st_21();
 1020cac:	4b56      	ldr	r3, [pc, #344]	; (1020e08 <SM_APP_vLoad_c1219_tables+0x220>)
 1020cae:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 1020cb0:	47a8      	blx	r5
	PFAIL_APP_vTask();
 1020cb2:	47a0      	blx	r4
	SM_APP_vIs_st_21_corrupted_data();
 1020cb4:	4b55      	ldr	r3, [pc, #340]	; (1020e0c <SM_APP_vLoad_c1219_tables+0x224>)
 1020cb6:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 1020cb8:	47a8      	blx	r5
	PFAIL_APP_vTask();
 1020cba:	47a0      	blx	r4
	REGS_APP_bLoad_st_22();
 1020cbc:	4b54      	ldr	r3, [pc, #336]	; (1020e10 <SM_APP_vLoad_c1219_tables+0x228>)
 1020cbe:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 1020cc0:	47a8      	blx	r5
	PFAIL_APP_vTask();
 1020cc2:	47a0      	blx	r4
	SM_APP_vIs_st_22_corrupted_data();
 1020cc4:	4b53      	ldr	r3, [pc, #332]	; (1020e14 <SM_APP_vLoad_c1219_tables+0x22c>)
 1020cc6:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 1020cc8:	47a8      	blx	r5
	PFAIL_APP_vTask();
 1020cca:	47a0      	blx	r4
	REGS_APP_bLoad_st_23();
 1020ccc:	4b52      	ldr	r3, [pc, #328]	; (1020e18 <SM_APP_vLoad_c1219_tables+0x230>)
 1020cce:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 1020cd0:	47a8      	blx	r5
	PFAIL_APP_vTask();
 1020cd2:	47a0      	blx	r4
 	REGS_APP_bLoad_st_26();
 1020cd4:	4b51      	ldr	r3, [pc, #324]	; (1020e1c <SM_APP_vLoad_c1219_tables+0x234>)
 1020cd6:	4798      	blx	r3
 	WATCHDOG_APP_vRestart();
 1020cd8:	47a8      	blx	r5
	PFAIL_APP_vTask();
 1020cda:	47a0      	blx	r4
	REGS_APP_bLoad_st_27();
 1020cdc:	4b50      	ldr	r3, [pc, #320]	; (1020e20 <SM_APP_vLoad_c1219_tables+0x238>)
 1020cde:	4798      	blx	r3
 	WATCHDOG_APP_vRestart();
 1020ce0:	47a8      	blx	r5
	PFAIL_APP_vTask();
 1020ce2:	47a0      	blx	r4
	SM_APP_vIs_st_27_corrupted_data();
 1020ce4:	4b4f      	ldr	r3, [pc, #316]	; (1020e24 <SM_APP_vLoad_c1219_tables+0x23c>)
 1020ce6:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 1020ce8:	47a8      	blx	r5
	PFAIL_APP_vTask();
 1020cea:	47a0      	blx	r4
	SECR_APP_bLoad_st_41();
 1020cec:	4b4e      	ldr	r3, [pc, #312]	; (1020e28 <SM_APP_vLoad_c1219_tables+0x240>)
 1020cee:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 1020cf0:	47a8      	blx	r5
	PFAIL_APP_vTask();
 1020cf2:	47a0      	blx	r4
	SM_APP_vIs_st_41_corrupted_data();
 1020cf4:	4b4d      	ldr	r3, [pc, #308]	; (1020e2c <SM_APP_vLoad_c1219_tables+0x244>)
 1020cf6:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 1020cf8:	47a8      	blx	r5
	PFAIL_APP_vTask();
 1020cfa:	47a0      	blx	r4
	SECR_APP_bLoad_st_42();
 1020cfc:	4b4c      	ldr	r3, [pc, #304]	; (1020e30 <SM_APP_vLoad_c1219_tables+0x248>)
 1020cfe:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 1020d00:	47a8      	blx	r5
	PFAIL_APP_vTask();
 1020d02:	47a0      	blx	r4
	SM_APP_vIs_st_42_corrupted_data();
 1020d04:	4b4b      	ldr	r3, [pc, #300]	; (1020e34 <SM_APP_vLoad_c1219_tables+0x24c>)
 1020d06:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 1020d08:	47a8      	blx	r5
	PFAIL_APP_vTask();
 1020d0a:	47a0      	blx	r4
	SECR_APP_bLoad_st_43();
 1020d0c:	4b4a      	ldr	r3, [pc, #296]	; (1020e38 <SM_APP_vLoad_c1219_tables+0x250>)
 1020d0e:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 1020d10:	47a8      	blx	r5
	PFAIL_APP_vTask();
 1020d12:	47a0      	blx	r4
	SM_APP_vIs_st_43_corrupted_data();
 1020d14:	4b49      	ldr	r3, [pc, #292]	; (1020e3c <SM_APP_vLoad_c1219_tables+0x254>)
 1020d16:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 1020d18:	47a8      	blx	r5
	PFAIL_APP_vTask();
 1020d1a:	47a0      	blx	r4
	SECR_APP_bLoad_st_44();
 1020d1c:	4b48      	ldr	r3, [pc, #288]	; (1020e40 <SM_APP_vLoad_c1219_tables+0x258>)
 1020d1e:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 1020d20:	47a8      	blx	r5
	PFAIL_APP_vTask();
 1020d22:	47a0      	blx	r4
	SM_APP_vIs_st_44_corrupted_data();
 1020d24:	4b47      	ldr	r3, [pc, #284]	; (1020e44 <SM_APP_vLoad_c1219_tables+0x25c>)
 1020d26:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 1020d28:	47a8      	blx	r5
	PFAIL_APP_vTask();
 1020d2a:	47a0      	blx	r4
	TOU_APP_bLoad_st_51();
 1020d2c:	4b46      	ldr	r3, [pc, #280]	; (1020e48 <SM_APP_vLoad_c1219_tables+0x260>)
 1020d2e:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 1020d30:	47a8      	blx	r5
	PFAIL_APP_vTask();
 1020d32:	47a0      	blx	r4
	SM_APP_vIs_st_51_corrupted_data();
 1020d34:	4b45      	ldr	r3, [pc, #276]	; (1020e4c <SM_APP_vLoad_c1219_tables+0x264>)
 1020d36:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 1020d38:	47a8      	blx	r5
	PFAIL_APP_vTask();
 1020d3a:	47a0      	blx	r4
	TOU_APP_bLoad_st_53();
 1020d3c:	4b44      	ldr	r3, [pc, #272]	; (1020e50 <SM_APP_vLoad_c1219_tables+0x268>)
 1020d3e:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 1020d40:	47a8      	blx	r5
	PFAIL_APP_vTask();
 1020d42:	47a0      	blx	r4
	LP_APP_bLoad_st_61();	
 1020d44:	4b43      	ldr	r3, [pc, #268]	; (1020e54 <SM_APP_vLoad_c1219_tables+0x26c>)
 1020d46:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 1020d48:	47a8      	blx	r5
	PFAIL_APP_vTask();
 1020d4a:	47a0      	blx	r4
	SM_APP_vIs_st_61_corrupted_data();
 1020d4c:	4b42      	ldr	r3, [pc, #264]	; (1020e58 <SM_APP_vLoad_c1219_tables+0x270>)
 1020d4e:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 1020d50:	47a8      	blx	r5
	PFAIL_APP_vTask();
 1020d52:	47a0      	blx	r4
	LP_APP_bLoad_st_62();
 1020d54:	4b41      	ldr	r3, [pc, #260]	; (1020e5c <SM_APP_vLoad_c1219_tables+0x274>)
 1020d56:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 1020d58:	47a8      	blx	r5
	PFAIL_APP_vTask();
 1020d5a:	47a0      	blx	r4
	SM_APP_vIs_st_62_corrupted_data();
 1020d5c:	4b40      	ldr	r3, [pc, #256]	; (1020e60 <SM_APP_vLoad_c1219_tables+0x278>)
 1020d5e:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 1020d60:	47a8      	blx	r5
	PFAIL_APP_vTask();
 1020d62:	47a0      	blx	r4
	LP_APP_bLoad_st_63();
 1020d64:	4b3f      	ldr	r3, [pc, #252]	; (1020e64 <SM_APP_vLoad_c1219_tables+0x27c>)
 1020d66:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 1020d68:	47a8      	blx	r5
	PFAIL_APP_vTask();
 1020d6a:	47a0      	blx	r4
	LP_APP_vLoad_st_64_eeprom_addr();
 1020d6c:	4b3e      	ldr	r3, [pc, #248]	; (1020e68 <SM_APP_vLoad_c1219_tables+0x280>)
 1020d6e:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 1020d70:	47a8      	blx	r5
	PFAIL_APP_vTask();
 1020d72:	47a0      	blx	r4
	EVNT_APP_bLoad_st_71();
 1020d74:	4b3d      	ldr	r3, [pc, #244]	; (1020e6c <SM_APP_vLoad_c1219_tables+0x284>)
 1020d76:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 1020d78:	47a8      	blx	r5
	PFAIL_APP_vTask();
 1020d7a:	47a0      	blx	r4
	SM_APP_vIs_st_71_corrupted_data();
 1020d7c:	4b3c      	ldr	r3, [pc, #240]	; (1020e70 <SM_APP_vLoad_c1219_tables+0x288>)
 1020d7e:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 1020d80:	47a8      	blx	r5
	PFAIL_APP_vTask();
 1020d82:	47a0      	blx	r4
	EVNT_APP_bLoad_st_73();
 1020d84:	4b3b      	ldr	r3, [pc, #236]	; (1020e74 <SM_APP_vLoad_c1219_tables+0x28c>)
 1020d86:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 1020d88:	47a8      	blx	r5
	PFAIL_APP_vTask();
 1020d8a:	47a0      	blx	r4
	SM_APP_vIs_st_73_corrupted_data();
 1020d8c:	4b3a      	ldr	r3, [pc, #232]	; (1020e78 <SM_APP_vLoad_c1219_tables+0x290>)
 1020d8e:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 1020d90:	47a8      	blx	r5
	PFAIL_APP_vTask();
 1020d92:	47a0      	blx	r4
	EVNT_APP_bLoad_st_74();
 1020d94:	4b39      	ldr	r3, [pc, #228]	; (1020e7c <SM_APP_vLoad_c1219_tables+0x294>)
 1020d96:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 1020d98:	47a8      	blx	r5
	PFAIL_APP_vTask();
 1020d9a:	47a0      	blx	r4
	EVNT_APP_bLoad_st_75();
 1020d9c:	4b38      	ldr	r3, [pc, #224]	; (1020e80 <SM_APP_vLoad_c1219_tables+0x298>)
 1020d9e:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 1020da0:	47a8      	blx	r5
	PFAIL_APP_vTask();
 1020da2:	47a0      	blx	r4
	SM_APP_vIs_st_75_corrupted_data();
 1020da4:	4b37      	ldr	r3, [pc, #220]	; (1020e84 <SM_APP_vLoad_c1219_tables+0x29c>)
 1020da6:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 1020da8:	47a8      	blx	r5
	PFAIL_APP_vTask();
 1020daa:	47a0      	blx	r4
	EVNT_APP_bLoad_st_76();
 1020dac:	4b36      	ldr	r3, [pc, #216]	; (1020e88 <SM_APP_vLoad_c1219_tables+0x2a0>)
 1020dae:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 1020db0:	47a8      	blx	r5
	PFAIL_APP_vTask();
 1020db2:	47a0      	blx	r4
	EVNT_APP_bLoad_mt_73();
 1020db4:	4b35      	ldr	r3, [pc, #212]	; (1020e8c <SM_APP_vLoad_c1219_tables+0x2a4>)
 1020db6:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 1020db8:	47a8      	blx	r5
	PFAIL_APP_vTask();
 1020dba:	47a0      	blx	r4
	SM_APP_vIs_mt_73_corrupted_data();
 1020dbc:	4b34      	ldr	r3, [pc, #208]	; (1020e90 <SM_APP_vLoad_c1219_tables+0x2a8>)
 1020dbe:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 1020dc0:	47a8      	blx	r5
	PFAIL_APP_vTask();
 1020dc2:	47a0      	blx	r4
}
 1020dc4:	b003      	add	sp, #12
 1020dc6:	bd30      	pop	{r4, r5, pc}
 1020dc8:	01017511 	.word	0x01017511
 1020dcc:	01017509 	.word	0x01017509
 1020dd0:	0101603d 	.word	0x0101603d
 1020dd4:	01025bf1 	.word	0x01025bf1
 1020dd8:	01019ba9 	.word	0x01019ba9
 1020ddc:	01019d65 	.word	0x01019d65
 1020de0:	01019f61 	.word	0x01019f61
 1020de4:	010204a9 	.word	0x010204a9
 1020de8:	01020579 	.word	0x01020579
 1020dec:	01020669 	.word	0x01020669
 1020df0:	010207cd 	.word	0x010207cd
 1020df4:	010209f1 	.word	0x010209f1
 1020df8:	01020bbd 	.word	0x01020bbd
 1020dfc:	010265b9 	.word	0x010265b9
 1020e00:	0101f46d 	.word	0x0101f46d
 1020e04:	010267fd 	.word	0x010267fd
 1020e08:	01026c49 	.word	0x01026c49
 1020e0c:	0101f569 	.word	0x0101f569
 1020e10:	01026ec1 	.word	0x01026ec1
 1020e14:	0101f665 	.word	0x0101f665
 1020e18:	01027039 	.word	0x01027039
 1020e1c:	01027f4d 	.word	0x01027f4d
 1020e20:	01028529 	.word	0x01028529
 1020e24:	0101f761 	.word	0x0101f761
 1020e28:	0102aafd 	.word	0x0102aafd
 1020e2c:	0101f85d 	.word	0x0101f85d
 1020e30:	0102acf5 	.word	0x0102acf5
 1020e34:	0101f959 	.word	0x0101f959
 1020e38:	0102aeb5 	.word	0x0102aeb5
 1020e3c:	0101fa55 	.word	0x0101fa55
 1020e40:	0102b07d 	.word	0x0102b07d
 1020e44:	0101fb71 	.word	0x0101fb71
 1020e48:	0102c3bd 	.word	0x0102c3bd
 1020e4c:	0101fc6d 	.word	0x0101fc6d
 1020e50:	0102c019 	.word	0x0102c019
 1020e54:	0101b4ed 	.word	0x0101b4ed
 1020e58:	0101fd69 	.word	0x0101fd69
 1020e5c:	0101b7e9 	.word	0x0101b7e9
 1020e60:	0101fe65 	.word	0x0101fe65
 1020e64:	0101baa1 	.word	0x0101baa1
 1020e68:	0101bbbd 	.word	0x0101bbbd
 1020e6c:	01018529 	.word	0x01018529
 1020e70:	0101ff61 	.word	0x0101ff61
 1020e74:	01018865 	.word	0x01018865
 1020e78:	0102005d 	.word	0x0102005d
 1020e7c:	01018ea5 	.word	0x01018ea5
 1020e80:	010192f1 	.word	0x010192f1
 1020e84:	01020159 	.word	0x01020159
 1020e88:	01019669 	.word	0x01019669
 1020e8c:	01018b95 	.word	0x01018b95
 1020e90:	01020255 	.word	0x01020255

01020e94 <SM_APP_bMt_53_execute_table_reading>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bMt_53_execute_table_reading(uint8_t *table_buffer) {
 1020e94:	b510      	push	{r4, lr}
	
	delay_ms(10);
 1020e96:	4b06      	ldr	r3, [pc, #24]	; (1020eb0 <SM_APP_bMt_53_execute_table_reading+0x1c>)
bool SM_APP_bMt_53_execute_table_reading(uint8_t *table_buffer) {
 1020e98:	4604      	mov	r4, r0
	delay_ms(10);
 1020e9a:	4806      	ldr	r0, [pc, #24]	; (1020eb4 <SM_APP_bMt_53_execute_table_reading+0x20>)
 1020e9c:	4798      	blx	r3
	EEPROM_reader( MT_53_START_ADDR, &table_buffer[0], MT_53_SIZE);
 1020e9e:	4621      	mov	r1, r4
 1020ea0:	2248      	movs	r2, #72	; 0x48
 1020ea2:	4b05      	ldr	r3, [pc, #20]	; (1020eb8 <SM_APP_bMt_53_execute_table_reading+0x24>)
 1020ea4:	f241 0078 	movw	r0, #4216	; 0x1078
 1020ea8:	4798      	blx	r3
	
	return true;
}
 1020eaa:	2001      	movs	r0, #1
 1020eac:	bd10      	pop	{r4, pc}
 1020eae:	bf00      	nop
 1020eb0:	20000001 	.word	0x20000001
 1020eb4:	00011db7 	.word	0x00011db7
 1020eb8:	01017511 	.word	0x01017511

01020ebc <SM_APP_bMt_53_execute_table_writing>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bMt_53_execute_table_writing(uint8_t *table_buffer) {
 1020ebc:	b508      	push	{r3, lr}
	
	EEPROM_writer(MT_53_START_ADDR, &table_buffer[0], MT_53_SIZE);
 1020ebe:	4601      	mov	r1, r0
 1020ec0:	2248      	movs	r2, #72	; 0x48
 1020ec2:	4b03      	ldr	r3, [pc, #12]	; (1020ed0 <SM_APP_bMt_53_execute_table_writing+0x14>)
 1020ec4:	f241 0078 	movw	r0, #4216	; 0x1078
 1020ec8:	4798      	blx	r3
	
	return true;	
}
 1020eca:	2001      	movs	r0, #1
 1020ecc:	bd08      	pop	{r3, pc}
 1020ece:	bf00      	nop
 1020ed0:	01017509 	.word	0x01017509

01020ed4 <SM_APP_usMt_53_get_size>:
 1020ed4:	2048      	movs	r0, #72	; 0x48
 1020ed6:	4770      	bx	lr

01020ed8 <SM_APP_bMt_24_execute_table_reading>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bMt_24_execute_table_reading(uint8_t *table_buffer) {
 1020ed8:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t k = 0;
	uint64_t acc_quantity;

#if NBR_PHASES >= 1

	acc_quantity = VMetrology.DSP_ACC.I_A;
 1020eda:	4b8e      	ldr	r3, [pc, #568]	; (1021114 <SM_APP_bMt_24_execute_table_reading+0x23c>)
 1020edc:	f8d3 1168 	ldr.w	r1, [r3, #360]	; 0x168
 1020ee0:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000000000FF) >> 0 );
 1020ee4:	7001      	strb	r1, [r0, #0]
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x000000000000FF00) >> 8 );
 1020ee6:	0a0c      	lsrs	r4, r1, #8
 1020ee8:	7044      	strb	r4, [r0, #1]
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000000000FF0000) >> 16 );
 1020eea:	0c0f      	lsrs	r7, r1, #16
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000FF000000) >> 24 );
 1020eec:	0e0e      	lsrs	r6, r1, #24
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x000000FF00000000) >> 32 );
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000FF0000000000) >> 40 );
 1020eee:	0a15      	lsrs	r5, r2, #8
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00FF000000000000) >> 48 );
 1020ef0:	0c14      	lsrs	r4, r2, #16
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0xFF00000000000000) >> 56 );
 1020ef2:	0e11      	lsrs	r1, r2, #24
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000000000FF0000) >> 16 );
 1020ef4:	7087      	strb	r7, [r0, #2]
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000FF000000) >> 24 );
 1020ef6:	70c6      	strb	r6, [r0, #3]
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000FF0000000000) >> 40 );
 1020ef8:	7145      	strb	r5, [r0, #5]
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00FF000000000000) >> 48 );
 1020efa:	7184      	strb	r4, [r0, #6]
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x000000FF00000000) >> 32 );
 1020efc:	7102      	strb	r2, [r0, #4]
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0xFF00000000000000) >> 56 );
 1020efe:	71c1      	strb	r1, [r0, #7]

	acc_quantity = VMetrology.DSP_ACC.V_A;
 1020f00:	f8d3 1270 	ldr.w	r1, [r3, #624]	; 0x270
 1020f04:	f8d3 2274 	ldr.w	r2, [r3, #628]	; 0x274
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000000000FF) >> 0 );
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x000000000000FF00) >> 8 );
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000000000FF0000) >> 16 );
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000FF000000) >> 24 );
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x000000FF00000000) >> 32 );
 1020f08:	7302      	strb	r2, [r0, #12]
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x000000000000FF00) >> 8 );
 1020f0a:	0a0c      	lsrs	r4, r1, #8
 1020f0c:	7244      	strb	r4, [r0, #9]
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000000000FF0000) >> 16 );
 1020f0e:	0c0f      	lsrs	r7, r1, #16
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000FF000000) >> 24 );
 1020f10:	0e0e      	lsrs	r6, r1, #24
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000FF0000000000) >> 40 );
 1020f12:	0a15      	lsrs	r5, r2, #8
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00FF000000000000) >> 48 );
 1020f14:	0c14      	lsrs	r4, r2, #16
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0xFF00000000000000) >> 56 );
 1020f16:	0e12      	lsrs	r2, r2, #24
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000000000FF0000) >> 16 );
 1020f18:	7287      	strb	r7, [r0, #10]
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000FF000000) >> 24 );
 1020f1a:	72c6      	strb	r6, [r0, #11]
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000FF0000000000) >> 40 );
 1020f1c:	7345      	strb	r5, [r0, #13]
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00FF000000000000) >> 48 );
 1020f1e:	7384      	strb	r4, [r0, #14]
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000000000FF) >> 0 );
 1020f20:	7201      	strb	r1, [r0, #8]
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0xFF00000000000000) >> 56 );
 1020f22:	73c2      	strb	r2, [r0, #15]

	acc_quantity = VMetrology.DSP_ACC.P_A;
 1020f24:	f8d3 11e0 	ldr.w	r1, [r3, #480]	; 0x1e0
 1020f28:	f8d3 21e4 	ldr.w	r2, [r3, #484]	; 0x1e4
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000000000FF) >> 0 );
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x000000000000FF00) >> 8 );
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000000000FF0000) >> 16 );
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000FF000000) >> 24 );
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x000000FF00000000) >> 32 );
 1020f2c:	7502      	strb	r2, [r0, #20]
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x000000000000FF00) >> 8 );
 1020f2e:	0a0c      	lsrs	r4, r1, #8
 1020f30:	7444      	strb	r4, [r0, #17]
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000000000FF0000) >> 16 );
 1020f32:	0c0f      	lsrs	r7, r1, #16
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000FF000000) >> 24 );
 1020f34:	0e0e      	lsrs	r6, r1, #24
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000FF0000000000) >> 40 );
 1020f36:	0a15      	lsrs	r5, r2, #8
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00FF000000000000) >> 48 );
 1020f38:	0c14      	lsrs	r4, r2, #16
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0xFF00000000000000) >> 56 );
 1020f3a:	0e12      	lsrs	r2, r2, #24
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000000000FF0000) >> 16 );
 1020f3c:	7487      	strb	r7, [r0, #18]
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000FF000000) >> 24 );
 1020f3e:	74c6      	strb	r6, [r0, #19]
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000FF0000000000) >> 40 );
 1020f40:	7545      	strb	r5, [r0, #21]
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00FF000000000000) >> 48 );
 1020f42:	7584      	strb	r4, [r0, #22]
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000000000FF) >> 0 );
 1020f44:	7401      	strb	r1, [r0, #16]
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0xFF00000000000000) >> 56 );
 1020f46:	75c2      	strb	r2, [r0, #23]

	acc_quantity = VMetrology.DSP_ACC.Q_A;
 1020f48:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
 1020f4c:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000000000FF) >> 0 );
 1020f50:	7602      	strb	r2, [r0, #24]
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x000000000000FF00) >> 8 );
 1020f52:	0a14      	lsrs	r4, r2, #8
 1020f54:	7644      	strb	r4, [r0, #25]
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000000000FF0000) >> 16 );
 1020f56:	0c17      	lsrs	r7, r2, #16
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000FF000000) >> 24 );
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x000000FF00000000) >> 32 );
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000FF0000000000) >> 40 );
 1020f58:	0a0e      	lsrs	r6, r1, #8
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00FF000000000000) >> 48 );
 1020f5a:	0c0d      	lsrs	r5, r1, #16
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0xFF00000000000000) >> 56 );
 1020f5c:	0e0c      	lsrs	r4, r1, #24
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000FF000000) >> 24 );
 1020f5e:	0e12      	lsrs	r2, r2, #24
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000000000FF0000) >> 16 );
 1020f60:	7687      	strb	r7, [r0, #26]
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000FF0000000000) >> 40 );
 1020f62:	7746      	strb	r6, [r0, #29]
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00FF000000000000) >> 48 );
 1020f64:	7785      	strb	r5, [r0, #30]
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0xFF00000000000000) >> 56 );
 1020f66:	77c4      	strb	r4, [r0, #31]
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x000000FF00000000) >> 32 );
 1020f68:	7701      	strb	r1, [r0, #28]
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000FF000000) >> 24 );
 1020f6a:	76c2      	strb	r2, [r0, #27]
#endif


#if NBR_PHASES >= 2
	
	acc_quantity = VMetrology.DSP_ACC.I_B;
 1020f6c:	f8d3 1170 	ldr.w	r1, [r3, #368]	; 0x170
 1020f70:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000000000FF) >> 0 );
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x000000000000FF00) >> 8 );
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000000000FF0000) >> 16 );
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000FF000000) >> 24 );
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x000000FF00000000) >> 32 );
 1020f74:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x000000000000FF00) >> 8 );
 1020f78:	0a0c      	lsrs	r4, r1, #8
 1020f7a:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000000000FF0000) >> 16 );
 1020f7e:	0c0f      	lsrs	r7, r1, #16
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000FF000000) >> 24 );
 1020f80:	0e0e      	lsrs	r6, r1, #24
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000FF0000000000) >> 40 );
 1020f82:	0a15      	lsrs	r5, r2, #8
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00FF000000000000) >> 48 );
 1020f84:	0c14      	lsrs	r4, r2, #16
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0xFF00000000000000) >> 56 );
 1020f86:	0e12      	lsrs	r2, r2, #24
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000000000FF0000) >> 16 );
 1020f88:	f880 7022 	strb.w	r7, [r0, #34]	; 0x22
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000FF000000) >> 24 );
 1020f8c:	f880 6023 	strb.w	r6, [r0, #35]	; 0x23
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000FF0000000000) >> 40 );
 1020f90:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00FF000000000000) >> 48 );
 1020f94:	f880 4026 	strb.w	r4, [r0, #38]	; 0x26
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000000000FF) >> 0 );
 1020f98:	f880 1020 	strb.w	r1, [r0, #32]
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0xFF00000000000000) >> 56 );
 1020f9c:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27

	acc_quantity = VMetrology.DSP_ACC.V_B;
 1020fa0:	f8d3 1278 	ldr.w	r1, [r3, #632]	; 0x278
 1020fa4:	f8d3 227c 	ldr.w	r2, [r3, #636]	; 0x27c
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000000000FF) >> 0 );
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x000000000000FF00) >> 8 );
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000000000FF0000) >> 16 );
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000FF000000) >> 24 );
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x000000FF00000000) >> 32 );
 1020fa8:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x000000000000FF00) >> 8 );
 1020fac:	0a0c      	lsrs	r4, r1, #8
 1020fae:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000000000FF0000) >> 16 );
 1020fb2:	0c0f      	lsrs	r7, r1, #16
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000FF000000) >> 24 );
 1020fb4:	0e0e      	lsrs	r6, r1, #24
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000FF0000000000) >> 40 );
 1020fb6:	0a15      	lsrs	r5, r2, #8
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00FF000000000000) >> 48 );
 1020fb8:	0c14      	lsrs	r4, r2, #16
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0xFF00000000000000) >> 56 );
 1020fba:	0e12      	lsrs	r2, r2, #24
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000000000FF0000) >> 16 );
 1020fbc:	f880 702a 	strb.w	r7, [r0, #42]	; 0x2a
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000FF000000) >> 24 );
 1020fc0:	f880 602b 	strb.w	r6, [r0, #43]	; 0x2b
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000FF0000000000) >> 40 );
 1020fc4:	f880 502d 	strb.w	r5, [r0, #45]	; 0x2d
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00FF000000000000) >> 48 );
 1020fc8:	f880 402e 	strb.w	r4, [r0, #46]	; 0x2e
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000000000FF) >> 0 );
 1020fcc:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0xFF00000000000000) >> 56 );
 1020fd0:	f880 202f 	strb.w	r2, [r0, #47]	; 0x2f

	acc_quantity = VMetrology.DSP_ACC.P_B;
 1020fd4:	f8d3 21e8 	ldr.w	r2, [r3, #488]	; 0x1e8
 1020fd8:	f8d3 11ec 	ldr.w	r1, [r3, #492]	; 0x1ec
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000000000FF) >> 0 );
 1020fdc:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x000000000000FF00) >> 8 );
 1020fe0:	0a14      	lsrs	r4, r2, #8
 1020fe2:	f880 4031 	strb.w	r4, [r0, #49]	; 0x31
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000000000FF0000) >> 16 );
 1020fe6:	0c17      	lsrs	r7, r2, #16
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000FF000000) >> 24 );
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x000000FF00000000) >> 32 );
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000FF0000000000) >> 40 );
 1020fe8:	0a0e      	lsrs	r6, r1, #8
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00FF000000000000) >> 48 );
 1020fea:	0c0d      	lsrs	r5, r1, #16
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0xFF00000000000000) >> 56 );
 1020fec:	0e0c      	lsrs	r4, r1, #24
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000FF000000) >> 24 );
 1020fee:	0e12      	lsrs	r2, r2, #24
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000000000FF0000) >> 16 );
 1020ff0:	f880 7032 	strb.w	r7, [r0, #50]	; 0x32
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000FF0000000000) >> 40 );
 1020ff4:	f880 6035 	strb.w	r6, [r0, #53]	; 0x35
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00FF000000000000) >> 48 );
 1020ff8:	f880 5036 	strb.w	r5, [r0, #54]	; 0x36
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0xFF00000000000000) >> 56 );
 1020ffc:	f880 4037 	strb.w	r4, [r0, #55]	; 0x37
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000FF000000) >> 24 );
 1021000:	f880 2033 	strb.w	r2, [r0, #51]	; 0x33
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x000000FF00000000) >> 32 );
 1021004:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34

	acc_quantity = VMetrology.DSP_ACC.Q_B;
 1021008:	f8d3 1230 	ldr.w	r1, [r3, #560]	; 0x230
 102100c:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000000000FF) >> 0 );
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x000000000000FF00) >> 8 );
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000000000FF0000) >> 16 );
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000FF000000) >> 24 );
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x000000FF00000000) >> 32 );
 1021010:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x000000000000FF00) >> 8 );
 1021014:	0a0c      	lsrs	r4, r1, #8
 1021016:	f880 4039 	strb.w	r4, [r0, #57]	; 0x39
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000000000FF0000) >> 16 );
 102101a:	0c0f      	lsrs	r7, r1, #16
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000FF000000) >> 24 );
 102101c:	0e0e      	lsrs	r6, r1, #24
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000FF0000000000) >> 40 );
 102101e:	0a15      	lsrs	r5, r2, #8
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00FF000000000000) >> 48 );
 1021020:	0c14      	lsrs	r4, r2, #16
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0xFF00000000000000) >> 56 );
 1021022:	0e12      	lsrs	r2, r2, #24
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000000000FF0000) >> 16 );
 1021024:	f880 703a 	strb.w	r7, [r0, #58]	; 0x3a
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000FF000000) >> 24 );
 1021028:	f880 603b 	strb.w	r6, [r0, #59]	; 0x3b
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000FF0000000000) >> 40 );
 102102c:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00FF000000000000) >> 48 );
 1021030:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000000000FF) >> 0 );
 1021034:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0xFF00000000000000) >> 56 );
 1021038:	f880 203f 	strb.w	r2, [r0, #63]	; 0x3f
#endif


#if NBR_PHASES >= 3
	
	acc_quantity = VMetrology.DSP_ACC.I_C;
 102103c:	f8d3 1178 	ldr.w	r1, [r3, #376]	; 0x178
 1021040:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000000000FF) >> 0 );
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x000000000000FF00) >> 8 );
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000000000FF0000) >> 16 );
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000FF000000) >> 24 );
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x000000FF00000000) >> 32 );
 1021044:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x000000000000FF00) >> 8 );
 1021048:	0a0c      	lsrs	r4, r1, #8
 102104a:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000000000FF0000) >> 16 );
 102104e:	0c0f      	lsrs	r7, r1, #16
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000FF000000) >> 24 );
 1021050:	0e0e      	lsrs	r6, r1, #24
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000FF0000000000) >> 40 );
 1021052:	0a15      	lsrs	r5, r2, #8
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00FF000000000000) >> 48 );
 1021054:	0c14      	lsrs	r4, r2, #16
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0xFF00000000000000) >> 56 );
 1021056:	0e12      	lsrs	r2, r2, #24
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000000000FF0000) >> 16 );
 1021058:	f880 7042 	strb.w	r7, [r0, #66]	; 0x42
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000FF000000) >> 24 );
 102105c:	f880 6043 	strb.w	r6, [r0, #67]	; 0x43
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000FF0000000000) >> 40 );
 1021060:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00FF000000000000) >> 48 );
 1021064:	f880 4046 	strb.w	r4, [r0, #70]	; 0x46
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000000000FF) >> 0 );
 1021068:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0xFF00000000000000) >> 56 );
 102106c:	f880 2047 	strb.w	r2, [r0, #71]	; 0x47

	acc_quantity = VMetrology.DSP_ACC.V_C;
 1021070:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
 1021074:	f8d3 2284 	ldr.w	r2, [r3, #644]	; 0x284
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000000000FF) >> 0 );
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x000000000000FF00) >> 8 );
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000000000FF0000) >> 16 );
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000FF000000) >> 24 );
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x000000FF00000000) >> 32 );
 1021078:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x000000000000FF00) >> 8 );
 102107c:	0a0c      	lsrs	r4, r1, #8
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000000000FF0000) >> 16 );
 102107e:	0c0f      	lsrs	r7, r1, #16
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000FF000000) >> 24 );
 1021080:	0e0e      	lsrs	r6, r1, #24
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000FF0000000000) >> 40 );
 1021082:	0a15      	lsrs	r5, r2, #8
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x000000000000FF00) >> 8 );
 1021084:	f880 4049 	strb.w	r4, [r0, #73]	; 0x49
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00FF000000000000) >> 48 );
 1021088:	0c14      	lsrs	r4, r2, #16
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0xFF00000000000000) >> 56 );
 102108a:	0e12      	lsrs	r2, r2, #24
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000000000FF) >> 0 );
 102108c:	f880 1048 	strb.w	r1, [r0, #72]	; 0x48
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000000000FF0000) >> 16 );
 1021090:	f880 704a 	strb.w	r7, [r0, #74]	; 0x4a
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000FF000000) >> 24 );
 1021094:	f880 604b 	strb.w	r6, [r0, #75]	; 0x4b
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000FF0000000000) >> 40 );
 1021098:	f880 504d 	strb.w	r5, [r0, #77]	; 0x4d
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00FF000000000000) >> 48 );
 102109c:	f880 404e 	strb.w	r4, [r0, #78]	; 0x4e
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0xFF00000000000000) >> 56 );
 10210a0:	f880 204f 	strb.w	r2, [r0, #79]	; 0x4f

	acc_quantity = VMetrology.DSP_ACC.P_C;
 10210a4:	f8d3 11f0 	ldr.w	r1, [r3, #496]	; 0x1f0
 10210a8:	f8d3 21f4 	ldr.w	r2, [r3, #500]	; 0x1f4
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000000000FF) >> 0 );
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x000000000000FF00) >> 8 );
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000000000FF0000) >> 16 );
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000FF000000) >> 24 );
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x000000FF00000000) >> 32 );
 10210ac:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x000000000000FF00) >> 8 );
 10210b0:	0a0c      	lsrs	r4, r1, #8
 10210b2:	f880 4051 	strb.w	r4, [r0, #81]	; 0x51
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000000000FF0000) >> 16 );
 10210b6:	0c0f      	lsrs	r7, r1, #16
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000FF000000) >> 24 );
 10210b8:	0e0e      	lsrs	r6, r1, #24
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000FF0000000000) >> 40 );
 10210ba:	0a15      	lsrs	r5, r2, #8
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00FF000000000000) >> 48 );
 10210bc:	0c14      	lsrs	r4, r2, #16
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0xFF00000000000000) >> 56 );
 10210be:	0e12      	lsrs	r2, r2, #24
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000000000FF) >> 0 );
 10210c0:	f880 1050 	strb.w	r1, [r0, #80]	; 0x50
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000000000FF0000) >> 16 );
 10210c4:	f880 7052 	strb.w	r7, [r0, #82]	; 0x52
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000FF000000) >> 24 );
 10210c8:	f880 6053 	strb.w	r6, [r0, #83]	; 0x53
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000FF0000000000) >> 40 );
 10210cc:	f880 5055 	strb.w	r5, [r0, #85]	; 0x55
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00FF000000000000) >> 48 );
 10210d0:	f880 4056 	strb.w	r4, [r0, #86]	; 0x56
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0xFF00000000000000) >> 56 );
 10210d4:	f880 2057 	strb.w	r2, [r0, #87]	; 0x57

	acc_quantity = VMetrology.DSP_ACC.Q_C;
 10210d8:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 10210dc:	f8d3 323c 	ldr.w	r3, [r3, #572]	; 0x23c
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000000000FF) >> 0 );
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x000000000000FF00) >> 8 );
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000000000FF0000) >> 16 );
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000FF000000) >> 24 );
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x000000FF00000000) >> 32 );
 10210e0:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000FF0000000000) >> 40 );
 10210e4:	0a1c      	lsrs	r4, r3, #8
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x000000000000FF00) >> 8 );
 10210e6:	0a17      	lsrs	r7, r2, #8
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000000000FF0000) >> 16 );
 10210e8:	0c16      	lsrs	r6, r2, #16
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000FF000000) >> 24 );
 10210ea:	0e15      	lsrs	r5, r2, #24
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00FF000000000000) >> 48 );
 10210ec:	0c19      	lsrs	r1, r3, #16
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0xFF00000000000000) >> 56 );
 10210ee:	0e1b      	lsrs	r3, r3, #24
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000000000FF) >> 0 );
 10210f0:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x000000000000FF00) >> 8 );
 10210f4:	f880 7059 	strb.w	r7, [r0, #89]	; 0x59
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000000000FF0000) >> 16 );
 10210f8:	f880 605a 	strb.w	r6, [r0, #90]	; 0x5a
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00000000FF000000) >> 24 );
 10210fc:	f880 505b 	strb.w	r5, [r0, #91]	; 0x5b
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x0000FF0000000000) >> 40 );
 1021100:	f880 405d 	strb.w	r4, [r0, #93]	; 0x5d
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0x00FF000000000000) >> 48 );
 1021104:	f880 105e 	strb.w	r1, [r0, #94]	; 0x5e
	table_buffer[k++] = (uint8_t)( (acc_quantity & 0xFF00000000000000) >> 56 );
 1021108:	f880 305f 	strb.w	r3, [r0, #95]	; 0x5f

#endif	
	
	return true;	
}
 102110c:	bcf0      	pop	{r4, r5, r6, r7}
 102110e:	2001      	movs	r0, #1
 1021110:	4770      	bx	lr
 1021112:	bf00      	nop
 1021114:	20016770 	.word	0x20016770

01021118 <SM_APP_usMt_24_get_size>:
 ******************************************************************************
 */
uint16_t SM_APP_usMt_24_get_size(void) {

	return (uint16_t)MT_24_SIZE;
}
 1021118:	2060      	movs	r0, #96	; 0x60
 102111a:	4770      	bx	lr

0102111c <SM_APP_bMt_25_execute_table_reading>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bMt_25_execute_table_reading(uint8_t *table_buffer) {
 102111c:	b530      	push	{r4, r5, lr}
 102111e:	b083      	sub	sp, #12
 1021120:	4604      	mov	r4, r0
	uint8_t k = 0;
	uint32_t register_value;
	
#if NBR_PHASES >= 1

	EEPROM_reader(DSP_CTRL_CAL_M_IA_ADDR, &register_value, 4);
 1021122:	4d8b      	ldr	r5, [pc, #556]	; (1021350 <SM_APP_bMt_25_execute_table_reading+0x234>)
 1021124:	a901      	add	r1, sp, #4
 1021126:	2204      	movs	r2, #4
 1021128:	f44f 705f 	mov.w	r0, #892	; 0x37c
 102112c:	47a8      	blx	r5
	table_buffer[k++] = (uint8_t)( (register_value & 0x000000FF) >> 0 );
 102112e:	9b01      	ldr	r3, [sp, #4]
 1021130:	7023      	strb	r3, [r4, #0]
	table_buffer[k++] = (uint8_t)( (register_value & 0x0000FF00) >> 8 );
 1021132:	0a19      	lsrs	r1, r3, #8
	table_buffer[k++] = (uint8_t)( (register_value & 0x00FF0000) >> 16 );
 1021134:	0c1a      	lsrs	r2, r3, #16
	table_buffer[k++] = (uint8_t)( (register_value & 0xFF000000) >> 24 );
 1021136:	0e1b      	lsrs	r3, r3, #24
	table_buffer[k++] = (uint8_t)( (register_value & 0x0000FF00) >> 8 );
 1021138:	7061      	strb	r1, [r4, #1]
	table_buffer[k++] = (uint8_t)( (register_value & 0x00FF0000) >> 16 );
 102113a:	70a2      	strb	r2, [r4, #2]
	table_buffer[k++] = (uint8_t)( (register_value & 0xFF000000) >> 24 );
 102113c:	70e3      	strb	r3, [r4, #3]

	EEPROM_reader(DSP_CTRL_CAL_M_VA_ADDR, &register_value, 4);
 102113e:	a901      	add	r1, sp, #4
 1021140:	2204      	movs	r2, #4
 1021142:	f44f 7060 	mov.w	r0, #896	; 0x380
 1021146:	47a8      	blx	r5
	table_buffer[k++] = (uint8_t)( (register_value & 0x000000FF) >> 0 );
 1021148:	9b01      	ldr	r3, [sp, #4]
 102114a:	7123      	strb	r3, [r4, #4]
	table_buffer[k++] = (uint8_t)( (register_value & 0x0000FF00) >> 8 );
 102114c:	0a19      	lsrs	r1, r3, #8
	table_buffer[k++] = (uint8_t)( (register_value & 0x00FF0000) >> 16 );
 102114e:	0c1a      	lsrs	r2, r3, #16
	table_buffer[k++] = (uint8_t)( (register_value & 0xFF000000) >> 24 );
 1021150:	0e1b      	lsrs	r3, r3, #24
	table_buffer[k++] = (uint8_t)( (register_value & 0x0000FF00) >> 8 );
 1021152:	7161      	strb	r1, [r4, #5]
	table_buffer[k++] = (uint8_t)( (register_value & 0x00FF0000) >> 16 );
 1021154:	71a2      	strb	r2, [r4, #6]
	table_buffer[k++] = (uint8_t)( (register_value & 0xFF000000) >> 24 );
 1021156:	71e3      	strb	r3, [r4, #7]

	EEPROM_reader(DSP_CTRL_CAL_PH_IA_ADDR, &register_value, 4);
 1021158:	a901      	add	r1, sp, #4
 102115a:	2204      	movs	r2, #4
 102115c:	f44f 7066 	mov.w	r0, #920	; 0x398
 1021160:	47a8      	blx	r5
	table_buffer[k++] = (uint8_t)( (register_value & 0x000000FF) >> 0 );
 1021162:	9b01      	ldr	r3, [sp, #4]
 1021164:	7223      	strb	r3, [r4, #8]
	table_buffer[k++] = (uint8_t)( (register_value & 0x0000FF00) >> 8 );
 1021166:	0a19      	lsrs	r1, r3, #8
	table_buffer[k++] = (uint8_t)( (register_value & 0x00FF0000) >> 16 );
 1021168:	0c1a      	lsrs	r2, r3, #16
	table_buffer[k++] = (uint8_t)( (register_value & 0xFF000000) >> 24 );
 102116a:	0e1b      	lsrs	r3, r3, #24
	table_buffer[k++] = (uint8_t)( (register_value & 0x0000FF00) >> 8 );
 102116c:	7261      	strb	r1, [r4, #9]
	table_buffer[k++] = (uint8_t)( (register_value & 0x00FF0000) >> 16 );
 102116e:	72a2      	strb	r2, [r4, #10]
	table_buffer[k++] = (uint8_t)( (register_value & 0xFF000000) >> 24 );
 1021170:	72e3      	strb	r3, [r4, #11]

	EEPROM_reader(DSP_CTRL_CAL_M_IA_COPY_ADDR, &register_value, 4);
 1021172:	a901      	add	r1, sp, #4
 1021174:	2204      	movs	r2, #4
 1021176:	f44f 7077 	mov.w	r0, #988	; 0x3dc
 102117a:	47a8      	blx	r5
	table_buffer[k++] = (uint8_t)( (register_value & 0x000000FF) >> 0 );
 102117c:	9b01      	ldr	r3, [sp, #4]
 102117e:	7323      	strb	r3, [r4, #12]
	table_buffer[k++] = (uint8_t)( (register_value & 0x0000FF00) >> 8 );
 1021180:	0a19      	lsrs	r1, r3, #8
	table_buffer[k++] = (uint8_t)( (register_value & 0x00FF0000) >> 16 );
 1021182:	0c1a      	lsrs	r2, r3, #16
	table_buffer[k++] = (uint8_t)( (register_value & 0xFF000000) >> 24 );
 1021184:	0e1b      	lsrs	r3, r3, #24
	table_buffer[k++] = (uint8_t)( (register_value & 0x0000FF00) >> 8 );
 1021186:	7361      	strb	r1, [r4, #13]
	table_buffer[k++] = (uint8_t)( (register_value & 0x00FF0000) >> 16 );
 1021188:	73a2      	strb	r2, [r4, #14]
	table_buffer[k++] = (uint8_t)( (register_value & 0xFF000000) >> 24 );
 102118a:	73e3      	strb	r3, [r4, #15]

	EEPROM_reader(DSP_CTRL_CAL_M_VA_COPY_ADDR, &register_value, 4);
 102118c:	a901      	add	r1, sp, #4
 102118e:	2204      	movs	r2, #4
 1021190:	f44f 7078 	mov.w	r0, #992	; 0x3e0
 1021194:	47a8      	blx	r5
	table_buffer[k++] = (uint8_t)( (register_value & 0x000000FF) >> 0 );
 1021196:	9b01      	ldr	r3, [sp, #4]
 1021198:	7423      	strb	r3, [r4, #16]
	table_buffer[k++] = (uint8_t)( (register_value & 0x0000FF00) >> 8 );
 102119a:	0a19      	lsrs	r1, r3, #8
	table_buffer[k++] = (uint8_t)( (register_value & 0x00FF0000) >> 16 );
 102119c:	0c1a      	lsrs	r2, r3, #16
	table_buffer[k++] = (uint8_t)( (register_value & 0xFF000000) >> 24 );
 102119e:	0e1b      	lsrs	r3, r3, #24
	table_buffer[k++] = (uint8_t)( (register_value & 0x0000FF00) >> 8 );
 10211a0:	7461      	strb	r1, [r4, #17]
	table_buffer[k++] = (uint8_t)( (register_value & 0x00FF0000) >> 16 );
 10211a2:	74a2      	strb	r2, [r4, #18]
	table_buffer[k++] = (uint8_t)( (register_value & 0xFF000000) >> 24 );
 10211a4:	74e3      	strb	r3, [r4, #19]

	EEPROM_reader(DSP_CTRL_CAL_PH_IA_COPY_ADDR, &register_value, 4);
 10211a6:	a901      	add	r1, sp, #4
 10211a8:	2204      	movs	r2, #4
 10211aa:	f44f 7079 	mov.w	r0, #996	; 0x3e4
 10211ae:	47a8      	blx	r5
	table_buffer[k++] = (uint8_t)( (register_value & 0x000000FF) >> 0 );
 10211b0:	9b01      	ldr	r3, [sp, #4]
 10211b2:	7523      	strb	r3, [r4, #20]
	table_buffer[k++] = (uint8_t)( (register_value & 0x0000FF00) >> 8 );
 10211b4:	0a19      	lsrs	r1, r3, #8
	table_buffer[k++] = (uint8_t)( (register_value & 0x00FF0000) >> 16 );
 10211b6:	0c1a      	lsrs	r2, r3, #16
	table_buffer[k++] = (uint8_t)( (register_value & 0xFF000000) >> 24 );
 10211b8:	0e1b      	lsrs	r3, r3, #24
	table_buffer[k++] = (uint8_t)( (register_value & 0x0000FF00) >> 8 );
 10211ba:	7561      	strb	r1, [r4, #21]
	table_buffer[k++] = (uint8_t)( (register_value & 0x00FF0000) >> 16 );
 10211bc:	75a2      	strb	r2, [r4, #22]
	table_buffer[k++] = (uint8_t)( (register_value & 0xFF000000) >> 24 );
 10211be:	75e3      	strb	r3, [r4, #23]

#endif

#if NBR_PHASES >= 2
	
	EEPROM_reader(DSP_CTRL_CAL_M_IB_ADDR, &register_value, 4);
 10211c0:	a901      	add	r1, sp, #4
 10211c2:	2204      	movs	r2, #4
 10211c4:	f44f 7061 	mov.w	r0, #900	; 0x384
 10211c8:	47a8      	blx	r5
	table_buffer[k++] = (uint8_t)( (register_value & 0x000000FF) >> 0 );
 10211ca:	9b01      	ldr	r3, [sp, #4]
 10211cc:	7623      	strb	r3, [r4, #24]
	table_buffer[k++] = (uint8_t)( (register_value & 0x0000FF00) >> 8 );
 10211ce:	0a19      	lsrs	r1, r3, #8
	table_buffer[k++] = (uint8_t)( (register_value & 0x00FF0000) >> 16 );
 10211d0:	0c1a      	lsrs	r2, r3, #16
	table_buffer[k++] = (uint8_t)( (register_value & 0xFF000000) >> 24 );
 10211d2:	0e1b      	lsrs	r3, r3, #24
	table_buffer[k++] = (uint8_t)( (register_value & 0x0000FF00) >> 8 );
 10211d4:	7661      	strb	r1, [r4, #25]
	table_buffer[k++] = (uint8_t)( (register_value & 0x00FF0000) >> 16 );
 10211d6:	76a2      	strb	r2, [r4, #26]
	table_buffer[k++] = (uint8_t)( (register_value & 0xFF000000) >> 24 );
 10211d8:	76e3      	strb	r3, [r4, #27]

	EEPROM_reader(DSP_CTRL_CAL_M_VB_ADDR, &register_value, 4);
 10211da:	a901      	add	r1, sp, #4
 10211dc:	2204      	movs	r2, #4
 10211de:	f44f 7062 	mov.w	r0, #904	; 0x388
 10211e2:	47a8      	blx	r5
	table_buffer[k++] = (uint8_t)( (register_value & 0x000000FF) >> 0 );
 10211e4:	9b01      	ldr	r3, [sp, #4]
 10211e6:	7723      	strb	r3, [r4, #28]
	table_buffer[k++] = (uint8_t)( (register_value & 0x0000FF00) >> 8 );
 10211e8:	0a19      	lsrs	r1, r3, #8
	table_buffer[k++] = (uint8_t)( (register_value & 0x00FF0000) >> 16 );
 10211ea:	0c1a      	lsrs	r2, r3, #16
	table_buffer[k++] = (uint8_t)( (register_value & 0xFF000000) >> 24 );
 10211ec:	0e1b      	lsrs	r3, r3, #24
	table_buffer[k++] = (uint8_t)( (register_value & 0x0000FF00) >> 8 );
 10211ee:	7761      	strb	r1, [r4, #29]
	table_buffer[k++] = (uint8_t)( (register_value & 0x00FF0000) >> 16 );
 10211f0:	77a2      	strb	r2, [r4, #30]
	table_buffer[k++] = (uint8_t)( (register_value & 0xFF000000) >> 24 );
 10211f2:	77e3      	strb	r3, [r4, #31]

	EEPROM_reader(DSP_CTRL_CAL_PH_IB_ADDR, &register_value, 4);
 10211f4:	a901      	add	r1, sp, #4
 10211f6:	2204      	movs	r2, #4
 10211f8:	f44f 7068 	mov.w	r0, #928	; 0x3a0
 10211fc:	47a8      	blx	r5
	table_buffer[k++] = (uint8_t)( (register_value & 0x000000FF) >> 0 );
 10211fe:	9b01      	ldr	r3, [sp, #4]
 1021200:	f884 3020 	strb.w	r3, [r4, #32]
	table_buffer[k++] = (uint8_t)( (register_value & 0x0000FF00) >> 8 );
 1021204:	0a19      	lsrs	r1, r3, #8
	table_buffer[k++] = (uint8_t)( (register_value & 0x00FF0000) >> 16 );
 1021206:	0c1a      	lsrs	r2, r3, #16
	table_buffer[k++] = (uint8_t)( (register_value & 0xFF000000) >> 24 );
 1021208:	0e1b      	lsrs	r3, r3, #24
	table_buffer[k++] = (uint8_t)( (register_value & 0x0000FF00) >> 8 );
 102120a:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
	table_buffer[k++] = (uint8_t)( (register_value & 0x00FF0000) >> 16 );
 102120e:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
	table_buffer[k++] = (uint8_t)( (register_value & 0xFF000000) >> 24 );
 1021212:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23

	EEPROM_reader(DSP_CTRL_CAL_M_IB_COPY_ADDR, &register_value, 4);
 1021216:	a901      	add	r1, sp, #4
 1021218:	2204      	movs	r2, #4
 102121a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 102121e:	47a8      	blx	r5
	table_buffer[k++] = (uint8_t)( (register_value & 0x000000FF) >> 0 );
 1021220:	9b01      	ldr	r3, [sp, #4]
 1021222:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	table_buffer[k++] = (uint8_t)( (register_value & 0x0000FF00) >> 8 );
 1021226:	0a19      	lsrs	r1, r3, #8
	table_buffer[k++] = (uint8_t)( (register_value & 0x00FF0000) >> 16 );
 1021228:	0c1a      	lsrs	r2, r3, #16
	table_buffer[k++] = (uint8_t)( (register_value & 0xFF000000) >> 24 );
 102122a:	0e1b      	lsrs	r3, r3, #24
	table_buffer[k++] = (uint8_t)( (register_value & 0x0000FF00) >> 8 );
 102122c:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
	table_buffer[k++] = (uint8_t)( (register_value & 0x00FF0000) >> 16 );
 1021230:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
	table_buffer[k++] = (uint8_t)( (register_value & 0xFF000000) >> 24 );
 1021234:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27

	EEPROM_reader(DSP_CTRL_CAL_M_VB_COPY_ADDR, &register_value, 4);
 1021238:	a901      	add	r1, sp, #4
 102123a:	2204      	movs	r2, #4
 102123c:	f44f 707b 	mov.w	r0, #1004	; 0x3ec
 1021240:	47a8      	blx	r5
	table_buffer[k++] = (uint8_t)( (register_value & 0x000000FF) >> 0 );
 1021242:	9b01      	ldr	r3, [sp, #4]
 1021244:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	table_buffer[k++] = (uint8_t)( (register_value & 0x0000FF00) >> 8 );
 1021248:	0a19      	lsrs	r1, r3, #8
	table_buffer[k++] = (uint8_t)( (register_value & 0x00FF0000) >> 16 );
 102124a:	0c1a      	lsrs	r2, r3, #16
	table_buffer[k++] = (uint8_t)( (register_value & 0xFF000000) >> 24 );
 102124c:	0e1b      	lsrs	r3, r3, #24
	table_buffer[k++] = (uint8_t)( (register_value & 0x0000FF00) >> 8 );
 102124e:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
	table_buffer[k++] = (uint8_t)( (register_value & 0x00FF0000) >> 16 );
 1021252:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
	table_buffer[k++] = (uint8_t)( (register_value & 0xFF000000) >> 24 );
 1021256:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b

	EEPROM_reader(DSP_CTRL_CAL_PH_IB_COPY_ADDR, &register_value, 4);
 102125a:	a901      	add	r1, sp, #4
 102125c:	2204      	movs	r2, #4
 102125e:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
 1021262:	47a8      	blx	r5
	table_buffer[k++] = (uint8_t)( (register_value & 0x000000FF) >> 0 );
 1021264:	9b01      	ldr	r3, [sp, #4]
 1021266:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	table_buffer[k++] = (uint8_t)( (register_value & 0x0000FF00) >> 8 );
 102126a:	0a19      	lsrs	r1, r3, #8
	table_buffer[k++] = (uint8_t)( (register_value & 0x00FF0000) >> 16 );
 102126c:	0c1a      	lsrs	r2, r3, #16
	table_buffer[k++] = (uint8_t)( (register_value & 0xFF000000) >> 24 );
 102126e:	0e1b      	lsrs	r3, r3, #24
	table_buffer[k++] = (uint8_t)( (register_value & 0x0000FF00) >> 8 );
 1021270:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
	table_buffer[k++] = (uint8_t)( (register_value & 0x00FF0000) >> 16 );
 1021274:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
	table_buffer[k++] = (uint8_t)( (register_value & 0xFF000000) >> 24 );
 1021278:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	 
#endif

#if NBR_PHASES >= 3
	
	EEPROM_reader(DSP_CTRL_CAL_M_IC_ADDR, &register_value, 4);
 102127c:	a901      	add	r1, sp, #4
 102127e:	2204      	movs	r2, #4
 1021280:	f44f 7063 	mov.w	r0, #908	; 0x38c
 1021284:	47a8      	blx	r5
	table_buffer[k++] = (uint8_t)( (register_value & 0x000000FF) >> 0 );
 1021286:	9b01      	ldr	r3, [sp, #4]
 1021288:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	table_buffer[k++] = (uint8_t)( (register_value & 0x0000FF00) >> 8 );
 102128c:	0a19      	lsrs	r1, r3, #8
	table_buffer[k++] = (uint8_t)( (register_value & 0x00FF0000) >> 16 );
 102128e:	0c1a      	lsrs	r2, r3, #16
	table_buffer[k++] = (uint8_t)( (register_value & 0xFF000000) >> 24 );
 1021290:	0e1b      	lsrs	r3, r3, #24
	table_buffer[k++] = (uint8_t)( (register_value & 0x0000FF00) >> 8 );
 1021292:	f884 1031 	strb.w	r1, [r4, #49]	; 0x31
	table_buffer[k++] = (uint8_t)( (register_value & 0x00FF0000) >> 16 );
 1021296:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
	table_buffer[k++] = (uint8_t)( (register_value & 0xFF000000) >> 24 );
 102129a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33

	EEPROM_reader(DSP_CTRL_CAL_M_VC_ADDR, &register_value, 4);
 102129e:	a901      	add	r1, sp, #4
 10212a0:	2204      	movs	r2, #4
 10212a2:	f44f 7064 	mov.w	r0, #912	; 0x390
 10212a6:	47a8      	blx	r5
	table_buffer[k++] = (uint8_t)( (register_value & 0x000000FF) >> 0 );
 10212a8:	9b01      	ldr	r3, [sp, #4]
 10212aa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	table_buffer[k++] = (uint8_t)( (register_value & 0x0000FF00) >> 8 );
 10212ae:	0a19      	lsrs	r1, r3, #8
	table_buffer[k++] = (uint8_t)( (register_value & 0x00FF0000) >> 16 );
 10212b0:	0c1a      	lsrs	r2, r3, #16
	table_buffer[k++] = (uint8_t)( (register_value & 0xFF000000) >> 24 );
 10212b2:	0e1b      	lsrs	r3, r3, #24
	table_buffer[k++] = (uint8_t)( (register_value & 0x0000FF00) >> 8 );
 10212b4:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
	table_buffer[k++] = (uint8_t)( (register_value & 0x00FF0000) >> 16 );
 10212b8:	f884 2036 	strb.w	r2, [r4, #54]	; 0x36
	table_buffer[k++] = (uint8_t)( (register_value & 0xFF000000) >> 24 );
 10212bc:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37

	EEPROM_reader(DSP_CTRL_CAL_PH_IC_ADDR, &register_value, 4);
 10212c0:	a901      	add	r1, sp, #4
 10212c2:	2204      	movs	r2, #4
 10212c4:	f44f 706a 	mov.w	r0, #936	; 0x3a8
 10212c8:	47a8      	blx	r5
	table_buffer[k++] = (uint8_t)( (register_value & 0x000000FF) >> 0 );
 10212ca:	9b01      	ldr	r3, [sp, #4]
 10212cc:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	table_buffer[k++] = (uint8_t)( (register_value & 0x0000FF00) >> 8 );
 10212d0:	0a19      	lsrs	r1, r3, #8
	table_buffer[k++] = (uint8_t)( (register_value & 0x00FF0000) >> 16 );
 10212d2:	0c1a      	lsrs	r2, r3, #16
	table_buffer[k++] = (uint8_t)( (register_value & 0xFF000000) >> 24 );
 10212d4:	0e1b      	lsrs	r3, r3, #24
	table_buffer[k++] = (uint8_t)( (register_value & 0x0000FF00) >> 8 );
 10212d6:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	table_buffer[k++] = (uint8_t)( (register_value & 0x00FF0000) >> 16 );
 10212da:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
	table_buffer[k++] = (uint8_t)( (register_value & 0xFF000000) >> 24 );
 10212de:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b

	EEPROM_reader(DSP_CTRL_CAL_M_IC_COPY_ADDR, &register_value, 4);
 10212e2:	a901      	add	r1, sp, #4
 10212e4:	2204      	movs	r2, #4
 10212e6:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
 10212ea:	47a8      	blx	r5
	table_buffer[k++] = (uint8_t)( (register_value & 0x000000FF) >> 0 );
 10212ec:	9b01      	ldr	r3, [sp, #4]
 10212ee:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	table_buffer[k++] = (uint8_t)( (register_value & 0x0000FF00) >> 8 );
 10212f2:	0a19      	lsrs	r1, r3, #8
	table_buffer[k++] = (uint8_t)( (register_value & 0x00FF0000) >> 16 );
 10212f4:	0c1a      	lsrs	r2, r3, #16
	table_buffer[k++] = (uint8_t)( (register_value & 0xFF000000) >> 24 );
 10212f6:	0e1b      	lsrs	r3, r3, #24
	table_buffer[k++] = (uint8_t)( (register_value & 0x0000FF00) >> 8 );
 10212f8:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
	table_buffer[k++] = (uint8_t)( (register_value & 0x00FF0000) >> 16 );
 10212fc:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
	table_buffer[k++] = (uint8_t)( (register_value & 0xFF000000) >> 24 );
 1021300:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f

	EEPROM_reader(DSP_CTRL_CAL_M_VC_COPY_ADDR, &register_value, 4);
 1021304:	a901      	add	r1, sp, #4
 1021306:	2204      	movs	r2, #4
 1021308:	f44f 707e 	mov.w	r0, #1016	; 0x3f8
 102130c:	47a8      	blx	r5
	table_buffer[k++] = (uint8_t)( (register_value & 0x000000FF) >> 0 );
 102130e:	9b01      	ldr	r3, [sp, #4]
 1021310:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
	table_buffer[k++] = (uint8_t)( (register_value & 0x0000FF00) >> 8 );
 1021314:	0a18      	lsrs	r0, r3, #8
	table_buffer[k++] = (uint8_t)( (register_value & 0x00FF0000) >> 16 );
 1021316:	0c1a      	lsrs	r2, r3, #16
	table_buffer[k++] = (uint8_t)( (register_value & 0xFF000000) >> 24 );
 1021318:	0e1b      	lsrs	r3, r3, #24

	EEPROM_reader(DSP_CTRL_CAL_PH_IC_COPY_ADDR, &register_value, 4);
 102131a:	a901      	add	r1, sp, #4
	table_buffer[k++] = (uint8_t)( (register_value & 0x0000FF00) >> 8 );
 102131c:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
	table_buffer[k++] = (uint8_t)( (register_value & 0x00FF0000) >> 16 );
 1021320:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
	table_buffer[k++] = (uint8_t)( (register_value & 0xFF000000) >> 24 );
 1021324:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	EEPROM_reader(DSP_CTRL_CAL_PH_IC_COPY_ADDR, &register_value, 4);
 1021328:	2204      	movs	r2, #4
 102132a:	f44f 707f 	mov.w	r0, #1020	; 0x3fc
 102132e:	47a8      	blx	r5
	table_buffer[k++] = (uint8_t)( (register_value & 0x000000FF) >> 0 );
 1021330:	9b01      	ldr	r3, [sp, #4]
 1021332:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	table_buffer[k++] = (uint8_t)( (register_value & 0x0000FF00) >> 8 );
 1021336:	0a19      	lsrs	r1, r3, #8
	table_buffer[k++] = (uint8_t)( (register_value & 0x00FF0000) >> 16 );
 1021338:	0c1a      	lsrs	r2, r3, #16
	table_buffer[k++] = (uint8_t)( (register_value & 0xFF000000) >> 24 );

#endif

	return true;	
}
 102133a:	2001      	movs	r0, #1
	table_buffer[k++] = (uint8_t)( (register_value & 0xFF000000) >> 24 );
 102133c:	0e1b      	lsrs	r3, r3, #24
	table_buffer[k++] = (uint8_t)( (register_value & 0x0000FF00) >> 8 );
 102133e:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
	table_buffer[k++] = (uint8_t)( (register_value & 0x00FF0000) >> 16 );
 1021342:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
	table_buffer[k++] = (uint8_t)( (register_value & 0xFF000000) >> 24 );
 1021346:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
}
 102134a:	b003      	add	sp, #12
 102134c:	bd30      	pop	{r4, r5, pc}
 102134e:	bf00      	nop
 1021350:	01017511 	.word	0x01017511

01021354 <SM_APP_usMt_25_get_size>:
 ******************************************************************************
 */
uint16_t SM_APP_usMt_25_get_size(void) {

	return (uint16_t)MT_25_SIZE;
}
 1021354:	2048      	movs	r0, #72	; 0x48
 1021356:	4770      	bx	lr

01021358 <SM_APP_vExecute_mfg_service>:
 */
void SM_APP_vExecute_mfg_service(C1218_DLL_TYPE *c1218_dll_ptr) {
	
	uint16_t task_id;
	
	if ( c1218_dll_ptr->rx_eop == true ) {
 1021358:	79c3      	ldrb	r3, [r0, #7]
 102135a:	b18b      	cbz	r3, 1021380 <SM_APP_vExecute_mfg_service+0x28>
		
		if ( (c1218_dll_ptr->rx_buffer[C1218_IDENTITY_INDEX] == 0) && (c1218_dll_ptr->rx_error == 0) ) {
 102135c:	7d43      	ldrb	r3, [r0, #21]
 102135e:	b97b      	cbnz	r3, 1021380 <SM_APP_vExecute_mfg_service+0x28>
 1021360:	7983      	ldrb	r3, [r0, #6]
 1021362:	b96b      	cbnz	r3, 1021380 <SM_APP_vExecute_mfg_service+0x28>
		
			switch ( c1218_dll_ptr->rx_data[SERVICE_INDEX] ) {
 1021364:	6883      	ldr	r3, [r0, #8]
 1021366:	781a      	ldrb	r2, [r3, #0]
 1021368:	2aff      	cmp	r2, #255	; 0xff
 102136a:	d109      	bne.n	1021380 <SM_APP_vExecute_mfg_service+0x28>
void SM_APP_vExecute_mfg_service(C1218_DLL_TYPE *c1218_dll_ptr) {
 102136c:	b510      	push	{r4, lr}
				 case 0xFF:
					
					task_id  = (uint16_t)(c1218_dll_ptr->rx_data[SERVICE_INDEX + 1] << 0);
					task_id |= (uint16_t)(c1218_dll_ptr->rx_data[SERVICE_INDEX + 2] << 8);
					
					switch ( task_id ) {
 102136e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 1021372:	4604      	mov	r4, r0
 1021374:	2b03      	cmp	r3, #3
 1021376:	d808      	bhi.n	102138a <SM_APP_vExecute_mfg_service+0x32>
 1021378:	e8df f003 	tbb	[pc, r3]
 102137c:	03080d12 	.word	0x03080d12
 1021380:	4770      	bx	lr
							OP_initialize();
							c1218_dll_ptr->rx_eop = false;
							break;
							
						case 0x03:
							I2C_HAL_vInitialize();
 1021382:	4b0a      	ldr	r3, [pc, #40]	; (10213ac <SM_APP_vExecute_mfg_service+0x54>)
 1021384:	4798      	blx	r3
							c1218_dll_ptr->rx_eop = false;
 1021386:	2300      	movs	r3, #0
 1021388:	71e3      	strb	r3, [r4, #7]
 102138a:	bd10      	pop	{r4, pc}
							OP_initialize();
 102138c:	4b08      	ldr	r3, [pc, #32]	; (10213b0 <SM_APP_vExecute_mfg_service+0x58>)
 102138e:	4798      	blx	r3
							c1218_dll_ptr->rx_eop = false;
 1021390:	2300      	movs	r3, #0
 1021392:	71e3      	strb	r3, [r4, #7]
							break;
 1021394:	bd10      	pop	{r4, pc}
							NIC_initialize();
 1021396:	4b07      	ldr	r3, [pc, #28]	; (10213b4 <SM_APP_vExecute_mfg_service+0x5c>)
 1021398:	4798      	blx	r3
							c1218_dll_ptr->rx_eop = false;
 102139a:	2300      	movs	r3, #0
 102139c:	71e3      	strb	r3, [r4, #7]
							break;
 102139e:	bd10      	pop	{r4, pc}
							RST_HAL_vExecute_software_reset();
 10213a0:	4b05      	ldr	r3, [pc, #20]	; (10213b8 <SM_APP_vExecute_mfg_service+0x60>)
 10213a2:	4798      	blx	r3
							c1218_dll_ptr->rx_eop = false;
 10213a4:	2300      	movs	r3, #0
 10213a6:	71e3      	strb	r3, [r4, #7]
							break;
 10213a8:	bd10      	pop	{r4, pc}
 10213aa:	bf00      	nop
 10213ac:	01015519 	.word	0x01015519
 10213b0:	01024371 	.word	0x01024371
 10213b4:	01024b5d 	.word	0x01024b5d
 10213b8:	010159a1 	.word	0x010159a1

010213bc <SM_APP_ucGet_nonvol_mem_state>:
 *                 2 : EEPROM 1 Failure, EPPROM 2 Ok 
 *                 1 : EEPROM 1 Ok, EPPROM 2 Failure 					
 *                 0 : Failure
 ******************************************************************************
 */
uint8_t SM_APP_ucGet_nonvol_mem_state(void) {
 10213bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 10213be:	b083      	sub	sp, #12
	
	uint8_t test_byte = 0;
	uint8_t byte_compare = 0;
	uint8_t eeprom_ok = 0;
	
	test_byte = TEST_BYTE;
 10213c0:	ac02      	add	r4, sp, #8
 10213c2:	23aa      	movs	r3, #170	; 0xaa
 10213c4:	f804 3d02 	strb.w	r3, [r4, #-2]!
	uint8_t byte_compare = 0;
 10213c8:	2700      	movs	r7, #0
			
	EEPROM_writer( LAST_EEPROM_1_ADDR, &test_byte, 1);
 10213ca:	4621      	mov	r1, r4
 10213cc:	4e13      	ldr	r6, [pc, #76]	; (102141c <SM_APP_ucGet_nonvol_mem_state+0x60>)
 10213ce:	4814      	ldr	r0, [pc, #80]	; (1021420 <SM_APP_ucGet_nonvol_mem_state+0x64>)
	EEPROM_reader( LAST_EEPROM_1_ADDR, &byte_compare, 1);
 10213d0:	4d14      	ldr	r5, [pc, #80]	; (1021424 <SM_APP_ucGet_nonvol_mem_state+0x68>)
	uint8_t byte_compare = 0;
 10213d2:	f88d 7007 	strb.w	r7, [sp, #7]
	EEPROM_writer( LAST_EEPROM_1_ADDR, &test_byte, 1);
 10213d6:	2201      	movs	r2, #1
 10213d8:	47b0      	blx	r6
	EEPROM_reader( LAST_EEPROM_1_ADDR, &byte_compare, 1);
 10213da:	f10d 0107 	add.w	r1, sp, #7
 10213de:	2201      	movs	r2, #1
 10213e0:	480f      	ldr	r0, [pc, #60]	; (1021420 <SM_APP_ucGet_nonvol_mem_state+0x64>)
 10213e2:	47a8      	blx	r5
			
	if ( byte_compare == TEST_BYTE ) {
 10213e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
	else {
		eeprom_ok |= 0;
	}
			
	byte_compare = 0;
	EEPROM_writer( LAST_EEPROM_2_ADDR, &test_byte, 1);
 10213e8:	480f      	ldr	r0, [pc, #60]	; (1021428 <SM_APP_ucGet_nonvol_mem_state+0x6c>)
	byte_compare = 0;
 10213ea:	f88d 7007 	strb.w	r7, [sp, #7]
	EEPROM_writer( LAST_EEPROM_2_ADDR, &test_byte, 1);
 10213ee:	4621      	mov	r1, r4
 10213f0:	2201      	movs	r2, #1
		eeprom_ok |= EEPROM_1_BM;
 10213f2:	f1a3 04aa 	sub.w	r4, r3, #170	; 0xaa
	EEPROM_writer( LAST_EEPROM_2_ADDR, &test_byte, 1);
 10213f6:	47b0      	blx	r6
	EEPROM_reader( LAST_EEPROM_2_ADDR, &byte_compare, 1);
 10213f8:	f10d 0107 	add.w	r1, sp, #7
 10213fc:	2201      	movs	r2, #1
 10213fe:	480a      	ldr	r0, [pc, #40]	; (1021428 <SM_APP_ucGet_nonvol_mem_state+0x6c>)
 1021400:	47a8      	blx	r5
			
	if ( byte_compare == TEST_BYTE ) {
 1021402:	f89d 3007 	ldrb.w	r3, [sp, #7]
		eeprom_ok |= EEPROM_1_BM;
 1021406:	fab4 f484 	clz	r4, r4
 102140a:	0964      	lsrs	r4, r4, #5
	if ( byte_compare == TEST_BYTE ) {
 102140c:	2baa      	cmp	r3, #170	; 0xaa
		eeprom_ok |= EEPROM_2_BM;
 102140e:	bf08      	it	eq
 1021410:	f044 0402 	orreq.w	r4, r4, #2
	if ( eeprom_ok != EEPROM_TEST_SUCCESFULL ) {
		
	}
	
	return eeprom_ok;
}
 1021414:	4620      	mov	r0, r4
 1021416:	b003      	add	sp, #12
 1021418:	bdf0      	pop	{r4, r5, r6, r7, pc}
 102141a:	bf00      	nop
 102141c:	01017509 	.word	0x01017509
 1021420:	0003ffff 	.word	0x0003ffff
 1021424:	01017511 	.word	0x01017511
 1021428:	0007ffff 	.word	0x0007ffff

0102142c <SM_APP_vTask>:
void SM_APP_vTask(void *pvParameters) {
 102142c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1021430:	4ca4      	ldr	r4, [pc, #656]	; (10216c4 <SM_APP_vTask+0x298>)
 1021432:	f8df b2ec 	ldr.w	fp, [pc, #748]	; 1021720 <SM_APP_vTask+0x2f4>
 1021436:	f8df a2ec 	ldr.w	sl, [pc, #748]	; 1021724 <SM_APP_vTask+0x2f8>
 102143a:	4da3      	ldr	r5, [pc, #652]	; (10216c8 <SM_APP_vTask+0x29c>)
 102143c:	4ea3      	ldr	r6, [pc, #652]	; (10216cc <SM_APP_vTask+0x2a0>)
 102143e:	f8df 92e8 	ldr.w	r9, [pc, #744]	; 1021728 <SM_APP_vTask+0x2fc>
 1021442:	b083      	sub	sp, #12
		if ( !meter.power_failure ) {
 1021444:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 1021448:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 102144c:	2b00      	cmp	r3, #0
 102144e:	d1f9      	bne.n	1021444 <SM_APP_vTask+0x18>
			if ( meter_os.test_mode_expired ) {
 1021450:	4b9f      	ldr	r3, [pc, #636]	; (10216d0 <SM_APP_vTask+0x2a4>)
 1021452:	785b      	ldrb	r3, [r3, #1]
 1021454:	2b00      	cmp	r3, #0
 1021456:	f040 8121 	bne.w	102169c <SM_APP_vTask+0x270>
			if ( nic_c1218_apl.logon_session_expired ) {
 102145a:	4b9e      	ldr	r3, [pc, #632]	; (10216d4 <SM_APP_vTask+0x2a8>)
 102145c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 1021460:	2b00      	cmp	r3, #0
 1021462:	f040 80f5 	bne.w	1021650 <SM_APP_vTask+0x224>
			if ( op_c1218_apl.logon_session_expired ) {
 1021466:	4b9c      	ldr	r3, [pc, #624]	; (10216d8 <SM_APP_vTask+0x2ac>)
 1021468:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 102146c:	2b00      	cmp	r3, #0
 102146e:	f040 80c9 	bne.w	1021604 <SM_APP_vTask+0x1d8>
	if ( TIMER_is_ms_timer_expired(IO_MCU_CONFIG_TIMER) ) {
 1021472:	200b      	movs	r0, #11
 1021474:	4b99      	ldr	r3, [pc, #612]	; (10216dc <SM_APP_vTask+0x2b0>)
 1021476:	4798      	blx	r3
 1021478:	2800      	cmp	r0, #0
 102147a:	f040 80a9 	bne.w	10215d0 <SM_APP_vTask+0x1a4>
			WATCHDOG_APP_vRestart();
 102147e:	47a8      	blx	r5
	voltage = (uint32_t)METROLOGY_APP_dGet_instantaneous_value(V_A_ID);
 1021480:	200c      	movs	r0, #12
 1021482:	47b0      	blx	r6
 1021484:	47c8      	blx	r9
	if ( voltage > 0 ) {
 1021486:	4680      	mov	r8, r0
 1021488:	2800      	cmp	r0, #0
 102148a:	f000 809e 	beq.w	10215ca <SM_APP_vTask+0x19e>
		if ( voltage < meter.voltage_lower_limit ) {
 102148e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 1021490:	4298      	cmp	r0, r3
 1021492:	f080 81b3 	bcs.w	10217fc <SM_APP_vTask+0x3d0>
			if ( meter.phase_a.prev_voltage_state != VOLTAGE_LOW ) {
 1021496:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 102149a:	2b00      	cmp	r3, #0
 102149c:	f040 823e 	bne.w	102191c <SM_APP_vTask+0x4f0>
			if ( meter.phase_a.voltage_state != VOLTAGE_LOW ) {
 10214a0:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
				if ( TIMER_is_ms_timer_expired(SM_PHA_VOLTAGE_MONITOR_TIMER) ) {
 10214a4:	2010      	movs	r0, #16
			if ( meter.phase_a.voltage_state != VOLTAGE_LOW ) {
 10214a6:	2b00      	cmp	r3, #0
 10214a8:	f000 821c 	beq.w	10218e4 <SM_APP_vTask+0x4b8>
				if ( TIMER_is_ms_timer_expired(SM_PHA_VOLTAGE_MONITOR_TIMER) ) {
 10214ac:	4b8b      	ldr	r3, [pc, #556]	; (10216dc <SM_APP_vTask+0x2b0>)
 10214ae:	4798      	blx	r3
 10214b0:	2800      	cmp	r0, #0
 10214b2:	f040 8264 	bne.w	102197e <SM_APP_vTask+0x552>
				if ( !TIMER_is_ms_timer_running(SM_PHA_VOLTAGE_MONITOR_TIMER) ) {
 10214b6:	2010      	movs	r0, #16
 10214b8:	4b89      	ldr	r3, [pc, #548]	; (10216e0 <SM_APP_vTask+0x2b4>)
 10214ba:	4798      	blx	r3
 10214bc:	2800      	cmp	r0, #0
 10214be:	f000 8258 	beq.w	1021972 <SM_APP_vTask+0x546>
			meter.phase_a.prev_voltage_state = VOLTAGE_LOW;
 10214c2:	2300      	movs	r3, #0
 10214c4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
	voltage = (uint32_t)METROLOGY_APP_dGet_instantaneous_value(V_B_ID);
 10214c8:	200d      	movs	r0, #13
 10214ca:	47b0      	blx	r6
 10214cc:	47c8      	blx	r9
	if ( voltage > 0 ) {
 10214ce:	4680      	mov	r8, r0
 10214d0:	2800      	cmp	r0, #0
 10214d2:	d077      	beq.n	10215c4 <SM_APP_vTask+0x198>
		if ( voltage < meter.voltage_lower_limit ) {
 10214d4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 10214d6:	4298      	cmp	r0, r3
 10214d8:	f080 8170 	bcs.w	10217bc <SM_APP_vTask+0x390>
			if ( meter.phase_b.prev_voltage_state != VOLTAGE_LOW ) {
 10214dc:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 10214e0:	2b00      	cmp	r3, #0
 10214e2:	f040 8223 	bne.w	102192c <SM_APP_vTask+0x500>
			if ( meter.phase_b.voltage_state != VOLTAGE_LOW ) {
 10214e6:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
				if ( TIMER_is_ms_timer_expired(SM_PHB_VOLTAGE_MONITOR_TIMER) ) {
 10214ea:	2011      	movs	r0, #17
			if ( meter.phase_b.voltage_state != VOLTAGE_LOW ) {
 10214ec:	2b00      	cmp	r3, #0
 10214ee:	f000 81ff 	beq.w	10218f0 <SM_APP_vTask+0x4c4>
				if ( TIMER_is_ms_timer_expired(SM_PHB_VOLTAGE_MONITOR_TIMER) ) {
 10214f2:	4b7a      	ldr	r3, [pc, #488]	; (10216dc <SM_APP_vTask+0x2b0>)
 10214f4:	4798      	blx	r3
 10214f6:	2800      	cmp	r0, #0
 10214f8:	f040 825a 	bne.w	10219b0 <SM_APP_vTask+0x584>
				if ( !TIMER_is_ms_timer_running(SM_PHB_VOLTAGE_MONITOR_TIMER) ) {
 10214fc:	2011      	movs	r0, #17
 10214fe:	4b78      	ldr	r3, [pc, #480]	; (10216e0 <SM_APP_vTask+0x2b4>)
 1021500:	4798      	blx	r3
 1021502:	2800      	cmp	r0, #0
 1021504:	f000 824e 	beq.w	10219a4 <SM_APP_vTask+0x578>
			meter.phase_b.prev_voltage_state = VOLTAGE_LOW;
 1021508:	2300      	movs	r3, #0
 102150a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
	voltage = (uint32_t)METROLOGY_APP_dGet_instantaneous_value(V_C_ID);
 102150e:	200e      	movs	r0, #14
 1021510:	47b0      	blx	r6
 1021512:	47c8      	blx	r9
	if ( voltage > 0 ) {
 1021514:	4680      	mov	r8, r0
 1021516:	2800      	cmp	r0, #0
 1021518:	d051      	beq.n	10215be <SM_APP_vTask+0x192>
		if ( voltage < meter.voltage_lower_limit ) {
 102151a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 102151c:	4298      	cmp	r0, r3
 102151e:	f080 8129 	bcs.w	1021774 <SM_APP_vTask+0x348>
			if ( meter.phase_c.prev_voltage_state != VOLTAGE_LOW ) {
 1021522:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 1021526:	2b00      	cmp	r3, #0
 1021528:	f040 81fc 	bne.w	1021924 <SM_APP_vTask+0x4f8>
			if ( meter.phase_c.voltage_state != VOLTAGE_LOW ) {
 102152c:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b
				if ( TIMER_is_ms_timer_expired(SM_PHC_VOLTAGE_MONITOR_TIMER) ) {
 1021530:	2012      	movs	r0, #18
			if ( meter.phase_c.voltage_state != VOLTAGE_LOW ) {
 1021532:	2b00      	cmp	r3, #0
 1021534:	f000 81d9 	beq.w	10218ea <SM_APP_vTask+0x4be>
				if ( TIMER_is_ms_timer_expired(SM_PHC_VOLTAGE_MONITOR_TIMER) ) {
 1021538:	4b68      	ldr	r3, [pc, #416]	; (10216dc <SM_APP_vTask+0x2b0>)
 102153a:	4798      	blx	r3
 102153c:	2800      	cmp	r0, #0
 102153e:	f040 8205 	bne.w	102194c <SM_APP_vTask+0x520>
				if ( !TIMER_is_ms_timer_running(SM_PHC_VOLTAGE_MONITOR_TIMER) ) {
 1021542:	2012      	movs	r0, #18
 1021544:	4b66      	ldr	r3, [pc, #408]	; (10216e0 <SM_APP_vTask+0x2b4>)
 1021546:	4798      	blx	r3
 1021548:	b920      	cbnz	r0, 1021554 <SM_APP_vTask+0x128>
					TIMER_start_ms_timer(SM_PHC_VOLTAGE_MONITOR_TIMER, meter.detect_voltage_change_period, null_action);
 102154a:	4a66      	ldr	r2, [pc, #408]	; (10216e4 <SM_APP_vTask+0x2b8>)
 102154c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 102154e:	4b66      	ldr	r3, [pc, #408]	; (10216e8 <SM_APP_vTask+0x2bc>)
 1021550:	2012      	movs	r0, #18
 1021552:	4798      	blx	r3
			meter.phase_c.prev_voltage_state = VOLTAGE_LOW;
 1021554:	2300      	movs	r3, #0
 1021556:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
			WATCHDOG_APP_vRestart();
 102155a:	47a8      	blx	r5
	uint16_t std_status_1 = GRAL_APP_usGet_st_3_ed_std_status1();
 102155c:	4b63      	ldr	r3, [pc, #396]	; (10216ec <SM_APP_vTask+0x2c0>)
 102155e:	4798      	blx	r3
	if ( TIMER_is_ms_timer_expired(DIAGNOSTICS_EXECUTION_TIMER) ) {
 1021560:	4b5e      	ldr	r3, [pc, #376]	; (10216dc <SM_APP_vTask+0x2b0>)
	uint16_t std_status_1 = GRAL_APP_usGet_st_3_ed_std_status1();
 1021562:	4680      	mov	r8, r0
	if ( TIMER_is_ms_timer_expired(DIAGNOSTICS_EXECUTION_TIMER) ) {
 1021564:	200c      	movs	r0, #12
 1021566:	4798      	blx	r3
 1021568:	2800      	cmp	r0, #0
 102156a:	f040 80df 	bne.w	102172c <SM_APP_vTask+0x300>
	if ( TIMER_is_ms_timer_expired(CONFIGURATION_ERROR_TIMER) ) {
 102156e:	200d      	movs	r0, #13
 1021570:	4b5a      	ldr	r3, [pc, #360]	; (10216dc <SM_APP_vTask+0x2b0>)
 1021572:	4798      	blx	r3
 1021574:	2800      	cmp	r0, #0
 1021576:	f040 8098 	bne.w	10216aa <SM_APP_vTask+0x27e>
	int32_t energy = (int32_t)METROLOGY_APP_dGet_instantaneous_value(P_T_ID);
 102157a:	2000      	movs	r0, #0
 102157c:	47b0      	blx	r6
 102157e:	4b5c      	ldr	r3, [pc, #368]	; (10216f0 <SM_APP_vTask+0x2c4>)
 1021580:	4798      	blx	r3
	if ( energy < 0 ) {
 1021582:	2800      	cmp	r0, #0
 1021584:	db0d      	blt.n	10215a2 <SM_APP_vTask+0x176>
	if ( std_status_1 != GRAL_APP_usGet_st_3_ed_std_status1() ) {
 1021586:	4b59      	ldr	r3, [pc, #356]	; (10216ec <SM_APP_vTask+0x2c0>)
 1021588:	4798      	blx	r3
 102158a:	4580      	cmp	r8, r0
 102158c:	d001      	beq.n	1021592 <SM_APP_vTask+0x166>
		GRAL_APP_vStore_st_3_ed_std_status1();
 102158e:	4b59      	ldr	r3, [pc, #356]	; (10216f4 <SM_APP_vTask+0x2c8>)
 1021590:	4798      	blx	r3
			WATCHDOG_APP_vRestart();
 1021592:	47a8      	blx	r5
			METROLOGY_APP_vCheck_task();
 1021594:	4b58      	ldr	r3, [pc, #352]	; (10216f8 <SM_APP_vTask+0x2cc>)
 1021596:	4798      	blx	r3
			WATCHDOG_APP_vRestart();
 1021598:	47a8      	blx	r5
			PFAIL_APP_v3ph_failure_detection();
 102159a:	4b58      	ldr	r3, [pc, #352]	; (10216fc <SM_APP_vTask+0x2d0>)
 102159c:	4798      	blx	r3
			WATCHDOG_APP_vRestart();
 102159e:	47a8      	blx	r5
 10215a0:	e750      	b.n	1021444 <SM_APP_vTask+0x18>
	if ( (SM_APP_bIs_ed_reverse_rotation() == true) && ( (std_status_1 & REVERSE_ROTATION_FLAG_bm) == 0 ) ) {
 10215a2:	f418 5300 	ands.w	r3, r8, #8192	; 0x2000
 10215a6:	d1ee      	bne.n	1021586 <SM_APP_vTask+0x15a>
		EVNT_APP_vRegister_event(REVERSE_ROTATION_DETECTED, 0, true, END_DEVICE, rtc.utc_timestamp);
 10215a8:	f8db 2004 	ldr.w	r2, [fp, #4]
 10215ac:	9200      	str	r2, [sp, #0]
 10215ae:	4619      	mov	r1, r3
 10215b0:	2201      	movs	r2, #1
 10215b2:	2030      	movs	r0, #48	; 0x30
 10215b4:	47d0      	blx	sl
		GRAL_APP_vSet_flag_st_3_ed_std_status1(REVERSE_ROTATION_FLAG);
 10215b6:	200d      	movs	r0, #13
 10215b8:	4b51      	ldr	r3, [pc, #324]	; (1021700 <SM_APP_vTask+0x2d4>)
 10215ba:	4798      	blx	r3
 10215bc:	e7e3      	b.n	1021586 <SM_APP_vTask+0x15a>
		meter.phase_c.voltage_state = VOLTAGE_LOW;
 10215be:	f884 005b 	strb.w	r0, [r4, #91]	; 0x5b
 10215c2:	e7ca      	b.n	102155a <SM_APP_vTask+0x12e>
		meter.phase_b.voltage_state = VOLTAGE_LOW;
 10215c4:	f884 0057 	strb.w	r0, [r4, #87]	; 0x57
 10215c8:	e7a1      	b.n	102150e <SM_APP_vTask+0xe2>
		meter.phase_a.voltage_state = VOLTAGE_LOW;
 10215ca:	f884 0053 	strb.w	r0, [r4, #83]	; 0x53
 10215ce:	e77b      	b.n	10214c8 <SM_APP_vTask+0x9c>
 10215d0:	b672      	cpsid	i
  __ASM volatile ("dmb");
 10215d2:	f3bf 8f5f 	dmb	sy
		Disable_global_interrupt();
 10215d6:	4a4b      	ldr	r2, [pc, #300]	; (1021704 <SM_APP_vTask+0x2d8>)
 10215d8:	2300      	movs	r3, #0
 10215da:	7013      	strb	r3, [r2, #0]
		SYSTEM_initialize_io();
 10215dc:	4b4a      	ldr	r3, [pc, #296]	; (1021708 <SM_APP_vTask+0x2dc>)
 10215de:	4798      	blx	r3
		if ( !meter.power_failure ) {
 10215e0:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 10215e4:	2b00      	cmp	r3, #0
 10215e6:	f000 8186 	beq.w	10218f6 <SM_APP_vTask+0x4ca>
		Enable_global_interrupt();
 10215ea:	4a46      	ldr	r2, [pc, #280]	; (1021704 <SM_APP_vTask+0x2d8>)
 10215ec:	2301      	movs	r3, #1
 10215ee:	7013      	strb	r3, [r2, #0]
 10215f0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
 10215f4:	b662      	cpsie	i
		TIMER_start_ms_timer(IO_MCU_CONFIG_TIMER, TIMER_ms_to_tic(5000), null_action);
 10215f6:	4a3b      	ldr	r2, [pc, #236]	; (10216e4 <SM_APP_vTask+0x2b8>)
 10215f8:	4b3b      	ldr	r3, [pc, #236]	; (10216e8 <SM_APP_vTask+0x2bc>)
 10215fa:	f241 3188 	movw	r1, #5000	; 0x1388
 10215fe:	200b      	movs	r0, #11
 1021600:	4798      	blx	r3
 1021602:	e73c      	b.n	102147e <SM_APP_vTask+0x52>
				op_c1218_apl.logon_session_expired = false;
 1021604:	4f34      	ldr	r7, [pc, #208]	; (10216d8 <SM_APP_vTask+0x2ac>)
				EVNT_APP_vRegister_event(COMMUNICATION_TERMINATED_ABNORMALLY, 0, true, END_DEVICE, rtc.utc_timestamp);
 1021606:	f8db 3004 	ldr.w	r3, [fp, #4]
 102160a:	9300      	str	r3, [sp, #0]
				op_c1218_apl.logon_session_expired = false;
 102160c:	f04f 0800 	mov.w	r8, #0
				EVNT_APP_vRegister_event(COMMUNICATION_TERMINATED_ABNORMALLY, 0, true, END_DEVICE, rtc.utc_timestamp);
 1021610:	4643      	mov	r3, r8
 1021612:	4641      	mov	r1, r8
 1021614:	2201      	movs	r2, #1
 1021616:	200d      	movs	r0, #13
				op_c1218_apl.logon_session_expired = false;
 1021618:	f887 8023 	strb.w	r8, [r7, #35]	; 0x23
				EVNT_APP_vRegister_event(COMMUNICATION_TERMINATED_ABNORMALLY, 0, true, END_DEVICE, rtc.utc_timestamp);
 102161c:	47d0      	blx	sl
				EVNT_APP_vRegister_event(COMMUNICATION_TERMINATED_ABNORMALLY_OP, 0, false, END_DEVICE, rtc.utc_timestamp);
 102161e:	f8db 3004 	ldr.w	r3, [fp, #4]
 1021622:	9300      	str	r3, [sp, #0]
 1021624:	4642      	mov	r2, r8
 1021626:	4643      	mov	r3, r8
 1021628:	4641      	mov	r1, r8
 102162a:	201a      	movs	r0, #26
 102162c:	47d0      	blx	sl
				if ( op_security.incorrect_password > 0 ) {
 102162e:	4b37      	ldr	r3, [pc, #220]	; (102170c <SM_APP_vTask+0x2e0>)
 1021630:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 1021632:	2b00      	cmp	r3, #0
 1021634:	f43f af1d 	beq.w	1021472 <SM_APP_vTask+0x46>
					EVNT_APP_vRegister_event(INCORRECT_PASSWORD_OP, 0, false, op_c1218_apl.user_id, rtc.utc_timestamp);
 1021638:	f8db 2004 	ldr.w	r2, [fp, #4]
 102163c:	887b      	ldrh	r3, [r7, #2]
 102163e:	9200      	str	r2, [sp, #0]
 1021640:	4641      	mov	r1, r8
 1021642:	4642      	mov	r2, r8
 1021644:	2026      	movs	r0, #38	; 0x26
 1021646:	47d0      	blx	sl
					op_security.incorrect_password = 0;
 1021648:	4b30      	ldr	r3, [pc, #192]	; (102170c <SM_APP_vTask+0x2e0>)
 102164a:	f8a3 802e 	strh.w	r8, [r3, #46]	; 0x2e
 102164e:	e710      	b.n	1021472 <SM_APP_vTask+0x46>
				nic_c1218_apl.logon_session_expired = false;
 1021650:	4f20      	ldr	r7, [pc, #128]	; (10216d4 <SM_APP_vTask+0x2a8>)
				EVNT_APP_vRegister_event(COMMUNICATION_TERMINATED_ABNORMALLY, 0, true, END_DEVICE, rtc.utc_timestamp);
 1021652:	f8db 3004 	ldr.w	r3, [fp, #4]
 1021656:	9300      	str	r3, [sp, #0]
				nic_c1218_apl.logon_session_expired = false;
 1021658:	f04f 0800 	mov.w	r8, #0
				EVNT_APP_vRegister_event(COMMUNICATION_TERMINATED_ABNORMALLY, 0, true, END_DEVICE, rtc.utc_timestamp);
 102165c:	4643      	mov	r3, r8
 102165e:	4641      	mov	r1, r8
 1021660:	2201      	movs	r2, #1
 1021662:	200d      	movs	r0, #13
				nic_c1218_apl.logon_session_expired = false;
 1021664:	f887 8023 	strb.w	r8, [r7, #35]	; 0x23
				EVNT_APP_vRegister_event(COMMUNICATION_TERMINATED_ABNORMALLY, 0, true, END_DEVICE, rtc.utc_timestamp);
 1021668:	47d0      	blx	sl
				EVNT_APP_vRegister_event(COMMUNICATION_TERMINATED_ABNORMALLY_NIC, 0, false, END_DEVICE, rtc.utc_timestamp);
 102166a:	f8db 3004 	ldr.w	r3, [fp, #4]
 102166e:	9300      	str	r3, [sp, #0]
 1021670:	4642      	mov	r2, r8
 1021672:	4643      	mov	r3, r8
 1021674:	4641      	mov	r1, r8
 1021676:	201b      	movs	r0, #27
 1021678:	47d0      	blx	sl
				if ( nic_security.incorrect_password > 0 ) {
 102167a:	4b25      	ldr	r3, [pc, #148]	; (1021710 <SM_APP_vTask+0x2e4>)
 102167c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 102167e:	2b00      	cmp	r3, #0
 1021680:	f43f aef1 	beq.w	1021466 <SM_APP_vTask+0x3a>
					EVNT_APP_vRegister_event(INCORRECT_PASSWORD_NIC, 0, false, nic_c1218_apl.user_id, rtc.utc_timestamp);
 1021684:	f8db 2004 	ldr.w	r2, [fp, #4]
 1021688:	887b      	ldrh	r3, [r7, #2]
 102168a:	9200      	str	r2, [sp, #0]
 102168c:	4641      	mov	r1, r8
 102168e:	4642      	mov	r2, r8
 1021690:	2027      	movs	r0, #39	; 0x27
 1021692:	47d0      	blx	sl
					nic_security.incorrect_password = 0;
 1021694:	4b1e      	ldr	r3, [pc, #120]	; (1021710 <SM_APP_vTask+0x2e4>)
 1021696:	f8a3 802e 	strh.w	r8, [r3, #46]	; 0x2e
 102169a:	e6e4      	b.n	1021466 <SM_APP_vTask+0x3a>
				meter_os.test_mode_expired = false;
 102169c:	4b0c      	ldr	r3, [pc, #48]	; (10216d0 <SM_APP_vTask+0x2a4>)
				GRAL_APP_bEnable_metering_mode(END_DEVICE, uart);
 102169e:	4611      	mov	r1, r2
				meter_os.test_mode_expired = false;
 10216a0:	705a      	strb	r2, [r3, #1]
				GRAL_APP_bEnable_metering_mode(END_DEVICE, uart);
 10216a2:	4610      	mov	r0, r2
 10216a4:	4b1b      	ldr	r3, [pc, #108]	; (1021714 <SM_APP_vTask+0x2e8>)
 10216a6:	4798      	blx	r3
 10216a8:	e6d7      	b.n	102145a <SM_APP_vTask+0x2e>
		if ( SM_APP_bIs_ed_configuration_error() && ( (std_status_1 & CONFIGURATION_ERROR_FLAG_bm) == 0 ) ) {
 10216aa:	4b1b      	ldr	r3, [pc, #108]	; (1021718 <SM_APP_vTask+0x2ec>)
 10216ac:	4798      	blx	r3
 10216ae:	b118      	cbz	r0, 10216b8 <SM_APP_vTask+0x28c>
 10216b0:	f018 0f02 	tst.w	r8, #2
 10216b4:	f000 813e 	beq.w	1021934 <SM_APP_vTask+0x508>
		TIMER_start_ms_timer(CONFIGURATION_ERROR_TIMER, CHECK_CONFIGURATION_MS_PERIOD, null_action);
 10216b8:	4a0a      	ldr	r2, [pc, #40]	; (10216e4 <SM_APP_vTask+0x2b8>)
 10216ba:	4918      	ldr	r1, [pc, #96]	; (102171c <SM_APP_vTask+0x2f0>)
 10216bc:	4b0a      	ldr	r3, [pc, #40]	; (10216e8 <SM_APP_vTask+0x2bc>)
 10216be:	200d      	movs	r0, #13
 10216c0:	4798      	blx	r3
 10216c2:	e75a      	b.n	102157a <SM_APP_vTask+0x14e>
 10216c4:	20016c2c 	.word	0x20016c2c
 10216c8:	0101603d 	.word	0x0101603d
 10216cc:	0101f065 	.word	0x0101f065
 10216d0:	20016c28 	.word	0x20016c28
 10216d4:	20016eec 	.word	0x20016eec
 10216d8:	20016ec8 	.word	0x20016ec8
 10216dc:	0102baf5 	.word	0x0102baf5
 10216e0:	0102bae5 	.word	0x0102bae5
 10216e4:	0102ba4d 	.word	0x0102ba4d
 10216e8:	0102ba8d 	.word	0x0102ba8d
 10216ec:	0101a155 	.word	0x0101a155
 10216f0:	01030565 	.word	0x01030565
 10216f4:	0101a1f1 	.word	0x0101a1f1
 10216f8:	0101d849 	.word	0x0101d849
 10216fc:	01025965 	.word	0x01025965
 1021700:	0101a219 	.word	0x0101a219
 1021704:	2000008d 	.word	0x2000008d
 1021708:	0102b8d5 	.word	0x0102b8d5
 102170c:	20016e98 	.word	0x20016e98
 1021710:	2001711c 	.word	0x2001711c
 1021714:	01019fcd 	.word	0x01019fcd
 1021718:	010202d9 	.word	0x010202d9
 102171c:	05265c00 	.word	0x05265c00
 1021720:	20017160 	.word	0x20017160
 1021724:	01019961 	.word	0x01019961
 1021728:	010305b5 	.word	0x010305b5
		if ( SM_APP_bIs_ed_rom_failure() && ( (std_status_1 & ROM_FAILURE_FLAG_bm) == 0 ) ) {
 102172c:	4bab      	ldr	r3, [pc, #684]	; (10219dc <SM_APP_vTask+0x5b0>)
 102172e:	4798      	blx	r3
 1021730:	b118      	cbz	r0, 102173a <SM_APP_vTask+0x30e>
 1021732:	f018 0f10 	tst.w	r8, #16
 1021736:	f000 8101 	beq.w	102193c <SM_APP_vTask+0x510>
	if ( SM_APP_ucGet_nonvol_mem_state() != (uint8_t)3 ) {
 102173a:	4ba9      	ldr	r3, [pc, #676]	; (10219e0 <SM_APP_vTask+0x5b4>)
 102173c:	4798      	blx	r3
 102173e:	2803      	cmp	r0, #3
 1021740:	d003      	beq.n	102174a <SM_APP_vTask+0x31e>
		if ( SM_APP_bIs_ed_nonvol_mem_failure() && ( (std_status_1 & NONVOL_MEM_FAILURE_FLAG_bm) == 0 ) ) {
 1021742:	f018 0f20 	tst.w	r8, #32
 1021746:	f000 80fd 	beq.w	1021944 <SM_APP_vTask+0x518>
	if ( (dsp_is_running != DSP_IS_RUNNING) || (metrology_running != METROLOGY_IS_RUNNING) || (atsense_ok != ATSENSE_IS_OK) ) {
 102174a:	4ba6      	ldr	r3, [pc, #664]	; (10219e4 <SM_APP_vTask+0x5b8>)
	uint32_t metrology_running = VMetrology.DSP_CTRL.STATE_CTRL.WORD;
 102174c:	4aa5      	ldr	r2, [pc, #660]	; (10219e4 <SM_APP_vTask+0x5b8>)
	if ( (dsp_is_running != DSP_IS_RUNNING) || (metrology_running != METROLOGY_IS_RUNNING) || (atsense_ok != ATSENSE_IS_OK) ) {
 102174e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
	uint32_t atsense_ok = VMetrology.DSP_ST.STATE_FLAG.WORD;
 1021752:	49a4      	ldr	r1, [pc, #656]	; (10219e4 <SM_APP_vTask+0x5b8>)
	uint32_t metrology_running = VMetrology.DSP_CTRL.STATE_CTRL.WORD;
 1021754:	6812      	ldr	r2, [r2, #0]
	uint32_t atsense_ok = VMetrology.DSP_ST.STATE_FLAG.WORD;
 1021756:	f8d1 10e4 	ldr.w	r1, [r1, #228]	; 0xe4
	if ( (dsp_is_running != DSP_IS_RUNNING) || (metrology_running != METROLOGY_IS_RUNNING) || (atsense_ok != ATSENSE_IS_OK) ) {
 102175a:	2b08      	cmp	r3, #8
 102175c:	f000 80d0 	beq.w	1021900 <SM_APP_vTask+0x4d4>
		if ( SM_APP_bIs_ed_measurement_error() && ( (std_status_1 & MEASUREMENT_ERROR_FLAG_bm) == 0 ) ) {
 1021760:	f018 0f80 	tst.w	r8, #128	; 0x80
 1021764:	f000 80d6 	beq.w	1021914 <SM_APP_vTask+0x4e8>
		TIMER_start_ms_timer(DIAGNOSTICS_EXECUTION_TIMER, DIAGNOSTIC_PROC_MS, null_action);
 1021768:	4a9f      	ldr	r2, [pc, #636]	; (10219e8 <SM_APP_vTask+0x5bc>)
 102176a:	49a0      	ldr	r1, [pc, #640]	; (10219ec <SM_APP_vTask+0x5c0>)
 102176c:	4ba0      	ldr	r3, [pc, #640]	; (10219f0 <SM_APP_vTask+0x5c4>)
 102176e:	200c      	movs	r0, #12
 1021770:	4798      	blx	r3
 1021772:	e6fc      	b.n	102156e <SM_APP_vTask+0x142>
		else if ( voltage > meter.voltage_upper_limit ) {
 1021774:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 1021776:	4298      	cmp	r0, r3
			if ( meter.phase_c.prev_voltage_state != VOLTAGE_HIGH ) {
 1021778:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
		else if ( voltage > meter.voltage_upper_limit ) {
 102177c:	f240 8094 	bls.w	10218a8 <SM_APP_vTask+0x47c>
			if ( meter.phase_c.prev_voltage_state != VOLTAGE_HIGH ) {
 1021780:	2b02      	cmp	r3, #2
 1021782:	d002      	beq.n	102178a <SM_APP_vTask+0x35e>
				TIMER_reset_ms_timer(SM_PHC_VOLTAGE_MONITOR_TIMER);
 1021784:	2012      	movs	r0, #18
 1021786:	4b9b      	ldr	r3, [pc, #620]	; (10219f4 <SM_APP_vTask+0x5c8>)
 1021788:	4798      	blx	r3
			if ( meter.phase_c.voltage_state != VOLTAGE_HIGH ) {
 102178a:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b
 102178e:	2b02      	cmp	r3, #2
				if ( TIMER_is_ms_timer_expired(SM_PHC_VOLTAGE_MONITOR_TIMER) ) {
 1021790:	f04f 0012 	mov.w	r0, #18
			if ( meter.phase_c.voltage_state != VOLTAGE_HIGH ) {
 1021794:	f000 811f 	beq.w	10219d6 <SM_APP_vTask+0x5aa>
				if ( TIMER_is_ms_timer_expired(SM_PHC_VOLTAGE_MONITOR_TIMER) ) {
 1021798:	4b97      	ldr	r3, [pc, #604]	; (10219f8 <SM_APP_vTask+0x5cc>)
 102179a:	4798      	blx	r3
 102179c:	2800      	cmp	r0, #0
 102179e:	f040 8182 	bne.w	1021aa6 <SM_APP_vTask+0x67a>
				if (!TIMER_is_ms_timer_running(SM_PHC_VOLTAGE_MONITOR_TIMER) ) {
 10217a2:	2012      	movs	r0, #18
 10217a4:	4b95      	ldr	r3, [pc, #596]	; (10219fc <SM_APP_vTask+0x5d0>)
 10217a6:	4798      	blx	r3
 10217a8:	b920      	cbnz	r0, 10217b4 <SM_APP_vTask+0x388>
					TIMER_start_ms_timer(SM_PHC_VOLTAGE_MONITOR_TIMER, meter.detect_voltage_change_period, null_action);
 10217aa:	4a8f      	ldr	r2, [pc, #572]	; (10219e8 <SM_APP_vTask+0x5bc>)
 10217ac:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 10217ae:	4b90      	ldr	r3, [pc, #576]	; (10219f0 <SM_APP_vTask+0x5c4>)
 10217b0:	2012      	movs	r0, #18
 10217b2:	4798      	blx	r3
			meter.phase_c.prev_voltage_state = VOLTAGE_HIGH;
 10217b4:	2302      	movs	r3, #2
 10217b6:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 10217ba:	e6ce      	b.n	102155a <SM_APP_vTask+0x12e>
		else if ( voltage > meter.voltage_upper_limit ) {
 10217bc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 10217be:	4298      	cmp	r0, r3
			if ( meter.phase_b.prev_voltage_state != VOLTAGE_HIGH ) {
 10217c0:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
		else if ( voltage > meter.voltage_upper_limit ) {
 10217c4:	d955      	bls.n	1021872 <SM_APP_vTask+0x446>
			if ( meter.phase_b.prev_voltage_state != VOLTAGE_HIGH ) {
 10217c6:	2b02      	cmp	r3, #2
 10217c8:	d002      	beq.n	10217d0 <SM_APP_vTask+0x3a4>
				TIMER_reset_ms_timer(SM_PHB_VOLTAGE_MONITOR_TIMER);
 10217ca:	2011      	movs	r0, #17
 10217cc:	4b89      	ldr	r3, [pc, #548]	; (10219f4 <SM_APP_vTask+0x5c8>)
 10217ce:	4798      	blx	r3
			if ( meter.phase_b.voltage_state != VOLTAGE_HIGH ) {
 10217d0:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
 10217d4:	2b02      	cmp	r3, #2
				if ( TIMER_is_ms_timer_expired(SM_PHB_VOLTAGE_MONITOR_TIMER) ) {
 10217d6:	f04f 0011 	mov.w	r0, #17
			if ( meter.phase_b.voltage_state != VOLTAGE_HIGH ) {
 10217da:	f000 8125 	beq.w	1021a28 <SM_APP_vTask+0x5fc>
				if ( TIMER_is_ms_timer_expired(SM_PHB_VOLTAGE_MONITOR_TIMER) ) {
 10217de:	4b86      	ldr	r3, [pc, #536]	; (10219f8 <SM_APP_vTask+0x5cc>)
 10217e0:	4798      	blx	r3
 10217e2:	2800      	cmp	r0, #0
 10217e4:	f040 8141 	bne.w	1021a6a <SM_APP_vTask+0x63e>
				if (!TIMER_is_ms_timer_running(SM_PHB_VOLTAGE_MONITOR_TIMER) ) {
 10217e8:	2011      	movs	r0, #17
 10217ea:	4b84      	ldr	r3, [pc, #528]	; (10219fc <SM_APP_vTask+0x5d0>)
 10217ec:	4798      	blx	r3
 10217ee:	2800      	cmp	r0, #0
 10217f0:	f000 8153 	beq.w	1021a9a <SM_APP_vTask+0x66e>
			meter.phase_b.prev_voltage_state = VOLTAGE_HIGH;
 10217f4:	2302      	movs	r3, #2
 10217f6:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 10217fa:	e688      	b.n	102150e <SM_APP_vTask+0xe2>
		else if ( voltage > meter.voltage_upper_limit ) {
 10217fc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 10217fe:	4298      	cmp	r0, r3
			if ( meter.phase_a.prev_voltage_state != VOLTAGE_HIGH ) {
 1021800:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
		else if ( voltage > meter.voltage_upper_limit ) {
 1021804:	d91a      	bls.n	102183c <SM_APP_vTask+0x410>
			if ( meter.phase_a.prev_voltage_state != VOLTAGE_HIGH ) {
 1021806:	2b02      	cmp	r3, #2
 1021808:	d002      	beq.n	1021810 <SM_APP_vTask+0x3e4>
				TIMER_reset_ms_timer(SM_PHA_VOLTAGE_MONITOR_TIMER);
 102180a:	2010      	movs	r0, #16
 102180c:	4b79      	ldr	r3, [pc, #484]	; (10219f4 <SM_APP_vTask+0x5c8>)
 102180e:	4798      	blx	r3
			if ( meter.phase_a.voltage_state != VOLTAGE_HIGH ) {
 1021810:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 1021814:	2b02      	cmp	r3, #2
				if ( TIMER_is_ms_timer_expired(SM_PHA_VOLTAGE_MONITOR_TIMER) ) {
 1021816:	f04f 0010 	mov.w	r0, #16
			if ( meter.phase_a.voltage_state != VOLTAGE_HIGH ) {
 102181a:	f000 8102 	beq.w	1021a22 <SM_APP_vTask+0x5f6>
				if ( TIMER_is_ms_timer_expired(SM_PHA_VOLTAGE_MONITOR_TIMER) ) {
 102181e:	4b76      	ldr	r3, [pc, #472]	; (10219f8 <SM_APP_vTask+0x5cc>)
 1021820:	4798      	blx	r3
 1021822:	2800      	cmp	r0, #0
 1021824:	f040 8103 	bne.w	1021a2e <SM_APP_vTask+0x602>
				if (!TIMER_is_ms_timer_running(SM_PHA_VOLTAGE_MONITOR_TIMER) ) {
 1021828:	2010      	movs	r0, #16
 102182a:	4b74      	ldr	r3, [pc, #464]	; (10219fc <SM_APP_vTask+0x5d0>)
 102182c:	4798      	blx	r3
 102182e:	2800      	cmp	r0, #0
 1021830:	f000 8115 	beq.w	1021a5e <SM_APP_vTask+0x632>
			meter.phase_a.prev_voltage_state = VOLTAGE_HIGH;
 1021834:	2302      	movs	r3, #2
 1021836:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 102183a:	e645      	b.n	10214c8 <SM_APP_vTask+0x9c>
			if ( meter.phase_a.prev_voltage_state != VOLTAGE_NORMAL ) {
 102183c:	2b01      	cmp	r3, #1
 102183e:	d002      	beq.n	1021846 <SM_APP_vTask+0x41a>
				TIMER_reset_ms_timer(SM_PHA_VOLTAGE_MONITOR_TIMER);
 1021840:	2010      	movs	r0, #16
 1021842:	4b6c      	ldr	r3, [pc, #432]	; (10219f4 <SM_APP_vTask+0x5c8>)
 1021844:	4798      	blx	r3
			if ( meter.phase_a.voltage_state != VOLTAGE_NORMAL ) {
 1021846:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 102184a:	2b01      	cmp	r3, #1
				if ( TIMER_is_ms_timer_expired(SM_PHA_VOLTAGE_MONITOR_TIMER) ) {
 102184c:	f04f 0010 	mov.w	r0, #16
			if ( meter.phase_a.voltage_state != VOLTAGE_NORMAL ) {
 1021850:	f000 80de 	beq.w	1021a10 <SM_APP_vTask+0x5e4>
				if ( TIMER_is_ms_timer_expired(SM_PHA_VOLTAGE_MONITOR_TIMER) ) {
 1021854:	4b68      	ldr	r3, [pc, #416]	; (10219f8 <SM_APP_vTask+0x5cc>)
 1021856:	4798      	blx	r3
 1021858:	2800      	cmp	r0, #0
 102185a:	f040 8137 	bne.w	1021acc <SM_APP_vTask+0x6a0>
				if (!TIMER_is_ms_timer_running(SM_PHA_VOLTAGE_MONITOR_TIMER) ) {
 102185e:	2010      	movs	r0, #16
 1021860:	4b66      	ldr	r3, [pc, #408]	; (10219fc <SM_APP_vTask+0x5d0>)
 1021862:	4798      	blx	r3
 1021864:	2800      	cmp	r0, #0
 1021866:	f000 8149 	beq.w	1021afc <SM_APP_vTask+0x6d0>
			meter.phase_a.prev_voltage_state = VOLTAGE_NORMAL;
 102186a:	2301      	movs	r3, #1
 102186c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 1021870:	e62a      	b.n	10214c8 <SM_APP_vTask+0x9c>
			if ( meter.phase_b.prev_voltage_state != VOLTAGE_NORMAL ) {
 1021872:	2b01      	cmp	r3, #1
 1021874:	d002      	beq.n	102187c <SM_APP_vTask+0x450>
				TIMER_reset_ms_timer(SM_PHB_VOLTAGE_MONITOR_TIMER);
 1021876:	2011      	movs	r0, #17
 1021878:	4b5e      	ldr	r3, [pc, #376]	; (10219f4 <SM_APP_vTask+0x5c8>)
 102187a:	4798      	blx	r3
			if ( meter.phase_b.voltage_state != VOLTAGE_NORMAL ) {
 102187c:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
 1021880:	2b01      	cmp	r3, #1
				if ( TIMER_is_ms_timer_expired(SM_PHB_VOLTAGE_MONITOR_TIMER) ) {
 1021882:	f04f 0011 	mov.w	r0, #17
			if ( meter.phase_b.voltage_state != VOLTAGE_NORMAL ) {
 1021886:	f000 80c6 	beq.w	1021a16 <SM_APP_vTask+0x5ea>
				if ( TIMER_is_ms_timer_expired(SM_PHB_VOLTAGE_MONITOR_TIMER) ) {
 102188a:	4b5b      	ldr	r3, [pc, #364]	; (10219f8 <SM_APP_vTask+0x5cc>)
 102188c:	4798      	blx	r3
 102188e:	2800      	cmp	r0, #0
 1021890:	f040 813a 	bne.w	1021b08 <SM_APP_vTask+0x6dc>
				if (!TIMER_is_ms_timer_running(SM_PHB_VOLTAGE_MONITOR_TIMER) ) {
 1021894:	2011      	movs	r0, #17
 1021896:	4b59      	ldr	r3, [pc, #356]	; (10219fc <SM_APP_vTask+0x5d0>)
 1021898:	4798      	blx	r3
 102189a:	2800      	cmp	r0, #0
 102189c:	f000 814c 	beq.w	1021b38 <SM_APP_vTask+0x70c>
			meter.phase_b.prev_voltage_state = VOLTAGE_NORMAL;
 10218a0:	2301      	movs	r3, #1
 10218a2:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 10218a6:	e632      	b.n	102150e <SM_APP_vTask+0xe2>
			if ( meter.phase_c.prev_voltage_state != VOLTAGE_NORMAL ) {
 10218a8:	2b01      	cmp	r3, #1
 10218aa:	d002      	beq.n	10218b2 <SM_APP_vTask+0x486>
				TIMER_reset_ms_timer(SM_PHC_VOLTAGE_MONITOR_TIMER);
 10218ac:	2012      	movs	r0, #18
 10218ae:	4b51      	ldr	r3, [pc, #324]	; (10219f4 <SM_APP_vTask+0x5c8>)
 10218b0:	4798      	blx	r3
			if ( meter.phase_c.voltage_state != VOLTAGE_NORMAL ) {
 10218b2:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b
 10218b6:	2b01      	cmp	r3, #1
				if ( TIMER_is_ms_timer_expired(SM_PHC_VOLTAGE_MONITOR_TIMER) ) {
 10218b8:	f04f 0012 	mov.w	r0, #18
			if ( meter.phase_c.voltage_state != VOLTAGE_NORMAL ) {
 10218bc:	f000 80ae 	beq.w	1021a1c <SM_APP_vTask+0x5f0>
				if ( TIMER_is_ms_timer_expired(SM_PHC_VOLTAGE_MONITOR_TIMER) ) {
 10218c0:	4b4d      	ldr	r3, [pc, #308]	; (10219f8 <SM_APP_vTask+0x5cc>)
 10218c2:	4798      	blx	r3
 10218c4:	2800      	cmp	r0, #0
 10218c6:	f040 813d 	bne.w	1021b44 <SM_APP_vTask+0x718>
				if (!TIMER_is_ms_timer_running(SM_PHC_VOLTAGE_MONITOR_TIMER) ) {
 10218ca:	2012      	movs	r0, #18
 10218cc:	4b4b      	ldr	r3, [pc, #300]	; (10219fc <SM_APP_vTask+0x5d0>)
 10218ce:	4798      	blx	r3
 10218d0:	b920      	cbnz	r0, 10218dc <SM_APP_vTask+0x4b0>
					TIMER_start_ms_timer(SM_PHC_VOLTAGE_MONITOR_TIMER, meter.detect_voltage_change_period, null_action);
 10218d2:	4a45      	ldr	r2, [pc, #276]	; (10219e8 <SM_APP_vTask+0x5bc>)
 10218d4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 10218d6:	4b46      	ldr	r3, [pc, #280]	; (10219f0 <SM_APP_vTask+0x5c4>)
 10218d8:	2012      	movs	r0, #18
 10218da:	4798      	blx	r3
			meter.phase_c.prev_voltage_state = VOLTAGE_NORMAL;
 10218dc:	2301      	movs	r3, #1
 10218de:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 10218e2:	e63a      	b.n	102155a <SM_APP_vTask+0x12e>
				TIMER_reset_ms_timer(SM_PHA_VOLTAGE_MONITOR_TIMER);
 10218e4:	4b43      	ldr	r3, [pc, #268]	; (10219f4 <SM_APP_vTask+0x5c8>)
 10218e6:	4798      	blx	r3
 10218e8:	e5eb      	b.n	10214c2 <SM_APP_vTask+0x96>
				TIMER_reset_ms_timer(SM_PHC_VOLTAGE_MONITOR_TIMER);
 10218ea:	4b42      	ldr	r3, [pc, #264]	; (10219f4 <SM_APP_vTask+0x5c8>)
 10218ec:	4798      	blx	r3
 10218ee:	e631      	b.n	1021554 <SM_APP_vTask+0x128>
				TIMER_reset_ms_timer(SM_PHB_VOLTAGE_MONITOR_TIMER);
 10218f0:	4b40      	ldr	r3, [pc, #256]	; (10219f4 <SM_APP_vTask+0x5c8>)
 10218f2:	4798      	blx	r3
 10218f4:	e608      	b.n	1021508 <SM_APP_vTask+0xdc>
			NIC_io_reset();
 10218f6:	4b42      	ldr	r3, [pc, #264]	; (1021a00 <SM_APP_vTask+0x5d4>)
 10218f8:	4798      	blx	r3
			OP_io_reset();
 10218fa:	4b42      	ldr	r3, [pc, #264]	; (1021a04 <SM_APP_vTask+0x5d8>)
 10218fc:	4798      	blx	r3
 10218fe:	e674      	b.n	10215ea <SM_APP_vTask+0x1be>
	if ( (dsp_is_running != DSP_IS_RUNNING) || (metrology_running != METROLOGY_IS_RUNNING) || (atsense_ok != ATSENSE_IS_OK) ) {
 1021900:	2a02      	cmp	r2, #2
 1021902:	f47f af2d 	bne.w	1021760 <SM_APP_vTask+0x334>
 1021906:	05cb      	lsls	r3, r1, #23
 1021908:	f57f af2e 	bpl.w	1021768 <SM_APP_vTask+0x33c>
		if ( SM_APP_bIs_ed_measurement_error() && ( (std_status_1 & MEASUREMENT_ERROR_FLAG_bm) == 0 ) ) {
 102190c:	f018 0f80 	tst.w	r8, #128	; 0x80
 1021910:	f47f af2a 	bne.w	1021768 <SM_APP_vTask+0x33c>
			GRAL_APP_vSet_flag_st_3_ed_std_status1(MEASUREMENT_ERROR_FLAG);
 1021914:	2007      	movs	r0, #7
 1021916:	4b3c      	ldr	r3, [pc, #240]	; (1021a08 <SM_APP_vTask+0x5dc>)
 1021918:	4798      	blx	r3
 102191a:	e725      	b.n	1021768 <SM_APP_vTask+0x33c>
				TIMER_reset_ms_timer(SM_PHA_VOLTAGE_MONITOR_TIMER);
 102191c:	2010      	movs	r0, #16
 102191e:	4b35      	ldr	r3, [pc, #212]	; (10219f4 <SM_APP_vTask+0x5c8>)
 1021920:	4798      	blx	r3
 1021922:	e5bd      	b.n	10214a0 <SM_APP_vTask+0x74>
				TIMER_reset_ms_timer(SM_PHC_VOLTAGE_MONITOR_TIMER);
 1021924:	2012      	movs	r0, #18
 1021926:	4b33      	ldr	r3, [pc, #204]	; (10219f4 <SM_APP_vTask+0x5c8>)
 1021928:	4798      	blx	r3
 102192a:	e5ff      	b.n	102152c <SM_APP_vTask+0x100>
				TIMER_reset_ms_timer(SM_PHB_VOLTAGE_MONITOR_TIMER);
 102192c:	2011      	movs	r0, #17
 102192e:	4b31      	ldr	r3, [pc, #196]	; (10219f4 <SM_APP_vTask+0x5c8>)
 1021930:	4798      	blx	r3
 1021932:	e5d8      	b.n	10214e6 <SM_APP_vTask+0xba>
			GRAL_APP_vSet_flag_st_3_ed_std_status1(CONFIGURATION_ERROR_FLAG);
 1021934:	2001      	movs	r0, #1
 1021936:	4b34      	ldr	r3, [pc, #208]	; (1021a08 <SM_APP_vTask+0x5dc>)
 1021938:	4798      	blx	r3
 102193a:	e6bd      	b.n	10216b8 <SM_APP_vTask+0x28c>
			GRAL_APP_vSet_flag_st_3_ed_std_status1(ROM_FAILURE_FLAG);
 102193c:	2004      	movs	r0, #4
 102193e:	4b32      	ldr	r3, [pc, #200]	; (1021a08 <SM_APP_vTask+0x5dc>)
 1021940:	4798      	blx	r3
 1021942:	e6fa      	b.n	102173a <SM_APP_vTask+0x30e>
			GRAL_APP_vSet_flag_st_3_ed_std_status1(NONVOL_MEM_FAILURE_FLAG);
 1021944:	2005      	movs	r0, #5
 1021946:	4b30      	ldr	r3, [pc, #192]	; (1021a08 <SM_APP_vTask+0x5dc>)
 1021948:	4798      	blx	r3
 102194a:	e6fe      	b.n	102174a <SM_APP_vTask+0x31e>
					TIMER_reset_ms_timer(SM_PHC_VOLTAGE_MONITOR_TIMER);
 102194c:	2012      	movs	r0, #18
 102194e:	4b29      	ldr	r3, [pc, #164]	; (10219f4 <SM_APP_vTask+0x5c8>)
 1021950:	4798      	blx	r3
					EVNT_APP_vRegister_event( (uint8_t)PHASE_C_LOW_VOLTAGE, voltage/1000, false, END_DEVICE, rtc.utc_timestamp );
 1021952:	4b2e      	ldr	r3, [pc, #184]	; (1021a0c <SM_APP_vTask+0x5e0>)
 1021954:	fba3 3108 	umull	r3, r1, r3, r8
 1021958:	f8db 3004 	ldr.w	r3, [fp, #4]
 102195c:	9300      	str	r3, [sp, #0]
 102195e:	2300      	movs	r3, #0
 1021960:	461a      	mov	r2, r3
 1021962:	f3c1 118f 	ubfx	r1, r1, #6, #16
 1021966:	200d      	movs	r0, #13
 1021968:	47d0      	blx	sl
					meter.phase_c.voltage_state = VOLTAGE_LOW;
 102196a:	2300      	movs	r3, #0
 102196c:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
 1021970:	e5e7      	b.n	1021542 <SM_APP_vTask+0x116>
					TIMER_start_ms_timer(SM_PHA_VOLTAGE_MONITOR_TIMER, meter.detect_voltage_change_period, null_action);
 1021972:	4a1d      	ldr	r2, [pc, #116]	; (10219e8 <SM_APP_vTask+0x5bc>)
 1021974:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 1021976:	4b1e      	ldr	r3, [pc, #120]	; (10219f0 <SM_APP_vTask+0x5c4>)
 1021978:	2010      	movs	r0, #16
 102197a:	4798      	blx	r3
 102197c:	e5a1      	b.n	10214c2 <SM_APP_vTask+0x96>
					TIMER_reset_ms_timer(SM_PHA_VOLTAGE_MONITOR_TIMER);
 102197e:	2010      	movs	r0, #16
 1021980:	4b1c      	ldr	r3, [pc, #112]	; (10219f4 <SM_APP_vTask+0x5c8>)
 1021982:	4798      	blx	r3
					EVNT_APP_vRegister_event( (uint8_t)PHASE_A_LOW_VOLTAGE, voltage/1000, false, END_DEVICE, rtc.utc_timestamp );
 1021984:	4b21      	ldr	r3, [pc, #132]	; (1021a0c <SM_APP_vTask+0x5e0>)
 1021986:	fba3 3108 	umull	r3, r1, r3, r8
 102198a:	f8db 3004 	ldr.w	r3, [fp, #4]
 102198e:	9300      	str	r3, [sp, #0]
 1021990:	2300      	movs	r3, #0
 1021992:	461a      	mov	r2, r3
 1021994:	f3c1 118f 	ubfx	r1, r1, #6, #16
 1021998:	2007      	movs	r0, #7
 102199a:	47d0      	blx	sl
					meter.phase_a.voltage_state = VOLTAGE_LOW;
 102199c:	2300      	movs	r3, #0
 102199e:	f884 3053 	strb.w	r3, [r4, #83]	; 0x53
 10219a2:	e588      	b.n	10214b6 <SM_APP_vTask+0x8a>
					TIMER_start_ms_timer(SM_PHB_VOLTAGE_MONITOR_TIMER, meter.detect_voltage_change_period, null_action);
 10219a4:	4a10      	ldr	r2, [pc, #64]	; (10219e8 <SM_APP_vTask+0x5bc>)
 10219a6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 10219a8:	4b11      	ldr	r3, [pc, #68]	; (10219f0 <SM_APP_vTask+0x5c4>)
 10219aa:	2011      	movs	r0, #17
 10219ac:	4798      	blx	r3
 10219ae:	e5ab      	b.n	1021508 <SM_APP_vTask+0xdc>
					TIMER_reset_ms_timer(SM_PHB_VOLTAGE_MONITOR_TIMER);
 10219b0:	2011      	movs	r0, #17
 10219b2:	4b10      	ldr	r3, [pc, #64]	; (10219f4 <SM_APP_vTask+0x5c8>)
 10219b4:	4798      	blx	r3
					EVNT_APP_vRegister_event( (uint8_t)PHASE_B_LOW_VOLTAGE, voltage/1000, false, END_DEVICE, rtc.utc_timestamp );
 10219b6:	4b15      	ldr	r3, [pc, #84]	; (1021a0c <SM_APP_vTask+0x5e0>)
 10219b8:	fba3 3108 	umull	r3, r1, r3, r8
 10219bc:	f8db 3004 	ldr.w	r3, [fp, #4]
 10219c0:	9300      	str	r3, [sp, #0]
 10219c2:	2300      	movs	r3, #0
 10219c4:	461a      	mov	r2, r3
 10219c6:	f3c1 118f 	ubfx	r1, r1, #6, #16
 10219ca:	200a      	movs	r0, #10
 10219cc:	47d0      	blx	sl
					meter.phase_b.voltage_state = VOLTAGE_LOW;
 10219ce:	2300      	movs	r3, #0
 10219d0:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57
 10219d4:	e592      	b.n	10214fc <SM_APP_vTask+0xd0>
				TIMER_reset_ms_timer(SM_PHC_VOLTAGE_MONITOR_TIMER);
 10219d6:	4b07      	ldr	r3, [pc, #28]	; (10219f4 <SM_APP_vTask+0x5c8>)
 10219d8:	4798      	blx	r3
 10219da:	e6eb      	b.n	10217b4 <SM_APP_vTask+0x388>
 10219dc:	0101f2bd 	.word	0x0101f2bd
 10219e0:	010213bd 	.word	0x010213bd
 10219e4:	20016770 	.word	0x20016770
 10219e8:	0102ba4d 	.word	0x0102ba4d
 10219ec:	05265c00 	.word	0x05265c00
 10219f0:	0102ba8d 	.word	0x0102ba8d
 10219f4:	0102bb09 	.word	0x0102bb09
 10219f8:	0102baf5 	.word	0x0102baf5
 10219fc:	0102bae5 	.word	0x0102bae5
 1021a00:	01024cb9 	.word	0x01024cb9
 1021a04:	01024475 	.word	0x01024475
 1021a08:	0101a219 	.word	0x0101a219
 1021a0c:	10624dd3 	.word	0x10624dd3
				TIMER_reset_ms_timer(SM_PHA_VOLTAGE_MONITOR_TIMER);
 1021a10:	4b56      	ldr	r3, [pc, #344]	; (1021b6c <SM_APP_vTask+0x740>)
 1021a12:	4798      	blx	r3
 1021a14:	e729      	b.n	102186a <SM_APP_vTask+0x43e>
				TIMER_reset_ms_timer(SM_PHB_VOLTAGE_MONITOR_TIMER);
 1021a16:	4b55      	ldr	r3, [pc, #340]	; (1021b6c <SM_APP_vTask+0x740>)
 1021a18:	4798      	blx	r3
 1021a1a:	e741      	b.n	10218a0 <SM_APP_vTask+0x474>
				TIMER_reset_ms_timer(SM_PHC_VOLTAGE_MONITOR_TIMER);
 1021a1c:	4b53      	ldr	r3, [pc, #332]	; (1021b6c <SM_APP_vTask+0x740>)
 1021a1e:	4798      	blx	r3
 1021a20:	e75c      	b.n	10218dc <SM_APP_vTask+0x4b0>
				TIMER_reset_ms_timer(SM_PHA_VOLTAGE_MONITOR_TIMER);
 1021a22:	4b52      	ldr	r3, [pc, #328]	; (1021b6c <SM_APP_vTask+0x740>)
 1021a24:	4798      	blx	r3
 1021a26:	e705      	b.n	1021834 <SM_APP_vTask+0x408>
				TIMER_reset_ms_timer(SM_PHB_VOLTAGE_MONITOR_TIMER);
 1021a28:	4b50      	ldr	r3, [pc, #320]	; (1021b6c <SM_APP_vTask+0x740>)
 1021a2a:	4798      	blx	r3
 1021a2c:	e6e2      	b.n	10217f4 <SM_APP_vTask+0x3c8>
					TIMER_reset_ms_timer(SM_PHA_VOLTAGE_MONITOR_TIMER);
 1021a2e:	2010      	movs	r0, #16
 1021a30:	4b4e      	ldr	r3, [pc, #312]	; (1021b6c <SM_APP_vTask+0x740>)
 1021a32:	4798      	blx	r3
					EVNT_APP_vRegister_event( (uint8_t)PHASE_A_HIGH_VOLTAGE, voltage/1000, false, END_DEVICE, rtc.utc_timestamp );
 1021a34:	4b4e      	ldr	r3, [pc, #312]	; (1021b70 <SM_APP_vTask+0x744>)
 1021a36:	fba3 3108 	umull	r3, r1, r3, r8
 1021a3a:	f8db 3004 	ldr.w	r3, [fp, #4]
 1021a3e:	9300      	str	r3, [sp, #0]
 1021a40:	2300      	movs	r3, #0
 1021a42:	461a      	mov	r2, r3
 1021a44:	2009      	movs	r0, #9
 1021a46:	f3c1 118f 	ubfx	r1, r1, #6, #16
 1021a4a:	47d0      	blx	sl
					meter.phase_a.voltage_state = VOLTAGE_HIGH;
 1021a4c:	2302      	movs	r3, #2
 1021a4e:	f884 3053 	strb.w	r3, [r4, #83]	; 0x53
				if (!TIMER_is_ms_timer_running(SM_PHA_VOLTAGE_MONITOR_TIMER) ) {
 1021a52:	2010      	movs	r0, #16
 1021a54:	4b47      	ldr	r3, [pc, #284]	; (1021b74 <SM_APP_vTask+0x748>)
 1021a56:	4798      	blx	r3
 1021a58:	2800      	cmp	r0, #0
 1021a5a:	f47f aeeb 	bne.w	1021834 <SM_APP_vTask+0x408>
					TIMER_start_ms_timer(SM_PHA_VOLTAGE_MONITOR_TIMER, meter.detect_voltage_change_period, null_action);
 1021a5e:	4a46      	ldr	r2, [pc, #280]	; (1021b78 <SM_APP_vTask+0x74c>)
 1021a60:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 1021a62:	4b46      	ldr	r3, [pc, #280]	; (1021b7c <SM_APP_vTask+0x750>)
 1021a64:	2010      	movs	r0, #16
 1021a66:	4798      	blx	r3
 1021a68:	e6e4      	b.n	1021834 <SM_APP_vTask+0x408>
					TIMER_reset_ms_timer(SM_PHB_VOLTAGE_MONITOR_TIMER);
 1021a6a:	2011      	movs	r0, #17
 1021a6c:	4b3f      	ldr	r3, [pc, #252]	; (1021b6c <SM_APP_vTask+0x740>)
 1021a6e:	4798      	blx	r3
					EVNT_APP_vRegister_event( (uint8_t)PHASE_B_HIGH_VOLTAGE, voltage/1000, false, END_DEVICE, rtc.utc_timestamp );
 1021a70:	4b3f      	ldr	r3, [pc, #252]	; (1021b70 <SM_APP_vTask+0x744>)
 1021a72:	fba3 3108 	umull	r3, r1, r3, r8
 1021a76:	f8db 3004 	ldr.w	r3, [fp, #4]
 1021a7a:	9300      	str	r3, [sp, #0]
 1021a7c:	2300      	movs	r3, #0
 1021a7e:	461a      	mov	r2, r3
 1021a80:	200c      	movs	r0, #12
 1021a82:	f3c1 118f 	ubfx	r1, r1, #6, #16
 1021a86:	47d0      	blx	sl
					meter.phase_b.voltage_state = VOLTAGE_HIGH;
 1021a88:	2302      	movs	r3, #2
 1021a8a:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57
				if (!TIMER_is_ms_timer_running(SM_PHB_VOLTAGE_MONITOR_TIMER) ) {
 1021a8e:	2011      	movs	r0, #17
 1021a90:	4b38      	ldr	r3, [pc, #224]	; (1021b74 <SM_APP_vTask+0x748>)
 1021a92:	4798      	blx	r3
 1021a94:	2800      	cmp	r0, #0
 1021a96:	f47f aead 	bne.w	10217f4 <SM_APP_vTask+0x3c8>
					TIMER_start_ms_timer(SM_PHB_VOLTAGE_MONITOR_TIMER, meter.detect_voltage_change_period, null_action);
 1021a9a:	4a37      	ldr	r2, [pc, #220]	; (1021b78 <SM_APP_vTask+0x74c>)
 1021a9c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 1021a9e:	4b37      	ldr	r3, [pc, #220]	; (1021b7c <SM_APP_vTask+0x750>)
 1021aa0:	2011      	movs	r0, #17
 1021aa2:	4798      	blx	r3
 1021aa4:	e6a6      	b.n	10217f4 <SM_APP_vTask+0x3c8>
					TIMER_reset_ms_timer(SM_PHC_VOLTAGE_MONITOR_TIMER);
 1021aa6:	2012      	movs	r0, #18
 1021aa8:	4b30      	ldr	r3, [pc, #192]	; (1021b6c <SM_APP_vTask+0x740>)
 1021aaa:	4798      	blx	r3
					EVNT_APP_vRegister_event( (uint8_t)PHASE_C_HIGH_VOLTAGE, voltage/1000, false, END_DEVICE, rtc.utc_timestamp );
 1021aac:	4b30      	ldr	r3, [pc, #192]	; (1021b70 <SM_APP_vTask+0x744>)
 1021aae:	fba3 3108 	umull	r3, r1, r3, r8
 1021ab2:	f8db 3004 	ldr.w	r3, [fp, #4]
 1021ab6:	9300      	str	r3, [sp, #0]
 1021ab8:	2300      	movs	r3, #0
 1021aba:	461a      	mov	r2, r3
 1021abc:	f3c1 118f 	ubfx	r1, r1, #6, #16
 1021ac0:	200f      	movs	r0, #15
 1021ac2:	47d0      	blx	sl
					meter.phase_c.voltage_state = VOLTAGE_HIGH;
 1021ac4:	2302      	movs	r3, #2
 1021ac6:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
 1021aca:	e66a      	b.n	10217a2 <SM_APP_vTask+0x376>
					TIMER_reset_ms_timer(SM_PHA_VOLTAGE_MONITOR_TIMER);
 1021acc:	2010      	movs	r0, #16
 1021ace:	4b27      	ldr	r3, [pc, #156]	; (1021b6c <SM_APP_vTask+0x740>)
 1021ad0:	4798      	blx	r3
					EVNT_APP_vRegister_event( (uint8_t)PHASE_A_NORMAL_VOLTAGE, voltage/1000, false, END_DEVICE, rtc.utc_timestamp );
 1021ad2:	4b27      	ldr	r3, [pc, #156]	; (1021b70 <SM_APP_vTask+0x744>)
 1021ad4:	fba3 3108 	umull	r3, r1, r3, r8
 1021ad8:	f8db 3004 	ldr.w	r3, [fp, #4]
 1021adc:	9300      	str	r3, [sp, #0]
 1021ade:	2300      	movs	r3, #0
 1021ae0:	461a      	mov	r2, r3
 1021ae2:	2008      	movs	r0, #8
 1021ae4:	f3c1 118f 	ubfx	r1, r1, #6, #16
 1021ae8:	47d0      	blx	sl
					meter.phase_a.voltage_state = VOLTAGE_NORMAL;
 1021aea:	2301      	movs	r3, #1
 1021aec:	f884 3053 	strb.w	r3, [r4, #83]	; 0x53
				if (!TIMER_is_ms_timer_running(SM_PHA_VOLTAGE_MONITOR_TIMER) ) {
 1021af0:	2010      	movs	r0, #16
 1021af2:	4b20      	ldr	r3, [pc, #128]	; (1021b74 <SM_APP_vTask+0x748>)
 1021af4:	4798      	blx	r3
 1021af6:	2800      	cmp	r0, #0
 1021af8:	f47f aeb7 	bne.w	102186a <SM_APP_vTask+0x43e>
					TIMER_start_ms_timer(SM_PHA_VOLTAGE_MONITOR_TIMER, meter.detect_voltage_change_period, null_action);
 1021afc:	4a1e      	ldr	r2, [pc, #120]	; (1021b78 <SM_APP_vTask+0x74c>)
 1021afe:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 1021b00:	4b1e      	ldr	r3, [pc, #120]	; (1021b7c <SM_APP_vTask+0x750>)
 1021b02:	2010      	movs	r0, #16
 1021b04:	4798      	blx	r3
 1021b06:	e6b0      	b.n	102186a <SM_APP_vTask+0x43e>
					TIMER_reset_ms_timer(SM_PHB_VOLTAGE_MONITOR_TIMER);
 1021b08:	2011      	movs	r0, #17
 1021b0a:	4b18      	ldr	r3, [pc, #96]	; (1021b6c <SM_APP_vTask+0x740>)
 1021b0c:	4798      	blx	r3
					EVNT_APP_vRegister_event( (uint8_t)PHASE_B_NORMAL_VOLTAGE, voltage/1000, false, END_DEVICE, rtc.utc_timestamp );
 1021b0e:	4b18      	ldr	r3, [pc, #96]	; (1021b70 <SM_APP_vTask+0x744>)
 1021b10:	fba3 3108 	umull	r3, r1, r3, r8
 1021b14:	f8db 3004 	ldr.w	r3, [fp, #4]
 1021b18:	9300      	str	r3, [sp, #0]
 1021b1a:	2300      	movs	r3, #0
 1021b1c:	461a      	mov	r2, r3
 1021b1e:	200b      	movs	r0, #11
 1021b20:	f3c1 118f 	ubfx	r1, r1, #6, #16
 1021b24:	47d0      	blx	sl
					meter.phase_b.voltage_state = VOLTAGE_NORMAL;
 1021b26:	2301      	movs	r3, #1
 1021b28:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57
				if (!TIMER_is_ms_timer_running(SM_PHB_VOLTAGE_MONITOR_TIMER) ) {
 1021b2c:	2011      	movs	r0, #17
 1021b2e:	4b11      	ldr	r3, [pc, #68]	; (1021b74 <SM_APP_vTask+0x748>)
 1021b30:	4798      	blx	r3
 1021b32:	2800      	cmp	r0, #0
 1021b34:	f47f aeb4 	bne.w	10218a0 <SM_APP_vTask+0x474>
					TIMER_start_ms_timer(SM_PHB_VOLTAGE_MONITOR_TIMER, meter.detect_voltage_change_period, null_action);
 1021b38:	4a0f      	ldr	r2, [pc, #60]	; (1021b78 <SM_APP_vTask+0x74c>)
 1021b3a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 1021b3c:	4b0f      	ldr	r3, [pc, #60]	; (1021b7c <SM_APP_vTask+0x750>)
 1021b3e:	2011      	movs	r0, #17
 1021b40:	4798      	blx	r3
 1021b42:	e6ad      	b.n	10218a0 <SM_APP_vTask+0x474>
					TIMER_reset_ms_timer(SM_PHC_VOLTAGE_MONITOR_TIMER);
 1021b44:	2012      	movs	r0, #18
 1021b46:	4b09      	ldr	r3, [pc, #36]	; (1021b6c <SM_APP_vTask+0x740>)
 1021b48:	4798      	blx	r3
					EVNT_APP_vRegister_event( (uint8_t)PHASE_C_NORMAL_VOLTAGE, voltage/1000, false, END_DEVICE, rtc.utc_timestamp );
 1021b4a:	4b09      	ldr	r3, [pc, #36]	; (1021b70 <SM_APP_vTask+0x744>)
 1021b4c:	fba3 3108 	umull	r3, r1, r3, r8
 1021b50:	f8db 3004 	ldr.w	r3, [fp, #4]
 1021b54:	9300      	str	r3, [sp, #0]
 1021b56:	2300      	movs	r3, #0
 1021b58:	461a      	mov	r2, r3
 1021b5a:	f3c1 118f 	ubfx	r1, r1, #6, #16
 1021b5e:	200e      	movs	r0, #14
 1021b60:	47d0      	blx	sl
					meter.phase_c.voltage_state = VOLTAGE_NORMAL;
 1021b62:	2301      	movs	r3, #1
 1021b64:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
 1021b68:	e6af      	b.n	10218ca <SM_APP_vTask+0x49e>
 1021b6a:	bf00      	nop
 1021b6c:	0102bb09 	.word	0x0102bb09
 1021b70:	10624dd3 	.word	0x10624dd3
 1021b74:	0102bae5 	.word	0x0102bae5
 1021b78:	0102ba4d 	.word	0x0102ba4d
 1021b7c:	0102ba8d 	.word	0x0102ba8d

01021b80 <SM_APP_vExecute_diagnostics_procedure>:
void SM_APP_vExecute_diagnostics_procedure(void) {
 1021b80:	b510      	push	{r4, lr}
	if ( SM_APP_bIs_ed_configuration_error() ) {
 1021b82:	4b24      	ldr	r3, [pc, #144]	; (1021c14 <SM_APP_vExecute_diagnostics_procedure+0x94>)
void SM_APP_vExecute_diagnostics_procedure(void) {
 1021b84:	b082      	sub	sp, #8
	if ( SM_APP_bIs_ed_configuration_error() ) {
 1021b86:	4798      	blx	r3
 1021b88:	2800      	cmp	r0, #0
 1021b8a:	d137      	bne.n	1021bfc <SM_APP_vExecute_diagnostics_procedure+0x7c>
	if ( SM_APP_bIs_ed_rom_failure() ) {
 1021b8c:	4b22      	ldr	r3, [pc, #136]	; (1021c18 <SM_APP_vExecute_diagnostics_procedure+0x98>)
 1021b8e:	4798      	blx	r3
 1021b90:	2800      	cmp	r0, #0
 1021b92:	d12f      	bne.n	1021bf4 <SM_APP_vExecute_diagnostics_procedure+0x74>
	if ( SM_APP_ucGet_nonvol_mem_state() != (uint8_t)3 ) {
 1021b94:	4b21      	ldr	r3, [pc, #132]	; (1021c1c <SM_APP_vExecute_diagnostics_procedure+0x9c>)
 1021b96:	4798      	blx	r3
 1021b98:	2803      	cmp	r0, #3
 1021b9a:	d002      	beq.n	1021ba2 <SM_APP_vExecute_diagnostics_procedure+0x22>
		GRAL_APP_vSet_flag_st_3_ed_std_status1(NONVOL_MEM_FAILURE_FLAG);
 1021b9c:	2005      	movs	r0, #5
 1021b9e:	4b20      	ldr	r3, [pc, #128]	; (1021c20 <SM_APP_vExecute_diagnostics_procedure+0xa0>)
 1021ba0:	4798      	blx	r3
	uint32_t dsp_is_running = VMetrology.DSP_ST.STATUS.WORD;
 1021ba2:	4b20      	ldr	r3, [pc, #128]	; (1021c24 <SM_APP_vExecute_diagnostics_procedure+0xa4>)
	if ( (dsp_is_running != DSP_IS_RUNNING) || (metrology_running != METROLOGY_IS_RUNNING) || (atsense_ok != ATSENSE_IS_OK) ) {
 1021ba4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 1021ba8:	2a08      	cmp	r2, #8
 1021baa:	d02b      	beq.n	1021c04 <SM_APP_vExecute_diagnostics_procedure+0x84>
		GRAL_APP_vSet_flag_st_3_ed_std_status1(MEASUREMENT_ERROR_FLAG);
 1021bac:	2007      	movs	r0, #7
 1021bae:	4b1c      	ldr	r3, [pc, #112]	; (1021c20 <SM_APP_vExecute_diagnostics_procedure+0xa0>)
 1021bb0:	4798      	blx	r3
	int32_t energy = (int32_t)METROLOGY_APP_dGet_instantaneous_value(P_T_ID);
 1021bb2:	4b1d      	ldr	r3, [pc, #116]	; (1021c28 <SM_APP_vExecute_diagnostics_procedure+0xa8>)
 1021bb4:	2000      	movs	r0, #0
 1021bb6:	4798      	blx	r3
 1021bb8:	4b1c      	ldr	r3, [pc, #112]	; (1021c2c <SM_APP_vExecute_diagnostics_procedure+0xac>)
 1021bba:	4798      	blx	r3
	if ( energy < 0 ) {
 1021bbc:	2800      	cmp	r0, #0
 1021bbe:	db04      	blt.n	1021bca <SM_APP_vExecute_diagnostics_procedure+0x4a>
	GRAL_APP_vStore_st_3_ed_std_status1();
 1021bc0:	4b1b      	ldr	r3, [pc, #108]	; (1021c30 <SM_APP_vExecute_diagnostics_procedure+0xb0>)
}
 1021bc2:	b002      	add	sp, #8
 1021bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	GRAL_APP_vStore_st_3_ed_std_status1();
 1021bc8:	4718      	bx	r3
	if ( SM_APP_bIs_ed_reverse_rotation() && ( (GRAL_APP_usGet_st_3_ed_std_status1() & REVERSE_ROTATION_FLAG_bm) == 0 ) ) {
 1021bca:	4b1a      	ldr	r3, [pc, #104]	; (1021c34 <SM_APP_vExecute_diagnostics_procedure+0xb4>)
 1021bcc:	4798      	blx	r3
 1021bce:	f410 5300 	ands.w	r3, r0, #8192	; 0x2000
 1021bd2:	d1f5      	bne.n	1021bc0 <SM_APP_vExecute_diagnostics_procedure+0x40>
		EVNT_APP_vRegister_event(REVERSE_ROTATION_DETECTED, 0, true, END_DEVICE, rtc.utc_timestamp);
 1021bd4:	4a18      	ldr	r2, [pc, #96]	; (1021c38 <SM_APP_vExecute_diagnostics_procedure+0xb8>)
 1021bd6:	4c19      	ldr	r4, [pc, #100]	; (1021c3c <SM_APP_vExecute_diagnostics_procedure+0xbc>)
 1021bd8:	6852      	ldr	r2, [r2, #4]
 1021bda:	9200      	str	r2, [sp, #0]
 1021bdc:	4619      	mov	r1, r3
 1021bde:	2201      	movs	r2, #1
 1021be0:	2030      	movs	r0, #48	; 0x30
 1021be2:	47a0      	blx	r4
		GRAL_APP_vSet_flag_st_3_ed_std_status1(REVERSE_ROTATION_FLAG);
 1021be4:	200d      	movs	r0, #13
 1021be6:	4b0e      	ldr	r3, [pc, #56]	; (1021c20 <SM_APP_vExecute_diagnostics_procedure+0xa0>)
 1021be8:	4798      	blx	r3
	GRAL_APP_vStore_st_3_ed_std_status1();
 1021bea:	4b11      	ldr	r3, [pc, #68]	; (1021c30 <SM_APP_vExecute_diagnostics_procedure+0xb0>)
}
 1021bec:	b002      	add	sp, #8
 1021bee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	GRAL_APP_vStore_st_3_ed_std_status1();
 1021bf2:	4718      	bx	r3
		GRAL_APP_vSet_flag_st_3_ed_std_status1(ROM_FAILURE_FLAG);
 1021bf4:	2004      	movs	r0, #4
 1021bf6:	4b0a      	ldr	r3, [pc, #40]	; (1021c20 <SM_APP_vExecute_diagnostics_procedure+0xa0>)
 1021bf8:	4798      	blx	r3
 1021bfa:	e7cb      	b.n	1021b94 <SM_APP_vExecute_diagnostics_procedure+0x14>
		GRAL_APP_vSet_flag_st_3_ed_std_status1(CONFIGURATION_ERROR_FLAG);
 1021bfc:	2001      	movs	r0, #1
 1021bfe:	4b08      	ldr	r3, [pc, #32]	; (1021c20 <SM_APP_vExecute_diagnostics_procedure+0xa0>)
 1021c00:	4798      	blx	r3
 1021c02:	e7c3      	b.n	1021b8c <SM_APP_vExecute_diagnostics_procedure+0xc>
	if ( (dsp_is_running != DSP_IS_RUNNING) || (metrology_running != METROLOGY_IS_RUNNING) || (atsense_ok != ATSENSE_IS_OK) ) {
 1021c04:	681a      	ldr	r2, [r3, #0]
 1021c06:	2a02      	cmp	r2, #2
 1021c08:	d1d0      	bne.n	1021bac <SM_APP_vExecute_diagnostics_procedure+0x2c>
	uint32_t atsense_ok = VMetrology.DSP_ST.STATE_FLAG.WORD;
 1021c0a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
	if ( (dsp_is_running != DSP_IS_RUNNING) || (metrology_running != METROLOGY_IS_RUNNING) || (atsense_ok != ATSENSE_IS_OK) ) {
 1021c0e:	05db      	lsls	r3, r3, #23
 1021c10:	d4cc      	bmi.n	1021bac <SM_APP_vExecute_diagnostics_procedure+0x2c>
 1021c12:	e7ce      	b.n	1021bb2 <SM_APP_vExecute_diagnostics_procedure+0x32>
 1021c14:	010202d9 	.word	0x010202d9
 1021c18:	0101f2bd 	.word	0x0101f2bd
 1021c1c:	010213bd 	.word	0x010213bd
 1021c20:	0101a219 	.word	0x0101a219
 1021c24:	20016770 	.word	0x20016770
 1021c28:	0101f065 	.word	0x0101f065
 1021c2c:	01030565 	.word	0x01030565
 1021c30:	0101a1f1 	.word	0x0101a1f1
 1021c34:	0101a155 	.word	0x0101a155
 1021c38:	20017160 	.word	0x20017160
 1021c3c:	01019961 	.word	0x01019961

01021c40 <SM_APP_bBack_up_st_1>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bBack_up_st_1(uint16_t backup_area_id) {
 1021c40:	b570      	push	{r4, r5, r6, lr}
	
	bool is_ok = false;
	uint16_t table_size;
	uint16_t calc_crc;
	
	table_size = GRAL_APP_usSt_1_get_size();
 1021c42:	4b2f      	ldr	r3, [pc, #188]	; (1021d00 <SM_APP_bBack_up_st_1+0xc0>)
bool SM_APP_bBack_up_st_1(uint16_t backup_area_id) {
 1021c44:	b082      	sub	sp, #8
 1021c46:	4605      	mov	r5, r0
	table_size = GRAL_APP_usSt_1_get_size();
 1021c48:	4798      	blx	r3

	if ( table_size > 0 ) {
 1021c4a:	2800      	cmp	r0, #0
 1021c4c:	d033      	beq.n	1021cb6 <SM_APP_bBack_up_st_1+0x76>

		if ( sizeof(temp_table_backup) > table_size ) {
 1021c4e:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
 1021c52:	4604      	mov	r4, r0
 1021c54:	d303      	bcc.n	1021c5e <SM_APP_bBack_up_st_1+0x1e>
	bool is_ok = false;
 1021c56:	2400      	movs	r4, #0
	else {
		is_ok = true;
	}

	return is_ok;
}
 1021c58:	4620      	mov	r0, r4
 1021c5a:	b002      	add	sp, #8
 1021c5c:	bd70      	pop	{r4, r5, r6, pc}
			GRAL_APP_bSt_1_execute_table_reading(&temp_table_backup[0]);
 1021c5e:	4b29      	ldr	r3, [pc, #164]	; (1021d04 <SM_APP_bBack_up_st_1+0xc4>)
 1021c60:	4829      	ldr	r0, [pc, #164]	; (1021d08 <SM_APP_bBack_up_st_1+0xc8>)
 1021c62:	4798      	blx	r3
			calc_crc = CRC_crc16(&temp_table_backup[0], table_size);
 1021c64:	4621      	mov	r1, r4
 1021c66:	4828      	ldr	r0, [pc, #160]	; (1021d08 <SM_APP_bBack_up_st_1+0xc8>)
 1021c68:	4b28      	ldr	r3, [pc, #160]	; (1021d0c <SM_APP_bBack_up_st_1+0xcc>)
 1021c6a:	4798      	blx	r3
 1021c6c:	f8ad 0006 	strh.w	r0, [sp, #6]
			switch (backup_area_id) {
 1021c70:	b32d      	cbz	r5, 1021cbe <SM_APP_bBack_up_st_1+0x7e>
 1021c72:	2d01      	cmp	r5, #1
 1021c74:	d1ef      	bne.n	1021c56 <SM_APP_bBack_up_st_1+0x16>
 1021c76:	a902      	add	r1, sp, #8
 1021c78:	23ff      	movs	r3, #255	; 0xff
 1021c7a:	f801 3d04 	strb.w	r3, [r1, #-4]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1021c7e:	462a      	mov	r2, r5
 1021c80:	4e23      	ldr	r6, [pc, #140]	; (1021d10 <SM_APP_bBack_up_st_1+0xd0>)
 1021c82:	f642 5010 	movw	r0, #11536	; 0x2d10
 1021c86:	47b0      	blx	r6
					is_ok = EEPROM_writer(CCP_ST_1_START_ADDR, &temp_table_backup, table_size);
 1021c88:	4622      	mov	r2, r4
 1021c8a:	491f      	ldr	r1, [pc, #124]	; (1021d08 <SM_APP_bBack_up_st_1+0xc8>)
 1021c8c:	f642 5013 	movw	r0, #11539	; 0x2d13
 1021c90:	47b0      	blx	r6
					if ( is_ok ) {
 1021c92:	4604      	mov	r4, r0
 1021c94:	2800      	cmp	r0, #0
 1021c96:	d0de      	beq.n	1021c56 <SM_APP_bBack_up_st_1+0x16>
 1021c98:	a902      	add	r1, sp, #8
 1021c9a:	2345      	movs	r3, #69	; 0x45
 1021c9c:	f801 3d03 	strb.w	r3, [r1, #-3]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1021ca0:	462a      	mov	r2, r5
 1021ca2:	f642 5010 	movw	r0, #11536	; 0x2d10
 1021ca6:	47b0      	blx	r6
						EEPROM_writer(CCP_ST_1_NVM_CRC_ADDR, &calc_crc, 2);
 1021ca8:	2202      	movs	r2, #2
 1021caa:	f10d 0106 	add.w	r1, sp, #6
 1021cae:	f642 5011 	movw	r0, #11537	; 0x2d11
 1021cb2:	47b0      	blx	r6
 1021cb4:	e7d0      	b.n	1021c58 <SM_APP_bBack_up_st_1+0x18>
		is_ok = true;
 1021cb6:	2401      	movs	r4, #1
}
 1021cb8:	4620      	mov	r0, r4
 1021cba:	b002      	add	sp, #8
 1021cbc:	bd70      	pop	{r4, r5, r6, pc}
 1021cbe:	a902      	add	r1, sp, #8
 1021cc0:	23ff      	movs	r3, #255	; 0xff
 1021cc2:	f801 3d06 	strb.w	r3, [r1, #-6]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1021cc6:	2201      	movs	r2, #1
 1021cc8:	4d11      	ldr	r5, [pc, #68]	; (1021d10 <SM_APP_bBack_up_st_1+0xd0>)
 1021cca:	f641 1088 	movw	r0, #6536	; 0x1988
 1021cce:	47a8      	blx	r5
					is_ok = EEPROM_writer(MCP_ST_1_START_ADDR, &temp_table_backup, table_size);
 1021cd0:	4622      	mov	r2, r4
 1021cd2:	490d      	ldr	r1, [pc, #52]	; (1021d08 <SM_APP_bBack_up_st_1+0xc8>)
 1021cd4:	f641 108b 	movw	r0, #6539	; 0x198b
 1021cd8:	47a8      	blx	r5
					if ( is_ok ) {
 1021cda:	4604      	mov	r4, r0
 1021cdc:	2800      	cmp	r0, #0
 1021cde:	d0ba      	beq.n	1021c56 <SM_APP_bBack_up_st_1+0x16>
 1021ce0:	a902      	add	r1, sp, #8
 1021ce2:	2345      	movs	r3, #69	; 0x45
 1021ce4:	f801 3d05 	strb.w	r3, [r1, #-5]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1021ce8:	2201      	movs	r2, #1
 1021cea:	f641 1088 	movw	r0, #6536	; 0x1988
 1021cee:	47a8      	blx	r5
						EEPROM_writer(MCP_ST_1_NVM_CRC_ADDR, &calc_crc, 2);
 1021cf0:	2202      	movs	r2, #2
 1021cf2:	f10d 0106 	add.w	r1, sp, #6
 1021cf6:	f641 1089 	movw	r0, #6537	; 0x1989
 1021cfa:	47a8      	blx	r5
 1021cfc:	e7ac      	b.n	1021c58 <SM_APP_bBack_up_st_1+0x18>
 1021cfe:	bf00      	nop
 1021d00:	01019c25 	.word	0x01019c25
 1021d04:	01019bc9 	.word	0x01019bc9
 1021d08:	20000ed0 	.word	0x20000ed0
 1021d0c:	01016b5d 	.word	0x01016b5d
 1021d10:	01017509 	.word	0x01017509

01021d14 <SM_APP_bRestore_st_1_from_backup>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bRestore_st_1_from_backup(uint16_t backup_area_id) {
 1021d14:	b530      	push	{r4, r5, lr}
 1021d16:	b083      	sub	sp, #12

	bool is_ok = false;
	uint16_t table_size;
	uint16_t backup_crc = 0, calc_crc = 1;
 1021d18:	2200      	movs	r2, #0

	table_size = GRAL_APP_usSt_1_get_size();
 1021d1a:	4b26      	ldr	r3, [pc, #152]	; (1021db4 <SM_APP_bRestore_st_1_from_backup+0xa0>)
	uint16_t backup_crc = 0, calc_crc = 1;
 1021d1c:	f8ad 2006 	strh.w	r2, [sp, #6]
bool SM_APP_bRestore_st_1_from_backup(uint16_t backup_area_id) {
 1021d20:	4605      	mov	r5, r0
	table_size = GRAL_APP_usSt_1_get_size();
 1021d22:	4798      	blx	r3

	if ( table_size > 0 ) {
 1021d24:	b1e0      	cbz	r0, 1021d60 <SM_APP_bRestore_st_1_from_backup+0x4c>

		if ( sizeof(temp_table_backup) > table_size ) {
 1021d26:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
 1021d2a:	4604      	mov	r4, r0
 1021d2c:	d215      	bcs.n	1021d5a <SM_APP_bRestore_st_1_from_backup+0x46>
		
			switch (backup_area_id) {
 1021d2e:	b1f5      	cbz	r5, 1021d6e <SM_APP_bRestore_st_1_from_backup+0x5a>
 1021d30:	2d01      	cmp	r5, #1
 1021d32:	d10a      	bne.n	1021d4a <SM_APP_bRestore_st_1_from_backup+0x36>
	EEPROM_reader( table_state_addr, &state, 1 );
 1021d34:	462a      	mov	r2, r5
 1021d36:	f10d 0105 	add.w	r1, sp, #5
 1021d3a:	f642 5010 	movw	r0, #11536	; 0x2d10
 1021d3e:	4d1e      	ldr	r5, [pc, #120]	; (1021db8 <SM_APP_bRestore_st_1_from_backup+0xa4>)
 1021d40:	47a8      	blx	r5
	return state;
 1021d42:	f89d 3005 	ldrb.w	r3, [sp, #5]
					}
					break;

				case MP_120_CCP_AREA:
			
					if ( SM_APP_ucGet_table_state(CCP_ST_1_PROG_STATE_ADDR) == C1219_TABLE_FULL ) {
 1021d46:	2b45      	cmp	r3, #69	; 0x45
 1021d48:	d028      	beq.n	1021d9c <SM_APP_bRestore_st_1_from_backup+0x88>

				default:
					break;
			}

			calc_crc = CRC_crc16(&temp_table_backup[0], table_size);
 1021d4a:	4b1c      	ldr	r3, [pc, #112]	; (1021dbc <SM_APP_bRestore_st_1_from_backup+0xa8>)
 1021d4c:	481c      	ldr	r0, [pc, #112]	; (1021dc0 <SM_APP_bRestore_st_1_from_backup+0xac>)
 1021d4e:	4621      	mov	r1, r4
 1021d50:	4798      	blx	r3
			is_ok = (calc_crc == backup_crc) ? GRAL_APP_bSt_1_execute_table_writing(&temp_table_backup[0]) : false;
 1021d52:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 1021d56:	4283      	cmp	r3, r0
 1021d58:	d005      	beq.n	1021d66 <SM_APP_bRestore_st_1_from_backup+0x52>
	bool is_ok = false;
 1021d5a:	2000      	movs	r0, #0
	else {
		is_ok = true;
	}

	return is_ok;
}
 1021d5c:	b003      	add	sp, #12
 1021d5e:	bd30      	pop	{r4, r5, pc}
		is_ok = true;
 1021d60:	2001      	movs	r0, #1
}
 1021d62:	b003      	add	sp, #12
 1021d64:	bd30      	pop	{r4, r5, pc}
			is_ok = (calc_crc == backup_crc) ? GRAL_APP_bSt_1_execute_table_writing(&temp_table_backup[0]) : false;
 1021d66:	4b17      	ldr	r3, [pc, #92]	; (1021dc4 <SM_APP_bRestore_st_1_from_backup+0xb0>)
 1021d68:	4815      	ldr	r0, [pc, #84]	; (1021dc0 <SM_APP_bRestore_st_1_from_backup+0xac>)
 1021d6a:	4798      	blx	r3
 1021d6c:	e7f6      	b.n	1021d5c <SM_APP_bRestore_st_1_from_backup+0x48>
	EEPROM_reader( table_state_addr, &state, 1 );
 1021d6e:	2201      	movs	r2, #1
 1021d70:	f10d 0105 	add.w	r1, sp, #5
 1021d74:	f641 1088 	movw	r0, #6536	; 0x1988
 1021d78:	4d0f      	ldr	r5, [pc, #60]	; (1021db8 <SM_APP_bRestore_st_1_from_backup+0xa4>)
 1021d7a:	47a8      	blx	r5
	return state;
 1021d7c:	f89d 3005 	ldrb.w	r3, [sp, #5]
					if ( SM_APP_ucGet_table_state(MCP_ST_1_PROG_STATE_ADDR) == C1219_TABLE_FULL ) {
 1021d80:	2b45      	cmp	r3, #69	; 0x45
 1021d82:	d1e2      	bne.n	1021d4a <SM_APP_bRestore_st_1_from_backup+0x36>
						EEPROM_reader(MCP_ST_1_NVM_CRC_ADDR, &backup_crc, 2);
 1021d84:	f10d 0106 	add.w	r1, sp, #6
 1021d88:	2202      	movs	r2, #2
 1021d8a:	f641 1089 	movw	r0, #6537	; 0x1989
 1021d8e:	47a8      	blx	r5
						EEPROM_reader(MCP_ST_1_START_ADDR, &temp_table_backup, table_size);
 1021d90:	4622      	mov	r2, r4
 1021d92:	490b      	ldr	r1, [pc, #44]	; (1021dc0 <SM_APP_bRestore_st_1_from_backup+0xac>)
 1021d94:	f641 108b 	movw	r0, #6539	; 0x198b
 1021d98:	47a8      	blx	r5
 1021d9a:	e7d6      	b.n	1021d4a <SM_APP_bRestore_st_1_from_backup+0x36>
						EEPROM_reader(CCP_ST_1_NVM_CRC_ADDR, &backup_crc, 2);
 1021d9c:	f10d 0106 	add.w	r1, sp, #6
 1021da0:	2202      	movs	r2, #2
 1021da2:	f642 5011 	movw	r0, #11537	; 0x2d11
 1021da6:	47a8      	blx	r5
						EEPROM_reader(CCP_ST_1_START_ADDR, &temp_table_backup, table_size);
 1021da8:	4622      	mov	r2, r4
 1021daa:	4905      	ldr	r1, [pc, #20]	; (1021dc0 <SM_APP_bRestore_st_1_from_backup+0xac>)
 1021dac:	f642 5013 	movw	r0, #11539	; 0x2d13
 1021db0:	47a8      	blx	r5
 1021db2:	e7ca      	b.n	1021d4a <SM_APP_bRestore_st_1_from_backup+0x36>
 1021db4:	01019c25 	.word	0x01019c25
 1021db8:	01017511 	.word	0x01017511
 1021dbc:	01016b5d 	.word	0x01016b5d
 1021dc0:	20000ed0 	.word	0x20000ed0
 1021dc4:	01019c0d 	.word	0x01019c0d

01021dc8 <SM_APP_bBack_up_st_6>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bBack_up_st_6(uint16_t backup_area_id) {
 1021dc8:	b570      	push	{r4, r5, r6, lr}
	
	bool is_ok = false;
	uint16_t table_size;
	uint16_t calc_crc;
	
	table_size = GRAL_APP_usSt_6_get_size();
 1021dca:	4b2f      	ldr	r3, [pc, #188]	; (1021e88 <SM_APP_bBack_up_st_6+0xc0>)
bool SM_APP_bBack_up_st_6(uint16_t backup_area_id) {
 1021dcc:	b082      	sub	sp, #8
 1021dce:	4605      	mov	r5, r0
	table_size = GRAL_APP_usSt_6_get_size();
 1021dd0:	4798      	blx	r3

	if ( table_size > 0 ) {
 1021dd2:	2800      	cmp	r0, #0
 1021dd4:	d033      	beq.n	1021e3e <SM_APP_bBack_up_st_6+0x76>

		if ( sizeof(temp_table_backup) > table_size ) {
 1021dd6:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
 1021dda:	4604      	mov	r4, r0
 1021ddc:	d303      	bcc.n	1021de6 <SM_APP_bBack_up_st_6+0x1e>
	bool is_ok = false;
 1021dde:	2400      	movs	r4, #0
	else {
		is_ok = true;
	}

	return is_ok;
}
 1021de0:	4620      	mov	r0, r4
 1021de2:	b002      	add	sp, #8
 1021de4:	bd70      	pop	{r4, r5, r6, pc}
			GRAL_APP_bSt_6_execute_table_reading(&temp_table_backup[0]);
 1021de6:	4b29      	ldr	r3, [pc, #164]	; (1021e8c <SM_APP_bBack_up_st_6+0xc4>)
 1021de8:	4829      	ldr	r0, [pc, #164]	; (1021e90 <SM_APP_bBack_up_st_6+0xc8>)
 1021dea:	4798      	blx	r3
			calc_crc = CRC_crc16(&temp_table_backup[0], table_size);
 1021dec:	4621      	mov	r1, r4
 1021dee:	4828      	ldr	r0, [pc, #160]	; (1021e90 <SM_APP_bBack_up_st_6+0xc8>)
 1021df0:	4b28      	ldr	r3, [pc, #160]	; (1021e94 <SM_APP_bBack_up_st_6+0xcc>)
 1021df2:	4798      	blx	r3
 1021df4:	f8ad 0006 	strh.w	r0, [sp, #6]
			switch (backup_area_id) {
 1021df8:	b32d      	cbz	r5, 1021e46 <SM_APP_bBack_up_st_6+0x7e>
 1021dfa:	2d01      	cmp	r5, #1
 1021dfc:	d1ef      	bne.n	1021dde <SM_APP_bBack_up_st_6+0x16>
 1021dfe:	a902      	add	r1, sp, #8
 1021e00:	23ff      	movs	r3, #255	; 0xff
 1021e02:	f801 3d04 	strb.w	r3, [r1, #-4]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1021e06:	462a      	mov	r2, r5
 1021e08:	4e23      	ldr	r6, [pc, #140]	; (1021e98 <SM_APP_bBack_up_st_6+0xd0>)
 1021e0a:	f642 5043 	movw	r0, #11587	; 0x2d43
 1021e0e:	47b0      	blx	r6
				is_ok = EEPROM_writer(CCP_ST_6_START_ADDR, &temp_table_backup, table_size);
 1021e10:	4622      	mov	r2, r4
 1021e12:	491f      	ldr	r1, [pc, #124]	; (1021e90 <SM_APP_bBack_up_st_6+0xc8>)
 1021e14:	f642 5046 	movw	r0, #11590	; 0x2d46
 1021e18:	47b0      	blx	r6
				if ( is_ok ) {
 1021e1a:	4604      	mov	r4, r0
 1021e1c:	2800      	cmp	r0, #0
 1021e1e:	d0de      	beq.n	1021dde <SM_APP_bBack_up_st_6+0x16>
 1021e20:	a902      	add	r1, sp, #8
 1021e22:	2345      	movs	r3, #69	; 0x45
 1021e24:	f801 3d03 	strb.w	r3, [r1, #-3]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1021e28:	462a      	mov	r2, r5
 1021e2a:	f642 5043 	movw	r0, #11587	; 0x2d43
 1021e2e:	47b0      	blx	r6
					EEPROM_writer(CCP_ST_6_NVM_CRC_ADDR, &calc_crc, 2);
 1021e30:	2202      	movs	r2, #2
 1021e32:	f10d 0106 	add.w	r1, sp, #6
 1021e36:	f642 5044 	movw	r0, #11588	; 0x2d44
 1021e3a:	47b0      	blx	r6
 1021e3c:	e7d0      	b.n	1021de0 <SM_APP_bBack_up_st_6+0x18>
		is_ok = true;
 1021e3e:	2401      	movs	r4, #1
}
 1021e40:	4620      	mov	r0, r4
 1021e42:	b002      	add	sp, #8
 1021e44:	bd70      	pop	{r4, r5, r6, pc}
 1021e46:	a902      	add	r1, sp, #8
 1021e48:	23ff      	movs	r3, #255	; 0xff
 1021e4a:	f801 3d06 	strb.w	r3, [r1, #-6]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1021e4e:	2201      	movs	r2, #1
 1021e50:	4d11      	ldr	r5, [pc, #68]	; (1021e98 <SM_APP_bBack_up_st_6+0xd0>)
 1021e52:	f641 10bb 	movw	r0, #6587	; 0x19bb
 1021e56:	47a8      	blx	r5
				is_ok = EEPROM_writer(MCP_ST_6_START_ADDR, &temp_table_backup, table_size);
 1021e58:	4622      	mov	r2, r4
 1021e5a:	490d      	ldr	r1, [pc, #52]	; (1021e90 <SM_APP_bBack_up_st_6+0xc8>)
 1021e5c:	f641 10be 	movw	r0, #6590	; 0x19be
 1021e60:	47a8      	blx	r5
				if ( is_ok ) {
 1021e62:	4604      	mov	r4, r0
 1021e64:	2800      	cmp	r0, #0
 1021e66:	d0ba      	beq.n	1021dde <SM_APP_bBack_up_st_6+0x16>
 1021e68:	a902      	add	r1, sp, #8
 1021e6a:	2345      	movs	r3, #69	; 0x45
 1021e6c:	f801 3d05 	strb.w	r3, [r1, #-5]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1021e70:	2201      	movs	r2, #1
 1021e72:	f641 10bb 	movw	r0, #6587	; 0x19bb
 1021e76:	47a8      	blx	r5
					EEPROM_writer(MCP_ST_6_NVM_CRC_ADDR, &calc_crc, 2);
 1021e78:	2202      	movs	r2, #2
 1021e7a:	f10d 0106 	add.w	r1, sp, #6
 1021e7e:	f641 10bc 	movw	r0, #6588	; 0x19bc
 1021e82:	47a8      	blx	r5
 1021e84:	e7ac      	b.n	1021de0 <SM_APP_bBack_up_st_6+0x18>
 1021e86:	bf00      	nop
 1021e88:	01019fc9 	.word	0x01019fc9
 1021e8c:	01019f81 	.word	0x01019f81
 1021e90:	20000ed0 	.word	0x20000ed0
 1021e94:	01016b5d 	.word	0x01016b5d
 1021e98:	01017509 	.word	0x01017509

01021e9c <SM_APP_bRestore_st_6_from_backup>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bRestore_st_6_from_backup(uint16_t backup_area_id) {
 1021e9c:	b530      	push	{r4, r5, lr}
 1021e9e:	b083      	sub	sp, #12

	bool is_ok = false;
	uint16_t table_size;
	uint16_t backup_crc = 0, calc_crc = 1;
 1021ea0:	2200      	movs	r2, #0

	table_size = GRAL_APP_usSt_6_get_size();
 1021ea2:	4b26      	ldr	r3, [pc, #152]	; (1021f3c <SM_APP_bRestore_st_6_from_backup+0xa0>)
	uint16_t backup_crc = 0, calc_crc = 1;
 1021ea4:	f8ad 2006 	strh.w	r2, [sp, #6]
bool SM_APP_bRestore_st_6_from_backup(uint16_t backup_area_id) {
 1021ea8:	4605      	mov	r5, r0
	table_size = GRAL_APP_usSt_6_get_size();
 1021eaa:	4798      	blx	r3

	if ( table_size > 0 ) {
 1021eac:	b1e0      	cbz	r0, 1021ee8 <SM_APP_bRestore_st_6_from_backup+0x4c>

		if ( sizeof(temp_table_backup) > table_size ) {
 1021eae:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
 1021eb2:	4604      	mov	r4, r0
 1021eb4:	d215      	bcs.n	1021ee2 <SM_APP_bRestore_st_6_from_backup+0x46>
		
			switch (backup_area_id) {
 1021eb6:	b1f5      	cbz	r5, 1021ef6 <SM_APP_bRestore_st_6_from_backup+0x5a>
 1021eb8:	2d01      	cmp	r5, #1
 1021eba:	d10a      	bne.n	1021ed2 <SM_APP_bRestore_st_6_from_backup+0x36>
	EEPROM_reader( table_state_addr, &state, 1 );
 1021ebc:	462a      	mov	r2, r5
 1021ebe:	f10d 0105 	add.w	r1, sp, #5
 1021ec2:	f642 5043 	movw	r0, #11587	; 0x2d43
 1021ec6:	4d1e      	ldr	r5, [pc, #120]	; (1021f40 <SM_APP_bRestore_st_6_from_backup+0xa4>)
 1021ec8:	47a8      	blx	r5
	return state;
 1021eca:	f89d 3005 	ldrb.w	r3, [sp, #5]
					}
					break;

				case MP_120_CCP_AREA:
			
					if ( SM_APP_ucGet_table_state(CCP_ST_6_PROG_STATE_ADDR) == C1219_TABLE_FULL ) {
 1021ece:	2b45      	cmp	r3, #69	; 0x45
 1021ed0:	d028      	beq.n	1021f24 <SM_APP_bRestore_st_6_from_backup+0x88>

				default:
					break;		
			}

			calc_crc = CRC_crc16(&temp_table_backup[0], table_size);
 1021ed2:	4b1c      	ldr	r3, [pc, #112]	; (1021f44 <SM_APP_bRestore_st_6_from_backup+0xa8>)
 1021ed4:	481c      	ldr	r0, [pc, #112]	; (1021f48 <SM_APP_bRestore_st_6_from_backup+0xac>)
 1021ed6:	4621      	mov	r1, r4
 1021ed8:	4798      	blx	r3
			is_ok = (calc_crc == backup_crc) ? GRAL_APP_bSt_6_execute_table_writing(&temp_table_backup[0]) : false;
 1021eda:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 1021ede:	4283      	cmp	r3, r0
 1021ee0:	d005      	beq.n	1021eee <SM_APP_bRestore_st_6_from_backup+0x52>
	bool is_ok = false;
 1021ee2:	2000      	movs	r0, #0
	else {
		is_ok = true;
	}

	return is_ok;
}
 1021ee4:	b003      	add	sp, #12
 1021ee6:	bd30      	pop	{r4, r5, pc}
		is_ok = true;
 1021ee8:	2001      	movs	r0, #1
}
 1021eea:	b003      	add	sp, #12
 1021eec:	bd30      	pop	{r4, r5, pc}
			is_ok = (calc_crc == backup_crc) ? GRAL_APP_bSt_6_execute_table_writing(&temp_table_backup[0]) : false;
 1021eee:	4b17      	ldr	r3, [pc, #92]	; (1021f4c <SM_APP_bRestore_st_6_from_backup+0xb0>)
 1021ef0:	4815      	ldr	r0, [pc, #84]	; (1021f48 <SM_APP_bRestore_st_6_from_backup+0xac>)
 1021ef2:	4798      	blx	r3
 1021ef4:	e7f6      	b.n	1021ee4 <SM_APP_bRestore_st_6_from_backup+0x48>
	EEPROM_reader( table_state_addr, &state, 1 );
 1021ef6:	2201      	movs	r2, #1
 1021ef8:	f10d 0105 	add.w	r1, sp, #5
 1021efc:	f641 10bb 	movw	r0, #6587	; 0x19bb
 1021f00:	4d0f      	ldr	r5, [pc, #60]	; (1021f40 <SM_APP_bRestore_st_6_from_backup+0xa4>)
 1021f02:	47a8      	blx	r5
	return state;
 1021f04:	f89d 3005 	ldrb.w	r3, [sp, #5]
					if ( SM_APP_ucGet_table_state(MCP_ST_6_PROG_STATE_ADDR) == C1219_TABLE_FULL ) {
 1021f08:	2b45      	cmp	r3, #69	; 0x45
 1021f0a:	d1e2      	bne.n	1021ed2 <SM_APP_bRestore_st_6_from_backup+0x36>
						EEPROM_reader(MCP_ST_6_NVM_CRC_ADDR, &backup_crc, 2);
 1021f0c:	f10d 0106 	add.w	r1, sp, #6
 1021f10:	2202      	movs	r2, #2
 1021f12:	f641 10bc 	movw	r0, #6588	; 0x19bc
 1021f16:	47a8      	blx	r5
						EEPROM_reader(MCP_ST_6_START_ADDR, &temp_table_backup, table_size);
 1021f18:	4622      	mov	r2, r4
 1021f1a:	490b      	ldr	r1, [pc, #44]	; (1021f48 <SM_APP_bRestore_st_6_from_backup+0xac>)
 1021f1c:	f641 10be 	movw	r0, #6590	; 0x19be
 1021f20:	47a8      	blx	r5
 1021f22:	e7d6      	b.n	1021ed2 <SM_APP_bRestore_st_6_from_backup+0x36>
						EEPROM_reader(CCP_ST_6_NVM_CRC_ADDR, &backup_crc, 2);
 1021f24:	f10d 0106 	add.w	r1, sp, #6
 1021f28:	2202      	movs	r2, #2
 1021f2a:	f642 5044 	movw	r0, #11588	; 0x2d44
 1021f2e:	47a8      	blx	r5
						EEPROM_reader(CCP_ST_6_START_ADDR, &temp_table_backup, table_size);
 1021f30:	4622      	mov	r2, r4
 1021f32:	4905      	ldr	r1, [pc, #20]	; (1021f48 <SM_APP_bRestore_st_6_from_backup+0xac>)
 1021f34:	f642 5046 	movw	r0, #11590	; 0x2d46
 1021f38:	47a8      	blx	r5
 1021f3a:	e7ca      	b.n	1021ed2 <SM_APP_bRestore_st_6_from_backup+0x36>
 1021f3c:	01019fc9 	.word	0x01019fc9
 1021f40:	01017511 	.word	0x01017511
 1021f44:	01016b5d 	.word	0x01016b5d
 1021f48:	20000ed0 	.word	0x20000ed0
 1021f4c:	01019f99 	.word	0x01019f99

01021f50 <SM_APP_bBack_up_st_11>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bBack_up_st_11(uint16_t backup_area_id) {
 1021f50:	b5f0      	push	{r4, r5, r6, r7, lr}
	
	bool is_ok = false;
	uint16_t table_size;
	uint16_t calc_crc;
	
	table_size = REGS_APP_usSt_11_get_size();
 1021f52:	4b31      	ldr	r3, [pc, #196]	; (1022018 <SM_APP_bBack_up_st_11+0xc8>)
bool SM_APP_bBack_up_st_11(uint16_t backup_area_id) {
 1021f54:	b083      	sub	sp, #12
 1021f56:	4606      	mov	r6, r0
	table_size = REGS_APP_usSt_11_get_size();
 1021f58:	4798      	blx	r3

	if ( table_size > 0 ) {
 1021f5a:	2800      	cmp	r0, #0
 1021f5c:	d038      	beq.n	1021fd0 <SM_APP_bBack_up_st_11+0x80>

		if ( ( sizeof(temp_table_backup) > table_size ) && ( !SM_APP_vIs_st_11_corrupted_data() ) ) {
 1021f5e:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
 1021f62:	4604      	mov	r4, r0
 1021f64:	d303      	bcc.n	1021f6e <SM_APP_bBack_up_st_11+0x1e>
	bool is_ok = false;
 1021f66:	2500      	movs	r5, #0
	else {
		is_ok = true;
	}

	return is_ok;
}
 1021f68:	4628      	mov	r0, r5
 1021f6a:	b003      	add	sp, #12
 1021f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ( ( sizeof(temp_table_backup) > table_size ) && ( !SM_APP_vIs_st_11_corrupted_data() ) ) {
 1021f6e:	4b2b      	ldr	r3, [pc, #172]	; (102201c <SM_APP_bBack_up_st_11+0xcc>)
 1021f70:	4798      	blx	r3
 1021f72:	4605      	mov	r5, r0
 1021f74:	2800      	cmp	r0, #0
 1021f76:	d1f6      	bne.n	1021f66 <SM_APP_bBack_up_st_11+0x16>
			REGS_APP_bSt_11_execute_table_reading(&temp_table_backup[0]);
 1021f78:	4b29      	ldr	r3, [pc, #164]	; (1022020 <SM_APP_bBack_up_st_11+0xd0>)
 1021f7a:	482a      	ldr	r0, [pc, #168]	; (1022024 <SM_APP_bBack_up_st_11+0xd4>)
 1021f7c:	4798      	blx	r3
			calc_crc = CRC_crc16(&temp_table_backup[0], table_size);
 1021f7e:	4621      	mov	r1, r4
 1021f80:	4828      	ldr	r0, [pc, #160]	; (1022024 <SM_APP_bBack_up_st_11+0xd4>)
 1021f82:	4b29      	ldr	r3, [pc, #164]	; (1022028 <SM_APP_bBack_up_st_11+0xd8>)
 1021f84:	4798      	blx	r3
 1021f86:	f8ad 0006 	strh.w	r0, [sp, #6]
			switch (backup_area_id) {
 1021f8a:	b32e      	cbz	r6, 1021fd8 <SM_APP_bBack_up_st_11+0x88>
 1021f8c:	2e01      	cmp	r6, #1
 1021f8e:	d1eb      	bne.n	1021f68 <SM_APP_bBack_up_st_11+0x18>
 1021f90:	a902      	add	r1, sp, #8
 1021f92:	23ff      	movs	r3, #255	; 0xff
 1021f94:	f801 3d04 	strb.w	r3, [r1, #-4]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1021f98:	4632      	mov	r2, r6
 1021f9a:	4f24      	ldr	r7, [pc, #144]	; (102202c <SM_APP_bBack_up_st_11+0xdc>)
 1021f9c:	f642 60a5 	movw	r0, #11941	; 0x2ea5
 1021fa0:	47b8      	blx	r7
					is_ok = EEPROM_writer(CCP_ST_11_START_ADDR, &temp_table_backup, table_size);
 1021fa2:	4622      	mov	r2, r4
 1021fa4:	491f      	ldr	r1, [pc, #124]	; (1022024 <SM_APP_bBack_up_st_11+0xd4>)
 1021fa6:	f642 60a8 	movw	r0, #11944	; 0x2ea8
 1021faa:	47b8      	blx	r7
					if ( is_ok ) {
 1021fac:	4605      	mov	r5, r0
 1021fae:	2800      	cmp	r0, #0
 1021fb0:	d0d9      	beq.n	1021f66 <SM_APP_bBack_up_st_11+0x16>
 1021fb2:	a902      	add	r1, sp, #8
 1021fb4:	2345      	movs	r3, #69	; 0x45
 1021fb6:	f801 3d03 	strb.w	r3, [r1, #-3]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1021fba:	4632      	mov	r2, r6
 1021fbc:	f642 60a5 	movw	r0, #11941	; 0x2ea5
 1021fc0:	47b8      	blx	r7
						EEPROM_writer(CCP_ST_11_NVM_CRC_ADDR, &calc_crc, 2);
 1021fc2:	2202      	movs	r2, #2
 1021fc4:	f10d 0106 	add.w	r1, sp, #6
 1021fc8:	f642 60a6 	movw	r0, #11942	; 0x2ea6
 1021fcc:	47b8      	blx	r7
 1021fce:	e7cb      	b.n	1021f68 <SM_APP_bBack_up_st_11+0x18>
		is_ok = true;
 1021fd0:	2501      	movs	r5, #1
}
 1021fd2:	4628      	mov	r0, r5
 1021fd4:	b003      	add	sp, #12
 1021fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1021fd8:	a902      	add	r1, sp, #8
 1021fda:	23ff      	movs	r3, #255	; 0xff
 1021fdc:	f801 3d06 	strb.w	r3, [r1, #-6]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1021fe0:	2201      	movs	r2, #1
 1021fe2:	4e12      	ldr	r6, [pc, #72]	; (102202c <SM_APP_bBack_up_st_11+0xdc>)
 1021fe4:	f641 301d 	movw	r0, #6941	; 0x1b1d
 1021fe8:	47b0      	blx	r6
					is_ok = EEPROM_writer(MCP_ST_11_START_ADDR, &temp_table_backup, table_size);
 1021fea:	4622      	mov	r2, r4
 1021fec:	490d      	ldr	r1, [pc, #52]	; (1022024 <SM_APP_bBack_up_st_11+0xd4>)
 1021fee:	f44f 50d9 	mov.w	r0, #6944	; 0x1b20
 1021ff2:	47b0      	blx	r6
					if ( is_ok ) {
 1021ff4:	4605      	mov	r5, r0
 1021ff6:	2800      	cmp	r0, #0
 1021ff8:	d0b5      	beq.n	1021f66 <SM_APP_bBack_up_st_11+0x16>
 1021ffa:	a902      	add	r1, sp, #8
 1021ffc:	2345      	movs	r3, #69	; 0x45
 1021ffe:	f801 3d05 	strb.w	r3, [r1, #-5]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1022002:	2201      	movs	r2, #1
 1022004:	f641 301d 	movw	r0, #6941	; 0x1b1d
 1022008:	47b0      	blx	r6
						EEPROM_writer(MCP_ST_11_NVM_CRC_ADDR, &calc_crc, 2);
 102200a:	2202      	movs	r2, #2
 102200c:	f10d 0106 	add.w	r1, sp, #6
 1022010:	f641 301e 	movw	r0, #6942	; 0x1b1e
 1022014:	47b0      	blx	r6
 1022016:	e7a7      	b.n	1021f68 <SM_APP_bBack_up_st_11+0x18>
 1022018:	01026711 	.word	0x01026711
 102201c:	0101f46d 	.word	0x0101f46d
 1022020:	01026671 	.word	0x01026671
 1022024:	20000ed0 	.word	0x20000ed0
 1022028:	01016b5d 	.word	0x01016b5d
 102202c:	01017509 	.word	0x01017509

01022030 <SM_APP_bRestore_st_11_from_backup>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bRestore_st_11_from_backup(uint16_t backup_area_id) {
 1022030:	b530      	push	{r4, r5, lr}
 1022032:	b083      	sub	sp, #12

	bool is_ok = false;
	uint16_t table_size;
	uint16_t backup_crc = 0, calc_crc = 1;
 1022034:	2200      	movs	r2, #0

	table_size = REGS_APP_usSt_11_get_size();
 1022036:	4b26      	ldr	r3, [pc, #152]	; (10220d0 <SM_APP_bRestore_st_11_from_backup+0xa0>)
	uint16_t backup_crc = 0, calc_crc = 1;
 1022038:	f8ad 2006 	strh.w	r2, [sp, #6]
bool SM_APP_bRestore_st_11_from_backup(uint16_t backup_area_id) {
 102203c:	4605      	mov	r5, r0
	table_size = REGS_APP_usSt_11_get_size();
 102203e:	4798      	blx	r3

	if ( table_size > 0 ) {
 1022040:	b1e0      	cbz	r0, 102207c <SM_APP_bRestore_st_11_from_backup+0x4c>

		if ( sizeof(temp_table_backup) > table_size ) {
 1022042:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
 1022046:	4604      	mov	r4, r0
 1022048:	d215      	bcs.n	1022076 <SM_APP_bRestore_st_11_from_backup+0x46>
		
			switch (backup_area_id) {
 102204a:	b1f5      	cbz	r5, 102208a <SM_APP_bRestore_st_11_from_backup+0x5a>
 102204c:	2d01      	cmp	r5, #1
 102204e:	d10a      	bne.n	1022066 <SM_APP_bRestore_st_11_from_backup+0x36>
	EEPROM_reader( table_state_addr, &state, 1 );
 1022050:	462a      	mov	r2, r5
 1022052:	f10d 0105 	add.w	r1, sp, #5
 1022056:	f642 60a5 	movw	r0, #11941	; 0x2ea5
 102205a:	4d1e      	ldr	r5, [pc, #120]	; (10220d4 <SM_APP_bRestore_st_11_from_backup+0xa4>)
 102205c:	47a8      	blx	r5
	return state;
 102205e:	f89d 3005 	ldrb.w	r3, [sp, #5]
					}
					break;

				case MP_120_CCP_AREA:
			
					if ( SM_APP_ucGet_table_state(CCP_ST_11_PROG_STATE_ADDR) == C1219_TABLE_FULL ) {
 1022062:	2b45      	cmp	r3, #69	; 0x45
 1022064:	d028      	beq.n	10220b8 <SM_APP_bRestore_st_11_from_backup+0x88>

				default:
					break;
			}

			calc_crc = CRC_crc16(&temp_table_backup[0], table_size);
 1022066:	4b1c      	ldr	r3, [pc, #112]	; (10220d8 <SM_APP_bRestore_st_11_from_backup+0xa8>)
 1022068:	481c      	ldr	r0, [pc, #112]	; (10220dc <SM_APP_bRestore_st_11_from_backup+0xac>)
 102206a:	4621      	mov	r1, r4
 102206c:	4798      	blx	r3
			is_ok = (calc_crc == backup_crc) ? REGS_APP_bSt_11_execute_table_writing(&temp_table_backup[0]) : false;
 102206e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 1022072:	4283      	cmp	r3, r0
 1022074:	d005      	beq.n	1022082 <SM_APP_bRestore_st_11_from_backup+0x52>
	bool is_ok = false;
 1022076:	2000      	movs	r0, #0
	else {
		is_ok = true;
	}

	return is_ok;
}
 1022078:	b003      	add	sp, #12
 102207a:	bd30      	pop	{r4, r5, pc}
		is_ok = true;
 102207c:	2001      	movs	r0, #1
}
 102207e:	b003      	add	sp, #12
 1022080:	bd30      	pop	{r4, r5, pc}
			is_ok = (calc_crc == backup_crc) ? REGS_APP_bSt_11_execute_table_writing(&temp_table_backup[0]) : false;
 1022082:	4b17      	ldr	r3, [pc, #92]	; (10220e0 <SM_APP_bRestore_st_11_from_backup+0xb0>)
 1022084:	4815      	ldr	r0, [pc, #84]	; (10220dc <SM_APP_bRestore_st_11_from_backup+0xac>)
 1022086:	4798      	blx	r3
 1022088:	e7f6      	b.n	1022078 <SM_APP_bRestore_st_11_from_backup+0x48>
	EEPROM_reader( table_state_addr, &state, 1 );
 102208a:	2201      	movs	r2, #1
 102208c:	f10d 0105 	add.w	r1, sp, #5
 1022090:	f641 301d 	movw	r0, #6941	; 0x1b1d
 1022094:	4d0f      	ldr	r5, [pc, #60]	; (10220d4 <SM_APP_bRestore_st_11_from_backup+0xa4>)
 1022096:	47a8      	blx	r5
	return state;
 1022098:	f89d 3005 	ldrb.w	r3, [sp, #5]
					if ( SM_APP_ucGet_table_state(MCP_ST_11_PROG_STATE_ADDR) == C1219_TABLE_FULL ) {
 102209c:	2b45      	cmp	r3, #69	; 0x45
 102209e:	d1e2      	bne.n	1022066 <SM_APP_bRestore_st_11_from_backup+0x36>
						EEPROM_reader(MCP_ST_11_NVM_CRC_ADDR, &backup_crc, 2);
 10220a0:	f10d 0106 	add.w	r1, sp, #6
 10220a4:	2202      	movs	r2, #2
 10220a6:	f641 301e 	movw	r0, #6942	; 0x1b1e
 10220aa:	47a8      	blx	r5
						EEPROM_reader(MCP_ST_11_START_ADDR, &temp_table_backup, table_size);
 10220ac:	4622      	mov	r2, r4
 10220ae:	490b      	ldr	r1, [pc, #44]	; (10220dc <SM_APP_bRestore_st_11_from_backup+0xac>)
 10220b0:	f44f 50d9 	mov.w	r0, #6944	; 0x1b20
 10220b4:	47a8      	blx	r5
 10220b6:	e7d6      	b.n	1022066 <SM_APP_bRestore_st_11_from_backup+0x36>
						EEPROM_reader(CCP_ST_11_NVM_CRC_ADDR, &backup_crc, 2);
 10220b8:	f10d 0106 	add.w	r1, sp, #6
 10220bc:	2202      	movs	r2, #2
 10220be:	f642 60a6 	movw	r0, #11942	; 0x2ea6
 10220c2:	47a8      	blx	r5
						EEPROM_reader(CCP_ST_11_START_ADDR, &temp_table_backup, table_size);
 10220c4:	4622      	mov	r2, r4
 10220c6:	4905      	ldr	r1, [pc, #20]	; (10220dc <SM_APP_bRestore_st_11_from_backup+0xac>)
 10220c8:	f642 60a8 	movw	r0, #11944	; 0x2ea8
 10220cc:	47a8      	blx	r5
 10220ce:	e7ca      	b.n	1022066 <SM_APP_bRestore_st_11_from_backup+0x36>
 10220d0:	01026711 	.word	0x01026711
 10220d4:	01017511 	.word	0x01017511
 10220d8:	01016b5d 	.word	0x01016b5d
 10220dc:	20000ed0 	.word	0x20000ed0
 10220e0:	010266a1 	.word	0x010266a1

010220e4 <SM_APP_bBack_up_st_13>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bBack_up_st_13(uint16_t backup_area_id) {
 10220e4:	b570      	push	{r4, r5, r6, lr}

	if ( table_size > 0 ) {

		if ( sizeof(temp_table_backup) > table_size )  {
			
			REGS_APP_bSt_13_execute_table_reading(&temp_table_backup[0]);
 10220e6:	4b2a      	ldr	r3, [pc, #168]	; (1022190 <SM_APP_bBack_up_st_13+0xac>)
bool SM_APP_bBack_up_st_13(uint16_t backup_area_id) {
 10220e8:	b082      	sub	sp, #8
 10220ea:	4604      	mov	r4, r0
			REGS_APP_bSt_13_execute_table_reading(&temp_table_backup[0]);
 10220ec:	4829      	ldr	r0, [pc, #164]	; (1022194 <SM_APP_bBack_up_st_13+0xb0>)
 10220ee:	4798      	blx	r3
			calc_crc = CRC_crc16(&temp_table_backup[0], table_size);
 10220f0:	2108      	movs	r1, #8
 10220f2:	4828      	ldr	r0, [pc, #160]	; (1022194 <SM_APP_bBack_up_st_13+0xb0>)
 10220f4:	4b28      	ldr	r3, [pc, #160]	; (1022198 <SM_APP_bBack_up_st_13+0xb4>)
 10220f6:	4798      	blx	r3
 10220f8:	f8ad 0006 	strh.w	r0, [sp, #6]

			switch (backup_area_id) {
 10220fc:	b33c      	cbz	r4, 102214e <SM_APP_bBack_up_st_13+0x6a>
 10220fe:	2c01      	cmp	r4, #1
 1022100:	d003      	beq.n	102210a <SM_APP_bBack_up_st_13+0x26>
	bool is_ok = false;
 1022102:	2500      	movs	r5, #0
	else {
		is_ok = true;
	}

	return is_ok;
}
 1022104:	4628      	mov	r0, r5
 1022106:	b002      	add	sp, #8
 1022108:	bd70      	pop	{r4, r5, r6, pc}
 102210a:	a902      	add	r1, sp, #8
 102210c:	23ff      	movs	r3, #255	; 0xff
 102210e:	f801 3d04 	strb.w	r3, [r1, #-4]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1022112:	4622      	mov	r2, r4
 1022114:	4e21      	ldr	r6, [pc, #132]	; (102219c <SM_APP_bBack_up_st_13+0xb8>)
 1022116:	f642 60b4 	movw	r0, #11956	; 0x2eb4
 102211a:	47b0      	blx	r6
					is_ok = EEPROM_writer(CCP_ST_13_START_ADDR, &temp_table_backup, table_size);
 102211c:	2208      	movs	r2, #8
 102211e:	491d      	ldr	r1, [pc, #116]	; (1022194 <SM_APP_bBack_up_st_13+0xb0>)
 1022120:	f642 60b7 	movw	r0, #11959	; 0x2eb7
 1022124:	47b0      	blx	r6
					if ( is_ok ) {
 1022126:	4605      	mov	r5, r0
 1022128:	2800      	cmp	r0, #0
 102212a:	d0ea      	beq.n	1022102 <SM_APP_bBack_up_st_13+0x1e>
 102212c:	a902      	add	r1, sp, #8
 102212e:	2345      	movs	r3, #69	; 0x45
 1022130:	f801 3d03 	strb.w	r3, [r1, #-3]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1022134:	4622      	mov	r2, r4
 1022136:	f642 60b4 	movw	r0, #11956	; 0x2eb4
 102213a:	47b0      	blx	r6
						EEPROM_writer(CCP_ST_13_NVM_CRC_ADDR, &calc_crc, 2);
 102213c:	2202      	movs	r2, #2
 102213e:	f10d 0106 	add.w	r1, sp, #6
 1022142:	f642 60b5 	movw	r0, #11957	; 0x2eb5
 1022146:	47b0      	blx	r6
}
 1022148:	4628      	mov	r0, r5
 102214a:	b002      	add	sp, #8
 102214c:	bd70      	pop	{r4, r5, r6, pc}
 102214e:	a902      	add	r1, sp, #8
 1022150:	23ff      	movs	r3, #255	; 0xff
 1022152:	f801 3d06 	strb.w	r3, [r1, #-6]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1022156:	2201      	movs	r2, #1
 1022158:	4c10      	ldr	r4, [pc, #64]	; (102219c <SM_APP_bBack_up_st_13+0xb8>)
 102215a:	f641 302c 	movw	r0, #6956	; 0x1b2c
 102215e:	47a0      	blx	r4
					is_ok = EEPROM_writer(MCP_ST_13_START_ADDR, &temp_table_backup, table_size);
 1022160:	2208      	movs	r2, #8
 1022162:	490c      	ldr	r1, [pc, #48]	; (1022194 <SM_APP_bBack_up_st_13+0xb0>)
 1022164:	f641 302f 	movw	r0, #6959	; 0x1b2f
 1022168:	47a0      	blx	r4
					if ( is_ok ) {
 102216a:	4605      	mov	r5, r0
 102216c:	2800      	cmp	r0, #0
 102216e:	d0c8      	beq.n	1022102 <SM_APP_bBack_up_st_13+0x1e>
 1022170:	a902      	add	r1, sp, #8
 1022172:	2345      	movs	r3, #69	; 0x45
 1022174:	f801 3d05 	strb.w	r3, [r1, #-5]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1022178:	2201      	movs	r2, #1
 102217a:	f641 302c 	movw	r0, #6956	; 0x1b2c
 102217e:	47a0      	blx	r4
						EEPROM_writer(MCP_ST_13_NVM_CRC_ADDR, &calc_crc, 2);
 1022180:	2202      	movs	r2, #2
 1022182:	f10d 0106 	add.w	r1, sp, #6
 1022186:	f641 302d 	movw	r0, #6957	; 0x1b2d
 102218a:	47a0      	blx	r4
 102218c:	e7ba      	b.n	1022104 <SM_APP_bBack_up_st_13+0x20>
 102218e:	bf00      	nop
 1022190:	0102681d 	.word	0x0102681d
 1022194:	20000ed0 	.word	0x20000ed0
 1022198:	01016b5d 	.word	0x01016b5d
 102219c:	01017509 	.word	0x01017509

010221a0 <SM_APP_bRestore_st_13_from_backup>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bRestore_st_13_from_backup(uint16_t backup_area_id) {
 10221a0:	b510      	push	{r4, lr}
 10221a2:	b082      	sub	sp, #8

	bool is_ok = false;
	uint16_t table_size;
	uint16_t backup_crc = 0, calc_crc = 1;
 10221a4:	2300      	movs	r3, #0
 10221a6:	f8ad 3006 	strh.w	r3, [sp, #6]

	if ( table_size > 0 ) {

		if ( sizeof(temp_table_backup) > table_size ) {
		
			switch (backup_area_id) {
 10221aa:	b318      	cbz	r0, 10221f4 <SM_APP_bRestore_st_13_from_backup+0x54>
 10221ac:	2801      	cmp	r0, #1
 10221ae:	d00a      	beq.n	10221c6 <SM_APP_bRestore_st_13_from_backup+0x26>

				default:
					break;
			}

			calc_crc = CRC_crc16(&temp_table_backup[0], table_size);
 10221b0:	4b1e      	ldr	r3, [pc, #120]	; (102222c <SM_APP_bRestore_st_13_from_backup+0x8c>)
 10221b2:	481f      	ldr	r0, [pc, #124]	; (1022230 <SM_APP_bRestore_st_13_from_backup+0x90>)
 10221b4:	2108      	movs	r1, #8
 10221b6:	4798      	blx	r3
			is_ok = (calc_crc == backup_crc) ? REGS_APP_bSt_13_execute_table_writing(&temp_table_backup[0]) : false;
 10221b8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 10221bc:	4283      	cmp	r3, r0
 10221be:	d030      	beq.n	1022222 <SM_APP_bRestore_st_13_from_backup+0x82>
 10221c0:	2000      	movs	r0, #0
	else {
		is_ok = true;
	}

	return is_ok;
}
 10221c2:	b002      	add	sp, #8
 10221c4:	bd10      	pop	{r4, pc}
	EEPROM_reader( table_state_addr, &state, 1 );
 10221c6:	4602      	mov	r2, r0
 10221c8:	f10d 0105 	add.w	r1, sp, #5
 10221cc:	f642 60b4 	movw	r0, #11956	; 0x2eb4
 10221d0:	4c18      	ldr	r4, [pc, #96]	; (1022234 <SM_APP_bRestore_st_13_from_backup+0x94>)
 10221d2:	47a0      	blx	r4
	return state;
 10221d4:	f89d 3005 	ldrb.w	r3, [sp, #5]
					if ( SM_APP_ucGet_table_state(CCP_ST_13_PROG_STATE_ADDR) == C1219_TABLE_FULL ) {
 10221d8:	2b45      	cmp	r3, #69	; 0x45
 10221da:	d1e9      	bne.n	10221b0 <SM_APP_bRestore_st_13_from_backup+0x10>
						EEPROM_reader(CCP_ST_13_NVM_CRC_ADDR, &backup_crc, 2);
 10221dc:	f10d 0106 	add.w	r1, sp, #6
 10221e0:	2202      	movs	r2, #2
 10221e2:	f642 60b5 	movw	r0, #11957	; 0x2eb5
 10221e6:	47a0      	blx	r4
						EEPROM_reader(CCP_ST_13_START_ADDR, &temp_table_backup, table_size);
 10221e8:	2208      	movs	r2, #8
 10221ea:	4911      	ldr	r1, [pc, #68]	; (1022230 <SM_APP_bRestore_st_13_from_backup+0x90>)
 10221ec:	f642 60b7 	movw	r0, #11959	; 0x2eb7
 10221f0:	47a0      	blx	r4
 10221f2:	e7dd      	b.n	10221b0 <SM_APP_bRestore_st_13_from_backup+0x10>
	EEPROM_reader( table_state_addr, &state, 1 );
 10221f4:	2201      	movs	r2, #1
 10221f6:	f10d 0105 	add.w	r1, sp, #5
 10221fa:	f641 302c 	movw	r0, #6956	; 0x1b2c
 10221fe:	4c0d      	ldr	r4, [pc, #52]	; (1022234 <SM_APP_bRestore_st_13_from_backup+0x94>)
 1022200:	47a0      	blx	r4
	return state;
 1022202:	f89d 3005 	ldrb.w	r3, [sp, #5]
					if ( SM_APP_ucGet_table_state(MCP_ST_13_PROG_STATE_ADDR) == C1219_TABLE_FULL ) {
 1022206:	2b45      	cmp	r3, #69	; 0x45
 1022208:	d1d2      	bne.n	10221b0 <SM_APP_bRestore_st_13_from_backup+0x10>
						EEPROM_reader(MCP_ST_13_NVM_CRC_ADDR, &backup_crc, 2);
 102220a:	f10d 0106 	add.w	r1, sp, #6
 102220e:	2202      	movs	r2, #2
 1022210:	f641 302d 	movw	r0, #6957	; 0x1b2d
 1022214:	47a0      	blx	r4
						EEPROM_reader(MCP_ST_13_START_ADDR, &temp_table_backup, table_size);
 1022216:	2208      	movs	r2, #8
 1022218:	4905      	ldr	r1, [pc, #20]	; (1022230 <SM_APP_bRestore_st_13_from_backup+0x90>)
 102221a:	f641 302f 	movw	r0, #6959	; 0x1b2f
 102221e:	47a0      	blx	r4
 1022220:	e7c6      	b.n	10221b0 <SM_APP_bRestore_st_13_from_backup+0x10>
			is_ok = (calc_crc == backup_crc) ? REGS_APP_bSt_13_execute_table_writing(&temp_table_backup[0]) : false;
 1022222:	4b05      	ldr	r3, [pc, #20]	; (1022238 <SM_APP_bRestore_st_13_from_backup+0x98>)
 1022224:	4802      	ldr	r0, [pc, #8]	; (1022230 <SM_APP_bRestore_st_13_from_backup+0x90>)
 1022226:	4798      	blx	r3
}
 1022228:	b002      	add	sp, #8
 102222a:	bd10      	pop	{r4, pc}
 102222c:	01016b5d 	.word	0x01016b5d
 1022230:	20000ed0 	.word	0x20000ed0
 1022234:	01017511 	.word	0x01017511
 1022238:	010268e1 	.word	0x010268e1

0102223c <SM_APP_bBack_up_st_21>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bBack_up_st_21(uint16_t backup_area_id) {
 102223c:	b5f0      	push	{r4, r5, r6, r7, lr}
	
	bool is_ok = false;
	uint16_t table_size;
	uint16_t calc_crc;
	
	table_size = REGS_APP_usSt_21_get_size();
 102223e:	4b31      	ldr	r3, [pc, #196]	; (1022304 <SM_APP_bBack_up_st_21+0xc8>)
bool SM_APP_bBack_up_st_21(uint16_t backup_area_id) {
 1022240:	b083      	sub	sp, #12
 1022242:	4606      	mov	r6, r0
	table_size = REGS_APP_usSt_21_get_size();
 1022244:	4798      	blx	r3

	if ( table_size > 0 ) {
 1022246:	2800      	cmp	r0, #0
 1022248:	d038      	beq.n	10222bc <SM_APP_bBack_up_st_21+0x80>

		if ( ( sizeof(temp_table_backup) > table_size ) && ( !SM_APP_vIs_st_21_corrupted_data() ) ) {
 102224a:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
 102224e:	4604      	mov	r4, r0
 1022250:	d303      	bcc.n	102225a <SM_APP_bBack_up_st_21+0x1e>
	bool is_ok = false;
 1022252:	2500      	movs	r5, #0
	else {
		is_ok = true;
	}

	return is_ok;
}
 1022254:	4628      	mov	r0, r5
 1022256:	b003      	add	sp, #12
 1022258:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ( ( sizeof(temp_table_backup) > table_size ) && ( !SM_APP_vIs_st_21_corrupted_data() ) ) {
 102225a:	4b2b      	ldr	r3, [pc, #172]	; (1022308 <SM_APP_bBack_up_st_21+0xcc>)
 102225c:	4798      	blx	r3
 102225e:	4605      	mov	r5, r0
 1022260:	2800      	cmp	r0, #0
 1022262:	d1f6      	bne.n	1022252 <SM_APP_bBack_up_st_21+0x16>
			REGS_APP_bSt_21_execute_table_reading(&temp_table_backup[0]);
 1022264:	4b29      	ldr	r3, [pc, #164]	; (102230c <SM_APP_bBack_up_st_21+0xd0>)
 1022266:	482a      	ldr	r0, [pc, #168]	; (1022310 <SM_APP_bBack_up_st_21+0xd4>)
 1022268:	4798      	blx	r3
			calc_crc = CRC_crc16(&temp_table_backup[0], table_size);
 102226a:	4621      	mov	r1, r4
 102226c:	4828      	ldr	r0, [pc, #160]	; (1022310 <SM_APP_bBack_up_st_21+0xd4>)
 102226e:	4b29      	ldr	r3, [pc, #164]	; (1022314 <SM_APP_bBack_up_st_21+0xd8>)
 1022270:	4798      	blx	r3
 1022272:	f8ad 0006 	strh.w	r0, [sp, #6]
			switch (backup_area_id) {
 1022276:	b32e      	cbz	r6, 10222c4 <SM_APP_bBack_up_st_21+0x88>
 1022278:	2e01      	cmp	r6, #1
 102227a:	d1eb      	bne.n	1022254 <SM_APP_bBack_up_st_21+0x18>
 102227c:	a902      	add	r1, sp, #8
 102227e:	23ff      	movs	r3, #255	; 0xff
 1022280:	f801 3d04 	strb.w	r3, [r1, #-4]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1022284:	4632      	mov	r2, r6
 1022286:	4f24      	ldr	r7, [pc, #144]	; (1022318 <SM_APP_bBack_up_st_21+0xdc>)
 1022288:	f642 60c3 	movw	r0, #11971	; 0x2ec3
 102228c:	47b8      	blx	r7
					is_ok = EEPROM_writer(CCP_ST_21_START_ADDR, &temp_table_backup, table_size);
 102228e:	4622      	mov	r2, r4
 1022290:	491f      	ldr	r1, [pc, #124]	; (1022310 <SM_APP_bBack_up_st_21+0xd4>)
 1022292:	f642 60c6 	movw	r0, #11974	; 0x2ec6
 1022296:	47b8      	blx	r7
					if ( is_ok ) {
 1022298:	4605      	mov	r5, r0
 102229a:	2800      	cmp	r0, #0
 102229c:	d0d9      	beq.n	1022252 <SM_APP_bBack_up_st_21+0x16>
 102229e:	a902      	add	r1, sp, #8
 10222a0:	2345      	movs	r3, #69	; 0x45
 10222a2:	f801 3d03 	strb.w	r3, [r1, #-3]!
	EEPROM_writer( table_state_addr, &state, 1 );
 10222a6:	4632      	mov	r2, r6
 10222a8:	f642 60c3 	movw	r0, #11971	; 0x2ec3
 10222ac:	47b8      	blx	r7
						EEPROM_writer(CCP_ST_21_NVM_CRC_ADDR, &calc_crc, 2);
 10222ae:	2202      	movs	r2, #2
 10222b0:	f10d 0106 	add.w	r1, sp, #6
 10222b4:	f642 60c4 	movw	r0, #11972	; 0x2ec4
 10222b8:	47b8      	blx	r7
 10222ba:	e7cb      	b.n	1022254 <SM_APP_bBack_up_st_21+0x18>
		is_ok = true;
 10222bc:	2501      	movs	r5, #1
}
 10222be:	4628      	mov	r0, r5
 10222c0:	b003      	add	sp, #12
 10222c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 10222c4:	a902      	add	r1, sp, #8
 10222c6:	23ff      	movs	r3, #255	; 0xff
 10222c8:	f801 3d06 	strb.w	r3, [r1, #-6]!
	EEPROM_writer( table_state_addr, &state, 1 );
 10222cc:	2201      	movs	r2, #1
 10222ce:	4e12      	ldr	r6, [pc, #72]	; (1022318 <SM_APP_bBack_up_st_21+0xdc>)
 10222d0:	f641 303b 	movw	r0, #6971	; 0x1b3b
 10222d4:	47b0      	blx	r6
					is_ok = EEPROM_writer(MCP_ST_21_START_ADDR, &temp_table_backup, table_size);
 10222d6:	4622      	mov	r2, r4
 10222d8:	490d      	ldr	r1, [pc, #52]	; (1022310 <SM_APP_bBack_up_st_21+0xd4>)
 10222da:	f641 303e 	movw	r0, #6974	; 0x1b3e
 10222de:	47b0      	blx	r6
					if ( is_ok ) {
 10222e0:	4605      	mov	r5, r0
 10222e2:	2800      	cmp	r0, #0
 10222e4:	d0b5      	beq.n	1022252 <SM_APP_bBack_up_st_21+0x16>
 10222e6:	a902      	add	r1, sp, #8
 10222e8:	2345      	movs	r3, #69	; 0x45
 10222ea:	f801 3d05 	strb.w	r3, [r1, #-5]!
	EEPROM_writer( table_state_addr, &state, 1 );
 10222ee:	2201      	movs	r2, #1
 10222f0:	f641 303b 	movw	r0, #6971	; 0x1b3b
 10222f4:	47b0      	blx	r6
						EEPROM_writer(MCP_ST_21_NVM_CRC_ADDR, &calc_crc, 2);
 10222f6:	2202      	movs	r2, #2
 10222f8:	f10d 0106 	add.w	r1, sp, #6
 10222fc:	f641 303c 	movw	r0, #6972	; 0x1b3c
 1022300:	47b0      	blx	r6
 1022302:	e7a7      	b.n	1022254 <SM_APP_bBack_up_st_21+0x18>
 1022304:	01026de5 	.word	0x01026de5
 1022308:	0101f569 	.word	0x0101f569
 102230c:	01026d21 	.word	0x01026d21
 1022310:	20000ed0 	.word	0x20000ed0
 1022314:	01016b5d 	.word	0x01016b5d
 1022318:	01017509 	.word	0x01017509

0102231c <SM_APP_bRestore_st_21_from_backup>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bRestore_st_21_from_backup(uint16_t backup_area_id) {
 102231c:	b530      	push	{r4, r5, lr}
 102231e:	b083      	sub	sp, #12

	bool is_ok = false;
	uint16_t table_size;
	uint16_t backup_crc = 0, calc_crc = 1;
 1022320:	2200      	movs	r2, #0

	table_size = REGS_APP_usSt_21_get_size();
 1022322:	4b26      	ldr	r3, [pc, #152]	; (10223bc <SM_APP_bRestore_st_21_from_backup+0xa0>)
	uint16_t backup_crc = 0, calc_crc = 1;
 1022324:	f8ad 2006 	strh.w	r2, [sp, #6]
bool SM_APP_bRestore_st_21_from_backup(uint16_t backup_area_id) {
 1022328:	4605      	mov	r5, r0
	table_size = REGS_APP_usSt_21_get_size();
 102232a:	4798      	blx	r3

	if ( table_size > 0 ) {
 102232c:	b1e0      	cbz	r0, 1022368 <SM_APP_bRestore_st_21_from_backup+0x4c>

		if ( sizeof(temp_table_backup) > table_size ) {
 102232e:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
 1022332:	4604      	mov	r4, r0
 1022334:	d215      	bcs.n	1022362 <SM_APP_bRestore_st_21_from_backup+0x46>
			
			switch (backup_area_id) {
 1022336:	b1f5      	cbz	r5, 1022376 <SM_APP_bRestore_st_21_from_backup+0x5a>
 1022338:	2d01      	cmp	r5, #1
 102233a:	d10a      	bne.n	1022352 <SM_APP_bRestore_st_21_from_backup+0x36>
	EEPROM_reader( table_state_addr, &state, 1 );
 102233c:	462a      	mov	r2, r5
 102233e:	f10d 0105 	add.w	r1, sp, #5
 1022342:	f642 60c3 	movw	r0, #11971	; 0x2ec3
 1022346:	4d1e      	ldr	r5, [pc, #120]	; (10223c0 <SM_APP_bRestore_st_21_from_backup+0xa4>)
 1022348:	47a8      	blx	r5
	return state;
 102234a:	f89d 3005 	ldrb.w	r3, [sp, #5]
				}
				break;

				case MP_120_CCP_AREA:
				
				if ( SM_APP_ucGet_table_state(CCP_ST_21_PROG_STATE_ADDR) == C1219_TABLE_FULL ) {
 102234e:	2b45      	cmp	r3, #69	; 0x45
 1022350:	d028      	beq.n	10223a4 <SM_APP_bRestore_st_21_from_backup+0x88>

				default:
				break;
			}

			calc_crc = CRC_crc16(&temp_table_backup[0], table_size);
 1022352:	4b1c      	ldr	r3, [pc, #112]	; (10223c4 <SM_APP_bRestore_st_21_from_backup+0xa8>)
 1022354:	481c      	ldr	r0, [pc, #112]	; (10223c8 <SM_APP_bRestore_st_21_from_backup+0xac>)
 1022356:	4621      	mov	r1, r4
 1022358:	4798      	blx	r3
			is_ok = (calc_crc == backup_crc) ? REGS_APP_bSt_21_execute_table_writing(&temp_table_backup[0]) : false;
 102235a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 102235e:	4283      	cmp	r3, r0
 1022360:	d005      	beq.n	102236e <SM_APP_bRestore_st_21_from_backup+0x52>
	bool is_ok = false;
 1022362:	2000      	movs	r0, #0
	else {
		is_ok = true;
	}

	return is_ok;
}
 1022364:	b003      	add	sp, #12
 1022366:	bd30      	pop	{r4, r5, pc}
		is_ok = true;
 1022368:	2001      	movs	r0, #1
}
 102236a:	b003      	add	sp, #12
 102236c:	bd30      	pop	{r4, r5, pc}
			is_ok = (calc_crc == backup_crc) ? REGS_APP_bSt_21_execute_table_writing(&temp_table_backup[0]) : false;
 102236e:	4b17      	ldr	r3, [pc, #92]	; (10223cc <SM_APP_bRestore_st_21_from_backup+0xb0>)
 1022370:	4815      	ldr	r0, [pc, #84]	; (10223c8 <SM_APP_bRestore_st_21_from_backup+0xac>)
 1022372:	4798      	blx	r3
 1022374:	e7f6      	b.n	1022364 <SM_APP_bRestore_st_21_from_backup+0x48>
	EEPROM_reader( table_state_addr, &state, 1 );
 1022376:	2201      	movs	r2, #1
 1022378:	f10d 0105 	add.w	r1, sp, #5
 102237c:	f641 303b 	movw	r0, #6971	; 0x1b3b
 1022380:	4d0f      	ldr	r5, [pc, #60]	; (10223c0 <SM_APP_bRestore_st_21_from_backup+0xa4>)
 1022382:	47a8      	blx	r5
	return state;
 1022384:	f89d 3005 	ldrb.w	r3, [sp, #5]
				if ( SM_APP_ucGet_table_state(MCP_ST_21_PROG_STATE_ADDR) == C1219_TABLE_FULL ) {
 1022388:	2b45      	cmp	r3, #69	; 0x45
 102238a:	d1e2      	bne.n	1022352 <SM_APP_bRestore_st_21_from_backup+0x36>
					EEPROM_reader(MCP_ST_21_NVM_CRC_ADDR, &backup_crc, 2);
 102238c:	f10d 0106 	add.w	r1, sp, #6
 1022390:	2202      	movs	r2, #2
 1022392:	f641 303c 	movw	r0, #6972	; 0x1b3c
 1022396:	47a8      	blx	r5
					EEPROM_reader(MCP_ST_21_START_ADDR, &temp_table_backup, table_size);
 1022398:	4622      	mov	r2, r4
 102239a:	490b      	ldr	r1, [pc, #44]	; (10223c8 <SM_APP_bRestore_st_21_from_backup+0xac>)
 102239c:	f641 303e 	movw	r0, #6974	; 0x1b3e
 10223a0:	47a8      	blx	r5
 10223a2:	e7d6      	b.n	1022352 <SM_APP_bRestore_st_21_from_backup+0x36>
					EEPROM_reader(CCP_ST_21_NVM_CRC_ADDR, &backup_crc, 2);
 10223a4:	f10d 0106 	add.w	r1, sp, #6
 10223a8:	2202      	movs	r2, #2
 10223aa:	f642 60c4 	movw	r0, #11972	; 0x2ec4
 10223ae:	47a8      	blx	r5
					EEPROM_reader(CCP_ST_21_START_ADDR, &temp_table_backup, table_size);
 10223b0:	4622      	mov	r2, r4
 10223b2:	4905      	ldr	r1, [pc, #20]	; (10223c8 <SM_APP_bRestore_st_21_from_backup+0xac>)
 10223b4:	f642 60c6 	movw	r0, #11974	; 0x2ec6
 10223b8:	47a8      	blx	r5
 10223ba:	e7ca      	b.n	1022352 <SM_APP_bRestore_st_21_from_backup+0x36>
 10223bc:	01026de5 	.word	0x01026de5
 10223c0:	01017511 	.word	0x01017511
 10223c4:	01016b5d 	.word	0x01016b5d
 10223c8:	20000ed0 	.word	0x20000ed0
 10223cc:	01026d65 	.word	0x01026d65

010223d0 <SM_APP_bBack_up_st_22>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bBack_up_st_22(uint16_t backup_area_id) {
 10223d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	
	bool is_ok = false;
	uint16_t table_size;
	uint16_t calc_crc;
	
	table_size = REGS_APP_usSt_22_get_size();
 10223d2:	4b31      	ldr	r3, [pc, #196]	; (1022498 <SM_APP_bBack_up_st_22+0xc8>)
bool SM_APP_bBack_up_st_22(uint16_t backup_area_id) {
 10223d4:	b083      	sub	sp, #12
 10223d6:	4606      	mov	r6, r0
	table_size = REGS_APP_usSt_22_get_size();
 10223d8:	4798      	blx	r3

	if ( table_size > 0 ) {
 10223da:	2800      	cmp	r0, #0
 10223dc:	d038      	beq.n	1022450 <SM_APP_bBack_up_st_22+0x80>

		if ( ( sizeof(temp_table_backup) > table_size ) && ( !SM_APP_vIs_st_22_corrupted_data() ) ) {
 10223de:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
 10223e2:	4604      	mov	r4, r0
 10223e4:	d303      	bcc.n	10223ee <SM_APP_bBack_up_st_22+0x1e>
	bool is_ok = false;
 10223e6:	2500      	movs	r5, #0
	else {
		is_ok = true;
	}

	return is_ok;
}
 10223e8:	4628      	mov	r0, r5
 10223ea:	b003      	add	sp, #12
 10223ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ( ( sizeof(temp_table_backup) > table_size ) && ( !SM_APP_vIs_st_22_corrupted_data() ) ) {
 10223ee:	4b2b      	ldr	r3, [pc, #172]	; (102249c <SM_APP_bBack_up_st_22+0xcc>)
 10223f0:	4798      	blx	r3
 10223f2:	4605      	mov	r5, r0
 10223f4:	2800      	cmp	r0, #0
 10223f6:	d1f6      	bne.n	10223e6 <SM_APP_bBack_up_st_22+0x16>
			REGS_APP_bSt_22_execute_table_reading(&temp_table_backup[0]);
 10223f8:	4b29      	ldr	r3, [pc, #164]	; (10224a0 <SM_APP_bBack_up_st_22+0xd0>)
 10223fa:	482a      	ldr	r0, [pc, #168]	; (10224a4 <SM_APP_bBack_up_st_22+0xd4>)
 10223fc:	4798      	blx	r3
			calc_crc = CRC_crc16(&temp_table_backup[0], table_size);
 10223fe:	4621      	mov	r1, r4
 1022400:	4828      	ldr	r0, [pc, #160]	; (10224a4 <SM_APP_bBack_up_st_22+0xd4>)
 1022402:	4b29      	ldr	r3, [pc, #164]	; (10224a8 <SM_APP_bBack_up_st_22+0xd8>)
 1022404:	4798      	blx	r3
 1022406:	f8ad 0006 	strh.w	r0, [sp, #6]
			switch (backup_area_id) {
 102240a:	b32e      	cbz	r6, 1022458 <SM_APP_bBack_up_st_22+0x88>
 102240c:	2e01      	cmp	r6, #1
 102240e:	d1eb      	bne.n	10223e8 <SM_APP_bBack_up_st_22+0x18>
 1022410:	a902      	add	r1, sp, #8
 1022412:	23ff      	movs	r3, #255	; 0xff
 1022414:	f801 3d04 	strb.w	r3, [r1, #-4]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1022418:	4632      	mov	r2, r6
 102241a:	4f24      	ldr	r7, [pc, #144]	; (10224ac <SM_APP_bBack_up_st_22+0xdc>)
 102241c:	f642 60d5 	movw	r0, #11989	; 0x2ed5
 1022420:	47b8      	blx	r7
					is_ok = EEPROM_writer(CCP_ST_22_START_ADDR, &temp_table_backup, table_size);
 1022422:	4622      	mov	r2, r4
 1022424:	491f      	ldr	r1, [pc, #124]	; (10224a4 <SM_APP_bBack_up_st_22+0xd4>)
 1022426:	f642 60d8 	movw	r0, #11992	; 0x2ed8
 102242a:	47b8      	blx	r7
					if ( is_ok ) {
 102242c:	4605      	mov	r5, r0
 102242e:	2800      	cmp	r0, #0
 1022430:	d0d9      	beq.n	10223e6 <SM_APP_bBack_up_st_22+0x16>
 1022432:	a902      	add	r1, sp, #8
 1022434:	2345      	movs	r3, #69	; 0x45
 1022436:	f801 3d03 	strb.w	r3, [r1, #-3]!
	EEPROM_writer( table_state_addr, &state, 1 );
 102243a:	4632      	mov	r2, r6
 102243c:	f642 60d5 	movw	r0, #11989	; 0x2ed5
 1022440:	47b8      	blx	r7
						EEPROM_writer(CCP_ST_22_NVM_CRC_ADDR, &calc_crc, 2);
 1022442:	2202      	movs	r2, #2
 1022444:	f10d 0106 	add.w	r1, sp, #6
 1022448:	f642 60d6 	movw	r0, #11990	; 0x2ed6
 102244c:	47b8      	blx	r7
 102244e:	e7cb      	b.n	10223e8 <SM_APP_bBack_up_st_22+0x18>
		is_ok = true;
 1022450:	2501      	movs	r5, #1
}
 1022452:	4628      	mov	r0, r5
 1022454:	b003      	add	sp, #12
 1022456:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1022458:	a902      	add	r1, sp, #8
 102245a:	23ff      	movs	r3, #255	; 0xff
 102245c:	f801 3d06 	strb.w	r3, [r1, #-6]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1022460:	2201      	movs	r2, #1
 1022462:	4e12      	ldr	r6, [pc, #72]	; (10224ac <SM_APP_bBack_up_st_22+0xdc>)
 1022464:	f641 304d 	movw	r0, #6989	; 0x1b4d
 1022468:	47b0      	blx	r6
					is_ok = EEPROM_writer(MCP_ST_22_START_ADDR, &temp_table_backup, table_size);
 102246a:	4622      	mov	r2, r4
 102246c:	490d      	ldr	r1, [pc, #52]	; (10224a4 <SM_APP_bBack_up_st_22+0xd4>)
 102246e:	f641 3050 	movw	r0, #6992	; 0x1b50
 1022472:	47b0      	blx	r6
					if ( is_ok ) {
 1022474:	4605      	mov	r5, r0
 1022476:	2800      	cmp	r0, #0
 1022478:	d0b5      	beq.n	10223e6 <SM_APP_bBack_up_st_22+0x16>
 102247a:	a902      	add	r1, sp, #8
 102247c:	2345      	movs	r3, #69	; 0x45
 102247e:	f801 3d05 	strb.w	r3, [r1, #-5]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1022482:	2201      	movs	r2, #1
 1022484:	f641 304d 	movw	r0, #6989	; 0x1b4d
 1022488:	47b0      	blx	r6
						EEPROM_writer(MCP_ST_22_NVM_CRC_ADDR, &calc_crc, 2);
 102248a:	2202      	movs	r2, #2
 102248c:	f10d 0106 	add.w	r1, sp, #6
 1022490:	f641 304e 	movw	r0, #6990	; 0x1b4e
 1022494:	47b0      	blx	r6
 1022496:	e7a7      	b.n	10223e8 <SM_APP_bBack_up_st_22+0x18>
 1022498:	0102701d 	.word	0x0102701d
 102249c:	0101f665 	.word	0x0101f665
 10224a0:	01026f41 	.word	0x01026f41
 10224a4:	20000ed0 	.word	0x20000ed0
 10224a8:	01016b5d 	.word	0x01016b5d
 10224ac:	01017509 	.word	0x01017509

010224b0 <SM_APP_bRestore_st_22_from_backup>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bRestore_st_22_from_backup(uint16_t backup_area_id) {
 10224b0:	b530      	push	{r4, r5, lr}
 10224b2:	b083      	sub	sp, #12

	bool is_ok = false;
	uint16_t table_size;
	uint16_t backup_crc = 0, calc_crc = 1;
 10224b4:	2200      	movs	r2, #0

	table_size = REGS_APP_usSt_22_get_size();
 10224b6:	4b26      	ldr	r3, [pc, #152]	; (1022550 <SM_APP_bRestore_st_22_from_backup+0xa0>)
	uint16_t backup_crc = 0, calc_crc = 1;
 10224b8:	f8ad 2006 	strh.w	r2, [sp, #6]
bool SM_APP_bRestore_st_22_from_backup(uint16_t backup_area_id) {
 10224bc:	4605      	mov	r5, r0
	table_size = REGS_APP_usSt_22_get_size();
 10224be:	4798      	blx	r3

	if ( table_size > 0 ) {
 10224c0:	b1e0      	cbz	r0, 10224fc <SM_APP_bRestore_st_22_from_backup+0x4c>

		if ( sizeof(temp_table_backup) > table_size ) {
 10224c2:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
 10224c6:	4604      	mov	r4, r0
 10224c8:	d215      	bcs.n	10224f6 <SM_APP_bRestore_st_22_from_backup+0x46>
		
			switch (backup_area_id) {
 10224ca:	b1f5      	cbz	r5, 102250a <SM_APP_bRestore_st_22_from_backup+0x5a>
 10224cc:	2d01      	cmp	r5, #1
 10224ce:	d10a      	bne.n	10224e6 <SM_APP_bRestore_st_22_from_backup+0x36>
	EEPROM_reader( table_state_addr, &state, 1 );
 10224d0:	462a      	mov	r2, r5
 10224d2:	f10d 0105 	add.w	r1, sp, #5
 10224d6:	f642 60d5 	movw	r0, #11989	; 0x2ed5
 10224da:	4d1e      	ldr	r5, [pc, #120]	; (1022554 <SM_APP_bRestore_st_22_from_backup+0xa4>)
 10224dc:	47a8      	blx	r5
	return state;
 10224de:	f89d 3005 	ldrb.w	r3, [sp, #5]
					}
					break;

				case MP_120_CCP_AREA:
			
					if ( SM_APP_ucGet_table_state(CCP_ST_22_PROG_STATE_ADDR) == C1219_TABLE_FULL ) {
 10224e2:	2b45      	cmp	r3, #69	; 0x45
 10224e4:	d028      	beq.n	1022538 <SM_APP_bRestore_st_22_from_backup+0x88>

				default:
					break;
			}

			calc_crc = CRC_crc16(&temp_table_backup[0], table_size);
 10224e6:	4b1c      	ldr	r3, [pc, #112]	; (1022558 <SM_APP_bRestore_st_22_from_backup+0xa8>)
 10224e8:	481c      	ldr	r0, [pc, #112]	; (102255c <SM_APP_bRestore_st_22_from_backup+0xac>)
 10224ea:	4621      	mov	r1, r4
 10224ec:	4798      	blx	r3
			is_ok = (calc_crc == backup_crc) ? REGS_APP_bSt_22_execute_table_writing(&temp_table_backup[0]) : false;
 10224ee:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 10224f2:	4283      	cmp	r3, r0
 10224f4:	d005      	beq.n	1022502 <SM_APP_bRestore_st_22_from_backup+0x52>
	bool is_ok = false;
 10224f6:	2000      	movs	r0, #0
	else {
		is_ok = true;
	}

	return is_ok;
}
 10224f8:	b003      	add	sp, #12
 10224fa:	bd30      	pop	{r4, r5, pc}
		is_ok = true;
 10224fc:	2001      	movs	r0, #1
}
 10224fe:	b003      	add	sp, #12
 1022500:	bd30      	pop	{r4, r5, pc}
			is_ok = (calc_crc == backup_crc) ? REGS_APP_bSt_22_execute_table_writing(&temp_table_backup[0]) : false;
 1022502:	4b17      	ldr	r3, [pc, #92]	; (1022560 <SM_APP_bRestore_st_22_from_backup+0xb0>)
 1022504:	4815      	ldr	r0, [pc, #84]	; (102255c <SM_APP_bRestore_st_22_from_backup+0xac>)
 1022506:	4798      	blx	r3
 1022508:	e7f6      	b.n	10224f8 <SM_APP_bRestore_st_22_from_backup+0x48>
	EEPROM_reader( table_state_addr, &state, 1 );
 102250a:	2201      	movs	r2, #1
 102250c:	f10d 0105 	add.w	r1, sp, #5
 1022510:	f641 304d 	movw	r0, #6989	; 0x1b4d
 1022514:	4d0f      	ldr	r5, [pc, #60]	; (1022554 <SM_APP_bRestore_st_22_from_backup+0xa4>)
 1022516:	47a8      	blx	r5
	return state;
 1022518:	f89d 3005 	ldrb.w	r3, [sp, #5]
					if ( SM_APP_ucGet_table_state(MCP_ST_22_PROG_STATE_ADDR) == C1219_TABLE_FULL ) {
 102251c:	2b45      	cmp	r3, #69	; 0x45
 102251e:	d1e2      	bne.n	10224e6 <SM_APP_bRestore_st_22_from_backup+0x36>
						EEPROM_reader(MCP_ST_22_NVM_CRC_ADDR, &backup_crc, 2);
 1022520:	f10d 0106 	add.w	r1, sp, #6
 1022524:	2202      	movs	r2, #2
 1022526:	f641 304e 	movw	r0, #6990	; 0x1b4e
 102252a:	47a8      	blx	r5
						EEPROM_reader(MCP_ST_22_START_ADDR, &temp_table_backup, table_size);
 102252c:	4622      	mov	r2, r4
 102252e:	490b      	ldr	r1, [pc, #44]	; (102255c <SM_APP_bRestore_st_22_from_backup+0xac>)
 1022530:	f641 3050 	movw	r0, #6992	; 0x1b50
 1022534:	47a8      	blx	r5
 1022536:	e7d6      	b.n	10224e6 <SM_APP_bRestore_st_22_from_backup+0x36>
						EEPROM_reader(CCP_ST_22_NVM_CRC_ADDR, &backup_crc, 2);
 1022538:	f10d 0106 	add.w	r1, sp, #6
 102253c:	2202      	movs	r2, #2
 102253e:	f642 60d6 	movw	r0, #11990	; 0x2ed6
 1022542:	47a8      	blx	r5
						EEPROM_reader(CCP_ST_22_START_ADDR, &temp_table_backup, table_size);
 1022544:	4622      	mov	r2, r4
 1022546:	4905      	ldr	r1, [pc, #20]	; (102255c <SM_APP_bRestore_st_22_from_backup+0xac>)
 1022548:	f642 60d8 	movw	r0, #11992	; 0x2ed8
 102254c:	47a8      	blx	r5
 102254e:	e7ca      	b.n	10224e6 <SM_APP_bRestore_st_22_from_backup+0x36>
 1022550:	0102701d 	.word	0x0102701d
 1022554:	01017511 	.word	0x01017511
 1022558:	01016b5d 	.word	0x01016b5d
 102255c:	20000ed0 	.word	0x20000ed0
 1022560:	01026f59 	.word	0x01026f59

01022564 <SM_APP_bBack_up_st_27>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bBack_up_st_27(uint16_t backup_area_id) {
 1022564:	b5f0      	push	{r4, r5, r6, r7, lr}
	
	bool is_ok = false;
	uint16_t table_size;
	uint16_t calc_crc;
	
	table_size = REGS_APP_usSt_27_get_size();
 1022566:	4b31      	ldr	r3, [pc, #196]	; (102262c <SM_APP_bBack_up_st_27+0xc8>)
bool SM_APP_bBack_up_st_27(uint16_t backup_area_id) {
 1022568:	b083      	sub	sp, #12
 102256a:	4606      	mov	r6, r0
	table_size = REGS_APP_usSt_27_get_size();
 102256c:	4798      	blx	r3

	if ( table_size > 0 ) {
 102256e:	2800      	cmp	r0, #0
 1022570:	d038      	beq.n	10225e4 <SM_APP_bBack_up_st_27+0x80>

		if ( ( sizeof(temp_table_backup) > table_size ) && ( !SM_APP_vIs_st_27_corrupted_data() ) ) {
 1022572:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
 1022576:	4604      	mov	r4, r0
 1022578:	d303      	bcc.n	1022582 <SM_APP_bBack_up_st_27+0x1e>
	bool is_ok = false;
 102257a:	2500      	movs	r5, #0
	else {
		is_ok = true;
	}

	return is_ok;
}
 102257c:	4628      	mov	r0, r5
 102257e:	b003      	add	sp, #12
 1022580:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ( ( sizeof(temp_table_backup) > table_size ) && ( !SM_APP_vIs_st_27_corrupted_data() ) ) {
 1022582:	4b2b      	ldr	r3, [pc, #172]	; (1022630 <SM_APP_bBack_up_st_27+0xcc>)
 1022584:	4798      	blx	r3
 1022586:	4605      	mov	r5, r0
 1022588:	2800      	cmp	r0, #0
 102258a:	d1f6      	bne.n	102257a <SM_APP_bBack_up_st_27+0x16>
			REGS_APP_bSt_27_execute_table_reading(&temp_table_backup[0]);
 102258c:	4b29      	ldr	r3, [pc, #164]	; (1022634 <SM_APP_bBack_up_st_27+0xd0>)
 102258e:	482a      	ldr	r0, [pc, #168]	; (1022638 <SM_APP_bBack_up_st_27+0xd4>)
 1022590:	4798      	blx	r3
			calc_crc = CRC_crc16(&temp_table_backup[0], table_size);
 1022592:	4621      	mov	r1, r4
 1022594:	4828      	ldr	r0, [pc, #160]	; (1022638 <SM_APP_bBack_up_st_27+0xd4>)
 1022596:	4b29      	ldr	r3, [pc, #164]	; (102263c <SM_APP_bBack_up_st_27+0xd8>)
 1022598:	4798      	blx	r3
 102259a:	f8ad 0006 	strh.w	r0, [sp, #6]
			switch (backup_area_id) {
 102259e:	b32e      	cbz	r6, 10225ec <SM_APP_bBack_up_st_27+0x88>
 10225a0:	2e01      	cmp	r6, #1
 10225a2:	d1eb      	bne.n	102257c <SM_APP_bBack_up_st_27+0x18>
 10225a4:	a902      	add	r1, sp, #8
 10225a6:	23ff      	movs	r3, #255	; 0xff
 10225a8:	f801 3d04 	strb.w	r3, [r1, #-4]!
	EEPROM_writer( table_state_addr, &state, 1 );
 10225ac:	4632      	mov	r2, r6
 10225ae:	4f24      	ldr	r7, [pc, #144]	; (1022640 <SM_APP_bBack_up_st_27+0xdc>)
 10225b0:	f642 60e5 	movw	r0, #12005	; 0x2ee5
 10225b4:	47b8      	blx	r7
					is_ok = EEPROM_writer(CCP_ST_27_START_ADDR, &temp_table_backup, table_size);
 10225b6:	4622      	mov	r2, r4
 10225b8:	491f      	ldr	r1, [pc, #124]	; (1022638 <SM_APP_bBack_up_st_27+0xd4>)
 10225ba:	f642 60e8 	movw	r0, #12008	; 0x2ee8
 10225be:	47b8      	blx	r7
					if ( is_ok ) {
 10225c0:	4605      	mov	r5, r0
 10225c2:	2800      	cmp	r0, #0
 10225c4:	d0d9      	beq.n	102257a <SM_APP_bBack_up_st_27+0x16>
 10225c6:	a902      	add	r1, sp, #8
 10225c8:	2345      	movs	r3, #69	; 0x45
 10225ca:	f801 3d03 	strb.w	r3, [r1, #-3]!
	EEPROM_writer( table_state_addr, &state, 1 );
 10225ce:	4632      	mov	r2, r6
 10225d0:	f642 60e5 	movw	r0, #12005	; 0x2ee5
 10225d4:	47b8      	blx	r7
						EEPROM_writer(CCP_ST_27_NVM_CRC_ADDR, &calc_crc, 2);
 10225d6:	2202      	movs	r2, #2
 10225d8:	f10d 0106 	add.w	r1, sp, #6
 10225dc:	f642 60e6 	movw	r0, #12006	; 0x2ee6
 10225e0:	47b8      	blx	r7
 10225e2:	e7cb      	b.n	102257c <SM_APP_bBack_up_st_27+0x18>
		is_ok = true;
 10225e4:	2501      	movs	r5, #1
}
 10225e6:	4628      	mov	r0, r5
 10225e8:	b003      	add	sp, #12
 10225ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 10225ec:	a902      	add	r1, sp, #8
 10225ee:	23ff      	movs	r3, #255	; 0xff
 10225f0:	f801 3d06 	strb.w	r3, [r1, #-6]!
	EEPROM_writer( table_state_addr, &state, 1 );
 10225f4:	2201      	movs	r2, #1
 10225f6:	4e12      	ldr	r6, [pc, #72]	; (1022640 <SM_APP_bBack_up_st_27+0xdc>)
 10225f8:	f641 305d 	movw	r0, #7005	; 0x1b5d
 10225fc:	47b0      	blx	r6
					is_ok = EEPROM_writer(MCP_ST_27_START_ADDR, &temp_table_backup, table_size);
 10225fe:	4622      	mov	r2, r4
 1022600:	490d      	ldr	r1, [pc, #52]	; (1022638 <SM_APP_bBack_up_st_27+0xd4>)
 1022602:	f44f 50db 	mov.w	r0, #7008	; 0x1b60
 1022606:	47b0      	blx	r6
					if ( is_ok ) {
 1022608:	4605      	mov	r5, r0
 102260a:	2800      	cmp	r0, #0
 102260c:	d0b5      	beq.n	102257a <SM_APP_bBack_up_st_27+0x16>
 102260e:	a902      	add	r1, sp, #8
 1022610:	2345      	movs	r3, #69	; 0x45
 1022612:	f801 3d05 	strb.w	r3, [r1, #-5]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1022616:	2201      	movs	r2, #1
 1022618:	f641 305d 	movw	r0, #7005	; 0x1b5d
 102261c:	47b0      	blx	r6
						EEPROM_writer(MCP_ST_27_NVM_CRC_ADDR, &calc_crc, 2);
 102261e:	2202      	movs	r2, #2
 1022620:	f10d 0106 	add.w	r1, sp, #6
 1022624:	f641 305e 	movw	r0, #7006	; 0x1b5e
 1022628:	47b0      	blx	r6
 102262a:	e7a7      	b.n	102257c <SM_APP_bBack_up_st_27+0x18>
 102262c:	01028701 	.word	0x01028701
 1022630:	0101f761 	.word	0x0101f761
 1022634:	01028639 	.word	0x01028639
 1022638:	20000ed0 	.word	0x20000ed0
 102263c:	01016b5d 	.word	0x01016b5d
 1022640:	01017509 	.word	0x01017509

01022644 <SM_APP_bRestore_st_27_from_backup>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bRestore_st_27_from_backup(uint16_t backup_area_id) {
 1022644:	b530      	push	{r4, r5, lr}
 1022646:	b083      	sub	sp, #12

	bool is_ok = false;
	uint16_t table_size;
	uint16_t backup_crc = 0, calc_crc = 1;
 1022648:	2200      	movs	r2, #0

	table_size = REGS_APP_usSt_27_get_size();
 102264a:	4b26      	ldr	r3, [pc, #152]	; (10226e4 <SM_APP_bRestore_st_27_from_backup+0xa0>)
	uint16_t backup_crc = 0, calc_crc = 1;
 102264c:	f8ad 2006 	strh.w	r2, [sp, #6]
bool SM_APP_bRestore_st_27_from_backup(uint16_t backup_area_id) {
 1022650:	4605      	mov	r5, r0
	table_size = REGS_APP_usSt_27_get_size();
 1022652:	4798      	blx	r3

	if ( table_size > 0 ) {
 1022654:	b1e0      	cbz	r0, 1022690 <SM_APP_bRestore_st_27_from_backup+0x4c>

		if ( sizeof(temp_table_backup) > table_size ) {
 1022656:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
 102265a:	4604      	mov	r4, r0
 102265c:	d215      	bcs.n	102268a <SM_APP_bRestore_st_27_from_backup+0x46>
		
			switch (backup_area_id) {
 102265e:	b1f5      	cbz	r5, 102269e <SM_APP_bRestore_st_27_from_backup+0x5a>
 1022660:	2d01      	cmp	r5, #1
 1022662:	d10a      	bne.n	102267a <SM_APP_bRestore_st_27_from_backup+0x36>
	EEPROM_reader( table_state_addr, &state, 1 );
 1022664:	462a      	mov	r2, r5
 1022666:	f10d 0105 	add.w	r1, sp, #5
 102266a:	f642 60e5 	movw	r0, #12005	; 0x2ee5
 102266e:	4d1e      	ldr	r5, [pc, #120]	; (10226e8 <SM_APP_bRestore_st_27_from_backup+0xa4>)
 1022670:	47a8      	blx	r5
	return state;
 1022672:	f89d 3005 	ldrb.w	r3, [sp, #5]
					}
					break;

				case MP_120_CCP_AREA:
			
					if ( SM_APP_ucGet_table_state(CCP_ST_27_PROG_STATE_ADDR) == C1219_TABLE_FULL ) {
 1022676:	2b45      	cmp	r3, #69	; 0x45
 1022678:	d028      	beq.n	10226cc <SM_APP_bRestore_st_27_from_backup+0x88>

				default:
					break;
			}

			calc_crc = CRC_crc16(&temp_table_backup[0], table_size);
 102267a:	4b1c      	ldr	r3, [pc, #112]	; (10226ec <SM_APP_bRestore_st_27_from_backup+0xa8>)
 102267c:	481c      	ldr	r0, [pc, #112]	; (10226f0 <SM_APP_bRestore_st_27_from_backup+0xac>)
 102267e:	4621      	mov	r1, r4
 1022680:	4798      	blx	r3
			is_ok = (calc_crc == backup_crc) ? REGS_APP_bSt_27_execute_table_writing(&temp_table_backup[0]) : false;
 1022682:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 1022686:	4283      	cmp	r3, r0
 1022688:	d005      	beq.n	1022696 <SM_APP_bRestore_st_27_from_backup+0x52>
	bool is_ok = false;
 102268a:	2000      	movs	r0, #0
	else {
		is_ok = true;
	}

	return is_ok;
}
 102268c:	b003      	add	sp, #12
 102268e:	bd30      	pop	{r4, r5, pc}
		is_ok = true;
 1022690:	2001      	movs	r0, #1
}
 1022692:	b003      	add	sp, #12
 1022694:	bd30      	pop	{r4, r5, pc}
			is_ok = (calc_crc == backup_crc) ? REGS_APP_bSt_27_execute_table_writing(&temp_table_backup[0]) : false;
 1022696:	4b17      	ldr	r3, [pc, #92]	; (10226f4 <SM_APP_bRestore_st_27_from_backup+0xb0>)
 1022698:	4815      	ldr	r0, [pc, #84]	; (10226f0 <SM_APP_bRestore_st_27_from_backup+0xac>)
 102269a:	4798      	blx	r3
 102269c:	e7f6      	b.n	102268c <SM_APP_bRestore_st_27_from_backup+0x48>
	EEPROM_reader( table_state_addr, &state, 1 );
 102269e:	2201      	movs	r2, #1
 10226a0:	f10d 0105 	add.w	r1, sp, #5
 10226a4:	f641 305d 	movw	r0, #7005	; 0x1b5d
 10226a8:	4d0f      	ldr	r5, [pc, #60]	; (10226e8 <SM_APP_bRestore_st_27_from_backup+0xa4>)
 10226aa:	47a8      	blx	r5
	return state;
 10226ac:	f89d 3005 	ldrb.w	r3, [sp, #5]
					if ( SM_APP_ucGet_table_state(MCP_ST_27_PROG_STATE_ADDR) == C1219_TABLE_FULL ) {
 10226b0:	2b45      	cmp	r3, #69	; 0x45
 10226b2:	d1e2      	bne.n	102267a <SM_APP_bRestore_st_27_from_backup+0x36>
						EEPROM_reader(MCP_ST_27_NVM_CRC_ADDR, &backup_crc, 2);
 10226b4:	f10d 0106 	add.w	r1, sp, #6
 10226b8:	2202      	movs	r2, #2
 10226ba:	f641 305e 	movw	r0, #7006	; 0x1b5e
 10226be:	47a8      	blx	r5
						EEPROM_reader(MCP_ST_27_START_ADDR, &temp_table_backup, table_size);
 10226c0:	4622      	mov	r2, r4
 10226c2:	490b      	ldr	r1, [pc, #44]	; (10226f0 <SM_APP_bRestore_st_27_from_backup+0xac>)
 10226c4:	f44f 50db 	mov.w	r0, #7008	; 0x1b60
 10226c8:	47a8      	blx	r5
 10226ca:	e7d6      	b.n	102267a <SM_APP_bRestore_st_27_from_backup+0x36>
						EEPROM_reader(CCP_ST_27_NVM_CRC_ADDR, &backup_crc, 2);
 10226cc:	f10d 0106 	add.w	r1, sp, #6
 10226d0:	2202      	movs	r2, #2
 10226d2:	f642 60e6 	movw	r0, #12006	; 0x2ee6
 10226d6:	47a8      	blx	r5
						EEPROM_reader(CCP_ST_27_START_ADDR, &temp_table_backup, table_size);
 10226d8:	4622      	mov	r2, r4
 10226da:	4905      	ldr	r1, [pc, #20]	; (10226f0 <SM_APP_bRestore_st_27_from_backup+0xac>)
 10226dc:	f642 60e8 	movw	r0, #12008	; 0x2ee8
 10226e0:	47a8      	blx	r5
 10226e2:	e7ca      	b.n	102267a <SM_APP_bRestore_st_27_from_backup+0x36>
 10226e4:	01028701 	.word	0x01028701
 10226e8:	01017511 	.word	0x01017511
 10226ec:	01016b5d 	.word	0x01016b5d
 10226f0:	20000ed0 	.word	0x20000ed0
 10226f4:	010286a1 	.word	0x010286a1

010226f8 <SM_APP_bBack_up_st_41>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bBack_up_st_41(uint16_t backup_area_id) {
 10226f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	
	bool is_ok = false;
	uint16_t table_size;
	uint16_t calc_crc;
	
	table_size = SECR_APP_usSt_41_get_size();
 10226fa:	4b31      	ldr	r3, [pc, #196]	; (10227c0 <SM_APP_bBack_up_st_41+0xc8>)
bool SM_APP_bBack_up_st_41(uint16_t backup_area_id) {
 10226fc:	b083      	sub	sp, #12
 10226fe:	4606      	mov	r6, r0
	table_size = SECR_APP_usSt_41_get_size();
 1022700:	4798      	blx	r3

	if ( table_size > 0 ) {
 1022702:	2800      	cmp	r0, #0
 1022704:	d038      	beq.n	1022778 <SM_APP_bBack_up_st_41+0x80>

		if ( ( sizeof(temp_table_backup) > table_size ) && ( !SM_APP_vIs_st_41_corrupted_data() ) ) {
 1022706:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
 102270a:	4604      	mov	r4, r0
 102270c:	d303      	bcc.n	1022716 <SM_APP_bBack_up_st_41+0x1e>
	bool is_ok = false;
 102270e:	2500      	movs	r5, #0
	else {
		is_ok = true;
	}

	return is_ok;
}
 1022710:	4628      	mov	r0, r5
 1022712:	b003      	add	sp, #12
 1022714:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ( ( sizeof(temp_table_backup) > table_size ) && ( !SM_APP_vIs_st_41_corrupted_data() ) ) {
 1022716:	4b2b      	ldr	r3, [pc, #172]	; (10227c4 <SM_APP_bBack_up_st_41+0xcc>)
 1022718:	4798      	blx	r3
 102271a:	4605      	mov	r5, r0
 102271c:	2800      	cmp	r0, #0
 102271e:	d1f6      	bne.n	102270e <SM_APP_bBack_up_st_41+0x16>
			SECR_APP_bSt_41_execute_table_reading(&temp_table_backup[0]);
 1022720:	4b29      	ldr	r3, [pc, #164]	; (10227c8 <SM_APP_bBack_up_st_41+0xd0>)
 1022722:	482a      	ldr	r0, [pc, #168]	; (10227cc <SM_APP_bBack_up_st_41+0xd4>)
 1022724:	4798      	blx	r3
			calc_crc = CRC_crc16(&temp_table_backup[0], table_size);
 1022726:	4621      	mov	r1, r4
 1022728:	4828      	ldr	r0, [pc, #160]	; (10227cc <SM_APP_bBack_up_st_41+0xd4>)
 102272a:	4b29      	ldr	r3, [pc, #164]	; (10227d0 <SM_APP_bBack_up_st_41+0xd8>)
 102272c:	4798      	blx	r3
 102272e:	f8ad 0006 	strh.w	r0, [sp, #6]
			switch (backup_area_id) {
 1022732:	b32e      	cbz	r6, 1022780 <SM_APP_bBack_up_st_41+0x88>
 1022734:	2e01      	cmp	r6, #1
 1022736:	d1eb      	bne.n	1022710 <SM_APP_bBack_up_st_41+0x18>
 1022738:	a902      	add	r1, sp, #8
 102273a:	23ff      	movs	r3, #255	; 0xff
 102273c:	f801 3d04 	strb.w	r3, [r1, #-4]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1022740:	4632      	mov	r2, r6
 1022742:	4f24      	ldr	r7, [pc, #144]	; (10227d4 <SM_APP_bBack_up_st_41+0xdc>)
 1022744:	f642 701b 	movw	r0, #12059	; 0x2f1b
 1022748:	47b8      	blx	r7
					is_ok = EEPROM_writer(CCP_ST_41_START_ADDR, &temp_table_backup, table_size);
 102274a:	4622      	mov	r2, r4
 102274c:	491f      	ldr	r1, [pc, #124]	; (10227cc <SM_APP_bBack_up_st_41+0xd4>)
 102274e:	f642 701e 	movw	r0, #12062	; 0x2f1e
 1022752:	47b8      	blx	r7
					if ( is_ok ) {
 1022754:	4605      	mov	r5, r0
 1022756:	2800      	cmp	r0, #0
 1022758:	d0d9      	beq.n	102270e <SM_APP_bBack_up_st_41+0x16>
 102275a:	a902      	add	r1, sp, #8
 102275c:	2345      	movs	r3, #69	; 0x45
 102275e:	f801 3d03 	strb.w	r3, [r1, #-3]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1022762:	4632      	mov	r2, r6
 1022764:	f642 701b 	movw	r0, #12059	; 0x2f1b
 1022768:	47b8      	blx	r7
						EEPROM_writer(CCP_ST_41_NVM_CRC_ADDR, &calc_crc, 2);
 102276a:	2202      	movs	r2, #2
 102276c:	f10d 0106 	add.w	r1, sp, #6
 1022770:	f642 701c 	movw	r0, #12060	; 0x2f1c
 1022774:	47b8      	blx	r7
 1022776:	e7cb      	b.n	1022710 <SM_APP_bBack_up_st_41+0x18>
		is_ok = true;
 1022778:	2501      	movs	r5, #1
}
 102277a:	4628      	mov	r0, r5
 102277c:	b003      	add	sp, #12
 102277e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1022780:	a902      	add	r1, sp, #8
 1022782:	23ff      	movs	r3, #255	; 0xff
 1022784:	f801 3d06 	strb.w	r3, [r1, #-6]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1022788:	2201      	movs	r2, #1
 102278a:	4e12      	ldr	r6, [pc, #72]	; (10227d4 <SM_APP_bBack_up_st_41+0xdc>)
 102278c:	f641 3093 	movw	r0, #7059	; 0x1b93
 1022790:	47b0      	blx	r6
					is_ok = EEPROM_writer(MCP_ST_41_START_ADDR, &temp_table_backup, table_size);
 1022792:	4622      	mov	r2, r4
 1022794:	490d      	ldr	r1, [pc, #52]	; (10227cc <SM_APP_bBack_up_st_41+0xd4>)
 1022796:	f641 3096 	movw	r0, #7062	; 0x1b96
 102279a:	47b0      	blx	r6
					if ( is_ok ) {
 102279c:	4605      	mov	r5, r0
 102279e:	2800      	cmp	r0, #0
 10227a0:	d0b5      	beq.n	102270e <SM_APP_bBack_up_st_41+0x16>
 10227a2:	a902      	add	r1, sp, #8
 10227a4:	2345      	movs	r3, #69	; 0x45
 10227a6:	f801 3d05 	strb.w	r3, [r1, #-5]!
	EEPROM_writer( table_state_addr, &state, 1 );
 10227aa:	2201      	movs	r2, #1
 10227ac:	f641 3093 	movw	r0, #7059	; 0x1b93
 10227b0:	47b0      	blx	r6
						EEPROM_writer(MCP_ST_41_NVM_CRC_ADDR, &calc_crc, 2);
 10227b2:	2202      	movs	r2, #2
 10227b4:	f10d 0106 	add.w	r1, sp, #6
 10227b8:	f641 3094 	movw	r0, #7060	; 0x1b94
 10227bc:	47b0      	blx	r6
 10227be:	e7a7      	b.n	1022710 <SM_APP_bBack_up_st_41+0x18>
 10227c0:	0102ac29 	.word	0x0102ac29
 10227c4:	0101f85d 	.word	0x0101f85d
 10227c8:	0102ab9d 	.word	0x0102ab9d
 10227cc:	20000ed0 	.word	0x20000ed0
 10227d0:	01016b5d 	.word	0x01016b5d
 10227d4:	01017509 	.word	0x01017509

010227d8 <SM_APP_bRestore_st_41_from_backup>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bRestore_st_41_from_backup(uint16_t backup_area_id) {
 10227d8:	b530      	push	{r4, r5, lr}
 10227da:	b083      	sub	sp, #12

	bool is_ok = false;
	uint16_t table_size;
	uint16_t backup_crc = 0, calc_crc = 1;
 10227dc:	2200      	movs	r2, #0

	table_size = SECR_APP_usSt_41_get_size();
 10227de:	4b26      	ldr	r3, [pc, #152]	; (1022878 <SM_APP_bRestore_st_41_from_backup+0xa0>)
	uint16_t backup_crc = 0, calc_crc = 1;
 10227e0:	f8ad 2006 	strh.w	r2, [sp, #6]
bool SM_APP_bRestore_st_41_from_backup(uint16_t backup_area_id) {
 10227e4:	4605      	mov	r5, r0
	table_size = SECR_APP_usSt_41_get_size();
 10227e6:	4798      	blx	r3

	if ( table_size > 0 ) {
 10227e8:	b1e0      	cbz	r0, 1022824 <SM_APP_bRestore_st_41_from_backup+0x4c>

		if ( sizeof(temp_table_backup) > table_size ) {
 10227ea:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
 10227ee:	4604      	mov	r4, r0
 10227f0:	d215      	bcs.n	102281e <SM_APP_bRestore_st_41_from_backup+0x46>
		
			switch (backup_area_id) {
 10227f2:	b1f5      	cbz	r5, 1022832 <SM_APP_bRestore_st_41_from_backup+0x5a>
 10227f4:	2d01      	cmp	r5, #1
 10227f6:	d10a      	bne.n	102280e <SM_APP_bRestore_st_41_from_backup+0x36>
	EEPROM_reader( table_state_addr, &state, 1 );
 10227f8:	462a      	mov	r2, r5
 10227fa:	f10d 0105 	add.w	r1, sp, #5
 10227fe:	f642 701b 	movw	r0, #12059	; 0x2f1b
 1022802:	4d1e      	ldr	r5, [pc, #120]	; (102287c <SM_APP_bRestore_st_41_from_backup+0xa4>)
 1022804:	47a8      	blx	r5
	return state;
 1022806:	f89d 3005 	ldrb.w	r3, [sp, #5]
					}
					break;

				case MP_120_CCP_AREA:
			
					if ( SM_APP_ucGet_table_state(CCP_ST_41_PROG_STATE_ADDR) == C1219_TABLE_FULL ) {
 102280a:	2b45      	cmp	r3, #69	; 0x45
 102280c:	d028      	beq.n	1022860 <SM_APP_bRestore_st_41_from_backup+0x88>

				default:
					break;
			}

			calc_crc = CRC_crc16(&temp_table_backup[0], table_size);
 102280e:	4b1c      	ldr	r3, [pc, #112]	; (1022880 <SM_APP_bRestore_st_41_from_backup+0xa8>)
 1022810:	481c      	ldr	r0, [pc, #112]	; (1022884 <SM_APP_bRestore_st_41_from_backup+0xac>)
 1022812:	4621      	mov	r1, r4
 1022814:	4798      	blx	r3
			is_ok = (calc_crc == backup_crc) ? SECR_APP_bSt_41_execute_table_writing(&temp_table_backup[0]) : false;
 1022816:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 102281a:	4283      	cmp	r3, r0
 102281c:	d005      	beq.n	102282a <SM_APP_bRestore_st_41_from_backup+0x52>
	bool is_ok = false;
 102281e:	2000      	movs	r0, #0
	else {
		is_ok = true;
	}

	return is_ok;
}
 1022820:	b003      	add	sp, #12
 1022822:	bd30      	pop	{r4, r5, pc}
		is_ok = true;
 1022824:	2001      	movs	r0, #1
}
 1022826:	b003      	add	sp, #12
 1022828:	bd30      	pop	{r4, r5, pc}
			is_ok = (calc_crc == backup_crc) ? SECR_APP_bSt_41_execute_table_writing(&temp_table_backup[0]) : false;
 102282a:	4b17      	ldr	r3, [pc, #92]	; (1022888 <SM_APP_bRestore_st_41_from_backup+0xb0>)
 102282c:	4815      	ldr	r0, [pc, #84]	; (1022884 <SM_APP_bRestore_st_41_from_backup+0xac>)
 102282e:	4798      	blx	r3
 1022830:	e7f6      	b.n	1022820 <SM_APP_bRestore_st_41_from_backup+0x48>
	EEPROM_reader( table_state_addr, &state, 1 );
 1022832:	2201      	movs	r2, #1
 1022834:	f10d 0105 	add.w	r1, sp, #5
 1022838:	f641 3093 	movw	r0, #7059	; 0x1b93
 102283c:	4d0f      	ldr	r5, [pc, #60]	; (102287c <SM_APP_bRestore_st_41_from_backup+0xa4>)
 102283e:	47a8      	blx	r5
	return state;
 1022840:	f89d 3005 	ldrb.w	r3, [sp, #5]
					if ( SM_APP_ucGet_table_state(MCP_ST_41_PROG_STATE_ADDR) == C1219_TABLE_FULL ) {
 1022844:	2b45      	cmp	r3, #69	; 0x45
 1022846:	d1e2      	bne.n	102280e <SM_APP_bRestore_st_41_from_backup+0x36>
						EEPROM_reader(MCP_ST_41_NVM_CRC_ADDR, &backup_crc, 2);
 1022848:	f10d 0106 	add.w	r1, sp, #6
 102284c:	2202      	movs	r2, #2
 102284e:	f641 3094 	movw	r0, #7060	; 0x1b94
 1022852:	47a8      	blx	r5
						EEPROM_reader(MCP_ST_41_START_ADDR, &temp_table_backup, table_size);
 1022854:	4622      	mov	r2, r4
 1022856:	490b      	ldr	r1, [pc, #44]	; (1022884 <SM_APP_bRestore_st_41_from_backup+0xac>)
 1022858:	f641 3096 	movw	r0, #7062	; 0x1b96
 102285c:	47a8      	blx	r5
 102285e:	e7d6      	b.n	102280e <SM_APP_bRestore_st_41_from_backup+0x36>
						EEPROM_reader(CCP_ST_41_NVM_CRC_ADDR, &backup_crc, 2);
 1022860:	f10d 0106 	add.w	r1, sp, #6
 1022864:	2202      	movs	r2, #2
 1022866:	f642 701c 	movw	r0, #12060	; 0x2f1c
 102286a:	47a8      	blx	r5
						EEPROM_reader(CCP_ST_41_START_ADDR, &temp_table_backup, table_size);
 102286c:	4622      	mov	r2, r4
 102286e:	4905      	ldr	r1, [pc, #20]	; (1022884 <SM_APP_bRestore_st_41_from_backup+0xac>)
 1022870:	f642 701e 	movw	r0, #12062	; 0x2f1e
 1022874:	47a8      	blx	r5
 1022876:	e7ca      	b.n	102280e <SM_APP_bRestore_st_41_from_backup+0x36>
 1022878:	0102ac29 	.word	0x0102ac29
 102287c:	01017511 	.word	0x01017511
 1022880:	01016b5d 	.word	0x01016b5d
 1022884:	20000ed0 	.word	0x20000ed0
 1022888:	0102abc5 	.word	0x0102abc5

0102288c <SM_APP_bBack_up_st_42>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bBack_up_st_42(uint16_t backup_area_id) {
 102288c:	b5f0      	push	{r4, r5, r6, r7, lr}
	
	bool is_ok = false;
	uint16_t table_size;
	uint16_t calc_crc;
	
	table_size = SECR_APP_usSt_42_get_size();
 102288e:	4b31      	ldr	r3, [pc, #196]	; (1022954 <SM_APP_bBack_up_st_42+0xc8>)
bool SM_APP_bBack_up_st_42(uint16_t backup_area_id) {
 1022890:	b083      	sub	sp, #12
 1022892:	4606      	mov	r6, r0
	table_size = SECR_APP_usSt_42_get_size();
 1022894:	4798      	blx	r3

	if ( table_size > 0 ) {
 1022896:	2800      	cmp	r0, #0
 1022898:	d038      	beq.n	102290c <SM_APP_bBack_up_st_42+0x80>

		if ( ( sizeof(temp_table_backup) > table_size ) && ( !SM_APP_vIs_st_42_corrupted_data() ) ) {
 102289a:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
 102289e:	4604      	mov	r4, r0
 10228a0:	d303      	bcc.n	10228aa <SM_APP_bBack_up_st_42+0x1e>
	bool is_ok = false;
 10228a2:	2500      	movs	r5, #0
	else {
		is_ok = true;
	}

	return is_ok;
}
 10228a4:	4628      	mov	r0, r5
 10228a6:	b003      	add	sp, #12
 10228a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ( ( sizeof(temp_table_backup) > table_size ) && ( !SM_APP_vIs_st_42_corrupted_data() ) ) {
 10228aa:	4b2b      	ldr	r3, [pc, #172]	; (1022958 <SM_APP_bBack_up_st_42+0xcc>)
 10228ac:	4798      	blx	r3
 10228ae:	4605      	mov	r5, r0
 10228b0:	2800      	cmp	r0, #0
 10228b2:	d1f6      	bne.n	10228a2 <SM_APP_bBack_up_st_42+0x16>
			SECR_APP_bSt_42_execute_table_reading(&temp_table_backup[0]);
 10228b4:	4b29      	ldr	r3, [pc, #164]	; (102295c <SM_APP_bBack_up_st_42+0xd0>)
 10228b6:	482a      	ldr	r0, [pc, #168]	; (1022960 <SM_APP_bBack_up_st_42+0xd4>)
 10228b8:	4798      	blx	r3
			calc_crc = CRC_crc16(&temp_table_backup[0], table_size);
 10228ba:	4621      	mov	r1, r4
 10228bc:	4828      	ldr	r0, [pc, #160]	; (1022960 <SM_APP_bBack_up_st_42+0xd4>)
 10228be:	4b29      	ldr	r3, [pc, #164]	; (1022964 <SM_APP_bBack_up_st_42+0xd8>)
 10228c0:	4798      	blx	r3
 10228c2:	f8ad 0006 	strh.w	r0, [sp, #6]
			switch (backup_area_id) {
 10228c6:	b32e      	cbz	r6, 1022914 <SM_APP_bBack_up_st_42+0x88>
 10228c8:	2e01      	cmp	r6, #1
 10228ca:	d1eb      	bne.n	10228a4 <SM_APP_bBack_up_st_42+0x18>
 10228cc:	a902      	add	r1, sp, #8
 10228ce:	23ff      	movs	r3, #255	; 0xff
 10228d0:	f801 3d04 	strb.w	r3, [r1, #-4]!
	EEPROM_writer( table_state_addr, &state, 1 );
 10228d4:	4632      	mov	r2, r6
 10228d6:	4f24      	ldr	r7, [pc, #144]	; (1022968 <SM_APP_bBack_up_st_42+0xdc>)
 10228d8:	f642 7027 	movw	r0, #12071	; 0x2f27
 10228dc:	47b8      	blx	r7
					is_ok = EEPROM_writer(CCP_ST_42_START_ADDR, &temp_table_backup, table_size);
 10228de:	4622      	mov	r2, r4
 10228e0:	491f      	ldr	r1, [pc, #124]	; (1022960 <SM_APP_bBack_up_st_42+0xd4>)
 10228e2:	f642 702a 	movw	r0, #12074	; 0x2f2a
 10228e6:	47b8      	blx	r7
					if ( is_ok ) {
 10228e8:	4605      	mov	r5, r0
 10228ea:	2800      	cmp	r0, #0
 10228ec:	d0d9      	beq.n	10228a2 <SM_APP_bBack_up_st_42+0x16>
 10228ee:	a902      	add	r1, sp, #8
 10228f0:	2345      	movs	r3, #69	; 0x45
 10228f2:	f801 3d03 	strb.w	r3, [r1, #-3]!
	EEPROM_writer( table_state_addr, &state, 1 );
 10228f6:	4632      	mov	r2, r6
 10228f8:	f642 7027 	movw	r0, #12071	; 0x2f27
 10228fc:	47b8      	blx	r7
						EEPROM_writer(CCP_ST_42_NVM_CRC_ADDR, &calc_crc, 2);
 10228fe:	2202      	movs	r2, #2
 1022900:	f10d 0106 	add.w	r1, sp, #6
 1022904:	f642 7028 	movw	r0, #12072	; 0x2f28
 1022908:	47b8      	blx	r7
 102290a:	e7cb      	b.n	10228a4 <SM_APP_bBack_up_st_42+0x18>
		is_ok = true;
 102290c:	2501      	movs	r5, #1
}
 102290e:	4628      	mov	r0, r5
 1022910:	b003      	add	sp, #12
 1022912:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1022914:	a902      	add	r1, sp, #8
 1022916:	23ff      	movs	r3, #255	; 0xff
 1022918:	f801 3d06 	strb.w	r3, [r1, #-6]!
	EEPROM_writer( table_state_addr, &state, 1 );
 102291c:	2201      	movs	r2, #1
 102291e:	4e12      	ldr	r6, [pc, #72]	; (1022968 <SM_APP_bBack_up_st_42+0xdc>)
 1022920:	f641 309f 	movw	r0, #7071	; 0x1b9f
 1022924:	47b0      	blx	r6
					is_ok = EEPROM_writer(MCP_ST_42_START_ADDR, &temp_table_backup, table_size);
 1022926:	4622      	mov	r2, r4
 1022928:	490d      	ldr	r1, [pc, #52]	; (1022960 <SM_APP_bBack_up_st_42+0xd4>)
 102292a:	f641 30a2 	movw	r0, #7074	; 0x1ba2
 102292e:	47b0      	blx	r6
					if ( is_ok ) {
 1022930:	4605      	mov	r5, r0
 1022932:	2800      	cmp	r0, #0
 1022934:	d0b5      	beq.n	10228a2 <SM_APP_bBack_up_st_42+0x16>
 1022936:	a902      	add	r1, sp, #8
 1022938:	2345      	movs	r3, #69	; 0x45
 102293a:	f801 3d05 	strb.w	r3, [r1, #-5]!
	EEPROM_writer( table_state_addr, &state, 1 );
 102293e:	2201      	movs	r2, #1
 1022940:	f641 309f 	movw	r0, #7071	; 0x1b9f
 1022944:	47b0      	blx	r6
						EEPROM_writer(MCP_ST_42_NVM_CRC_ADDR, &calc_crc, 2);
 1022946:	2202      	movs	r2, #2
 1022948:	f10d 0106 	add.w	r1, sp, #6
 102294c:	f44f 50dd 	mov.w	r0, #7072	; 0x1ba0
 1022950:	47b0      	blx	r6
 1022952:	e7a7      	b.n	10228a4 <SM_APP_bBack_up_st_42+0x18>
 1022954:	0102ae6d 	.word	0x0102ae6d
 1022958:	0101f959 	.word	0x0101f959
 102295c:	0102ada9 	.word	0x0102ada9
 1022960:	20000ed0 	.word	0x20000ed0
 1022964:	01016b5d 	.word	0x01016b5d
 1022968:	01017509 	.word	0x01017509

0102296c <SM_APP_bRestore_st_42_from_backup>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bRestore_st_42_from_backup(uint16_t backup_area_id) {
 102296c:	b530      	push	{r4, r5, lr}
 102296e:	b083      	sub	sp, #12

	bool is_ok = false;
	uint16_t table_size;
	uint16_t backup_crc = 0, calc_crc = 1;
 1022970:	2200      	movs	r2, #0

	table_size = SECR_APP_usSt_42_get_size();
 1022972:	4b26      	ldr	r3, [pc, #152]	; (1022a0c <SM_APP_bRestore_st_42_from_backup+0xa0>)
	uint16_t backup_crc = 0, calc_crc = 1;
 1022974:	f8ad 2006 	strh.w	r2, [sp, #6]
bool SM_APP_bRestore_st_42_from_backup(uint16_t backup_area_id) {
 1022978:	4605      	mov	r5, r0
	table_size = SECR_APP_usSt_42_get_size();
 102297a:	4798      	blx	r3

	if ( table_size > 0 ) {
 102297c:	b1e0      	cbz	r0, 10229b8 <SM_APP_bRestore_st_42_from_backup+0x4c>

		if ( sizeof(temp_table_backup) > table_size ) {
 102297e:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
 1022982:	4604      	mov	r4, r0
 1022984:	d215      	bcs.n	10229b2 <SM_APP_bRestore_st_42_from_backup+0x46>
		
			switch (backup_area_id) {
 1022986:	b1f5      	cbz	r5, 10229c6 <SM_APP_bRestore_st_42_from_backup+0x5a>
 1022988:	2d01      	cmp	r5, #1
 102298a:	d10a      	bne.n	10229a2 <SM_APP_bRestore_st_42_from_backup+0x36>
	EEPROM_reader( table_state_addr, &state, 1 );
 102298c:	462a      	mov	r2, r5
 102298e:	f10d 0105 	add.w	r1, sp, #5
 1022992:	f642 7027 	movw	r0, #12071	; 0x2f27
 1022996:	4d1e      	ldr	r5, [pc, #120]	; (1022a10 <SM_APP_bRestore_st_42_from_backup+0xa4>)
 1022998:	47a8      	blx	r5
	return state;
 102299a:	f89d 3005 	ldrb.w	r3, [sp, #5]
					}
					break;

				case MP_120_CCP_AREA:
			
					if ( SM_APP_ucGet_table_state(CCP_ST_42_PROG_STATE_ADDR) == C1219_TABLE_FULL ) {
 102299e:	2b45      	cmp	r3, #69	; 0x45
 10229a0:	d028      	beq.n	10229f4 <SM_APP_bRestore_st_42_from_backup+0x88>

				default:
					break;
			}

			calc_crc = CRC_crc16(&temp_table_backup[0], table_size);
 10229a2:	4b1c      	ldr	r3, [pc, #112]	; (1022a14 <SM_APP_bRestore_st_42_from_backup+0xa8>)
 10229a4:	481c      	ldr	r0, [pc, #112]	; (1022a18 <SM_APP_bRestore_st_42_from_backup+0xac>)
 10229a6:	4621      	mov	r1, r4
 10229a8:	4798      	blx	r3
			is_ok = (calc_crc == backup_crc) ? SECR_APP_bSt_42_execute_table_writing(&temp_table_backup[0]) : false;
 10229aa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 10229ae:	4283      	cmp	r3, r0
 10229b0:	d005      	beq.n	10229be <SM_APP_bRestore_st_42_from_backup+0x52>
	bool is_ok = false;
 10229b2:	2000      	movs	r0, #0
	else {
		is_ok = true;
	}

	return is_ok;
}
 10229b4:	b003      	add	sp, #12
 10229b6:	bd30      	pop	{r4, r5, pc}
		is_ok = true;
 10229b8:	2001      	movs	r0, #1
}
 10229ba:	b003      	add	sp, #12
 10229bc:	bd30      	pop	{r4, r5, pc}
			is_ok = (calc_crc == backup_crc) ? SECR_APP_bSt_42_execute_table_writing(&temp_table_backup[0]) : false;
 10229be:	4b17      	ldr	r3, [pc, #92]	; (1022a1c <SM_APP_bRestore_st_42_from_backup+0xb0>)
 10229c0:	4815      	ldr	r0, [pc, #84]	; (1022a18 <SM_APP_bRestore_st_42_from_backup+0xac>)
 10229c2:	4798      	blx	r3
 10229c4:	e7f6      	b.n	10229b4 <SM_APP_bRestore_st_42_from_backup+0x48>
	EEPROM_reader( table_state_addr, &state, 1 );
 10229c6:	2201      	movs	r2, #1
 10229c8:	f10d 0105 	add.w	r1, sp, #5
 10229cc:	f641 309f 	movw	r0, #7071	; 0x1b9f
 10229d0:	4d0f      	ldr	r5, [pc, #60]	; (1022a10 <SM_APP_bRestore_st_42_from_backup+0xa4>)
 10229d2:	47a8      	blx	r5
	return state;
 10229d4:	f89d 3005 	ldrb.w	r3, [sp, #5]
					if ( SM_APP_ucGet_table_state(MCP_ST_42_PROG_STATE_ADDR) == C1219_TABLE_FULL ) {
 10229d8:	2b45      	cmp	r3, #69	; 0x45
 10229da:	d1e2      	bne.n	10229a2 <SM_APP_bRestore_st_42_from_backup+0x36>
						EEPROM_reader(MCP_ST_42_NVM_CRC_ADDR, &backup_crc, 2);
 10229dc:	f10d 0106 	add.w	r1, sp, #6
 10229e0:	2202      	movs	r2, #2
 10229e2:	f44f 50dd 	mov.w	r0, #7072	; 0x1ba0
 10229e6:	47a8      	blx	r5
						EEPROM_reader(MCP_ST_42_START_ADDR, &temp_table_backup, table_size);
 10229e8:	4622      	mov	r2, r4
 10229ea:	490b      	ldr	r1, [pc, #44]	; (1022a18 <SM_APP_bRestore_st_42_from_backup+0xac>)
 10229ec:	f641 30a2 	movw	r0, #7074	; 0x1ba2
 10229f0:	47a8      	blx	r5
 10229f2:	e7d6      	b.n	10229a2 <SM_APP_bRestore_st_42_from_backup+0x36>
						EEPROM_reader(CCP_ST_42_NVM_CRC_ADDR, &backup_crc, 2);
 10229f4:	f10d 0106 	add.w	r1, sp, #6
 10229f8:	2202      	movs	r2, #2
 10229fa:	f642 7028 	movw	r0, #12072	; 0x2f28
 10229fe:	47a8      	blx	r5
						EEPROM_reader(CCP_ST_42_START_ADDR, &temp_table_backup, table_size);
 1022a00:	4622      	mov	r2, r4
 1022a02:	4905      	ldr	r1, [pc, #20]	; (1022a18 <SM_APP_bRestore_st_42_from_backup+0xac>)
 1022a04:	f642 702a 	movw	r0, #12074	; 0x2f2a
 1022a08:	47a8      	blx	r5
 1022a0a:	e7ca      	b.n	10229a2 <SM_APP_bRestore_st_42_from_backup+0x36>
 1022a0c:	0102ae6d 	.word	0x0102ae6d
 1022a10:	01017511 	.word	0x01017511
 1022a14:	01016b5d 	.word	0x01016b5d
 1022a18:	20000ed0 	.word	0x20000ed0
 1022a1c:	0102ade5 	.word	0x0102ade5

01022a20 <SM_APP_bBack_up_st_43>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bBack_up_st_43(uint16_t backup_area_id) {
 1022a20:	b5f0      	push	{r4, r5, r6, r7, lr}
	
	bool is_ok = false;
	uint16_t table_size;
	uint16_t calc_crc;
	
	table_size = SECR_APP_usSt_43_get_size();
 1022a22:	4b31      	ldr	r3, [pc, #196]	; (1022ae8 <SM_APP_bBack_up_st_43+0xc8>)
bool SM_APP_bBack_up_st_43(uint16_t backup_area_id) {
 1022a24:	b083      	sub	sp, #12
 1022a26:	4606      	mov	r6, r0
	table_size = SECR_APP_usSt_43_get_size();
 1022a28:	4798      	blx	r3

	if ( table_size > 0 ) {
 1022a2a:	2800      	cmp	r0, #0
 1022a2c:	d038      	beq.n	1022aa0 <SM_APP_bBack_up_st_43+0x80>

		if ( ( sizeof(temp_table_backup) > table_size ) && ( !SM_APP_vIs_st_43_corrupted_data() ) ) {
 1022a2e:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
 1022a32:	4604      	mov	r4, r0
 1022a34:	d303      	bcc.n	1022a3e <SM_APP_bBack_up_st_43+0x1e>
	bool is_ok = false;
 1022a36:	2500      	movs	r5, #0
	else {
		is_ok = true;
	}

	return is_ok;
}
 1022a38:	4628      	mov	r0, r5
 1022a3a:	b003      	add	sp, #12
 1022a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ( ( sizeof(temp_table_backup) > table_size ) && ( !SM_APP_vIs_st_43_corrupted_data() ) ) {
 1022a3e:	4b2b      	ldr	r3, [pc, #172]	; (1022aec <SM_APP_bBack_up_st_43+0xcc>)
 1022a40:	4798      	blx	r3
 1022a42:	4605      	mov	r5, r0
 1022a44:	2800      	cmp	r0, #0
 1022a46:	d1f6      	bne.n	1022a36 <SM_APP_bBack_up_st_43+0x16>
			SECR_APP_bSt_43_execute_table_reading(&temp_table_backup[0]);
 1022a48:	4b29      	ldr	r3, [pc, #164]	; (1022af0 <SM_APP_bBack_up_st_43+0xd0>)
 1022a4a:	482a      	ldr	r0, [pc, #168]	; (1022af4 <SM_APP_bBack_up_st_43+0xd4>)
 1022a4c:	4798      	blx	r3
			calc_crc = CRC_crc16(&temp_table_backup[0], table_size);
 1022a4e:	4621      	mov	r1, r4
 1022a50:	4828      	ldr	r0, [pc, #160]	; (1022af4 <SM_APP_bBack_up_st_43+0xd4>)
 1022a52:	4b29      	ldr	r3, [pc, #164]	; (1022af8 <SM_APP_bBack_up_st_43+0xd8>)
 1022a54:	4798      	blx	r3
 1022a56:	f8ad 0006 	strh.w	r0, [sp, #6]
			switch (backup_area_id) {
 1022a5a:	b32e      	cbz	r6, 1022aa8 <SM_APP_bBack_up_st_43+0x88>
 1022a5c:	2e01      	cmp	r6, #1
 1022a5e:	d1eb      	bne.n	1022a38 <SM_APP_bBack_up_st_43+0x18>
 1022a60:	a902      	add	r1, sp, #8
 1022a62:	23ff      	movs	r3, #255	; 0xff
 1022a64:	f801 3d04 	strb.w	r3, [r1, #-4]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1022a68:	4632      	mov	r2, r6
 1022a6a:	4f24      	ldr	r7, [pc, #144]	; (1022afc <SM_APP_bBack_up_st_43+0xdc>)
 1022a6c:	f642 70e7 	movw	r0, #12263	; 0x2fe7
 1022a70:	47b8      	blx	r7
					is_ok = EEPROM_writer(CCP_ST_43_START_ADDR, &temp_table_backup, table_size);
 1022a72:	4622      	mov	r2, r4
 1022a74:	491f      	ldr	r1, [pc, #124]	; (1022af4 <SM_APP_bBack_up_st_43+0xd4>)
 1022a76:	f642 70ea 	movw	r0, #12266	; 0x2fea
 1022a7a:	47b8      	blx	r7
					if ( is_ok ) {
 1022a7c:	4605      	mov	r5, r0
 1022a7e:	2800      	cmp	r0, #0
 1022a80:	d0d9      	beq.n	1022a36 <SM_APP_bBack_up_st_43+0x16>
 1022a82:	a902      	add	r1, sp, #8
 1022a84:	2345      	movs	r3, #69	; 0x45
 1022a86:	f801 3d03 	strb.w	r3, [r1, #-3]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1022a8a:	4632      	mov	r2, r6
 1022a8c:	f642 70e7 	movw	r0, #12263	; 0x2fe7
 1022a90:	47b8      	blx	r7
						EEPROM_writer(CCP_ST_43_NVM_CRC_ADDR, &calc_crc, 2);
 1022a92:	2202      	movs	r2, #2
 1022a94:	f10d 0106 	add.w	r1, sp, #6
 1022a98:	f642 70e8 	movw	r0, #12264	; 0x2fe8
 1022a9c:	47b8      	blx	r7
 1022a9e:	e7cb      	b.n	1022a38 <SM_APP_bBack_up_st_43+0x18>
		is_ok = true;
 1022aa0:	2501      	movs	r5, #1
}
 1022aa2:	4628      	mov	r0, r5
 1022aa4:	b003      	add	sp, #12
 1022aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1022aa8:	a902      	add	r1, sp, #8
 1022aaa:	23ff      	movs	r3, #255	; 0xff
 1022aac:	f801 3d06 	strb.w	r3, [r1, #-6]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1022ab0:	2201      	movs	r2, #1
 1022ab2:	4e12      	ldr	r6, [pc, #72]	; (1022afc <SM_APP_bBack_up_st_43+0xdc>)
 1022ab4:	f641 405f 	movw	r0, #7263	; 0x1c5f
 1022ab8:	47b0      	blx	r6
					is_ok = EEPROM_writer(MCP_ST_43_START_ADDR, &temp_table_backup, table_size);
 1022aba:	4622      	mov	r2, r4
 1022abc:	490d      	ldr	r1, [pc, #52]	; (1022af4 <SM_APP_bBack_up_st_43+0xd4>)
 1022abe:	f641 4062 	movw	r0, #7266	; 0x1c62
 1022ac2:	47b0      	blx	r6
					if ( is_ok ) {
 1022ac4:	4605      	mov	r5, r0
 1022ac6:	2800      	cmp	r0, #0
 1022ac8:	d0b5      	beq.n	1022a36 <SM_APP_bBack_up_st_43+0x16>
 1022aca:	a902      	add	r1, sp, #8
 1022acc:	2345      	movs	r3, #69	; 0x45
 1022ace:	f801 3d05 	strb.w	r3, [r1, #-5]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1022ad2:	2201      	movs	r2, #1
 1022ad4:	f641 405f 	movw	r0, #7263	; 0x1c5f
 1022ad8:	47b0      	blx	r6
						EEPROM_writer(MCP_ST_43_NVM_CRC_ADDR, &calc_crc, 2);
 1022ada:	2202      	movs	r2, #2
 1022adc:	f10d 0106 	add.w	r1, sp, #6
 1022ae0:	f44f 50e3 	mov.w	r0, #7264	; 0x1c60
 1022ae4:	47b0      	blx	r6
 1022ae6:	e7a7      	b.n	1022a38 <SM_APP_bBack_up_st_43+0x18>
 1022ae8:	0102afed 	.word	0x0102afed
 1022aec:	0101fa55 	.word	0x0101fa55
 1022af0:	0102af7d 	.word	0x0102af7d
 1022af4:	20000ed0 	.word	0x20000ed0
 1022af8:	01016b5d 	.word	0x01016b5d
 1022afc:	01017509 	.word	0x01017509

01022b00 <SM_APP_bRestore_st_43_from_backup>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bRestore_st_43_from_backup(uint16_t backup_area_id) {
 1022b00:	b530      	push	{r4, r5, lr}
 1022b02:	b083      	sub	sp, #12

	bool is_ok = false;
	uint16_t table_size;
	uint16_t backup_crc = 0, calc_crc = 1;
 1022b04:	2200      	movs	r2, #0

	table_size = SECR_APP_usSt_43_get_size();
 1022b06:	4b26      	ldr	r3, [pc, #152]	; (1022ba0 <SM_APP_bRestore_st_43_from_backup+0xa0>)
	uint16_t backup_crc = 0, calc_crc = 1;
 1022b08:	f8ad 2006 	strh.w	r2, [sp, #6]
bool SM_APP_bRestore_st_43_from_backup(uint16_t backup_area_id) {
 1022b0c:	4605      	mov	r5, r0
	table_size = SECR_APP_usSt_43_get_size();
 1022b0e:	4798      	blx	r3

	if ( table_size > 0 ) {
 1022b10:	b1e0      	cbz	r0, 1022b4c <SM_APP_bRestore_st_43_from_backup+0x4c>

		if ( sizeof(temp_table_backup) > table_size ) {
 1022b12:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
 1022b16:	4604      	mov	r4, r0
 1022b18:	d215      	bcs.n	1022b46 <SM_APP_bRestore_st_43_from_backup+0x46>
		
			switch (backup_area_id) {
 1022b1a:	b1f5      	cbz	r5, 1022b5a <SM_APP_bRestore_st_43_from_backup+0x5a>
 1022b1c:	2d01      	cmp	r5, #1
 1022b1e:	d10a      	bne.n	1022b36 <SM_APP_bRestore_st_43_from_backup+0x36>
	EEPROM_reader( table_state_addr, &state, 1 );
 1022b20:	462a      	mov	r2, r5
 1022b22:	f10d 0105 	add.w	r1, sp, #5
 1022b26:	f642 70e7 	movw	r0, #12263	; 0x2fe7
 1022b2a:	4d1e      	ldr	r5, [pc, #120]	; (1022ba4 <SM_APP_bRestore_st_43_from_backup+0xa4>)
 1022b2c:	47a8      	blx	r5
	return state;
 1022b2e:	f89d 3005 	ldrb.w	r3, [sp, #5]
					}
					break;

				case MP_120_CCP_AREA:
			
					if ( SM_APP_ucGet_table_state(CCP_ST_43_PROG_STATE_ADDR) == C1219_TABLE_FULL ) {
 1022b32:	2b45      	cmp	r3, #69	; 0x45
 1022b34:	d028      	beq.n	1022b88 <SM_APP_bRestore_st_43_from_backup+0x88>

				default:
					break;
			}

			calc_crc = CRC_crc16(&temp_table_backup[0], table_size);
 1022b36:	4b1c      	ldr	r3, [pc, #112]	; (1022ba8 <SM_APP_bRestore_st_43_from_backup+0xa8>)
 1022b38:	481c      	ldr	r0, [pc, #112]	; (1022bac <SM_APP_bRestore_st_43_from_backup+0xac>)
 1022b3a:	4621      	mov	r1, r4
 1022b3c:	4798      	blx	r3
			is_ok = (calc_crc == backup_crc) ? SECR_APP_bSt_43_execute_table_writing(&temp_table_backup[0]) : false;
 1022b3e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 1022b42:	4283      	cmp	r3, r0
 1022b44:	d005      	beq.n	1022b52 <SM_APP_bRestore_st_43_from_backup+0x52>
	bool is_ok = false;
 1022b46:	2000      	movs	r0, #0
	else {
		is_ok = true;
	}

	return is_ok;
}
 1022b48:	b003      	add	sp, #12
 1022b4a:	bd30      	pop	{r4, r5, pc}
		is_ok = true;
 1022b4c:	2001      	movs	r0, #1
}
 1022b4e:	b003      	add	sp, #12
 1022b50:	bd30      	pop	{r4, r5, pc}
			is_ok = (calc_crc == backup_crc) ? SECR_APP_bSt_43_execute_table_writing(&temp_table_backup[0]) : false;
 1022b52:	4b17      	ldr	r3, [pc, #92]	; (1022bb0 <SM_APP_bRestore_st_43_from_backup+0xb0>)
 1022b54:	4815      	ldr	r0, [pc, #84]	; (1022bac <SM_APP_bRestore_st_43_from_backup+0xac>)
 1022b56:	4798      	blx	r3
 1022b58:	e7f6      	b.n	1022b48 <SM_APP_bRestore_st_43_from_backup+0x48>
	EEPROM_reader( table_state_addr, &state, 1 );
 1022b5a:	2201      	movs	r2, #1
 1022b5c:	f10d 0105 	add.w	r1, sp, #5
 1022b60:	f641 405f 	movw	r0, #7263	; 0x1c5f
 1022b64:	4d0f      	ldr	r5, [pc, #60]	; (1022ba4 <SM_APP_bRestore_st_43_from_backup+0xa4>)
 1022b66:	47a8      	blx	r5
	return state;
 1022b68:	f89d 3005 	ldrb.w	r3, [sp, #5]
					if ( SM_APP_ucGet_table_state(MCP_ST_43_PROG_STATE_ADDR) == C1219_TABLE_FULL ) {
 1022b6c:	2b45      	cmp	r3, #69	; 0x45
 1022b6e:	d1e2      	bne.n	1022b36 <SM_APP_bRestore_st_43_from_backup+0x36>
						EEPROM_reader(MCP_ST_43_NVM_CRC_ADDR, &backup_crc, 2);
 1022b70:	f10d 0106 	add.w	r1, sp, #6
 1022b74:	2202      	movs	r2, #2
 1022b76:	f44f 50e3 	mov.w	r0, #7264	; 0x1c60
 1022b7a:	47a8      	blx	r5
						EEPROM_reader(MCP_ST_43_START_ADDR, &temp_table_backup, table_size);
 1022b7c:	4622      	mov	r2, r4
 1022b7e:	490b      	ldr	r1, [pc, #44]	; (1022bac <SM_APP_bRestore_st_43_from_backup+0xac>)
 1022b80:	f641 4062 	movw	r0, #7266	; 0x1c62
 1022b84:	47a8      	blx	r5
 1022b86:	e7d6      	b.n	1022b36 <SM_APP_bRestore_st_43_from_backup+0x36>
						EEPROM_reader(CCP_ST_43_NVM_CRC_ADDR, &backup_crc, 2);
 1022b88:	f10d 0106 	add.w	r1, sp, #6
 1022b8c:	2202      	movs	r2, #2
 1022b8e:	f642 70e8 	movw	r0, #12264	; 0x2fe8
 1022b92:	47a8      	blx	r5
						EEPROM_reader(CCP_ST_43_START_ADDR, &temp_table_backup, table_size);
 1022b94:	4622      	mov	r2, r4
 1022b96:	4905      	ldr	r1, [pc, #20]	; (1022bac <SM_APP_bRestore_st_43_from_backup+0xac>)
 1022b98:	f642 70ea 	movw	r0, #12266	; 0x2fea
 1022b9c:	47a8      	blx	r5
 1022b9e:	e7ca      	b.n	1022b36 <SM_APP_bRestore_st_43_from_backup+0x36>
 1022ba0:	0102afed 	.word	0x0102afed
 1022ba4:	01017511 	.word	0x01017511
 1022ba8:	01016b5d 	.word	0x01016b5d
 1022bac:	20000ed0 	.word	0x20000ed0
 1022bb0:	0102afad 	.word	0x0102afad

01022bb4 <SM_APP_bBack_up_st_44>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bBack_up_st_44(uint16_t backup_area_id) {
 1022bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
	
	bool is_ok = false;
	uint16_t table_size;
	uint16_t calc_crc;
	
	table_size = SECR_APP_usSt_44_get_size();
 1022bb6:	4b31      	ldr	r3, [pc, #196]	; (1022c7c <SM_APP_bBack_up_st_44+0xc8>)
bool SM_APP_bBack_up_st_44(uint16_t backup_area_id) {
 1022bb8:	b083      	sub	sp, #12
 1022bba:	4606      	mov	r6, r0
	table_size = SECR_APP_usSt_44_get_size();
 1022bbc:	4798      	blx	r3

	if ( table_size > 0 ) {
 1022bbe:	2800      	cmp	r0, #0
 1022bc0:	d038      	beq.n	1022c34 <SM_APP_bBack_up_st_44+0x80>

		if ( ( sizeof(temp_table_backup) > table_size ) && ( !SM_APP_vIs_st_44_corrupted_data() ) ) {
 1022bc2:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
 1022bc6:	4604      	mov	r4, r0
 1022bc8:	d303      	bcc.n	1022bd2 <SM_APP_bBack_up_st_44+0x1e>
	bool is_ok = false;
 1022bca:	2500      	movs	r5, #0
	else {
		is_ok = true;
	}

	return is_ok;
}
 1022bcc:	4628      	mov	r0, r5
 1022bce:	b003      	add	sp, #12
 1022bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ( ( sizeof(temp_table_backup) > table_size ) && ( !SM_APP_vIs_st_44_corrupted_data() ) ) {
 1022bd2:	4b2b      	ldr	r3, [pc, #172]	; (1022c80 <SM_APP_bBack_up_st_44+0xcc>)
 1022bd4:	4798      	blx	r3
 1022bd6:	4605      	mov	r5, r0
 1022bd8:	2800      	cmp	r0, #0
 1022bda:	d1f6      	bne.n	1022bca <SM_APP_bBack_up_st_44+0x16>
			SECR_APP_bSt_44_execute_table_reading(&temp_table_backup[0]);
 1022bdc:	4b29      	ldr	r3, [pc, #164]	; (1022c84 <SM_APP_bBack_up_st_44+0xd0>)
 1022bde:	482a      	ldr	r0, [pc, #168]	; (1022c88 <SM_APP_bBack_up_st_44+0xd4>)
 1022be0:	4798      	blx	r3
			calc_crc = CRC_crc16(&temp_table_backup[0], table_size);
 1022be2:	4621      	mov	r1, r4
 1022be4:	4828      	ldr	r0, [pc, #160]	; (1022c88 <SM_APP_bBack_up_st_44+0xd4>)
 1022be6:	4b29      	ldr	r3, [pc, #164]	; (1022c8c <SM_APP_bBack_up_st_44+0xd8>)
 1022be8:	4798      	blx	r3
 1022bea:	f8ad 0006 	strh.w	r0, [sp, #6]
			switch (backup_area_id) {
 1022bee:	b32e      	cbz	r6, 1022c3c <SM_APP_bBack_up_st_44+0x88>
 1022bf0:	2e01      	cmp	r6, #1
 1022bf2:	d1eb      	bne.n	1022bcc <SM_APP_bBack_up_st_44+0x18>
 1022bf4:	a902      	add	r1, sp, #8
 1022bf6:	23ff      	movs	r3, #255	; 0xff
 1022bf8:	f801 3d04 	strb.w	r3, [r1, #-4]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1022bfc:	4632      	mov	r2, r6
 1022bfe:	4f24      	ldr	r7, [pc, #144]	; (1022c90 <SM_APP_bBack_up_st_44+0xdc>)
 1022c00:	f642 70f6 	movw	r0, #12278	; 0x2ff6
 1022c04:	47b8      	blx	r7
					is_ok = EEPROM_writer(CCP_ST_44_START_ADDR, &temp_table_backup, table_size);
 1022c06:	4622      	mov	r2, r4
 1022c08:	491f      	ldr	r1, [pc, #124]	; (1022c88 <SM_APP_bBack_up_st_44+0xd4>)
 1022c0a:	f642 70f9 	movw	r0, #12281	; 0x2ff9
 1022c0e:	47b8      	blx	r7
					if ( is_ok ) {
 1022c10:	4605      	mov	r5, r0
 1022c12:	2800      	cmp	r0, #0
 1022c14:	d0d9      	beq.n	1022bca <SM_APP_bBack_up_st_44+0x16>
 1022c16:	a902      	add	r1, sp, #8
 1022c18:	2345      	movs	r3, #69	; 0x45
 1022c1a:	f801 3d03 	strb.w	r3, [r1, #-3]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1022c1e:	4632      	mov	r2, r6
 1022c20:	f642 70f6 	movw	r0, #12278	; 0x2ff6
 1022c24:	47b8      	blx	r7
						EEPROM_writer(CCP_ST_44_NVM_CRC_ADDR, &calc_crc, 2);
 1022c26:	2202      	movs	r2, #2
 1022c28:	f10d 0106 	add.w	r1, sp, #6
 1022c2c:	f642 70f7 	movw	r0, #12279	; 0x2ff7
 1022c30:	47b8      	blx	r7
 1022c32:	e7cb      	b.n	1022bcc <SM_APP_bBack_up_st_44+0x18>
		is_ok = true;
 1022c34:	2501      	movs	r5, #1
}
 1022c36:	4628      	mov	r0, r5
 1022c38:	b003      	add	sp, #12
 1022c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1022c3c:	a902      	add	r1, sp, #8
 1022c3e:	23ff      	movs	r3, #255	; 0xff
 1022c40:	f801 3d06 	strb.w	r3, [r1, #-6]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1022c44:	2201      	movs	r2, #1
 1022c46:	4e12      	ldr	r6, [pc, #72]	; (1022c90 <SM_APP_bBack_up_st_44+0xdc>)
 1022c48:	f641 406e 	movw	r0, #7278	; 0x1c6e
 1022c4c:	47b0      	blx	r6
					is_ok = EEPROM_writer(MCP_ST_44_START_ADDR, &temp_table_backup, table_size);
 1022c4e:	4622      	mov	r2, r4
 1022c50:	490d      	ldr	r1, [pc, #52]	; (1022c88 <SM_APP_bBack_up_st_44+0xd4>)
 1022c52:	f641 4071 	movw	r0, #7281	; 0x1c71
 1022c56:	47b0      	blx	r6
					if ( is_ok ) {
 1022c58:	4605      	mov	r5, r0
 1022c5a:	2800      	cmp	r0, #0
 1022c5c:	d0b5      	beq.n	1022bca <SM_APP_bBack_up_st_44+0x16>
 1022c5e:	a902      	add	r1, sp, #8
 1022c60:	2345      	movs	r3, #69	; 0x45
 1022c62:	f801 3d05 	strb.w	r3, [r1, #-5]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1022c66:	2201      	movs	r2, #1
 1022c68:	f641 406e 	movw	r0, #7278	; 0x1c6e
 1022c6c:	47b0      	blx	r6
						EEPROM_writer(MCP_ST_44_NVM_CRC_ADDR, &calc_crc, 2);
 1022c6e:	2202      	movs	r2, #2
 1022c70:	f10d 0106 	add.w	r1, sp, #6
 1022c74:	f641 406f 	movw	r0, #7279	; 0x1c6f
 1022c78:	47b0      	blx	r6
 1022c7a:	e7a7      	b.n	1022bcc <SM_APP_bBack_up_st_44+0x18>
 1022c7c:	0102b285 	.word	0x0102b285
 1022c80:	0101fb71 	.word	0x0101fb71
 1022c84:	0102b1a9 	.word	0x0102b1a9
 1022c88:	20000ed0 	.word	0x20000ed0
 1022c8c:	01016b5d 	.word	0x01016b5d
 1022c90:	01017509 	.word	0x01017509

01022c94 <SM_APP_bRestore_st_44_from_backup>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bRestore_st_44_from_backup(uint16_t backup_area_id) {
 1022c94:	b530      	push	{r4, r5, lr}
 1022c96:	b083      	sub	sp, #12

	bool is_ok = false;
	uint16_t table_size;
	uint16_t backup_crc = 0, calc_crc = 1;
 1022c98:	2200      	movs	r2, #0

	table_size = SECR_APP_usSt_44_get_size();
 1022c9a:	4b26      	ldr	r3, [pc, #152]	; (1022d34 <SM_APP_bRestore_st_44_from_backup+0xa0>)
	uint16_t backup_crc = 0, calc_crc = 1;
 1022c9c:	f8ad 2006 	strh.w	r2, [sp, #6]
bool SM_APP_bRestore_st_44_from_backup(uint16_t backup_area_id) {
 1022ca0:	4605      	mov	r5, r0
	table_size = SECR_APP_usSt_44_get_size();
 1022ca2:	4798      	blx	r3

	if ( table_size > 0 ) {
 1022ca4:	b1e0      	cbz	r0, 1022ce0 <SM_APP_bRestore_st_44_from_backup+0x4c>

		if ( sizeof(temp_table_backup) > table_size ) {
 1022ca6:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
 1022caa:	4604      	mov	r4, r0
 1022cac:	d215      	bcs.n	1022cda <SM_APP_bRestore_st_44_from_backup+0x46>
		
			switch (backup_area_id) {
 1022cae:	b1f5      	cbz	r5, 1022cee <SM_APP_bRestore_st_44_from_backup+0x5a>
 1022cb0:	2d01      	cmp	r5, #1
 1022cb2:	d10a      	bne.n	1022cca <SM_APP_bRestore_st_44_from_backup+0x36>
	EEPROM_reader( table_state_addr, &state, 1 );
 1022cb4:	462a      	mov	r2, r5
 1022cb6:	f10d 0105 	add.w	r1, sp, #5
 1022cba:	f642 70f6 	movw	r0, #12278	; 0x2ff6
 1022cbe:	4d1e      	ldr	r5, [pc, #120]	; (1022d38 <SM_APP_bRestore_st_44_from_backup+0xa4>)
 1022cc0:	47a8      	blx	r5
	return state;
 1022cc2:	f89d 3005 	ldrb.w	r3, [sp, #5]
					}
					break;

				case MP_120_CCP_AREA:
			
					if ( SM_APP_ucGet_table_state(CCP_ST_44_PROG_STATE_ADDR) == C1219_TABLE_FULL ) {
 1022cc6:	2b45      	cmp	r3, #69	; 0x45
 1022cc8:	d028      	beq.n	1022d1c <SM_APP_bRestore_st_44_from_backup+0x88>

				default:
					break;
			}

			calc_crc = CRC_crc16(&temp_table_backup[0], table_size);
 1022cca:	4b1c      	ldr	r3, [pc, #112]	; (1022d3c <SM_APP_bRestore_st_44_from_backup+0xa8>)
 1022ccc:	481c      	ldr	r0, [pc, #112]	; (1022d40 <SM_APP_bRestore_st_44_from_backup+0xac>)
 1022cce:	4621      	mov	r1, r4
 1022cd0:	4798      	blx	r3
			is_ok = (calc_crc == backup_crc) ? SECR_APP_bSt_44_execute_table_writing(&temp_table_backup[0]) : false;
 1022cd2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 1022cd6:	4283      	cmp	r3, r0
 1022cd8:	d005      	beq.n	1022ce6 <SM_APP_bRestore_st_44_from_backup+0x52>
	bool is_ok = false;
 1022cda:	2000      	movs	r0, #0
	else {
		is_ok = true;
	}

	return is_ok;
}
 1022cdc:	b003      	add	sp, #12
 1022cde:	bd30      	pop	{r4, r5, pc}
		is_ok = true;
 1022ce0:	2001      	movs	r0, #1
}
 1022ce2:	b003      	add	sp, #12
 1022ce4:	bd30      	pop	{r4, r5, pc}
			is_ok = (calc_crc == backup_crc) ? SECR_APP_bSt_44_execute_table_writing(&temp_table_backup[0]) : false;
 1022ce6:	4b17      	ldr	r3, [pc, #92]	; (1022d44 <SM_APP_bRestore_st_44_from_backup+0xb0>)
 1022ce8:	4815      	ldr	r0, [pc, #84]	; (1022d40 <SM_APP_bRestore_st_44_from_backup+0xac>)
 1022cea:	4798      	blx	r3
 1022cec:	e7f6      	b.n	1022cdc <SM_APP_bRestore_st_44_from_backup+0x48>
	EEPROM_reader( table_state_addr, &state, 1 );
 1022cee:	2201      	movs	r2, #1
 1022cf0:	f10d 0105 	add.w	r1, sp, #5
 1022cf4:	f641 406e 	movw	r0, #7278	; 0x1c6e
 1022cf8:	4d0f      	ldr	r5, [pc, #60]	; (1022d38 <SM_APP_bRestore_st_44_from_backup+0xa4>)
 1022cfa:	47a8      	blx	r5
	return state;
 1022cfc:	f89d 3005 	ldrb.w	r3, [sp, #5]
					if ( SM_APP_ucGet_table_state(MCP_ST_44_PROG_STATE_ADDR) == C1219_TABLE_FULL ) {
 1022d00:	2b45      	cmp	r3, #69	; 0x45
 1022d02:	d1e2      	bne.n	1022cca <SM_APP_bRestore_st_44_from_backup+0x36>
						EEPROM_reader(MCP_ST_44_NVM_CRC_ADDR, &backup_crc, 2);
 1022d04:	f10d 0106 	add.w	r1, sp, #6
 1022d08:	2202      	movs	r2, #2
 1022d0a:	f641 406f 	movw	r0, #7279	; 0x1c6f
 1022d0e:	47a8      	blx	r5
						EEPROM_reader(MCP_ST_44_START_ADDR, &temp_table_backup, table_size);
 1022d10:	4622      	mov	r2, r4
 1022d12:	490b      	ldr	r1, [pc, #44]	; (1022d40 <SM_APP_bRestore_st_44_from_backup+0xac>)
 1022d14:	f641 4071 	movw	r0, #7281	; 0x1c71
 1022d18:	47a8      	blx	r5
 1022d1a:	e7d6      	b.n	1022cca <SM_APP_bRestore_st_44_from_backup+0x36>
						EEPROM_reader(CCP_ST_44_NVM_CRC_ADDR, &backup_crc, 2);
 1022d1c:	f10d 0106 	add.w	r1, sp, #6
 1022d20:	2202      	movs	r2, #2
 1022d22:	f642 70f7 	movw	r0, #12279	; 0x2ff7
 1022d26:	47a8      	blx	r5
						EEPROM_reader(CCP_ST_44_START_ADDR, &temp_table_backup, table_size);
 1022d28:	4622      	mov	r2, r4
 1022d2a:	4905      	ldr	r1, [pc, #20]	; (1022d40 <SM_APP_bRestore_st_44_from_backup+0xac>)
 1022d2c:	f642 70f9 	movw	r0, #12281	; 0x2ff9
 1022d30:	47a8      	blx	r5
 1022d32:	e7ca      	b.n	1022cca <SM_APP_bRestore_st_44_from_backup+0x36>
 1022d34:	0102b285 	.word	0x0102b285
 1022d38:	01017511 	.word	0x01017511
 1022d3c:	01016b5d 	.word	0x01016b5d
 1022d40:	20000ed0 	.word	0x20000ed0
 1022d44:	0102b219 	.word	0x0102b219

01022d48 <SM_APP_bBack_up_st_51>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bBack_up_st_51(uint16_t backup_area_id) {
 1022d48:	b5f0      	push	{r4, r5, r6, r7, lr}
	
	bool is_ok = false;
	uint16_t table_size;
	uint16_t calc_crc;
	
	table_size = TOU_APP_usSt_51_get_size();
 1022d4a:	4b31      	ldr	r3, [pc, #196]	; (1022e10 <SM_APP_bBack_up_st_51+0xc8>)
bool SM_APP_bBack_up_st_51(uint16_t backup_area_id) {
 1022d4c:	b083      	sub	sp, #12
 1022d4e:	4606      	mov	r6, r0
	table_size = TOU_APP_usSt_51_get_size();
 1022d50:	4798      	blx	r3

	if ( table_size > 0 ) {
 1022d52:	2800      	cmp	r0, #0
 1022d54:	d038      	beq.n	1022dc8 <SM_APP_bBack_up_st_51+0x80>

		if ( ( sizeof(temp_table_backup) > table_size ) && ( !SM_APP_vIs_st_51_corrupted_data() ) ) {
 1022d56:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
 1022d5a:	4604      	mov	r4, r0
 1022d5c:	d303      	bcc.n	1022d66 <SM_APP_bBack_up_st_51+0x1e>
	bool is_ok = false;
 1022d5e:	2500      	movs	r5, #0
	else {
		is_ok = true;
	}

	return is_ok;
}
 1022d60:	4628      	mov	r0, r5
 1022d62:	b003      	add	sp, #12
 1022d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ( ( sizeof(temp_table_backup) > table_size ) && ( !SM_APP_vIs_st_51_corrupted_data() ) ) {
 1022d66:	4b2b      	ldr	r3, [pc, #172]	; (1022e14 <SM_APP_bBack_up_st_51+0xcc>)
 1022d68:	4798      	blx	r3
 1022d6a:	4605      	mov	r5, r0
 1022d6c:	2800      	cmp	r0, #0
 1022d6e:	d1f6      	bne.n	1022d5e <SM_APP_bBack_up_st_51+0x16>
			TOU_APP_bSt_51_execute_table_reading(&temp_table_backup[0]);
 1022d70:	4b29      	ldr	r3, [pc, #164]	; (1022e18 <SM_APP_bBack_up_st_51+0xd0>)
 1022d72:	482a      	ldr	r0, [pc, #168]	; (1022e1c <SM_APP_bBack_up_st_51+0xd4>)
 1022d74:	4798      	blx	r3
			calc_crc = CRC_crc16(&temp_table_backup[0], table_size);
 1022d76:	4621      	mov	r1, r4
 1022d78:	4828      	ldr	r0, [pc, #160]	; (1022e1c <SM_APP_bBack_up_st_51+0xd4>)
 1022d7a:	4b29      	ldr	r3, [pc, #164]	; (1022e20 <SM_APP_bBack_up_st_51+0xd8>)
 1022d7c:	4798      	blx	r3
 1022d7e:	f8ad 0006 	strh.w	r0, [sp, #6]
			switch (backup_area_id) {
 1022d82:	b32e      	cbz	r6, 1022dd0 <SM_APP_bBack_up_st_51+0x88>
 1022d84:	2e01      	cmp	r6, #1
 1022d86:	d1eb      	bne.n	1022d60 <SM_APP_bBack_up_st_51+0x18>
 1022d88:	a902      	add	r1, sp, #8
 1022d8a:	23ff      	movs	r3, #255	; 0xff
 1022d8c:	f801 3d04 	strb.w	r3, [r1, #-4]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1022d90:	4632      	mov	r2, r6
 1022d92:	4f24      	ldr	r7, [pc, #144]	; (1022e24 <SM_APP_bBack_up_st_51+0xdc>)
 1022d94:	f243 1079 	movw	r0, #12665	; 0x3179
 1022d98:	47b8      	blx	r7
					is_ok = EEPROM_writer(CCP_ST_51_START_ADDR, &temp_table_backup, table_size);
 1022d9a:	4622      	mov	r2, r4
 1022d9c:	491f      	ldr	r1, [pc, #124]	; (1022e1c <SM_APP_bBack_up_st_51+0xd4>)
 1022d9e:	f243 107c 	movw	r0, #12668	; 0x317c
 1022da2:	47b8      	blx	r7
					if ( is_ok ) {
 1022da4:	4605      	mov	r5, r0
 1022da6:	2800      	cmp	r0, #0
 1022da8:	d0d9      	beq.n	1022d5e <SM_APP_bBack_up_st_51+0x16>
 1022daa:	a902      	add	r1, sp, #8
 1022dac:	2345      	movs	r3, #69	; 0x45
 1022dae:	f801 3d03 	strb.w	r3, [r1, #-3]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1022db2:	4632      	mov	r2, r6
 1022db4:	f243 1079 	movw	r0, #12665	; 0x3179
 1022db8:	47b8      	blx	r7
						EEPROM_writer(CCP_ST_51_NVM_CRC_ADDR, &calc_crc, 2);
 1022dba:	2202      	movs	r2, #2
 1022dbc:	f10d 0106 	add.w	r1, sp, #6
 1022dc0:	f243 107a 	movw	r0, #12666	; 0x317a
 1022dc4:	47b8      	blx	r7
 1022dc6:	e7cb      	b.n	1022d60 <SM_APP_bBack_up_st_51+0x18>
		is_ok = true;
 1022dc8:	2501      	movs	r5, #1
}
 1022dca:	4628      	mov	r0, r5
 1022dcc:	b003      	add	sp, #12
 1022dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1022dd0:	a902      	add	r1, sp, #8
 1022dd2:	23ff      	movs	r3, #255	; 0xff
 1022dd4:	f801 3d06 	strb.w	r3, [r1, #-6]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1022dd8:	2201      	movs	r2, #1
 1022dda:	4e12      	ldr	r6, [pc, #72]	; (1022e24 <SM_APP_bBack_up_st_51+0xdc>)
 1022ddc:	f641 50f1 	movw	r0, #7665	; 0x1df1
 1022de0:	47b0      	blx	r6
					is_ok = EEPROM_writer(MCP_ST_51_START_ADDR, &temp_table_backup, table_size);
 1022de2:	4622      	mov	r2, r4
 1022de4:	490d      	ldr	r1, [pc, #52]	; (1022e1c <SM_APP_bBack_up_st_51+0xd4>)
 1022de6:	f641 50f4 	movw	r0, #7668	; 0x1df4
 1022dea:	47b0      	blx	r6
					if ( is_ok ) {
 1022dec:	4605      	mov	r5, r0
 1022dee:	2800      	cmp	r0, #0
 1022df0:	d0b5      	beq.n	1022d5e <SM_APP_bBack_up_st_51+0x16>
 1022df2:	a902      	add	r1, sp, #8
 1022df4:	2345      	movs	r3, #69	; 0x45
 1022df6:	f801 3d05 	strb.w	r3, [r1, #-5]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1022dfa:	2201      	movs	r2, #1
 1022dfc:	f641 50f1 	movw	r0, #7665	; 0x1df1
 1022e00:	47b0      	blx	r6
						EEPROM_writer(MCP_ST_51_NVM_CRC_ADDR, &calc_crc, 2);
 1022e02:	2202      	movs	r2, #2
 1022e04:	f10d 0106 	add.w	r1, sp, #6
 1022e08:	f641 50f2 	movw	r0, #7666	; 0x1df2
 1022e0c:	47b0      	blx	r6
 1022e0e:	e7a7      	b.n	1022d60 <SM_APP_bBack_up_st_51+0x18>
 1022e10:	0102bf25 	.word	0x0102bf25
 1022e14:	0101fc6d 	.word	0x0101fc6d
 1022e18:	0102c471 	.word	0x0102c471
 1022e1c:	20000ed0 	.word	0x20000ed0
 1022e20:	01016b5d 	.word	0x01016b5d
 1022e24:	01017509 	.word	0x01017509

01022e28 <SM_APP_bRestore_st_51_from_backup>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bRestore_st_51_from_backup(uint16_t backup_area_id) {
 1022e28:	b530      	push	{r4, r5, lr}
 1022e2a:	b083      	sub	sp, #12

	bool is_ok = false;
	uint16_t table_size;
	uint16_t backup_crc = 0, calc_crc = 1;
 1022e2c:	2200      	movs	r2, #0

	table_size = TOU_APP_usSt_51_get_size();
 1022e2e:	4b26      	ldr	r3, [pc, #152]	; (1022ec8 <SM_APP_bRestore_st_51_from_backup+0xa0>)
	uint16_t backup_crc = 0, calc_crc = 1;
 1022e30:	f8ad 2006 	strh.w	r2, [sp, #6]
bool SM_APP_bRestore_st_51_from_backup(uint16_t backup_area_id) {
 1022e34:	4605      	mov	r5, r0
	table_size = TOU_APP_usSt_51_get_size();
 1022e36:	4798      	blx	r3

	if ( table_size > 0 ) {
 1022e38:	b1e0      	cbz	r0, 1022e74 <SM_APP_bRestore_st_51_from_backup+0x4c>

		if ( sizeof(temp_table_backup) > table_size ) {
 1022e3a:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
 1022e3e:	4604      	mov	r4, r0
 1022e40:	d215      	bcs.n	1022e6e <SM_APP_bRestore_st_51_from_backup+0x46>
		
			switch (backup_area_id) {
 1022e42:	b1f5      	cbz	r5, 1022e82 <SM_APP_bRestore_st_51_from_backup+0x5a>
 1022e44:	2d01      	cmp	r5, #1
 1022e46:	d10a      	bne.n	1022e5e <SM_APP_bRestore_st_51_from_backup+0x36>
	EEPROM_reader( table_state_addr, &state, 1 );
 1022e48:	462a      	mov	r2, r5
 1022e4a:	f10d 0105 	add.w	r1, sp, #5
 1022e4e:	f243 1079 	movw	r0, #12665	; 0x3179
 1022e52:	4d1e      	ldr	r5, [pc, #120]	; (1022ecc <SM_APP_bRestore_st_51_from_backup+0xa4>)
 1022e54:	47a8      	blx	r5
	return state;
 1022e56:	f89d 3005 	ldrb.w	r3, [sp, #5]
					}
					break;

				case MP_120_CCP_AREA:
			
					if ( SM_APP_ucGet_table_state(CCP_ST_51_PROG_STATE_ADDR) == C1219_TABLE_FULL ) {
 1022e5a:	2b45      	cmp	r3, #69	; 0x45
 1022e5c:	d028      	beq.n	1022eb0 <SM_APP_bRestore_st_51_from_backup+0x88>

				default:
					break;
			}

			calc_crc = CRC_crc16(&temp_table_backup[0], table_size);
 1022e5e:	4b1c      	ldr	r3, [pc, #112]	; (1022ed0 <SM_APP_bRestore_st_51_from_backup+0xa8>)
 1022e60:	481c      	ldr	r0, [pc, #112]	; (1022ed4 <SM_APP_bRestore_st_51_from_backup+0xac>)
 1022e62:	4621      	mov	r1, r4
 1022e64:	4798      	blx	r3
			is_ok = (calc_crc == backup_crc) ? TOU_APP_bSt_51_execute_table_writing(&temp_table_backup[0]) : false;
 1022e66:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 1022e6a:	4283      	cmp	r3, r0
 1022e6c:	d005      	beq.n	1022e7a <SM_APP_bRestore_st_51_from_backup+0x52>
	bool is_ok = false;
 1022e6e:	2000      	movs	r0, #0
	else {
		is_ok = true;
	}

	return is_ok;
}
 1022e70:	b003      	add	sp, #12
 1022e72:	bd30      	pop	{r4, r5, pc}
		is_ok = true;
 1022e74:	2001      	movs	r0, #1
}
 1022e76:	b003      	add	sp, #12
 1022e78:	bd30      	pop	{r4, r5, pc}
			is_ok = (calc_crc == backup_crc) ? TOU_APP_bSt_51_execute_table_writing(&temp_table_backup[0]) : false;
 1022e7a:	4b17      	ldr	r3, [pc, #92]	; (1022ed8 <SM_APP_bRestore_st_51_from_backup+0xb0>)
 1022e7c:	4815      	ldr	r0, [pc, #84]	; (1022ed4 <SM_APP_bRestore_st_51_from_backup+0xac>)
 1022e7e:	4798      	blx	r3
 1022e80:	e7f6      	b.n	1022e70 <SM_APP_bRestore_st_51_from_backup+0x48>
	EEPROM_reader( table_state_addr, &state, 1 );
 1022e82:	2201      	movs	r2, #1
 1022e84:	f10d 0105 	add.w	r1, sp, #5
 1022e88:	f641 50f1 	movw	r0, #7665	; 0x1df1
 1022e8c:	4d0f      	ldr	r5, [pc, #60]	; (1022ecc <SM_APP_bRestore_st_51_from_backup+0xa4>)
 1022e8e:	47a8      	blx	r5
	return state;
 1022e90:	f89d 3005 	ldrb.w	r3, [sp, #5]
					if ( SM_APP_ucGet_table_state(MCP_ST_51_PROG_STATE_ADDR) == C1219_TABLE_FULL ) {
 1022e94:	2b45      	cmp	r3, #69	; 0x45
 1022e96:	d1e2      	bne.n	1022e5e <SM_APP_bRestore_st_51_from_backup+0x36>
						EEPROM_reader(MCP_ST_51_NVM_CRC_ADDR, &backup_crc, 2);
 1022e98:	f10d 0106 	add.w	r1, sp, #6
 1022e9c:	2202      	movs	r2, #2
 1022e9e:	f641 50f2 	movw	r0, #7666	; 0x1df2
 1022ea2:	47a8      	blx	r5
						EEPROM_reader(MCP_ST_51_START_ADDR, &temp_table_backup, table_size);
 1022ea4:	4622      	mov	r2, r4
 1022ea6:	490b      	ldr	r1, [pc, #44]	; (1022ed4 <SM_APP_bRestore_st_51_from_backup+0xac>)
 1022ea8:	f641 50f4 	movw	r0, #7668	; 0x1df4
 1022eac:	47a8      	blx	r5
 1022eae:	e7d6      	b.n	1022e5e <SM_APP_bRestore_st_51_from_backup+0x36>
						EEPROM_reader(CCP_ST_51_NVM_CRC_ADDR, &backup_crc, 2);
 1022eb0:	f10d 0106 	add.w	r1, sp, #6
 1022eb4:	2202      	movs	r2, #2
 1022eb6:	f243 107a 	movw	r0, #12666	; 0x317a
 1022eba:	47a8      	blx	r5
						EEPROM_reader(CCP_ST_51_START_ADDR, &temp_table_backup, table_size);
 1022ebc:	4622      	mov	r2, r4
 1022ebe:	4905      	ldr	r1, [pc, #20]	; (1022ed4 <SM_APP_bRestore_st_51_from_backup+0xac>)
 1022ec0:	f243 107c 	movw	r0, #12668	; 0x317c
 1022ec4:	47a8      	blx	r5
 1022ec6:	e7ca      	b.n	1022e5e <SM_APP_bRestore_st_51_from_backup+0x36>
 1022ec8:	0102bf25 	.word	0x0102bf25
 1022ecc:	01017511 	.word	0x01017511
 1022ed0:	01016b5d 	.word	0x01016b5d
 1022ed4:	20000ed0 	.word	0x20000ed0
 1022ed8:	0102beb5 	.word	0x0102beb5

01022edc <SM_APP_bBack_up_st_53>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bBack_up_st_53(uint16_t backup_area_id) {
 1022edc:	b570      	push	{r4, r5, r6, lr}
	
	bool is_ok = false;
	uint16_t table_size;
	uint16_t calc_crc;
	
	table_size = TOU_APP_usSt_53_get_size();
 1022ede:	4b2f      	ldr	r3, [pc, #188]	; (1022f9c <SM_APP_bBack_up_st_53+0xc0>)
bool SM_APP_bBack_up_st_53(uint16_t backup_area_id) {
 1022ee0:	b082      	sub	sp, #8
 1022ee2:	4605      	mov	r5, r0
	table_size = TOU_APP_usSt_53_get_size();
 1022ee4:	4798      	blx	r3

	if ( table_size > 0 ) {
 1022ee6:	2800      	cmp	r0, #0
 1022ee8:	d033      	beq.n	1022f52 <SM_APP_bBack_up_st_53+0x76>

		if ( sizeof(temp_table_backup) > table_size ) {
 1022eea:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
 1022eee:	4604      	mov	r4, r0
 1022ef0:	d303      	bcc.n	1022efa <SM_APP_bBack_up_st_53+0x1e>
	bool is_ok = false;
 1022ef2:	2400      	movs	r4, #0
	else {
		is_ok = true;
	}

	return is_ok;
}
 1022ef4:	4620      	mov	r0, r4
 1022ef6:	b002      	add	sp, #8
 1022ef8:	bd70      	pop	{r4, r5, r6, pc}
			TOU_APP_bSt_53_execute_table_reading(&temp_table_backup[0]);
 1022efa:	4b29      	ldr	r3, [pc, #164]	; (1022fa0 <SM_APP_bBack_up_st_53+0xc4>)
 1022efc:	4829      	ldr	r0, [pc, #164]	; (1022fa4 <SM_APP_bBack_up_st_53+0xc8>)
 1022efe:	4798      	blx	r3
			calc_crc = CRC_crc16(&temp_table_backup[0], table_size);
 1022f00:	4621      	mov	r1, r4
 1022f02:	4828      	ldr	r0, [pc, #160]	; (1022fa4 <SM_APP_bBack_up_st_53+0xc8>)
 1022f04:	4b28      	ldr	r3, [pc, #160]	; (1022fa8 <SM_APP_bBack_up_st_53+0xcc>)
 1022f06:	4798      	blx	r3
 1022f08:	f8ad 0006 	strh.w	r0, [sp, #6]
			switch (backup_area_id) {
 1022f0c:	b32d      	cbz	r5, 1022f5a <SM_APP_bBack_up_st_53+0x7e>
 1022f0e:	2d01      	cmp	r5, #1
 1022f10:	d1ef      	bne.n	1022ef2 <SM_APP_bBack_up_st_53+0x16>
 1022f12:	a902      	add	r1, sp, #8
 1022f14:	23ff      	movs	r3, #255	; 0xff
 1022f16:	f801 3d04 	strb.w	r3, [r1, #-4]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1022f1a:	462a      	mov	r2, r5
 1022f1c:	4e23      	ldr	r6, [pc, #140]	; (1022fac <SM_APP_bBack_up_st_53+0xd0>)
 1022f1e:	f243 1089 	movw	r0, #12681	; 0x3189
 1022f22:	47b0      	blx	r6
					is_ok = EEPROM_writer(CCP_ST_53_START_ADDR, &temp_table_backup, table_size);
 1022f24:	4622      	mov	r2, r4
 1022f26:	491f      	ldr	r1, [pc, #124]	; (1022fa4 <SM_APP_bBack_up_st_53+0xc8>)
 1022f28:	f243 108c 	movw	r0, #12684	; 0x318c
 1022f2c:	47b0      	blx	r6
					if ( is_ok ) {
 1022f2e:	4604      	mov	r4, r0
 1022f30:	2800      	cmp	r0, #0
 1022f32:	d0de      	beq.n	1022ef2 <SM_APP_bBack_up_st_53+0x16>
 1022f34:	a902      	add	r1, sp, #8
 1022f36:	2345      	movs	r3, #69	; 0x45
 1022f38:	f801 3d03 	strb.w	r3, [r1, #-3]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1022f3c:	462a      	mov	r2, r5
 1022f3e:	f243 1089 	movw	r0, #12681	; 0x3189
 1022f42:	47b0      	blx	r6
						EEPROM_writer(CCP_ST_53_NVM_CRC_ADDR, &calc_crc, 2);
 1022f44:	2202      	movs	r2, #2
 1022f46:	f10d 0106 	add.w	r1, sp, #6
 1022f4a:	f243 108a 	movw	r0, #12682	; 0x318a
 1022f4e:	47b0      	blx	r6
 1022f50:	e7d0      	b.n	1022ef4 <SM_APP_bBack_up_st_53+0x18>
		is_ok = true;
 1022f52:	2401      	movs	r4, #1
}
 1022f54:	4620      	mov	r0, r4
 1022f56:	b002      	add	sp, #8
 1022f58:	bd70      	pop	{r4, r5, r6, pc}
 1022f5a:	a902      	add	r1, sp, #8
 1022f5c:	23ff      	movs	r3, #255	; 0xff
 1022f5e:	f801 3d06 	strb.w	r3, [r1, #-6]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1022f62:	2201      	movs	r2, #1
 1022f64:	4d11      	ldr	r5, [pc, #68]	; (1022fac <SM_APP_bBack_up_st_53+0xd0>)
 1022f66:	f641 6001 	movw	r0, #7681	; 0x1e01
 1022f6a:	47a8      	blx	r5
					is_ok = EEPROM_writer(MCP_ST_53_START_ADDR, &temp_table_backup, table_size);
 1022f6c:	4622      	mov	r2, r4
 1022f6e:	490d      	ldr	r1, [pc, #52]	; (1022fa4 <SM_APP_bBack_up_st_53+0xc8>)
 1022f70:	f641 6004 	movw	r0, #7684	; 0x1e04
 1022f74:	47a8      	blx	r5
					if ( is_ok ) {
 1022f76:	4604      	mov	r4, r0
 1022f78:	2800      	cmp	r0, #0
 1022f7a:	d0ba      	beq.n	1022ef2 <SM_APP_bBack_up_st_53+0x16>
 1022f7c:	a902      	add	r1, sp, #8
 1022f7e:	2345      	movs	r3, #69	; 0x45
 1022f80:	f801 3d05 	strb.w	r3, [r1, #-5]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1022f84:	2201      	movs	r2, #1
 1022f86:	f641 6001 	movw	r0, #7681	; 0x1e01
 1022f8a:	47a8      	blx	r5
						EEPROM_writer(MCP_ST_53_NVM_CRC_ADDR, &calc_crc, 2);
 1022f8c:	2202      	movs	r2, #2
 1022f8e:	f10d 0106 	add.w	r1, sp, #6
 1022f92:	f641 6002 	movw	r0, #7682	; 0x1e02
 1022f96:	47a8      	blx	r5
 1022f98:	e7ac      	b.n	1022ef4 <SM_APP_bBack_up_st_53+0x18>
 1022f9a:	bf00      	nop
 1022f9c:	0102c0b9 	.word	0x0102c0b9
 1022fa0:	0102c039 	.word	0x0102c039
 1022fa4:	20000ed0 	.word	0x20000ed0
 1022fa8:	01016b5d 	.word	0x01016b5d
 1022fac:	01017509 	.word	0x01017509

01022fb0 <SM_APP_bRestore_st_53_from_backup>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bRestore_st_53_from_backup(uint16_t backup_area_id) {
 1022fb0:	b530      	push	{r4, r5, lr}
 1022fb2:	b083      	sub	sp, #12

	bool is_ok = false;
	uint16_t table_size;
	uint16_t backup_crc = 0, calc_crc = 1;
 1022fb4:	2200      	movs	r2, #0

	table_size = TOU_APP_usSt_53_get_size();
 1022fb6:	4b26      	ldr	r3, [pc, #152]	; (1023050 <SM_APP_bRestore_st_53_from_backup+0xa0>)
	uint16_t backup_crc = 0, calc_crc = 1;
 1022fb8:	f8ad 2006 	strh.w	r2, [sp, #6]
bool SM_APP_bRestore_st_53_from_backup(uint16_t backup_area_id) {
 1022fbc:	4605      	mov	r5, r0
	table_size = TOU_APP_usSt_53_get_size();
 1022fbe:	4798      	blx	r3

	if ( table_size > 0 ) {
 1022fc0:	b1e0      	cbz	r0, 1022ffc <SM_APP_bRestore_st_53_from_backup+0x4c>

		if ( sizeof(temp_table_backup) > table_size ) {
 1022fc2:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
 1022fc6:	4604      	mov	r4, r0
 1022fc8:	d215      	bcs.n	1022ff6 <SM_APP_bRestore_st_53_from_backup+0x46>
		
			switch (backup_area_id) {
 1022fca:	b1f5      	cbz	r5, 102300a <SM_APP_bRestore_st_53_from_backup+0x5a>
 1022fcc:	2d01      	cmp	r5, #1
 1022fce:	d10a      	bne.n	1022fe6 <SM_APP_bRestore_st_53_from_backup+0x36>
	EEPROM_reader( table_state_addr, &state, 1 );
 1022fd0:	462a      	mov	r2, r5
 1022fd2:	f10d 0105 	add.w	r1, sp, #5
 1022fd6:	f243 1089 	movw	r0, #12681	; 0x3189
 1022fda:	4d1e      	ldr	r5, [pc, #120]	; (1023054 <SM_APP_bRestore_st_53_from_backup+0xa4>)
 1022fdc:	47a8      	blx	r5
	return state;
 1022fde:	f89d 3005 	ldrb.w	r3, [sp, #5]
					}
					break;

				case MP_120_CCP_AREA:
			
					if ( SM_APP_ucGet_table_state(CCP_ST_53_PROG_STATE_ADDR) == C1219_TABLE_FULL ) {
 1022fe2:	2b45      	cmp	r3, #69	; 0x45
 1022fe4:	d028      	beq.n	1023038 <SM_APP_bRestore_st_53_from_backup+0x88>

				default:
					break;
			}

			calc_crc = CRC_crc16(&temp_table_backup[0], table_size);
 1022fe6:	4b1c      	ldr	r3, [pc, #112]	; (1023058 <SM_APP_bRestore_st_53_from_backup+0xa8>)
 1022fe8:	481c      	ldr	r0, [pc, #112]	; (102305c <SM_APP_bRestore_st_53_from_backup+0xac>)
 1022fea:	4621      	mov	r1, r4
 1022fec:	4798      	blx	r3
			is_ok = (calc_crc == backup_crc) ? TOU_APP_bSt_53_execute_table_writing(&temp_table_backup[0]) : false;
 1022fee:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 1022ff2:	4283      	cmp	r3, r0
 1022ff4:	d005      	beq.n	1023002 <SM_APP_bRestore_st_53_from_backup+0x52>
	bool is_ok = false;
 1022ff6:	2000      	movs	r0, #0
	else {
		is_ok = true;
	}

	return is_ok;
}
 1022ff8:	b003      	add	sp, #12
 1022ffa:	bd30      	pop	{r4, r5, pc}
		is_ok = true;
 1022ffc:	2001      	movs	r0, #1
}
 1022ffe:	b003      	add	sp, #12
 1023000:	bd30      	pop	{r4, r5, pc}
			is_ok = (calc_crc == backup_crc) ? TOU_APP_bSt_53_execute_table_writing(&temp_table_backup[0]) : false;
 1023002:	4b17      	ldr	r3, [pc, #92]	; (1023060 <SM_APP_bRestore_st_53_from_backup+0xb0>)
 1023004:	4815      	ldr	r0, [pc, #84]	; (102305c <SM_APP_bRestore_st_53_from_backup+0xac>)
 1023006:	4798      	blx	r3
 1023008:	e7f6      	b.n	1022ff8 <SM_APP_bRestore_st_53_from_backup+0x48>
	EEPROM_reader( table_state_addr, &state, 1 );
 102300a:	2201      	movs	r2, #1
 102300c:	f10d 0105 	add.w	r1, sp, #5
 1023010:	f641 6001 	movw	r0, #7681	; 0x1e01
 1023014:	4d0f      	ldr	r5, [pc, #60]	; (1023054 <SM_APP_bRestore_st_53_from_backup+0xa4>)
 1023016:	47a8      	blx	r5
	return state;
 1023018:	f89d 3005 	ldrb.w	r3, [sp, #5]
					if ( SM_APP_ucGet_table_state(MCP_ST_53_PROG_STATE_ADDR) == C1219_TABLE_FULL ) {
 102301c:	2b45      	cmp	r3, #69	; 0x45
 102301e:	d1e2      	bne.n	1022fe6 <SM_APP_bRestore_st_53_from_backup+0x36>
						EEPROM_reader(MCP_ST_53_NVM_CRC_ADDR, &backup_crc, 2);
 1023020:	f10d 0106 	add.w	r1, sp, #6
 1023024:	2202      	movs	r2, #2
 1023026:	f641 6002 	movw	r0, #7682	; 0x1e02
 102302a:	47a8      	blx	r5
						EEPROM_reader(MCP_ST_53_START_ADDR, &temp_table_backup, table_size);
 102302c:	4622      	mov	r2, r4
 102302e:	490b      	ldr	r1, [pc, #44]	; (102305c <SM_APP_bRestore_st_53_from_backup+0xac>)
 1023030:	f641 6004 	movw	r0, #7684	; 0x1e04
 1023034:	47a8      	blx	r5
 1023036:	e7d6      	b.n	1022fe6 <SM_APP_bRestore_st_53_from_backup+0x36>
						EEPROM_reader(CCP_ST_53_NVM_CRC_ADDR, &backup_crc, 2);
 1023038:	f10d 0106 	add.w	r1, sp, #6
 102303c:	2202      	movs	r2, #2
 102303e:	f243 108a 	movw	r0, #12682	; 0x318a
 1023042:	47a8      	blx	r5
						EEPROM_reader(CCP_ST_53_START_ADDR, &temp_table_backup, table_size);
 1023044:	4622      	mov	r2, r4
 1023046:	4905      	ldr	r1, [pc, #20]	; (102305c <SM_APP_bRestore_st_53_from_backup+0xac>)
 1023048:	f243 108c 	movw	r0, #12684	; 0x318c
 102304c:	47a8      	blx	r5
 102304e:	e7ca      	b.n	1022fe6 <SM_APP_bRestore_st_53_from_backup+0x36>
 1023050:	0102c0b9 	.word	0x0102c0b9
 1023054:	01017511 	.word	0x01017511
 1023058:	01016b5d 	.word	0x01016b5d
 102305c:	20000ed0 	.word	0x20000ed0
 1023060:	0102c081 	.word	0x0102c081

01023064 <SM_APP_bBack_up_st_54>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bBack_up_st_54(uint16_t backup_area_id) {
 1023064:	b570      	push	{r4, r5, r6, lr}
	
	bool is_ok = false;
	uint16_t table_size;
	uint16_t calc_crc;
	
	table_size = TOU_APP_usSt_54_get_size();
 1023066:	4b2f      	ldr	r3, [pc, #188]	; (1023124 <SM_APP_bBack_up_st_54+0xc0>)
bool SM_APP_bBack_up_st_54(uint16_t backup_area_id) {
 1023068:	b082      	sub	sp, #8
 102306a:	4605      	mov	r5, r0
	table_size = TOU_APP_usSt_54_get_size();
 102306c:	4798      	blx	r3

	if ( table_size > 0 ) {
 102306e:	2800      	cmp	r0, #0
 1023070:	d033      	beq.n	10230da <SM_APP_bBack_up_st_54+0x76>

		if ( sizeof(temp_table_backup) > table_size ) {
 1023072:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
 1023076:	4604      	mov	r4, r0
 1023078:	d303      	bcc.n	1023082 <SM_APP_bBack_up_st_54+0x1e>
	bool is_ok = false;
 102307a:	2400      	movs	r4, #0
	else {
		is_ok = true;
	}

	return is_ok;
}
 102307c:	4620      	mov	r0, r4
 102307e:	b002      	add	sp, #8
 1023080:	bd70      	pop	{r4, r5, r6, pc}
			TOU_APP_bSt_54_execute_table_reading(&temp_table_backup[0]);
 1023082:	4b29      	ldr	r3, [pc, #164]	; (1023128 <SM_APP_bBack_up_st_54+0xc4>)
 1023084:	4829      	ldr	r0, [pc, #164]	; (102312c <SM_APP_bBack_up_st_54+0xc8>)
 1023086:	4798      	blx	r3
			calc_crc = CRC_crc16(&temp_table_backup[0], table_size);
 1023088:	4621      	mov	r1, r4
 102308a:	4828      	ldr	r0, [pc, #160]	; (102312c <SM_APP_bBack_up_st_54+0xc8>)
 102308c:	4b28      	ldr	r3, [pc, #160]	; (1023130 <SM_APP_bBack_up_st_54+0xcc>)
 102308e:	4798      	blx	r3
 1023090:	f8ad 0006 	strh.w	r0, [sp, #6]
			switch (backup_area_id) {
 1023094:	b32d      	cbz	r5, 10230e2 <SM_APP_bBack_up_st_54+0x7e>
 1023096:	2d01      	cmp	r5, #1
 1023098:	d1ef      	bne.n	102307a <SM_APP_bBack_up_st_54+0x16>
 102309a:	a902      	add	r1, sp, #8
 102309c:	23ff      	movs	r3, #255	; 0xff
 102309e:	f801 3d04 	strb.w	r3, [r1, #-4]!
	EEPROM_writer( table_state_addr, &state, 1 );
 10230a2:	462a      	mov	r2, r5
 10230a4:	4e23      	ldr	r6, [pc, #140]	; (1023134 <SM_APP_bBack_up_st_54+0xd0>)
 10230a6:	f243 109c 	movw	r0, #12700	; 0x319c
 10230aa:	47b0      	blx	r6
					is_ok = EEPROM_writer(CCP_ST_54_START_ADDR, &temp_table_backup, table_size);
 10230ac:	4622      	mov	r2, r4
 10230ae:	491f      	ldr	r1, [pc, #124]	; (102312c <SM_APP_bBack_up_st_54+0xc8>)
 10230b0:	f243 109f 	movw	r0, #12703	; 0x319f
 10230b4:	47b0      	blx	r6
					if ( is_ok ) {
 10230b6:	4604      	mov	r4, r0
 10230b8:	2800      	cmp	r0, #0
 10230ba:	d0de      	beq.n	102307a <SM_APP_bBack_up_st_54+0x16>
 10230bc:	a902      	add	r1, sp, #8
 10230be:	2345      	movs	r3, #69	; 0x45
 10230c0:	f801 3d03 	strb.w	r3, [r1, #-3]!
	EEPROM_writer( table_state_addr, &state, 1 );
 10230c4:	462a      	mov	r2, r5
 10230c6:	f243 109c 	movw	r0, #12700	; 0x319c
 10230ca:	47b0      	blx	r6
						EEPROM_writer(CCP_ST_54_NVM_CRC_ADDR, &calc_crc, 2);
 10230cc:	2202      	movs	r2, #2
 10230ce:	f10d 0106 	add.w	r1, sp, #6
 10230d2:	f243 109d 	movw	r0, #12701	; 0x319d
 10230d6:	47b0      	blx	r6
 10230d8:	e7d0      	b.n	102307c <SM_APP_bBack_up_st_54+0x18>
		is_ok = true;
 10230da:	2401      	movs	r4, #1
}
 10230dc:	4620      	mov	r0, r4
 10230de:	b002      	add	sp, #8
 10230e0:	bd70      	pop	{r4, r5, r6, pc}
 10230e2:	a902      	add	r1, sp, #8
 10230e4:	23ff      	movs	r3, #255	; 0xff
 10230e6:	f801 3d06 	strb.w	r3, [r1, #-6]!
	EEPROM_writer( table_state_addr, &state, 1 );
 10230ea:	2201      	movs	r2, #1
 10230ec:	4d11      	ldr	r5, [pc, #68]	; (1023134 <SM_APP_bBack_up_st_54+0xd0>)
 10230ee:	f641 6014 	movw	r0, #7700	; 0x1e14
 10230f2:	47a8      	blx	r5
					is_ok = EEPROM_writer(MCP_ST_54_START_ADDR, &temp_table_backup, table_size);
 10230f4:	4622      	mov	r2, r4
 10230f6:	490d      	ldr	r1, [pc, #52]	; (102312c <SM_APP_bBack_up_st_54+0xc8>)
 10230f8:	f641 6017 	movw	r0, #7703	; 0x1e17
 10230fc:	47a8      	blx	r5
					if ( is_ok ) {
 10230fe:	4604      	mov	r4, r0
 1023100:	2800      	cmp	r0, #0
 1023102:	d0ba      	beq.n	102307a <SM_APP_bBack_up_st_54+0x16>
 1023104:	a902      	add	r1, sp, #8
 1023106:	2345      	movs	r3, #69	; 0x45
 1023108:	f801 3d05 	strb.w	r3, [r1, #-5]!
	EEPROM_writer( table_state_addr, &state, 1 );
 102310c:	2201      	movs	r2, #1
 102310e:	f641 6014 	movw	r0, #7700	; 0x1e14
 1023112:	47a8      	blx	r5
						EEPROM_writer(MCP_ST_54_NVM_CRC_ADDR, &calc_crc, 2);
 1023114:	2202      	movs	r2, #2
 1023116:	f10d 0106 	add.w	r1, sp, #6
 102311a:	f641 6015 	movw	r0, #7701	; 0x1e15
 102311e:	47a8      	blx	r5
 1023120:	e7ac      	b.n	102307c <SM_APP_bBack_up_st_54+0x18>
 1023122:	bf00      	nop
 1023124:	0102c301 	.word	0x0102c301
 1023128:	0102c0cd 	.word	0x0102c0cd
 102312c:	20000ed0 	.word	0x20000ed0
 1023130:	01016b5d 	.word	0x01016b5d
 1023134:	01017509 	.word	0x01017509

01023138 <SM_APP_bRestore_st_54_from_backup>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bRestore_st_54_from_backup(uint16_t backup_area_id) {
 1023138:	b530      	push	{r4, r5, lr}
 102313a:	b083      	sub	sp, #12

	bool is_ok = false;
	uint16_t table_size;
	uint16_t backup_crc = 0, calc_crc = 1;
 102313c:	2200      	movs	r2, #0

	table_size = TOU_APP_usSt_54_get_size();
 102313e:	4b26      	ldr	r3, [pc, #152]	; (10231d8 <SM_APP_bRestore_st_54_from_backup+0xa0>)
	uint16_t backup_crc = 0, calc_crc = 1;
 1023140:	f8ad 2006 	strh.w	r2, [sp, #6]
bool SM_APP_bRestore_st_54_from_backup(uint16_t backup_area_id) {
 1023144:	4605      	mov	r5, r0
	table_size = TOU_APP_usSt_54_get_size();
 1023146:	4798      	blx	r3

	if ( table_size > 0 ) {
 1023148:	b1e0      	cbz	r0, 1023184 <SM_APP_bRestore_st_54_from_backup+0x4c>

		if ( sizeof(temp_table_backup) > table_size ) {
 102314a:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
 102314e:	4604      	mov	r4, r0
 1023150:	d215      	bcs.n	102317e <SM_APP_bRestore_st_54_from_backup+0x46>
		
			switch (backup_area_id) {
 1023152:	b1f5      	cbz	r5, 1023192 <SM_APP_bRestore_st_54_from_backup+0x5a>
 1023154:	2d01      	cmp	r5, #1
 1023156:	d10a      	bne.n	102316e <SM_APP_bRestore_st_54_from_backup+0x36>
	EEPROM_reader( table_state_addr, &state, 1 );
 1023158:	462a      	mov	r2, r5
 102315a:	f10d 0105 	add.w	r1, sp, #5
 102315e:	f243 109c 	movw	r0, #12700	; 0x319c
 1023162:	4d1e      	ldr	r5, [pc, #120]	; (10231dc <SM_APP_bRestore_st_54_from_backup+0xa4>)
 1023164:	47a8      	blx	r5
	return state;
 1023166:	f89d 3005 	ldrb.w	r3, [sp, #5]
					}
					break;

				case MP_120_CCP_AREA:
			
					if ( SM_APP_ucGet_table_state(CCP_ST_54_PROG_STATE_ADDR) == C1219_TABLE_FULL ) {
 102316a:	2b45      	cmp	r3, #69	; 0x45
 102316c:	d028      	beq.n	10231c0 <SM_APP_bRestore_st_54_from_backup+0x88>

				default:
					break;
			}

			calc_crc = CRC_crc16(&temp_table_backup[0], table_size);
 102316e:	4b1c      	ldr	r3, [pc, #112]	; (10231e0 <SM_APP_bRestore_st_54_from_backup+0xa8>)
 1023170:	481c      	ldr	r0, [pc, #112]	; (10231e4 <SM_APP_bRestore_st_54_from_backup+0xac>)
 1023172:	4621      	mov	r1, r4
 1023174:	4798      	blx	r3
			is_ok = (calc_crc == backup_crc) ? TOU_APP_bSt_54_execute_table_writing(&temp_table_backup[0]) : false;
 1023176:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 102317a:	4283      	cmp	r3, r0
 102317c:	d005      	beq.n	102318a <SM_APP_bRestore_st_54_from_backup+0x52>
	bool is_ok = false;
 102317e:	2000      	movs	r0, #0
	else {
		is_ok = true;
	}

	return is_ok;
}
 1023180:	b003      	add	sp, #12
 1023182:	bd30      	pop	{r4, r5, pc}
		is_ok = true;
 1023184:	2001      	movs	r0, #1
}
 1023186:	b003      	add	sp, #12
 1023188:	bd30      	pop	{r4, r5, pc}
			is_ok = (calc_crc == backup_crc) ? TOU_APP_bSt_54_execute_table_writing(&temp_table_backup[0]) : false;
 102318a:	4b17      	ldr	r3, [pc, #92]	; (10231e8 <SM_APP_bRestore_st_54_from_backup+0xb0>)
 102318c:	4815      	ldr	r0, [pc, #84]	; (10231e4 <SM_APP_bRestore_st_54_from_backup+0xac>)
 102318e:	4798      	blx	r3
 1023190:	e7f6      	b.n	1023180 <SM_APP_bRestore_st_54_from_backup+0x48>
	EEPROM_reader( table_state_addr, &state, 1 );
 1023192:	2201      	movs	r2, #1
 1023194:	f10d 0105 	add.w	r1, sp, #5
 1023198:	f641 6014 	movw	r0, #7700	; 0x1e14
 102319c:	4d0f      	ldr	r5, [pc, #60]	; (10231dc <SM_APP_bRestore_st_54_from_backup+0xa4>)
 102319e:	47a8      	blx	r5
	return state;
 10231a0:	f89d 3005 	ldrb.w	r3, [sp, #5]
					if ( SM_APP_ucGet_table_state(MCP_ST_54_PROG_STATE_ADDR) == C1219_TABLE_FULL ) {
 10231a4:	2b45      	cmp	r3, #69	; 0x45
 10231a6:	d1e2      	bne.n	102316e <SM_APP_bRestore_st_54_from_backup+0x36>
						EEPROM_reader(MCP_ST_54_NVM_CRC_ADDR, &backup_crc, 2);
 10231a8:	f10d 0106 	add.w	r1, sp, #6
 10231ac:	2202      	movs	r2, #2
 10231ae:	f641 6015 	movw	r0, #7701	; 0x1e15
 10231b2:	47a8      	blx	r5
						EEPROM_reader(MCP_ST_54_START_ADDR, &temp_table_backup, table_size);
 10231b4:	4622      	mov	r2, r4
 10231b6:	490b      	ldr	r1, [pc, #44]	; (10231e4 <SM_APP_bRestore_st_54_from_backup+0xac>)
 10231b8:	f641 6017 	movw	r0, #7703	; 0x1e17
 10231bc:	47a8      	blx	r5
 10231be:	e7d6      	b.n	102316e <SM_APP_bRestore_st_54_from_backup+0x36>
						EEPROM_reader(CCP_ST_54_NVM_CRC_ADDR, &backup_crc, 2);
 10231c0:	f10d 0106 	add.w	r1, sp, #6
 10231c4:	2202      	movs	r2, #2
 10231c6:	f243 109d 	movw	r0, #12701	; 0x319d
 10231ca:	47a8      	blx	r5
						EEPROM_reader(CCP_ST_54_START_ADDR, &temp_table_backup, table_size);
 10231cc:	4622      	mov	r2, r4
 10231ce:	4905      	ldr	r1, [pc, #20]	; (10231e4 <SM_APP_bRestore_st_54_from_backup+0xac>)
 10231d0:	f243 109f 	movw	r0, #12703	; 0x319f
 10231d4:	47a8      	blx	r5
 10231d6:	e7ca      	b.n	102316e <SM_APP_bRestore_st_54_from_backup+0x36>
 10231d8:	0102c301 	.word	0x0102c301
 10231dc:	01017511 	.word	0x01017511
 10231e0:	01016b5d 	.word	0x01016b5d
 10231e4:	20000ed0 	.word	0x20000ed0
 10231e8:	0102c1dd 	.word	0x0102c1dd

010231ec <SM_APP_bBack_up_st_61>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bBack_up_st_61(uint16_t backup_area_id) {
 10231ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	
	bool is_ok = false;
	uint16_t table_size;
	uint16_t calc_crc;
	
	table_size = LP_APP_usSt_61_get_size();
 10231ee:	4b31      	ldr	r3, [pc, #196]	; (10232b4 <SM_APP_bBack_up_st_61+0xc8>)
bool SM_APP_bBack_up_st_61(uint16_t backup_area_id) {
 10231f0:	b083      	sub	sp, #12
 10231f2:	4606      	mov	r6, r0
	table_size = LP_APP_usSt_61_get_size();
 10231f4:	4798      	blx	r3

	if ( table_size > 0 ) {
 10231f6:	2800      	cmp	r0, #0
 10231f8:	d038      	beq.n	102326c <SM_APP_bBack_up_st_61+0x80>

		if ( ( sizeof(temp_table_backup) > table_size ) && ( !SM_APP_vIs_st_61_corrupted_data() ) ) {
 10231fa:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
 10231fe:	4604      	mov	r4, r0
 1023200:	d303      	bcc.n	102320a <SM_APP_bBack_up_st_61+0x1e>
	bool is_ok = false;
 1023202:	2500      	movs	r5, #0
	else {
		is_ok = true;
	}

	return is_ok;
}
 1023204:	4628      	mov	r0, r5
 1023206:	b003      	add	sp, #12
 1023208:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ( ( sizeof(temp_table_backup) > table_size ) && ( !SM_APP_vIs_st_61_corrupted_data() ) ) {
 102320a:	4b2b      	ldr	r3, [pc, #172]	; (10232b8 <SM_APP_bBack_up_st_61+0xcc>)
 102320c:	4798      	blx	r3
 102320e:	4605      	mov	r5, r0
 1023210:	2800      	cmp	r0, #0
 1023212:	d1f6      	bne.n	1023202 <SM_APP_bBack_up_st_61+0x16>
			LP_APP_bSt_61_execute_table_reading(&temp_table_backup[0]);
 1023214:	4b29      	ldr	r3, [pc, #164]	; (10232bc <SM_APP_bBack_up_st_61+0xd0>)
 1023216:	482a      	ldr	r0, [pc, #168]	; (10232c0 <SM_APP_bBack_up_st_61+0xd4>)
 1023218:	4798      	blx	r3
			calc_crc = CRC_crc16(&temp_table_backup[0], table_size);
 102321a:	4621      	mov	r1, r4
 102321c:	4828      	ldr	r0, [pc, #160]	; (10232c0 <SM_APP_bBack_up_st_61+0xd4>)
 102321e:	4b29      	ldr	r3, [pc, #164]	; (10232c4 <SM_APP_bBack_up_st_61+0xd8>)
 1023220:	4798      	blx	r3
 1023222:	f8ad 0006 	strh.w	r0, [sp, #6]
			switch (backup_area_id) {
 1023226:	b32e      	cbz	r6, 1023274 <SM_APP_bBack_up_st_61+0x88>
 1023228:	2e01      	cmp	r6, #1
 102322a:	d1eb      	bne.n	1023204 <SM_APP_bBack_up_st_61+0x18>
 102322c:	a902      	add	r1, sp, #8
 102322e:	23ff      	movs	r3, #255	; 0xff
 1023230:	f801 3d04 	strb.w	r3, [r1, #-4]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1023234:	4632      	mov	r2, r6
 1023236:	4f24      	ldr	r7, [pc, #144]	; (10232c8 <SM_APP_bBack_up_st_61+0xdc>)
 1023238:	f243 40ea 	movw	r0, #13546	; 0x34ea
 102323c:	47b8      	blx	r7
					is_ok = EEPROM_writer(CCP_ST_61_START_ADDR, &temp_table_backup, table_size);
 102323e:	4622      	mov	r2, r4
 1023240:	491f      	ldr	r1, [pc, #124]	; (10232c0 <SM_APP_bBack_up_st_61+0xd4>)
 1023242:	f243 40ed 	movw	r0, #13549	; 0x34ed
 1023246:	47b8      	blx	r7
					if ( is_ok ) {
 1023248:	4605      	mov	r5, r0
 102324a:	2800      	cmp	r0, #0
 102324c:	d0d9      	beq.n	1023202 <SM_APP_bBack_up_st_61+0x16>
 102324e:	a902      	add	r1, sp, #8
 1023250:	2345      	movs	r3, #69	; 0x45
 1023252:	f801 3d03 	strb.w	r3, [r1, #-3]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1023256:	4632      	mov	r2, r6
 1023258:	f243 40ea 	movw	r0, #13546	; 0x34ea
 102325c:	47b8      	blx	r7
						EEPROM_writer(CCP_ST_61_NVM_CRC_ADDR, &calc_crc, 2);
 102325e:	2202      	movs	r2, #2
 1023260:	f10d 0106 	add.w	r1, sp, #6
 1023264:	f243 40eb 	movw	r0, #13547	; 0x34eb
 1023268:	47b8      	blx	r7
 102326a:	e7cb      	b.n	1023204 <SM_APP_bBack_up_st_61+0x18>
		is_ok = true;
 102326c:	2501      	movs	r5, #1
}
 102326e:	4628      	mov	r0, r5
 1023270:	b003      	add	sp, #12
 1023272:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1023274:	a902      	add	r1, sp, #8
 1023276:	23ff      	movs	r3, #255	; 0xff
 1023278:	f801 3d06 	strb.w	r3, [r1, #-6]!
	EEPROM_writer( table_state_addr, &state, 1 );
 102327c:	2201      	movs	r2, #1
 102327e:	4e12      	ldr	r6, [pc, #72]	; (10232c8 <SM_APP_bBack_up_st_61+0xdc>)
 1023280:	f242 1062 	movw	r0, #8546	; 0x2162
 1023284:	47b0      	blx	r6
					is_ok = EEPROM_writer(MCP_ST_61_START_ADDR, &temp_table_backup, table_size);
 1023286:	4622      	mov	r2, r4
 1023288:	490d      	ldr	r1, [pc, #52]	; (10232c0 <SM_APP_bBack_up_st_61+0xd4>)
 102328a:	f242 1065 	movw	r0, #8549	; 0x2165
 102328e:	47b0      	blx	r6
					if ( is_ok ) {
 1023290:	4605      	mov	r5, r0
 1023292:	2800      	cmp	r0, #0
 1023294:	d0b5      	beq.n	1023202 <SM_APP_bBack_up_st_61+0x16>
 1023296:	a902      	add	r1, sp, #8
 1023298:	2345      	movs	r3, #69	; 0x45
 102329a:	f801 3d05 	strb.w	r3, [r1, #-5]!
	EEPROM_writer( table_state_addr, &state, 1 );
 102329e:	2201      	movs	r2, #1
 10232a0:	f242 1062 	movw	r0, #8546	; 0x2162
 10232a4:	47b0      	blx	r6
						EEPROM_writer(MCP_ST_61_NVM_CRC_ADDR, &calc_crc, 2);
 10232a6:	2202      	movs	r2, #2
 10232a8:	f10d 0106 	add.w	r1, sp, #6
 10232ac:	f242 1063 	movw	r0, #8547	; 0x2163
 10232b0:	47b0      	blx	r6
 10232b2:	e7a7      	b.n	1023204 <SM_APP_bBack_up_st_61+0x18>
 10232b4:	0101b65d 	.word	0x0101b65d
 10232b8:	0101fd69 	.word	0x0101fd69
 10232bc:	0101b611 	.word	0x0101b611
 10232c0:	20000ed0 	.word	0x20000ed0
 10232c4:	01016b5d 	.word	0x01016b5d
 10232c8:	01017509 	.word	0x01017509

010232cc <SM_APP_bRestore_st_61_from_backup>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bRestore_st_61_from_backup(uint16_t backup_area_id) {
 10232cc:	b530      	push	{r4, r5, lr}
 10232ce:	b083      	sub	sp, #12

	bool is_ok = false;
	uint16_t table_size;
	uint16_t backup_crc = 0, calc_crc = 1;
 10232d0:	2200      	movs	r2, #0

	table_size = LP_APP_usSt_61_get_size();
 10232d2:	4b26      	ldr	r3, [pc, #152]	; (102336c <SM_APP_bRestore_st_61_from_backup+0xa0>)
	uint16_t backup_crc = 0, calc_crc = 1;
 10232d4:	f8ad 2006 	strh.w	r2, [sp, #6]
bool SM_APP_bRestore_st_61_from_backup(uint16_t backup_area_id) {
 10232d8:	4605      	mov	r5, r0
	table_size = LP_APP_usSt_61_get_size();
 10232da:	4798      	blx	r3

	if ( table_size > 0 ) {
 10232dc:	b1e0      	cbz	r0, 1023318 <SM_APP_bRestore_st_61_from_backup+0x4c>

		if ( sizeof(temp_table_backup) > table_size ) {
 10232de:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
 10232e2:	4604      	mov	r4, r0
 10232e4:	d215      	bcs.n	1023312 <SM_APP_bRestore_st_61_from_backup+0x46>
			
			switch (backup_area_id) {
 10232e6:	b1f5      	cbz	r5, 1023326 <SM_APP_bRestore_st_61_from_backup+0x5a>
 10232e8:	2d01      	cmp	r5, #1
 10232ea:	d10a      	bne.n	1023302 <SM_APP_bRestore_st_61_from_backup+0x36>
	EEPROM_reader( table_state_addr, &state, 1 );
 10232ec:	462a      	mov	r2, r5
 10232ee:	f10d 0105 	add.w	r1, sp, #5
 10232f2:	f243 40ea 	movw	r0, #13546	; 0x34ea
 10232f6:	4d1e      	ldr	r5, [pc, #120]	; (1023370 <SM_APP_bRestore_st_61_from_backup+0xa4>)
 10232f8:	47a8      	blx	r5
	return state;
 10232fa:	f89d 3005 	ldrb.w	r3, [sp, #5]
					}
					break;

				case MP_120_CCP_AREA:
				
					if ( SM_APP_ucGet_table_state(CCP_ST_61_PROG_STATE_ADDR) == C1219_TABLE_FULL ) {
 10232fe:	2b45      	cmp	r3, #69	; 0x45
 1023300:	d028      	beq.n	1023354 <SM_APP_bRestore_st_61_from_backup+0x88>

				default:
					break;
			}

			calc_crc = CRC_crc16(&temp_table_backup[0], table_size);
 1023302:	4b1c      	ldr	r3, [pc, #112]	; (1023374 <SM_APP_bRestore_st_61_from_backup+0xa8>)
 1023304:	481c      	ldr	r0, [pc, #112]	; (1023378 <SM_APP_bRestore_st_61_from_backup+0xac>)
 1023306:	4621      	mov	r1, r4
 1023308:	4798      	blx	r3
			is_ok = (calc_crc == backup_crc) ? LP_APP_bSt_61_execute_table_writing(&temp_table_backup[0]) : false;
 102330a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 102330e:	4283      	cmp	r3, r0
 1023310:	d005      	beq.n	102331e <SM_APP_bRestore_st_61_from_backup+0x52>
	bool is_ok = false;
 1023312:	2000      	movs	r0, #0
	else {
		is_ok = true;
	}

	return is_ok;
}
 1023314:	b003      	add	sp, #12
 1023316:	bd30      	pop	{r4, r5, pc}
		is_ok = true;
 1023318:	2001      	movs	r0, #1
}
 102331a:	b003      	add	sp, #12
 102331c:	bd30      	pop	{r4, r5, pc}
			is_ok = (calc_crc == backup_crc) ? LP_APP_bSt_61_execute_table_writing(&temp_table_backup[0]) : false;
 102331e:	4b17      	ldr	r3, [pc, #92]	; (102337c <SM_APP_bRestore_st_61_from_backup+0xb0>)
 1023320:	4815      	ldr	r0, [pc, #84]	; (1023378 <SM_APP_bRestore_st_61_from_backup+0xac>)
 1023322:	4798      	blx	r3
 1023324:	e7f6      	b.n	1023314 <SM_APP_bRestore_st_61_from_backup+0x48>
	EEPROM_reader( table_state_addr, &state, 1 );
 1023326:	2201      	movs	r2, #1
 1023328:	f10d 0105 	add.w	r1, sp, #5
 102332c:	f242 1062 	movw	r0, #8546	; 0x2162
 1023330:	4d0f      	ldr	r5, [pc, #60]	; (1023370 <SM_APP_bRestore_st_61_from_backup+0xa4>)
 1023332:	47a8      	blx	r5
	return state;
 1023334:	f89d 3005 	ldrb.w	r3, [sp, #5]
					if ( SM_APP_ucGet_table_state(MCP_ST_61_PROG_STATE_ADDR) == C1219_TABLE_FULL ) {
 1023338:	2b45      	cmp	r3, #69	; 0x45
 102333a:	d1e2      	bne.n	1023302 <SM_APP_bRestore_st_61_from_backup+0x36>
						EEPROM_reader(MCP_ST_61_NVM_CRC_ADDR, &backup_crc, 2);
 102333c:	f10d 0106 	add.w	r1, sp, #6
 1023340:	2202      	movs	r2, #2
 1023342:	f242 1063 	movw	r0, #8547	; 0x2163
 1023346:	47a8      	blx	r5
						EEPROM_reader(MCP_ST_61_START_ADDR, &temp_table_backup, table_size);
 1023348:	4622      	mov	r2, r4
 102334a:	490b      	ldr	r1, [pc, #44]	; (1023378 <SM_APP_bRestore_st_61_from_backup+0xac>)
 102334c:	f242 1065 	movw	r0, #8549	; 0x2165
 1023350:	47a8      	blx	r5
 1023352:	e7d6      	b.n	1023302 <SM_APP_bRestore_st_61_from_backup+0x36>
						EEPROM_reader(CCP_ST_61_NVM_CRC_ADDR, &backup_crc, 2);
 1023354:	f10d 0106 	add.w	r1, sp, #6
 1023358:	2202      	movs	r2, #2
 102335a:	f243 40eb 	movw	r0, #13547	; 0x34eb
 102335e:	47a8      	blx	r5
						EEPROM_reader(CCP_ST_61_START_ADDR, &temp_table_backup, table_size);
 1023360:	4622      	mov	r2, r4
 1023362:	4905      	ldr	r1, [pc, #20]	; (1023378 <SM_APP_bRestore_st_61_from_backup+0xac>)
 1023364:	f243 40ed 	movw	r0, #13549	; 0x34ed
 1023368:	47a8      	blx	r5
 102336a:	e7ca      	b.n	1023302 <SM_APP_bRestore_st_61_from_backup+0x36>
 102336c:	0101b65d 	.word	0x0101b65d
 1023370:	01017511 	.word	0x01017511
 1023374:	01016b5d 	.word	0x01016b5d
 1023378:	20000ed0 	.word	0x20000ed0
 102337c:	0101bc11 	.word	0x0101bc11

01023380 <SM_APP_bBack_up_st_62>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bBack_up_st_62(uint16_t backup_area_id) {
 1023380:	b5f0      	push	{r4, r5, r6, r7, lr}
	
	bool is_ok = false;
	uint16_t table_size;
	uint16_t calc_crc;
	
	table_size = LP_APP_usSt_62_get_size();
 1023382:	4b31      	ldr	r3, [pc, #196]	; (1023448 <SM_APP_bBack_up_st_62+0xc8>)
bool SM_APP_bBack_up_st_62(uint16_t backup_area_id) {
 1023384:	b083      	sub	sp, #12
 1023386:	4606      	mov	r6, r0
	table_size = LP_APP_usSt_62_get_size();
 1023388:	4798      	blx	r3

	if ( table_size > 0 ) {
 102338a:	2800      	cmp	r0, #0
 102338c:	d038      	beq.n	1023400 <SM_APP_bBack_up_st_62+0x80>

		if ( ( sizeof(temp_table_backup) > table_size ) && ( !SM_APP_vIs_st_62_corrupted_data() ) ) {
 102338e:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
 1023392:	4604      	mov	r4, r0
 1023394:	d303      	bcc.n	102339e <SM_APP_bBack_up_st_62+0x1e>
	bool is_ok = false;
 1023396:	2500      	movs	r5, #0
	else {
		is_ok = true;
	}

	return is_ok;
}
 1023398:	4628      	mov	r0, r5
 102339a:	b003      	add	sp, #12
 102339c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ( ( sizeof(temp_table_backup) > table_size ) && ( !SM_APP_vIs_st_62_corrupted_data() ) ) {
 102339e:	4b2b      	ldr	r3, [pc, #172]	; (102344c <SM_APP_bBack_up_st_62+0xcc>)
 10233a0:	4798      	blx	r3
 10233a2:	4605      	mov	r5, r0
 10233a4:	2800      	cmp	r0, #0
 10233a6:	d1f6      	bne.n	1023396 <SM_APP_bBack_up_st_62+0x16>
			LP_APP_bSt_62_execute_table_reading(&temp_table_backup[0]);
 10233a8:	4b29      	ldr	r3, [pc, #164]	; (1023450 <SM_APP_bBack_up_st_62+0xd0>)
 10233aa:	482a      	ldr	r0, [pc, #168]	; (1023454 <SM_APP_bBack_up_st_62+0xd4>)
 10233ac:	4798      	blx	r3
			calc_crc = CRC_crc16(&temp_table_backup[0], table_size);
 10233ae:	4621      	mov	r1, r4
 10233b0:	4828      	ldr	r0, [pc, #160]	; (1023454 <SM_APP_bBack_up_st_62+0xd4>)
 10233b2:	4b29      	ldr	r3, [pc, #164]	; (1023458 <SM_APP_bBack_up_st_62+0xd8>)
 10233b4:	4798      	blx	r3
 10233b6:	f8ad 0006 	strh.w	r0, [sp, #6]
			switch (backup_area_id) {
 10233ba:	b32e      	cbz	r6, 1023408 <SM_APP_bBack_up_st_62+0x88>
 10233bc:	2e01      	cmp	r6, #1
 10233be:	d1eb      	bne.n	1023398 <SM_APP_bBack_up_st_62+0x18>
 10233c0:	a902      	add	r1, sp, #8
 10233c2:	23ff      	movs	r3, #255	; 0xff
 10233c4:	f801 3d04 	strb.w	r3, [r1, #-4]!
	EEPROM_writer( table_state_addr, &state, 1 );
 10233c8:	4632      	mov	r2, r6
 10233ca:	4f24      	ldr	r7, [pc, #144]	; (102345c <SM_APP_bBack_up_st_62+0xdc>)
 10233cc:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 10233d0:	47b8      	blx	r7
					is_ok = EEPROM_writer(CCP_ST_62_START_ADDR, &temp_table_backup, table_size);
 10233d2:	4622      	mov	r2, r4
 10233d4:	491f      	ldr	r1, [pc, #124]	; (1023454 <SM_APP_bBack_up_st_62+0xd4>)
 10233d6:	f243 5003 	movw	r0, #13571	; 0x3503
 10233da:	47b8      	blx	r7
					if ( is_ok ) {
 10233dc:	4605      	mov	r5, r0
 10233de:	2800      	cmp	r0, #0
 10233e0:	d0d9      	beq.n	1023396 <SM_APP_bBack_up_st_62+0x16>
 10233e2:	a902      	add	r1, sp, #8
 10233e4:	2345      	movs	r3, #69	; 0x45
 10233e6:	f801 3d03 	strb.w	r3, [r1, #-3]!
	EEPROM_writer( table_state_addr, &state, 1 );
 10233ea:	4632      	mov	r2, r6
 10233ec:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 10233f0:	47b8      	blx	r7
						EEPROM_writer(CCP_ST_62_NVM_CRC_ADDR, &calc_crc, 2);
 10233f2:	2202      	movs	r2, #2
 10233f4:	f10d 0106 	add.w	r1, sp, #6
 10233f8:	f243 5001 	movw	r0, #13569	; 0x3501
 10233fc:	47b8      	blx	r7
 10233fe:	e7cb      	b.n	1023398 <SM_APP_bBack_up_st_62+0x18>
		is_ok = true;
 1023400:	2501      	movs	r5, #1
}
 1023402:	4628      	mov	r0, r5
 1023404:	b003      	add	sp, #12
 1023406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1023408:	a902      	add	r1, sp, #8
 102340a:	23ff      	movs	r3, #255	; 0xff
 102340c:	f801 3d06 	strb.w	r3, [r1, #-6]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1023410:	2201      	movs	r2, #1
 1023412:	4e12      	ldr	r6, [pc, #72]	; (102345c <SM_APP_bBack_up_st_62+0xdc>)
 1023414:	f242 1078 	movw	r0, #8568	; 0x2178
 1023418:	47b0      	blx	r6
					is_ok = EEPROM_writer(MCP_ST_62_START_ADDR, &temp_table_backup, table_size);
 102341a:	4622      	mov	r2, r4
 102341c:	490d      	ldr	r1, [pc, #52]	; (1023454 <SM_APP_bBack_up_st_62+0xd4>)
 102341e:	f242 107b 	movw	r0, #8571	; 0x217b
 1023422:	47b0      	blx	r6
					if ( is_ok ) {
 1023424:	4605      	mov	r5, r0
 1023426:	2800      	cmp	r0, #0
 1023428:	d0b5      	beq.n	1023396 <SM_APP_bBack_up_st_62+0x16>
 102342a:	a902      	add	r1, sp, #8
 102342c:	2345      	movs	r3, #69	; 0x45
 102342e:	f801 3d05 	strb.w	r3, [r1, #-5]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1023432:	2201      	movs	r2, #1
 1023434:	f242 1078 	movw	r0, #8568	; 0x2178
 1023438:	47b0      	blx	r6
						EEPROM_writer(MCP_ST_62_NVM_CRC_ADDR, &calc_crc, 2);
 102343a:	2202      	movs	r2, #2
 102343c:	f10d 0106 	add.w	r1, sp, #6
 1023440:	f242 1079 	movw	r0, #8569	; 0x2179
 1023444:	47b0      	blx	r6
 1023446:	e7a7      	b.n	1023398 <SM_APP_bBack_up_st_62+0x18>
 1023448:	0101b9ed 	.word	0x0101b9ed
 102344c:	0101fe65 	.word	0x0101fe65
 1023450:	0101b895 	.word	0x0101b895
 1023454:	20000ed0 	.word	0x20000ed0
 1023458:	01016b5d 	.word	0x01016b5d
 102345c:	01017509 	.word	0x01017509

01023460 <SM_APP_bRestore_st_62_from_backup>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bRestore_st_62_from_backup(uint16_t backup_area_id) {
 1023460:	b530      	push	{r4, r5, lr}
 1023462:	b083      	sub	sp, #12

	bool is_ok = false;
	uint16_t table_size;
	uint16_t backup_crc = 0, calc_crc = 1;
 1023464:	2200      	movs	r2, #0

	table_size = LP_APP_usSt_62_get_size();
 1023466:	4b26      	ldr	r3, [pc, #152]	; (1023500 <SM_APP_bRestore_st_62_from_backup+0xa0>)
	uint16_t backup_crc = 0, calc_crc = 1;
 1023468:	f8ad 2006 	strh.w	r2, [sp, #6]
bool SM_APP_bRestore_st_62_from_backup(uint16_t backup_area_id) {
 102346c:	4605      	mov	r5, r0
	table_size = LP_APP_usSt_62_get_size();
 102346e:	4798      	blx	r3

	if ( table_size > 0 ) {
 1023470:	b1e0      	cbz	r0, 10234ac <SM_APP_bRestore_st_62_from_backup+0x4c>

		if ( sizeof(temp_table_backup) > table_size ) {
 1023472:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
 1023476:	4604      	mov	r4, r0
 1023478:	d215      	bcs.n	10234a6 <SM_APP_bRestore_st_62_from_backup+0x46>
		
			switch (backup_area_id) {
 102347a:	b1f5      	cbz	r5, 10234ba <SM_APP_bRestore_st_62_from_backup+0x5a>
 102347c:	2d01      	cmp	r5, #1
 102347e:	d10a      	bne.n	1023496 <SM_APP_bRestore_st_62_from_backup+0x36>
	EEPROM_reader( table_state_addr, &state, 1 );
 1023480:	462a      	mov	r2, r5
 1023482:	f10d 0105 	add.w	r1, sp, #5
 1023486:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 102348a:	4d1e      	ldr	r5, [pc, #120]	; (1023504 <SM_APP_bRestore_st_62_from_backup+0xa4>)
 102348c:	47a8      	blx	r5
	return state;
 102348e:	f89d 3005 	ldrb.w	r3, [sp, #5]
					}
					break;

				case MP_120_CCP_AREA:
			
					if ( SM_APP_ucGet_table_state(CCP_ST_62_PROG_STATE_ADDR) == C1219_TABLE_FULL ) {
 1023492:	2b45      	cmp	r3, #69	; 0x45
 1023494:	d028      	beq.n	10234e8 <SM_APP_bRestore_st_62_from_backup+0x88>

				default:
					break;
			}

			calc_crc = CRC_crc16(&temp_table_backup[0], table_size);
 1023496:	4b1c      	ldr	r3, [pc, #112]	; (1023508 <SM_APP_bRestore_st_62_from_backup+0xa8>)
 1023498:	481c      	ldr	r0, [pc, #112]	; (102350c <SM_APP_bRestore_st_62_from_backup+0xac>)
 102349a:	4621      	mov	r1, r4
 102349c:	4798      	blx	r3
			is_ok = (calc_crc == backup_crc) ? LP_APP_bSt_62_execute_table_writing(&temp_table_backup[0]) : false;
 102349e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 10234a2:	4283      	cmp	r3, r0
 10234a4:	d005      	beq.n	10234b2 <SM_APP_bRestore_st_62_from_backup+0x52>
	bool is_ok = false;
 10234a6:	2000      	movs	r0, #0
	else {
		is_ok = true;
	}

	return is_ok;
}
 10234a8:	b003      	add	sp, #12
 10234aa:	bd30      	pop	{r4, r5, pc}
		is_ok = true;
 10234ac:	2001      	movs	r0, #1
}
 10234ae:	b003      	add	sp, #12
 10234b0:	bd30      	pop	{r4, r5, pc}
			is_ok = (calc_crc == backup_crc) ? LP_APP_bSt_62_execute_table_writing(&temp_table_backup[0]) : false;
 10234b2:	4b17      	ldr	r3, [pc, #92]	; (1023510 <SM_APP_bRestore_st_62_from_backup+0xb0>)
 10234b4:	4815      	ldr	r0, [pc, #84]	; (102350c <SM_APP_bRestore_st_62_from_backup+0xac>)
 10234b6:	4798      	blx	r3
 10234b8:	e7f6      	b.n	10234a8 <SM_APP_bRestore_st_62_from_backup+0x48>
	EEPROM_reader( table_state_addr, &state, 1 );
 10234ba:	2201      	movs	r2, #1
 10234bc:	f10d 0105 	add.w	r1, sp, #5
 10234c0:	f242 1078 	movw	r0, #8568	; 0x2178
 10234c4:	4d0f      	ldr	r5, [pc, #60]	; (1023504 <SM_APP_bRestore_st_62_from_backup+0xa4>)
 10234c6:	47a8      	blx	r5
	return state;
 10234c8:	f89d 3005 	ldrb.w	r3, [sp, #5]
					if ( SM_APP_ucGet_table_state(MCP_ST_62_PROG_STATE_ADDR) == C1219_TABLE_FULL ) {
 10234cc:	2b45      	cmp	r3, #69	; 0x45
 10234ce:	d1e2      	bne.n	1023496 <SM_APP_bRestore_st_62_from_backup+0x36>
						EEPROM_reader(MCP_ST_62_NVM_CRC_ADDR, &backup_crc, 2);
 10234d0:	f10d 0106 	add.w	r1, sp, #6
 10234d4:	2202      	movs	r2, #2
 10234d6:	f242 1079 	movw	r0, #8569	; 0x2179
 10234da:	47a8      	blx	r5
						EEPROM_reader(MCP_ST_62_START_ADDR, &temp_table_backup, table_size);
 10234dc:	4622      	mov	r2, r4
 10234de:	490b      	ldr	r1, [pc, #44]	; (102350c <SM_APP_bRestore_st_62_from_backup+0xac>)
 10234e0:	f242 107b 	movw	r0, #8571	; 0x217b
 10234e4:	47a8      	blx	r5
 10234e6:	e7d6      	b.n	1023496 <SM_APP_bRestore_st_62_from_backup+0x36>
						EEPROM_reader(CCP_ST_62_NVM_CRC_ADDR, &backup_crc, 2);
 10234e8:	f10d 0106 	add.w	r1, sp, #6
 10234ec:	2202      	movs	r2, #2
 10234ee:	f243 5001 	movw	r0, #13569	; 0x3501
 10234f2:	47a8      	blx	r5
						EEPROM_reader(CCP_ST_62_START_ADDR, &temp_table_backup, table_size);
 10234f4:	4622      	mov	r2, r4
 10234f6:	4905      	ldr	r1, [pc, #20]	; (102350c <SM_APP_bRestore_st_62_from_backup+0xac>)
 10234f8:	f243 5003 	movw	r0, #13571	; 0x3503
 10234fc:	47a8      	blx	r5
 10234fe:	e7ca      	b.n	1023496 <SM_APP_bRestore_st_62_from_backup+0x36>
 1023500:	0101b9ed 	.word	0x0101b9ed
 1023504:	01017511 	.word	0x01017511
 1023508:	01016b5d 	.word	0x01016b5d
 102350c:	20000ed0 	.word	0x20000ed0
 1023510:	0101b8cd 	.word	0x0101b8cd

01023514 <SM_APP_bBack_up_st_71>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bBack_up_st_71(uint16_t backup_area_id) {
 1023514:	b5f0      	push	{r4, r5, r6, r7, lr}
	
	bool is_ok = false;
	uint16_t table_size;
	uint16_t calc_crc;
	
	table_size = EVNT_APP_usSt_71_get_size();
 1023516:	4b31      	ldr	r3, [pc, #196]	; (10235dc <SM_APP_bBack_up_st_71+0xc8>)
bool SM_APP_bBack_up_st_71(uint16_t backup_area_id) {
 1023518:	b083      	sub	sp, #12
 102351a:	4606      	mov	r6, r0
	table_size = EVNT_APP_usSt_71_get_size();
 102351c:	4798      	blx	r3

	if ( table_size > 0 ) {
 102351e:	2800      	cmp	r0, #0
 1023520:	d038      	beq.n	1023594 <SM_APP_bBack_up_st_71+0x80>

		if ( ( sizeof(temp_table_backup) > table_size ) && ( !SM_APP_vIs_st_71_corrupted_data() ) ) {
 1023522:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
 1023526:	4604      	mov	r4, r0
 1023528:	d303      	bcc.n	1023532 <SM_APP_bBack_up_st_71+0x1e>
	bool is_ok = false;
 102352a:	2500      	movs	r5, #0
	else {
		is_ok = true;
	}

	return is_ok;
}
 102352c:	4628      	mov	r0, r5
 102352e:	b003      	add	sp, #12
 1023530:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ( ( sizeof(temp_table_backup) > table_size ) && ( !SM_APP_vIs_st_71_corrupted_data() ) ) {
 1023532:	4b2b      	ldr	r3, [pc, #172]	; (10235e0 <SM_APP_bBack_up_st_71+0xcc>)
 1023534:	4798      	blx	r3
 1023536:	4605      	mov	r5, r0
 1023538:	2800      	cmp	r0, #0
 102353a:	d1f6      	bne.n	102352a <SM_APP_bBack_up_st_71+0x16>
			EVNT_APP_bSt_71_execute_table_reading(&temp_table_backup[0]);
 102353c:	4b29      	ldr	r3, [pc, #164]	; (10235e4 <SM_APP_bBack_up_st_71+0xd0>)
 102353e:	482a      	ldr	r0, [pc, #168]	; (10235e8 <SM_APP_bBack_up_st_71+0xd4>)
 1023540:	4798      	blx	r3
			calc_crc = CRC_crc16(&temp_table_backup[0], table_size);
 1023542:	4621      	mov	r1, r4
 1023544:	4828      	ldr	r0, [pc, #160]	; (10235e8 <SM_APP_bBack_up_st_71+0xd4>)
 1023546:	4b29      	ldr	r3, [pc, #164]	; (10235ec <SM_APP_bBack_up_st_71+0xd8>)
 1023548:	4798      	blx	r3
 102354a:	f8ad 0006 	strh.w	r0, [sp, #6]
			switch (backup_area_id) {
 102354e:	b32e      	cbz	r6, 102359c <SM_APP_bBack_up_st_71+0x88>
 1023550:	2e01      	cmp	r6, #1
 1023552:	d1eb      	bne.n	102352c <SM_APP_bBack_up_st_71+0x18>
 1023554:	a902      	add	r1, sp, #8
 1023556:	23ff      	movs	r3, #255	; 0xff
 1023558:	f801 3d04 	strb.w	r3, [r1, #-4]!
	EEPROM_writer( table_state_addr, &state, 1 );
 102355c:	4632      	mov	r2, r6
 102355e:	4f24      	ldr	r7, [pc, #144]	; (10235f0 <SM_APP_bBack_up_st_71+0xdc>)
 1023560:	f243 502e 	movw	r0, #13614	; 0x352e
 1023564:	47b8      	blx	r7
					is_ok = EEPROM_writer(CCP_ST_71_START_ADDR, &temp_table_backup, table_size);
 1023566:	4622      	mov	r2, r4
 1023568:	491f      	ldr	r1, [pc, #124]	; (10235e8 <SM_APP_bBack_up_st_71+0xd4>)
 102356a:	f243 5031 	movw	r0, #13617	; 0x3531
 102356e:	47b8      	blx	r7
					if ( is_ok ) {
 1023570:	4605      	mov	r5, r0
 1023572:	2800      	cmp	r0, #0
 1023574:	d0d9      	beq.n	102352a <SM_APP_bBack_up_st_71+0x16>
 1023576:	a902      	add	r1, sp, #8
 1023578:	2345      	movs	r3, #69	; 0x45
 102357a:	f801 3d03 	strb.w	r3, [r1, #-3]!
	EEPROM_writer( table_state_addr, &state, 1 );
 102357e:	4632      	mov	r2, r6
 1023580:	f243 502e 	movw	r0, #13614	; 0x352e
 1023584:	47b8      	blx	r7
						EEPROM_writer(CCP_ST_71_NVM_CRC_ADDR, &calc_crc, 2);
 1023586:	2202      	movs	r2, #2
 1023588:	f10d 0106 	add.w	r1, sp, #6
 102358c:	f243 502f 	movw	r0, #13615	; 0x352f
 1023590:	47b8      	blx	r7
 1023592:	e7cb      	b.n	102352c <SM_APP_bBack_up_st_71+0x18>
		is_ok = true;
 1023594:	2501      	movs	r5, #1
}
 1023596:	4628      	mov	r0, r5
 1023598:	b003      	add	sp, #12
 102359a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 102359c:	a902      	add	r1, sp, #8
 102359e:	23ff      	movs	r3, #255	; 0xff
 10235a0:	f801 3d06 	strb.w	r3, [r1, #-6]!
	EEPROM_writer( table_state_addr, &state, 1 );
 10235a4:	2201      	movs	r2, #1
 10235a6:	4e12      	ldr	r6, [pc, #72]	; (10235f0 <SM_APP_bBack_up_st_71+0xdc>)
 10235a8:	f242 10a6 	movw	r0, #8614	; 0x21a6
 10235ac:	47b0      	blx	r6
					is_ok = EEPROM_writer(MCP_ST_71_START_ADDR, &temp_table_backup, table_size);
 10235ae:	4622      	mov	r2, r4
 10235b0:	490d      	ldr	r1, [pc, #52]	; (10235e8 <SM_APP_bBack_up_st_71+0xd4>)
 10235b2:	f242 10a9 	movw	r0, #8617	; 0x21a9
 10235b6:	47b0      	blx	r6
					if ( is_ok ) {
 10235b8:	4605      	mov	r5, r0
 10235ba:	2800      	cmp	r0, #0
 10235bc:	d0b5      	beq.n	102352a <SM_APP_bBack_up_st_71+0x16>
 10235be:	a902      	add	r1, sp, #8
 10235c0:	2345      	movs	r3, #69	; 0x45
 10235c2:	f801 3d05 	strb.w	r3, [r1, #-5]!
	EEPROM_writer( table_state_addr, &state, 1 );
 10235c6:	2201      	movs	r2, #1
 10235c8:	f242 10a6 	movw	r0, #8614	; 0x21a6
 10235cc:	47b0      	blx	r6
						EEPROM_writer(MCP_ST_71_NVM_CRC_ADDR, &calc_crc, 2);
 10235ce:	2202      	movs	r2, #2
 10235d0:	f10d 0106 	add.w	r1, sp, #6
 10235d4:	f242 10a7 	movw	r0, #8615	; 0x21a7
 10235d8:	47b0      	blx	r6
 10235da:	e7a7      	b.n	102352c <SM_APP_bBack_up_st_71+0x18>
 10235dc:	01018691 	.word	0x01018691
 10235e0:	0101ff61 	.word	0x0101ff61
 10235e4:	010185e9 	.word	0x010185e9
 10235e8:	20000ed0 	.word	0x20000ed0
 10235ec:	01016b5d 	.word	0x01016b5d
 10235f0:	01017509 	.word	0x01017509

010235f4 <SM_APP_bRestore_st_71_from_backup>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bRestore_st_71_from_backup(uint16_t backup_area_id) {
 10235f4:	b530      	push	{r4, r5, lr}
 10235f6:	b083      	sub	sp, #12

	bool is_ok = false;
	uint16_t table_size;
	uint16_t backup_crc = 0, calc_crc = 1;
 10235f8:	2200      	movs	r2, #0

	table_size = EVNT_APP_usSt_71_get_size();
 10235fa:	4b26      	ldr	r3, [pc, #152]	; (1023694 <SM_APP_bRestore_st_71_from_backup+0xa0>)
	uint16_t backup_crc = 0, calc_crc = 1;
 10235fc:	f8ad 2006 	strh.w	r2, [sp, #6]
bool SM_APP_bRestore_st_71_from_backup(uint16_t backup_area_id) {
 1023600:	4605      	mov	r5, r0
	table_size = EVNT_APP_usSt_71_get_size();
 1023602:	4798      	blx	r3

	if ( table_size > 0 ) {
 1023604:	b1e0      	cbz	r0, 1023640 <SM_APP_bRestore_st_71_from_backup+0x4c>

		if ( sizeof(temp_table_backup) > table_size ) {
 1023606:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
 102360a:	4604      	mov	r4, r0
 102360c:	d215      	bcs.n	102363a <SM_APP_bRestore_st_71_from_backup+0x46>
			
			switch (backup_area_id) {
 102360e:	b1f5      	cbz	r5, 102364e <SM_APP_bRestore_st_71_from_backup+0x5a>
 1023610:	2d01      	cmp	r5, #1
 1023612:	d10a      	bne.n	102362a <SM_APP_bRestore_st_71_from_backup+0x36>
	EEPROM_reader( table_state_addr, &state, 1 );
 1023614:	462a      	mov	r2, r5
 1023616:	f10d 0105 	add.w	r1, sp, #5
 102361a:	f243 502e 	movw	r0, #13614	; 0x352e
 102361e:	4d1e      	ldr	r5, [pc, #120]	; (1023698 <SM_APP_bRestore_st_71_from_backup+0xa4>)
 1023620:	47a8      	blx	r5
	return state;
 1023622:	f89d 3005 	ldrb.w	r3, [sp, #5]
					}
					break;

				case MP_120_CCP_AREA:
				
					if ( SM_APP_ucGet_table_state(CCP_ST_71_PROG_STATE_ADDR) == C1219_TABLE_FULL ) {
 1023626:	2b45      	cmp	r3, #69	; 0x45
 1023628:	d028      	beq.n	102367c <SM_APP_bRestore_st_71_from_backup+0x88>

				default:
					break;
			}

			calc_crc = CRC_crc16(&temp_table_backup[0], table_size);
 102362a:	4b1c      	ldr	r3, [pc, #112]	; (102369c <SM_APP_bRestore_st_71_from_backup+0xa8>)
 102362c:	481c      	ldr	r0, [pc, #112]	; (10236a0 <SM_APP_bRestore_st_71_from_backup+0xac>)
 102362e:	4621      	mov	r1, r4
 1023630:	4798      	blx	r3
			is_ok = (calc_crc == backup_crc) ? EVNT_APP_bSt_71_execute_table_writing(&temp_table_backup[0]) : false;
 1023632:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 1023636:	4283      	cmp	r3, r0
 1023638:	d005      	beq.n	1023646 <SM_APP_bRestore_st_71_from_backup+0x52>
	bool is_ok = false;
 102363a:	2000      	movs	r0, #0
	else {
		is_ok = true;
	}

	return is_ok;
}
 102363c:	b003      	add	sp, #12
 102363e:	bd30      	pop	{r4, r5, pc}
		is_ok = true;
 1023640:	2001      	movs	r0, #1
}
 1023642:	b003      	add	sp, #12
 1023644:	bd30      	pop	{r4, r5, pc}
			is_ok = (calc_crc == backup_crc) ? EVNT_APP_bSt_71_execute_table_writing(&temp_table_backup[0]) : false;
 1023646:	4b17      	ldr	r3, [pc, #92]	; (10236a4 <SM_APP_bRestore_st_71_from_backup+0xb0>)
 1023648:	4815      	ldr	r0, [pc, #84]	; (10236a0 <SM_APP_bRestore_st_71_from_backup+0xac>)
 102364a:	4798      	blx	r3
 102364c:	e7f6      	b.n	102363c <SM_APP_bRestore_st_71_from_backup+0x48>
	EEPROM_reader( table_state_addr, &state, 1 );
 102364e:	2201      	movs	r2, #1
 1023650:	f10d 0105 	add.w	r1, sp, #5
 1023654:	f242 10a6 	movw	r0, #8614	; 0x21a6
 1023658:	4d0f      	ldr	r5, [pc, #60]	; (1023698 <SM_APP_bRestore_st_71_from_backup+0xa4>)
 102365a:	47a8      	blx	r5
	return state;
 102365c:	f89d 3005 	ldrb.w	r3, [sp, #5]
					if ( SM_APP_ucGet_table_state(MCP_ST_71_PROG_STATE_ADDR) == C1219_TABLE_FULL ) {
 1023660:	2b45      	cmp	r3, #69	; 0x45
 1023662:	d1e2      	bne.n	102362a <SM_APP_bRestore_st_71_from_backup+0x36>
						EEPROM_reader(MCP_ST_71_NVM_CRC_ADDR, &backup_crc, 2);
 1023664:	f10d 0106 	add.w	r1, sp, #6
 1023668:	2202      	movs	r2, #2
 102366a:	f242 10a7 	movw	r0, #8615	; 0x21a7
 102366e:	47a8      	blx	r5
						EEPROM_reader(MCP_ST_71_START_ADDR, &temp_table_backup, table_size);
 1023670:	4622      	mov	r2, r4
 1023672:	490b      	ldr	r1, [pc, #44]	; (10236a0 <SM_APP_bRestore_st_71_from_backup+0xac>)
 1023674:	f242 10a9 	movw	r0, #8617	; 0x21a9
 1023678:	47a8      	blx	r5
 102367a:	e7d6      	b.n	102362a <SM_APP_bRestore_st_71_from_backup+0x36>
						EEPROM_reader(CCP_ST_71_NVM_CRC_ADDR, &backup_crc, 2);
 102367c:	f10d 0106 	add.w	r1, sp, #6
 1023680:	2202      	movs	r2, #2
 1023682:	f243 502f 	movw	r0, #13615	; 0x352f
 1023686:	47a8      	blx	r5
						EEPROM_reader(CCP_ST_71_START_ADDR, &temp_table_backup, table_size);
 1023688:	4622      	mov	r2, r4
 102368a:	4905      	ldr	r1, [pc, #20]	; (10236a0 <SM_APP_bRestore_st_71_from_backup+0xac>)
 102368c:	f243 5031 	movw	r0, #13617	; 0x3531
 1023690:	47a8      	blx	r5
 1023692:	e7ca      	b.n	102362a <SM_APP_bRestore_st_71_from_backup+0x36>
 1023694:	01018691 	.word	0x01018691
 1023698:	01017511 	.word	0x01017511
 102369c:	01016b5d 	.word	0x01016b5d
 10236a0:	20000ed0 	.word	0x20000ed0
 10236a4:	0101861d 	.word	0x0101861d

010236a8 <SM_APP_bBack_up_st_73>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bBack_up_st_73(uint16_t backup_area_id) {
 10236a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	
	bool is_ok = false;
	uint16_t table_size;
	uint16_t calc_crc;
	
	table_size = EVNT_APP_usSt_73_get_size();
 10236aa:	4b31      	ldr	r3, [pc, #196]	; (1023770 <SM_APP_bBack_up_st_73+0xc8>)
bool SM_APP_bBack_up_st_73(uint16_t backup_area_id) {
 10236ac:	b083      	sub	sp, #12
 10236ae:	4606      	mov	r6, r0
	table_size = EVNT_APP_usSt_73_get_size();
 10236b0:	4798      	blx	r3

	if ( table_size > 0 ) {
 10236b2:	2800      	cmp	r0, #0
 10236b4:	d038      	beq.n	1023728 <SM_APP_bBack_up_st_73+0x80>

		if ( ( sizeof(temp_table_backup) > table_size ) && ( !SM_APP_vIs_st_73_corrupted_data() ) ) {
 10236b6:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
 10236ba:	4604      	mov	r4, r0
 10236bc:	d303      	bcc.n	10236c6 <SM_APP_bBack_up_st_73+0x1e>
	bool is_ok = false;
 10236be:	2500      	movs	r5, #0
	else {
		is_ok = true;
	}

	return is_ok;
}
 10236c0:	4628      	mov	r0, r5
 10236c2:	b003      	add	sp, #12
 10236c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ( ( sizeof(temp_table_backup) > table_size ) && ( !SM_APP_vIs_st_73_corrupted_data() ) ) {
 10236c6:	4b2b      	ldr	r3, [pc, #172]	; (1023774 <SM_APP_bBack_up_st_73+0xcc>)
 10236c8:	4798      	blx	r3
 10236ca:	4605      	mov	r5, r0
 10236cc:	2800      	cmp	r0, #0
 10236ce:	d1f6      	bne.n	10236be <SM_APP_bBack_up_st_73+0x16>
			EVNT_APP_bSt_73_execute_table_reading(&temp_table_backup[0]);
 10236d0:	4b29      	ldr	r3, [pc, #164]	; (1023778 <SM_APP_bBack_up_st_73+0xd0>)
 10236d2:	482a      	ldr	r0, [pc, #168]	; (102377c <SM_APP_bBack_up_st_73+0xd4>)
 10236d4:	4798      	blx	r3
			calc_crc = CRC_crc16(&temp_table_backup[0], table_size);
 10236d6:	4621      	mov	r1, r4
 10236d8:	4828      	ldr	r0, [pc, #160]	; (102377c <SM_APP_bBack_up_st_73+0xd4>)
 10236da:	4b29      	ldr	r3, [pc, #164]	; (1023780 <SM_APP_bBack_up_st_73+0xd8>)
 10236dc:	4798      	blx	r3
 10236de:	f8ad 0006 	strh.w	r0, [sp, #6]
			switch (backup_area_id) {
 10236e2:	b32e      	cbz	r6, 1023730 <SM_APP_bBack_up_st_73+0x88>
 10236e4:	2e01      	cmp	r6, #1
 10236e6:	d1eb      	bne.n	10236c0 <SM_APP_bBack_up_st_73+0x18>
 10236e8:	a902      	add	r1, sp, #8
 10236ea:	23ff      	movs	r3, #255	; 0xff
 10236ec:	f801 3d04 	strb.w	r3, [r1, #-4]!
	EEPROM_writer( table_state_addr, &state, 1 );
 10236f0:	4632      	mov	r2, r6
 10236f2:	4f24      	ldr	r7, [pc, #144]	; (1023784 <SM_APP_bBack_up_st_73+0xdc>)
 10236f4:	f243 503e 	movw	r0, #13630	; 0x353e
 10236f8:	47b8      	blx	r7
					is_ok = EEPROM_writer(CCP_ST_73_START_ADDR, &temp_table_backup, table_size);
 10236fa:	4622      	mov	r2, r4
 10236fc:	491f      	ldr	r1, [pc, #124]	; (102377c <SM_APP_bBack_up_st_73+0xd4>)
 10236fe:	f243 5041 	movw	r0, #13633	; 0x3541
 1023702:	47b8      	blx	r7
					if ( is_ok ) {
 1023704:	4605      	mov	r5, r0
 1023706:	2800      	cmp	r0, #0
 1023708:	d0d9      	beq.n	10236be <SM_APP_bBack_up_st_73+0x16>
 102370a:	a902      	add	r1, sp, #8
 102370c:	2345      	movs	r3, #69	; 0x45
 102370e:	f801 3d03 	strb.w	r3, [r1, #-3]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1023712:	4632      	mov	r2, r6
 1023714:	f243 503e 	movw	r0, #13630	; 0x353e
 1023718:	47b8      	blx	r7
						EEPROM_writer(CCP_ST_73_NVM_CRC_ADDR, &calc_crc, 2);
 102371a:	2202      	movs	r2, #2
 102371c:	f10d 0106 	add.w	r1, sp, #6
 1023720:	f243 503f 	movw	r0, #13631	; 0x353f
 1023724:	47b8      	blx	r7
 1023726:	e7cb      	b.n	10236c0 <SM_APP_bBack_up_st_73+0x18>
		is_ok = true;
 1023728:	2501      	movs	r5, #1
}
 102372a:	4628      	mov	r0, r5
 102372c:	b003      	add	sp, #12
 102372e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1023730:	a902      	add	r1, sp, #8
 1023732:	23ff      	movs	r3, #255	; 0xff
 1023734:	f801 3d06 	strb.w	r3, [r1, #-6]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1023738:	2201      	movs	r2, #1
 102373a:	4e12      	ldr	r6, [pc, #72]	; (1023784 <SM_APP_bBack_up_st_73+0xdc>)
 102373c:	f242 10b6 	movw	r0, #8630	; 0x21b6
 1023740:	47b0      	blx	r6
					is_ok = EEPROM_writer(MCP_ST_73_START_ADDR, &temp_table_backup, table_size);
 1023742:	4622      	mov	r2, r4
 1023744:	490d      	ldr	r1, [pc, #52]	; (102377c <SM_APP_bBack_up_st_73+0xd4>)
 1023746:	f242 10b9 	movw	r0, #8633	; 0x21b9
 102374a:	47b0      	blx	r6
					if ( is_ok ) {
 102374c:	4605      	mov	r5, r0
 102374e:	2800      	cmp	r0, #0
 1023750:	d0b5      	beq.n	10236be <SM_APP_bBack_up_st_73+0x16>
 1023752:	a902      	add	r1, sp, #8
 1023754:	2345      	movs	r3, #69	; 0x45
 1023756:	f801 3d05 	strb.w	r3, [r1, #-5]!
	EEPROM_writer( table_state_addr, &state, 1 );
 102375a:	2201      	movs	r2, #1
 102375c:	f242 10b6 	movw	r0, #8630	; 0x21b6
 1023760:	47b0      	blx	r6
						EEPROM_writer(MCP_ST_73_NVM_CRC_ADDR, &calc_crc, 2);
 1023762:	2202      	movs	r2, #2
 1023764:	f10d 0106 	add.w	r1, sp, #6
 1023768:	f242 10b7 	movw	r0, #8631	; 0x21b7
 102376c:	47b0      	blx	r6
 102376e:	e7a7      	b.n	10236c0 <SM_APP_bBack_up_st_73+0x18>
 1023770:	01019571 	.word	0x01019571
 1023774:	0102005d 	.word	0x0102005d
 1023778:	01018915 	.word	0x01018915
 102377c:	20000ed0 	.word	0x20000ed0
 1023780:	01016b5d 	.word	0x01016b5d
 1023784:	01017509 	.word	0x01017509

01023788 <SM_APP_bRestore_st_73_from_backup>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bRestore_st_73_from_backup(uint16_t backup_area_id) {
 1023788:	b530      	push	{r4, r5, lr}
 102378a:	b083      	sub	sp, #12

	bool is_ok = false;
	uint16_t table_size;
	uint16_t backup_crc = 0, calc_crc = 1;
 102378c:	2200      	movs	r2, #0

	table_size = EVNT_APP_usSt_73_get_size();
 102378e:	4b26      	ldr	r3, [pc, #152]	; (1023828 <SM_APP_bRestore_st_73_from_backup+0xa0>)
	uint16_t backup_crc = 0, calc_crc = 1;
 1023790:	f8ad 2006 	strh.w	r2, [sp, #6]
bool SM_APP_bRestore_st_73_from_backup(uint16_t backup_area_id) {
 1023794:	4605      	mov	r5, r0
	table_size = EVNT_APP_usSt_73_get_size();
 1023796:	4798      	blx	r3

	if ( table_size > 0 ) {
 1023798:	b1e0      	cbz	r0, 10237d4 <SM_APP_bRestore_st_73_from_backup+0x4c>

		if ( sizeof(temp_table_backup) > table_size ) {
 102379a:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
 102379e:	4604      	mov	r4, r0
 10237a0:	d215      	bcs.n	10237ce <SM_APP_bRestore_st_73_from_backup+0x46>
			
			switch (backup_area_id) {
 10237a2:	b1f5      	cbz	r5, 10237e2 <SM_APP_bRestore_st_73_from_backup+0x5a>
 10237a4:	2d01      	cmp	r5, #1
 10237a6:	d10a      	bne.n	10237be <SM_APP_bRestore_st_73_from_backup+0x36>
	EEPROM_reader( table_state_addr, &state, 1 );
 10237a8:	462a      	mov	r2, r5
 10237aa:	f10d 0105 	add.w	r1, sp, #5
 10237ae:	f243 503e 	movw	r0, #13630	; 0x353e
 10237b2:	4d1e      	ldr	r5, [pc, #120]	; (102382c <SM_APP_bRestore_st_73_from_backup+0xa4>)
 10237b4:	47a8      	blx	r5
	return state;
 10237b6:	f89d 3005 	ldrb.w	r3, [sp, #5]
					}
					break;

				case MP_120_CCP_AREA:
				
					if ( SM_APP_ucGet_table_state(CCP_ST_73_PROG_STATE_ADDR) == C1219_TABLE_FULL ) {
 10237ba:	2b45      	cmp	r3, #69	; 0x45
 10237bc:	d028      	beq.n	1023810 <SM_APP_bRestore_st_73_from_backup+0x88>

				default:
					break;
			}

			calc_crc = CRC_crc16(&temp_table_backup[0], table_size);
 10237be:	4b1c      	ldr	r3, [pc, #112]	; (1023830 <SM_APP_bRestore_st_73_from_backup+0xa8>)
 10237c0:	481c      	ldr	r0, [pc, #112]	; (1023834 <SM_APP_bRestore_st_73_from_backup+0xac>)
 10237c2:	4621      	mov	r1, r4
 10237c4:	4798      	blx	r3
			is_ok = (calc_crc == backup_crc) ? EVNT_APP_bSt_73_execute_table_writing(&temp_table_backup[0]) : false;
 10237c6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 10237ca:	4283      	cmp	r3, r0
 10237cc:	d005      	beq.n	10237da <SM_APP_bRestore_st_73_from_backup+0x52>
	bool is_ok = false;
 10237ce:	2000      	movs	r0, #0
	else {
		is_ok = true;
	}

	return is_ok;
}
 10237d0:	b003      	add	sp, #12
 10237d2:	bd30      	pop	{r4, r5, pc}
		is_ok = true;
 10237d4:	2001      	movs	r0, #1
}
 10237d6:	b003      	add	sp, #12
 10237d8:	bd30      	pop	{r4, r5, pc}
			is_ok = (calc_crc == backup_crc) ? EVNT_APP_bSt_73_execute_table_writing(&temp_table_backup[0]) : false;
 10237da:	4b17      	ldr	r3, [pc, #92]	; (1023838 <SM_APP_bRestore_st_73_from_backup+0xb0>)
 10237dc:	4815      	ldr	r0, [pc, #84]	; (1023834 <SM_APP_bRestore_st_73_from_backup+0xac>)
 10237de:	4798      	blx	r3
 10237e0:	e7f6      	b.n	10237d0 <SM_APP_bRestore_st_73_from_backup+0x48>
	EEPROM_reader( table_state_addr, &state, 1 );
 10237e2:	2201      	movs	r2, #1
 10237e4:	f10d 0105 	add.w	r1, sp, #5
 10237e8:	f242 10b6 	movw	r0, #8630	; 0x21b6
 10237ec:	4d0f      	ldr	r5, [pc, #60]	; (102382c <SM_APP_bRestore_st_73_from_backup+0xa4>)
 10237ee:	47a8      	blx	r5
	return state;
 10237f0:	f89d 3005 	ldrb.w	r3, [sp, #5]
					if ( SM_APP_ucGet_table_state(MCP_ST_73_PROG_STATE_ADDR) == C1219_TABLE_FULL ) {
 10237f4:	2b45      	cmp	r3, #69	; 0x45
 10237f6:	d1e2      	bne.n	10237be <SM_APP_bRestore_st_73_from_backup+0x36>
						EEPROM_reader(MCP_ST_73_NVM_CRC_ADDR, &backup_crc, 2);
 10237f8:	f10d 0106 	add.w	r1, sp, #6
 10237fc:	2202      	movs	r2, #2
 10237fe:	f242 10b7 	movw	r0, #8631	; 0x21b7
 1023802:	47a8      	blx	r5
						EEPROM_reader(MCP_ST_73_START_ADDR, &temp_table_backup, table_size);
 1023804:	4622      	mov	r2, r4
 1023806:	490b      	ldr	r1, [pc, #44]	; (1023834 <SM_APP_bRestore_st_73_from_backup+0xac>)
 1023808:	f242 10b9 	movw	r0, #8633	; 0x21b9
 102380c:	47a8      	blx	r5
 102380e:	e7d6      	b.n	10237be <SM_APP_bRestore_st_73_from_backup+0x36>
						EEPROM_reader(CCP_ST_73_NVM_CRC_ADDR, &backup_crc, 2);
 1023810:	f10d 0106 	add.w	r1, sp, #6
 1023814:	2202      	movs	r2, #2
 1023816:	f243 503f 	movw	r0, #13631	; 0x353f
 102381a:	47a8      	blx	r5
						EEPROM_reader(CCP_ST_73_START_ADDR, &temp_table_backup, table_size);
 102381c:	4622      	mov	r2, r4
 102381e:	4905      	ldr	r1, [pc, #20]	; (1023834 <SM_APP_bRestore_st_73_from_backup+0xac>)
 1023820:	f243 5041 	movw	r0, #13633	; 0x3541
 1023824:	47a8      	blx	r5
 1023826:	e7ca      	b.n	10237be <SM_APP_bRestore_st_73_from_backup+0x36>
 1023828:	01019571 	.word	0x01019571
 102382c:	01017511 	.word	0x01017511
 1023830:	01016b5d 	.word	0x01016b5d
 1023834:	20000ed0 	.word	0x20000ed0
 1023838:	0101894d 	.word	0x0101894d

0102383c <SM_APP_bBack_up_st_75>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bBack_up_st_75(uint16_t backup_area_id) {
 102383c:	b5f0      	push	{r4, r5, r6, r7, lr}
	
	bool is_ok = false;
	uint16_t table_size;
	uint16_t calc_crc;
	
	table_size = EVNT_APP_usSt_75_get_size();
 102383e:	4b31      	ldr	r3, [pc, #196]	; (1023904 <SM_APP_bBack_up_st_75+0xc8>)
bool SM_APP_bBack_up_st_75(uint16_t backup_area_id) {
 1023840:	b083      	sub	sp, #12
 1023842:	4606      	mov	r6, r0
	table_size = EVNT_APP_usSt_75_get_size();
 1023844:	4798      	blx	r3

	if ( table_size > 0 ) {
 1023846:	2800      	cmp	r0, #0
 1023848:	d038      	beq.n	10238bc <SM_APP_bBack_up_st_75+0x80>

		if ( ( sizeof(temp_table_backup) > table_size ) && ( !SM_APP_vIs_st_75_corrupted_data() ) ) {
 102384a:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
 102384e:	4604      	mov	r4, r0
 1023850:	d303      	bcc.n	102385a <SM_APP_bBack_up_st_75+0x1e>
	bool is_ok = false;
 1023852:	2500      	movs	r5, #0
	else {
		is_ok = true;
	}

	return is_ok;
}
 1023854:	4628      	mov	r0, r5
 1023856:	b003      	add	sp, #12
 1023858:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ( ( sizeof(temp_table_backup) > table_size ) && ( !SM_APP_vIs_st_75_corrupted_data() ) ) {
 102385a:	4b2b      	ldr	r3, [pc, #172]	; (1023908 <SM_APP_bBack_up_st_75+0xcc>)
 102385c:	4798      	blx	r3
 102385e:	4605      	mov	r5, r0
 1023860:	2800      	cmp	r0, #0
 1023862:	d1f6      	bne.n	1023852 <SM_APP_bBack_up_st_75+0x16>
			EVNT_APP_bSt_75_execute_table_reading(&temp_table_backup[0]);
 1023864:	4b29      	ldr	r3, [pc, #164]	; (102390c <SM_APP_bBack_up_st_75+0xd0>)
 1023866:	482a      	ldr	r0, [pc, #168]	; (1023910 <SM_APP_bBack_up_st_75+0xd4>)
 1023868:	4798      	blx	r3
			calc_crc = CRC_crc16(&temp_table_backup[0], table_size);
 102386a:	4621      	mov	r1, r4
 102386c:	4828      	ldr	r0, [pc, #160]	; (1023910 <SM_APP_bBack_up_st_75+0xd4>)
 102386e:	4b29      	ldr	r3, [pc, #164]	; (1023914 <SM_APP_bBack_up_st_75+0xd8>)
 1023870:	4798      	blx	r3
 1023872:	f8ad 0006 	strh.w	r0, [sp, #6]
			switch (backup_area_id) {
 1023876:	b32e      	cbz	r6, 10238c4 <SM_APP_bBack_up_st_75+0x88>
 1023878:	2e01      	cmp	r6, #1
 102387a:	d1eb      	bne.n	1023854 <SM_APP_bBack_up_st_75+0x18>
 102387c:	a902      	add	r1, sp, #8
 102387e:	23ff      	movs	r3, #255	; 0xff
 1023880:	f801 3d04 	strb.w	r3, [r1, #-4]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1023884:	4632      	mov	r2, r6
 1023886:	4f24      	ldr	r7, [pc, #144]	; (1023918 <SM_APP_bBack_up_st_75+0xdc>)
 1023888:	f243 50c2 	movw	r0, #13762	; 0x35c2
 102388c:	47b8      	blx	r7
					is_ok = EEPROM_writer(CCP_ST_75_START_ADDR, &temp_table_backup, table_size);
 102388e:	4622      	mov	r2, r4
 1023890:	491f      	ldr	r1, [pc, #124]	; (1023910 <SM_APP_bBack_up_st_75+0xd4>)
 1023892:	f243 50c5 	movw	r0, #13765	; 0x35c5
 1023896:	47b8      	blx	r7
					if ( is_ok ) {
 1023898:	4605      	mov	r5, r0
 102389a:	2800      	cmp	r0, #0
 102389c:	d0d9      	beq.n	1023852 <SM_APP_bBack_up_st_75+0x16>
 102389e:	a902      	add	r1, sp, #8
 10238a0:	2345      	movs	r3, #69	; 0x45
 10238a2:	f801 3d03 	strb.w	r3, [r1, #-3]!
	EEPROM_writer( table_state_addr, &state, 1 );
 10238a6:	4632      	mov	r2, r6
 10238a8:	f243 50c2 	movw	r0, #13762	; 0x35c2
 10238ac:	47b8      	blx	r7
						EEPROM_writer(CCP_ST_75_NVM_CRC_ADDR, &calc_crc, 2);
 10238ae:	2202      	movs	r2, #2
 10238b0:	f10d 0106 	add.w	r1, sp, #6
 10238b4:	f243 50c3 	movw	r0, #13763	; 0x35c3
 10238b8:	47b8      	blx	r7
 10238ba:	e7cb      	b.n	1023854 <SM_APP_bBack_up_st_75+0x18>
		is_ok = true;
 10238bc:	2501      	movs	r5, #1
}
 10238be:	4628      	mov	r0, r5
 10238c0:	b003      	add	sp, #12
 10238c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 10238c4:	a902      	add	r1, sp, #8
 10238c6:	23ff      	movs	r3, #255	; 0xff
 10238c8:	f801 3d06 	strb.w	r3, [r1, #-6]!
	EEPROM_writer( table_state_addr, &state, 1 );
 10238cc:	2201      	movs	r2, #1
 10238ce:	4e12      	ldr	r6, [pc, #72]	; (1023918 <SM_APP_bBack_up_st_75+0xdc>)
 10238d0:	f242 203a 	movw	r0, #8762	; 0x223a
 10238d4:	47b0      	blx	r6
					is_ok = EEPROM_writer(MCP_ST_75_START_ADDR, &temp_table_backup, table_size);
 10238d6:	4622      	mov	r2, r4
 10238d8:	490d      	ldr	r1, [pc, #52]	; (1023910 <SM_APP_bBack_up_st_75+0xd4>)
 10238da:	f242 203d 	movw	r0, #8765	; 0x223d
 10238de:	47b0      	blx	r6
					if ( is_ok ) {
 10238e0:	4605      	mov	r5, r0
 10238e2:	2800      	cmp	r0, #0
 10238e4:	d0b5      	beq.n	1023852 <SM_APP_bBack_up_st_75+0x16>
 10238e6:	a902      	add	r1, sp, #8
 10238e8:	2345      	movs	r3, #69	; 0x45
 10238ea:	f801 3d05 	strb.w	r3, [r1, #-5]!
	EEPROM_writer( table_state_addr, &state, 1 );
 10238ee:	2201      	movs	r2, #1
 10238f0:	f242 203a 	movw	r0, #8762	; 0x223a
 10238f4:	47b0      	blx	r6
						EEPROM_writer(MCP_ST_75_NVM_CRC_ADDR, &calc_crc, 2);
 10238f6:	2202      	movs	r2, #2
 10238f8:	f10d 0106 	add.w	r1, sp, #6
 10238fc:	f242 203b 	movw	r0, #8763	; 0x223b
 1023900:	47b0      	blx	r6
 1023902:	e7a7      	b.n	1023854 <SM_APP_bBack_up_st_75+0x18>
 1023904:	01019531 	.word	0x01019531
 1023908:	01020159 	.word	0x01020159
 102390c:	010193a1 	.word	0x010193a1
 1023910:	20000ed0 	.word	0x20000ed0
 1023914:	01016b5d 	.word	0x01016b5d
 1023918:	01017509 	.word	0x01017509

0102391c <SM_APP_bRestore_st_75_from_backup>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bRestore_st_75_from_backup(uint16_t backup_area_id) {
 102391c:	b530      	push	{r4, r5, lr}
 102391e:	b083      	sub	sp, #12

	bool is_ok = false;
	uint16_t table_size;
	uint16_t backup_crc = 0, calc_crc = 1;
 1023920:	2200      	movs	r2, #0

	table_size = EVNT_APP_usSt_75_get_size();
 1023922:	4b26      	ldr	r3, [pc, #152]	; (10239bc <SM_APP_bRestore_st_75_from_backup+0xa0>)
	uint16_t backup_crc = 0, calc_crc = 1;
 1023924:	f8ad 2006 	strh.w	r2, [sp, #6]
bool SM_APP_bRestore_st_75_from_backup(uint16_t backup_area_id) {
 1023928:	4605      	mov	r5, r0
	table_size = EVNT_APP_usSt_75_get_size();
 102392a:	4798      	blx	r3

	if ( table_size > 0 ) {
 102392c:	b1e0      	cbz	r0, 1023968 <SM_APP_bRestore_st_75_from_backup+0x4c>

		if ( sizeof(temp_table_backup) > table_size ) {
 102392e:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
 1023932:	4604      	mov	r4, r0
 1023934:	d215      	bcs.n	1023962 <SM_APP_bRestore_st_75_from_backup+0x46>
		
			switch (backup_area_id) {
 1023936:	b1f5      	cbz	r5, 1023976 <SM_APP_bRestore_st_75_from_backup+0x5a>
 1023938:	2d01      	cmp	r5, #1
 102393a:	d10a      	bne.n	1023952 <SM_APP_bRestore_st_75_from_backup+0x36>
	EEPROM_reader( table_state_addr, &state, 1 );
 102393c:	462a      	mov	r2, r5
 102393e:	f10d 0105 	add.w	r1, sp, #5
 1023942:	f243 50c2 	movw	r0, #13762	; 0x35c2
 1023946:	4d1e      	ldr	r5, [pc, #120]	; (10239c0 <SM_APP_bRestore_st_75_from_backup+0xa4>)
 1023948:	47a8      	blx	r5
	return state;
 102394a:	f89d 3005 	ldrb.w	r3, [sp, #5]
					}
					break;

				case MP_120_CCP_AREA:
			
					if ( SM_APP_ucGet_table_state(CCP_ST_75_PROG_STATE_ADDR) == C1219_TABLE_FULL ) {
 102394e:	2b45      	cmp	r3, #69	; 0x45
 1023950:	d028      	beq.n	10239a4 <SM_APP_bRestore_st_75_from_backup+0x88>

				default:
					break;
			}

			calc_crc = CRC_crc16(&temp_table_backup[0], table_size);
 1023952:	4b1c      	ldr	r3, [pc, #112]	; (10239c4 <SM_APP_bRestore_st_75_from_backup+0xa8>)
 1023954:	481c      	ldr	r0, [pc, #112]	; (10239c8 <SM_APP_bRestore_st_75_from_backup+0xac>)
 1023956:	4621      	mov	r1, r4
 1023958:	4798      	blx	r3
			is_ok = (calc_crc == backup_crc) ? EVNT_APP_bSt_75_execute_table_writing(&temp_table_backup[0]) : false;
 102395a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 102395e:	4283      	cmp	r3, r0
 1023960:	d005      	beq.n	102396e <SM_APP_bRestore_st_75_from_backup+0x52>
	bool is_ok = false;
 1023962:	2000      	movs	r0, #0
	else {
		is_ok = true;
	}

	return is_ok;
}
 1023964:	b003      	add	sp, #12
 1023966:	bd30      	pop	{r4, r5, pc}
		is_ok = true;
 1023968:	2001      	movs	r0, #1
}
 102396a:	b003      	add	sp, #12
 102396c:	bd30      	pop	{r4, r5, pc}
			is_ok = (calc_crc == backup_crc) ? EVNT_APP_bSt_75_execute_table_writing(&temp_table_backup[0]) : false;
 102396e:	4b17      	ldr	r3, [pc, #92]	; (10239cc <SM_APP_bRestore_st_75_from_backup+0xb0>)
 1023970:	4815      	ldr	r0, [pc, #84]	; (10239c8 <SM_APP_bRestore_st_75_from_backup+0xac>)
 1023972:	4798      	blx	r3
 1023974:	e7f6      	b.n	1023964 <SM_APP_bRestore_st_75_from_backup+0x48>
	EEPROM_reader( table_state_addr, &state, 1 );
 1023976:	2201      	movs	r2, #1
 1023978:	f10d 0105 	add.w	r1, sp, #5
 102397c:	f242 203a 	movw	r0, #8762	; 0x223a
 1023980:	4d0f      	ldr	r5, [pc, #60]	; (10239c0 <SM_APP_bRestore_st_75_from_backup+0xa4>)
 1023982:	47a8      	blx	r5
	return state;
 1023984:	f89d 3005 	ldrb.w	r3, [sp, #5]
					if ( SM_APP_ucGet_table_state(MCP_ST_75_PROG_STATE_ADDR) == C1219_TABLE_FULL ) {
 1023988:	2b45      	cmp	r3, #69	; 0x45
 102398a:	d1e2      	bne.n	1023952 <SM_APP_bRestore_st_75_from_backup+0x36>
						EEPROM_reader(MCP_ST_75_NVM_CRC_ADDR, &backup_crc, 2);
 102398c:	f10d 0106 	add.w	r1, sp, #6
 1023990:	2202      	movs	r2, #2
 1023992:	f242 203b 	movw	r0, #8763	; 0x223b
 1023996:	47a8      	blx	r5
						EEPROM_reader(MCP_ST_75_START_ADDR, &temp_table_backup, table_size);
 1023998:	4622      	mov	r2, r4
 102399a:	490b      	ldr	r1, [pc, #44]	; (10239c8 <SM_APP_bRestore_st_75_from_backup+0xac>)
 102399c:	f242 203d 	movw	r0, #8765	; 0x223d
 10239a0:	47a8      	blx	r5
 10239a2:	e7d6      	b.n	1023952 <SM_APP_bRestore_st_75_from_backup+0x36>
						EEPROM_reader(CCP_ST_75_NVM_CRC_ADDR, &backup_crc, 2);
 10239a4:	f10d 0106 	add.w	r1, sp, #6
 10239a8:	2202      	movs	r2, #2
 10239aa:	f243 50c3 	movw	r0, #13763	; 0x35c3
 10239ae:	47a8      	blx	r5
						EEPROM_reader(CCP_ST_75_START_ADDR, &temp_table_backup, table_size);
 10239b0:	4622      	mov	r2, r4
 10239b2:	4905      	ldr	r1, [pc, #20]	; (10239c8 <SM_APP_bRestore_st_75_from_backup+0xac>)
 10239b4:	f243 50c5 	movw	r0, #13765	; 0x35c5
 10239b8:	47a8      	blx	r5
 10239ba:	e7ca      	b.n	1023952 <SM_APP_bRestore_st_75_from_backup+0x36>
 10239bc:	01019531 	.word	0x01019531
 10239c0:	01017511 	.word	0x01017511
 10239c4:	01016b5d 	.word	0x01016b5d
 10239c8:	20000ed0 	.word	0x20000ed0
 10239cc:	010193d9 	.word	0x010193d9

010239d0 <SM_APP_bBack_up_mt_1>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bBack_up_mt_1(uint16_t backup_area_id) {
 10239d0:	b570      	push	{r4, r5, r6, lr}

	if ( table_size > 0 ) {

		if ( sizeof(temp_table_backup) > table_size ) {
	
			SM_APP_bMt_1_execute_table_reading(&temp_table_backup[0]);
 10239d2:	4b2a      	ldr	r3, [pc, #168]	; (1023a7c <SM_APP_bBack_up_mt_1+0xac>)
bool SM_APP_bBack_up_mt_1(uint16_t backup_area_id) {
 10239d4:	b082      	sub	sp, #8
 10239d6:	4604      	mov	r4, r0
			SM_APP_bMt_1_execute_table_reading(&temp_table_backup[0]);
 10239d8:	4829      	ldr	r0, [pc, #164]	; (1023a80 <SM_APP_bBack_up_mt_1+0xb0>)
 10239da:	4798      	blx	r3
			calc_crc = CRC_crc16(&temp_table_backup[0], table_size);
 10239dc:	2131      	movs	r1, #49	; 0x31
 10239de:	4828      	ldr	r0, [pc, #160]	; (1023a80 <SM_APP_bBack_up_mt_1+0xb0>)
 10239e0:	4b28      	ldr	r3, [pc, #160]	; (1023a84 <SM_APP_bBack_up_mt_1+0xb4>)
 10239e2:	4798      	blx	r3
 10239e4:	f8ad 0006 	strh.w	r0, [sp, #6]

			switch (backup_area_id) {
 10239e8:	b33c      	cbz	r4, 1023a3a <SM_APP_bBack_up_mt_1+0x6a>
 10239ea:	2c01      	cmp	r4, #1
 10239ec:	d003      	beq.n	10239f6 <SM_APP_bBack_up_mt_1+0x26>
	bool is_ok = false;
 10239ee:	2500      	movs	r5, #0
	else {
		is_ok = true;
	}

	return is_ok;
}
 10239f0:	4628      	mov	r0, r5
 10239f2:	b002      	add	sp, #8
 10239f4:	bd70      	pop	{r4, r5, r6, pc}
 10239f6:	a902      	add	r1, sp, #8
 10239f8:	23ff      	movs	r3, #255	; 0xff
 10239fa:	f801 3d04 	strb.w	r3, [r1, #-4]!
	EEPROM_writer( table_state_addr, &state, 1 );
 10239fe:	4622      	mov	r2, r4
 1023a00:	4e21      	ldr	r6, [pc, #132]	; (1023a88 <SM_APP_bBack_up_mt_1+0xb8>)
 1023a02:	f243 6046 	movw	r0, #13894	; 0x3646
 1023a06:	47b0      	blx	r6
					is_ok = EEPROM_writer(CCP_MT_1_START_ADDR, &temp_table_backup, table_size);
 1023a08:	2231      	movs	r2, #49	; 0x31
 1023a0a:	491d      	ldr	r1, [pc, #116]	; (1023a80 <SM_APP_bBack_up_mt_1+0xb0>)
 1023a0c:	f243 6049 	movw	r0, #13897	; 0x3649
 1023a10:	47b0      	blx	r6
					if ( is_ok ) {
 1023a12:	4605      	mov	r5, r0
 1023a14:	2800      	cmp	r0, #0
 1023a16:	d0ea      	beq.n	10239ee <SM_APP_bBack_up_mt_1+0x1e>
 1023a18:	a902      	add	r1, sp, #8
 1023a1a:	2345      	movs	r3, #69	; 0x45
 1023a1c:	f801 3d03 	strb.w	r3, [r1, #-3]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1023a20:	4622      	mov	r2, r4
 1023a22:	f243 6046 	movw	r0, #13894	; 0x3646
 1023a26:	47b0      	blx	r6
						EEPROM_writer(CCP_MT_1_NVM_CRC_ADDR, &calc_crc, 2);
 1023a28:	2202      	movs	r2, #2
 1023a2a:	f10d 0106 	add.w	r1, sp, #6
 1023a2e:	f243 6047 	movw	r0, #13895	; 0x3647
 1023a32:	47b0      	blx	r6
}
 1023a34:	4628      	mov	r0, r5
 1023a36:	b002      	add	sp, #8
 1023a38:	bd70      	pop	{r4, r5, r6, pc}
 1023a3a:	a902      	add	r1, sp, #8
 1023a3c:	23ff      	movs	r3, #255	; 0xff
 1023a3e:	f801 3d06 	strb.w	r3, [r1, #-6]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1023a42:	2201      	movs	r2, #1
 1023a44:	4c10      	ldr	r4, [pc, #64]	; (1023a88 <SM_APP_bBack_up_mt_1+0xb8>)
 1023a46:	f242 20be 	movw	r0, #8894	; 0x22be
 1023a4a:	47a0      	blx	r4
					is_ok = EEPROM_writer(MCP_MT_1_START_ADDR, &temp_table_backup, table_size);
 1023a4c:	2231      	movs	r2, #49	; 0x31
 1023a4e:	490c      	ldr	r1, [pc, #48]	; (1023a80 <SM_APP_bBack_up_mt_1+0xb0>)
 1023a50:	f242 20c1 	movw	r0, #8897	; 0x22c1
 1023a54:	47a0      	blx	r4
					if ( is_ok ) {
 1023a56:	4605      	mov	r5, r0
 1023a58:	2800      	cmp	r0, #0
 1023a5a:	d0c8      	beq.n	10239ee <SM_APP_bBack_up_mt_1+0x1e>
 1023a5c:	a902      	add	r1, sp, #8
 1023a5e:	2345      	movs	r3, #69	; 0x45
 1023a60:	f801 3d05 	strb.w	r3, [r1, #-5]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1023a64:	2201      	movs	r2, #1
 1023a66:	f242 20be 	movw	r0, #8894	; 0x22be
 1023a6a:	47a0      	blx	r4
						EEPROM_writer(MCP_MT_1_NVM_CRC_ADDR, &calc_crc, 2);
 1023a6c:	2202      	movs	r2, #2
 1023a6e:	f10d 0106 	add.w	r1, sp, #6
 1023a72:	f242 20bf 	movw	r0, #8895	; 0x22bf
 1023a76:	47a0      	blx	r4
 1023a78:	e7ba      	b.n	10239f0 <SM_APP_bBack_up_mt_1+0x20>
 1023a7a:	bf00      	nop
 1023a7c:	010204d5 	.word	0x010204d5
 1023a80:	20000ed0 	.word	0x20000ed0
 1023a84:	01016b5d 	.word	0x01016b5d
 1023a88:	01017509 	.word	0x01017509

01023a8c <SM_APP_bRestore_mt_1_from_backup>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bRestore_mt_1_from_backup(uint16_t backup_area_id) {
 1023a8c:	b510      	push	{r4, lr}
 1023a8e:	b082      	sub	sp, #8

	bool is_ok = false;
	uint16_t table_size;
	uint16_t backup_crc = 0, calc_crc = 1;
 1023a90:	2300      	movs	r3, #0
 1023a92:	f8ad 3006 	strh.w	r3, [sp, #6]

	if ( table_size > 0 ) {

		if ( sizeof(temp_table_backup) > table_size ) {
		
			switch (backup_area_id) {
 1023a96:	b318      	cbz	r0, 1023ae0 <SM_APP_bRestore_mt_1_from_backup+0x54>
 1023a98:	2801      	cmp	r0, #1
 1023a9a:	d00a      	beq.n	1023ab2 <SM_APP_bRestore_mt_1_from_backup+0x26>

				default:
					break;
			}

			calc_crc = CRC_crc16(&temp_table_backup[0], table_size);
 1023a9c:	4b20      	ldr	r3, [pc, #128]	; (1023b20 <SM_APP_bRestore_mt_1_from_backup+0x94>)
 1023a9e:	4821      	ldr	r0, [pc, #132]	; (1023b24 <SM_APP_bRestore_mt_1_from_backup+0x98>)
 1023aa0:	2131      	movs	r1, #49	; 0x31
 1023aa2:	4798      	blx	r3
			is_ok = (calc_crc == backup_crc) ? SM_APP_bMt_1_execute_table_writing(&temp_table_backup[0]) : false;
 1023aa4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 1023aa8:	4283      	cmp	r3, r0
 1023aaa:	d030      	beq.n	1023b0e <SM_APP_bRestore_mt_1_from_backup+0x82>
 1023aac:	2000      	movs	r0, #0
	else {
		is_ok = true;
	}

	return is_ok;
}
 1023aae:	b002      	add	sp, #8
 1023ab0:	bd10      	pop	{r4, pc}
	EEPROM_reader( table_state_addr, &state, 1 );
 1023ab2:	4602      	mov	r2, r0
 1023ab4:	f10d 0105 	add.w	r1, sp, #5
 1023ab8:	f243 6046 	movw	r0, #13894	; 0x3646
 1023abc:	4c1a      	ldr	r4, [pc, #104]	; (1023b28 <SM_APP_bRestore_mt_1_from_backup+0x9c>)
 1023abe:	47a0      	blx	r4
	return state;
 1023ac0:	f89d 3005 	ldrb.w	r3, [sp, #5]
					if ( SM_APP_ucGet_table_state(CCP_MT_1_PROG_STATE_ADDR) == C1219_TABLE_FULL ) {
 1023ac4:	2b45      	cmp	r3, #69	; 0x45
 1023ac6:	d1e9      	bne.n	1023a9c <SM_APP_bRestore_mt_1_from_backup+0x10>
						EEPROM_reader(CCP_MT_1_NVM_CRC_ADDR, &backup_crc, 2);
 1023ac8:	f10d 0106 	add.w	r1, sp, #6
 1023acc:	2202      	movs	r2, #2
 1023ace:	f243 6047 	movw	r0, #13895	; 0x3647
 1023ad2:	47a0      	blx	r4
						EEPROM_reader(CCP_MT_1_START_ADDR, &temp_table_backup, table_size);
 1023ad4:	2231      	movs	r2, #49	; 0x31
 1023ad6:	4913      	ldr	r1, [pc, #76]	; (1023b24 <SM_APP_bRestore_mt_1_from_backup+0x98>)
 1023ad8:	f243 6049 	movw	r0, #13897	; 0x3649
 1023adc:	47a0      	blx	r4
 1023ade:	e7dd      	b.n	1023a9c <SM_APP_bRestore_mt_1_from_backup+0x10>
	EEPROM_reader( table_state_addr, &state, 1 );
 1023ae0:	2201      	movs	r2, #1
 1023ae2:	f10d 0105 	add.w	r1, sp, #5
 1023ae6:	f242 20be 	movw	r0, #8894	; 0x22be
 1023aea:	4c0f      	ldr	r4, [pc, #60]	; (1023b28 <SM_APP_bRestore_mt_1_from_backup+0x9c>)
 1023aec:	47a0      	blx	r4
	return state;
 1023aee:	f89d 3005 	ldrb.w	r3, [sp, #5]
					if ( SM_APP_ucGet_table_state(MCP_MT_1_PROG_STATE_ADDR) == C1219_TABLE_FULL ) {
 1023af2:	2b45      	cmp	r3, #69	; 0x45
 1023af4:	d1d2      	bne.n	1023a9c <SM_APP_bRestore_mt_1_from_backup+0x10>
						EEPROM_reader(MCP_MT_1_NVM_CRC_ADDR, &backup_crc, 2);
 1023af6:	f10d 0106 	add.w	r1, sp, #6
 1023afa:	2202      	movs	r2, #2
 1023afc:	f242 20bf 	movw	r0, #8895	; 0x22bf
 1023b00:	47a0      	blx	r4
						EEPROM_reader(MCP_MT_1_START_ADDR, &temp_table_backup, table_size);
 1023b02:	2231      	movs	r2, #49	; 0x31
 1023b04:	4907      	ldr	r1, [pc, #28]	; (1023b24 <SM_APP_bRestore_mt_1_from_backup+0x98>)
 1023b06:	f242 20c1 	movw	r0, #8897	; 0x22c1
 1023b0a:	47a0      	blx	r4
 1023b0c:	e7c6      	b.n	1023a9c <SM_APP_bRestore_mt_1_from_backup+0x10>
	EEPROM_writer(MT_1_START_ADDR, &table_buffer[0], MT_1_SIZE);
 1023b0e:	2231      	movs	r2, #49	; 0x31
 1023b10:	4904      	ldr	r1, [pc, #16]	; (1023b24 <SM_APP_bRestore_mt_1_from_backup+0x98>)
 1023b12:	4b06      	ldr	r3, [pc, #24]	; (1023b2c <SM_APP_bRestore_mt_1_from_backup+0xa0>)
 1023b14:	f640 7039 	movw	r0, #3897	; 0xf39
 1023b18:	4798      	blx	r3
			is_ok = (calc_crc == backup_crc) ? SM_APP_bMt_1_execute_table_writing(&temp_table_backup[0]) : false;
 1023b1a:	2001      	movs	r0, #1
}
 1023b1c:	b002      	add	sp, #8
 1023b1e:	bd10      	pop	{r4, pc}
 1023b20:	01016b5d 	.word	0x01016b5d
 1023b24:	20000ed0 	.word	0x20000ed0
 1023b28:	01017511 	.word	0x01017511
 1023b2c:	01017509 	.word	0x01017509

01023b30 <SM_APP_bBack_up_mt_3>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bBack_up_mt_3(uint16_t backup_area_id) {
 1023b30:	b570      	push	{r4, r5, r6, lr}
	delay_ms(10);
 1023b32:	4b2d      	ldr	r3, [pc, #180]	; (1023be8 <SM_APP_bBack_up_mt_3+0xb8>)
bool SM_APP_bBack_up_mt_3(uint16_t backup_area_id) {
 1023b34:	b082      	sub	sp, #8
 1023b36:	4604      	mov	r4, r0
	delay_ms(10);
 1023b38:	482c      	ldr	r0, [pc, #176]	; (1023bec <SM_APP_bBack_up_mt_3+0xbc>)
 1023b3a:	4798      	blx	r3
	EEPROM_reader( MT_3_START_ADDR, &table_buffer[0], MT_3_SIZE);
 1023b3c:	2296      	movs	r2, #150	; 0x96
 1023b3e:	492c      	ldr	r1, [pc, #176]	; (1023bf0 <SM_APP_bBack_up_mt_3+0xc0>)
 1023b40:	4b2c      	ldr	r3, [pc, #176]	; (1023bf4 <SM_APP_bBack_up_mt_3+0xc4>)
 1023b42:	f640 7085 	movw	r0, #3973	; 0xf85
 1023b46:	4798      	blx	r3
	if ( table_size > 0 ) {

		if ( sizeof(temp_table_backup) > table_size ) {
			
			SM_APP_bMt_3_execute_table_reading(&temp_table_backup[0]);
			calc_crc = CRC_crc16(&temp_table_backup[0], table_size);
 1023b48:	2196      	movs	r1, #150	; 0x96
 1023b4a:	4829      	ldr	r0, [pc, #164]	; (1023bf0 <SM_APP_bBack_up_mt_3+0xc0>)
 1023b4c:	4b2a      	ldr	r3, [pc, #168]	; (1023bf8 <SM_APP_bBack_up_mt_3+0xc8>)
 1023b4e:	4798      	blx	r3
 1023b50:	f8ad 0006 	strh.w	r0, [sp, #6]

			switch (backup_area_id) {
 1023b54:	b33c      	cbz	r4, 1023ba6 <SM_APP_bBack_up_mt_3+0x76>
 1023b56:	2c01      	cmp	r4, #1
 1023b58:	d003      	beq.n	1023b62 <SM_APP_bBack_up_mt_3+0x32>
	bool is_ok = false;
 1023b5a:	2500      	movs	r5, #0
	else {
		is_ok = true;
	}

	return is_ok;
}
 1023b5c:	4628      	mov	r0, r5
 1023b5e:	b002      	add	sp, #8
 1023b60:	bd70      	pop	{r4, r5, r6, pc}
 1023b62:	a902      	add	r1, sp, #8
 1023b64:	23ff      	movs	r3, #255	; 0xff
 1023b66:	f801 3d04 	strb.w	r3, [r1, #-4]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1023b6a:	4622      	mov	r2, r4
 1023b6c:	4e23      	ldr	r6, [pc, #140]	; (1023bfc <SM_APP_bBack_up_mt_3+0xcc>)
 1023b6e:	f243 6092 	movw	r0, #13970	; 0x3692
 1023b72:	47b0      	blx	r6
					is_ok = EEPROM_writer(CCP_MT_3_START_ADDR, &temp_table_backup, table_size);
 1023b74:	2296      	movs	r2, #150	; 0x96
 1023b76:	491e      	ldr	r1, [pc, #120]	; (1023bf0 <SM_APP_bBack_up_mt_3+0xc0>)
 1023b78:	f243 6095 	movw	r0, #13973	; 0x3695
 1023b7c:	47b0      	blx	r6
					if ( is_ok ) {
 1023b7e:	4605      	mov	r5, r0
 1023b80:	2800      	cmp	r0, #0
 1023b82:	d0ea      	beq.n	1023b5a <SM_APP_bBack_up_mt_3+0x2a>
 1023b84:	a902      	add	r1, sp, #8
 1023b86:	2345      	movs	r3, #69	; 0x45
 1023b88:	f801 3d03 	strb.w	r3, [r1, #-3]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1023b8c:	4622      	mov	r2, r4
 1023b8e:	f243 6092 	movw	r0, #13970	; 0x3692
 1023b92:	47b0      	blx	r6
						EEPROM_writer(CCP_MT_3_NVM_CRC_ADDR, &calc_crc, 2);
 1023b94:	2202      	movs	r2, #2
 1023b96:	f10d 0106 	add.w	r1, sp, #6
 1023b9a:	f243 6093 	movw	r0, #13971	; 0x3693
 1023b9e:	47b0      	blx	r6
}
 1023ba0:	4628      	mov	r0, r5
 1023ba2:	b002      	add	sp, #8
 1023ba4:	bd70      	pop	{r4, r5, r6, pc}
 1023ba6:	a902      	add	r1, sp, #8
 1023ba8:	23ff      	movs	r3, #255	; 0xff
 1023baa:	f801 3d06 	strb.w	r3, [r1, #-6]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1023bae:	2201      	movs	r2, #1
 1023bb0:	4c12      	ldr	r4, [pc, #72]	; (1023bfc <SM_APP_bBack_up_mt_3+0xcc>)
 1023bb2:	f242 300a 	movw	r0, #8970	; 0x230a
 1023bb6:	47a0      	blx	r4
					is_ok = EEPROM_writer(MCP_MT_3_START_ADDR, &temp_table_backup, table_size);
 1023bb8:	2296      	movs	r2, #150	; 0x96
 1023bba:	490d      	ldr	r1, [pc, #52]	; (1023bf0 <SM_APP_bBack_up_mt_3+0xc0>)
 1023bbc:	f242 300d 	movw	r0, #8973	; 0x230d
 1023bc0:	47a0      	blx	r4
					if ( is_ok ) {
 1023bc2:	4605      	mov	r5, r0
 1023bc4:	2800      	cmp	r0, #0
 1023bc6:	d0c8      	beq.n	1023b5a <SM_APP_bBack_up_mt_3+0x2a>
 1023bc8:	a902      	add	r1, sp, #8
 1023bca:	2345      	movs	r3, #69	; 0x45
 1023bcc:	f801 3d05 	strb.w	r3, [r1, #-5]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1023bd0:	2201      	movs	r2, #1
 1023bd2:	f242 300a 	movw	r0, #8970	; 0x230a
 1023bd6:	47a0      	blx	r4
						EEPROM_writer(MCP_MT_3_NVM_CRC_ADDR, &calc_crc, 2);
 1023bd8:	2202      	movs	r2, #2
 1023bda:	f10d 0106 	add.w	r1, sp, #6
 1023bde:	f242 300b 	movw	r0, #8971	; 0x230b
 1023be2:	47a0      	blx	r4
 1023be4:	e7ba      	b.n	1023b5c <SM_APP_bBack_up_mt_3+0x2c>
 1023be6:	bf00      	nop
 1023be8:	20000001 	.word	0x20000001
 1023bec:	00011db7 	.word	0x00011db7
 1023bf0:	20000ed0 	.word	0x20000ed0
 1023bf4:	01017511 	.word	0x01017511
 1023bf8:	01016b5d 	.word	0x01016b5d
 1023bfc:	01017509 	.word	0x01017509

01023c00 <SM_APP_bRestore_mt_3_from_backup>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bRestore_mt_3_from_backup(uint16_t backup_area_id) {
 1023c00:	b510      	push	{r4, lr}
 1023c02:	b082      	sub	sp, #8

	bool is_ok = false;
	uint16_t table_size;
	uint16_t backup_crc = 0, calc_crc = 1;
 1023c04:	2300      	movs	r3, #0
 1023c06:	f8ad 3006 	strh.w	r3, [sp, #6]

	if ( table_size > 0 ) {

		if ( sizeof(temp_table_backup) > table_size ) {
			
			switch (backup_area_id) {
 1023c0a:	b318      	cbz	r0, 1023c54 <SM_APP_bRestore_mt_3_from_backup+0x54>
 1023c0c:	2801      	cmp	r0, #1
 1023c0e:	d00a      	beq.n	1023c26 <SM_APP_bRestore_mt_3_from_backup+0x26>

				default:
					break;
			}

			calc_crc = CRC_crc16(&temp_table_backup[0], table_size);
 1023c10:	4b20      	ldr	r3, [pc, #128]	; (1023c94 <SM_APP_bRestore_mt_3_from_backup+0x94>)
 1023c12:	4821      	ldr	r0, [pc, #132]	; (1023c98 <SM_APP_bRestore_mt_3_from_backup+0x98>)
 1023c14:	2196      	movs	r1, #150	; 0x96
 1023c16:	4798      	blx	r3
			is_ok = (calc_crc == backup_crc) ? SM_APP_bMt_3_execute_table_writing(&temp_table_backup[0]) : false;
 1023c18:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 1023c1c:	4283      	cmp	r3, r0
 1023c1e:	d030      	beq.n	1023c82 <SM_APP_bRestore_mt_3_from_backup+0x82>
 1023c20:	2000      	movs	r0, #0
	else {
		is_ok = true;
	}

	return is_ok;
}
 1023c22:	b002      	add	sp, #8
 1023c24:	bd10      	pop	{r4, pc}
	EEPROM_reader( table_state_addr, &state, 1 );
 1023c26:	4602      	mov	r2, r0
 1023c28:	f10d 0105 	add.w	r1, sp, #5
 1023c2c:	f243 6092 	movw	r0, #13970	; 0x3692
 1023c30:	4c1a      	ldr	r4, [pc, #104]	; (1023c9c <SM_APP_bRestore_mt_3_from_backup+0x9c>)
 1023c32:	47a0      	blx	r4
	return state;
 1023c34:	f89d 3005 	ldrb.w	r3, [sp, #5]
					if ( SM_APP_ucGet_table_state(CCP_MT_3_PROG_STATE_ADDR) == C1219_TABLE_FULL ) {
 1023c38:	2b45      	cmp	r3, #69	; 0x45
 1023c3a:	d1e9      	bne.n	1023c10 <SM_APP_bRestore_mt_3_from_backup+0x10>
						EEPROM_reader(CCP_MT_3_NVM_CRC_ADDR, &backup_crc, 2);
 1023c3c:	f10d 0106 	add.w	r1, sp, #6
 1023c40:	2202      	movs	r2, #2
 1023c42:	f243 6093 	movw	r0, #13971	; 0x3693
 1023c46:	47a0      	blx	r4
						EEPROM_reader(CCP_MT_3_START_ADDR, &temp_table_backup, table_size);
 1023c48:	2296      	movs	r2, #150	; 0x96
 1023c4a:	4913      	ldr	r1, [pc, #76]	; (1023c98 <SM_APP_bRestore_mt_3_from_backup+0x98>)
 1023c4c:	f243 6095 	movw	r0, #13973	; 0x3695
 1023c50:	47a0      	blx	r4
 1023c52:	e7dd      	b.n	1023c10 <SM_APP_bRestore_mt_3_from_backup+0x10>
	EEPROM_reader( table_state_addr, &state, 1 );
 1023c54:	2201      	movs	r2, #1
 1023c56:	f10d 0105 	add.w	r1, sp, #5
 1023c5a:	f242 300a 	movw	r0, #8970	; 0x230a
 1023c5e:	4c0f      	ldr	r4, [pc, #60]	; (1023c9c <SM_APP_bRestore_mt_3_from_backup+0x9c>)
 1023c60:	47a0      	blx	r4
	return state;
 1023c62:	f89d 3005 	ldrb.w	r3, [sp, #5]
					if ( SM_APP_ucGet_table_state(MCP_MT_3_PROG_STATE_ADDR) == C1219_TABLE_FULL ) {
 1023c66:	2b45      	cmp	r3, #69	; 0x45
 1023c68:	d1d2      	bne.n	1023c10 <SM_APP_bRestore_mt_3_from_backup+0x10>
						EEPROM_reader(MCP_MT_3_NVM_CRC_ADDR, &backup_crc, 2);
 1023c6a:	f10d 0106 	add.w	r1, sp, #6
 1023c6e:	2202      	movs	r2, #2
 1023c70:	f242 300b 	movw	r0, #8971	; 0x230b
 1023c74:	47a0      	blx	r4
						EEPROM_reader(MCP_MT_3_START_ADDR, &temp_table_backup, table_size);
 1023c76:	2296      	movs	r2, #150	; 0x96
 1023c78:	4907      	ldr	r1, [pc, #28]	; (1023c98 <SM_APP_bRestore_mt_3_from_backup+0x98>)
 1023c7a:	f242 300d 	movw	r0, #8973	; 0x230d
 1023c7e:	47a0      	blx	r4
 1023c80:	e7c6      	b.n	1023c10 <SM_APP_bRestore_mt_3_from_backup+0x10>
	EEPROM_writer(MT_3_START_ADDR, &table_buffer[0], MT_3_SIZE);
 1023c82:	2296      	movs	r2, #150	; 0x96
 1023c84:	4904      	ldr	r1, [pc, #16]	; (1023c98 <SM_APP_bRestore_mt_3_from_backup+0x98>)
 1023c86:	4b06      	ldr	r3, [pc, #24]	; (1023ca0 <SM_APP_bRestore_mt_3_from_backup+0xa0>)
 1023c88:	f640 7085 	movw	r0, #3973	; 0xf85
 1023c8c:	4798      	blx	r3
			is_ok = (calc_crc == backup_crc) ? SM_APP_bMt_3_execute_table_writing(&temp_table_backup[0]) : false;
 1023c8e:	2001      	movs	r0, #1
}
 1023c90:	b002      	add	sp, #8
 1023c92:	bd10      	pop	{r4, pc}
 1023c94:	01016b5d 	.word	0x01016b5d
 1023c98:	20000ed0 	.word	0x20000ed0
 1023c9c:	01017511 	.word	0x01017511
 1023ca0:	01017509 	.word	0x01017509

01023ca4 <SM_APP_bBack_up_mt_23>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bBack_up_mt_23(uint16_t backup_area_id) {
 1023ca4:	b570      	push	{r4, r5, r6, lr}

	if ( table_size > 0 ) {

		if ( sizeof(temp_table_backup) > table_size ) {
			
			SM_APP_bMt_23_execute_table_reading(&temp_table_backup[0]);
 1023ca6:	4b2a      	ldr	r3, [pc, #168]	; (1023d50 <SM_APP_bBack_up_mt_23+0xac>)
bool SM_APP_bBack_up_mt_23(uint16_t backup_area_id) {
 1023ca8:	b082      	sub	sp, #8
 1023caa:	4604      	mov	r4, r0
			SM_APP_bMt_23_execute_table_reading(&temp_table_backup[0]);
 1023cac:	4829      	ldr	r0, [pc, #164]	; (1023d54 <SM_APP_bBack_up_mt_23+0xb0>)
 1023cae:	4798      	blx	r3
			calc_crc = CRC_crc16(&temp_table_backup[0], table_size);
 1023cb0:	2108      	movs	r1, #8
 1023cb2:	4828      	ldr	r0, [pc, #160]	; (1023d54 <SM_APP_bBack_up_mt_23+0xb0>)
 1023cb4:	4b28      	ldr	r3, [pc, #160]	; (1023d58 <SM_APP_bBack_up_mt_23+0xb4>)
 1023cb6:	4798      	blx	r3
 1023cb8:	f8ad 0006 	strh.w	r0, [sp, #6]

			switch (backup_area_id) {
 1023cbc:	b33c      	cbz	r4, 1023d0e <SM_APP_bBack_up_mt_23+0x6a>
 1023cbe:	2c01      	cmp	r4, #1
 1023cc0:	d003      	beq.n	1023cca <SM_APP_bBack_up_mt_23+0x26>
	bool is_ok = false;
 1023cc2:	2500      	movs	r5, #0
	else {
		is_ok = true;
	}

	return is_ok;
}
 1023cc4:	4628      	mov	r0, r5
 1023cc6:	b002      	add	sp, #8
 1023cc8:	bd70      	pop	{r4, r5, r6, pc}
 1023cca:	a902      	add	r1, sp, #8
 1023ccc:	23ff      	movs	r3, #255	; 0xff
 1023cce:	f801 3d04 	strb.w	r3, [r1, #-4]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1023cd2:	4622      	mov	r2, r4
 1023cd4:	4e21      	ldr	r6, [pc, #132]	; (1023d5c <SM_APP_bBack_up_mt_23+0xb8>)
 1023cd6:	f243 7076 	movw	r0, #14198	; 0x3776
 1023cda:	47b0      	blx	r6
					is_ok = EEPROM_writer(CCP_MT_23_START_ADDR, &temp_table_backup, table_size);
 1023cdc:	2208      	movs	r2, #8
 1023cde:	491d      	ldr	r1, [pc, #116]	; (1023d54 <SM_APP_bBack_up_mt_23+0xb0>)
 1023ce0:	f243 7079 	movw	r0, #14201	; 0x3779
 1023ce4:	47b0      	blx	r6
					if ( is_ok ) {
 1023ce6:	4605      	mov	r5, r0
 1023ce8:	2800      	cmp	r0, #0
 1023cea:	d0ea      	beq.n	1023cc2 <SM_APP_bBack_up_mt_23+0x1e>
 1023cec:	a902      	add	r1, sp, #8
 1023cee:	2345      	movs	r3, #69	; 0x45
 1023cf0:	f801 3d03 	strb.w	r3, [r1, #-3]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1023cf4:	4622      	mov	r2, r4
 1023cf6:	f243 7076 	movw	r0, #14198	; 0x3776
 1023cfa:	47b0      	blx	r6
						EEPROM_writer(CCP_MT_23_NVM_CRC_ADDR, &calc_crc, 2);
 1023cfc:	2202      	movs	r2, #2
 1023cfe:	f10d 0106 	add.w	r1, sp, #6
 1023d02:	f243 7077 	movw	r0, #14199	; 0x3777
 1023d06:	47b0      	blx	r6
}
 1023d08:	4628      	mov	r0, r5
 1023d0a:	b002      	add	sp, #8
 1023d0c:	bd70      	pop	{r4, r5, r6, pc}
 1023d0e:	a902      	add	r1, sp, #8
 1023d10:	23ff      	movs	r3, #255	; 0xff
 1023d12:	f801 3d06 	strb.w	r3, [r1, #-6]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1023d16:	2201      	movs	r2, #1
 1023d18:	4c10      	ldr	r4, [pc, #64]	; (1023d5c <SM_APP_bBack_up_mt_23+0xb8>)
 1023d1a:	f242 30ee 	movw	r0, #9198	; 0x23ee
 1023d1e:	47a0      	blx	r4
					is_ok = EEPROM_writer(MCP_MT_23_START_ADDR, &temp_table_backup, table_size);
 1023d20:	2208      	movs	r2, #8
 1023d22:	490c      	ldr	r1, [pc, #48]	; (1023d54 <SM_APP_bBack_up_mt_23+0xb0>)
 1023d24:	f242 30f1 	movw	r0, #9201	; 0x23f1
 1023d28:	47a0      	blx	r4
					if ( is_ok ) {
 1023d2a:	4605      	mov	r5, r0
 1023d2c:	2800      	cmp	r0, #0
 1023d2e:	d0c8      	beq.n	1023cc2 <SM_APP_bBack_up_mt_23+0x1e>
 1023d30:	a902      	add	r1, sp, #8
 1023d32:	2345      	movs	r3, #69	; 0x45
 1023d34:	f801 3d05 	strb.w	r3, [r1, #-5]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1023d38:	2201      	movs	r2, #1
 1023d3a:	f242 30ee 	movw	r0, #9198	; 0x23ee
 1023d3e:	47a0      	blx	r4
						EEPROM_writer(MCP_MT_23_NVM_CRC_ADDR, &calc_crc, 2);
 1023d40:	2202      	movs	r2, #2
 1023d42:	f10d 0106 	add.w	r1, sp, #6
 1023d46:	f242 30ef 	movw	r0, #9199	; 0x23ef
 1023d4a:	47a0      	blx	r4
 1023d4c:	e7ba      	b.n	1023cc4 <SM_APP_bBack_up_mt_23+0x20>
 1023d4e:	bf00      	nop
 1023d50:	010206d9 	.word	0x010206d9
 1023d54:	20000ed0 	.word	0x20000ed0
 1023d58:	01016b5d 	.word	0x01016b5d
 1023d5c:	01017509 	.word	0x01017509

01023d60 <SM_APP_bRestore_mt_23_from_backup>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bRestore_mt_23_from_backup(uint16_t backup_area_id) {
 1023d60:	b510      	push	{r4, lr}
 1023d62:	b082      	sub	sp, #8

	bool is_ok = false;
	uint16_t table_size;
	uint16_t backup_crc = 0, calc_crc = 1;
 1023d64:	2300      	movs	r3, #0
 1023d66:	f8ad 3006 	strh.w	r3, [sp, #6]

	if ( table_size > 0 ) {

		if ( sizeof(temp_table_backup) > table_size ) {
		
			switch (backup_area_id) {
 1023d6a:	b318      	cbz	r0, 1023db4 <SM_APP_bRestore_mt_23_from_backup+0x54>
 1023d6c:	2801      	cmp	r0, #1
 1023d6e:	d00a      	beq.n	1023d86 <SM_APP_bRestore_mt_23_from_backup+0x26>

				default:
					break;
			}

			calc_crc = CRC_crc16(&temp_table_backup[0], table_size);
 1023d70:	4b21      	ldr	r3, [pc, #132]	; (1023df8 <SM_APP_bRestore_mt_23_from_backup+0x98>)
 1023d72:	4822      	ldr	r0, [pc, #136]	; (1023dfc <SM_APP_bRestore_mt_23_from_backup+0x9c>)
 1023d74:	2108      	movs	r1, #8
 1023d76:	4798      	blx	r3
			is_ok = (calc_crc == backup_crc) ? SM_APP_bMt_23_execute_table_writing(&temp_table_backup[0]) : false;
 1023d78:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 1023d7c:	4283      	cmp	r3, r0
 1023d7e:	d030      	beq.n	1023de2 <SM_APP_bRestore_mt_23_from_backup+0x82>
 1023d80:	2000      	movs	r0, #0
	else {
		is_ok = true;
	}

	return is_ok;
}
 1023d82:	b002      	add	sp, #8
 1023d84:	bd10      	pop	{r4, pc}
	EEPROM_reader( table_state_addr, &state, 1 );
 1023d86:	4602      	mov	r2, r0
 1023d88:	f10d 0105 	add.w	r1, sp, #5
 1023d8c:	f243 7076 	movw	r0, #14198	; 0x3776
 1023d90:	4c1b      	ldr	r4, [pc, #108]	; (1023e00 <SM_APP_bRestore_mt_23_from_backup+0xa0>)
 1023d92:	47a0      	blx	r4
	return state;
 1023d94:	f89d 3005 	ldrb.w	r3, [sp, #5]
					if ( SM_APP_ucGet_table_state(CCP_MT_23_PROG_STATE_ADDR) == C1219_TABLE_FULL ) {
 1023d98:	2b45      	cmp	r3, #69	; 0x45
 1023d9a:	d1e9      	bne.n	1023d70 <SM_APP_bRestore_mt_23_from_backup+0x10>
						EEPROM_reader(CCP_MT_23_NVM_CRC_ADDR, &backup_crc, 2);
 1023d9c:	f10d 0106 	add.w	r1, sp, #6
 1023da0:	2202      	movs	r2, #2
 1023da2:	f243 7077 	movw	r0, #14199	; 0x3777
 1023da6:	47a0      	blx	r4
						EEPROM_reader(CCP_MT_23_START_ADDR, &temp_table_backup, table_size);
 1023da8:	2208      	movs	r2, #8
 1023daa:	4914      	ldr	r1, [pc, #80]	; (1023dfc <SM_APP_bRestore_mt_23_from_backup+0x9c>)
 1023dac:	f243 7079 	movw	r0, #14201	; 0x3779
 1023db0:	47a0      	blx	r4
 1023db2:	e7dd      	b.n	1023d70 <SM_APP_bRestore_mt_23_from_backup+0x10>
	EEPROM_reader( table_state_addr, &state, 1 );
 1023db4:	2201      	movs	r2, #1
 1023db6:	f10d 0105 	add.w	r1, sp, #5
 1023dba:	f242 30ee 	movw	r0, #9198	; 0x23ee
 1023dbe:	4c10      	ldr	r4, [pc, #64]	; (1023e00 <SM_APP_bRestore_mt_23_from_backup+0xa0>)
 1023dc0:	47a0      	blx	r4
	return state;
 1023dc2:	f89d 3005 	ldrb.w	r3, [sp, #5]
					if ( SM_APP_ucGet_table_state(MCP_MT_23_PROG_STATE_ADDR) == C1219_TABLE_FULL ) {
 1023dc6:	2b45      	cmp	r3, #69	; 0x45
 1023dc8:	d1d2      	bne.n	1023d70 <SM_APP_bRestore_mt_23_from_backup+0x10>
						EEPROM_reader(MCP_MT_23_NVM_CRC_ADDR, &backup_crc, 2);
 1023dca:	f10d 0106 	add.w	r1, sp, #6
 1023dce:	2202      	movs	r2, #2
 1023dd0:	f242 30ef 	movw	r0, #9199	; 0x23ef
 1023dd4:	47a0      	blx	r4
						EEPROM_reader(MCP_MT_23_START_ADDR, &temp_table_backup, table_size);
 1023dd6:	2208      	movs	r2, #8
 1023dd8:	4908      	ldr	r1, [pc, #32]	; (1023dfc <SM_APP_bRestore_mt_23_from_backup+0x9c>)
 1023dda:	f242 30f1 	movw	r0, #9201	; 0x23f1
 1023dde:	47a0      	blx	r4
 1023de0:	e7c6      	b.n	1023d70 <SM_APP_bRestore_mt_23_from_backup+0x10>
	EEPROM_writer(MT_23_START_ADDR, &table_buffer[0], MT_23_MAX_SIZE);
 1023de2:	2208      	movs	r2, #8
 1023de4:	4905      	ldr	r1, [pc, #20]	; (1023dfc <SM_APP_bRestore_mt_23_from_backup+0x9c>)
 1023de6:	4b07      	ldr	r3, [pc, #28]	; (1023e04 <SM_APP_bRestore_mt_23_from_backup+0xa4>)
 1023de8:	f241 0069 	movw	r0, #4201	; 0x1069
 1023dec:	4798      	blx	r3
	SM_APP_vMt_23_read_eeprom_values();
 1023dee:	4b06      	ldr	r3, [pc, #24]	; (1023e08 <SM_APP_bRestore_mt_23_from_backup+0xa8>)
 1023df0:	4798      	blx	r3
			is_ok = (calc_crc == backup_crc) ? SM_APP_bMt_23_execute_table_writing(&temp_table_backup[0]) : false;
 1023df2:	2001      	movs	r0, #1
}
 1023df4:	b002      	add	sp, #8
 1023df6:	bd10      	pop	{r4, pc}
 1023df8:	01016b5d 	.word	0x01016b5d
 1023dfc:	20000ed0 	.word	0x20000ed0
 1023e00:	01017511 	.word	0x01017511
 1023e04:	01017509 	.word	0x01017509
 1023e08:	010205e9 	.word	0x010205e9

01023e0c <SM_APP_bBack_up_mt_53>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bBack_up_mt_53(uint16_t backup_area_id) {
 1023e0c:	b570      	push	{r4, r5, r6, lr}
	delay_ms(10);
 1023e0e:	4b2d      	ldr	r3, [pc, #180]	; (1023ec4 <SM_APP_bBack_up_mt_53+0xb8>)
bool SM_APP_bBack_up_mt_53(uint16_t backup_area_id) {
 1023e10:	b082      	sub	sp, #8
 1023e12:	4604      	mov	r4, r0
	delay_ms(10);
 1023e14:	482c      	ldr	r0, [pc, #176]	; (1023ec8 <SM_APP_bBack_up_mt_53+0xbc>)
 1023e16:	4798      	blx	r3
	EEPROM_reader( MT_53_START_ADDR, &table_buffer[0], MT_53_SIZE);
 1023e18:	2248      	movs	r2, #72	; 0x48
 1023e1a:	492c      	ldr	r1, [pc, #176]	; (1023ecc <SM_APP_bBack_up_mt_53+0xc0>)
 1023e1c:	4b2c      	ldr	r3, [pc, #176]	; (1023ed0 <SM_APP_bBack_up_mt_53+0xc4>)
 1023e1e:	f241 0078 	movw	r0, #4216	; 0x1078
 1023e22:	4798      	blx	r3
	if ( table_size > 0 ) {

		if ( sizeof(temp_table_backup) > table_size ) {
			
			SM_APP_bMt_53_execute_table_reading(&temp_table_backup[0]);
			calc_crc = CRC_crc16(&temp_table_backup[0], table_size);
 1023e24:	2148      	movs	r1, #72	; 0x48
 1023e26:	4829      	ldr	r0, [pc, #164]	; (1023ecc <SM_APP_bBack_up_mt_53+0xc0>)
 1023e28:	4b2a      	ldr	r3, [pc, #168]	; (1023ed4 <SM_APP_bBack_up_mt_53+0xc8>)
 1023e2a:	4798      	blx	r3
 1023e2c:	f8ad 0006 	strh.w	r0, [sp, #6]

			switch (backup_area_id) {
 1023e30:	b33c      	cbz	r4, 1023e82 <SM_APP_bBack_up_mt_53+0x76>
 1023e32:	2c01      	cmp	r4, #1
 1023e34:	d003      	beq.n	1023e3e <SM_APP_bBack_up_mt_53+0x32>
	bool is_ok = false;
 1023e36:	2500      	movs	r5, #0
	else {
		is_ok = true;
	}

	return is_ok;
}
 1023e38:	4628      	mov	r0, r5
 1023e3a:	b002      	add	sp, #8
 1023e3c:	bd70      	pop	{r4, r5, r6, pc}
 1023e3e:	a902      	add	r1, sp, #8
 1023e40:	23ff      	movs	r3, #255	; 0xff
 1023e42:	f801 3d04 	strb.w	r3, [r1, #-4]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1023e46:	4622      	mov	r2, r4
 1023e48:	4e23      	ldr	r6, [pc, #140]	; (1023ed8 <SM_APP_bBack_up_mt_53+0xcc>)
 1023e4a:	f243 7085 	movw	r0, #14213	; 0x3785
 1023e4e:	47b0      	blx	r6
					is_ok = EEPROM_writer(CCP_MT_53_START_ADDR, &temp_table_backup, table_size);
 1023e50:	2248      	movs	r2, #72	; 0x48
 1023e52:	491e      	ldr	r1, [pc, #120]	; (1023ecc <SM_APP_bBack_up_mt_53+0xc0>)
 1023e54:	f243 7088 	movw	r0, #14216	; 0x3788
 1023e58:	47b0      	blx	r6
					if ( is_ok ) {
 1023e5a:	4605      	mov	r5, r0
 1023e5c:	2800      	cmp	r0, #0
 1023e5e:	d0ea      	beq.n	1023e36 <SM_APP_bBack_up_mt_53+0x2a>
 1023e60:	a902      	add	r1, sp, #8
 1023e62:	2345      	movs	r3, #69	; 0x45
 1023e64:	f801 3d03 	strb.w	r3, [r1, #-3]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1023e68:	4622      	mov	r2, r4
 1023e6a:	f243 7085 	movw	r0, #14213	; 0x3785
 1023e6e:	47b0      	blx	r6
						EEPROM_writer(CCP_MT_53_NVM_CRC_ADDR, &calc_crc, 2);
 1023e70:	2202      	movs	r2, #2
 1023e72:	f10d 0106 	add.w	r1, sp, #6
 1023e76:	f243 7086 	movw	r0, #14214	; 0x3786
 1023e7a:	47b0      	blx	r6
}
 1023e7c:	4628      	mov	r0, r5
 1023e7e:	b002      	add	sp, #8
 1023e80:	bd70      	pop	{r4, r5, r6, pc}
 1023e82:	a902      	add	r1, sp, #8
 1023e84:	23ff      	movs	r3, #255	; 0xff
 1023e86:	f801 3d06 	strb.w	r3, [r1, #-6]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1023e8a:	2201      	movs	r2, #1
 1023e8c:	4c12      	ldr	r4, [pc, #72]	; (1023ed8 <SM_APP_bBack_up_mt_53+0xcc>)
 1023e8e:	f242 30fd 	movw	r0, #9213	; 0x23fd
 1023e92:	47a0      	blx	r4
					is_ok = EEPROM_writer(MCP_MT_53_START_ADDR, &temp_table_backup, table_size);
 1023e94:	2248      	movs	r2, #72	; 0x48
 1023e96:	490d      	ldr	r1, [pc, #52]	; (1023ecc <SM_APP_bBack_up_mt_53+0xc0>)
 1023e98:	f44f 5010 	mov.w	r0, #9216	; 0x2400
 1023e9c:	47a0      	blx	r4
					if ( is_ok ) {
 1023e9e:	4605      	mov	r5, r0
 1023ea0:	2800      	cmp	r0, #0
 1023ea2:	d0c8      	beq.n	1023e36 <SM_APP_bBack_up_mt_53+0x2a>
 1023ea4:	a902      	add	r1, sp, #8
 1023ea6:	2345      	movs	r3, #69	; 0x45
 1023ea8:	f801 3d05 	strb.w	r3, [r1, #-5]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1023eac:	2201      	movs	r2, #1
 1023eae:	f242 30fd 	movw	r0, #9213	; 0x23fd
 1023eb2:	47a0      	blx	r4
						EEPROM_writer(MCP_MT_53_NVM_CRC_ADDR, &calc_crc, 2);
 1023eb4:	2202      	movs	r2, #2
 1023eb6:	f10d 0106 	add.w	r1, sp, #6
 1023eba:	f242 30fe 	movw	r0, #9214	; 0x23fe
 1023ebe:	47a0      	blx	r4
 1023ec0:	e7ba      	b.n	1023e38 <SM_APP_bBack_up_mt_53+0x2c>
 1023ec2:	bf00      	nop
 1023ec4:	20000001 	.word	0x20000001
 1023ec8:	00011db7 	.word	0x00011db7
 1023ecc:	20000ed0 	.word	0x20000ed0
 1023ed0:	01017511 	.word	0x01017511
 1023ed4:	01016b5d 	.word	0x01016b5d
 1023ed8:	01017509 	.word	0x01017509

01023edc <SM_APP_bRestore_mt_53_from_backup>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bRestore_mt_53_from_backup(uint16_t backup_area_id) {
 1023edc:	b510      	push	{r4, lr}
 1023ede:	b082      	sub	sp, #8

	bool is_ok = false;
	uint16_t table_size;
	uint16_t backup_crc = 0, calc_crc = 1;
 1023ee0:	2300      	movs	r3, #0
 1023ee2:	f8ad 3006 	strh.w	r3, [sp, #6]

	if ( table_size > 0 ) {

		if ( sizeof(temp_table_backup) > table_size ) {
		
			switch (backup_area_id) {
 1023ee6:	b318      	cbz	r0, 1023f30 <SM_APP_bRestore_mt_53_from_backup+0x54>
 1023ee8:	2801      	cmp	r0, #1
 1023eea:	d00a      	beq.n	1023f02 <SM_APP_bRestore_mt_53_from_backup+0x26>

				default:
					break;
			}

			calc_crc = CRC_crc16(&temp_table_backup[0], table_size);
 1023eec:	4b20      	ldr	r3, [pc, #128]	; (1023f70 <SM_APP_bRestore_mt_53_from_backup+0x94>)
 1023eee:	4821      	ldr	r0, [pc, #132]	; (1023f74 <SM_APP_bRestore_mt_53_from_backup+0x98>)
 1023ef0:	2148      	movs	r1, #72	; 0x48
 1023ef2:	4798      	blx	r3
			is_ok = (calc_crc == backup_crc) ? SM_APP_bMt_53_execute_table_writing(&temp_table_backup[0]) : false;
 1023ef4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 1023ef8:	4283      	cmp	r3, r0
 1023efa:	d030      	beq.n	1023f5e <SM_APP_bRestore_mt_53_from_backup+0x82>
 1023efc:	2000      	movs	r0, #0
	else {
		is_ok = true;
	}

	return is_ok;
}
 1023efe:	b002      	add	sp, #8
 1023f00:	bd10      	pop	{r4, pc}
	EEPROM_reader( table_state_addr, &state, 1 );
 1023f02:	4602      	mov	r2, r0
 1023f04:	f10d 0105 	add.w	r1, sp, #5
 1023f08:	f243 7085 	movw	r0, #14213	; 0x3785
 1023f0c:	4c1a      	ldr	r4, [pc, #104]	; (1023f78 <SM_APP_bRestore_mt_53_from_backup+0x9c>)
 1023f0e:	47a0      	blx	r4
	return state;
 1023f10:	f89d 3005 	ldrb.w	r3, [sp, #5]
					if ( SM_APP_ucGet_table_state(CCP_MT_53_PROG_STATE_ADDR) == C1219_TABLE_FULL ) {
 1023f14:	2b45      	cmp	r3, #69	; 0x45
 1023f16:	d1e9      	bne.n	1023eec <SM_APP_bRestore_mt_53_from_backup+0x10>
						EEPROM_reader(CCP_MT_53_NVM_CRC_ADDR, &backup_crc, 2);
 1023f18:	f10d 0106 	add.w	r1, sp, #6
 1023f1c:	2202      	movs	r2, #2
 1023f1e:	f243 7086 	movw	r0, #14214	; 0x3786
 1023f22:	47a0      	blx	r4
						EEPROM_reader(CCP_MT_53_START_ADDR, &temp_table_backup, table_size);
 1023f24:	2248      	movs	r2, #72	; 0x48
 1023f26:	4913      	ldr	r1, [pc, #76]	; (1023f74 <SM_APP_bRestore_mt_53_from_backup+0x98>)
 1023f28:	f243 7088 	movw	r0, #14216	; 0x3788
 1023f2c:	47a0      	blx	r4
 1023f2e:	e7dd      	b.n	1023eec <SM_APP_bRestore_mt_53_from_backup+0x10>
	EEPROM_reader( table_state_addr, &state, 1 );
 1023f30:	2201      	movs	r2, #1
 1023f32:	f10d 0105 	add.w	r1, sp, #5
 1023f36:	f242 30fd 	movw	r0, #9213	; 0x23fd
 1023f3a:	4c0f      	ldr	r4, [pc, #60]	; (1023f78 <SM_APP_bRestore_mt_53_from_backup+0x9c>)
 1023f3c:	47a0      	blx	r4
	return state;
 1023f3e:	f89d 3005 	ldrb.w	r3, [sp, #5]
					if ( SM_APP_ucGet_table_state(MCP_MT_53_PROG_STATE_ADDR) == C1219_TABLE_FULL ) {
 1023f42:	2b45      	cmp	r3, #69	; 0x45
 1023f44:	d1d2      	bne.n	1023eec <SM_APP_bRestore_mt_53_from_backup+0x10>
						EEPROM_reader(MCP_MT_53_NVM_CRC_ADDR, &backup_crc, 2);
 1023f46:	f10d 0106 	add.w	r1, sp, #6
 1023f4a:	2202      	movs	r2, #2
 1023f4c:	f242 30fe 	movw	r0, #9214	; 0x23fe
 1023f50:	47a0      	blx	r4
						EEPROM_reader(MCP_MT_53_START_ADDR, &temp_table_backup, table_size);
 1023f52:	2248      	movs	r2, #72	; 0x48
 1023f54:	4907      	ldr	r1, [pc, #28]	; (1023f74 <SM_APP_bRestore_mt_53_from_backup+0x98>)
 1023f56:	f44f 5010 	mov.w	r0, #9216	; 0x2400
 1023f5a:	47a0      	blx	r4
 1023f5c:	e7c6      	b.n	1023eec <SM_APP_bRestore_mt_53_from_backup+0x10>
	EEPROM_writer(MT_53_START_ADDR, &table_buffer[0], MT_53_SIZE);
 1023f5e:	2248      	movs	r2, #72	; 0x48
 1023f60:	4904      	ldr	r1, [pc, #16]	; (1023f74 <SM_APP_bRestore_mt_53_from_backup+0x98>)
 1023f62:	4b06      	ldr	r3, [pc, #24]	; (1023f7c <SM_APP_bRestore_mt_53_from_backup+0xa0>)
 1023f64:	f241 0078 	movw	r0, #4216	; 0x1078
 1023f68:	4798      	blx	r3
			is_ok = (calc_crc == backup_crc) ? SM_APP_bMt_53_execute_table_writing(&temp_table_backup[0]) : false;
 1023f6a:	2001      	movs	r0, #1
}
 1023f6c:	b002      	add	sp, #8
 1023f6e:	bd10      	pop	{r4, pc}
 1023f70:	01016b5d 	.word	0x01016b5d
 1023f74:	20000ed0 	.word	0x20000ed0
 1023f78:	01017511 	.word	0x01017511
 1023f7c:	01017509 	.word	0x01017509

01023f80 <SM_APP_bBack_up_mt_73>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bBack_up_mt_73(uint16_t backup_area_id) {
 1023f80:	b5f0      	push	{r4, r5, r6, r7, lr}
	
	bool is_ok = false;
	uint16_t table_size;
	uint16_t calc_crc;
	
	table_size = EVNT_APP_usMt_73_get_size();
 1023f82:	4b31      	ldr	r3, [pc, #196]	; (1024048 <SM_APP_bBack_up_mt_73+0xc8>)
bool SM_APP_bBack_up_mt_73(uint16_t backup_area_id) {
 1023f84:	b083      	sub	sp, #12
 1023f86:	4606      	mov	r6, r0
	table_size = EVNT_APP_usMt_73_get_size();
 1023f88:	4798      	blx	r3

	if ( table_size > 0 ) {
 1023f8a:	2800      	cmp	r0, #0
 1023f8c:	d038      	beq.n	1024000 <SM_APP_bBack_up_mt_73+0x80>

		if ( ( sizeof(temp_table_backup) > table_size ) && ( !SM_APP_vIs_mt_73_corrupted_data() ) ) {
 1023f8e:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
 1023f92:	4604      	mov	r4, r0
 1023f94:	d303      	bcc.n	1023f9e <SM_APP_bBack_up_mt_73+0x1e>
	bool is_ok = false;
 1023f96:	2500      	movs	r5, #0
	else {
		is_ok = true;
	}

	return is_ok;
}
 1023f98:	4628      	mov	r0, r5
 1023f9a:	b003      	add	sp, #12
 1023f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ( ( sizeof(temp_table_backup) > table_size ) && ( !SM_APP_vIs_mt_73_corrupted_data() ) ) {
 1023f9e:	4b2b      	ldr	r3, [pc, #172]	; (102404c <SM_APP_bBack_up_mt_73+0xcc>)
 1023fa0:	4798      	blx	r3
 1023fa2:	4605      	mov	r5, r0
 1023fa4:	2800      	cmp	r0, #0
 1023fa6:	d1f6      	bne.n	1023f96 <SM_APP_bBack_up_mt_73+0x16>
			EVNT_APP_bMt_73_execute_table_reading(&temp_table_backup[0]);
 1023fa8:	4b29      	ldr	r3, [pc, #164]	; (1024050 <SM_APP_bBack_up_mt_73+0xd0>)
 1023faa:	482a      	ldr	r0, [pc, #168]	; (1024054 <SM_APP_bBack_up_mt_73+0xd4>)
 1023fac:	4798      	blx	r3
			calc_crc = CRC_crc16(&temp_table_backup[0], table_size);
 1023fae:	4621      	mov	r1, r4
 1023fb0:	4828      	ldr	r0, [pc, #160]	; (1024054 <SM_APP_bBack_up_mt_73+0xd4>)
 1023fb2:	4b29      	ldr	r3, [pc, #164]	; (1024058 <SM_APP_bBack_up_mt_73+0xd8>)
 1023fb4:	4798      	blx	r3
 1023fb6:	f8ad 0006 	strh.w	r0, [sp, #6]
			switch (backup_area_id) {
 1023fba:	b32e      	cbz	r6, 1024008 <SM_APP_bBack_up_mt_73+0x88>
 1023fbc:	2e01      	cmp	r6, #1
 1023fbe:	d1eb      	bne.n	1023f98 <SM_APP_bBack_up_mt_73+0x18>
 1023fc0:	a902      	add	r1, sp, #8
 1023fc2:	23ff      	movs	r3, #255	; 0xff
 1023fc4:	f801 3d04 	strb.w	r3, [r1, #-4]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1023fc8:	4632      	mov	r2, r6
 1023fca:	4f24      	ldr	r7, [pc, #144]	; (102405c <SM_APP_bBack_up_mt_73+0xdc>)
 1023fcc:	f243 70f4 	movw	r0, #14324	; 0x37f4
 1023fd0:	47b8      	blx	r7
					is_ok = EEPROM_writer(CCP_MT_73_START_ADDR, &temp_table_backup, table_size);
 1023fd2:	4622      	mov	r2, r4
 1023fd4:	491f      	ldr	r1, [pc, #124]	; (1024054 <SM_APP_bBack_up_mt_73+0xd4>)
 1023fd6:	f243 70f7 	movw	r0, #14327	; 0x37f7
 1023fda:	47b8      	blx	r7
					if ( is_ok ) {
 1023fdc:	4605      	mov	r5, r0
 1023fde:	2800      	cmp	r0, #0
 1023fe0:	d0d9      	beq.n	1023f96 <SM_APP_bBack_up_mt_73+0x16>
 1023fe2:	a902      	add	r1, sp, #8
 1023fe4:	2345      	movs	r3, #69	; 0x45
 1023fe6:	f801 3d03 	strb.w	r3, [r1, #-3]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1023fea:	4632      	mov	r2, r6
 1023fec:	f243 70f4 	movw	r0, #14324	; 0x37f4
 1023ff0:	47b8      	blx	r7
						EEPROM_writer(CCP_MT_73_NVM_CRC_ADDR, &calc_crc, 2);
 1023ff2:	2202      	movs	r2, #2
 1023ff4:	f10d 0106 	add.w	r1, sp, #6
 1023ff8:	f243 70f5 	movw	r0, #14325	; 0x37f5
 1023ffc:	47b8      	blx	r7
 1023ffe:	e7cb      	b.n	1023f98 <SM_APP_bBack_up_mt_73+0x18>
		is_ok = true;
 1024000:	2501      	movs	r5, #1
}
 1024002:	4628      	mov	r0, r5
 1024004:	b003      	add	sp, #12
 1024006:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1024008:	a902      	add	r1, sp, #8
 102400a:	23ff      	movs	r3, #255	; 0xff
 102400c:	f801 3d06 	strb.w	r3, [r1, #-6]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1024010:	2201      	movs	r2, #1
 1024012:	4e12      	ldr	r6, [pc, #72]	; (102405c <SM_APP_bBack_up_mt_73+0xdc>)
 1024014:	f242 406c 	movw	r0, #9324	; 0x246c
 1024018:	47b0      	blx	r6
					is_ok = EEPROM_writer(MCP_MT_73_START_ADDR, &temp_table_backup, table_size);
 102401a:	4622      	mov	r2, r4
 102401c:	490d      	ldr	r1, [pc, #52]	; (1024054 <SM_APP_bBack_up_mt_73+0xd4>)
 102401e:	f242 406f 	movw	r0, #9327	; 0x246f
 1024022:	47b0      	blx	r6
					if ( is_ok ) {
 1024024:	4605      	mov	r5, r0
 1024026:	2800      	cmp	r0, #0
 1024028:	d0b5      	beq.n	1023f96 <SM_APP_bBack_up_mt_73+0x16>
 102402a:	a902      	add	r1, sp, #8
 102402c:	2345      	movs	r3, #69	; 0x45
 102402e:	f801 3d05 	strb.w	r3, [r1, #-5]!
	EEPROM_writer( table_state_addr, &state, 1 );
 1024032:	2201      	movs	r2, #1
 1024034:	f242 406c 	movw	r0, #9324	; 0x246c
 1024038:	47b0      	blx	r6
						EEPROM_writer(MCP_MT_73_NVM_CRC_ADDR, &calc_crc, 2);
 102403a:	2202      	movs	r2, #2
 102403c:	f10d 0106 	add.w	r1, sp, #6
 1024040:	f242 406d 	movw	r0, #9325	; 0x246d
 1024044:	47b0      	blx	r6
 1024046:	e7a7      	b.n	1023f98 <SM_APP_bBack_up_mt_73+0x18>
 1024048:	01018d95 	.word	0x01018d95
 102404c:	01020255 	.word	0x01020255
 1024050:	01018ca5 	.word	0x01018ca5
 1024054:	20000ed0 	.word	0x20000ed0
 1024058:	01016b5d 	.word	0x01016b5d
 102405c:	01017509 	.word	0x01017509

01024060 <SM_APP_bRestore_mt_73_from_backup>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SM_APP_bRestore_mt_73_from_backup(uint16_t backup_area_id) {
 1024060:	b530      	push	{r4, r5, lr}
 1024062:	b083      	sub	sp, #12

	bool is_ok = false;
	uint16_t table_size;
	uint16_t backup_crc = 0, calc_crc = 1;
 1024064:	2200      	movs	r2, #0

	table_size = EVNT_APP_usMt_73_get_size();
 1024066:	4b26      	ldr	r3, [pc, #152]	; (1024100 <SM_APP_bRestore_mt_73_from_backup+0xa0>)
	uint16_t backup_crc = 0, calc_crc = 1;
 1024068:	f8ad 2006 	strh.w	r2, [sp, #6]
bool SM_APP_bRestore_mt_73_from_backup(uint16_t backup_area_id) {
 102406c:	4605      	mov	r5, r0
	table_size = EVNT_APP_usMt_73_get_size();
 102406e:	4798      	blx	r3

	if ( table_size > 0 ) {
 1024070:	b1e0      	cbz	r0, 10240ac <SM_APP_bRestore_mt_73_from_backup+0x4c>

		if ( sizeof(temp_table_backup) > table_size ) {
 1024072:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
 1024076:	4604      	mov	r4, r0
 1024078:	d215      	bcs.n	10240a6 <SM_APP_bRestore_mt_73_from_backup+0x46>
			
			switch (backup_area_id) {
 102407a:	b1f5      	cbz	r5, 10240ba <SM_APP_bRestore_mt_73_from_backup+0x5a>
 102407c:	2d01      	cmp	r5, #1
 102407e:	d10a      	bne.n	1024096 <SM_APP_bRestore_mt_73_from_backup+0x36>
	EEPROM_reader( table_state_addr, &state, 1 );
 1024080:	462a      	mov	r2, r5
 1024082:	f10d 0105 	add.w	r1, sp, #5
 1024086:	f243 70f4 	movw	r0, #14324	; 0x37f4
 102408a:	4d1e      	ldr	r5, [pc, #120]	; (1024104 <SM_APP_bRestore_mt_73_from_backup+0xa4>)
 102408c:	47a8      	blx	r5
	return state;
 102408e:	f89d 3005 	ldrb.w	r3, [sp, #5]
					}
					break;

				case MP_120_CCP_AREA:
				
					if ( SM_APP_ucGet_table_state(CCP_MT_73_PROG_STATE_ADDR) == C1219_TABLE_FULL ) {
 1024092:	2b45      	cmp	r3, #69	; 0x45
 1024094:	d028      	beq.n	10240e8 <SM_APP_bRestore_mt_73_from_backup+0x88>

				default:
					break;
			}

			calc_crc = CRC_crc16(&temp_table_backup[0], table_size);
 1024096:	4b1c      	ldr	r3, [pc, #112]	; (1024108 <SM_APP_bRestore_mt_73_from_backup+0xa8>)
 1024098:	481c      	ldr	r0, [pc, #112]	; (102410c <SM_APP_bRestore_mt_73_from_backup+0xac>)
 102409a:	4621      	mov	r1, r4
 102409c:	4798      	blx	r3
			is_ok = (calc_crc == backup_crc) ? EVNT_APP_bMt_73_execute_table_writing(&temp_table_backup[0]) : false;
 102409e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 10240a2:	4283      	cmp	r3, r0
 10240a4:	d005      	beq.n	10240b2 <SM_APP_bRestore_mt_73_from_backup+0x52>
	bool is_ok = false;
 10240a6:	2000      	movs	r0, #0
	else {
		is_ok = true;
	}

	return is_ok;
}
 10240a8:	b003      	add	sp, #12
 10240aa:	bd30      	pop	{r4, r5, pc}
		is_ok = true;
 10240ac:	2001      	movs	r0, #1
}
 10240ae:	b003      	add	sp, #12
 10240b0:	bd30      	pop	{r4, r5, pc}
			is_ok = (calc_crc == backup_crc) ? EVNT_APP_bMt_73_execute_table_writing(&temp_table_backup[0]) : false;
 10240b2:	4b17      	ldr	r3, [pc, #92]	; (1024110 <SM_APP_bRestore_mt_73_from_backup+0xb0>)
 10240b4:	4815      	ldr	r0, [pc, #84]	; (102410c <SM_APP_bRestore_mt_73_from_backup+0xac>)
 10240b6:	4798      	blx	r3
 10240b8:	e7f6      	b.n	10240a8 <SM_APP_bRestore_mt_73_from_backup+0x48>
	EEPROM_reader( table_state_addr, &state, 1 );
 10240ba:	2201      	movs	r2, #1
 10240bc:	f10d 0105 	add.w	r1, sp, #5
 10240c0:	f242 406c 	movw	r0, #9324	; 0x246c
 10240c4:	4d0f      	ldr	r5, [pc, #60]	; (1024104 <SM_APP_bRestore_mt_73_from_backup+0xa4>)
 10240c6:	47a8      	blx	r5
	return state;
 10240c8:	f89d 3005 	ldrb.w	r3, [sp, #5]
					if ( SM_APP_ucGet_table_state(MCP_MT_73_PROG_STATE_ADDR) == C1219_TABLE_FULL ) {
 10240cc:	2b45      	cmp	r3, #69	; 0x45
 10240ce:	d1e2      	bne.n	1024096 <SM_APP_bRestore_mt_73_from_backup+0x36>
						EEPROM_reader(MCP_MT_73_NVM_CRC_ADDR, &backup_crc, 2);
 10240d0:	f10d 0106 	add.w	r1, sp, #6
 10240d4:	2202      	movs	r2, #2
 10240d6:	f242 406d 	movw	r0, #9325	; 0x246d
 10240da:	47a8      	blx	r5
						EEPROM_reader(MCP_MT_73_START_ADDR, &temp_table_backup, table_size);
 10240dc:	4622      	mov	r2, r4
 10240de:	490b      	ldr	r1, [pc, #44]	; (102410c <SM_APP_bRestore_mt_73_from_backup+0xac>)
 10240e0:	f242 406f 	movw	r0, #9327	; 0x246f
 10240e4:	47a8      	blx	r5
 10240e6:	e7d6      	b.n	1024096 <SM_APP_bRestore_mt_73_from_backup+0x36>
						EEPROM_reader(CCP_MT_73_NVM_CRC_ADDR, &backup_crc, 2);
 10240e8:	f10d 0106 	add.w	r1, sp, #6
 10240ec:	2202      	movs	r2, #2
 10240ee:	f243 70f5 	movw	r0, #14325	; 0x37f5
 10240f2:	47a8      	blx	r5
						EEPROM_reader(CCP_MT_73_START_ADDR, &temp_table_backup, table_size);
 10240f4:	4622      	mov	r2, r4
 10240f6:	4905      	ldr	r1, [pc, #20]	; (102410c <SM_APP_bRestore_mt_73_from_backup+0xac>)
 10240f8:	f243 70f7 	movw	r0, #14327	; 0x37f7
 10240fc:	47a8      	blx	r5
 10240fe:	e7ca      	b.n	1024096 <SM_APP_bRestore_mt_73_from_backup+0x36>
 1024100:	01018d95 	.word	0x01018d95
 1024104:	01017511 	.word	0x01017511
 1024108:	01016b5d 	.word	0x01016b5d
 102410c:	20000ed0 	.word	0x20000ed0
 1024110:	01018d11 	.word	0x01018d11

01024114 <OP_tx_abort>:
 * \param void
 * \retval void
 ******************************************************************************
 */
void OP_tx_abort(void)
{
 1024114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	op_c1218_dll.interrupt_context = true;
 1024116:	4c12      	ldr	r4, [pc, #72]	; (1024160 <OP_tx_abort+0x4c>)
	
	op_c1218_dll.ongoing_transmission = false;
	op_c1218_dll.uart->UART_IDR = UART_IDR_TXRDY;
	op_c1218_dll.uart->UART_IDR = UART_IDR_TXEMPTY;
	op_c1218_dll.uart = OP_UART;
 1024118:	4812      	ldr	r0, [pc, #72]	; (1024164 <OP_tx_abort+0x50>)
	op_c1218_dll.uart->UART_IDR = UART_IDR_TXRDY;
 102411a:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
	op_c1218_dll.tx_state = C1218_TX_IDLE;
	op_c1218_dll.tx_timer = OP_TX_TIMER;
	op_c1218_dll.tx_abort = OP_tx_abort;
	op_c1218_dll.tx_data = (uint8_t*)op_tx_data;
 102411e:	4912      	ldr	r1, [pc, #72]	; (1024168 <OP_tx_abort+0x54>)
	op_c1218_dll.tx_abort = OP_tx_abort;
 1024120:	4e12      	ldr	r6, [pc, #72]	; (102416c <OP_tx_abort+0x58>)
	TIMER_reset_ms_timer(op_c1218_dll.tx_timer);
 1024122:	4a13      	ldr	r2, [pc, #76]	; (1024170 <OP_tx_abort+0x5c>)
	op_c1218_dll.interrupt_context = true;
 1024124:	2701      	movs	r7, #1
 1024126:	f884 7209 	strb.w	r7, [r4, #521]	; 0x209
	op_c1218_dll.ongoing_transmission = false;
 102412a:	2500      	movs	r5, #0
	op_c1218_dll.uart->UART_IDR = UART_IDR_TXRDY;
 102412c:	2702      	movs	r7, #2
	op_c1218_dll.ongoing_transmission = false;
 102412e:	f884 5208 	strb.w	r5, [r4, #520]	; 0x208
	op_c1218_dll.uart->UART_IDR = UART_IDR_TXRDY;
 1024132:	60df      	str	r7, [r3, #12]
	op_c1218_dll.uart->UART_IDR = UART_IDR_TXEMPTY;
 1024134:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
 1024138:	f44f 7700 	mov.w	r7, #512	; 0x200
 102413c:	60df      	str	r7, [r3, #12]
	op_c1218_dll.tx_timer = OP_TX_TIMER;
 102413e:	2305      	movs	r3, #5
	op_c1218_dll.uart = OP_UART;
 1024140:	f8c4 0204 	str.w	r0, [r4, #516]	; 0x204
	op_c1218_dll.tx_state = C1218_TX_IDLE;
 1024144:	270b      	movs	r7, #11
	TIMER_reset_ms_timer(op_c1218_dll.tx_timer);
 1024146:	4618      	mov	r0, r3
	op_c1218_dll.tx_state = C1218_TX_IDLE;
 1024148:	f884 70b8 	strb.w	r7, [r4, #184]	; 0xb8
	op_c1218_dll.tx_abort = OP_tx_abort;
 102414c:	f8c4 61f8 	str.w	r6, [r4, #504]	; 0x1f8
	op_c1218_dll.tx_data = (uint8_t*)op_tx_data;
 1024150:	f8c4 10bc 	str.w	r1, [r4, #188]	; 0xbc
	op_c1218_dll.tx_timer = OP_TX_TIMER;
 1024154:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
	TIMER_reset_ms_timer(op_c1218_dll.tx_timer);
 1024158:	4790      	blx	r2
	
	op_c1218_dll.interrupt_context = false;
 102415a:	f884 5209 	strb.w	r5, [r4, #521]	; 0x209
 102415e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 1024160:	20016c8c 	.word	0x20016c8c
 1024164:	48004000 	.word	0x48004000
 1024168:	20002ab0 	.word	0x20002ab0
 102416c:	01024115 	.word	0x01024115
 1024170:	0102bb09 	.word	0x0102bb09

01024174 <OP_rx_abort>:
{
 1024174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	op_c1218_dll.interrupt_context = true;
 1024176:	4c0c      	ldr	r4, [pc, #48]	; (10241a8 <OP_rx_abort+0x34>)
	op_c1218_dll.uart = OP_UART;
 1024178:	4b0c      	ldr	r3, [pc, #48]	; (10241ac <OP_rx_abort+0x38>)
 102417a:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
	op_c1218_dll.rx_timer = OP_RX_TIMER;
 102417e:	2304      	movs	r3, #4
	op_c1218_dll.ongoing_transmission = false;
 1024180:	2500      	movs	r5, #0
	op_c1218_dll.rx_data = (uint8_t*)op_rx_data;
 1024182:	490b      	ldr	r1, [pc, #44]	; (10241b0 <OP_rx_abort+0x3c>)
	op_c1218_dll.rx_abort = OP_rx_abort;
 1024184:	4e0b      	ldr	r6, [pc, #44]	; (10241b4 <OP_rx_abort+0x40>)
	TIMER_reset_ms_timer(op_c1218_dll.rx_timer);
 1024186:	4a0c      	ldr	r2, [pc, #48]	; (10241b8 <OP_rx_abort+0x44>)
	op_c1218_dll.rx_abort = OP_rx_abort;
 1024188:	f8c4 60b0 	str.w	r6, [r4, #176]	; 0xb0
	op_c1218_dll.interrupt_context = true;
 102418c:	2701      	movs	r7, #1
	TIMER_reset_ms_timer(op_c1218_dll.rx_timer);
 102418e:	4618      	mov	r0, r3
	op_c1218_dll.interrupt_context = true;
 1024190:	f884 7209 	strb.w	r7, [r4, #521]	; 0x209
	op_c1218_dll.rx_data = (uint8_t*)op_rx_data;
 1024194:	60a1      	str	r1, [r4, #8]
	op_c1218_dll.ongoing_transmission = false;
 1024196:	f884 5208 	strb.w	r5, [r4, #520]	; 0x208
	op_c1218_dll.rx_state = C1218_RX_IDLE;
 102419a:	7125      	strb	r5, [r4, #4]
	op_c1218_dll.rx_timer = OP_RX_TIMER;
 102419c:	7163      	strb	r3, [r4, #5]
	TIMER_reset_ms_timer(op_c1218_dll.rx_timer);
 102419e:	4790      	blx	r2
	op_c1218_dll.interrupt_context = false;
 10241a0:	f884 5209 	strb.w	r5, [r4, #521]	; 0x209
 10241a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 10241a6:	bf00      	nop
 10241a8:	20016c8c 	.word	0x20016c8c
 10241ac:	48004000 	.word	0x48004000
 10241b0:	2000112c 	.word	0x2000112c
 10241b4:	01024175 	.word	0x01024175
 10241b8:	0102bb09 	.word	0x0102bb09

010241bc <OP_reset_logon_session>:
{
 10241bc:	b538      	push	{r3, r4, r5, lr}
	op_c1218_apl.communication_state = BASE_STATE;
 10241be:	4d0c      	ldr	r5, [pc, #48]	; (10241f0 <OP_reset_logon_session+0x34>)
	OP_rx_abort();
 10241c0:	4b0c      	ldr	r3, [pc, #48]	; (10241f4 <OP_reset_logon_session+0x38>)
	op_c1218_apl.communication_state = BASE_STATE;
 10241c2:	2400      	movs	r4, #0
 10241c4:	702c      	strb	r4, [r5, #0]
	OP_rx_abort();
 10241c6:	4798      	blx	r3
	OP_tx_abort();
 10241c8:	4b0b      	ldr	r3, [pc, #44]	; (10241f8 <OP_reset_logon_session+0x3c>)
 10241ca:	4798      	blx	r3
	op_c1218_dll.tx_nbr_retries = 0;
 10241cc:	4b0b      	ldr	r3, [pc, #44]	; (10241fc <OP_reset_logon_session+0x40>)
	TIMER_reset_ms_timer(OP_LOGON_TIMER);
 10241ce:	4a0c      	ldr	r2, [pc, #48]	; (1024200 <OP_reset_logon_session+0x44>)
	op_c1218_dll.tx_nbr_retries = 0;
 10241d0:	f883 4201 	strb.w	r4, [r3, #513]	; 0x201
	TIMER_reset_ms_timer(OP_LOGON_TIMER);
 10241d4:	2006      	movs	r0, #6
	op_c1218_dll.wait_for_ack = false;
 10241d6:	f883 4200 	strb.w	r4, [r3, #512]	; 0x200
	TIMER_reset_ms_timer(OP_LOGON_TIMER);
 10241da:	4790      	blx	r2
	memset(&op_c1218_apl, 0, sizeof(C1218_APL_TYPE));
 10241dc:	4b09      	ldr	r3, [pc, #36]	; (1024204 <OP_reset_logon_session+0x48>)
 10241de:	4621      	mov	r1, r4
 10241e0:	4628      	mov	r0, r5
 10241e2:	2224      	movs	r2, #36	; 0x24
 10241e4:	4798      	blx	r3
	op_c1218_apl.logon_session_expired = true;
 10241e6:	2301      	movs	r3, #1
 10241e8:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
 10241ec:	bd38      	pop	{r3, r4, r5, pc}
 10241ee:	bf00      	nop
 10241f0:	20016ec8 	.word	0x20016ec8
 10241f4:	01024175 	.word	0x01024175
 10241f8:	01024115 	.word	0x01024115
 10241fc:	20016c8c 	.word	0x20016c8c
 1024200:	0102bb09 	.word	0x0102bb09
 1024204:	01030b71 	.word	0x01030b71

01024208 <OP_terminate_service>:
{
 1024208:	b570      	push	{r4, r5, r6, lr}
	if ( op_c1218_apl.communication_state != BASE_STATE ) {
 102420a:	4c15      	ldr	r4, [pc, #84]	; (1024260 <OP_terminate_service+0x58>)
	C1218_send_ok(&op_c1218_dll);
 102420c:	4b15      	ldr	r3, [pc, #84]	; (1024264 <OP_terminate_service+0x5c>)
 102420e:	4816      	ldr	r0, [pc, #88]	; (1024268 <OP_terminate_service+0x60>)
{
 1024210:	b082      	sub	sp, #8
	C1218_send_ok(&op_c1218_dll);
 1024212:	4798      	blx	r3
	if ( op_c1218_apl.communication_state != BASE_STATE ) {
 1024214:	7823      	ldrb	r3, [r4, #0]
 1024216:	b98b      	cbnz	r3, 102423c <OP_terminate_service+0x34>
	if ( op_security.incorrect_password > 0 ) {
 1024218:	4d14      	ldr	r5, [pc, #80]	; (102426c <OP_terminate_service+0x64>)
 102421a:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
 102421c:	b153      	cbz	r3, 1024234 <OP_terminate_service+0x2c>
		EVNT_APP_vRegister_event(INCORRECT_PASSWORD_OP, 0, false, op_c1218_apl.user_id, rtc.utc_timestamp);
 102421e:	4a14      	ldr	r2, [pc, #80]	; (1024270 <OP_terminate_service+0x68>)
 1024220:	8863      	ldrh	r3, [r4, #2]
 1024222:	6852      	ldr	r2, [r2, #4]
 1024224:	9200      	str	r2, [sp, #0]
 1024226:	2200      	movs	r2, #0
 1024228:	4611      	mov	r1, r2
 102422a:	2026      	movs	r0, #38	; 0x26
 102422c:	4e11      	ldr	r6, [pc, #68]	; (1024274 <OP_terminate_service+0x6c>)
 102422e:	47b0      	blx	r6
		op_security.incorrect_password = 0;
 1024230:	2300      	movs	r3, #0
 1024232:	85eb      	strh	r3, [r5, #46]	; 0x2e
	op_c1218_apl.communication_state = BASE_STATE;
 1024234:	2300      	movs	r3, #0
 1024236:	7023      	strb	r3, [r4, #0]
}
 1024238:	b002      	add	sp, #8
 102423a:	bd70      	pop	{r4, r5, r6, pc}
		EVNT_APP_vRegister_event(COMMUNICATION_TERMINATED_NORMALLY, 0, true, op_c1218_apl.user_id, rtc.utc_timestamp);
 102423c:	4e0c      	ldr	r6, [pc, #48]	; (1024270 <OP_terminate_service+0x68>)
 102423e:	8863      	ldrh	r3, [r4, #2]
 1024240:	6872      	ldr	r2, [r6, #4]
 1024242:	9200      	str	r2, [sp, #0]
 1024244:	2100      	movs	r1, #0
 1024246:	2201      	movs	r2, #1
 1024248:	200c      	movs	r0, #12
 102424a:	4d0a      	ldr	r5, [pc, #40]	; (1024274 <OP_terminate_service+0x6c>)
 102424c:	47a8      	blx	r5
		EVNT_APP_vRegister_event(COMMUNICATION_TERMINATED_NORMALLY_OP, 0, false, op_c1218_apl.user_id, rtc.utc_timestamp);					
 102424e:	6872      	ldr	r2, [r6, #4]
 1024250:	9200      	str	r2, [sp, #0]
 1024252:	2200      	movs	r2, #0
 1024254:	8863      	ldrh	r3, [r4, #2]
 1024256:	4611      	mov	r1, r2
 1024258:	2018      	movs	r0, #24
 102425a:	47a8      	blx	r5
 102425c:	e7dc      	b.n	1024218 <OP_terminate_service+0x10>
 102425e:	bf00      	nop
 1024260:	20016ec8 	.word	0x20016ec8
 1024264:	01016445 	.word	0x01016445
 1024268:	20016c8c 	.word	0x20016c8c
 102426c:	20016e98 	.word	0x20016e98
 1024270:	20017160 	.word	0x20017160
 1024274:	01019961 	.word	0x01019961

01024278 <OP_tx_retry>:
 * \param void
 * \retval void
 ******************************************************************************
 */
void OP_tx_retry(void)
{
 1024278:	b510      	push	{r4, lr}
	if ( op_c1218_dll.tx_nbr_retries < 3)
 102427a:	4c09      	ldr	r4, [pc, #36]	; (10242a0 <OP_tx_retry+0x28>)
 102427c:	f894 3201 	ldrb.w	r3, [r4, #513]	; 0x201
 1024280:	2b02      	cmp	r3, #2
 1024282:	d903      	bls.n	102428c <OP_tx_retry+0x14>
		C1218_resend_packet(&op_c1218_dll);
		op_c1218_dll.tx_nbr_retries++;
	}
	else
	{
		OP_reset_logon_session();
 1024284:	4b07      	ldr	r3, [pc, #28]	; (10242a4 <OP_tx_retry+0x2c>)
	}
}
 1024286:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		OP_reset_logon_session();
 102428a:	4718      	bx	r3
		C1218_resend_packet(&op_c1218_dll);
 102428c:	4b06      	ldr	r3, [pc, #24]	; (10242a8 <OP_tx_retry+0x30>)
 102428e:	4620      	mov	r0, r4
 1024290:	4798      	blx	r3
		op_c1218_dll.tx_nbr_retries++;
 1024292:	f894 3201 	ldrb.w	r3, [r4, #513]	; 0x201
 1024296:	3301      	adds	r3, #1
 1024298:	f884 3201 	strb.w	r3, [r4, #513]	; 0x201
 102429c:	bd10      	pop	{r4, pc}
 102429e:	bf00      	nop
 10242a0:	20016c8c 	.word	0x20016c8c
 10242a4:	010241bd 	.word	0x010241bd
 10242a8:	01016391 	.word	0x01016391

010242ac <OP_io_configure>:
{
 10242ac:	b5f0      	push	{r4, r5, r6, r7, lr}
		base->PIO_PUDR = mask;
 10242ae:	4b26      	ldr	r3, [pc, #152]	; (1024348 <OP_io_configure+0x9c>)
	uart_init( OP_UART, &uart_console_settings );
 10242b0:	4d26      	ldr	r5, [pc, #152]	; (102434c <OP_io_configure+0xa0>)
	uart_console_settings.ul_mck = sysclk_get_cpu_hz();				// MCK for UART
 10242b2:	4f27      	ldr	r7, [pc, #156]	; (1024350 <OP_io_configure+0xa4>)
	pmc_enable_periph_clk( OP_ID );
 10242b4:	4e27      	ldr	r6, [pc, #156]	; (1024354 <OP_io_configure+0xa8>)
 10242b6:	2401      	movs	r4, #1
 10242b8:	661c      	str	r4, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
 10242ba:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
 10242be:	655c      	str	r4, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
 10242c0:	625c      	str	r4, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
 10242c2:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
 10242c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 10242c8:	f022 0201 	bic.w	r2, r2, #1
 10242cc:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
 10242ce:	6f59      	ldr	r1, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
 10242d0:	2202      	movs	r2, #2
		base->PIO_ABCDSR[1] &= ~mask;
 10242d2:	f021 0101 	bic.w	r1, r1, #1
 10242d6:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
 10242d8:	605c      	str	r4, [r3, #4]
		base->PIO_PUDR = mask;
 10242da:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
 10242dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
 10242e0:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
 10242e2:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
 10242e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
 10242e8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 10242ea:	f021 0102 	bic.w	r1, r1, #2
 10242ee:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
 10242f0:	6f59      	ldr	r1, [r3, #116]	; 0x74
{
 10242f2:	b085      	sub	sp, #20
 10242f4:	f021 0102 	bic.w	r1, r1, #2
 10242f8:	6759      	str	r1, [r3, #116]	; 0x74
	pmc_enable_periph_clk( OP_ID );
 10242fa:	2026      	movs	r0, #38	; 0x26
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
 10242fc:	605a      	str	r2, [r3, #4]
	uart_console_settings.ul_baudrate = OP_BAUDRATE;				// Expected baud rate.
 10242fe:	f44f 5116 	mov.w	r1, #9600	; 0x2580
	uart_console_settings.ul_chmode = OP_MR_CHMODE_NORMAL;			// Configure channel mode (Normal, Automatic, Local_loopback or Remote_loopback)
 1024302:	2200      	movs	r2, #0
	uart_console_settings.ul_mode = OP_MR_PAR_NO;					// Initialize value for UART mode register
 1024304:	f44f 6300 	mov.w	r3, #2048	; 0x800
	uart_console_settings.ul_chmode = OP_MR_CHMODE_NORMAL;			// Configure channel mode (Normal, Automatic, Local_loopback or Remote_loopback)
 1024308:	9203      	str	r2, [sp, #12]
	uart_console_settings.ul_baudrate = OP_BAUDRATE;				// Expected baud rate.
 102430a:	9101      	str	r1, [sp, #4]
	uart_console_settings.ul_mode = OP_MR_PAR_NO;					// Initialize value for UART mode register
 102430c:	9302      	str	r3, [sp, #8]
	uart_console_settings.ul_mck = sysclk_get_cpu_hz();				// MCK for UART
 102430e:	9700      	str	r7, [sp, #0]
	pmc_enable_periph_clk( OP_ID );
 1024310:	47b0      	blx	r6
	uart_init( OP_UART, &uart_console_settings );
 1024312:	4669      	mov	r1, sp
 1024314:	4628      	mov	r0, r5
 1024316:	4b10      	ldr	r3, [pc, #64]	; (1024358 <OP_io_configure+0xac>)
 1024318:	4798      	blx	r3
	g_p_uart_pdc1 = uart_get_pdc_base( OP_UART );
 102431a:	4628      	mov	r0, r5
 102431c:	4b0f      	ldr	r3, [pc, #60]	; (102435c <OP_io_configure+0xb0>)
 102431e:	4798      	blx	r3
	pdc_enable_transfer( g_p_uart_pdc1, PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN );
 1024320:	f240 1101 	movw	r1, #257	; 0x101
 1024324:	4b0e      	ldr	r3, [pc, #56]	; (1024360 <OP_io_configure+0xb4>)
 1024326:	4798      	blx	r3
	uart_enable_interrupt( OP_UART, UART_IER_RXRDY );	
 1024328:	4621      	mov	r1, r4
 102432a:	4628      	mov	r0, r5
 102432c:	4b0d      	ldr	r3, [pc, #52]	; (1024364 <OP_io_configure+0xb8>)
 102432e:	4798      	blx	r3
	uart_enable(OP_UART);
 1024330:	4628      	mov	r0, r5
 1024332:	4b0d      	ldr	r3, [pc, #52]	; (1024368 <OP_io_configure+0xbc>)
 1024334:	4798      	blx	r3
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 1024336:	4b0d      	ldr	r3, [pc, #52]	; (102436c <OP_io_configure+0xc0>)
 1024338:	21a0      	movs	r1, #160	; 0xa0
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 102433a:	2240      	movs	r2, #64	; 0x40
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 102433c:	f883 1326 	strb.w	r1, [r3, #806]	; 0x326
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 1024340:	605a      	str	r2, [r3, #4]
}
 1024342:	b005      	add	sp, #20
 1024344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1024346:	bf00      	nop
 1024348:	4800c000 	.word	0x4800c000
 102434c:	48004000 	.word	0x48004000
 1024350:	061a8000 	.word	0x061a8000
 1024354:	0102d841 	.word	0x0102d841
 1024358:	010160cd 	.word	0x010160cd
 102435c:	01016119 	.word	0x01016119
 1024360:	0102d609 	.word	0x0102d609
 1024364:	01016111 	.word	0x01016111
 1024368:	01016109 	.word	0x01016109
 102436c:	e000e100 	.word	0xe000e100

01024370 <OP_initialize>:
{ 
 1024370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	op_c1218_dll.io_configure = (void_fptr)OP_io_configure;
 1024374:	4c31      	ldr	r4, [pc, #196]	; (102443c <OP_initialize+0xcc>)
	OP_io_configure();
 1024376:	4d32      	ldr	r5, [pc, #200]	; (1024440 <OP_initialize+0xd0>)
	memset(&op_c1218_apl, 0, sizeof(C1218_APL_TYPE));
 1024378:	4e32      	ldr	r6, [pc, #200]	; (1024444 <OP_initialize+0xd4>)
	op_c1218_dll.rx_data = (uint8_t*)op_rx_data;
 102437a:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 1024470 <OP_initialize+0x100>
	op_c1218_dll.tx_data = (uint8_t*)op_tx_data;
 102437e:	4f32      	ldr	r7, [pc, #200]	; (1024448 <OP_initialize+0xd8>)
	OP_io_configure();
 1024380:	47a8      	blx	r5
	TIMER_reset_ms_timer(OP_LOGON_TIMER);
 1024382:	2006      	movs	r0, #6
 1024384:	4b31      	ldr	r3, [pc, #196]	; (102444c <OP_initialize+0xdc>)
	op_c1218_dll.io_configure = (void_fptr)OP_io_configure;
 1024386:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
	TIMER_reset_ms_timer(OP_LOGON_TIMER);
 102438a:	4798      	blx	r3
	op_logon_timeout = C1218_LOGON_TIMEOUT;
 102438c:	4b30      	ldr	r3, [pc, #192]	; (1024450 <OP_initialize+0xe0>)
 102438e:	4a31      	ldr	r2, [pc, #196]	; (1024454 <OP_initialize+0xe4>)
 1024390:	601a      	str	r2, [r3, #0]
	memset(&op_c1218_apl, 0, sizeof(C1218_APL_TYPE));
 1024392:	2100      	movs	r1, #0
 1024394:	2224      	movs	r2, #36	; 0x24
 1024396:	4830      	ldr	r0, [pc, #192]	; (1024458 <OP_initialize+0xe8>)
	op_c1218_dll.rx_state = C1218_RX_IDLE;
 1024398:	460d      	mov	r5, r1
	memset(op_c1218_dll.rx_buffer, 0, (unsigned int)sizeof(op_c1218_dll.rx_buffer));
 102439a:	f04f 0996 	mov.w	r9, #150	; 0x96
	memset(&op_c1218_apl, 0, sizeof(C1218_APL_TYPE));
 102439e:	47b0      	blx	r6
	op_c1218_dll.rx_timer = OP_RX_TIMER;
 10243a0:	2204      	movs	r2, #4
	op_c1218_dll.rx_abort = (void_fptr)OP_rx_abort;
 10243a2:	4b2e      	ldr	r3, [pc, #184]	; (102445c <OP_initialize+0xec>)
	op_c1218_dll.rx_timer = OP_RX_TIMER;
 10243a4:	7162      	strb	r2, [r4, #5]
	memset(op_c1218_dll.rx_buffer, 0, (unsigned int)sizeof(op_c1218_dll.rx_buffer));
 10243a6:	4629      	mov	r1, r5
 10243a8:	464a      	mov	r2, r9
	memset(op_rx_data, 0, (unsigned int)sizeof(op_rx_data));
 10243aa:	f641 1884 	movw	r8, #6532	; 0x1984
	memset(op_c1218_dll.rx_buffer, 0, (unsigned int)sizeof(op_c1218_dll.rx_buffer));
 10243ae:	f104 0014 	add.w	r0, r4, #20
	op_c1218_dll.rx_abort = (void_fptr)OP_rx_abort;
 10243b2:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	op_c1218_dll.rx_state = C1218_RX_IDLE;
 10243b6:	7125      	strb	r5, [r4, #4]
	op_c1218_dll.rx_error = 0;
 10243b8:	71a5      	strb	r5, [r4, #6]
	op_c1218_dll.rx_eop = false;
 10243ba:	71e5      	strb	r5, [r4, #7]
	op_c1218_dll.rx_data_length = 0;
 10243bc:	81a5      	strh	r5, [r4, #12]
	op_c1218_dll.rx_data_bytes = 0;
 10243be:	73a5      	strb	r5, [r4, #14]
	op_c1218_dll.rx_data_bytes_remaining = 0;
 10243c0:	8225      	strh	r5, [r4, #16]
	op_c1218_dll.rx_data = (uint8_t*)op_rx_data;
 10243c2:	f8c4 a008 	str.w	sl, [r4, #8]
	memset(op_c1218_dll.rx_buffer, 0, (unsigned int)sizeof(op_c1218_dll.rx_buffer));
 10243c6:	47b0      	blx	r6
	memset(op_rx_data, 0, (unsigned int)sizeof(op_rx_data));
 10243c8:	4629      	mov	r1, r5
 10243ca:	4642      	mov	r2, r8
 10243cc:	4650      	mov	r0, sl
	op_c1218_dll.rx_buffer_bytes = 0;
 10243ce:	f8a4 50aa 	strh.w	r5, [r4, #170]	; 0xaa
	memset(op_rx_data, 0, (unsigned int)sizeof(op_rx_data));
 10243d2:	47b0      	blx	r6
	op_c1218_dll.tx_state = C1218_TX_IDLE;
 10243d4:	200b      	movs	r0, #11
	op_c1218_dll.tx_timer = OP_TX_TIMER;
 10243d6:	2305      	movs	r3, #5
	op_c1218_dll.tx_abort = (void_fptr)OP_tx_abort;
 10243d8:	4921      	ldr	r1, [pc, #132]	; (1024460 <OP_initialize+0xf0>)
	op_c1218_dll.tx_state = C1218_TX_IDLE;
 10243da:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
	op_c1218_dll.tx_retry = (void_fptr)OP_tx_retry;
 10243de:	4821      	ldr	r0, [pc, #132]	; (1024464 <OP_initialize+0xf4>)
	op_c1218_dll.tx_timer = OP_TX_TIMER;
 10243e0:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
	memset(op_c1218_dll.tx_buffer, 0, (unsigned int)sizeof(op_c1218_dll.tx_buffer));
 10243e4:	464a      	mov	r2, r9
	op_c1218_dll.response_timeout_timer = OP_RESPONSE_TIMEOUT_TIMER;
 10243e6:	2307      	movs	r3, #7
	op_c1218_dll.tx_abort = (void_fptr)OP_tx_abort;
 10243e8:	f8c4 11f8 	str.w	r1, [r4, #504]	; 0x1f8
	op_c1218_dll.tx_retry = (void_fptr)OP_tx_retry;
 10243ec:	f8c4 01fc 	str.w	r0, [r4, #508]	; 0x1fc
	memset(op_c1218_dll.tx_buffer, 0, (unsigned int)sizeof(op_c1218_dll.tx_buffer));
 10243f0:	4629      	mov	r1, r5
 10243f2:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
	op_c1218_dll.response_timeout_timer = OP_RESPONSE_TIMEOUT_TIMER;
 10243f6:	f884 3202 	strb.w	r3, [r4, #514]	; 0x202
	op_c1218_dll.tx_nbr_retries = 0;
 10243fa:	f884 5201 	strb.w	r5, [r4, #513]	; 0x201
	op_c1218_dll.tx_error = 0;
 10243fe:	f884 50ba 	strb.w	r5, [r4, #186]	; 0xba
	op_c1218_dll.tx_eop = false;
 1024402:	f884 50bb 	strb.w	r5, [r4, #187]	; 0xbb
	op_c1218_dll.tx_data_length = 0;
 1024406:	f8a4 50c0 	strh.w	r5, [r4, #192]	; 0xc0
	op_c1218_dll.tx_data_bytes = 0;
 102440a:	f884 50c2 	strb.w	r5, [r4, #194]	; 0xc2
	op_c1218_dll.tx_data_bytes_remaining = 0;
 102440e:	f8a4 50c4 	strh.w	r5, [r4, #196]	; 0xc4
	op_c1218_dll.tx_data = (uint8_t*)op_tx_data;
 1024412:	f8c4 70bc 	str.w	r7, [r4, #188]	; 0xbc
	memset(op_c1218_dll.tx_buffer, 0, (unsigned int)sizeof(op_c1218_dll.tx_buffer));
 1024416:	47b0      	blx	r6
	memset(op_tx_data, 0, (unsigned int)sizeof(op_tx_data));
 1024418:	4642      	mov	r2, r8
 102441a:	4638      	mov	r0, r7
 102441c:	4629      	mov	r1, r5
	op_c1218_dll.tx_buffer_bytes = 0;
 102441e:	f8a4 515e 	strh.w	r5, [r4, #350]	; 0x15e
	memset(op_tx_data, 0, (unsigned int)sizeof(op_tx_data));
 1024422:	47b0      	blx	r6
	op_security.incorrect_password = 0;
 1024424:	4b10      	ldr	r3, [pc, #64]	; (1024468 <OP_initialize+0xf8>)
	op_c1218_dll.uart = OP_UART;
 1024426:	4a11      	ldr	r2, [pc, #68]	; (102446c <OP_initialize+0xfc>)
	op_c1218_dll.ongoing_transmission = false;
 1024428:	f884 5208 	strb.w	r5, [r4, #520]	; 0x208
	op_c1218_dll.interrupt_context = false;
 102442c:	f884 5209 	strb.w	r5, [r4, #521]	; 0x209
	op_c1218_dll.uart = OP_UART;
 1024430:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204
	op_security.incorrect_password = 0;
 1024434:	85dd      	strh	r5, [r3, #46]	; 0x2e
 1024436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 102443a:	bf00      	nop
 102443c:	20016c8c 	.word	0x20016c8c
 1024440:	010242ad 	.word	0x010242ad
 1024444:	01030b71 	.word	0x01030b71
 1024448:	20002ab0 	.word	0x20002ab0
 102444c:	0102bb09 	.word	0x0102bb09
 1024450:	20001128 	.word	0x20001128
 1024454:	00015f90 	.word	0x00015f90
 1024458:	20016ec8 	.word	0x20016ec8
 102445c:	01024175 	.word	0x01024175
 1024460:	01024115 	.word	0x01024115
 1024464:	01024279 	.word	0x01024279
 1024468:	20016e98 	.word	0x20016e98
 102446c:	48004000 	.word	0x48004000
 1024470:	2000112c 	.word	0x2000112c

01024474 <OP_io_reset>:
	 if (op_c1218_dll.ongoing_transmission == false)
 1024474:	4b03      	ldr	r3, [pc, #12]	; (1024484 <OP_io_reset+0x10>)
 1024476:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 102447a:	b103      	cbz	r3, 102447e <OP_io_reset+0xa>
 102447c:	4770      	bx	lr
		 OP_io_configure();
 102447e:	4b02      	ldr	r3, [pc, #8]	; (1024488 <OP_io_reset+0x14>)
 1024480:	4718      	bx	r3
 1024482:	bf00      	nop
 1024484:	20016c8c 	.word	0x20016c8c
 1024488:	010242ad 	.word	0x010242ad

0102448c <OP_create_task>:
{
 102448c:	b510      	push	{r4, lr}
 102448e:	b084      	sub	sp, #16
	xTaskCreate( OP_rtos_task, (const signed char * const ) "OP_Task", OP_STACK_SIZE, NULL, OP_TASK_PRIO, &op_c1218_dll.os_task_id );
 1024490:	2300      	movs	r3, #0
 1024492:	4907      	ldr	r1, [pc, #28]	; (10244b0 <OP_create_task+0x24>)
 1024494:	9101      	str	r1, [sp, #4]
 1024496:	2202      	movs	r2, #2
 1024498:	9200      	str	r2, [sp, #0]
 102449a:	9303      	str	r3, [sp, #12]
 102449c:	9302      	str	r3, [sp, #8]
 102449e:	f240 5214 	movw	r2, #1300	; 0x514
 10244a2:	4904      	ldr	r1, [pc, #16]	; (10244b4 <OP_create_task+0x28>)
 10244a4:	4c04      	ldr	r4, [pc, #16]	; (10244b8 <OP_create_task+0x2c>)
 10244a6:	4805      	ldr	r0, [pc, #20]	; (10244bc <OP_create_task+0x30>)
 10244a8:	47a0      	blx	r4
}
 10244aa:	b004      	add	sp, #16
 10244ac:	bd10      	pop	{r4, pc}
 10244ae:	bf00      	nop
 10244b0:	20016c8c 	.word	0x20016c8c
 10244b4:	01031640 	.word	0x01031640
 10244b8:	0102e7f9 	.word	0x0102e7f9
 10244bc:	01024859 	.word	0x01024859

010244c0 <OP_task>:
{
 10244c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if ( op_c1218_dll.rx_eop == true )
 10244c4:	4ca0      	ldr	r4, [pc, #640]	; (1024748 <OP_task+0x288>)
 10244c6:	79e3      	ldrb	r3, [r4, #7]
{
 10244c8:	b08d      	sub	sp, #52	; 0x34
	if ( op_c1218_dll.rx_eop == true )
 10244ca:	2b00      	cmp	r3, #0
 10244cc:	d051      	beq.n	1024572 <OP_task+0xb2>
		if ( (op_c1218_dll.rx_buffer[C1218_IDENTITY_INDEX] == 0) && (op_c1218_dll.rx_error == 0) )
 10244ce:	7d63      	ldrb	r3, [r4, #21]
		op_c1218_dll.rx_eop = false;
 10244d0:	2200      	movs	r2, #0
 10244d2:	71e2      	strb	r2, [r4, #7]
		if ( (op_c1218_dll.rx_buffer[C1218_IDENTITY_INDEX] == 0) && (op_c1218_dll.rx_error == 0) )
 10244d4:	2b00      	cmp	r3, #0
 10244d6:	d14c      	bne.n	1024572 <OP_task+0xb2>
 10244d8:	79a5      	ldrb	r5, [r4, #6]
 10244da:	2d00      	cmp	r5, #0
 10244dc:	d149      	bne.n	1024572 <OP_task+0xb2>
			switch ( op_c1218_apl.communication_state )
 10244de:	4e9b      	ldr	r6, [pc, #620]	; (102474c <OP_task+0x28c>)
 10244e0:	7833      	ldrb	r3, [r6, #0]
 10244e2:	2b01      	cmp	r3, #1
 10244e4:	d948      	bls.n	1024578 <OP_task+0xb8>
 10244e6:	2b02      	cmp	r3, #2
 10244e8:	d13f      	bne.n	102456a <OP_task+0xaa>
					TIMER_start_ms_timer(OP_LOGON_TIMER, op_logon_timeout, OP_reset_logon_session);
 10244ea:	4b99      	ldr	r3, [pc, #612]	; (1024750 <OP_task+0x290>)
 10244ec:	4a99      	ldr	r2, [pc, #612]	; (1024754 <OP_task+0x294>)
 10244ee:	6819      	ldr	r1, [r3, #0]
 10244f0:	4b99      	ldr	r3, [pc, #612]	; (1024758 <OP_task+0x298>)
 10244f2:	2006      	movs	r0, #6
 10244f4:	4798      	blx	r3
					switch ( op_c1218_dll.rx_data[SERVICE_INDEX] )
 10244f6:	68a3      	ldr	r3, [r4, #8]
 10244f8:	781b      	ldrb	r3, [r3, #0]
 10244fa:	3b21      	subs	r3, #33	; 0x21
 10244fc:	2b31      	cmp	r3, #49	; 0x31
 10244fe:	f200 811d 	bhi.w	102473c <OP_task+0x27c>
 1024502:	e8df f013 	tbh	[pc, r3, lsl #1]
 1024506:	006c      	.short	0x006c
 1024508:	011b011b 	.word	0x011b011b
 102450c:	011b011b 	.word	0x011b011b
 1024510:	011b011b 	.word	0x011b011b
 1024514:	011b011b 	.word	0x011b011b
 1024518:	011b011b 	.word	0x011b011b
 102451c:	011b011b 	.word	0x011b011b
 1024520:	011b011b 	.word	0x011b011b
 1024524:	011b0084 	.word	0x011b0084
 1024528:	011b011b 	.word	0x011b011b
 102452c:	011b011b 	.word	0x011b011b
 1024530:	011b011b 	.word	0x011b011b
 1024534:	011b011b 	.word	0x011b011b
 1024538:	011b011b 	.word	0x011b011b
 102453c:	011b011b 	.word	0x011b011b
 1024540:	0109011b 	.word	0x0109011b
 1024544:	011b00f2 	.word	0x011b00f2
 1024548:	011b011b 	.word	0x011b011b
 102454c:	011b011b 	.word	0x011b011b
 1024550:	011b011b 	.word	0x011b011b
 1024554:	011b011b 	.word	0x011b011b
 1024558:	011b011b 	.word	0x011b011b
 102455c:	011b011b 	.word	0x011b011b
 1024560:	00da011b 	.word	0x00da011b
 1024564:	0096011b 	.word	0x0096011b
 1024568:	006f      	.short	0x006f
					C1218_send_isss(&op_c1218_dll);
 102456a:	4620      	mov	r0, r4
 102456c:	4b7b      	ldr	r3, [pc, #492]	; (102475c <OP_task+0x29c>)
 102456e:	4798      	blx	r3
					op_c1218_dll.rx_eop = false;
 1024570:	71e5      	strb	r5, [r4, #7]
}
 1024572:	b00d      	add	sp, #52	; 0x34
 1024574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					switch ( op_c1218_dll.rx_data[SERVICE_INDEX] )
 1024578:	68a3      	ldr	r3, [r4, #8]
 102457a:	781b      	ldrb	r3, [r3, #0]
 102457c:	2b21      	cmp	r3, #33	; 0x21
 102457e:	d02e      	beq.n	10245de <OP_task+0x11e>
 1024580:	d91b      	bls.n	10245ba <OP_task+0xfa>
 1024582:	2b50      	cmp	r3, #80	; 0x50
 1024584:	f000 8114 	beq.w	10247b0 <OP_task+0x2f0>
 1024588:	2b60      	cmp	r3, #96	; 0x60
 102458a:	f040 80d7 	bne.w	102473c <OP_task+0x27c>
	op_tx_data[op_c1218_dll.tx_data_length++] = SERVICE_R_OK;
 102458e:	4b74      	ldr	r3, [pc, #464]	; (1024760 <OP_task+0x2a0>)
	C1218_send_response(&op_c1218_dll);
 1024590:	4a74      	ldr	r2, [pc, #464]	; (1024764 <OP_task+0x2a4>)
	op_tx_data[op_c1218_dll.tx_data_length++] = SERVICE_R_OK;
 1024592:	701d      	strb	r5, [r3, #0]
	op_tx_data[op_c1218_dll.tx_data_length++] = C1218_PACKET_SIZE;
 1024594:	2196      	movs	r1, #150	; 0x96
	op_tx_data[op_c1218_dll.tx_data_length++] = OP_APL_NUM_PACKETS;
 1024596:	202e      	movs	r0, #46	; 0x2e
	op_tx_data[op_c1218_dll.tx_data_length++] = 0x0B;
 1024598:	270b      	movs	r7, #11
	op_tx_data[op_c1218_dll.tx_data_length++] = 0x00;
 102459a:	705d      	strb	r5, [r3, #1]
	op_tx_data[op_c1218_dll.tx_data_length++] = C1218_PACKET_SIZE;
 102459c:	7099      	strb	r1, [r3, #2]
	op_c1218_apl.communication_state = ID_STATE;
 102459e:	2501      	movs	r5, #1
	op_tx_data[op_c1218_dll.tx_data_length++] = 0x0B;
 10245a0:	2105      	movs	r1, #5
	op_tx_data[op_c1218_dll.tx_data_length++] = OP_APL_NUM_PACKETS;
 10245a2:	70d8      	strb	r0, [r3, #3]
	C1218_send_response(&op_c1218_dll);
 10245a4:	4620      	mov	r0, r4
	op_tx_data[op_c1218_dll.tx_data_length++] = 0x0B;
 10245a6:	711f      	strb	r7, [r3, #4]
	op_c1218_apl.communication_state = ID_STATE;
 10245a8:	7035      	strb	r5, [r6, #0]
	op_tx_data[op_c1218_dll.tx_data_length++] = 0x0B;
 10245aa:	f8a4 10c0 	strh.w	r1, [r4, #192]	; 0xc0
	C1218_send_response(&op_c1218_dll);
 10245ae:	4790      	blx	r2
							WATCHDOG_APP_vRestart();
 10245b0:	4b6d      	ldr	r3, [pc, #436]	; (1024768 <OP_task+0x2a8>)
}
 10245b2:	b00d      	add	sp, #52	; 0x34
 10245b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
							WATCHDOG_APP_vRestart();
 10245b8:	4718      	bx	r3
					switch ( op_c1218_dll.rx_data[SERVICE_INDEX] )
 10245ba:	2b20      	cmp	r3, #32
 10245bc:	f040 80be 	bne.w	102473c <OP_task+0x27c>
	op_tx_data[op_c1218_dll.tx_data_length++] = SERVICE_R_OK;
 10245c0:	4b67      	ldr	r3, [pc, #412]	; (1024760 <OP_task+0x2a0>)
	C1218_send_response(&op_c1218_dll);
 10245c2:	4968      	ldr	r1, [pc, #416]	; (1024764 <OP_task+0x2a4>)
	op_tx_data[op_c1218_dll.tx_data_length++] = SERVICE_R_OK;
 10245c4:	701d      	strb	r5, [r3, #0]
	op_c1218_apl.communication_state = ID_STATE;
 10245c6:	2201      	movs	r2, #1
	op_tx_data[op_c1218_dll.tx_data_length++] = END_OF_LIST;
 10245c8:	2705      	movs	r7, #5
	C1218_send_response(&op_c1218_dll);
 10245ca:	4620      	mov	r0, r4
	op_tx_data[op_c1218_dll.tx_data_length++] = STD;
 10245cc:	705d      	strb	r5, [r3, #1]
	op_tx_data[op_c1218_dll.tx_data_length++] = REV;
 10245ce:	70dd      	strb	r5, [r3, #3]
	op_tx_data[op_c1218_dll.tx_data_length++] = END_OF_LIST;
 10245d0:	711d      	strb	r5, [r3, #4]
	op_tx_data[op_c1218_dll.tx_data_length++] = VER;
 10245d2:	709a      	strb	r2, [r3, #2]
	op_c1218_apl.communication_state = ID_STATE;
 10245d4:	7032      	strb	r2, [r6, #0]
	op_tx_data[op_c1218_dll.tx_data_length++] = END_OF_LIST;
 10245d6:	f8a4 70c0 	strh.w	r7, [r4, #192]	; 0xc0
	C1218_send_response(&op_c1218_dll);
 10245da:	4788      	blx	r1
 10245dc:	e7e8      	b.n	10245b0 <OP_task+0xf0>
							OP_terminate_service();
 10245de:	4b63      	ldr	r3, [pc, #396]	; (102476c <OP_task+0x2ac>)
 10245e0:	4798      	blx	r3
 10245e2:	e7e5      	b.n	10245b0 <OP_task+0xf0>
	if ( op_security.incorrect_password > 0 ) {
 10245e4:	4c62      	ldr	r4, [pc, #392]	; (1024770 <OP_task+0x2b0>)
	C1218_send_ok(&op_c1218_dll);
 10245e6:	4b63      	ldr	r3, [pc, #396]	; (1024774 <OP_task+0x2b4>)
 10245e8:	4857      	ldr	r0, [pc, #348]	; (1024748 <OP_task+0x288>)
	op_c1218_apl.communication_state = ID_STATE;
 10245ea:	2201      	movs	r2, #1
 10245ec:	7032      	strb	r2, [r6, #0]
	C1218_send_ok(&op_c1218_dll);
 10245ee:	4798      	blx	r3
	if ( op_security.incorrect_password > 0 ) {
 10245f0:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 10245f2:	2b00      	cmp	r3, #0
 10245f4:	d0dc      	beq.n	10245b0 <OP_task+0xf0>
		EVNT_APP_vRegister_event(INCORRECT_PASSWORD_OP, 0, false, op_c1218_apl.user_id, rtc.utc_timestamp);
 10245f6:	4a60      	ldr	r2, [pc, #384]	; (1024778 <OP_task+0x2b8>)
 10245f8:	8873      	ldrh	r3, [r6, #2]
 10245fa:	6852      	ldr	r2, [r2, #4]
 10245fc:	9200      	str	r2, [sp, #0]
 10245fe:	2200      	movs	r2, #0
 1024600:	4611      	mov	r1, r2
 1024602:	2026      	movs	r0, #38	; 0x26
 1024604:	4d5d      	ldr	r5, [pc, #372]	; (102477c <OP_task+0x2bc>)
 1024606:	47a8      	blx	r5
		op_security.incorrect_password = 0;
 1024608:	2300      	movs	r3, #0
 102460a:	85e3      	strh	r3, [r4, #46]	; 0x2e
 102460c:	e7d0      	b.n	10245b0 <OP_task+0xf0>
							C1219_full_read_service(&op_c1218_dll, op_c1218_apl);
 102460e:	4d5c      	ldr	r5, [pc, #368]	; (1024780 <OP_task+0x2c0>)
 1024610:	6837      	ldr	r7, [r6, #0]
 1024612:	6828      	ldr	r0, [r5, #0]
 1024614:	6869      	ldr	r1, [r5, #4]
 1024616:	68aa      	ldr	r2, [r5, #8]
 1024618:	68eb      	ldr	r3, [r5, #12]
 102461a:	466c      	mov	r4, sp
 102461c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 102461e:	6928      	ldr	r0, [r5, #16]
 1024620:	6969      	ldr	r1, [r5, #20]
 1024622:	6872      	ldr	r2, [r6, #4]
 1024624:	68b3      	ldr	r3, [r6, #8]
 1024626:	4d57      	ldr	r5, [pc, #348]	; (1024784 <OP_task+0x2c4>)
 1024628:	c403      	stmia	r4!, {r0, r1}
 102462a:	4639      	mov	r1, r7
 102462c:	4846      	ldr	r0, [pc, #280]	; (1024748 <OP_task+0x288>)
 102462e:	47a8      	blx	r5
 1024630:	e7be      	b.n	10245b0 <OP_task+0xf0>
	for ( i = 0; i < (op_c1218_dll.rx_data_length - 1); i++ )
 1024632:	89a1      	ldrh	r1, [r4, #12]
 1024634:	3901      	subs	r1, #1
 1024636:	2900      	cmp	r1, #0
 1024638:	dd0c      	ble.n	1024654 <OP_task+0x194>
 102463a:	4853      	ldr	r0, [pc, #332]	; (1024788 <OP_task+0x2c8>)
 102463c:	2300      	movs	r3, #0
		password_rx[i] = op_rx_data[i + 1];
 102463e:	18c2      	adds	r2, r0, r3
	for ( i = 0; i < (op_c1218_dll.rx_data_length - 1); i++ )
 1024640:	3501      	adds	r5, #1
		password_rx[i] = op_rx_data[i + 1];
 1024642:	ac0c      	add	r4, sp, #48	; 0x30
 1024644:	4423      	add	r3, r4
	for ( i = 0; i < (op_c1218_dll.rx_data_length - 1); i++ )
 1024646:	b2ed      	uxtb	r5, r5
		password_rx[i] = op_rx_data[i + 1];
 1024648:	7852      	ldrb	r2, [r2, #1]
 102464a:	f803 2c14 	strb.w	r2, [r3, #-20]
	for ( i = 0; i < (op_c1218_dll.rx_data_length - 1); i++ )
 102464e:	428d      	cmp	r5, r1
 1024650:	462b      	mov	r3, r5
 1024652:	dbf4      	blt.n	102463e <OP_task+0x17e>
	for ( i = 0; i < st_41.nbr_passwords; i++ )
 1024654:	4b4d      	ldr	r3, [pc, #308]	; (102478c <OP_task+0x2cc>)
 1024656:	f893 b000 	ldrb.w	fp, [r3]
 102465a:	f1bb 0f00 	cmp.w	fp, #0
 102465e:	f000 80c4 	beq.w	10247ea <OP_task+0x32a>
 1024662:	f8df a144 	ldr.w	sl, [pc, #324]	; 10247a8 <OP_task+0x2e8>
 1024666:	785f      	ldrb	r7, [r3, #1]
 1024668:	f8df 8140 	ldr.w	r8, [pc, #320]	; 10247ac <OP_task+0x2ec>
 102466c:	4655      	mov	r5, sl
 102466e:	2400      	movs	r4, #0
 1024670:	f10d 091c 	add.w	r9, sp, #28
 1024674:	e006      	b.n	1024684 <OP_task+0x1c4>
 1024676:	3401      	adds	r4, #1
 1024678:	b2e3      	uxtb	r3, r4
 102467a:	455b      	cmp	r3, fp
 102467c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 1024680:	f080 80b8 	bcs.w	10247f4 <OP_task+0x334>
		if ( memcmp( (const char*)password_rx, (const char*)st_42.security_entries[i].password, st_41.password_len) == 0 )
 1024684:	463a      	mov	r2, r7
 1024686:	4629      	mov	r1, r5
 1024688:	4648      	mov	r0, r9
 102468a:	47c0      	blx	r8
 102468c:	2800      	cmp	r0, #0
 102468e:	d1f2      	bne.n	1024676 <OP_task+0x1b6>
			op_c1218_apl.access_permissions = st_42.security_entries[i].access_permissions;
 1024690:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 1024694:	eb0a 1404 	add.w	r4, sl, r4, lsl #4
			memcpy(&op_c1218_apl.password, &st_42.security_entries[i].password, st_41.password_len);
 1024698:	4b3d      	ldr	r3, [pc, #244]	; (1024790 <OP_task+0x2d0>)
 102469a:	483e      	ldr	r0, [pc, #248]	; (1024794 <OP_task+0x2d4>)
 102469c:	463a      	mov	r2, r7
 102469e:	4629      	mov	r1, r5
 10246a0:	4798      	blx	r3
			op_c1218_apl.access_permissions = st_42.security_entries[i].access_permissions;
 10246a2:	7d23      	ldrb	r3, [r4, #20]
 10246a4:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
		op_security.incorrect_password = 0;
 10246a8:	4931      	ldr	r1, [pc, #196]	; (1024770 <OP_task+0x2b0>)
 		C1218_send_ok(&op_c1218_dll);
 10246aa:	4827      	ldr	r0, [pc, #156]	; (1024748 <OP_task+0x288>)
 10246ac:	4b31      	ldr	r3, [pc, #196]	; (1024774 <OP_task+0x2b4>)
		op_security.incorrect_password = 0;
 10246ae:	2400      	movs	r4, #0
 		op_c1218_apl.communication_state = SESSION_STATE;
 10246b0:	2202      	movs	r2, #2
		op_security.incorrect_password = 0;
 10246b2:	85cc      	strh	r4, [r1, #46]	; 0x2e
 		op_c1218_apl.communication_state = SESSION_STATE;
 10246b4:	7032      	strb	r2, [r6, #0]
 		C1218_send_ok(&op_c1218_dll);
 10246b6:	4798      	blx	r3
 10246b8:	e77a      	b.n	10245b0 <OP_task+0xf0>
							if ( !meter.system_state.busy ) {
 10246ba:	4b37      	ldr	r3, [pc, #220]	; (1024798 <OP_task+0x2d8>)
 10246bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 10246c0:	2b00      	cmp	r3, #0
 10246c2:	f040 808f 	bne.w	10247e4 <OP_task+0x324>
								C1219_pwrite_offset_service(&op_c1218_dll, op_c1218_apl);
 10246c6:	4d2e      	ldr	r5, [pc, #184]	; (1024780 <OP_task+0x2c0>)
 10246c8:	6837      	ldr	r7, [r6, #0]
 10246ca:	6828      	ldr	r0, [r5, #0]
 10246cc:	6869      	ldr	r1, [r5, #4]
 10246ce:	68aa      	ldr	r2, [r5, #8]
 10246d0:	68eb      	ldr	r3, [r5, #12]
 10246d2:	466c      	mov	r4, sp
 10246d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 10246d6:	6928      	ldr	r0, [r5, #16]
 10246d8:	6969      	ldr	r1, [r5, #20]
 10246da:	6872      	ldr	r2, [r6, #4]
 10246dc:	68b3      	ldr	r3, [r6, #8]
 10246de:	4d2f      	ldr	r5, [pc, #188]	; (102479c <OP_task+0x2dc>)
 10246e0:	c403      	stmia	r4!, {r0, r1}
 10246e2:	4639      	mov	r1, r7
 10246e4:	4818      	ldr	r0, [pc, #96]	; (1024748 <OP_task+0x288>)
 10246e6:	47a8      	blx	r5
 10246e8:	e762      	b.n	10245b0 <OP_task+0xf0>
							if ( !meter.system_state.busy ) {
 10246ea:	4b2b      	ldr	r3, [pc, #172]	; (1024798 <OP_task+0x2d8>)
 10246ec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 10246f0:	2b00      	cmp	r3, #0
 10246f2:	d177      	bne.n	10247e4 <OP_task+0x324>
								C1219_full_write_service(&op_c1218_dll, op_c1218_apl);
 10246f4:	4d22      	ldr	r5, [pc, #136]	; (1024780 <OP_task+0x2c0>)
 10246f6:	6837      	ldr	r7, [r6, #0]
 10246f8:	6828      	ldr	r0, [r5, #0]
 10246fa:	6869      	ldr	r1, [r5, #4]
 10246fc:	68aa      	ldr	r2, [r5, #8]
 10246fe:	68eb      	ldr	r3, [r5, #12]
 1024700:	466c      	mov	r4, sp
 1024702:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 1024704:	6928      	ldr	r0, [r5, #16]
 1024706:	6969      	ldr	r1, [r5, #20]
 1024708:	6872      	ldr	r2, [r6, #4]
 102470a:	68b3      	ldr	r3, [r6, #8]
 102470c:	4d24      	ldr	r5, [pc, #144]	; (10247a0 <OP_task+0x2e0>)
 102470e:	c403      	stmia	r4!, {r0, r1}
 1024710:	4639      	mov	r1, r7
 1024712:	480d      	ldr	r0, [pc, #52]	; (1024748 <OP_task+0x288>)
 1024714:	47a8      	blx	r5
 1024716:	e74b      	b.n	10245b0 <OP_task+0xf0>
							C1219_pread_offset_service(&op_c1218_dll, op_c1218_apl);
 1024718:	4d19      	ldr	r5, [pc, #100]	; (1024780 <OP_task+0x2c0>)
 102471a:	6837      	ldr	r7, [r6, #0]
 102471c:	6828      	ldr	r0, [r5, #0]
 102471e:	6869      	ldr	r1, [r5, #4]
 1024720:	68aa      	ldr	r2, [r5, #8]
 1024722:	68eb      	ldr	r3, [r5, #12]
 1024724:	466c      	mov	r4, sp
 1024726:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 1024728:	6928      	ldr	r0, [r5, #16]
 102472a:	6969      	ldr	r1, [r5, #20]
 102472c:	6872      	ldr	r2, [r6, #4]
 102472e:	68b3      	ldr	r3, [r6, #8]
 1024730:	4d1c      	ldr	r5, [pc, #112]	; (10247a4 <OP_task+0x2e4>)
 1024732:	c403      	stmia	r4!, {r0, r1}
 1024734:	4639      	mov	r1, r7
 1024736:	4804      	ldr	r0, [pc, #16]	; (1024748 <OP_task+0x288>)
 1024738:	47a8      	blx	r5
 102473a:	e739      	b.n	10245b0 <OP_task+0xf0>
							C1218_send_isss(&op_c1218_dll);
 102473c:	4802      	ldr	r0, [pc, #8]	; (1024748 <OP_task+0x288>)
 102473e:	4b07      	ldr	r3, [pc, #28]	; (102475c <OP_task+0x29c>)
}
 1024740:	b00d      	add	sp, #52	; 0x34
 1024742:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
							C1218_send_isss(&op_c1218_dll);
 1024746:	4718      	bx	r3
 1024748:	20016c8c 	.word	0x20016c8c
 102474c:	20016ec8 	.word	0x20016ec8
 1024750:	20001128 	.word	0x20001128
 1024754:	010241bd 	.word	0x010241bd
 1024758:	0102ba8d 	.word	0x0102ba8d
 102475c:	01016525 	.word	0x01016525
 1024760:	20002ab0 	.word	0x20002ab0
 1024764:	0101637d 	.word	0x0101637d
 1024768:	0101603d 	.word	0x0101603d
 102476c:	01024209 	.word	0x01024209
 1024770:	20016e98 	.word	0x20016e98
 1024774:	01016445 	.word	0x01016445
 1024778:	20017160 	.word	0x20017160
 102477c:	01019961 	.word	0x01019961
 1024780:	20016ed4 	.word	0x20016ed4
 1024784:	01012a5d 	.word	0x01012a5d
 1024788:	2000112c 	.word	0x2000112c
 102478c:	2001718c 	.word	0x2001718c
 1024790:	01030a3d 	.word	0x01030a3d
 1024794:	20016ed6 	.word	0x20016ed6
 1024798:	20016c2c 	.word	0x20016c2c
 102479c:	01014b91 	.word	0x01014b91
 10247a0:	01014439 	.word	0x01014439
 10247a4:	01013671 	.word	0x01013671
 10247a8:	20017194 	.word	0x20017194
 10247ac:	010309dd 	.word	0x010309dd
	op_c1218_apl.user_id |= (uint16_t)op_rx_data[2];
 10247b0:	4b1d      	ldr	r3, [pc, #116]	; (1024828 <OP_task+0x368>)
	op_security.access_permissions = DEFAULT_LOG_ON_ACCESS_PERM;
 10247b2:	4f1e      	ldr	r7, [pc, #120]	; (102482c <OP_task+0x36c>)
	op_c1218_apl.user_id |= (uint16_t)op_rx_data[2];
 10247b4:	789a      	ldrb	r2, [r3, #2]
	memcpy(op_c1218_apl.user, &op_rx_data[3], C1218_USER_LENGTH);
 10247b6:	f853 0f03 	ldr.w	r0, [r3, #3]!
 10247ba:	6070      	str	r0, [r6, #4]
 10247bc:	f8d3 e004 	ldr.w	lr, [r3, #4]
	C1218_send_ok(&op_c1218_dll);
 10247c0:	491b      	ldr	r1, [pc, #108]	; (1024830 <OP_task+0x370>)
	memcpy(op_c1218_apl.user, &op_rx_data[3], C1218_USER_LENGTH);
 10247c2:	f8c6 e008 	str.w	lr, [r6, #8]
	C1218_send_ok(&op_c1218_dll);
 10247c6:	4620      	mov	r0, r4
	memcpy(op_c1218_apl.user, &op_rx_data[3], C1218_USER_LENGTH);
 10247c8:	891c      	ldrh	r4, [r3, #8]
 10247ca:	81b4      	strh	r4, [r6, #12]
	op_c1218_apl.communication_state = SESSION_STATE;
 10247cc:	2302      	movs	r3, #2
	op_c1218_apl.user_id |= (uint16_t)op_rx_data[2];
 10247ce:	8072      	strh	r2, [r6, #2]
	op_c1218_apl.communication_state = SESSION_STATE;
 10247d0:	7033      	strb	r3, [r6, #0]
	op_security.access_permissions = DEFAULT_LOG_ON_ACCESS_PERM;
 10247d2:	753d      	strb	r5, [r7, #20]
	C1218_send_ok(&op_c1218_dll);
 10247d4:	4788      	blx	r1
	TIMER_start_ms_timer(OP_LOGON_TIMER, op_logon_timeout, OP_reset_logon_session);
 10247d6:	4b17      	ldr	r3, [pc, #92]	; (1024834 <OP_task+0x374>)
 10247d8:	4a17      	ldr	r2, [pc, #92]	; (1024838 <OP_task+0x378>)
 10247da:	6819      	ldr	r1, [r3, #0]
 10247dc:	4b17      	ldr	r3, [pc, #92]	; (102483c <OP_task+0x37c>)
 10247de:	2006      	movs	r0, #6
 10247e0:	4798      	blx	r3
 10247e2:	e6e5      	b.n	10245b0 <OP_task+0xf0>
								C1218_send_bsy(&op_c1218_dll);
 10247e4:	4816      	ldr	r0, [pc, #88]	; (1024840 <OP_task+0x380>)
 10247e6:	4b17      	ldr	r3, [pc, #92]	; (1024844 <OP_task+0x384>)
 10247e8:	e7aa      	b.n	1024740 <OP_task+0x280>
 10247ea:	785f      	ldrb	r7, [r3, #1]
 10247ec:	f8df 8064 	ldr.w	r8, [pc, #100]	; 1024854 <OP_task+0x394>
 10247f0:	f10d 091c 	add.w	r9, sp, #28
		if ( memcmp( (const char*)password_rx, (const char*)MASTER_PASSWORD, st_41.password_len) == 0 )
 10247f4:	463a      	mov	r2, r7
 10247f6:	4648      	mov	r0, r9
 10247f8:	4913      	ldr	r1, [pc, #76]	; (1024848 <OP_task+0x388>)
 10247fa:	47c0      	blx	r8
 10247fc:	b138      	cbz	r0, 102480e <OP_task+0x34e>
 		C1218_send_err(&op_c1218_dll);
 10247fe:	4b13      	ldr	r3, [pc, #76]	; (102484c <OP_task+0x38c>)
 1024800:	480f      	ldr	r0, [pc, #60]	; (1024840 <OP_task+0x380>)
 1024802:	4798      	blx	r3
		op_security.incorrect_password++;
 1024804:	4a09      	ldr	r2, [pc, #36]	; (102482c <OP_task+0x36c>)
 1024806:	8dd3      	ldrh	r3, [r2, #46]	; 0x2e
 1024808:	3301      	adds	r3, #1
 102480a:	85d3      	strh	r3, [r2, #46]	; 0x2e
 102480c:	e6d0      	b.n	10245b0 <OP_task+0xf0>
			strcpy((char*)op_c1218_apl.password, MASTER_PASSWORD);
 102480e:	4c0e      	ldr	r4, [pc, #56]	; (1024848 <OP_task+0x388>)
 1024810:	4d0f      	ldr	r5, [pc, #60]	; (1024850 <OP_task+0x390>)
 1024812:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
			op_c1218_apl.access_permissions = MASTER_PASS_ACCESS_PERM;
 1024814:	27ff      	movs	r7, #255	; 0xff
			strcpy((char*)op_c1218_apl.password, MASTER_PASSWORD);
 1024816:	6028      	str	r0, [r5, #0]
 1024818:	6820      	ldr	r0, [r4, #0]
 102481a:	6128      	str	r0, [r5, #16]
 102481c:	6069      	str	r1, [r5, #4]
 102481e:	60aa      	str	r2, [r5, #8]
 1024820:	60eb      	str	r3, [r5, #12]
			op_c1218_apl.access_permissions = MASTER_PASS_ACCESS_PERM;
 1024822:	f886 7022 	strb.w	r7, [r6, #34]	; 0x22
 1024826:	e73f      	b.n	10246a8 <OP_task+0x1e8>
 1024828:	2000112c 	.word	0x2000112c
 102482c:	20016e98 	.word	0x20016e98
 1024830:	01016445 	.word	0x01016445
 1024834:	20001128 	.word	0x20001128
 1024838:	010241bd 	.word	0x010241bd
 102483c:	0102ba8d 	.word	0x0102ba8d
 1024840:	20016c8c 	.word	0x20016c8c
 1024844:	010164e5 	.word	0x010164e5
 1024848:	01031648 	.word	0x01031648
 102484c:	01016465 	.word	0x01016465
 1024850:	20016ed6 	.word	0x20016ed6
 1024854:	010309dd 	.word	0x010309dd

01024858 <OP_rtos_task>:
{
 1024858:	b508      	push	{r3, lr}
 102485a:	4e03      	ldr	r6, [pc, #12]	; (1024868 <OP_rtos_task+0x10>)
 102485c:	4d03      	ldr	r5, [pc, #12]	; (102486c <OP_rtos_task+0x14>)
 102485e:	4c04      	ldr	r4, [pc, #16]	; (1024870 <OP_rtos_task+0x18>)
		OP_task();
 1024860:	47b0      	blx	r6
		vTaskSuspend(op_c1218_dll.os_task_id);
 1024862:	6828      	ldr	r0, [r5, #0]
 1024864:	47a0      	blx	r4
 1024866:	e7fb      	b.n	1024860 <OP_rtos_task+0x8>
 1024868:	010244c1 	.word	0x010244c1
 102486c:	20016c8c 	.word	0x20016c8c
 1024870:	0102ea59 	.word	0x0102ea59

01024874 <UART1_Handler>:
 * \param	None
 * \retval	None
 ******************************************************************************
 */
void UART1_Handler( void )
{
 1024874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t ul_status;
	
	/* Read UART Status. */
	ul_status = uart_get_status( UART1 );
 1024878:	4c1c      	ldr	r4, [pc, #112]	; (10248ec <UART1_Handler+0x78>)
 102487a:	4b1d      	ldr	r3, [pc, #116]	; (10248f0 <UART1_Handler+0x7c>)
 102487c:	4620      	mov	r0, r4
 102487e:	4798      	blx	r3
	
	if ( ( (ul_status & UART_SR_RXRDY) == UART_SR_RXRDY ) && (op_c1218_dll.ongoing_transmission == false) )
 1024880:	07c2      	lsls	r2, r0, #31
 1024882:	d503      	bpl.n	102488c <UART1_Handler+0x18>
 1024884:	4b1b      	ldr	r3, [pc, #108]	; (10248f4 <UART1_Handler+0x80>)
 1024886:	f893 2208 	ldrb.w	r2, [r3, #520]	; 0x208
 102488a:	b1f2      	cbz	r2, 10248ca <UART1_Handler+0x56>
		op_c1218_dll.rx_abort = OP_rx_abort;
		op_c1218_dll.rx_data = (uint8_t*)op_rx_data;
	
		C1218_rx_int_handler(&op_c1218_dll);
	}
	else if ( (ul_status & UART_SR_TXEMPTY) == UART_SR_TXEMPTY )
 102488c:	0583      	lsls	r3, r0, #22
 102488e:	d401      	bmi.n	1024894 <UART1_Handler+0x20>
 1024890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	{
		op_c1218_dll.interrupt_context = true;
 1024894:	4b17      	ldr	r3, [pc, #92]	; (10248f4 <UART1_Handler+0x80>)
		op_c1218_dll.uart = OP_UART;
 1024896:	4815      	ldr	r0, [pc, #84]	; (10248ec <UART1_Handler+0x78>)
		op_c1218_dll.tx_timer = OP_TX_TIMER;
		op_c1218_dll.tx_abort = OP_tx_abort;
 1024898:	4e17      	ldr	r6, [pc, #92]	; (10248f8 <UART1_Handler+0x84>)
		op_c1218_dll.tx_retry = OP_tx_retry;
 102489a:	4d18      	ldr	r5, [pc, #96]	; (10248fc <UART1_Handler+0x88>)
		op_c1218_dll.io_configure = OP_io_configure;
 102489c:	4c18      	ldr	r4, [pc, #96]	; (1024900 <UART1_Handler+0x8c>)
		op_c1218_dll.uart = OP_UART;
 102489e:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
		op_c1218_dll.tx_timer = OP_TX_TIMER;
 10248a2:	2705      	movs	r7, #5
		op_c1218_dll.interrupt_context = true;
 10248a4:	2001      	movs	r0, #1
		op_c1218_dll.tx_data = (uint8_t*)op_tx_data;
 10248a6:	4917      	ldr	r1, [pc, #92]	; (1024904 <UART1_Handler+0x90>)
		op_c1218_dll.interrupt_context = true;
 10248a8:	f883 0209 	strb.w	r0, [r3, #521]	; 0x209
		op_c1218_dll.tx_timer = OP_TX_TIMER;
 10248ac:	f883 70b9 	strb.w	r7, [r3, #185]	; 0xb9
		op_c1218_dll.tx_abort = OP_tx_abort;
 10248b0:	f8c3 61f8 	str.w	r6, [r3, #504]	; 0x1f8
		op_c1218_dll.tx_retry = OP_tx_retry;
 10248b4:	f8c3 51fc 	str.w	r5, [r3, #508]	; 0x1fc
		op_c1218_dll.io_configure = OP_io_configure;
 10248b8:	f8c3 40b4 	str.w	r4, [r3, #180]	; 0xb4
		op_c1218_dll.tx_data = (uint8_t*)op_tx_data;
 10248bc:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
	
		C1218_tx_int_handler(&op_c1218_dll);
 10248c0:	4a11      	ldr	r2, [pc, #68]	; (1024908 <UART1_Handler+0x94>)
 10248c2:	4618      	mov	r0, r3
	}
}
 10248c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		C1218_tx_int_handler(&op_c1218_dll);
 10248c8:	4710      	bx	r2
		op_c1218_dll.interrupt_context = true;
 10248ca:	2701      	movs	r7, #1
		op_c1218_dll.rx_timer = OP_RX_TIMER;
 10248cc:	2604      	movs	r6, #4
		op_c1218_dll.rx_abort = OP_rx_abort;
 10248ce:	4d0f      	ldr	r5, [pc, #60]	; (102490c <UART1_Handler+0x98>)
		op_c1218_dll.rx_data = (uint8_t*)op_rx_data;
 10248d0:	490f      	ldr	r1, [pc, #60]	; (1024910 <UART1_Handler+0x9c>)
		op_c1218_dll.uart = OP_UART;
 10248d2:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
		op_c1218_dll.interrupt_context = true;
 10248d6:	f883 7209 	strb.w	r7, [r3, #521]	; 0x209
		op_c1218_dll.rx_timer = OP_RX_TIMER;
 10248da:	715e      	strb	r6, [r3, #5]
		op_c1218_dll.rx_abort = OP_rx_abort;
 10248dc:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
		op_c1218_dll.rx_data = (uint8_t*)op_rx_data;
 10248e0:	6099      	str	r1, [r3, #8]
		C1218_rx_int_handler(&op_c1218_dll);
 10248e2:	4a0c      	ldr	r2, [pc, #48]	; (1024914 <UART1_Handler+0xa0>)
 10248e4:	4618      	mov	r0, r3
}
 10248e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		C1218_rx_int_handler(&op_c1218_dll);
 10248ea:	4710      	bx	r2
 10248ec:	48004000 	.word	0x48004000
 10248f0:	01016115 	.word	0x01016115
 10248f4:	20016c8c 	.word	0x20016c8c
 10248f8:	01024115 	.word	0x01024115
 10248fc:	01024279 	.word	0x01024279
 1024900:	010242ad 	.word	0x010242ad
 1024904:	20002ab0 	.word	0x20002ab0
 1024908:	01016545 	.word	0x01016545
 102490c:	01024175 	.word	0x01024175
 1024910:	2000112c 	.word	0x2000112c
 1024914:	0101670d 	.word	0x0101670d

01024918 <NIC_tx_retry>:
 * \param void
 * \retval void
 ******************************************************************************
 */
void NIC_tx_retry(void)
{
 1024918:	4770      	bx	lr
 102491a:	bf00      	nop

0102491c <NIC_tx_abort>:
{
 102491c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	nic_c1218_dll.interrupt_context = true;
 102491e:	4c12      	ldr	r4, [pc, #72]	; (1024968 <NIC_tx_abort+0x4c>)
	nic_c1218_dll.tx_abort = NIC_tx_abort;
 1024920:	4912      	ldr	r1, [pc, #72]	; (102496c <NIC_tx_abort+0x50>)
	nic_c1218_dll.uart->UART_IDR = UART_IDR_TXRDY;
 1024922:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
	nic_c1218_dll.tx_data = (uint8_t*)nic_tx_data;
 1024926:	4a12      	ldr	r2, [pc, #72]	; (1024970 <NIC_tx_abort+0x54>)
	nic_c1218_dll.uart = NIC_UART;
 1024928:	4f12      	ldr	r7, [pc, #72]	; (1024974 <NIC_tx_abort+0x58>)
	nic_c1218_dll.interrupt_context = true;
 102492a:	2301      	movs	r3, #1
	nic_c1218_dll.ongoing_transmission = false;
 102492c:	2500      	movs	r5, #0
	nic_c1218_dll.uart->UART_IDR = UART_IDR_TXRDY;
 102492e:	2602      	movs	r6, #2
	nic_c1218_dll.interrupt_context = true;
 1024930:	f884 3209 	strb.w	r3, [r4, #521]	; 0x209
	nic_c1218_dll.ongoing_transmission = false;
 1024934:	f884 5208 	strb.w	r5, [r4, #520]	; 0x208
	nic_c1218_dll.uart->UART_IDR = UART_IDR_TXRDY;
 1024938:	60c6      	str	r6, [r0, #12]
	nic_c1218_dll.uart->UART_IDR = UART_IDR_TXEMPTY;
 102493a:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 102493e:	f44f 7600 	mov.w	r6, #512	; 0x200
 1024942:	60c6      	str	r6, [r0, #12]
	TIMER_reset_ms_timer(nic_c1218_dll.tx_timer);
 1024944:	4618      	mov	r0, r3
	nic_c1218_dll.tx_timer = NIC_TX_TIMER;
 1024946:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
	nic_c1218_dll.tx_state = C1218_TX_IDLE;
 102494a:	260b      	movs	r6, #11
	TIMER_reset_ms_timer(nic_c1218_dll.tx_timer);
 102494c:	4b0a      	ldr	r3, [pc, #40]	; (1024978 <NIC_tx_abort+0x5c>)
	nic_c1218_dll.uart = NIC_UART;
 102494e:	f8c4 7204 	str.w	r7, [r4, #516]	; 0x204
	nic_c1218_dll.tx_state = C1218_TX_IDLE;
 1024952:	f884 60b8 	strb.w	r6, [r4, #184]	; 0xb8
	nic_c1218_dll.tx_abort = NIC_tx_abort;
 1024956:	f8c4 11f8 	str.w	r1, [r4, #504]	; 0x1f8
	nic_c1218_dll.tx_data = (uint8_t*)nic_tx_data;
 102495a:	f8c4 20bc 	str.w	r2, [r4, #188]	; 0xbc
	TIMER_reset_ms_timer(nic_c1218_dll.tx_timer);
 102495e:	4798      	blx	r3
	nic_c1218_dll.interrupt_context = false;
 1024960:	f884 5209 	strb.w	r5, [r4, #521]	; 0x209
 1024964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 1024966:	bf00      	nop
 1024968:	20016f10 	.word	0x20016f10
 102496c:	0102491d 	.word	0x0102491d
 1024970:	20005dbc 	.word	0x20005dbc
 1024974:	400e0600 	.word	0x400e0600
 1024978:	0102bb09 	.word	0x0102bb09

0102497c <NIC_rx_abort>:
{
 102497c:	b570      	push	{r4, r5, r6, lr}
	nic_c1218_dll.interrupt_context = true;
 102497e:	4c0b      	ldr	r4, [pc, #44]	; (10249ac <NIC_rx_abort+0x30>)
	nic_c1218_dll.uart = NIC_UART;
 1024980:	480b      	ldr	r0, [pc, #44]	; (10249b0 <NIC_rx_abort+0x34>)
	nic_c1218_dll.rx_abort = NIC_rx_abort;
 1024982:	490c      	ldr	r1, [pc, #48]	; (10249b4 <NIC_rx_abort+0x38>)
	nic_c1218_dll.rx_data = (uint8_t*)nic_rx_data;
 1024984:	4a0c      	ldr	r2, [pc, #48]	; (10249b8 <NIC_rx_abort+0x3c>)
	nic_c1218_dll.uart = NIC_UART;
 1024986:	f8c4 0204 	str.w	r0, [r4, #516]	; 0x204
	nic_c1218_dll.ongoing_transmission = false;
 102498a:	2500      	movs	r5, #0
	TIMER_reset_ms_timer(nic_c1218_dll.rx_timer);
 102498c:	4b0b      	ldr	r3, [pc, #44]	; (10249bc <NIC_rx_abort+0x40>)
	nic_c1218_dll.rx_abort = NIC_rx_abort;
 102498e:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
	nic_c1218_dll.interrupt_context = true;
 1024992:	2601      	movs	r6, #1
	TIMER_reset_ms_timer(nic_c1218_dll.rx_timer);
 1024994:	4628      	mov	r0, r5
	nic_c1218_dll.interrupt_context = true;
 1024996:	f884 6209 	strb.w	r6, [r4, #521]	; 0x209
	nic_c1218_dll.rx_data = (uint8_t*)nic_rx_data;
 102499a:	60a2      	str	r2, [r4, #8]
	nic_c1218_dll.ongoing_transmission = false;
 102499c:	f884 5208 	strb.w	r5, [r4, #520]	; 0x208
	nic_c1218_dll.rx_state = C1218_RX_IDLE;
 10249a0:	7125      	strb	r5, [r4, #4]
	nic_c1218_dll.rx_timer = NIC_RX_TIMER;
 10249a2:	7165      	strb	r5, [r4, #5]
	TIMER_reset_ms_timer(nic_c1218_dll.rx_timer);
 10249a4:	4798      	blx	r3
	nic_c1218_dll.interrupt_context = false;
 10249a6:	f884 5209 	strb.w	r5, [r4, #521]	; 0x209
 10249aa:	bd70      	pop	{r4, r5, r6, pc}
 10249ac:	20016f10 	.word	0x20016f10
 10249b0:	400e0600 	.word	0x400e0600
 10249b4:	0102497d 	.word	0x0102497d
 10249b8:	20004438 	.word	0x20004438
 10249bc:	0102bb09 	.word	0x0102bb09

010249c0 <NIC_reset_logon_session>:
{
 10249c0:	b538      	push	{r3, r4, r5, lr}
	nic_c1218_apl.communication_state = BASE_STATE;
 10249c2:	4d0c      	ldr	r5, [pc, #48]	; (10249f4 <NIC_reset_logon_session+0x34>)
	NIC_rx_abort();
 10249c4:	4b0c      	ldr	r3, [pc, #48]	; (10249f8 <NIC_reset_logon_session+0x38>)
	nic_c1218_apl.communication_state = BASE_STATE;
 10249c6:	2400      	movs	r4, #0
 10249c8:	702c      	strb	r4, [r5, #0]
	NIC_rx_abort();
 10249ca:	4798      	blx	r3
	NIC_tx_abort();
 10249cc:	4b0b      	ldr	r3, [pc, #44]	; (10249fc <NIC_reset_logon_session+0x3c>)
 10249ce:	4798      	blx	r3
	nic_c1218_dll.tx_nbr_retries = 0;
 10249d0:	4b0b      	ldr	r3, [pc, #44]	; (1024a00 <NIC_reset_logon_session+0x40>)
	TIMER_reset_ms_timer(NIC_LOGON_TIMER);
 10249d2:	4a0c      	ldr	r2, [pc, #48]	; (1024a04 <NIC_reset_logon_session+0x44>)
	nic_c1218_dll.tx_nbr_retries = 0;
 10249d4:	f883 4201 	strb.w	r4, [r3, #513]	; 0x201
	TIMER_reset_ms_timer(NIC_LOGON_TIMER);
 10249d8:	2002      	movs	r0, #2
	nic_c1218_dll.wait_for_ack = false;
 10249da:	f883 4200 	strb.w	r4, [r3, #512]	; 0x200
	TIMER_reset_ms_timer(NIC_LOGON_TIMER);
 10249de:	4790      	blx	r2
	memset(&nic_c1218_apl, 0, sizeof(C1218_APL_TYPE));
 10249e0:	4b09      	ldr	r3, [pc, #36]	; (1024a08 <NIC_reset_logon_session+0x48>)
 10249e2:	4621      	mov	r1, r4
 10249e4:	4628      	mov	r0, r5
 10249e6:	2224      	movs	r2, #36	; 0x24
 10249e8:	4798      	blx	r3
	nic_c1218_apl.logon_session_expired = true;
 10249ea:	2301      	movs	r3, #1
 10249ec:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
 10249f0:	bd38      	pop	{r3, r4, r5, pc}
 10249f2:	bf00      	nop
 10249f4:	20016eec 	.word	0x20016eec
 10249f8:	0102497d 	.word	0x0102497d
 10249fc:	0102491d 	.word	0x0102491d
 1024a00:	20016f10 	.word	0x20016f10
 1024a04:	0102bb09 	.word	0x0102bb09
 1024a08:	01030b71 	.word	0x01030b71

01024a0c <NIC_terminate_service>:
{
 1024a0c:	b570      	push	{r4, r5, r6, lr}
	if ( nic_c1218_apl.communication_state != BASE_STATE ) {
 1024a0e:	4c15      	ldr	r4, [pc, #84]	; (1024a64 <NIC_terminate_service+0x58>)
	C1218_send_ok(&nic_c1218_dll);
 1024a10:	4b15      	ldr	r3, [pc, #84]	; (1024a68 <NIC_terminate_service+0x5c>)
 1024a12:	4816      	ldr	r0, [pc, #88]	; (1024a6c <NIC_terminate_service+0x60>)
{
 1024a14:	b082      	sub	sp, #8
	C1218_send_ok(&nic_c1218_dll);
 1024a16:	4798      	blx	r3
	if ( nic_c1218_apl.communication_state != BASE_STATE ) {
 1024a18:	7823      	ldrb	r3, [r4, #0]
 1024a1a:	b98b      	cbnz	r3, 1024a40 <NIC_terminate_service+0x34>
	if ( nic_security.incorrect_password > 0 ) {
 1024a1c:	4d14      	ldr	r5, [pc, #80]	; (1024a70 <NIC_terminate_service+0x64>)
 1024a1e:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
 1024a20:	b153      	cbz	r3, 1024a38 <NIC_terminate_service+0x2c>
		EVNT_APP_vRegister_event(INCORRECT_PASSWORD_NIC, 0, false, nic_c1218_apl.user_id, rtc.utc_timestamp);
 1024a22:	4a14      	ldr	r2, [pc, #80]	; (1024a74 <NIC_terminate_service+0x68>)
 1024a24:	8863      	ldrh	r3, [r4, #2]
 1024a26:	6852      	ldr	r2, [r2, #4]
 1024a28:	9200      	str	r2, [sp, #0]
 1024a2a:	2200      	movs	r2, #0
 1024a2c:	4611      	mov	r1, r2
 1024a2e:	2027      	movs	r0, #39	; 0x27
 1024a30:	4e11      	ldr	r6, [pc, #68]	; (1024a78 <NIC_terminate_service+0x6c>)
 1024a32:	47b0      	blx	r6
		nic_security.incorrect_password = 0;
 1024a34:	2300      	movs	r3, #0
 1024a36:	85eb      	strh	r3, [r5, #46]	; 0x2e
	nic_c1218_apl.communication_state = BASE_STATE;
 1024a38:	2300      	movs	r3, #0
 1024a3a:	7023      	strb	r3, [r4, #0]
}
 1024a3c:	b002      	add	sp, #8
 1024a3e:	bd70      	pop	{r4, r5, r6, pc}
		EVNT_APP_vRegister_event(COMMUNICATION_TERMINATED_NORMALLY, 0, true, nic_c1218_apl.user_id, rtc.utc_timestamp);
 1024a40:	4e0c      	ldr	r6, [pc, #48]	; (1024a74 <NIC_terminate_service+0x68>)
 1024a42:	8863      	ldrh	r3, [r4, #2]
 1024a44:	6872      	ldr	r2, [r6, #4]
 1024a46:	9200      	str	r2, [sp, #0]
 1024a48:	2100      	movs	r1, #0
 1024a4a:	2201      	movs	r2, #1
 1024a4c:	200c      	movs	r0, #12
 1024a4e:	4d0a      	ldr	r5, [pc, #40]	; (1024a78 <NIC_terminate_service+0x6c>)
 1024a50:	47a8      	blx	r5
		EVNT_APP_vRegister_event(COMMUNICATION_TERMINATED_NORMALLY_NIC, 0, false, nic_c1218_apl.user_id, rtc.utc_timestamp);
 1024a52:	6872      	ldr	r2, [r6, #4]
 1024a54:	9200      	str	r2, [sp, #0]
 1024a56:	2200      	movs	r2, #0
 1024a58:	8863      	ldrh	r3, [r4, #2]
 1024a5a:	4611      	mov	r1, r2
 1024a5c:	2019      	movs	r0, #25
 1024a5e:	47a8      	blx	r5
 1024a60:	e7dc      	b.n	1024a1c <NIC_terminate_service+0x10>
 1024a62:	bf00      	nop
 1024a64:	20016eec 	.word	0x20016eec
 1024a68:	01016445 	.word	0x01016445
 1024a6c:	20016f10 	.word	0x20016f10
 1024a70:	2001711c 	.word	0x2001711c
 1024a74:	20017160 	.word	0x20017160
 1024a78:	01019961 	.word	0x01019961

01024a7c <NIC_io_configure>:
{	
 1024a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
		base->PIO_PUDR = mask;
 1024a7e:	4b2c      	ldr	r3, [pc, #176]	; (1024b30 <NIC_io_configure+0xb4>)
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 1024a80:	4a2c      	ldr	r2, [pc, #176]	; (1024b34 <NIC_io_configure+0xb8>)
	uart_init( NIC_UART, &uart_console_settings );
 1024a82:	4c2d      	ldr	r4, [pc, #180]	; (1024b38 <NIC_io_configure+0xbc>)
	uart_console_settings.ul_mck = sysclk_get_cpu_hz();				// MCK for UART
 1024a84:	4e2d      	ldr	r6, [pc, #180]	; (1024b3c <NIC_io_configure+0xc0>)
	pmc_enable_periph_clk( NIC_ID );
 1024a86:	4d2e      	ldr	r5, [pc, #184]	; (1024b40 <NIC_io_configure+0xc4>)
		base->PIO_PUDR = mask;
 1024a88:	2110      	movs	r1, #16
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 1024a8a:	f44f 4780 	mov.w	r7, #16384	; 0x4000
 1024a8e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 1024a92:	6117      	str	r7, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 1024a94:	f8c2 70a0 	str.w	r7, [r2, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 1024a98:	6110      	str	r0, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 1024a9a:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
		base->PIO_PUDR = mask;
 1024a9e:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
 1024aa0:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
 1024aa4:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
 1024aa6:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
 1024aa8:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
 1024aac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 1024aae:	f022 0210 	bic.w	r2, r2, #16
 1024ab2:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
 1024ab4:	6f58      	ldr	r0, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
 1024ab6:	2220      	movs	r2, #32
		base->PIO_ABCDSR[1] &= ~mask;
 1024ab8:	f020 0010 	bic.w	r0, r0, #16
 1024abc:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
 1024abe:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
 1024ac0:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
 1024ac2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
 1024ac6:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
 1024ac8:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
 1024aca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
 1024ace:	6f19      	ldr	r1, [r3, #112]	; 0x70
 1024ad0:	f021 0120 	bic.w	r1, r1, #32
 1024ad4:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
 1024ad6:	6f59      	ldr	r1, [r3, #116]	; 0x74
{	
 1024ad8:	b085      	sub	sp, #20
 1024ada:	f021 0120 	bic.w	r1, r1, #32
 1024ade:	6759      	str	r1, [r3, #116]	; 0x74
	pmc_enable_periph_clk( NIC_ID );
 1024ae0:	2008      	movs	r0, #8
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
 1024ae2:	605a      	str	r2, [r3, #4]
	uart_console_settings.ul_baudrate = NIC_BAUDRATE;				// Expected baud rate.
 1024ae4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
	uart_console_settings.ul_chmode = NIC_MR_CHMODE_NORMAL;			// Configure channel mode (Normal, Automatic, Local_loopback or Remote_loopback)
 1024ae8:	2200      	movs	r2, #0
	uart_console_settings.ul_mode = NIC_MR_PAR_NO;					// Initialize value for UART mode register
 1024aea:	f44f 6300 	mov.w	r3, #2048	; 0x800
	uart_console_settings.ul_chmode = NIC_MR_CHMODE_NORMAL;			// Configure channel mode (Normal, Automatic, Local_loopback or Remote_loopback)
 1024aee:	9203      	str	r2, [sp, #12]
	uart_console_settings.ul_baudrate = NIC_BAUDRATE;				// Expected baud rate.
 1024af0:	9101      	str	r1, [sp, #4]
	uart_console_settings.ul_mode = NIC_MR_PAR_NO;					// Initialize value for UART mode register
 1024af2:	9302      	str	r3, [sp, #8]
	uart_console_settings.ul_mck = sysclk_get_cpu_hz();				// MCK for UART
 1024af4:	9600      	str	r6, [sp, #0]
	pmc_enable_periph_clk( NIC_ID );
 1024af6:	47a8      	blx	r5
	uart_init( NIC_UART, &uart_console_settings );
 1024af8:	4669      	mov	r1, sp
 1024afa:	4620      	mov	r0, r4
 1024afc:	4b11      	ldr	r3, [pc, #68]	; (1024b44 <NIC_io_configure+0xc8>)
 1024afe:	4798      	blx	r3
	g_p_uart_pdc1 = uart_get_pdc_base( NIC_UART );
 1024b00:	4620      	mov	r0, r4
 1024b02:	4b11      	ldr	r3, [pc, #68]	; (1024b48 <NIC_io_configure+0xcc>)
 1024b04:	4798      	blx	r3
	pdc_enable_transfer( g_p_uart_pdc1, PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN );
 1024b06:	f240 1101 	movw	r1, #257	; 0x101
 1024b0a:	4b10      	ldr	r3, [pc, #64]	; (1024b4c <NIC_io_configure+0xd0>)
 1024b0c:	4798      	blx	r3
	uart_enable_interrupt( NIC_UART, UART_IER_RXRDY );	
 1024b0e:	4620      	mov	r0, r4
 1024b10:	2101      	movs	r1, #1
 1024b12:	4b0f      	ldr	r3, [pc, #60]	; (1024b50 <NIC_io_configure+0xd4>)
 1024b14:	4798      	blx	r3
	uart_enable(NIC_UART);
 1024b16:	4620      	mov	r0, r4
 1024b18:	4b0e      	ldr	r3, [pc, #56]	; (1024b54 <NIC_io_configure+0xd8>)
 1024b1a:	4798      	blx	r3
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 1024b1c:	4b0e      	ldr	r3, [pc, #56]	; (1024b58 <NIC_io_configure+0xdc>)
 1024b1e:	21a0      	movs	r1, #160	; 0xa0
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 1024b20:	f44f 7280 	mov.w	r2, #256	; 0x100
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 1024b24:	f883 1308 	strb.w	r1, [r3, #776]	; 0x308
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 1024b28:	601a      	str	r2, [r3, #0]
}
 1024b2a:	b005      	add	sp, #20
 1024b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1024b2e:	bf00      	nop
 1024b30:	400e1000 	.word	0x400e1000
 1024b34:	400e0e00 	.word	0x400e0e00
 1024b38:	400e0600 	.word	0x400e0600
 1024b3c:	061a8000 	.word	0x061a8000
 1024b40:	0102d841 	.word	0x0102d841
 1024b44:	010160cd 	.word	0x010160cd
 1024b48:	01016119 	.word	0x01016119
 1024b4c:	0102d609 	.word	0x0102d609
 1024b50:	01016111 	.word	0x01016111
 1024b54:	01016109 	.word	0x01016109
 1024b58:	e000e100 	.word	0xe000e100

01024b5c <NIC_initialize>:
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
 1024b5c:	4b35      	ldr	r3, [pc, #212]	; (1024c34 <NIC_initialize+0xd8>)
 1024b5e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 1024b62:	f44f 4200 	mov.w	r2, #32768	; 0x8000
{ 	
 1024b66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	nic_c1218_dll.io_configure = (void_fptr)NIC_io_configure;
 1024b6a:	4c33      	ldr	r4, [pc, #204]	; (1024c38 <NIC_initialize+0xdc>)
 1024b6c:	6359      	str	r1, [r3, #52]	; 0x34
	NIC_io_configure();
 1024b6e:	4d33      	ldr	r5, [pc, #204]	; (1024c3c <NIC_initialize+0xe0>)
 1024b70:	635a      	str	r2, [r3, #52]	; 0x34
 1024b72:	47a8      	blx	r5
	TIMER_reset_ms_timer(NIC_LOGON_TIMER);
 1024b74:	2002      	movs	r0, #2
 1024b76:	4b32      	ldr	r3, [pc, #200]	; (1024c40 <NIC_initialize+0xe4>)
	nic_c1218_dll.io_configure = (void_fptr)NIC_io_configure;
 1024b78:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
	TIMER_reset_ms_timer(NIC_LOGON_TIMER);
 1024b7c:	4798      	blx	r3
	nic_logon_timeout = C1218_LOGON_TIMEOUT;
 1024b7e:	4b31      	ldr	r3, [pc, #196]	; (1024c44 <NIC_initialize+0xe8>)
 1024b80:	4a31      	ldr	r2, [pc, #196]	; (1024c48 <NIC_initialize+0xec>)
	memset(&nic_c1218_apl, 0, sizeof(C1218_APL_TYPE));
 1024b82:	4e32      	ldr	r6, [pc, #200]	; (1024c4c <NIC_initialize+0xf0>)
	nic_logon_timeout = C1218_LOGON_TIMEOUT;
 1024b84:	601a      	str	r2, [r3, #0]
	memset(&nic_c1218_apl, 0, sizeof(C1218_APL_TYPE));
 1024b86:	2100      	movs	r1, #0
	nic_c1218_dll.rx_state = C1218_RX_IDLE;
 1024b88:	460d      	mov	r5, r1
	nic_c1218_dll.rx_data = (uint8_t*)nic_rx_data;
 1024b8a:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 1024c6c <NIC_initialize+0x110>
	memset(&nic_c1218_apl, 0, sizeof(C1218_APL_TYPE));
 1024b8e:	4830      	ldr	r0, [pc, #192]	; (1024c50 <NIC_initialize+0xf4>)
	nic_c1218_dll.tx_data = (uint8_t*)nic_tx_data;
 1024b90:	4f30      	ldr	r7, [pc, #192]	; (1024c54 <NIC_initialize+0xf8>)
	memset(&nic_c1218_apl, 0, sizeof(C1218_APL_TYPE));
 1024b92:	2224      	movs	r2, #36	; 0x24
	memset(nic_c1218_dll.rx_buffer, 0, (unsigned int)sizeof(nic_c1218_dll.rx_buffer));
 1024b94:	f04f 0996 	mov.w	r9, #150	; 0x96
	memset(&nic_c1218_apl, 0, sizeof(C1218_APL_TYPE));
 1024b98:	47b0      	blx	r6
	memset(nic_rx_data, 0, (unsigned int)sizeof(nic_rx_data));
 1024b9a:	f641 1884 	movw	r8, #6532	; 0x1984
	nic_c1218_dll.rx_abort = (void_fptr)NIC_rx_abort;
 1024b9e:	4b2e      	ldr	r3, [pc, #184]	; (1024c58 <NIC_initialize+0xfc>)
 1024ba0:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	memset(nic_c1218_dll.rx_buffer, 0, (unsigned int)sizeof(nic_c1218_dll.rx_buffer));
 1024ba4:	4629      	mov	r1, r5
 1024ba6:	464a      	mov	r2, r9
 1024ba8:	f104 0014 	add.w	r0, r4, #20
	nic_c1218_dll.rx_state = C1218_RX_IDLE;
 1024bac:	7125      	strb	r5, [r4, #4]
	nic_c1218_dll.rx_timer = NIC_RX_TIMER;
 1024bae:	7165      	strb	r5, [r4, #5]
	nic_c1218_dll.rx_error = 0;
 1024bb0:	71a5      	strb	r5, [r4, #6]
	nic_c1218_dll.rx_eop = false;
 1024bb2:	71e5      	strb	r5, [r4, #7]
	nic_c1218_dll.rx_data_length = 0;
 1024bb4:	81a5      	strh	r5, [r4, #12]
	nic_c1218_dll.rx_data_bytes = 0;
 1024bb6:	73a5      	strb	r5, [r4, #14]
	nic_c1218_dll.rx_data_bytes_remaining = 0;
 1024bb8:	8225      	strh	r5, [r4, #16]
	nic_c1218_dll.rx_data = (uint8_t*)nic_rx_data;
 1024bba:	f8c4 a008 	str.w	sl, [r4, #8]
	memset(nic_c1218_dll.rx_buffer, 0, (unsigned int)sizeof(nic_c1218_dll.rx_buffer));
 1024bbe:	47b0      	blx	r6
	memset(nic_rx_data, 0, (unsigned int)sizeof(nic_rx_data));
 1024bc0:	4629      	mov	r1, r5
 1024bc2:	4642      	mov	r2, r8
 1024bc4:	4650      	mov	r0, sl
	nic_c1218_dll.rx_buffer_bytes = 0;
 1024bc6:	f8a4 50aa 	strh.w	r5, [r4, #170]	; 0xaa
	memset(nic_rx_data, 0, (unsigned int)sizeof(nic_rx_data));
 1024bca:	47b0      	blx	r6
	nic_c1218_dll.tx_state = C1218_TX_IDLE;
 1024bcc:	200b      	movs	r0, #11
	nic_c1218_dll.tx_timer = NIC_TX_TIMER;
 1024bce:	2301      	movs	r3, #1
	nic_c1218_dll.tx_abort = (void_fptr)NIC_tx_abort;
 1024bd0:	4922      	ldr	r1, [pc, #136]	; (1024c5c <NIC_initialize+0x100>)
	nic_c1218_dll.tx_state = C1218_TX_IDLE;
 1024bd2:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
	nic_c1218_dll.tx_retry = (void_fptr)NIC_tx_retry;
 1024bd6:	4822      	ldr	r0, [pc, #136]	; (1024c60 <NIC_initialize+0x104>)
	nic_c1218_dll.tx_timer = NIC_TX_TIMER;
 1024bd8:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
	memset(nic_c1218_dll.tx_buffer, 0, (unsigned int)sizeof(nic_c1218_dll.tx_buffer));
 1024bdc:	464a      	mov	r2, r9
	nic_c1218_dll.response_timeout_timer = NIC_RESPONSE_TIMEOUT_TIMER;
 1024bde:	2303      	movs	r3, #3
	nic_c1218_dll.tx_abort = (void_fptr)NIC_tx_abort;
 1024be0:	f8c4 11f8 	str.w	r1, [r4, #504]	; 0x1f8
	nic_c1218_dll.tx_retry = (void_fptr)NIC_tx_retry;
 1024be4:	f8c4 01fc 	str.w	r0, [r4, #508]	; 0x1fc
	memset(nic_c1218_dll.tx_buffer, 0, (unsigned int)sizeof(nic_c1218_dll.tx_buffer));
 1024be8:	4629      	mov	r1, r5
 1024bea:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
	nic_c1218_dll.response_timeout_timer = NIC_RESPONSE_TIMEOUT_TIMER;
 1024bee:	f884 3202 	strb.w	r3, [r4, #514]	; 0x202
	nic_c1218_dll.tx_nbr_retries = 0;
 1024bf2:	f884 5201 	strb.w	r5, [r4, #513]	; 0x201
	nic_c1218_dll.tx_error = 0;
 1024bf6:	f884 50ba 	strb.w	r5, [r4, #186]	; 0xba
	nic_c1218_dll.tx_eop = false;
 1024bfa:	f884 50bb 	strb.w	r5, [r4, #187]	; 0xbb
	nic_c1218_dll.tx_data_length = 0;
 1024bfe:	f8a4 50c0 	strh.w	r5, [r4, #192]	; 0xc0
	nic_c1218_dll.tx_data_bytes = 0;
 1024c02:	f884 50c2 	strb.w	r5, [r4, #194]	; 0xc2
	nic_c1218_dll.tx_data_bytes_remaining = 0;
 1024c06:	f8a4 50c4 	strh.w	r5, [r4, #196]	; 0xc4
	nic_c1218_dll.tx_data = (uint8_t*)nic_tx_data;
 1024c0a:	f8c4 70bc 	str.w	r7, [r4, #188]	; 0xbc
	memset(nic_c1218_dll.tx_buffer, 0, (unsigned int)sizeof(nic_c1218_dll.tx_buffer));
 1024c0e:	47b0      	blx	r6
	memset(nic_tx_data, 0, (unsigned int)sizeof(nic_tx_data));
 1024c10:	4642      	mov	r2, r8
 1024c12:	4638      	mov	r0, r7
 1024c14:	4629      	mov	r1, r5
	nic_c1218_dll.tx_buffer_bytes = 0;
 1024c16:	f8a4 515e 	strh.w	r5, [r4, #350]	; 0x15e
	memset(nic_tx_data, 0, (unsigned int)sizeof(nic_tx_data));
 1024c1a:	47b0      	blx	r6
	nic_security.incorrect_password = 0;
 1024c1c:	4b11      	ldr	r3, [pc, #68]	; (1024c64 <NIC_initialize+0x108>)
	nic_c1218_dll.uart = NIC_UART;
 1024c1e:	4a12      	ldr	r2, [pc, #72]	; (1024c68 <NIC_initialize+0x10c>)
	nic_c1218_dll.ongoing_transmission = false;
 1024c20:	f884 5208 	strb.w	r5, [r4, #520]	; 0x208
	nic_c1218_dll.interrupt_context = false;
 1024c24:	f884 5209 	strb.w	r5, [r4, #521]	; 0x209
	nic_c1218_dll.uart = NIC_UART;
 1024c28:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204
	nic_security.incorrect_password = 0;
 1024c2c:	85dd      	strh	r5, [r3, #46]	; 0x2e
 1024c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 1024c32:	bf00      	nop
 1024c34:	400e0e00 	.word	0x400e0e00
 1024c38:	20016f10 	.word	0x20016f10
 1024c3c:	01024a7d 	.word	0x01024a7d
 1024c40:	0102bb09 	.word	0x0102bb09
 1024c44:	20004434 	.word	0x20004434
 1024c48:	00015f90 	.word	0x00015f90
 1024c4c:	01030b71 	.word	0x01030b71
 1024c50:	20016eec 	.word	0x20016eec
 1024c54:	20005dbc 	.word	0x20005dbc
 1024c58:	0102497d 	.word	0x0102497d
 1024c5c:	0102491d 	.word	0x0102491d
 1024c60:	01024919 	.word	0x01024919
 1024c64:	2001711c 	.word	0x2001711c
 1024c68:	400e0600 	.word	0x400e0600
 1024c6c:	20004438 	.word	0x20004438

01024c70 <NIC_APP_vAssert_attention_request>:
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
 1024c70:	4b02      	ldr	r3, [pc, #8]	; (1024c7c <NIC_APP_vAssert_attention_request+0xc>)
 1024c72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 1024c76:	631a      	str	r2, [r3, #48]	; 0x30
 1024c78:	4770      	bx	lr
 1024c7a:	bf00      	nop
 1024c7c:	400e0e00 	.word	0x400e0e00

01024c80 <NIC_APP_vDeassert_attention_request>:
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
 1024c80:	4b02      	ldr	r3, [pc, #8]	; (1024c8c <NIC_APP_vDeassert_attention_request+0xc>)
 1024c82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 1024c86:	635a      	str	r2, [r3, #52]	; 0x34
 1024c88:	4770      	bx	lr
 1024c8a:	bf00      	nop
 1024c8c:	400e0e00 	.word	0x400e0e00

01024c90 <NIC_APP_vAssert_power_fail>:
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 1024c90:	4b03      	ldr	r3, [pc, #12]	; (1024ca0 <NIC_APP_vAssert_power_fail+0x10>)
 1024c92:	2201      	movs	r2, #1
 1024c94:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 1024c96:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
 1024c9a:	635a      	str	r2, [r3, #52]	; 0x34
 1024c9c:	4770      	bx	lr
 1024c9e:	bf00      	nop
 1024ca0:	400e0e00 	.word	0x400e0e00

01024ca4 <NIC_APP_vDeassert_power_fail>:
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 1024ca4:	4b03      	ldr	r3, [pc, #12]	; (1024cb4 <NIC_APP_vDeassert_power_fail+0x10>)
 1024ca6:	2201      	movs	r2, #1
 1024ca8:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 1024caa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
 1024cae:	631a      	str	r2, [r3, #48]	; 0x30
 1024cb0:	4770      	bx	lr
 1024cb2:	bf00      	nop
 1024cb4:	400e0e00 	.word	0x400e0e00

01024cb8 <NIC_io_reset>:
	 if (nic_c1218_dll.ongoing_transmission == false)
 1024cb8:	4b03      	ldr	r3, [pc, #12]	; (1024cc8 <NIC_io_reset+0x10>)
 1024cba:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 1024cbe:	b103      	cbz	r3, 1024cc2 <NIC_io_reset+0xa>
 1024cc0:	4770      	bx	lr
		 NIC_io_configure();
 1024cc2:	4b02      	ldr	r3, [pc, #8]	; (1024ccc <NIC_io_reset+0x14>)
 1024cc4:	4718      	bx	r3
 1024cc6:	bf00      	nop
 1024cc8:	20016f10 	.word	0x20016f10
 1024ccc:	01024a7d 	.word	0x01024a7d

01024cd0 <NIC_create_task>:
{
 1024cd0:	b510      	push	{r4, lr}
 1024cd2:	b084      	sub	sp, #16
	xTaskCreate( NIC_rtos_task, (const signed char * const ) "NIC_Task", NIC_STACK_SIZE, NULL, NIC_TASK_PRIO, &nic_c1218_dll.os_task_id );
 1024cd4:	2300      	movs	r3, #0
 1024cd6:	4907      	ldr	r1, [pc, #28]	; (1024cf4 <NIC_create_task+0x24>)
 1024cd8:	9101      	str	r1, [sp, #4]
 1024cda:	2202      	movs	r2, #2
 1024cdc:	9200      	str	r2, [sp, #0]
 1024cde:	9303      	str	r3, [sp, #12]
 1024ce0:	9302      	str	r3, [sp, #8]
 1024ce2:	f240 5214 	movw	r2, #1300	; 0x514
 1024ce6:	4904      	ldr	r1, [pc, #16]	; (1024cf8 <NIC_create_task+0x28>)
 1024ce8:	4c04      	ldr	r4, [pc, #16]	; (1024cfc <NIC_create_task+0x2c>)
 1024cea:	4805      	ldr	r0, [pc, #20]	; (1024d00 <NIC_create_task+0x30>)
 1024cec:	47a0      	blx	r4
}
 1024cee:	b004      	add	sp, #16
 1024cf0:	bd10      	pop	{r4, pc}
 1024cf2:	bf00      	nop
 1024cf4:	20016f10 	.word	0x20016f10
 1024cf8:	01031660 	.word	0x01031660
 1024cfc:	0102e7f9 	.word	0x0102e7f9
 1024d00:	01025161 	.word	0x01025161

01024d04 <NIC_task>:
{	
 1024d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if ( nic_c1218_dll.rx_eop == true )
 1024d08:	4c84      	ldr	r4, [pc, #528]	; (1024f1c <NIC_task+0x218>)
 1024d0a:	79e3      	ldrb	r3, [r4, #7]
{	
 1024d0c:	b08d      	sub	sp, #52	; 0x34
	if ( nic_c1218_dll.rx_eop == true )
 1024d0e:	2b00      	cmp	r3, #0
 1024d10:	d050      	beq.n	1024db4 <NIC_task+0xb0>
		if ( (nic_c1218_dll.rx_buffer[C1218_IDENTITY_INDEX] == 0) && (nic_c1218_dll.rx_error == 0) )
 1024d12:	7d63      	ldrb	r3, [r4, #21]
		nic_c1218_dll.rx_eop = false;
 1024d14:	2200      	movs	r2, #0
 1024d16:	71e2      	strb	r2, [r4, #7]
		if ( (nic_c1218_dll.rx_buffer[C1218_IDENTITY_INDEX] == 0) && (nic_c1218_dll.rx_error == 0) )
 1024d18:	2b00      	cmp	r3, #0
 1024d1a:	d14b      	bne.n	1024db4 <NIC_task+0xb0>
 1024d1c:	79a5      	ldrb	r5, [r4, #6]
 1024d1e:	2d00      	cmp	r5, #0
 1024d20:	d148      	bne.n	1024db4 <NIC_task+0xb0>
			switch ( nic_c1218_apl.communication_state )
 1024d22:	4e7f      	ldr	r6, [pc, #508]	; (1024f20 <NIC_task+0x21c>)
 1024d24:	7830      	ldrb	r0, [r6, #0]
 1024d26:	2801      	cmp	r0, #1
 1024d28:	d947      	bls.n	1024dba <NIC_task+0xb6>
 1024d2a:	2802      	cmp	r0, #2
 1024d2c:	d13e      	bne.n	1024dac <NIC_task+0xa8>
					TIMER_start_ms_timer(NIC_LOGON_TIMER, nic_logon_timeout, NIC_reset_logon_session);
 1024d2e:	4b7d      	ldr	r3, [pc, #500]	; (1024f24 <NIC_task+0x220>)
 1024d30:	4a7d      	ldr	r2, [pc, #500]	; (1024f28 <NIC_task+0x224>)
 1024d32:	6819      	ldr	r1, [r3, #0]
 1024d34:	4b7d      	ldr	r3, [pc, #500]	; (1024f2c <NIC_task+0x228>)
 1024d36:	4798      	blx	r3
					switch ( nic_c1218_dll.rx_data[SERVICE_INDEX] )
 1024d38:	68a2      	ldr	r2, [r4, #8]
 1024d3a:	7813      	ldrb	r3, [r2, #0]
 1024d3c:	3b21      	subs	r3, #33	; 0x21
 1024d3e:	2b31      	cmp	r3, #49	; 0x31
 1024d40:	f200 80e5 	bhi.w	1024f0e <NIC_task+0x20a>
 1024d44:	e8df f013 	tbh	[pc, r3, lsl #1]
 1024d48:	00e300a5 	.word	0x00e300a5
 1024d4c:	00e300e3 	.word	0x00e300e3
 1024d50:	00e300e3 	.word	0x00e300e3
 1024d54:	00e300e3 	.word	0x00e300e3
 1024d58:	00e300e3 	.word	0x00e300e3
 1024d5c:	00e300e3 	.word	0x00e300e3
 1024d60:	00e300e3 	.word	0x00e300e3
 1024d64:	008500e3 	.word	0x008500e3
 1024d68:	00e300e3 	.word	0x00e300e3
 1024d6c:	00e300e3 	.word	0x00e300e3
 1024d70:	00e300e3 	.word	0x00e300e3
 1024d74:	00e300e3 	.word	0x00e300e3
 1024d78:	00e300e3 	.word	0x00e300e3
 1024d7c:	00e300e3 	.word	0x00e300e3
 1024d80:	00e300e3 	.word	0x00e300e3
 1024d84:	018f0062 	.word	0x018f0062
 1024d88:	00e300e3 	.word	0x00e300e3
 1024d8c:	00e300e3 	.word	0x00e300e3
 1024d90:	00e300e3 	.word	0x00e300e3
 1024d94:	00e300e3 	.word	0x00e300e3
 1024d98:	00e300e3 	.word	0x00e300e3
 1024d9c:	00e300e3 	.word	0x00e300e3
 1024da0:	00e300e3 	.word	0x00e300e3
 1024da4:	00e30173 	.word	0x00e30173
 1024da8:	011c0131 	.word	0x011c0131
					C1218_send_isss(&nic_c1218_dll);
 1024dac:	4620      	mov	r0, r4
 1024dae:	4b60      	ldr	r3, [pc, #384]	; (1024f30 <NIC_task+0x22c>)
 1024db0:	4798      	blx	r3
					nic_c1218_dll.rx_eop = false;
 1024db2:	71e5      	strb	r5, [r4, #7]
}
 1024db4:	b00d      	add	sp, #52	; 0x34
 1024db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					switch ( nic_c1218_dll.rx_data[SERVICE_INDEX] )
 1024dba:	68a2      	ldr	r2, [r4, #8]
 1024dbc:	7813      	ldrb	r3, [r2, #0]
 1024dbe:	3b20      	subs	r3, #32
 1024dc0:	2b40      	cmp	r3, #64	; 0x40
 1024dc2:	f200 80a4 	bhi.w	1024f0e <NIC_task+0x20a>
 1024dc6:	e8df f003 	tbb	[pc, r3]
 1024dca:	64cb      	.short	0x64cb
 1024dcc:	a2a2a2a2 	.word	0xa2a2a2a2
 1024dd0:	a2a2a2a2 	.word	0xa2a2a2a2
 1024dd4:	a2a2a2a2 	.word	0xa2a2a2a2
 1024dd8:	a244a2a2 	.word	0xa244a2a2
 1024ddc:	a2a2a2a2 	.word	0xa2a2a2a2
 1024de0:	a2a2a2a2 	.word	0xa2a2a2a2
 1024de4:	a2a2a2a2 	.word	0xa2a2a2a2
 1024de8:	a2a221a2 	.word	0xa2a221a2
 1024dec:	a2a2a2a2 	.word	0xa2a2a2a2
 1024df0:	a2a2a2a2 	.word	0xa2a2a2a2
 1024df4:	a2a2a2a2 	.word	0xa2a2a2a2
 1024df8:	a27b95a2 	.word	0xa27b95a2
 1024dfc:	a2a2a2a2 	.word	0xa2a2a2a2
 1024e00:	a2a2a2a2 	.word	0xa2a2a2a2
 1024e04:	a2a2a2a2 	.word	0xa2a2a2a2
 1024e08:	a2a2      	.short	0xa2a2
 1024e0a:	68          	.byte	0x68
 1024e0b:	00          	.byte	0x00
							if ( !meter.system_state.busy ) {
 1024e0c:	4b49      	ldr	r3, [pc, #292]	; (1024f34 <NIC_task+0x230>)
 1024e0e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 1024e12:	2b00      	cmp	r3, #0
 1024e14:	f040 813d 	bne.w	1025092 <NIC_task+0x38e>
								C1219_pread_offset_service(&nic_c1218_dll, nic_c1218_apl);
 1024e18:	4d47      	ldr	r5, [pc, #284]	; (1024f38 <NIC_task+0x234>)
								access_permissions = nic_c1218_apl.access_permissions;
 1024e1a:	f896 7022 	ldrb.w	r7, [r6, #34]	; 0x22
								C1219_pread_offset_service(&nic_c1218_dll, nic_c1218_apl);
 1024e1e:	6828      	ldr	r0, [r5, #0]
 1024e20:	6869      	ldr	r1, [r5, #4]
 1024e22:	68aa      	ldr	r2, [r5, #8]
 1024e24:	68eb      	ldr	r3, [r5, #12]
 1024e26:	466c      	mov	r4, sp
 1024e28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
								nic_c1218_apl.access_permissions = 0xFF;
 1024e2a:	23ff      	movs	r3, #255	; 0xff
 1024e2c:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
								C1219_pread_offset_service(&nic_c1218_dll, nic_c1218_apl);
 1024e30:	6928      	ldr	r0, [r5, #16]
 1024e32:	6969      	ldr	r1, [r5, #20]
 1024e34:	6835      	ldr	r5, [r6, #0]
 1024e36:	68b3      	ldr	r3, [r6, #8]
 1024e38:	6872      	ldr	r2, [r6, #4]
 1024e3a:	c403      	stmia	r4!, {r0, r1}
 1024e3c:	4629      	mov	r1, r5
 1024e3e:	4837      	ldr	r0, [pc, #220]	; (1024f1c <NIC_task+0x218>)
 1024e40:	4c3e      	ldr	r4, [pc, #248]	; (1024f3c <NIC_task+0x238>)
 1024e42:	47a0      	blx	r4
								WATCHDOG_APP_vRestart();
 1024e44:	4b3e      	ldr	r3, [pc, #248]	; (1024f40 <NIC_task+0x23c>)
								nic_c1218_apl.access_permissions = access_permissions;
 1024e46:	f886 7022 	strb.w	r7, [r6, #34]	; 0x22
}
 1024e4a:	b00d      	add	sp, #52	; 0x34
 1024e4c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
							WATCHDOG_APP_vRestart();
 1024e50:	4718      	bx	r3
							if ( !meter.system_state.busy ) {
 1024e52:	4b38      	ldr	r3, [pc, #224]	; (1024f34 <NIC_task+0x230>)
 1024e54:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 1024e58:	2b00      	cmp	r3, #0
 1024e5a:	f040 811a 	bne.w	1025092 <NIC_task+0x38e>
								C1219_full_read_service(&nic_c1218_dll, nic_c1218_apl);
 1024e5e:	4d36      	ldr	r5, [pc, #216]	; (1024f38 <NIC_task+0x234>)
								access_permissions = nic_c1218_apl.access_permissions;
 1024e60:	f896 7022 	ldrb.w	r7, [r6, #34]	; 0x22
								C1219_full_read_service(&nic_c1218_dll, nic_c1218_apl);
 1024e64:	6828      	ldr	r0, [r5, #0]
 1024e66:	6869      	ldr	r1, [r5, #4]
 1024e68:	68aa      	ldr	r2, [r5, #8]
 1024e6a:	68eb      	ldr	r3, [r5, #12]
 1024e6c:	466c      	mov	r4, sp
 1024e6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
								nic_c1218_apl.access_permissions = 0xFF;
 1024e70:	23ff      	movs	r3, #255	; 0xff
 1024e72:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
								C1219_full_read_service(&nic_c1218_dll, nic_c1218_apl);
 1024e76:	6928      	ldr	r0, [r5, #16]
 1024e78:	6969      	ldr	r1, [r5, #20]
 1024e7a:	6835      	ldr	r5, [r6, #0]
 1024e7c:	68b3      	ldr	r3, [r6, #8]
 1024e7e:	6872      	ldr	r2, [r6, #4]
 1024e80:	c403      	stmia	r4!, {r0, r1}
 1024e82:	4629      	mov	r1, r5
 1024e84:	4825      	ldr	r0, [pc, #148]	; (1024f1c <NIC_task+0x218>)
 1024e86:	4c2f      	ldr	r4, [pc, #188]	; (1024f44 <NIC_task+0x240>)
 1024e88:	47a0      	blx	r4
								WATCHDOG_APP_vRestart();
 1024e8a:	4b2d      	ldr	r3, [pc, #180]	; (1024f40 <NIC_task+0x23c>)
								nic_c1218_apl.access_permissions = access_permissions;
 1024e8c:	f886 7022 	strb.w	r7, [r6, #34]	; 0x22
 1024e90:	e7db      	b.n	1024e4a <NIC_task+0x146>
							NIC_terminate_service();
 1024e92:	4b2d      	ldr	r3, [pc, #180]	; (1024f48 <NIC_task+0x244>)
 1024e94:	4798      	blx	r3
							WATCHDOG_APP_vRestart();
 1024e96:	4b2a      	ldr	r3, [pc, #168]	; (1024f40 <NIC_task+0x23c>)
 1024e98:	e7d7      	b.n	1024e4a <NIC_task+0x146>
	nic_tx_data[nic_c1218_dll.tx_data_length++] = SERVICE_R_OK;
 1024e9a:	4b2c      	ldr	r3, [pc, #176]	; (1024f4c <NIC_task+0x248>)
	C1218_send_response(&nic_c1218_dll);
 1024e9c:	481f      	ldr	r0, [pc, #124]	; (1024f1c <NIC_task+0x218>)
 1024e9e:	492c      	ldr	r1, [pc, #176]	; (1024f50 <NIC_task+0x24c>)
	nic_tx_data[nic_c1218_dll.tx_data_length++] = C1218_PACKET_SIZE;
 1024ea0:	2296      	movs	r2, #150	; 0x96
	nic_tx_data[nic_c1218_dll.tx_data_length++] = NIC_APL_NUM_PACKETS;
 1024ea2:	272e      	movs	r7, #46	; 0x2e
	nic_tx_data[nic_c1218_dll.tx_data_length++] = 0x0B;
 1024ea4:	250b      	movs	r5, #11
	nic_tx_data[nic_c1218_dll.tx_data_length++] = C1218_PACKET_SIZE;
 1024ea6:	709a      	strb	r2, [r3, #2]
	nic_tx_data[nic_c1218_dll.tx_data_length++] = NIC_APL_NUM_PACKETS;
 1024ea8:	70df      	strb	r7, [r3, #3]
	nic_tx_data[nic_c1218_dll.tx_data_length++] = SERVICE_R_OK;
 1024eaa:	2200      	movs	r2, #0
	nic_c1218_apl.communication_state = ID_STATE;
 1024eac:	2701      	movs	r7, #1
	nic_tx_data[nic_c1218_dll.tx_data_length++] = 0x0B;
 1024eae:	711d      	strb	r5, [r3, #4]
 1024eb0:	2505      	movs	r5, #5
	nic_tx_data[nic_c1218_dll.tx_data_length++] = SERVICE_R_OK;
 1024eb2:	701a      	strb	r2, [r3, #0]
	nic_tx_data[nic_c1218_dll.tx_data_length++] = 0x00;
 1024eb4:	705a      	strb	r2, [r3, #1]
	nic_c1218_apl.communication_state = ID_STATE;
 1024eb6:	7037      	strb	r7, [r6, #0]
	nic_tx_data[nic_c1218_dll.tx_data_length++] = 0x0B;
 1024eb8:	f8a4 50c0 	strh.w	r5, [r4, #192]	; 0xc0
	C1218_send_response(&nic_c1218_dll);
 1024ebc:	4788      	blx	r1
 1024ebe:	e7ea      	b.n	1024e96 <NIC_task+0x192>
	nic_c1218_apl.user_id |= (uint16_t)nic_rx_data[2];
 1024ec0:	4b24      	ldr	r3, [pc, #144]	; (1024f54 <NIC_task+0x250>)
	memcpy(nic_c1218_apl.user, &nic_rx_data[3], C1218_USER_LENGTH);
 1024ec2:	4a25      	ldr	r2, [pc, #148]	; (1024f58 <NIC_task+0x254>)
	nic_c1218_apl.user_id |= (uint16_t)nic_rx_data[2];
 1024ec4:	789c      	ldrb	r4, [r3, #2]
	memcpy(nic_c1218_apl.user, &nic_rx_data[3], C1218_USER_LENGTH);
 1024ec6:	f853 5f03 	ldr.w	r5, [r3, #3]!
 1024eca:	6075      	str	r5, [r6, #4]
 1024ecc:	685f      	ldr	r7, [r3, #4]
 1024ece:	891d      	ldrh	r5, [r3, #8]
	nic_c1218_apl.user_id |= (uint16_t)nic_rx_data[2];
 1024ed0:	8074      	strh	r4, [r6, #2]
	memcpy(nic_c1218_apl.user, &nic_rx_data[3], C1218_USER_LENGTH);
 1024ed2:	6057      	str	r7, [r2, #4]
	nic_c1218_apl.communication_state = SESSION_STATE;
 1024ed4:	2402      	movs	r4, #2
	nic_c1218_apl.access_permissions = DEFAULT_LOG_ON_ACCESS_PERM;
 1024ed6:	2300      	movs	r3, #0
	memcpy(nic_c1218_apl.user, &nic_rx_data[3], C1218_USER_LENGTH);
 1024ed8:	8115      	strh	r5, [r2, #8]
	C1218_send_ok(&nic_c1218_dll);
 1024eda:	4810      	ldr	r0, [pc, #64]	; (1024f1c <NIC_task+0x218>)
 1024edc:	491f      	ldr	r1, [pc, #124]	; (1024f5c <NIC_task+0x258>)
	nic_c1218_apl.access_permissions = DEFAULT_LOG_ON_ACCESS_PERM;
 1024ede:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
	nic_c1218_apl.communication_state = SESSION_STATE;
 1024ee2:	7034      	strb	r4, [r6, #0]
	C1218_send_ok(&nic_c1218_dll);
 1024ee4:	4788      	blx	r1
	TIMER_start_ms_timer(NIC_LOGON_TIMER, nic_logon_timeout, NIC_reset_logon_session);
 1024ee6:	4b0f      	ldr	r3, [pc, #60]	; (1024f24 <NIC_task+0x220>)
 1024ee8:	4a0f      	ldr	r2, [pc, #60]	; (1024f28 <NIC_task+0x224>)
 1024eea:	6819      	ldr	r1, [r3, #0]
 1024eec:	4b0f      	ldr	r3, [pc, #60]	; (1024f2c <NIC_task+0x228>)
 1024eee:	4620      	mov	r0, r4
 1024ef0:	4798      	blx	r3
 1024ef2:	e7d0      	b.n	1024e96 <NIC_task+0x192>
							if ( !meter.system_state.busy ) {
 1024ef4:	4b0f      	ldr	r3, [pc, #60]	; (1024f34 <NIC_task+0x230>)
 1024ef6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 1024efa:	2b00      	cmp	r3, #0
 1024efc:	f040 80c9 	bne.w	1025092 <NIC_task+0x38e>
								if ( (nic_c1218_dll.rx_data[SERVICE_INDEX + 1] == 0x08) && (nic_c1218_dll.rx_data[SERVICE_INDEX + 2] == 144) ) {
 1024f00:	7853      	ldrb	r3, [r2, #1]
 1024f02:	2b08      	cmp	r3, #8
 1024f04:	d103      	bne.n	1024f0e <NIC_task+0x20a>
 1024f06:	7893      	ldrb	r3, [r2, #2]
 1024f08:	2b90      	cmp	r3, #144	; 0x90
 1024f0a:	f000 80e4 	beq.w	10250d6 <NIC_task+0x3d2>
							C1218_send_isss(&nic_c1218_dll);
 1024f0e:	4803      	ldr	r0, [pc, #12]	; (1024f1c <NIC_task+0x218>)
 1024f10:	4b07      	ldr	r3, [pc, #28]	; (1024f30 <NIC_task+0x22c>)
}
 1024f12:	b00d      	add	sp, #52	; 0x34
 1024f14:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
							C1218_send_isss(&nic_c1218_dll);
 1024f18:	4718      	bx	r3
 1024f1a:	bf00      	nop
 1024f1c:	20016f10 	.word	0x20016f10
 1024f20:	20016eec 	.word	0x20016eec
 1024f24:	20004434 	.word	0x20004434
 1024f28:	010249c1 	.word	0x010249c1
 1024f2c:	0102ba8d 	.word	0x0102ba8d
 1024f30:	01016525 	.word	0x01016525
 1024f34:	20016c2c 	.word	0x20016c2c
 1024f38:	20016ef8 	.word	0x20016ef8
 1024f3c:	01013671 	.word	0x01013671
 1024f40:	0101603d 	.word	0x0101603d
 1024f44:	01012a5d 	.word	0x01012a5d
 1024f48:	01024a0d 	.word	0x01024a0d
 1024f4c:	20005dbc 	.word	0x20005dbc
 1024f50:	0101637d 	.word	0x0101637d
 1024f54:	20004438 	.word	0x20004438
 1024f58:	20016ef0 	.word	0x20016ef0
 1024f5c:	01016445 	.word	0x01016445
	nic_tx_data[nic_c1218_dll.tx_data_length++] = SERVICE_R_OK;
 1024f60:	4b6a      	ldr	r3, [pc, #424]	; (102510c <NIC_task+0x408>)
	C1218_send_response(&nic_c1218_dll);
 1024f62:	486b      	ldr	r0, [pc, #428]	; (1025110 <NIC_task+0x40c>)
 1024f64:	4d6b      	ldr	r5, [pc, #428]	; (1025114 <NIC_task+0x410>)
	nic_tx_data[nic_c1218_dll.tx_data_length++] = SERVICE_R_OK;
 1024f66:	2200      	movs	r2, #0
	nic_c1218_apl.communication_state = ID_STATE;
 1024f68:	2101      	movs	r1, #1
	nic_tx_data[nic_c1218_dll.tx_data_length++] = END_OF_LIST;
 1024f6a:	2705      	movs	r7, #5
	nic_tx_data[nic_c1218_dll.tx_data_length++] = SERVICE_R_OK;
 1024f6c:	701a      	strb	r2, [r3, #0]
	nic_tx_data[nic_c1218_dll.tx_data_length++] = STD;
 1024f6e:	705a      	strb	r2, [r3, #1]
	nic_tx_data[nic_c1218_dll.tx_data_length++] = REV;
 1024f70:	70da      	strb	r2, [r3, #3]
	nic_tx_data[nic_c1218_dll.tx_data_length++] = END_OF_LIST;
 1024f72:	711a      	strb	r2, [r3, #4]
	nic_tx_data[nic_c1218_dll.tx_data_length++] = VER;
 1024f74:	7099      	strb	r1, [r3, #2]
	nic_c1218_apl.communication_state = ID_STATE;
 1024f76:	7031      	strb	r1, [r6, #0]
	nic_tx_data[nic_c1218_dll.tx_data_length++] = END_OF_LIST;
 1024f78:	f8a4 70c0 	strh.w	r7, [r4, #192]	; 0xc0
	C1218_send_response(&nic_c1218_dll);
 1024f7c:	47a8      	blx	r5
 1024f7e:	e78a      	b.n	1024e96 <NIC_task+0x192>
	if( nic_security.incorrect_password > 0 ) {
 1024f80:	4c65      	ldr	r4, [pc, #404]	; (1025118 <NIC_task+0x414>)
	C1218_send_ok(&nic_c1218_dll);
 1024f82:	4b66      	ldr	r3, [pc, #408]	; (102511c <NIC_task+0x418>)
 1024f84:	4862      	ldr	r0, [pc, #392]	; (1025110 <NIC_task+0x40c>)
	nic_c1218_apl.communication_state = ID_STATE;
 1024f86:	2201      	movs	r2, #1
 1024f88:	7032      	strb	r2, [r6, #0]
	C1218_send_ok(&nic_c1218_dll);
 1024f8a:	4798      	blx	r3
	if( nic_security.incorrect_password > 0 ) {
 1024f8c:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 1024f8e:	2b00      	cmp	r3, #0
 1024f90:	d081      	beq.n	1024e96 <NIC_task+0x192>
		EVNT_APP_vRegister_event(INCORRECT_PASSWORD_NIC, 0, false, nic_c1218_apl.user_id, rtc.utc_timestamp);
 1024f92:	4a63      	ldr	r2, [pc, #396]	; (1025120 <NIC_task+0x41c>)
 1024f94:	8873      	ldrh	r3, [r6, #2]
 1024f96:	6852      	ldr	r2, [r2, #4]
 1024f98:	9200      	str	r2, [sp, #0]
 1024f9a:	2200      	movs	r2, #0
 1024f9c:	4611      	mov	r1, r2
 1024f9e:	2027      	movs	r0, #39	; 0x27
 1024fa0:	4d60      	ldr	r5, [pc, #384]	; (1025124 <NIC_task+0x420>)
 1024fa2:	47a8      	blx	r5
		nic_security.incorrect_password = 0;
 1024fa4:	2300      	movs	r3, #0
 1024fa6:	85e3      	strh	r3, [r4, #46]	; 0x2e
 1024fa8:	e775      	b.n	1024e96 <NIC_task+0x192>
	for ( i = 0; i < (nic_c1218_dll.rx_data_length - 1); i++ )
 1024faa:	89a1      	ldrh	r1, [r4, #12]
 1024fac:	3901      	subs	r1, #1
 1024fae:	2900      	cmp	r1, #0
 1024fb0:	dd0c      	ble.n	1024fcc <NIC_task+0x2c8>
 1024fb2:	485d      	ldr	r0, [pc, #372]	; (1025128 <NIC_task+0x424>)
 1024fb4:	2300      	movs	r3, #0
		password_rx[i] = nic_rx_data[i + 1];
 1024fb6:	18c2      	adds	r2, r0, r3
	for ( i = 0; i < (nic_c1218_dll.rx_data_length - 1); i++ )
 1024fb8:	3501      	adds	r5, #1
		password_rx[i] = nic_rx_data[i + 1];
 1024fba:	ac0c      	add	r4, sp, #48	; 0x30
 1024fbc:	4423      	add	r3, r4
	for ( i = 0; i < (nic_c1218_dll.rx_data_length - 1); i++ )
 1024fbe:	b2ed      	uxtb	r5, r5
		password_rx[i] = nic_rx_data[i + 1];
 1024fc0:	7852      	ldrb	r2, [r2, #1]
 1024fc2:	f803 2c14 	strb.w	r2, [r3, #-20]
	for ( i = 0; i < (nic_c1218_dll.rx_data_length - 1); i++ )
 1024fc6:	428d      	cmp	r5, r1
 1024fc8:	462b      	mov	r3, r5
 1024fca:	dbf4      	blt.n	1024fb6 <NIC_task+0x2b2>
	for ( i = 0; i < st_41.nbr_passwords; i++ )
 1024fcc:	4b57      	ldr	r3, [pc, #348]	; (102512c <NIC_task+0x428>)
 1024fce:	f893 b000 	ldrb.w	fp, [r3]
 1024fd2:	f1bb 0f00 	cmp.w	fp, #0
 1024fd6:	d05f      	beq.n	1025098 <NIC_task+0x394>
 1024fd8:	f8df a17c 	ldr.w	sl, [pc, #380]	; 1025158 <NIC_task+0x454>
 1024fdc:	785f      	ldrb	r7, [r3, #1]
 1024fde:	f8df 817c 	ldr.w	r8, [pc, #380]	; 102515c <NIC_task+0x458>
 1024fe2:	4655      	mov	r5, sl
 1024fe4:	2400      	movs	r4, #0
 1024fe6:	f10d 091c 	add.w	r9, sp, #28
 1024fea:	e005      	b.n	1024ff8 <NIC_task+0x2f4>
 1024fec:	3401      	adds	r4, #1
 1024fee:	b2e3      	uxtb	r3, r4
 1024ff0:	455b      	cmp	r3, fp
 1024ff2:	f105 0530 	add.w	r5, r5, #48	; 0x30
 1024ff6:	d254      	bcs.n	10250a2 <NIC_task+0x39e>
		if ( memcmp( (const char*)password_rx, (const char*)st_42.security_entries[i].password, st_41.password_len) == 0 )
 1024ff8:	463a      	mov	r2, r7
 1024ffa:	4629      	mov	r1, r5
 1024ffc:	4648      	mov	r0, r9
 1024ffe:	47c0      	blx	r8
 1025000:	2800      	cmp	r0, #0
 1025002:	d1f3      	bne.n	1024fec <NIC_task+0x2e8>
			nic_c1218_apl.access_permissions = st_42.security_entries[i].access_permissions;
 1025004:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 1025008:	eb0a 1404 	add.w	r4, sl, r4, lsl #4
			memcpy(&nic_c1218_apl.password, &st_42.security_entries[i].password, st_41.password_len);
 102500c:	4b48      	ldr	r3, [pc, #288]	; (1025130 <NIC_task+0x42c>)
 102500e:	4849      	ldr	r0, [pc, #292]	; (1025134 <NIC_task+0x430>)
 1025010:	463a      	mov	r2, r7
 1025012:	4629      	mov	r1, r5
 1025014:	4798      	blx	r3
			nic_c1218_apl.access_permissions = st_42.security_entries[i].access_permissions;
 1025016:	7d23      	ldrb	r3, [r4, #20]
 1025018:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
		nic_security.incorrect_password = 0;
 102501c:	493e      	ldr	r1, [pc, #248]	; (1025118 <NIC_task+0x414>)
		C1218_send_ok(&nic_c1218_dll);
 102501e:	483c      	ldr	r0, [pc, #240]	; (1025110 <NIC_task+0x40c>)
 1025020:	4b3e      	ldr	r3, [pc, #248]	; (102511c <NIC_task+0x418>)
		nic_security.incorrect_password = 0;
 1025022:	2400      	movs	r4, #0
		nic_c1218_apl.communication_state = SESSION_STATE;
 1025024:	2202      	movs	r2, #2
		nic_security.incorrect_password = 0;
 1025026:	85cc      	strh	r4, [r1, #46]	; 0x2e
		nic_c1218_apl.communication_state = SESSION_STATE;
 1025028:	7032      	strb	r2, [r6, #0]
		C1218_send_ok(&nic_c1218_dll);
 102502a:	4798      	blx	r3
 102502c:	e733      	b.n	1024e96 <NIC_task+0x192>
							if ( !meter.system_state.busy ) {
 102502e:	4b42      	ldr	r3, [pc, #264]	; (1025138 <NIC_task+0x434>)
 1025030:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 1025034:	bb6b      	cbnz	r3, 1025092 <NIC_task+0x38e>
								if ( (nic_c1218_dll.rx_data[SERVICE_INDEX + 1] == 0x08) && (nic_c1218_dll.rx_data[SERVICE_INDEX + 2] == 144) ) {
 1025036:	7853      	ldrb	r3, [r2, #1]
									C1219_pwrite_offset_service(&nic_c1218_dll, nic_c1218_apl);
 1025038:	4d40      	ldr	r5, [pc, #256]	; (102513c <NIC_task+0x438>)
								if ( (nic_c1218_dll.rx_data[SERVICE_INDEX + 1] == 0x08) && (nic_c1218_dll.rx_data[SERVICE_INDEX + 2] == 144) ) {
 102503a:	2b08      	cmp	r3, #8
 102503c:	d102      	bne.n	1025044 <NIC_task+0x340>
 102503e:	7893      	ldrb	r3, [r2, #2]
 1025040:	2b90      	cmp	r3, #144	; 0x90
 1025042:	d049      	beq.n	10250d8 <NIC_task+0x3d4>
									C1219_pwrite_offset_service(&nic_c1218_dll, nic_c1218_apl);
 1025044:	6828      	ldr	r0, [r5, #0]
 1025046:	6869      	ldr	r1, [r5, #4]
 1025048:	68aa      	ldr	r2, [r5, #8]
 102504a:	68eb      	ldr	r3, [r5, #12]
 102504c:	6837      	ldr	r7, [r6, #0]
 102504e:	466c      	mov	r4, sp
 1025050:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 1025052:	6928      	ldr	r0, [r5, #16]
 1025054:	6969      	ldr	r1, [r5, #20]
 1025056:	6872      	ldr	r2, [r6, #4]
 1025058:	68b3      	ldr	r3, [r6, #8]
 102505a:	4d39      	ldr	r5, [pc, #228]	; (1025140 <NIC_task+0x43c>)
 102505c:	c403      	stmia	r4!, {r0, r1}
 102505e:	4639      	mov	r1, r7
 1025060:	482b      	ldr	r0, [pc, #172]	; (1025110 <NIC_task+0x40c>)
 1025062:	47a8      	blx	r5
 1025064:	e717      	b.n	1024e96 <NIC_task+0x192>
							if ( !meter.system_state.busy ) {
 1025066:	4b34      	ldr	r3, [pc, #208]	; (1025138 <NIC_task+0x434>)
 1025068:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 102506c:	b98b      	cbnz	r3, 1025092 <NIC_task+0x38e>
								C1219_full_write_service(&nic_c1218_dll, nic_c1218_apl);
 102506e:	4d33      	ldr	r5, [pc, #204]	; (102513c <NIC_task+0x438>)
 1025070:	6837      	ldr	r7, [r6, #0]
 1025072:	6828      	ldr	r0, [r5, #0]
 1025074:	6869      	ldr	r1, [r5, #4]
 1025076:	68aa      	ldr	r2, [r5, #8]
 1025078:	68eb      	ldr	r3, [r5, #12]
 102507a:	466c      	mov	r4, sp
 102507c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 102507e:	6928      	ldr	r0, [r5, #16]
 1025080:	6969      	ldr	r1, [r5, #20]
 1025082:	6872      	ldr	r2, [r6, #4]
 1025084:	68b3      	ldr	r3, [r6, #8]
 1025086:	4d2f      	ldr	r5, [pc, #188]	; (1025144 <NIC_task+0x440>)
 1025088:	c403      	stmia	r4!, {r0, r1}
 102508a:	4639      	mov	r1, r7
 102508c:	4820      	ldr	r0, [pc, #128]	; (1025110 <NIC_task+0x40c>)
 102508e:	47a8      	blx	r5
 1025090:	e701      	b.n	1024e96 <NIC_task+0x192>
								C1218_send_bsy(&nic_c1218_dll);
 1025092:	481f      	ldr	r0, [pc, #124]	; (1025110 <NIC_task+0x40c>)
 1025094:	4b2c      	ldr	r3, [pc, #176]	; (1025148 <NIC_task+0x444>)
 1025096:	e73c      	b.n	1024f12 <NIC_task+0x20e>
 1025098:	785f      	ldrb	r7, [r3, #1]
 102509a:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 102515c <NIC_task+0x458>
 102509e:	f10d 091c 	add.w	r9, sp, #28
		if ( memcmp( (const char*)password_rx, (const char*)MASTER_PASSWORD, st_41.password_len) == 0 )
 10250a2:	463a      	mov	r2, r7
 10250a4:	4648      	mov	r0, r9
 10250a6:	4929      	ldr	r1, [pc, #164]	; (102514c <NIC_task+0x448>)
 10250a8:	47c0      	blx	r8
 10250aa:	b138      	cbz	r0, 10250bc <NIC_task+0x3b8>
		C1218_send_err(&nic_c1218_dll);
 10250ac:	4b28      	ldr	r3, [pc, #160]	; (1025150 <NIC_task+0x44c>)
 10250ae:	4818      	ldr	r0, [pc, #96]	; (1025110 <NIC_task+0x40c>)
 10250b0:	4798      	blx	r3
		nic_security.incorrect_password++;
 10250b2:	4a19      	ldr	r2, [pc, #100]	; (1025118 <NIC_task+0x414>)
 10250b4:	8dd3      	ldrh	r3, [r2, #46]	; 0x2e
 10250b6:	3301      	adds	r3, #1
 10250b8:	85d3      	strh	r3, [r2, #46]	; 0x2e
 10250ba:	e6ec      	b.n	1024e96 <NIC_task+0x192>
			strcpy((char*)nic_c1218_apl.password, MASTER_PASSWORD);
 10250bc:	4c23      	ldr	r4, [pc, #140]	; (102514c <NIC_task+0x448>)
 10250be:	4d1d      	ldr	r5, [pc, #116]	; (1025134 <NIC_task+0x430>)
 10250c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
			nic_c1218_apl.access_permissions = MASTER_PASS_ACCESS_PERM;
 10250c2:	27ff      	movs	r7, #255	; 0xff
			strcpy((char*)nic_c1218_apl.password, MASTER_PASSWORD);
 10250c4:	6028      	str	r0, [r5, #0]
 10250c6:	6820      	ldr	r0, [r4, #0]
 10250c8:	6128      	str	r0, [r5, #16]
 10250ca:	6069      	str	r1, [r5, #4]
 10250cc:	60aa      	str	r2, [r5, #8]
 10250ce:	60eb      	str	r3, [r5, #12]
			nic_c1218_apl.access_permissions = MASTER_PASS_ACCESS_PERM;
 10250d0:	f886 7022 	strb.w	r7, [r6, #34]	; 0x22
 10250d4:	e7a2      	b.n	102501c <NIC_task+0x318>
									C1219_pwrite_offset_service(&nic_c1218_dll, nic_c1218_apl);
 10250d6:	4d19      	ldr	r5, [pc, #100]	; (102513c <NIC_task+0x438>)
									C1219_pwrite_offset_service(&nic_c1218_dll, nic_c1218_apl);
 10250d8:	6828      	ldr	r0, [r5, #0]
 10250da:	6869      	ldr	r1, [r5, #4]
 10250dc:	68aa      	ldr	r2, [r5, #8]
 10250de:	68eb      	ldr	r3, [r5, #12]
									access_permissions = nic_c1218_apl.access_permissions;
 10250e0:	f896 7022 	ldrb.w	r7, [r6, #34]	; 0x22
									C1219_pwrite_offset_service(&nic_c1218_dll, nic_c1218_apl);
 10250e4:	466c      	mov	r4, sp
 10250e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
									nic_c1218_apl.access_permissions = 0xFF;
 10250e8:	23ff      	movs	r3, #255	; 0xff
 10250ea:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
									C1219_pwrite_offset_service(&nic_c1218_dll, nic_c1218_apl);
 10250ee:	6928      	ldr	r0, [r5, #16]
 10250f0:	6969      	ldr	r1, [r5, #20]
 10250f2:	6835      	ldr	r5, [r6, #0]
 10250f4:	68b3      	ldr	r3, [r6, #8]
 10250f6:	6872      	ldr	r2, [r6, #4]
 10250f8:	c403      	stmia	r4!, {r0, r1}
 10250fa:	4629      	mov	r1, r5
 10250fc:	4804      	ldr	r0, [pc, #16]	; (1025110 <NIC_task+0x40c>)
 10250fe:	4c10      	ldr	r4, [pc, #64]	; (1025140 <NIC_task+0x43c>)
 1025100:	47a0      	blx	r4
									WATCHDOG_APP_vRestart();
 1025102:	4b14      	ldr	r3, [pc, #80]	; (1025154 <NIC_task+0x450>)
									nic_c1218_apl.access_permissions = access_permissions;
 1025104:	f886 7022 	strb.w	r7, [r6, #34]	; 0x22
 1025108:	e69f      	b.n	1024e4a <NIC_task+0x146>
 102510a:	bf00      	nop
 102510c:	20005dbc 	.word	0x20005dbc
 1025110:	20016f10 	.word	0x20016f10
 1025114:	0101637d 	.word	0x0101637d
 1025118:	2001711c 	.word	0x2001711c
 102511c:	01016445 	.word	0x01016445
 1025120:	20017160 	.word	0x20017160
 1025124:	01019961 	.word	0x01019961
 1025128:	20004438 	.word	0x20004438
 102512c:	2001718c 	.word	0x2001718c
 1025130:	01030a3d 	.word	0x01030a3d
 1025134:	20016efa 	.word	0x20016efa
 1025138:	20016c2c 	.word	0x20016c2c
 102513c:	20016ef8 	.word	0x20016ef8
 1025140:	01014b91 	.word	0x01014b91
 1025144:	01014439 	.word	0x01014439
 1025148:	010164e5 	.word	0x010164e5
 102514c:	01031648 	.word	0x01031648
 1025150:	01016465 	.word	0x01016465
 1025154:	0101603d 	.word	0x0101603d
 1025158:	20017194 	.word	0x20017194
 102515c:	010309dd 	.word	0x010309dd

01025160 <NIC_rtos_task>:
{	
 1025160:	b508      	push	{r3, lr}
 1025162:	4e03      	ldr	r6, [pc, #12]	; (1025170 <NIC_rtos_task+0x10>)
 1025164:	4d03      	ldr	r5, [pc, #12]	; (1025174 <NIC_rtos_task+0x14>)
 1025166:	4c04      	ldr	r4, [pc, #16]	; (1025178 <NIC_rtos_task+0x18>)
		NIC_task();
 1025168:	47b0      	blx	r6
		vTaskSuspend(nic_c1218_dll.os_task_id);
 102516a:	6828      	ldr	r0, [r5, #0]
 102516c:	47a0      	blx	r4
 102516e:	e7fb      	b.n	1025168 <NIC_rtos_task+0x8>
 1025170:	01024d05 	.word	0x01024d05
 1025174:	20016f10 	.word	0x20016f10
 1025178:	0102ea59 	.word	0x0102ea59

0102517c <UART0_Handler>:
 *
 ******************************************************************************
 */

void UART0_Handler( void )
{
 102517c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t ul_status;
	
	/* Read UART Status. */
	ul_status = uart_get_status( UART0);
 1025180:	4c1b      	ldr	r4, [pc, #108]	; (10251f0 <UART0_Handler+0x74>)
 1025182:	4b1c      	ldr	r3, [pc, #112]	; (10251f4 <UART0_Handler+0x78>)
 1025184:	4620      	mov	r0, r4
 1025186:	4798      	blx	r3
		
	if ( ( (ul_status & UART_SR_RXRDY) == UART_SR_RXRDY ) && (nic_c1218_dll.ongoing_transmission == false) )
 1025188:	07c2      	lsls	r2, r0, #31
 102518a:	d503      	bpl.n	1025194 <UART0_Handler+0x18>
 102518c:	4b1a      	ldr	r3, [pc, #104]	; (10251f8 <UART0_Handler+0x7c>)
 102518e:	f893 2208 	ldrb.w	r2, [r3, #520]	; 0x208
 1025192:	b1ea      	cbz	r2, 10251d0 <UART0_Handler+0x54>
		nic_c1218_dll.rx_abort = NIC_rx_abort;
		nic_c1218_dll.rx_data = (uint8_t*)nic_rx_data;
	
		C1218_rx_int_handler(&nic_c1218_dll);
	}
	else if ( (ul_status & UART_SR_TXEMPTY) == UART_SR_TXEMPTY )
 1025194:	0583      	lsls	r3, r0, #22
 1025196:	d401      	bmi.n	102519c <UART0_Handler+0x20>
 1025198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	{
		nic_c1218_dll.interrupt_context = true;
 102519c:	4b16      	ldr	r3, [pc, #88]	; (10251f8 <UART0_Handler+0x7c>)
		nic_c1218_dll.uart = NIC_UART;
 102519e:	4a14      	ldr	r2, [pc, #80]	; (10251f0 <UART0_Handler+0x74>)
		nic_c1218_dll.tx_timer = NIC_TX_TIMER;
		nic_c1218_dll.tx_abort = NIC_tx_abort;
 10251a0:	4f16      	ldr	r7, [pc, #88]	; (10251fc <UART0_Handler+0x80>)
		nic_c1218_dll.tx_retry = NIC_tx_retry;
 10251a2:	4e17      	ldr	r6, [pc, #92]	; (1025200 <UART0_Handler+0x84>)
		nic_c1218_dll.io_configure = NIC_io_configure;
 10251a4:	4d17      	ldr	r5, [pc, #92]	; (1025204 <UART0_Handler+0x88>)
		nic_c1218_dll.tx_data = (uint8_t*)nic_tx_data;
 10251a6:	4c18      	ldr	r4, [pc, #96]	; (1025208 <UART0_Handler+0x8c>)
		nic_c1218_dll.uart = NIC_UART;
 10251a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		nic_c1218_dll.interrupt_context = true;
 10251ac:	2201      	movs	r2, #1
		nic_c1218_dll.tx_abort = NIC_tx_abort;
 10251ae:	f8c3 71f8 	str.w	r7, [r3, #504]	; 0x1f8
		nic_c1218_dll.tx_retry = NIC_tx_retry;
 10251b2:	f8c3 61fc 	str.w	r6, [r3, #508]	; 0x1fc
		nic_c1218_dll.io_configure = NIC_io_configure;
 10251b6:	f8c3 50b4 	str.w	r5, [r3, #180]	; 0xb4
		nic_c1218_dll.tx_data = (uint8_t*)nic_tx_data;
 10251ba:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
		nic_c1218_dll.interrupt_context = true;
 10251be:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
		nic_c1218_dll.tx_timer = NIC_TX_TIMER;
 10251c2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
	
		C1218_tx_int_handler(&nic_c1218_dll);
 10251c6:	4911      	ldr	r1, [pc, #68]	; (102520c <UART0_Handler+0x90>)
 10251c8:	4618      	mov	r0, r3
	}
}
 10251ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		C1218_tx_int_handler(&nic_c1218_dll);
 10251ce:	4708      	bx	r1
		nic_c1218_dll.interrupt_context = true;
 10251d0:	2701      	movs	r7, #1
		nic_c1218_dll.rx_abort = NIC_rx_abort;
 10251d2:	4e0f      	ldr	r6, [pc, #60]	; (1025210 <UART0_Handler+0x94>)
		nic_c1218_dll.rx_data = (uint8_t*)nic_rx_data;
 10251d4:	4d0f      	ldr	r5, [pc, #60]	; (1025214 <UART0_Handler+0x98>)
		nic_c1218_dll.uart = NIC_UART;
 10251d6:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
		nic_c1218_dll.rx_timer = NIC_RX_TIMER;
 10251da:	715a      	strb	r2, [r3, #5]
		nic_c1218_dll.interrupt_context = true;
 10251dc:	f883 7209 	strb.w	r7, [r3, #521]	; 0x209
		nic_c1218_dll.rx_abort = NIC_rx_abort;
 10251e0:	f8c3 60b0 	str.w	r6, [r3, #176]	; 0xb0
		nic_c1218_dll.rx_data = (uint8_t*)nic_rx_data;
 10251e4:	609d      	str	r5, [r3, #8]
		C1218_rx_int_handler(&nic_c1218_dll);
 10251e6:	490c      	ldr	r1, [pc, #48]	; (1025218 <UART0_Handler+0x9c>)
 10251e8:	4618      	mov	r0, r3
}
 10251ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		C1218_rx_int_handler(&nic_c1218_dll);
 10251ee:	4708      	bx	r1
 10251f0:	400e0600 	.word	0x400e0600
 10251f4:	01016115 	.word	0x01016115
 10251f8:	20016f10 	.word	0x20016f10
 10251fc:	0102491d 	.word	0x0102491d
 1025200:	01024919 	.word	0x01024919
 1025204:	01024a7d 	.word	0x01024a7d
 1025208:	20005dbc 	.word	0x20005dbc
 102520c:	01016545 	.word	0x01016545
 1025210:	0102497d 	.word	0x0102497d
 1025214:	20004438 	.word	0x20004438
 1025218:	0101670d 	.word	0x0101670d

0102521c <PFAIL_APP_vNull_action>:
 *
 * \param	None
 * \retval	None
 ******************************************************************************
 */
void PFAIL_APP_vNull_action(void) {
 102521c:	4770      	bx	lr
 102521e:	bf00      	nop

01025220 <PFAIL_APP_vStart_ms_timer.part.0>:
void PFAIL_APP_vStart_ms_timer(PF_MS_TIMER_ID_TYPE timer_id, uint32_t period, void_fptr function_ptr)
 1025220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("cpsid i");
 1025222:	b672      	cpsid	i
 1025224:	f3bf 8f5f 	dmb	sy
		Disable_global_interrupt();
 1025228:	4e0d      	ldr	r6, [pc, #52]	; (1025260 <PFAIL_APP_vStart_ms_timer.part.0+0x40>)
		ms_timers[timer_id].timer = tick_ms_timer + period;
 102522a:	4b0e      	ldr	r3, [pc, #56]	; (1025264 <PFAIL_APP_vStart_ms_timer.part.0+0x44>)
		ms_timers[timer_id].running = true;
 102522c:	4d0e      	ldr	r5, [pc, #56]	; (1025268 <PFAIL_APP_vStart_ms_timer.part.0+0x48>)
		Disable_global_interrupt();
 102522e:	2700      	movs	r7, #0
		ms_timers[timer_id].running = true;
 1025230:	eb00 0040 	add.w	r0, r0, r0, lsl #1
		Disable_global_interrupt();
 1025234:	7037      	strb	r7, [r6, #0]
		ms_timers[timer_id].running = true;
 1025236:	0080      	lsls	r0, r0, #2
		ms_timers[timer_id].timer = tick_ms_timer + period;
 1025238:	681c      	ldr	r4, [r3, #0]
		ms_timers[timer_id].running = true;
 102523a:	182b      	adds	r3, r5, r0
		ms_timers[timer_id].timer = tick_ms_timer + period;
 102523c:	440c      	add	r4, r1
		ms_timers[timer_id].expired = false;
 102523e:	705f      	strb	r7, [r3, #1]
		ms_timers[timer_id].running = true;
 1025240:	2701      	movs	r7, #1
		ms_timers[timer_id].fptr = function_ptr;
 1025242:	609a      	str	r2, [r3, #8]
		ms_timers[timer_id].timer = tick_ms_timer + period;
 1025244:	605c      	str	r4, [r3, #4]
		ms_timers[timer_id].running = true;
 1025246:	542f      	strb	r7, [r5, r0]
		if ( period == 0x0000 )
 1025248:	b129      	cbz	r1, 1025256 <PFAIL_APP_vStart_ms_timer.part.0+0x36>
		Enable_global_interrupt();
 102524a:	2301      	movs	r3, #1
 102524c:	7033      	strb	r3, [r6, #0]
 102524e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
 1025252:	b662      	cpsie	i
 1025254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			ms_timers[timer_id].running = false;
 1025256:	5429      	strb	r1, [r5, r0]
			ms_timers[timer_id].expired = true;
 1025258:	705f      	strb	r7, [r3, #1]
			(*ms_timers[timer_id].fptr)();		//execute the desired call back function
 102525a:	4790      	blx	r2
 102525c:	e7f5      	b.n	102524a <PFAIL_APP_vStart_ms_timer.part.0+0x2a>
 102525e:	bf00      	nop
 1025260:	2000008d 	.word	0x2000008d
 1025264:	200077c8 	.word	0x200077c8
 1025268:	20007744 	.word	0x20007744

0102526c <PFAIL_APP_vPhase_A_failure_handler.part.2>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
void PFAIL_APP_vPhase_C_failure_handler(void) {
 102526c:	b510      	push	{r4, lr}
 102526e:	4a0b      	ldr	r2, [pc, #44]	; (102529c <PFAIL_APP_vPhase_A_failure_handler.part.2+0x30>)
 1025270:	4b0b      	ldr	r3, [pc, #44]	; (10252a0 <PFAIL_APP_vPhase_A_failure_handler.part.2+0x34>)
 1025272:	f640 31b8 	movw	r1, #3000	; 0xbb8
 1025276:	2000      	movs	r0, #0
 1025278:	4798      	blx	r3
		
		if ( executing_pfail_task == false ) {
			
			PFAIL_APP_vStart_ms_timer(PFAIL_POWER_BACK_TIMER, TIMER_ms_to_tic(PFAIL_MIN_POWER_FAILURE_PERIOD), null_action);
			
			TIMER_reset_ms_timer(LED_BLINKING_TIMER);
 102527a:	2008      	movs	r0, #8
 102527c:	4b09      	ldr	r3, [pc, #36]	; (10252a4 <PFAIL_APP_vPhase_A_failure_handler.part.2+0x38>)
 102527e:	4798      	blx	r3
			LED_turn_off(LED_ALL);
 1025280:	2007      	movs	r0, #7
 1025282:	4b09      	ldr	r3, [pc, #36]	; (10252a8 <PFAIL_APP_vPhase_A_failure_handler.part.2+0x3c>)
 1025284:	4798      	blx	r3
			
			portBASE_TYPE xYieldRequired;
			xYieldRequired = xTaskResumeFromISR(pfail_os_task_id);
 1025286:	4a09      	ldr	r2, [pc, #36]	; (10252ac <PFAIL_APP_vPhase_A_failure_handler.part.2+0x40>)
 1025288:	4b09      	ldr	r3, [pc, #36]	; (10252b0 <PFAIL_APP_vPhase_A_failure_handler.part.2+0x44>)
 102528a:	6810      	ldr	r0, [r2, #0]
 102528c:	4798      	blx	r3
			
			if ( xYieldRequired == pdTRUE ) {
 102528e:	2801      	cmp	r0, #1
 1025290:	d000      	beq.n	1025294 <PFAIL_APP_vPhase_A_failure_handler.part.2+0x28>
 1025292:	bd10      	pop	{r4, pc}
				portYIELD();
 1025294:	4b07      	ldr	r3, [pc, #28]	; (10252b4 <PFAIL_APP_vPhase_A_failure_handler.part.2+0x48>)
			}
		}
	}
}
 1025296:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				portYIELD();
 102529a:	4718      	bx	r3
 102529c:	0102ba4d 	.word	0x0102ba4d
 10252a0:	01025221 	.word	0x01025221
 10252a4:	0102bb09 	.word	0x0102bb09
 10252a8:	0101adbd 	.word	0x0101adbd
 10252ac:	2001714c 	.word	0x2001714c
 10252b0:	0102eb75 	.word	0x0102eb75
 10252b4:	0102ddbd 	.word	0x0102ddbd

010252b8 <PFAIL_APP_vPhase_B_failure_handler>:
void PFAIL_APP_vPhase_B_failure_handler(void) {
 10252b8:	b510      	push	{r4, lr}
	meter.phase_b.failure = true;
 10252ba:	4c19      	ldr	r4, [pc, #100]	; (1025320 <PFAIL_APP_vPhase_B_failure_handler+0x68>)
 10252bc:	2001      	movs	r0, #1
 10252be:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
  __ASM volatile ("cpsid i");
 10252c2:	b672      	cpsid	i
 10252c4:	f3bf 8f5f 	dmb	sy
	ms_timers[timer_id].running = false;
 10252c8:	4b16      	ldr	r3, [pc, #88]	; (1025324 <PFAIL_APP_vPhase_B_failure_handler+0x6c>)
	Disable_global_interrupt();
 10252ca:	4917      	ldr	r1, [pc, #92]	; (1025328 <PFAIL_APP_vPhase_B_failure_handler+0x70>)
	ms_timers[timer_id].fptr = PFAIL_APP_vNull_action;
 10252cc:	4a17      	ldr	r2, [pc, #92]	; (102532c <PFAIL_APP_vPhase_B_failure_handler+0x74>)
 10252ce:	645a      	str	r2, [r3, #68]	; 0x44
	Disable_global_interrupt();
 10252d0:	2200      	movs	r2, #0
 10252d2:	700a      	strb	r2, [r1, #0]
	ms_timers[timer_id].running = false;
 10252d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	ms_timers[timer_id].timer = 0;
 10252d8:	641a      	str	r2, [r3, #64]	; 0x40
	ms_timers[timer_id].expired = false;
 10252da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	Enable_global_interrupt();
 10252de:	7008      	strb	r0, [r1, #0]
 10252e0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
 10252e4:	b662      	cpsie	i
	if ( !PFAIL_APP_bIs_ms_timer_running(PFAIL_PHB_FAILURE_TIMER) ) {
 10252e6:	7e1b      	ldrb	r3, [r3, #24]
 10252e8:	b19b      	cbz	r3, 1025312 <PFAIL_APP_vPhase_B_failure_handler+0x5a>
	if ( (meter.phase_a.failure == true) && (meter.phase_c.failure == true) ) {
 10252ea:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 10252ee:	b113      	cbz	r3, 10252f6 <PFAIL_APP_vPhase_B_failure_handler+0x3e>
 10252f0:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 10252f4:	b903      	cbnz	r3, 10252f8 <PFAIL_APP_vPhase_B_failure_handler+0x40>
 10252f6:	bd10      	pop	{r4, pc}
		meter.power_failure = true;
 10252f8:	2201      	movs	r2, #1
		NIC_APP_vAssert_power_fail();
 10252fa:	4b0d      	ldr	r3, [pc, #52]	; (1025330 <PFAIL_APP_vPhase_B_failure_handler+0x78>)
		meter.power_failure = true;
 10252fc:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
		NIC_APP_vAssert_power_fail();
 1025300:	4798      	blx	r3
		if ( executing_pfail_task == false ) {
 1025302:	4b0c      	ldr	r3, [pc, #48]	; (1025334 <PFAIL_APP_vPhase_B_failure_handler+0x7c>)
 1025304:	781b      	ldrb	r3, [r3, #0]
 1025306:	2b00      	cmp	r3, #0
 1025308:	d1f5      	bne.n	10252f6 <PFAIL_APP_vPhase_B_failure_handler+0x3e>
 102530a:	4b0b      	ldr	r3, [pc, #44]	; (1025338 <PFAIL_APP_vPhase_B_failure_handler+0x80>)
}
 102530c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 1025310:	4718      	bx	r3
 1025312:	4a0a      	ldr	r2, [pc, #40]	; (102533c <PFAIL_APP_vPhase_B_failure_handler+0x84>)
 1025314:	4b0a      	ldr	r3, [pc, #40]	; (1025340 <PFAIL_APP_vPhase_B_failure_handler+0x88>)
 1025316:	f640 31b8 	movw	r1, #3000	; 0xbb8
 102531a:	2002      	movs	r0, #2
 102531c:	4798      	blx	r3
 102531e:	e7e4      	b.n	10252ea <PFAIL_APP_vPhase_B_failure_handler+0x32>
 1025320:	20016c2c 	.word	0x20016c2c
 1025324:	20007744 	.word	0x20007744
 1025328:	2000008d 	.word	0x2000008d
 102532c:	0102521d 	.word	0x0102521d
 1025330:	01024c91 	.word	0x01024c91
 1025334:	20007740 	.word	0x20007740
 1025338:	0102526d 	.word	0x0102526d
 102533c:	0102ba4d 	.word	0x0102ba4d
 1025340:	01025221 	.word	0x01025221

01025344 <PFAIL_APP_vPhase_A_failure_handler>:
void PFAIL_APP_vPhase_A_failure_handler(void) {
 1025344:	b510      	push	{r4, lr}
	meter.phase_a.failure = true;
 1025346:	4c19      	ldr	r4, [pc, #100]	; (10253ac <PFAIL_APP_vPhase_A_failure_handler+0x68>)
 1025348:	2001      	movs	r0, #1
 102534a:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
  __ASM volatile ("cpsid i");
 102534e:	b672      	cpsid	i
 1025350:	f3bf 8f5f 	dmb	sy
	ms_timers[timer_id].running = false;
 1025354:	4b16      	ldr	r3, [pc, #88]	; (10253b0 <PFAIL_APP_vPhase_A_failure_handler+0x6c>)
	Disable_global_interrupt();
 1025356:	4917      	ldr	r1, [pc, #92]	; (10253b4 <PFAIL_APP_vPhase_A_failure_handler+0x70>)
	ms_timers[timer_id].fptr = PFAIL_APP_vNull_action;
 1025358:	4a17      	ldr	r2, [pc, #92]	; (10253b8 <PFAIL_APP_vPhase_A_failure_handler+0x74>)
 102535a:	639a      	str	r2, [r3, #56]	; 0x38
	Disable_global_interrupt();
 102535c:	2200      	movs	r2, #0
 102535e:	700a      	strb	r2, [r1, #0]
	ms_timers[timer_id].running = false;
 1025360:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	ms_timers[timer_id].timer = 0;
 1025364:	635a      	str	r2, [r3, #52]	; 0x34
	ms_timers[timer_id].expired = false;
 1025366:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	Enable_global_interrupt();
 102536a:	7008      	strb	r0, [r1, #0]
 102536c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
 1025370:	b662      	cpsie	i
	if ( !PFAIL_APP_bIs_ms_timer_running(PFAIL_PHA_FAILURE_TIMER) ) {
 1025372:	7b1b      	ldrb	r3, [r3, #12]
 1025374:	b19b      	cbz	r3, 102539e <PFAIL_APP_vPhase_A_failure_handler+0x5a>
	if ( (meter.phase_b.failure == true) && (meter.phase_c.failure == true) ) {
 1025376:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 102537a:	b113      	cbz	r3, 1025382 <PFAIL_APP_vPhase_A_failure_handler+0x3e>
 102537c:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 1025380:	b903      	cbnz	r3, 1025384 <PFAIL_APP_vPhase_A_failure_handler+0x40>
 1025382:	bd10      	pop	{r4, pc}
		meter.power_failure = true;
 1025384:	2201      	movs	r2, #1
		NIC_APP_vAssert_power_fail();
 1025386:	4b0d      	ldr	r3, [pc, #52]	; (10253bc <PFAIL_APP_vPhase_A_failure_handler+0x78>)
		meter.power_failure = true;
 1025388:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
		NIC_APP_vAssert_power_fail();
 102538c:	4798      	blx	r3
		if ( executing_pfail_task == false ) {
 102538e:	4b0c      	ldr	r3, [pc, #48]	; (10253c0 <PFAIL_APP_vPhase_A_failure_handler+0x7c>)
 1025390:	781b      	ldrb	r3, [r3, #0]
 1025392:	2b00      	cmp	r3, #0
 1025394:	d1f5      	bne.n	1025382 <PFAIL_APP_vPhase_A_failure_handler+0x3e>
 1025396:	4b0b      	ldr	r3, [pc, #44]	; (10253c4 <PFAIL_APP_vPhase_A_failure_handler+0x80>)
}
 1025398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 102539c:	4718      	bx	r3
 102539e:	4a0a      	ldr	r2, [pc, #40]	; (10253c8 <PFAIL_APP_vPhase_A_failure_handler+0x84>)
 10253a0:	4b0a      	ldr	r3, [pc, #40]	; (10253cc <PFAIL_APP_vPhase_A_failure_handler+0x88>)
 10253a2:	f640 31b8 	movw	r1, #3000	; 0xbb8
 10253a6:	4798      	blx	r3
 10253a8:	e7e5      	b.n	1025376 <PFAIL_APP_vPhase_A_failure_handler+0x32>
 10253aa:	bf00      	nop
 10253ac:	20016c2c 	.word	0x20016c2c
 10253b0:	20007744 	.word	0x20007744
 10253b4:	2000008d 	.word	0x2000008d
 10253b8:	0102521d 	.word	0x0102521d
 10253bc:	01024c91 	.word	0x01024c91
 10253c0:	20007740 	.word	0x20007740
 10253c4:	0102526d 	.word	0x0102526d
 10253c8:	0102ba4d 	.word	0x0102ba4d
 10253cc:	01025221 	.word	0x01025221

010253d0 <PFAIL_APP_vPower_failure_handler>:
	meter.power_failure = true;
 10253d0:	4b0c      	ldr	r3, [pc, #48]	; (1025404 <PFAIL_APP_vPower_failure_handler+0x34>)
 10253d2:	2201      	movs	r2, #1
 10253d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	if ( (meter.phase_a.failure == true) && (meter.phase_b.failure == true) && (meter.phase_c.failure == true) ) {
 10253d8:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 10253dc:	b12a      	cbz	r2, 10253ea <PFAIL_APP_vPower_failure_handler+0x1a>
 10253de:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 10253e2:	b112      	cbz	r2, 10253ea <PFAIL_APP_vPower_failure_handler+0x1a>
 10253e4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 10253e8:	b903      	cbnz	r3, 10253ec <PFAIL_APP_vPower_failure_handler+0x1c>
 10253ea:	4770      	bx	lr
		NIC_APP_vAssert_power_fail();
 10253ec:	4b06      	ldr	r3, [pc, #24]	; (1025408 <PFAIL_APP_vPower_failure_handler+0x38>)
void PFAIL_APP_vPower_failure_handler(void) {
 10253ee:	b510      	push	{r4, lr}
		NIC_APP_vAssert_power_fail();
 10253f0:	4798      	blx	r3
		if ( executing_pfail_task == false ) {
 10253f2:	4b06      	ldr	r3, [pc, #24]	; (102540c <PFAIL_APP_vPower_failure_handler+0x3c>)
 10253f4:	781b      	ldrb	r3, [r3, #0]
 10253f6:	b103      	cbz	r3, 10253fa <PFAIL_APP_vPower_failure_handler+0x2a>
 10253f8:	bd10      	pop	{r4, pc}
 10253fa:	4b05      	ldr	r3, [pc, #20]	; (1025410 <PFAIL_APP_vPower_failure_handler+0x40>)
}
 10253fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 1025400:	4718      	bx	r3
 1025402:	bf00      	nop
 1025404:	20016c2c 	.word	0x20016c2c
 1025408:	01024c91 	.word	0x01024c91
 102540c:	20007740 	.word	0x20007740
 1025410:	0102526d 	.word	0x0102526d

01025414 <PFAIL_APP_vPhase_C_failure_handler>:
void PFAIL_APP_vPhase_C_failure_handler(void) {
 1025414:	b510      	push	{r4, lr}
	meter.phase_c.failure = true;
 1025416:	4c1a      	ldr	r4, [pc, #104]	; (1025480 <PFAIL_APP_vPhase_C_failure_handler+0x6c>)
 1025418:	2001      	movs	r0, #1
 102541a:	f884 0059 	strb.w	r0, [r4, #89]	; 0x59
  __ASM volatile ("cpsid i");
 102541e:	b672      	cpsid	i
 1025420:	f3bf 8f5f 	dmb	sy
	ms_timers[timer_id].running = false;
 1025424:	4b17      	ldr	r3, [pc, #92]	; (1025484 <PFAIL_APP_vPhase_C_failure_handler+0x70>)
	Disable_global_interrupt();
 1025426:	4918      	ldr	r1, [pc, #96]	; (1025488 <PFAIL_APP_vPhase_C_failure_handler+0x74>)
	ms_timers[timer_id].fptr = PFAIL_APP_vNull_action;
 1025428:	4a18      	ldr	r2, [pc, #96]	; (102548c <PFAIL_APP_vPhase_C_failure_handler+0x78>)
 102542a:	651a      	str	r2, [r3, #80]	; 0x50
	Disable_global_interrupt();
 102542c:	2200      	movs	r2, #0
 102542e:	700a      	strb	r2, [r1, #0]
	ms_timers[timer_id].running = false;
 1025430:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	ms_timers[timer_id].timer = 0;
 1025434:	64da      	str	r2, [r3, #76]	; 0x4c
	ms_timers[timer_id].expired = false;
 1025436:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	Enable_global_interrupt();
 102543a:	7008      	strb	r0, [r1, #0]
 102543c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
 1025440:	b662      	cpsie	i
	if ( !PFAIL_APP_bIs_ms_timer_running(PFAIL_PHC_FAILURE_TIMER) ) {
 1025442:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 1025446:	b19b      	cbz	r3, 1025470 <PFAIL_APP_vPhase_C_failure_handler+0x5c>
	if ( (meter.phase_a.failure == true) && (meter.phase_b.failure == true) ) {
 1025448:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 102544c:	b113      	cbz	r3, 1025454 <PFAIL_APP_vPhase_C_failure_handler+0x40>
 102544e:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 1025452:	b903      	cbnz	r3, 1025456 <PFAIL_APP_vPhase_C_failure_handler+0x42>
 1025454:	bd10      	pop	{r4, pc}
		meter.power_failure = true;
 1025456:	2201      	movs	r2, #1
		NIC_APP_vAssert_power_fail();
 1025458:	4b0d      	ldr	r3, [pc, #52]	; (1025490 <PFAIL_APP_vPhase_C_failure_handler+0x7c>)
		meter.power_failure = true;
 102545a:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
		NIC_APP_vAssert_power_fail();
 102545e:	4798      	blx	r3
		if ( executing_pfail_task == false ) {
 1025460:	4b0c      	ldr	r3, [pc, #48]	; (1025494 <PFAIL_APP_vPhase_C_failure_handler+0x80>)
 1025462:	781b      	ldrb	r3, [r3, #0]
 1025464:	2b00      	cmp	r3, #0
 1025466:	d1f5      	bne.n	1025454 <PFAIL_APP_vPhase_C_failure_handler+0x40>
 1025468:	4b0b      	ldr	r3, [pc, #44]	; (1025498 <PFAIL_APP_vPhase_C_failure_handler+0x84>)
}
 102546a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 102546e:	4718      	bx	r3
 1025470:	4a0a      	ldr	r2, [pc, #40]	; (102549c <PFAIL_APP_vPhase_C_failure_handler+0x88>)
 1025472:	4b0b      	ldr	r3, [pc, #44]	; (10254a0 <PFAIL_APP_vPhase_C_failure_handler+0x8c>)
 1025474:	f640 31b8 	movw	r1, #3000	; 0xbb8
 1025478:	2003      	movs	r0, #3
 102547a:	4798      	blx	r3
 102547c:	e7e4      	b.n	1025448 <PFAIL_APP_vPhase_C_failure_handler+0x34>
 102547e:	bf00      	nop
 1025480:	20016c2c 	.word	0x20016c2c
 1025484:	20007744 	.word	0x20007744
 1025488:	2000008d 	.word	0x2000008d
 102548c:	0102521d 	.word	0x0102521d
 1025490:	01024c91 	.word	0x01024c91
 1025494:	20007740 	.word	0x20007740
 1025498:	0102526d 	.word	0x0102526d
 102549c:	0102ba4d 	.word	0x0102ba4d
 10254a0:	01025221 	.word	0x01025221

010254a4 <PFAIL_APP_vInitialize>:
	executing_pfail_task = false;
 10254a4:	4948      	ldr	r1, [pc, #288]	; (10255c8 <PFAIL_APP_vInitialize+0x124>)
	supc_set_monitor_sampling_period(SUPC, SUPC_SMMR_SMSMPL_CSM);
 10254a6:	4a49      	ldr	r2, [pc, #292]	; (10255cc <PFAIL_APP_vInitialize+0x128>)
 10254a8:	4849      	ldr	r0, [pc, #292]	; (10255d0 <PFAIL_APP_vInitialize+0x12c>)
void PFAIL_APP_vInitialize(void) {
 10254aa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	meter.power_failure = true;
 10254ae:	4c49      	ldr	r4, [pc, #292]	; (10255d4 <PFAIL_APP_vInitialize+0x130>)
	RTT->RTT_MR = 34;
 10254b0:	4e49      	ldr	r6, [pc, #292]	; (10255d8 <PFAIL_APP_vInitialize+0x134>)
	ul_previous_time = rtt_read_timer_value(RTT);
 10254b2:	4d4a      	ldr	r5, [pc, #296]	; (10255dc <PFAIL_APP_vInitialize+0x138>)
	executing_pfail_task = false;
 10254b4:	2700      	movs	r7, #0
	meter.power_failure = true;
 10254b6:	2301      	movs	r3, #1
	executing_pfail_task = false;
 10254b8:	700f      	strb	r7, [r1, #0]
	supc_set_monitor_sampling_period(SUPC, SUPC_SMMR_SMSMPL_CSM);
 10254ba:	f44f 7180 	mov.w	r1, #256	; 0x100
	meter.power_failure = true;
 10254be:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
	meter.phase_a.delayed_failure = true;
 10254c2:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
	meter.phase_a.failure = true;
 10254c6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
	meter.phase_b.delayed_failure = true;
 10254ca:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56
	meter.phase_b.failure = true;
 10254ce:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
	meter.phase_c.delayed_failure = true;
 10254d2:	f884 305a 	strb.w	r3, [r4, #90]	; 0x5a
	meter.phase_c.failure = true;
 10254d6:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
	supc_set_monitor_sampling_period(SUPC, SUPC_SMMR_SMSMPL_CSM);
 10254da:	4790      	blx	r2
	supc_set_monitor_threshold( SUPC, SUPC_SMMR_SMTH(PFAIL_TH_RESET_2_2V) );
 10254dc:	2103      	movs	r1, #3
 10254de:	483c      	ldr	r0, [pc, #240]	; (10255d0 <PFAIL_APP_vInitialize+0x12c>)
 10254e0:	4b3f      	ldr	r3, [pc, #252]	; (10255e0 <PFAIL_APP_vInitialize+0x13c>)
 10254e2:	4798      	blx	r3
	supc_enable_monitor_reset(SUPC);	
 10254e4:	483a      	ldr	r0, [pc, #232]	; (10255d0 <PFAIL_APP_vInitialize+0x12c>)
 10254e6:	4b3f      	ldr	r3, [pc, #252]	; (10255e4 <PFAIL_APP_vInitialize+0x140>)
 10254e8:	4798      	blx	r3
	supc_enable_brownout_reset(SUPC);
 10254ea:	4839      	ldr	r0, [pc, #228]	; (10255d0 <PFAIL_APP_vInitialize+0x12c>)
 10254ec:	4b3e      	ldr	r3, [pc, #248]	; (10255e8 <PFAIL_APP_vInitialize+0x144>)
 10254ee:	4798      	blx	r3
	RTT->RTT_MR = 34;
 10254f0:	2322      	movs	r3, #34	; 0x22
 10254f2:	6033      	str	r3, [r6, #0]
	ul_previous_time = rtt_read_timer_value(RTT);
 10254f4:	4630      	mov	r0, r6
 10254f6:	47a8      	blx	r5
	while (ul_previous_time == rtt_read_timer_value(RTT));
 10254f8:	4637      	mov	r7, r6
	ul_previous_time = rtt_read_timer_value(RTT);
 10254fa:	4606      	mov	r6, r0
	while (ul_previous_time == rtt_read_timer_value(RTT));
 10254fc:	4638      	mov	r0, r7
 10254fe:	47a8      	blx	r5
 1025500:	4286      	cmp	r6, r0
 1025502:	d0fb      	beq.n	10254fc <PFAIL_APP_vInitialize+0x58>
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 1025504:	4d39      	ldr	r5, [pc, #228]	; (10255ec <PFAIL_APP_vInitialize+0x148>)
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN | RTT_MR_ALMIEN);
 1025506:	4a3a      	ldr	r2, [pc, #232]	; (10255f0 <PFAIL_APP_vInitialize+0x14c>)
 1025508:	4833      	ldr	r0, [pc, #204]	; (10255d8 <PFAIL_APP_vInitialize+0x134>)
	pio_configure_pin(PFAIL_ZC_PIN, PIO_INPUT | PIO_DEBOUNCE | PIO_IT_FALL_EDGE);
 102550a:	4f3a      	ldr	r7, [pc, #232]	; (10255f4 <PFAIL_APP_vInitialize+0x150>)
	pio_configure_interrupt(PFAIL_ZC_PIO, PFAIL_ZC_PIN_BIT_MASK, PIO_IT_FALL_EDGE);
 102550c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 1025610 <PFAIL_APP_vInitialize+0x16c>
	pio_enable_interrupt( PFAIL_ZC_PIO, PFAIL_ZC_PIN_BIT_MASK );
 1025510:	f8df 8100 	ldr.w	r8, [pc, #256]	; 1025614 <PFAIL_APP_vInitialize+0x170>
 1025514:	2308      	movs	r3, #8
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 1025516:	2600      	movs	r6, #0
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 1025518:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN | RTT_MR_ALMIEN);
 102551c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 1025520:	f8c5 3180 	str.w	r3, [r5, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 1025524:	f885 6303 	strb.w	r6, [r5, #771]	; 0x303
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 1025528:	602b      	str	r3, [r5, #0]
 102552a:	4790      	blx	r2
	pio_configure_pin(PFAIL_ZC_PIN, PIO_INPUT | PIO_DEBOUNCE | PIO_IT_FALL_EDGE);
 102552c:	4932      	ldr	r1, [pc, #200]	; (10255f8 <PFAIL_APP_vInitialize+0x154>)
 102552e:	2010      	movs	r0, #16
 1025530:	47b8      	blx	r7
	pio_configure_interrupt(PFAIL_ZC_PIO, PFAIL_ZC_PIN_BIT_MASK, PIO_IT_FALL_EDGE);
 1025532:	2250      	movs	r2, #80	; 0x50
 1025534:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 1025538:	4830      	ldr	r0, [pc, #192]	; (10255fc <PFAIL_APP_vInitialize+0x158>)
 102553a:	47c8      	blx	r9
	pio_enable_interrupt( PFAIL_ZC_PIO, PFAIL_ZC_PIN_BIT_MASK );
 102553c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 1025540:	482e      	ldr	r0, [pc, #184]	; (10255fc <PFAIL_APP_vInitialize+0x158>)
 1025542:	47c0      	blx	r8
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 1025544:	f44f 6300 	mov.w	r3, #2048	; 0x800
 1025548:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
	pio_configure_pin(PFAIL_ZC_PHA_PIN, PIO_INPUT | PIO_DEBOUNCE | PIO_IT_FALL_EDGE);
 102554c:	492a      	ldr	r1, [pc, #168]	; (10255f8 <PFAIL_APP_vInitialize+0x154>)
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 102554e:	f8c5 3180 	str.w	r3, [r5, #384]	; 0x180
 1025552:	202b      	movs	r0, #43	; 0x2b
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 1025554:	f885 630b 	strb.w	r6, [r5, #779]	; 0x30b
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 1025558:	602b      	str	r3, [r5, #0]
 102555a:	47b8      	blx	r7
	pio_configure_pin(PFAIL_ZC_PHB_PIN, PIO_INPUT | PIO_DEBOUNCE | PIO_IT_FALL_EDGE);
 102555c:	4926      	ldr	r1, [pc, #152]	; (10255f8 <PFAIL_APP_vInitialize+0x154>)
 102555e:	202a      	movs	r0, #42	; 0x2a
 1025560:	47b8      	blx	r7
	pio_configure_pin(PFAIL_ZC_PHC_PIN, PIO_INPUT | PIO_DEBOUNCE | PIO_IT_FALL_EDGE);
 1025562:	4925      	ldr	r1, [pc, #148]	; (10255f8 <PFAIL_APP_vInitialize+0x154>)
 1025564:	2029      	movs	r0, #41	; 0x29
 1025566:	47b8      	blx	r7
	pio_configure_interrupt(PFAIL_ZC_PHA_PHB_PHC_PIO, PFAIL_ZC_PHA_PHB_PHC_PIN_BIT_MASK, PIO_IT_FALL_EDGE);
 1025568:	2250      	movs	r2, #80	; 0x50
 102556a:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 102556e:	4824      	ldr	r0, [pc, #144]	; (1025600 <PFAIL_APP_vInitialize+0x15c>)
 1025570:	47c8      	blx	r9
	pio_enable_interrupt( PFAIL_ZC_PHA_PHB_PHC_PIO, PFAIL_ZC_PHA_PHB_PHC_PIN_BIT_MASK );
 1025572:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 1025576:	4822      	ldr	r0, [pc, #136]	; (1025600 <PFAIL_APP_vInitialize+0x15c>)
 1025578:	47c0      	blx	r8
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 102557a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 102557e:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
 1025582:	4630      	mov	r0, r6
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 1025584:	f8c5 3180 	str.w	r3, [r5, #384]	; 0x180
 1025588:	4a1e      	ldr	r2, [pc, #120]	; (1025604 <PFAIL_APP_vInitialize+0x160>)
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 102558a:	f885 630c 	strb.w	r6, [r5, #780]	; 0x30c
 102558e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 1025592:	602b      	str	r3, [r5, #0]
 1025594:	4b1c      	ldr	r3, [pc, #112]	; (1025608 <PFAIL_APP_vInitialize+0x164>)
 1025596:	4798      	blx	r3
 1025598:	4b1c      	ldr	r3, [pc, #112]	; (102560c <PFAIL_APP_vInitialize+0x168>)
 102559a:	785b      	ldrb	r3, [r3, #1]
	while( ( PFAIL_APP_bIs_ms_timer_expired(PFAIL_POWER_BACK_TIMER) == false ) && (meter.power_failure == true) ) {
 102559c:	b91b      	cbnz	r3, 10255a6 <PFAIL_APP_vInitialize+0x102>
 102559e:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 10255a2:	2b00      	cmp	r3, #0
 10255a4:	d1fb      	bne.n	102559e <PFAIL_APP_vInitialize+0xfa>
	meter.phase_a.delayed_failure = meter.phase_a.failure;
 10255a6:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 10255aa:	b2db      	uxtb	r3, r3
 10255ac:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
	meter.phase_b.delayed_failure = meter.phase_b.failure;
 10255b0:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 10255b4:	b2db      	uxtb	r3, r3
 10255b6:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56
	meter.phase_c.delayed_failure = meter.phase_c.failure;
 10255ba:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 10255be:	b2db      	uxtb	r3, r3
 10255c0:	f884 305a 	strb.w	r3, [r4, #90]	; 0x5a
 10255c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 10255c8:	20007740 	.word	0x20007740
 10255cc:	0102d92d 	.word	0x0102d92d
 10255d0:	400e1410 	.word	0x400e1410
 10255d4:	20016c2c 	.word	0x20016c2c
 10255d8:	400e1430 	.word	0x400e1430
 10255dc:	0102d8fd 	.word	0x0102d8fd
 10255e0:	0102d91d 	.word	0x0102d91d
 10255e4:	0102d93d 	.word	0x0102d93d
 10255e8:	0102d905 	.word	0x0102d905
 10255ec:	e000e100 	.word	0xe000e100
 10255f0:	0102d8e9 	.word	0x0102d8e9
 10255f4:	0102d6e5 	.word	0x0102d6e5
 10255f8:	28000058 	.word	0x28000058
 10255fc:	400e0e00 	.word	0x400e0e00
 1025600:	400e1000 	.word	0x400e1000
 1025604:	0102ba4d 	.word	0x0102ba4d
 1025608:	01025221 	.word	0x01025221
 102560c:	20007744 	.word	0x20007744
 1025610:	0102d6dd 	.word	0x0102d6dd
 1025614:	0102d6a9 	.word	0x0102d6a9

01025618 <PFAIL_APP_vCreate_task>:
void PFAIL_APP_vCreate_task(void) {
 1025618:	b510      	push	{r4, lr}
 102561a:	b084      	sub	sp, #16
	xTaskCreate( PFAIL_APP_vRtos_task, (const signed char * const ) "PFAIL_APP_vTask", PFAIL_STACK_SIZE, NULL, PFAIL_APP_vTask_PRIO, &pfail_os_task_id );
 102561c:	2300      	movs	r3, #0
 102561e:	4907      	ldr	r1, [pc, #28]	; (102563c <PFAIL_APP_vCreate_task+0x24>)
 1025620:	9101      	str	r1, [sp, #4]
 1025622:	2204      	movs	r2, #4
 1025624:	9200      	str	r2, [sp, #0]
 1025626:	9303      	str	r3, [sp, #12]
 1025628:	9302      	str	r3, [sp, #8]
 102562a:	f44f 7282 	mov.w	r2, #260	; 0x104
 102562e:	4904      	ldr	r1, [pc, #16]	; (1025640 <PFAIL_APP_vCreate_task+0x28>)
 1025630:	4c04      	ldr	r4, [pc, #16]	; (1025644 <PFAIL_APP_vCreate_task+0x2c>)
 1025632:	4805      	ldr	r0, [pc, #20]	; (1025648 <PFAIL_APP_vCreate_task+0x30>)
 1025634:	47a0      	blx	r4
}
 1025636:	b004      	add	sp, #16
 1025638:	bd10      	pop	{r4, pc}
 102563a:	bf00      	nop
 102563c:	2001714c 	.word	0x2001714c
 1025640:	0103166c 	.word	0x0103166c
 1025644:	0102e7f9 	.word	0x0102e7f9
 1025648:	01025c05 	.word	0x01025c05

0102564c <PFAIL_APP_vRegister_power_up>:
*
* \param void
* \retval void
******************************************************************************
*/
void PFAIL_APP_vRegister_power_up(void) {
 102564c:	b570      	push	{r4, r5, r6, lr}
	
	EVNT_APP_vRegister_event((uint8_t)PRIMARY_POWER_UP, 0, true, END_DEVICE, rtc.utc_timestamp);
 102564e:	4e18      	ldr	r6, [pc, #96]	; (10256b0 <PFAIL_APP_vRegister_power_up+0x64>)

	if ( !meter.phase_a.failure ) {
 1025650:	4c18      	ldr	r4, [pc, #96]	; (10256b4 <PFAIL_APP_vRegister_power_up+0x68>)
	EVNT_APP_vRegister_event((uint8_t)PRIMARY_POWER_UP, 0, true, END_DEVICE, rtc.utc_timestamp);
 1025652:	6873      	ldr	r3, [r6, #4]
 1025654:	4d18      	ldr	r5, [pc, #96]	; (10256b8 <PFAIL_APP_vRegister_power_up+0x6c>)
void PFAIL_APP_vRegister_power_up(void) {
 1025656:	b082      	sub	sp, #8
	EVNT_APP_vRegister_event((uint8_t)PRIMARY_POWER_UP, 0, true, END_DEVICE, rtc.utc_timestamp);
 1025658:	2201      	movs	r2, #1
 102565a:	9300      	str	r3, [sp, #0]
 102565c:	2300      	movs	r3, #0
 102565e:	4619      	mov	r1, r3
 1025660:	2002      	movs	r0, #2
 1025662:	47a8      	blx	r5
	if ( !meter.phase_a.failure ) {
 1025664:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 1025668:	b1c2      	cbz	r2, 102569c <PFAIL_APP_vRegister_power_up+0x50>
		EVNT_APP_vRegister_event((uint8_t)PHASE_A_RESTORATION, 0, false, END_DEVICE, rtc.utc_timestamp);
	}

	if ( !meter.phase_b.failure ) {
 102566a:	f894 2055 	ldrb.w	r2, [r4, #85]	; 0x55
 102566e:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 1025672:	b162      	cbz	r2, 102568e <PFAIL_APP_vRegister_power_up+0x42>
		EVNT_APP_vRegister_event((uint8_t)PHASE_B_RESTORATION, 0, false, END_DEVICE, rtc.utc_timestamp);
	}

	if ( !meter.phase_c.failure ) {
 1025674:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 1025678:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 102567c:	b92a      	cbnz	r2, 102568a <PFAIL_APP_vRegister_power_up+0x3e>
		EVNT_APP_vRegister_event((uint8_t)PHASE_C_RESTORATION, 0, false, END_DEVICE, rtc.utc_timestamp);
 102567e:	6872      	ldr	r2, [r6, #4]
 1025680:	9200      	str	r2, [sp, #0]
 1025682:	4619      	mov	r1, r3
 1025684:	461a      	mov	r2, r3
 1025686:	2006      	movs	r0, #6
 1025688:	47a8      	blx	r5
	}
}
 102568a:	b002      	add	sp, #8
 102568c:	bd70      	pop	{r4, r5, r6, pc}
		EVNT_APP_vRegister_event((uint8_t)PHASE_B_RESTORATION, 0, false, END_DEVICE, rtc.utc_timestamp);
 102568e:	6872      	ldr	r2, [r6, #4]
 1025690:	9200      	str	r2, [sp, #0]
 1025692:	4619      	mov	r1, r3
 1025694:	461a      	mov	r2, r3
 1025696:	2004      	movs	r0, #4
 1025698:	47a8      	blx	r5
 102569a:	e7eb      	b.n	1025674 <PFAIL_APP_vRegister_power_up+0x28>
 102569c:	f002 03ff 	and.w	r3, r2, #255	; 0xff
		EVNT_APP_vRegister_event((uint8_t)PHASE_A_RESTORATION, 0, false, END_DEVICE, rtc.utc_timestamp);
 10256a0:	6872      	ldr	r2, [r6, #4]
 10256a2:	9200      	str	r2, [sp, #0]
 10256a4:	4619      	mov	r1, r3
 10256a6:	461a      	mov	r2, r3
 10256a8:	2002      	movs	r0, #2
 10256aa:	47a8      	blx	r5
 10256ac:	e7dd      	b.n	102566a <PFAIL_APP_vRegister_power_up+0x1e>
 10256ae:	bf00      	nop
 10256b0:	20017160 	.word	0x20017160
 10256b4:	20016c2c 	.word	0x20016c2c
 10256b8:	01019961 	.word	0x01019961

010256bc <PFAIL_APP_vRegister_power_down>:
*
* \param void
* \retval void
******************************************************************************
*/
void PFAIL_APP_vRegister_power_down(void) {
 10256bc:	b530      	push	{r4, r5, lr}
 10256be:	b085      	sub	sp, #20
	
	uint32_t nbr_power_outages = 0;
 10256c0:	ac04      	add	r4, sp, #16
 10256c2:	2300      	movs	r3, #0
 10256c4:	f844 3d04 	str.w	r3, [r4, #-4]!
	
	EEPROM_reader(MT_3_NBR_POWER_OUTAGES_ADDR, &nbr_power_outages, 4);
 10256c8:	2204      	movs	r2, #4
 10256ca:	4621      	mov	r1, r4
 10256cc:	4b11      	ldr	r3, [pc, #68]	; (1025714 <PFAIL_APP_vRegister_power_down+0x58>)
	}
	else {
		nbr_power_outages = 1;
	}
	
	EEPROM_writer( MT_3_NBR_POWER_OUTAGES_ADDR, &nbr_power_outages, 4 );
 10256ce:	4d12      	ldr	r5, [pc, #72]	; (1025718 <PFAIL_APP_vRegister_power_down+0x5c>)
	EEPROM_reader(MT_3_NBR_POWER_OUTAGES_ADDR, &nbr_power_outages, 4);
 10256d0:	f640 7085 	movw	r0, #3973	; 0xf85
 10256d4:	4798      	blx	r3
	if (nbr_power_outages < 0xFFFFFFFF) {
 10256d6:	9b03      	ldr	r3, [sp, #12]
 10256d8:	1c5a      	adds	r2, r3, #1
		nbr_power_outages++;
 10256da:	bf14      	ite	ne
 10256dc:	3301      	addne	r3, #1
		nbr_power_outages = 1;
 10256de:	2301      	moveq	r3, #1
	EEPROM_writer( MT_3_NBR_POWER_OUTAGES_ADDR, &nbr_power_outages, 4 );
 10256e0:	4621      	mov	r1, r4
 10256e2:	2204      	movs	r2, #4
 10256e4:	f640 7085 	movw	r0, #3973	; 0xf85
		nbr_power_outages = 1;
 10256e8:	9303      	str	r3, [sp, #12]
	EEPROM_writer( MT_3_NBR_POWER_OUTAGES_ADDR, &nbr_power_outages, 4 );
 10256ea:	47a8      	blx	r5
	EEPROM_writer( MT_4_MCU_RESET_POWER_FAILURE_ADDR, &nbr_power_outages, 2 );
 10256ec:	4621      	mov	r1, r4
 10256ee:	2202      	movs	r2, #2
 10256f0:	f249 2020 	movw	r0, #37408	; 0x9220
 10256f4:	47a8      	blx	r5
	
	EVNT_APP_vRegister_event(PRIMARY_POWER_DOWN, 0, true, END_DEVICE, rtc.utc_timestamp);
 10256f6:	4b09      	ldr	r3, [pc, #36]	; (102571c <PFAIL_APP_vRegister_power_down+0x60>)
 10256f8:	4c09      	ldr	r4, [pc, #36]	; (1025720 <PFAIL_APP_vRegister_power_down+0x64>)
 10256fa:	685b      	ldr	r3, [r3, #4]
 10256fc:	9300      	str	r3, [sp, #0]
 10256fe:	2201      	movs	r2, #1
 1025700:	2300      	movs	r3, #0
 1025702:	4619      	mov	r1, r3
 1025704:	4610      	mov	r0, r2
 1025706:	47a0      	blx	r4
	GRAL_APP_vSet_flag_st_3_ed_std_status1(POWER_FAILURE_FLAG);
 1025708:	200b      	movs	r0, #11
 102570a:	4b06      	ldr	r3, [pc, #24]	; (1025724 <PFAIL_APP_vRegister_power_down+0x68>)
 102570c:	4798      	blx	r3
}
 102570e:	b005      	add	sp, #20
 1025710:	bd30      	pop	{r4, r5, pc}
 1025712:	bf00      	nop
 1025714:	01017511 	.word	0x01017511
 1025718:	01017509 	.word	0x01017509
 102571c:	20017160 	.word	0x20017160
 1025720:	01019961 	.word	0x01019961
 1025724:	0101a219 	.word	0x0101a219

01025728 <PIOA_Handler>:
 */
void PIOA_Handler(void) {

	uint32_t zc_status;

	zc_status = pio_get_interrupt_status(PFAIL_ZC_PIO);
 1025728:	4b12      	ldr	r3, [pc, #72]	; (1025774 <PIOA_Handler+0x4c>)
 102572a:	4813      	ldr	r0, [pc, #76]	; (1025778 <PIOA_Handler+0x50>)
void PIOA_Handler(void) {
 102572c:	b510      	push	{r4, lr}
	zc_status = pio_get_interrupt_status(PFAIL_ZC_PIO);
 102572e:	4798      	blx	r3
	
	if (zc_status & PFAIL_ZC_PIN_BIT_MASK) {
 1025730:	03c3      	lsls	r3, r0, #15
 1025732:	d400      	bmi.n	1025736 <PIOA_Handler+0xe>
 1025734:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i");
 1025736:	b672      	cpsid	i
 1025738:	f3bf 8f5f 	dmb	sy
	ms_timers[timer_id].running = false;
 102573c:	4a0f      	ldr	r2, [pc, #60]	; (102577c <PIOA_Handler+0x54>)
	Disable_global_interrupt();
 102573e:	4910      	ldr	r1, [pc, #64]	; (1025780 <PIOA_Handler+0x58>)
	ms_timers[timer_id].fptr = PFAIL_APP_vNull_action;
 1025740:	4b10      	ldr	r3, [pc, #64]	; (1025784 <PIOA_Handler+0x5c>)
 1025742:	65d3      	str	r3, [r2, #92]	; 0x5c
	Enable_global_interrupt();
 1025744:	2001      	movs	r0, #1
	Disable_global_interrupt();
 1025746:	2300      	movs	r3, #0
 1025748:	700b      	strb	r3, [r1, #0]
	ms_timers[timer_id].running = false;
 102574a:	f882 3054 	strb.w	r3, [r2, #84]	; 0x54
	ms_timers[timer_id].timer = 0;
 102574e:	6593      	str	r3, [r2, #88]	; 0x58
	ms_timers[timer_id].expired = false;
 1025750:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
	Enable_global_interrupt();
 1025754:	7008      	strb	r0, [r1, #0]
 1025756:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
 102575a:	b662      	cpsie	i
	meter.power_failure = false;
 102575c:	490a      	ldr	r1, [pc, #40]	; (1025788 <PIOA_Handler+0x60>)
	NIC_APP_vDeassert_power_fail();
 102575e:	4a0b      	ldr	r2, [pc, #44]	; (102578c <PIOA_Handler+0x64>)
	meter.power_failure = false;
 1025760:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
	NIC_APP_vDeassert_power_fail();
 1025764:	4790      	blx	r2
 1025766:	4a0a      	ldr	r2, [pc, #40]	; (1025790 <PIOA_Handler+0x68>)
 1025768:	4b0a      	ldr	r3, [pc, #40]	; (1025794 <PIOA_Handler+0x6c>)
 102576a:	2164      	movs	r1, #100	; 0x64
 102576c:	2007      	movs	r0, #7
	
		PFAIL_APP_vReset_zc_total_detector();
	}
}
 102576e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 1025772:	4718      	bx	r3
 1025774:	0102d6b1 	.word	0x0102d6b1
 1025778:	400e0e00 	.word	0x400e0e00
 102577c:	20007744 	.word	0x20007744
 1025780:	2000008d 	.word	0x2000008d
 1025784:	0102521d 	.word	0x0102521d
 1025788:	20016c2c 	.word	0x20016c2c
 102578c:	01024ca5 	.word	0x01024ca5
 1025790:	010253d1 	.word	0x010253d1
 1025794:	01025221 	.word	0x01025221

01025798 <PIOB_Handler>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
void PIOB_Handler(void) {
 1025798:	b530      	push	{r4, r5, lr}

	volatile uint32_t zc_abc_status = pio_get_interrupt_status(PFAIL_ZC_PHA_PHB_PHC_PIO);
 102579a:	4b66      	ldr	r3, [pc, #408]	; (1025934 <PIOB_Handler+0x19c>)
 102579c:	4866      	ldr	r0, [pc, #408]	; (1025938 <PIOB_Handler+0x1a0>)
void PIOB_Handler(void) {
 102579e:	b083      	sub	sp, #12
	volatile uint32_t zc_abc_status = pio_get_interrupt_status(PFAIL_ZC_PHA_PHB_PHC_PIO);
 10257a0:	4798      	blx	r3
 10257a2:	9001      	str	r0, [sp, #4]

	if (zc_abc_status & PFAIL_ZC_PHA_PIN_BIT_MASK) {
 10257a4:	9b01      	ldr	r3, [sp, #4]
 10257a6:	0519      	lsls	r1, r3, #20
 10257a8:	d47f      	bmi.n	10258aa <PIOB_Handler+0x112>

		PFAIL_APP_vReset_zc_pha_detector();
	}

	if (zc_abc_status & PFAIL_ZC_PHB_PIN_BIT_MASK) {
 10257aa:	9b01      	ldr	r3, [sp, #4]
 10257ac:	055a      	lsls	r2, r3, #21
 10257ae:	d445      	bmi.n	102583c <PIOB_Handler+0xa4>

		PFAIL_APP_vReset_zc_phb_detector();
	}

	if (zc_abc_status & PFAIL_ZC_PHC_PIN_BIT_MASK) {
 10257b0:	9b01      	ldr	r3, [sp, #4]
 10257b2:	059b      	lsls	r3, r3, #22
 10257b4:	d401      	bmi.n	10257ba <PIOB_Handler+0x22>

		PFAIL_APP_vReset_zc_phc_detector();
	}
}
 10257b6:	b003      	add	sp, #12
 10257b8:	bd30      	pop	{r4, r5, pc}
  __ASM volatile ("cpsid i");
 10257ba:	b672      	cpsid	i
 10257bc:	f3bf 8f5f 	dmb	sy
	ms_timers[timer_id].running = false;
 10257c0:	4b5e      	ldr	r3, [pc, #376]	; (102593c <PIOB_Handler+0x1a4>)
	Disable_global_interrupt();
 10257c2:	495f      	ldr	r1, [pc, #380]	; (1025940 <PIOB_Handler+0x1a8>)
	ms_timers[timer_id].fptr = PFAIL_APP_vNull_action;
 10257c4:	4c5f      	ldr	r4, [pc, #380]	; (1025944 <PIOB_Handler+0x1ac>)
 10257c6:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
	Disable_global_interrupt();
 10257ca:	2200      	movs	r2, #0
	Enable_global_interrupt();
 10257cc:	2001      	movs	r0, #1
	Disable_global_interrupt();
 10257ce:	700a      	strb	r2, [r1, #0]
	ms_timers[timer_id].running = false;
 10257d0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	ms_timers[timer_id].timer = 0;
 10257d4:	67da      	str	r2, [r3, #124]	; 0x7c
	ms_timers[timer_id].expired = false;
 10257d6:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	Enable_global_interrupt();
 10257da:	7008      	strb	r0, [r1, #0]
 10257dc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
 10257e0:	b662      	cpsie	i
  __ASM volatile ("cpsid i");
 10257e2:	b672      	cpsid	i
 10257e4:	f3bf 8f5f 	dmb	sy
	Disable_global_interrupt();
 10257e8:	700a      	strb	r2, [r1, #0]
	ms_timers[timer_id].running = false;
 10257ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	ms_timers[timer_id].timer = 0;
 10257ee:	629a      	str	r2, [r3, #40]	; 0x28
	ms_timers[timer_id].expired = false;
 10257f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	ms_timers[timer_id].fptr = PFAIL_APP_vNull_action;
 10257f4:	62dc      	str	r4, [r3, #44]	; 0x2c
	Enable_global_interrupt();
 10257f6:	7008      	strb	r0, [r1, #0]
 10257f8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
 10257fc:	b662      	cpsie	i
	if ( meter.phase_c.delayed_failure && (!meter.system_state.initialiting) ) {
 10257fe:	4c52      	ldr	r4, [pc, #328]	; (1025948 <PIOB_Handler+0x1b0>)
 1025800:	f894 205a 	ldrb.w	r2, [r4, #90]	; 0x5a
 1025804:	b162      	cbz	r2, 1025820 <PIOB_Handler+0x88>
 1025806:	f894 2020 	ldrb.w	r2, [r4, #32]
 102580a:	b94a      	cbnz	r2, 1025820 <PIOB_Handler+0x88>
		if ( !PFAIL_APP_bIs_ms_timer_running(PFAIL_PHC_RESTORATION_TIMER) ) {
 102580c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 1025810:	b933      	cbnz	r3, 1025820 <PIOB_Handler+0x88>
 1025812:	4a4e      	ldr	r2, [pc, #312]	; (102594c <PIOB_Handler+0x1b4>)
 1025814:	4d4e      	ldr	r5, [pc, #312]	; (1025950 <PIOB_Handler+0x1b8>)
 1025816:	f640 31b8 	movw	r1, #3000	; 0xbb8
 102581a:	2006      	movs	r0, #6
 102581c:	47a8      	blx	r5
 102581e:	e000      	b.n	1025822 <PIOB_Handler+0x8a>
 1025820:	4d4b      	ldr	r5, [pc, #300]	; (1025950 <PIOB_Handler+0x1b8>)
	NIC_APP_vDeassert_power_fail();
 1025822:	4a4c      	ldr	r2, [pc, #304]	; (1025954 <PIOB_Handler+0x1bc>)
	meter.power_failure = false;
 1025824:	2300      	movs	r3, #0
 1025826:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
	meter.phase_c.failure = false;
 102582a:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
	NIC_APP_vDeassert_power_fail();
 102582e:	4790      	blx	r2
 1025830:	4a49      	ldr	r2, [pc, #292]	; (1025958 <PIOB_Handler+0x1c0>)
 1025832:	2164      	movs	r1, #100	; 0x64
 1025834:	200a      	movs	r0, #10
 1025836:	47a8      	blx	r5
}
 1025838:	b003      	add	sp, #12
 102583a:	bd30      	pop	{r4, r5, pc}
  __ASM volatile ("cpsid i");
 102583c:	b672      	cpsid	i
 102583e:	f3bf 8f5f 	dmb	sy
	ms_timers[timer_id].running = false;
 1025842:	4b3e      	ldr	r3, [pc, #248]	; (102593c <PIOB_Handler+0x1a4>)
	Disable_global_interrupt();
 1025844:	493e      	ldr	r1, [pc, #248]	; (1025940 <PIOB_Handler+0x1a8>)
	ms_timers[timer_id].fptr = PFAIL_APP_vNull_action;
 1025846:	4c3f      	ldr	r4, [pc, #252]	; (1025944 <PIOB_Handler+0x1ac>)
 1025848:	675c      	str	r4, [r3, #116]	; 0x74
	Disable_global_interrupt();
 102584a:	2200      	movs	r2, #0
	Enable_global_interrupt();
 102584c:	2001      	movs	r0, #1
	Disable_global_interrupt();
 102584e:	700a      	strb	r2, [r1, #0]
	ms_timers[timer_id].running = false;
 1025850:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	ms_timers[timer_id].timer = 0;
 1025854:	671a      	str	r2, [r3, #112]	; 0x70
	ms_timers[timer_id].expired = false;
 1025856:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	Enable_global_interrupt();
 102585a:	7008      	strb	r0, [r1, #0]
 102585c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
 1025860:	b662      	cpsie	i
  __ASM volatile ("cpsid i");
 1025862:	b672      	cpsid	i
 1025864:	f3bf 8f5f 	dmb	sy
	Disable_global_interrupt();
 1025868:	700a      	strb	r2, [r1, #0]
	ms_timers[timer_id].running = false;
 102586a:	761a      	strb	r2, [r3, #24]
	ms_timers[timer_id].timer = 0;
 102586c:	61da      	str	r2, [r3, #28]
	ms_timers[timer_id].expired = false;
 102586e:	765a      	strb	r2, [r3, #25]
	ms_timers[timer_id].fptr = PFAIL_APP_vNull_action;
 1025870:	621c      	str	r4, [r3, #32]
	Enable_global_interrupt();
 1025872:	7008      	strb	r0, [r1, #0]
 1025874:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
 1025878:	b662      	cpsie	i
	if ( meter.phase_b.delayed_failure && (!meter.system_state.initialiting) ) {
 102587a:	4c33      	ldr	r4, [pc, #204]	; (1025948 <PIOB_Handler+0x1b0>)
 102587c:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
 1025880:	b132      	cbz	r2, 1025890 <PIOB_Handler+0xf8>
 1025882:	f894 2020 	ldrb.w	r2, [r4, #32]
 1025886:	b91a      	cbnz	r2, 1025890 <PIOB_Handler+0xf8>
		if ( !PFAIL_APP_bIs_ms_timer_running(PFAIL_PHB_RESTORATION_TIMER) ) {
 1025888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 102588c:	2b00      	cmp	r3, #0
 102588e:	d042      	beq.n	1025916 <PIOB_Handler+0x17e>
 1025890:	4d2f      	ldr	r5, [pc, #188]	; (1025950 <PIOB_Handler+0x1b8>)
	NIC_APP_vDeassert_power_fail();
 1025892:	4a30      	ldr	r2, [pc, #192]	; (1025954 <PIOB_Handler+0x1bc>)
	meter.power_failure = false;
 1025894:	2300      	movs	r3, #0
 1025896:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
	meter.phase_b.failure = false;
 102589a:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
	NIC_APP_vDeassert_power_fail();
 102589e:	4790      	blx	r2
 10258a0:	4a2e      	ldr	r2, [pc, #184]	; (102595c <PIOB_Handler+0x1c4>)
 10258a2:	2164      	movs	r1, #100	; 0x64
 10258a4:	2009      	movs	r0, #9
 10258a6:	47a8      	blx	r5
 10258a8:	e782      	b.n	10257b0 <PIOB_Handler+0x18>
  __ASM volatile ("cpsid i");
 10258aa:	b672      	cpsid	i
 10258ac:	f3bf 8f5f 	dmb	sy
	ms_timers[timer_id].running = false;
 10258b0:	4b22      	ldr	r3, [pc, #136]	; (102593c <PIOB_Handler+0x1a4>)
	Disable_global_interrupt();
 10258b2:	4923      	ldr	r1, [pc, #140]	; (1025940 <PIOB_Handler+0x1a8>)
	ms_timers[timer_id].fptr = PFAIL_APP_vNull_action;
 10258b4:	4c23      	ldr	r4, [pc, #140]	; (1025944 <PIOB_Handler+0x1ac>)
 10258b6:	669c      	str	r4, [r3, #104]	; 0x68
	Disable_global_interrupt();
 10258b8:	2200      	movs	r2, #0
	Enable_global_interrupt();
 10258ba:	2001      	movs	r0, #1
	Disable_global_interrupt();
 10258bc:	700a      	strb	r2, [r1, #0]
	ms_timers[timer_id].running = false;
 10258be:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	ms_timers[timer_id].timer = 0;
 10258c2:	665a      	str	r2, [r3, #100]	; 0x64
	ms_timers[timer_id].expired = false;
 10258c4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	Enable_global_interrupt();
 10258c8:	7008      	strb	r0, [r1, #0]
 10258ca:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
 10258ce:	b662      	cpsie	i
  __ASM volatile ("cpsid i");
 10258d0:	b672      	cpsid	i
 10258d2:	f3bf 8f5f 	dmb	sy
	Disable_global_interrupt();
 10258d6:	700a      	strb	r2, [r1, #0]
	ms_timers[timer_id].running = false;
 10258d8:	731a      	strb	r2, [r3, #12]
	ms_timers[timer_id].timer = 0;
 10258da:	611a      	str	r2, [r3, #16]
	ms_timers[timer_id].expired = false;
 10258dc:	735a      	strb	r2, [r3, #13]
	ms_timers[timer_id].fptr = PFAIL_APP_vNull_action;
 10258de:	615c      	str	r4, [r3, #20]
	Enable_global_interrupt();
 10258e0:	7008      	strb	r0, [r1, #0]
 10258e2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
 10258e6:	b662      	cpsie	i
	if ( meter.phase_a.delayed_failure && (!meter.system_state.initialiting) ) {
 10258e8:	4c17      	ldr	r4, [pc, #92]	; (1025948 <PIOB_Handler+0x1b0>)
 10258ea:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 10258ee:	b12a      	cbz	r2, 10258fc <PIOB_Handler+0x164>
 10258f0:	f894 2020 	ldrb.w	r2, [r4, #32]
 10258f4:	b912      	cbnz	r2, 10258fc <PIOB_Handler+0x164>
		if ( !PFAIL_APP_bIs_ms_timer_running(PFAIL_PHA_RESTORATION_TIMER) ) {
 10258f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 10258fa:	b19b      	cbz	r3, 1025924 <PIOB_Handler+0x18c>
 10258fc:	4d14      	ldr	r5, [pc, #80]	; (1025950 <PIOB_Handler+0x1b8>)
	NIC_APP_vDeassert_power_fail();
 10258fe:	4a15      	ldr	r2, [pc, #84]	; (1025954 <PIOB_Handler+0x1bc>)
	meter.power_failure = false;
 1025900:	2300      	movs	r3, #0
 1025902:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
	meter.phase_a.failure = false;
 1025906:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
	NIC_APP_vDeassert_power_fail();
 102590a:	4790      	blx	r2
 102590c:	4a14      	ldr	r2, [pc, #80]	; (1025960 <PIOB_Handler+0x1c8>)
 102590e:	2164      	movs	r1, #100	; 0x64
 1025910:	2008      	movs	r0, #8
 1025912:	47a8      	blx	r5
 1025914:	e749      	b.n	10257aa <PIOB_Handler+0x12>
 1025916:	4a0d      	ldr	r2, [pc, #52]	; (102594c <PIOB_Handler+0x1b4>)
 1025918:	4d0d      	ldr	r5, [pc, #52]	; (1025950 <PIOB_Handler+0x1b8>)
 102591a:	f640 31b8 	movw	r1, #3000	; 0xbb8
 102591e:	2005      	movs	r0, #5
 1025920:	47a8      	blx	r5
 1025922:	e7b6      	b.n	1025892 <PIOB_Handler+0xfa>
 1025924:	4a09      	ldr	r2, [pc, #36]	; (102594c <PIOB_Handler+0x1b4>)
 1025926:	4d0a      	ldr	r5, [pc, #40]	; (1025950 <PIOB_Handler+0x1b8>)
 1025928:	f640 31b8 	movw	r1, #3000	; 0xbb8
 102592c:	2004      	movs	r0, #4
 102592e:	47a8      	blx	r5
 1025930:	e7e5      	b.n	10258fe <PIOB_Handler+0x166>
 1025932:	bf00      	nop
 1025934:	0102d6b1 	.word	0x0102d6b1
 1025938:	400e1000 	.word	0x400e1000
 102593c:	20007744 	.word	0x20007744
 1025940:	2000008d 	.word	0x2000008d
 1025944:	0102521d 	.word	0x0102521d
 1025948:	20016c2c 	.word	0x20016c2c
 102594c:	0102ba4d 	.word	0x0102ba4d
 1025950:	01025221 	.word	0x01025221
 1025954:	01024ca5 	.word	0x01024ca5
 1025958:	01025415 	.word	0x01025415
 102595c:	010252b9 	.word	0x010252b9
 1025960:	01025345 	.word	0x01025345

01025964 <PFAIL_APP_v3ph_failure_detection>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
void PFAIL_APP_v3ph_failure_detection(void) {
 1025964:	b5f0      	push	{r4, r5, r6, r7, lr}
	return ms_timers[timer_id].expired;
 1025966:	4c67      	ldr	r4, [pc, #412]	; (1025b04 <PFAIL_APP_v3ph_failure_detection+0x1a0>)

	// The time necessary to consider Phase A power failure has elapsed
	if ( PFAIL_APP_bIs_ms_timer_expired(PFAIL_PHA_FAILURE_TIMER) ) {
 1025968:	7b63      	ldrb	r3, [r4, #13]
void PFAIL_APP_v3ph_failure_detection(void) {
 102596a:	b083      	sub	sp, #12
	if ( PFAIL_APP_bIs_ms_timer_expired(PFAIL_PHA_FAILURE_TIMER) ) {
 102596c:	2b00      	cmp	r3, #0
 102596e:	f040 80ac 	bne.w	1025aca <PFAIL_APP_v3ph_failure_detection+0x166>
		EVNT_APP_vRegister_event((uint8_t)PHASE_A_FAILURE, 0, false, END_DEVICE, rtc.utc_timestamp);
		PFAIL_APP_vReset_ms_timer(PFAIL_PHA_FAILURE_TIMER);
	}

	// The time necessary to consider Phase B power failure has elapsed
	if ( PFAIL_APP_bIs_ms_timer_expired(PFAIL_PHB_FAILURE_TIMER) ) {
 1025972:	7e63      	ldrb	r3, [r4, #25]
 1025974:	2b00      	cmp	r3, #0
 1025976:	f040 808b 	bne.w	1025a90 <PFAIL_APP_v3ph_failure_detection+0x12c>
		EVNT_APP_vRegister_event((uint8_t)PHASE_B_FAILURE, 0, false, END_DEVICE, rtc.utc_timestamp);
		PFAIL_APP_vReset_ms_timer(PFAIL_PHB_FAILURE_TIMER);
	}

	// The time necessary to consider Phase C power failure has elapsed
	if ( PFAIL_APP_bIs_ms_timer_expired(PFAIL_PHC_FAILURE_TIMER) ) {
 102597a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 102597e:	2b00      	cmp	r3, #0
 1025980:	d167      	bne.n	1025a52 <PFAIL_APP_v3ph_failure_detection+0xee>
		EVNT_APP_vRegister_event((uint8_t)PHASE_C_FAILURE, 0, false, END_DEVICE, rtc.utc_timestamp);
		PFAIL_APP_vReset_ms_timer(PFAIL_PHC_FAILURE_TIMER);
	}

	// The time necessary to consider Phase A restoration has elapsed
	if ( PFAIL_APP_bIs_ms_timer_expired(PFAIL_PHA_RESTORATION_TIMER) ) {
 1025982:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 1025986:	2b00      	cmp	r3, #0
 1025988:	d144      	bne.n	1025a14 <PFAIL_APP_v3ph_failure_detection+0xb0>
		EVNT_APP_vRegister_event((uint8_t)PHASE_A_RESTORATION, 0, false, END_DEVICE, rtc.utc_timestamp);
		PFAIL_APP_vReset_ms_timer(PFAIL_PHA_RESTORATION_TIMER);
	}

	// The time necessary to consider Phase B restoration has elapsed
	if ( PFAIL_APP_bIs_ms_timer_expired(PFAIL_PHB_RESTORATION_TIMER) ) {
 102598a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 102598e:	bb13      	cbnz	r3, 10259d6 <PFAIL_APP_v3ph_failure_detection+0x72>
		EVNT_APP_vRegister_event((uint8_t)PHASE_B_RESTORATION, 0, false, END_DEVICE, rtc.utc_timestamp);
		PFAIL_APP_vReset_ms_timer(PFAIL_PHB_RESTORATION_TIMER);
	}

	// The time necessary to consider Phase C restoration has elapsed
	if ( PFAIL_APP_bIs_ms_timer_expired(PFAIL_PHC_RESTORATION_TIMER) ) {
 1025990:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 1025994:	b1eb      	cbz	r3, 10259d2 <PFAIL_APP_v3ph_failure_detection+0x6e>

		meter.phase_c.delayed_failure = false;
		EVNT_APP_vRegister_event((uint8_t)PHASE_C_RESTORATION, 0, false, END_DEVICE, rtc.utc_timestamp);
 1025996:	4b5c      	ldr	r3, [pc, #368]	; (1025b08 <PFAIL_APP_v3ph_failure_detection+0x1a4>)
		meter.phase_c.delayed_failure = false;
 1025998:	4f5c      	ldr	r7, [pc, #368]	; (1025b0c <PFAIL_APP_v3ph_failure_detection+0x1a8>)
		EVNT_APP_vRegister_event((uint8_t)PHASE_C_RESTORATION, 0, false, END_DEVICE, rtc.utc_timestamp);
 102599a:	685b      	ldr	r3, [r3, #4]
 102599c:	9300      	str	r3, [sp, #0]
		meter.phase_c.delayed_failure = false;
 102599e:	2500      	movs	r5, #0
		EVNT_APP_vRegister_event((uint8_t)PHASE_C_RESTORATION, 0, false, END_DEVICE, rtc.utc_timestamp);
 10259a0:	462b      	mov	r3, r5
 10259a2:	462a      	mov	r2, r5
 10259a4:	4629      	mov	r1, r5
 10259a6:	2006      	movs	r0, #6
 10259a8:	4e59      	ldr	r6, [pc, #356]	; (1025b10 <PFAIL_APP_v3ph_failure_detection+0x1ac>)
		meter.phase_c.delayed_failure = false;
 10259aa:	f887 505a 	strb.w	r5, [r7, #90]	; 0x5a
		EVNT_APP_vRegister_event((uint8_t)PHASE_C_RESTORATION, 0, false, END_DEVICE, rtc.utc_timestamp);
 10259ae:	47b0      	blx	r6
  __ASM volatile ("cpsid i");
 10259b0:	b672      	cpsid	i
 10259b2:	f3bf 8f5f 	dmb	sy
	Disable_global_interrupt();
 10259b6:	4b57      	ldr	r3, [pc, #348]	; (1025b14 <PFAIL_APP_v3ph_failure_detection+0x1b0>)
	ms_timers[timer_id].fptr = PFAIL_APP_vNull_action;
 10259b8:	4957      	ldr	r1, [pc, #348]	; (1025b18 <PFAIL_APP_v3ph_failure_detection+0x1b4>)
	Disable_global_interrupt();
 10259ba:	701d      	strb	r5, [r3, #0]
	Enable_global_interrupt();
 10259bc:	2201      	movs	r2, #1
	ms_timers[timer_id].timer = 0;
 10259be:	64e5      	str	r5, [r4, #76]	; 0x4c
	ms_timers[timer_id].running = false;
 10259c0:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
	ms_timers[timer_id].expired = false;
 10259c4:	f884 5049 	strb.w	r5, [r4, #73]	; 0x49
	ms_timers[timer_id].fptr = PFAIL_APP_vNull_action;
 10259c8:	6521      	str	r1, [r4, #80]	; 0x50
	Enable_global_interrupt();
 10259ca:	701a      	strb	r2, [r3, #0]
 10259cc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
 10259d0:	b662      	cpsie	i
		PFAIL_APP_vReset_ms_timer(PFAIL_PHC_RESTORATION_TIMER);
	}
}
 10259d2:	b003      	add	sp, #12
 10259d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EVNT_APP_vRegister_event((uint8_t)PHASE_B_RESTORATION, 0, false, END_DEVICE, rtc.utc_timestamp);
 10259d6:	4b4c      	ldr	r3, [pc, #304]	; (1025b08 <PFAIL_APP_v3ph_failure_detection+0x1a4>)
		meter.phase_b.delayed_failure = false;
 10259d8:	4f4c      	ldr	r7, [pc, #304]	; (1025b0c <PFAIL_APP_v3ph_failure_detection+0x1a8>)
		EVNT_APP_vRegister_event((uint8_t)PHASE_B_RESTORATION, 0, false, END_DEVICE, rtc.utc_timestamp);
 10259da:	685b      	ldr	r3, [r3, #4]
 10259dc:	9300      	str	r3, [sp, #0]
		meter.phase_b.delayed_failure = false;
 10259de:	2500      	movs	r5, #0
		EVNT_APP_vRegister_event((uint8_t)PHASE_B_RESTORATION, 0, false, END_DEVICE, rtc.utc_timestamp);
 10259e0:	462b      	mov	r3, r5
 10259e2:	462a      	mov	r2, r5
 10259e4:	4629      	mov	r1, r5
 10259e6:	2004      	movs	r0, #4
 10259e8:	4e49      	ldr	r6, [pc, #292]	; (1025b10 <PFAIL_APP_v3ph_failure_detection+0x1ac>)
		meter.phase_b.delayed_failure = false;
 10259ea:	f887 5056 	strb.w	r5, [r7, #86]	; 0x56
		EVNT_APP_vRegister_event((uint8_t)PHASE_B_RESTORATION, 0, false, END_DEVICE, rtc.utc_timestamp);
 10259ee:	47b0      	blx	r6
  __ASM volatile ("cpsid i");
 10259f0:	b672      	cpsid	i
 10259f2:	f3bf 8f5f 	dmb	sy
	Disable_global_interrupt();
 10259f6:	4b47      	ldr	r3, [pc, #284]	; (1025b14 <PFAIL_APP_v3ph_failure_detection+0x1b0>)
	ms_timers[timer_id].fptr = PFAIL_APP_vNull_action;
 10259f8:	4947      	ldr	r1, [pc, #284]	; (1025b18 <PFAIL_APP_v3ph_failure_detection+0x1b4>)
	Disable_global_interrupt();
 10259fa:	701d      	strb	r5, [r3, #0]
	Enable_global_interrupt();
 10259fc:	2201      	movs	r2, #1
	ms_timers[timer_id].timer = 0;
 10259fe:	6425      	str	r5, [r4, #64]	; 0x40
	ms_timers[timer_id].running = false;
 1025a00:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
	ms_timers[timer_id].expired = false;
 1025a04:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
	ms_timers[timer_id].fptr = PFAIL_APP_vNull_action;
 1025a08:	6461      	str	r1, [r4, #68]	; 0x44
	Enable_global_interrupt();
 1025a0a:	701a      	strb	r2, [r3, #0]
 1025a0c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
 1025a10:	b662      	cpsie	i
 1025a12:	e7bd      	b.n	1025990 <PFAIL_APP_v3ph_failure_detection+0x2c>
		EVNT_APP_vRegister_event((uint8_t)PHASE_A_RESTORATION, 0, false, END_DEVICE, rtc.utc_timestamp);
 1025a14:	4b3c      	ldr	r3, [pc, #240]	; (1025b08 <PFAIL_APP_v3ph_failure_detection+0x1a4>)
		meter.phase_a.delayed_failure = false;
 1025a16:	4f3d      	ldr	r7, [pc, #244]	; (1025b0c <PFAIL_APP_v3ph_failure_detection+0x1a8>)
		EVNT_APP_vRegister_event((uint8_t)PHASE_A_RESTORATION, 0, false, END_DEVICE, rtc.utc_timestamp);
 1025a18:	685b      	ldr	r3, [r3, #4]
 1025a1a:	9300      	str	r3, [sp, #0]
		meter.phase_a.delayed_failure = false;
 1025a1c:	2500      	movs	r5, #0
		EVNT_APP_vRegister_event((uint8_t)PHASE_A_RESTORATION, 0, false, END_DEVICE, rtc.utc_timestamp);
 1025a1e:	462b      	mov	r3, r5
 1025a20:	462a      	mov	r2, r5
 1025a22:	4629      	mov	r1, r5
 1025a24:	2002      	movs	r0, #2
 1025a26:	4e3a      	ldr	r6, [pc, #232]	; (1025b10 <PFAIL_APP_v3ph_failure_detection+0x1ac>)
		meter.phase_a.delayed_failure = false;
 1025a28:	f887 5052 	strb.w	r5, [r7, #82]	; 0x52
		EVNT_APP_vRegister_event((uint8_t)PHASE_A_RESTORATION, 0, false, END_DEVICE, rtc.utc_timestamp);
 1025a2c:	47b0      	blx	r6
  __ASM volatile ("cpsid i");
 1025a2e:	b672      	cpsid	i
 1025a30:	f3bf 8f5f 	dmb	sy
	Disable_global_interrupt();
 1025a34:	4b37      	ldr	r3, [pc, #220]	; (1025b14 <PFAIL_APP_v3ph_failure_detection+0x1b0>)
	ms_timers[timer_id].fptr = PFAIL_APP_vNull_action;
 1025a36:	4938      	ldr	r1, [pc, #224]	; (1025b18 <PFAIL_APP_v3ph_failure_detection+0x1b4>)
	Disable_global_interrupt();
 1025a38:	701d      	strb	r5, [r3, #0]
	Enable_global_interrupt();
 1025a3a:	2201      	movs	r2, #1
	ms_timers[timer_id].timer = 0;
 1025a3c:	6365      	str	r5, [r4, #52]	; 0x34
	ms_timers[timer_id].running = false;
 1025a3e:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
	ms_timers[timer_id].expired = false;
 1025a42:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
	ms_timers[timer_id].fptr = PFAIL_APP_vNull_action;
 1025a46:	63a1      	str	r1, [r4, #56]	; 0x38
	Enable_global_interrupt();
 1025a48:	701a      	strb	r2, [r3, #0]
 1025a4a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
 1025a4e:	b662      	cpsie	i
 1025a50:	e79b      	b.n	102598a <PFAIL_APP_v3ph_failure_detection+0x26>
		EVNT_APP_vRegister_event((uint8_t)PHASE_C_FAILURE, 0, false, END_DEVICE, rtc.utc_timestamp);
 1025a52:	4b2d      	ldr	r3, [pc, #180]	; (1025b08 <PFAIL_APP_v3ph_failure_detection+0x1a4>)
		meter.phase_c.delayed_failure = true;
 1025a54:	4f2d      	ldr	r7, [pc, #180]	; (1025b0c <PFAIL_APP_v3ph_failure_detection+0x1a8>)
		EVNT_APP_vRegister_event((uint8_t)PHASE_C_FAILURE, 0, false, END_DEVICE, rtc.utc_timestamp);
 1025a56:	685b      	ldr	r3, [r3, #4]
 1025a58:	9300      	str	r3, [sp, #0]
		meter.phase_c.delayed_failure = true;
 1025a5a:	2501      	movs	r5, #1
		EVNT_APP_vRegister_event((uint8_t)PHASE_C_FAILURE, 0, false, END_DEVICE, rtc.utc_timestamp);
 1025a5c:	2300      	movs	r3, #0
 1025a5e:	461a      	mov	r2, r3
 1025a60:	4619      	mov	r1, r3
 1025a62:	2005      	movs	r0, #5
 1025a64:	4e2a      	ldr	r6, [pc, #168]	; (1025b10 <PFAIL_APP_v3ph_failure_detection+0x1ac>)
		meter.phase_c.delayed_failure = true;
 1025a66:	f887 505a 	strb.w	r5, [r7, #90]	; 0x5a
		EVNT_APP_vRegister_event((uint8_t)PHASE_C_FAILURE, 0, false, END_DEVICE, rtc.utc_timestamp);
 1025a6a:	47b0      	blx	r6
  __ASM volatile ("cpsid i");
 1025a6c:	b672      	cpsid	i
 1025a6e:	f3bf 8f5f 	dmb	sy
	Disable_global_interrupt();
 1025a72:	4a28      	ldr	r2, [pc, #160]	; (1025b14 <PFAIL_APP_v3ph_failure_detection+0x1b0>)
	ms_timers[timer_id].fptr = PFAIL_APP_vNull_action;
 1025a74:	4b28      	ldr	r3, [pc, #160]	; (1025b18 <PFAIL_APP_v3ph_failure_detection+0x1b4>)
 1025a76:	62e3      	str	r3, [r4, #44]	; 0x2c
	Disable_global_interrupt();
 1025a78:	2300      	movs	r3, #0
 1025a7a:	7013      	strb	r3, [r2, #0]
	ms_timers[timer_id].running = false;
 1025a7c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	ms_timers[timer_id].timer = 0;
 1025a80:	62a3      	str	r3, [r4, #40]	; 0x28
	ms_timers[timer_id].expired = false;
 1025a82:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	Enable_global_interrupt();
 1025a86:	7015      	strb	r5, [r2, #0]
 1025a88:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
 1025a8c:	b662      	cpsie	i
 1025a8e:	e778      	b.n	1025982 <PFAIL_APP_v3ph_failure_detection+0x1e>
		EVNT_APP_vRegister_event((uint8_t)PHASE_B_FAILURE, 0, false, END_DEVICE, rtc.utc_timestamp);
 1025a90:	4b1d      	ldr	r3, [pc, #116]	; (1025b08 <PFAIL_APP_v3ph_failure_detection+0x1a4>)
		meter.phase_b.delayed_failure = true;
 1025a92:	4f1e      	ldr	r7, [pc, #120]	; (1025b0c <PFAIL_APP_v3ph_failure_detection+0x1a8>)
		EVNT_APP_vRegister_event((uint8_t)PHASE_B_FAILURE, 0, false, END_DEVICE, rtc.utc_timestamp);
 1025a94:	685b      	ldr	r3, [r3, #4]
 1025a96:	9300      	str	r3, [sp, #0]
		meter.phase_b.delayed_failure = true;
 1025a98:	2501      	movs	r5, #1
		EVNT_APP_vRegister_event((uint8_t)PHASE_B_FAILURE, 0, false, END_DEVICE, rtc.utc_timestamp);
 1025a9a:	2300      	movs	r3, #0
 1025a9c:	461a      	mov	r2, r3
 1025a9e:	4619      	mov	r1, r3
 1025aa0:	2003      	movs	r0, #3
 1025aa2:	4e1b      	ldr	r6, [pc, #108]	; (1025b10 <PFAIL_APP_v3ph_failure_detection+0x1ac>)
		meter.phase_b.delayed_failure = true;
 1025aa4:	f887 5056 	strb.w	r5, [r7, #86]	; 0x56
		EVNT_APP_vRegister_event((uint8_t)PHASE_B_FAILURE, 0, false, END_DEVICE, rtc.utc_timestamp);
 1025aa8:	47b0      	blx	r6
  __ASM volatile ("cpsid i");
 1025aaa:	b672      	cpsid	i
 1025aac:	f3bf 8f5f 	dmb	sy
	Disable_global_interrupt();
 1025ab0:	4a18      	ldr	r2, [pc, #96]	; (1025b14 <PFAIL_APP_v3ph_failure_detection+0x1b0>)
	ms_timers[timer_id].fptr = PFAIL_APP_vNull_action;
 1025ab2:	4b19      	ldr	r3, [pc, #100]	; (1025b18 <PFAIL_APP_v3ph_failure_detection+0x1b4>)
 1025ab4:	6223      	str	r3, [r4, #32]
	Disable_global_interrupt();
 1025ab6:	2300      	movs	r3, #0
 1025ab8:	7013      	strb	r3, [r2, #0]
	ms_timers[timer_id].running = false;
 1025aba:	7623      	strb	r3, [r4, #24]
	ms_timers[timer_id].timer = 0;
 1025abc:	61e3      	str	r3, [r4, #28]
	ms_timers[timer_id].expired = false;
 1025abe:	7663      	strb	r3, [r4, #25]
	Enable_global_interrupt();
 1025ac0:	7015      	strb	r5, [r2, #0]
 1025ac2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
 1025ac6:	b662      	cpsie	i
 1025ac8:	e757      	b.n	102597a <PFAIL_APP_v3ph_failure_detection+0x16>
		EVNT_APP_vRegister_event((uint8_t)PHASE_A_FAILURE, 0, false, END_DEVICE, rtc.utc_timestamp);
 1025aca:	4b0f      	ldr	r3, [pc, #60]	; (1025b08 <PFAIL_APP_v3ph_failure_detection+0x1a4>)
		meter.phase_a.delayed_failure = true;
 1025acc:	4f0f      	ldr	r7, [pc, #60]	; (1025b0c <PFAIL_APP_v3ph_failure_detection+0x1a8>)
		EVNT_APP_vRegister_event((uint8_t)PHASE_A_FAILURE, 0, false, END_DEVICE, rtc.utc_timestamp);
 1025ace:	685b      	ldr	r3, [r3, #4]
 1025ad0:	9300      	str	r3, [sp, #0]
		meter.phase_a.delayed_failure = true;
 1025ad2:	2501      	movs	r5, #1
		EVNT_APP_vRegister_event((uint8_t)PHASE_A_FAILURE, 0, false, END_DEVICE, rtc.utc_timestamp);
 1025ad4:	2300      	movs	r3, #0
 1025ad6:	4628      	mov	r0, r5
 1025ad8:	461a      	mov	r2, r3
 1025ada:	4619      	mov	r1, r3
 1025adc:	4e0c      	ldr	r6, [pc, #48]	; (1025b10 <PFAIL_APP_v3ph_failure_detection+0x1ac>)
		meter.phase_a.delayed_failure = true;
 1025ade:	f887 5052 	strb.w	r5, [r7, #82]	; 0x52
		EVNT_APP_vRegister_event((uint8_t)PHASE_A_FAILURE, 0, false, END_DEVICE, rtc.utc_timestamp);
 1025ae2:	47b0      	blx	r6
  __ASM volatile ("cpsid i");
 1025ae4:	b672      	cpsid	i
 1025ae6:	f3bf 8f5f 	dmb	sy
	Disable_global_interrupt();
 1025aea:	4a0a      	ldr	r2, [pc, #40]	; (1025b14 <PFAIL_APP_v3ph_failure_detection+0x1b0>)
	ms_timers[timer_id].fptr = PFAIL_APP_vNull_action;
 1025aec:	4b0a      	ldr	r3, [pc, #40]	; (1025b18 <PFAIL_APP_v3ph_failure_detection+0x1b4>)
 1025aee:	6163      	str	r3, [r4, #20]
	Disable_global_interrupt();
 1025af0:	2300      	movs	r3, #0
 1025af2:	7013      	strb	r3, [r2, #0]
	ms_timers[timer_id].running = false;
 1025af4:	7323      	strb	r3, [r4, #12]
	ms_timers[timer_id].timer = 0;
 1025af6:	6123      	str	r3, [r4, #16]
	ms_timers[timer_id].expired = false;
 1025af8:	7363      	strb	r3, [r4, #13]
	Enable_global_interrupt();
 1025afa:	7015      	strb	r5, [r2, #0]
 1025afc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
 1025b00:	b662      	cpsie	i
 1025b02:	e736      	b.n	1025972 <PFAIL_APP_v3ph_failure_detection+0xe>
 1025b04:	20007744 	.word	0x20007744
 1025b08:	20017160 	.word	0x20017160
 1025b0c:	20016c2c 	.word	0x20016c2c
 1025b10:	01019961 	.word	0x01019961
 1025b14:	2000008d 	.word	0x2000008d
 1025b18:	0102521d 	.word	0x0102521d

01025b1c <PFAIL_APP_vTask.part.5>:
void PFAIL_APP_vTask(void) {
 1025b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if ( meter.power_failure ) {
 1025b1e:	4d25      	ldr	r5, [pc, #148]	; (1025bb4 <PFAIL_APP_vTask.part.5+0x98>)
		executing_pfail_task = true;
 1025b20:	4c25      	ldr	r4, [pc, #148]	; (1025bb8 <PFAIL_APP_vTask.part.5+0x9c>)
		if ( meter.power_failure ) {
 1025b22:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
		executing_pfail_task = true;
 1025b26:	2201      	movs	r2, #1
 1025b28:	7022      	strb	r2, [r4, #0]
		if ( meter.power_failure ) {
 1025b2a:	b913      	cbnz	r3, 1025b32 <PFAIL_APP_vTask.part.5+0x16>
		executing_pfail_task = false;
 1025b2c:	2300      	movs	r3, #0
 1025b2e:	7023      	strb	r3, [r4, #0]
 1025b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if ( (xTaskGetSchedulerState() != taskSCHEDULER_RUNNING) || (meter.system_state.initialiting) ) {
 1025b32:	4b22      	ldr	r3, [pc, #136]	; (1025bbc <PFAIL_APP_vTask.part.5+0xa0>)
 1025b34:	4798      	blx	r3
 1025b36:	2801      	cmp	r0, #1
 1025b38:	d004      	beq.n	1025b44 <PFAIL_APP_vTask.part.5+0x28>
				RST_HAL_vExecute_software_reset();
 1025b3a:	4b21      	ldr	r3, [pc, #132]	; (1025bc0 <PFAIL_APP_vTask.part.5+0xa4>)
 1025b3c:	4798      	blx	r3
		executing_pfail_task = false;
 1025b3e:	2300      	movs	r3, #0
 1025b40:	7023      	strb	r3, [r4, #0]
 1025b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if ( (xTaskGetSchedulerState() != taskSCHEDULER_RUNNING) || (meter.system_state.initialiting) ) {
 1025b44:	f895 3020 	ldrb.w	r3, [r5, #32]
 1025b48:	2b00      	cmp	r3, #0
 1025b4a:	d1f6      	bne.n	1025b3a <PFAIL_APP_vTask.part.5+0x1e>
				REGS_APP_vSuspend_storage_rtos_task();
 1025b4c:	4b1d      	ldr	r3, [pc, #116]	; (1025bc4 <PFAIL_APP_vTask.part.5+0xa8>)
	return ms_timers[timer_id].expired;
 1025b4e:	4e1e      	ldr	r6, [pc, #120]	; (1025bc8 <PFAIL_APP_vTask.part.5+0xac>)
				REGS_APP_vSuspend_storage_rtos_task();
 1025b50:	4798      	blx	r3
				TOU_APP_vSuspend_rtos_task();
 1025b52:	4b1e      	ldr	r3, [pc, #120]	; (1025bcc <PFAIL_APP_vTask.part.5+0xb0>)
 1025b54:	4798      	blx	r3
				while ( (PFAIL_APP_bIs_ms_timer_expired(PFAIL_POWER_BACK_TIMER) == FALSE) && (meter.power_failure == true) ) {
 1025b56:	7873      	ldrb	r3, [r6, #1]
 1025b58:	b95b      	cbnz	r3, 1025b72 <PFAIL_APP_vTask.part.5+0x56>
 1025b5a:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 1025b5e:	b143      	cbz	r3, 1025b72 <PFAIL_APP_vTask.part.5+0x56>
 1025b60:	4f1b      	ldr	r7, [pc, #108]	; (1025bd0 <PFAIL_APP_vTask.part.5+0xb4>)
 1025b62:	e002      	b.n	1025b6a <PFAIL_APP_vTask.part.5+0x4e>
 1025b64:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 1025b68:	b11b      	cbz	r3, 1025b72 <PFAIL_APP_vTask.part.5+0x56>
					WATCHDOG_APP_vRestart();
 1025b6a:	47b8      	blx	r7
				while ( (PFAIL_APP_bIs_ms_timer_expired(PFAIL_POWER_BACK_TIMER) == FALSE) && (meter.power_failure == true) ) {
 1025b6c:	7873      	ldrb	r3, [r6, #1]
 1025b6e:	2b00      	cmp	r3, #0
 1025b70:	d0f8      	beq.n	1025b64 <PFAIL_APP_vTask.part.5+0x48>
				if ( meter.power_failure == false ) {
 1025b72:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 1025b76:	b963      	cbnz	r3, 1025b92 <PFAIL_APP_vTask.part.5+0x76>
					LED_diagnosis_led_task();
 1025b78:	4b16      	ldr	r3, [pc, #88]	; (1025bd4 <PFAIL_APP_vTask.part.5+0xb8>)
 1025b7a:	4798      	blx	r3
					REGS_APP_vResume_storage_rtos_task();
 1025b7c:	4b16      	ldr	r3, [pc, #88]	; (1025bd8 <PFAIL_APP_vTask.part.5+0xbc>)
 1025b7e:	4798      	blx	r3
					TOU_APP_vResume_rtos_task();
 1025b80:	4b16      	ldr	r3, [pc, #88]	; (1025bdc <PFAIL_APP_vTask.part.5+0xc0>)
 1025b82:	4798      	blx	r3
					Enable_global_interrupt();
 1025b84:	4b16      	ldr	r3, [pc, #88]	; (1025be0 <PFAIL_APP_vTask.part.5+0xc4>)
 1025b86:	2201      	movs	r2, #1
 1025b88:	701a      	strb	r2, [r3, #0]
 1025b8a:	f3bf 8f5f 	dmb	sy
 1025b8e:	b662      	cpsie	i
 1025b90:	e7cc      	b.n	1025b2c <PFAIL_APP_vTask.part.5+0x10>
  __ASM volatile ("cpsid i");
 1025b92:	b672      	cpsid	i
 1025b94:	f3bf 8f5f 	dmb	sy
					Disable_global_interrupt();
 1025b98:	4a11      	ldr	r2, [pc, #68]	; (1025be0 <PFAIL_APP_vTask.part.5+0xc4>)
					PFAIL_APP_vRegister_power_down();
 1025b9a:	4b12      	ldr	r3, [pc, #72]	; (1025be4 <PFAIL_APP_vTask.part.5+0xc8>)
					Disable_global_interrupt();
 1025b9c:	2100      	movs	r1, #0
 1025b9e:	7011      	strb	r1, [r2, #0]
					PFAIL_APP_vRegister_power_down();
 1025ba0:	4798      	blx	r3
					PFAIL_APP_v3ph_failure_detection();
 1025ba2:	4b11      	ldr	r3, [pc, #68]	; (1025be8 <PFAIL_APP_vTask.part.5+0xcc>)
 1025ba4:	4798      	blx	r3
					RST_APP_vSave_information();
 1025ba6:	4b11      	ldr	r3, [pc, #68]	; (1025bec <PFAIL_APP_vTask.part.5+0xd0>)
 1025ba8:	4798      	blx	r3
					while ( meter.power_failure );
 1025baa:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 1025bae:	2b00      	cmp	r3, #0
 1025bb0:	d1fb      	bne.n	1025baa <PFAIL_APP_vTask.part.5+0x8e>
 1025bb2:	e7c2      	b.n	1025b3a <PFAIL_APP_vTask.part.5+0x1e>
 1025bb4:	20016c2c 	.word	0x20016c2c
 1025bb8:	20007740 	.word	0x20007740
 1025bbc:	0102f149 	.word	0x0102f149
 1025bc0:	010159a1 	.word	0x010159a1
 1025bc4:	01028c51 	.word	0x01028c51
 1025bc8:	20007744 	.word	0x20007744
 1025bcc:	0102c579 	.word	0x0102c579
 1025bd0:	0101603d 	.word	0x0101603d
 1025bd4:	0101ad79 	.word	0x0101ad79
 1025bd8:	01028c79 	.word	0x01028c79
 1025bdc:	0102c5a1 	.word	0x0102c5a1
 1025be0:	2000008d 	.word	0x2000008d
 1025be4:	010256bd 	.word	0x010256bd
 1025be8:	01025965 	.word	0x01025965
 1025bec:	01015c35 	.word	0x01015c35

01025bf0 <PFAIL_APP_vTask>:
	if (!executing_pfail_task) {
 1025bf0:	4b02      	ldr	r3, [pc, #8]	; (1025bfc <PFAIL_APP_vTask+0xc>)
 1025bf2:	781b      	ldrb	r3, [r3, #0]
 1025bf4:	b90b      	cbnz	r3, 1025bfa <PFAIL_APP_vTask+0xa>
 1025bf6:	4b02      	ldr	r3, [pc, #8]	; (1025c00 <PFAIL_APP_vTask+0x10>)
 1025bf8:	4718      	bx	r3
 1025bfa:	4770      	bx	lr
 1025bfc:	20007740 	.word	0x20007740
 1025c00:	01025b1d 	.word	0x01025b1d

01025c04 <PFAIL_APP_vRtos_task>:
void PFAIL_APP_vRtos_task(void *pvParameters) {
 1025c04:	b580      	push	{r7, lr}
 1025c06:	4e06      	ldr	r6, [pc, #24]	; (1025c20 <PFAIL_APP_vRtos_task+0x1c>)
 1025c08:	4f06      	ldr	r7, [pc, #24]	; (1025c24 <PFAIL_APP_vRtos_task+0x20>)
 1025c0a:	4d07      	ldr	r5, [pc, #28]	; (1025c28 <PFAIL_APP_vRtos_task+0x24>)
 1025c0c:	4c07      	ldr	r4, [pc, #28]	; (1025c2c <PFAIL_APP_vRtos_task+0x28>)
 1025c0e:	e001      	b.n	1025c14 <PFAIL_APP_vRtos_task+0x10>
		vTaskSuspend(pfail_os_task_id);
 1025c10:	6828      	ldr	r0, [r5, #0]
 1025c12:	47a0      	blx	r4
		if (!executing_pfail_task) {
 1025c14:	7833      	ldrb	r3, [r6, #0]
 1025c16:	2b00      	cmp	r3, #0
 1025c18:	d1fa      	bne.n	1025c10 <PFAIL_APP_vRtos_task+0xc>
 1025c1a:	47b8      	blx	r7
 1025c1c:	e7f8      	b.n	1025c10 <PFAIL_APP_vRtos_task+0xc>
 1025c1e:	bf00      	nop
 1025c20:	20007740 	.word	0x20007740
 1025c24:	01025b1d 	.word	0x01025b1d
 1025c28:	2001714c 	.word	0x2001714c
 1025c2c:	0102ea59 	.word	0x0102ea59

01025c30 <RTT_Handler>:
 * \param void
 * \retval void
 ******************************************************************************
 */
void RTT_Handler(void)
{
 1025c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t ul_status;

	/* Get RTT status */
	ul_status = rtt_get_status(RTT);
 1025c34:	4813      	ldr	r0, [pc, #76]	; (1025c84 <RTT_Handler+0x54>)
 1025c36:	4b14      	ldr	r3, [pc, #80]	; (1025c88 <RTT_Handler+0x58>)
 1025c38:	4798      	blx	r3

	/* Real Time Timer Tick Increment */
	if ((ul_status & RTT_SR_RTTINC) == RTT_SR_RTTINC) {
 1025c3a:	0783      	lsls	r3, r0, #30
 1025c3c:	d518      	bpl.n	1025c70 <RTT_Handler+0x40>
		
		uint8_t i;
		
		tick_ms_timer++;
 1025c3e:	4f13      	ldr	r7, [pc, #76]	; (1025c8c <RTT_Handler+0x5c>)
 1025c40:	4e13      	ldr	r6, [pc, #76]	; (1025c90 <RTT_Handler+0x60>)
 1025c42:	683b      	ldr	r3, [r7, #0]
 1025c44:	2400      	movs	r4, #0
 1025c46:	3301      	adds	r3, #1
 1025c48:	603b      	str	r3, [r7, #0]
 1025c4a:	4635      	mov	r5, r6
		{
			if ( ms_timers[i].running == true )
			{
				if ( tick_ms_timer == ms_timers[i].timer )
				{
					ms_timers[i].running = false;
 1025c4c:	46a1      	mov	r9, r4
					ms_timers[i].expired = true;
 1025c4e:	f04f 0801 	mov.w	r8, #1
			if ( ms_timers[i].running == true )
 1025c52:	782a      	ldrb	r2, [r5, #0]
				if ( tick_ms_timer == ms_timers[i].timer )
 1025c54:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 1025c58:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 1025c5c:	3401      	adds	r4, #1
			if ( ms_timers[i].running == true )
 1025c5e:	b11a      	cbz	r2, 1025c68 <RTT_Handler+0x38>
				if ( tick_ms_timer == ms_timers[i].timer )
 1025c60:	685a      	ldr	r2, [r3, #4]
 1025c62:	683b      	ldr	r3, [r7, #0]
 1025c64:	429a      	cmp	r2, r3
 1025c66:	d005      	beq.n	1025c74 <RTT_Handler+0x44>
		for (i = 0; i < NUMBER_OF_PF_MS_TIMERS; i++)
 1025c68:	2c0b      	cmp	r4, #11
 1025c6a:	f105 050c 	add.w	r5, r5, #12
 1025c6e:	d1f0      	bne.n	1025c52 <RTT_Handler+0x22>
 1025c70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					ms_timers[i].running = false;
 1025c74:	f885 9000 	strb.w	r9, [r5]
					ms_timers[i].expired = true;
 1025c78:	f885 8001 	strb.w	r8, [r5, #1]
					(*ms_timers[i].fptr)();		//execute the desired call back function
 1025c7c:	68ab      	ldr	r3, [r5, #8]
 1025c7e:	4798      	blx	r3
 1025c80:	e7f2      	b.n	1025c68 <RTT_Handler+0x38>
 1025c82:	bf00      	nop
 1025c84:	400e1430 	.word	0x400e1430
 1025c88:	0102d901 	.word	0x0102d901
 1025c8c:	200077c8 	.word	0x200077c8
 1025c90:	20007744 	.word	0x20007744

01025c94 <REGS_APP_bSt_11_validate_data>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool REGS_APP_bSt_11_validate_data(ST_10_TYPE *st_11_structure) {
 1025c94:	b430      	push	{r4, r5}
 1025c96:	7805      	ldrb	r5, [r0, #0]
 1025c98:	2300      	movs	r3, #0
	
	bool is_ok = true;
 1025c9a:	2101      	movs	r1, #1
	
	for ( uint8_t i = 0; i < 8; i++) {
		if ( ( ( (PERM_SOURCE_FLAGS >> i) & 0x01 ) == 0 ) && ( ( (st_11_structure->source_flags >> i) & 0x01 ) == 1 ) ) {
 1025c9c:	242c      	movs	r4, #44	; 0x2c
 1025c9e:	fa44 f203 	asr.w	r2, r4, r3
 1025ca2:	07d2      	lsls	r2, r2, #31
 1025ca4:	d405      	bmi.n	1025cb2 <REGS_APP_bSt_11_validate_data+0x1e>
 1025ca6:	fa45 f203 	asr.w	r2, r5, r3
			is_ok = false;
 1025caa:	f012 0f01 	tst.w	r2, #1
 1025cae:	bf18      	it	ne
 1025cb0:	2100      	movne	r1, #0
 1025cb2:	3301      	adds	r3, #1
	for ( uint8_t i = 0; i < 8; i++) {
 1025cb4:	2b08      	cmp	r3, #8
 1025cb6:	d1f2      	bne.n	1025c9e <REGS_APP_bSt_11_validate_data+0xa>
	if (st_11_structure->nbr_demand_ctrl_entries > MAX_NBR_DEMAND_CTRL_ENTRIES) {
		st_11_structure->nbr_demand_ctrl_entries = MAX_NBR_DEMAND_CTRL_ENTRIES;
		is_ok = false;
	}
	
	if (st_11_structure->data_ctrl_length > MAX_DATA_CTRL_LENGTH) {
 1025cb8:	78c3      	ldrb	r3, [r0, #3]
	st_11_structure->source_flags &= PERM_SOURCE_FLAGS;
 1025cba:	f005 052c 	and.w	r5, r5, #44	; 0x2c
 1025cbe:	7005      	strb	r5, [r0, #0]
	if (st_11_structure->data_ctrl_length > MAX_DATA_CTRL_LENGTH) {
 1025cc0:	b10b      	cbz	r3, 1025cc6 <REGS_APP_bSt_11_validate_data+0x32>
		st_11_structure->data_ctrl_length = MAX_DATA_CTRL_LENGTH;
 1025cc2:	2100      	movs	r1, #0
 1025cc4:	70c1      	strb	r1, [r0, #3]
		is_ok = false;
	}
	
	if (st_11_structure->nbr_data_ctrl_entries > MAX_NBR_DATA_CTRL_ENTRIES) {
 1025cc6:	7903      	ldrb	r3, [r0, #4]
 1025cc8:	b10b      	cbz	r3, 1025cce <REGS_APP_bSt_11_validate_data+0x3a>
		st_11_structure->nbr_data_ctrl_entries = MAX_NBR_DATA_CTRL_ENTRIES;
 1025cca:	2100      	movs	r1, #0
 1025ccc:	7101      	strb	r1, [r0, #4]
	if (st_11_structure->nbr_constants_entries > MAX_NBR_CONSTANTS_ENTRIES) {
		st_11_structure->nbr_constants_entries = MAX_NBR_CONSTANTS_ENTRIES;
		is_ok = false;
	}
	
	if (st_11_structure->constants_selector > MAX_CONSTANTS_SELECTOR) {
 1025cce:	7983      	ldrb	r3, [r0, #6]
 1025cd0:	2b02      	cmp	r3, #2
 1025cd2:	d902      	bls.n	1025cda <REGS_APP_bSt_11_validate_data+0x46>
		st_11_structure->constants_selector = MAX_CONSTANTS_SELECTOR;
 1025cd4:	2302      	movs	r3, #2
 1025cd6:	7183      	strb	r3, [r0, #6]
		is_ok = false;
 1025cd8:	2100      	movs	r1, #0
		st_11_structure->nbr_sources = MAX_NBR_SOURCES;
		is_ok = false;
	}
	
	return is_ok;
}
 1025cda:	4608      	mov	r0, r1
 1025cdc:	bc30      	pop	{r4, r5}
 1025cde:	4770      	bx	lr

01025ce0 <REGS_APP_bSt_21_validate_data>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool REGS_APP_bSt_21_validate_data(ST_20_TYPE *st_21_structure) {
 1025ce0:	b430      	push	{r4, r5}
 1025ce2:	2301      	movs	r3, #1
 1025ce4:	7804      	ldrb	r4, [r0, #0]
	
	bool is_ok = true;
 1025ce6:	461a      	mov	r2, r3
	uint8_t i;

	for ( i = 0; i < 8; i++) {
		if ( ( ( (PERM_REG_FUNC1_FLAGS >> i) & 0x01 ) == 0 ) && ( ( (st_21_structure->reg_func1_flags >> i) & 0x01 ) == 1 ) ) {
 1025ce8:	257f      	movs	r5, #127	; 0x7f
 1025cea:	fa45 f103 	asr.w	r1, r5, r3
 1025cee:	07c9      	lsls	r1, r1, #31
 1025cf0:	d405      	bmi.n	1025cfe <REGS_APP_bSt_21_validate_data+0x1e>
 1025cf2:	fa44 f103 	asr.w	r1, r4, r3
			is_ok = false;	
 1025cf6:	f011 0f01 	tst.w	r1, #1
 1025cfa:	bf18      	it	ne
 1025cfc:	2200      	movne	r2, #0
 1025cfe:	3301      	adds	r3, #1
	for ( i = 0; i < 8; i++) {
 1025d00:	2b08      	cmp	r3, #8
 1025d02:	d1f2      	bne.n	1025cea <REGS_APP_bSt_21_validate_data+0xa>
		}
	}
	st_21_structure->reg_func1_flags &= PERM_REG_FUNC1_FLAGS;
 1025d04:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 1025d08:	7845      	ldrb	r5, [r0, #1]
 1025d0a:	7004      	strb	r4, [r0, #0]
 1025d0c:	2300      	movs	r3, #0
	
	for ( i = 0; i < 8; i++) {
		if ( ( ( (PERM_REG_FUNC2_FLAGS >> i) & 0x01 ) == 0 ) && ( ( (st_21_structure->reg_func2_flags >> i) & 0x01 ) == 1 ) ) {
 1025d0e:	2416      	movs	r4, #22
 1025d10:	fa44 f103 	asr.w	r1, r4, r3
 1025d14:	07c9      	lsls	r1, r1, #31
 1025d16:	d405      	bmi.n	1025d24 <REGS_APP_bSt_21_validate_data+0x44>
 1025d18:	fa45 f103 	asr.w	r1, r5, r3
			is_ok = false;
 1025d1c:	f011 0f01 	tst.w	r1, #1
 1025d20:	bf18      	it	ne
 1025d22:	2200      	movne	r2, #0
 1025d24:	3301      	adds	r3, #1
	for ( i = 0; i < 8; i++) {
 1025d26:	2b08      	cmp	r3, #8
 1025d28:	d1f2      	bne.n	1025d10 <REGS_APP_bSt_21_validate_data+0x30>
		}
	}
	st_21_structure->reg_func2_flags &= PERM_REG_FUNC2_FLAGS;
	
	if ( st_21_structure->nbr_self_reads > MAX_NBR_SELF_READS ) {
 1025d2a:	7883      	ldrb	r3, [r0, #2]
	st_21_structure->reg_func2_flags &= PERM_REG_FUNC2_FLAGS;
 1025d2c:	f005 0516 	and.w	r5, r5, #22
	if ( st_21_structure->nbr_self_reads > MAX_NBR_SELF_READS ) {
 1025d30:	2b0e      	cmp	r3, #14
	st_21_structure->reg_func2_flags &= PERM_REG_FUNC2_FLAGS;
 1025d32:	7045      	strb	r5, [r0, #1]
	if ( st_21_structure->nbr_self_reads > MAX_NBR_SELF_READS ) {
 1025d34:	d902      	bls.n	1025d3c <REGS_APP_bSt_21_validate_data+0x5c>
		st_21_structure->nbr_self_reads = MAX_NBR_SELF_READS;
 1025d36:	230e      	movs	r3, #14
 1025d38:	7083      	strb	r3, [r0, #2]
		is_ok = false;
 1025d3a:	2200      	movs	r2, #0
	}
	
	if ( st_21_structure->nbr_summations > MAX_NBR_SUMMATIONS ) {
 1025d3c:	78c3      	ldrb	r3, [r0, #3]
 1025d3e:	2b06      	cmp	r3, #6
 1025d40:	d902      	bls.n	1025d48 <REGS_APP_bSt_21_validate_data+0x68>
		st_21_structure->nbr_summations = MAX_NBR_SUMMATIONS;
 1025d42:	2306      	movs	r3, #6
 1025d44:	70c3      	strb	r3, [r0, #3]
		is_ok = false;
 1025d46:	2200      	movs	r2, #0
	}

	if ( st_21_structure->nbr_demands > MAX_NBR_DEMANDS ) {
 1025d48:	7903      	ldrb	r3, [r0, #4]
 1025d4a:	2b02      	cmp	r3, #2
 1025d4c:	d902      	bls.n	1025d54 <REGS_APP_bSt_21_validate_data+0x74>
		st_21_structure->nbr_demands = MAX_NBR_DEMANDS;
 1025d4e:	2302      	movs	r3, #2
 1025d50:	7103      	strb	r3, [r0, #4]
		is_ok = false;
 1025d52:	2200      	movs	r2, #0
	}

	if ( st_21_structure->nbr_coin_values > MAX_NBR_COIN_VALUES ) {
 1025d54:	7943      	ldrb	r3, [r0, #5]
 1025d56:	b10b      	cbz	r3, 1025d5c <REGS_APP_bSt_21_validate_data+0x7c>
		st_21_structure->nbr_coin_values = MAX_NBR_COIN_VALUES;
 1025d58:	2200      	movs	r2, #0
 1025d5a:	7142      	strb	r2, [r0, #5]
		is_ok = false;
	}
	
	if ( st_21_structure->nbr_occur > MAX_NBR_OCCUR ) {
 1025d5c:	7983      	ldrb	r3, [r0, #6]
 1025d5e:	2b01      	cmp	r3, #1
 1025d60:	d902      	bls.n	1025d68 <REGS_APP_bSt_21_validate_data+0x88>
		st_21_structure->nbr_occur = MAX_NBR_OCCUR;
 1025d62:	2301      	movs	r3, #1
 1025d64:	7183      	strb	r3, [r0, #6]
		is_ok = false;
 1025d66:	2200      	movs	r2, #0
	}
	
	if ( st_21_structure->nbr_tiers > MAX_NBR_TIERS ){
 1025d68:	79c3      	ldrb	r3, [r0, #7]
 1025d6a:	2b04      	cmp	r3, #4
 1025d6c:	d902      	bls.n	1025d74 <REGS_APP_bSt_21_validate_data+0x94>
		st_21_structure->nbr_tiers = MAX_NBR_TIERS;
 1025d6e:	2304      	movs	r3, #4
 1025d70:	71c3      	strb	r3, [r0, #7]
		is_ok = false;
 1025d72:	2200      	movs	r2, #0
	}
	
	if ( st_21_structure->nbr_present_demands > MAX_NBR_PRESENT_DEMANDS ) {
 1025d74:	7a03      	ldrb	r3, [r0, #8]
 1025d76:	2b02      	cmp	r3, #2
 1025d78:	d902      	bls.n	1025d80 <REGS_APP_bSt_21_validate_data+0xa0>
		st_21_structure->nbr_present_demands = MAX_NBR_PRESENT_DEMANDS;
 1025d7a:	2302      	movs	r3, #2
 1025d7c:	7203      	strb	r3, [r0, #8]
		is_ok = false;
 1025d7e:	2200      	movs	r2, #0
	}
	
	if ( st_21_structure->nbr_present_values > MAX_NBR_PRESENT_VALUES ) {
 1025d80:	7a43      	ldrb	r3, [r0, #9]
 1025d82:	2b28      	cmp	r3, #40	; 0x28
 1025d84:	d902      	bls.n	1025d8c <REGS_APP_bSt_21_validate_data+0xac>
		st_21_structure->nbr_present_values = MAX_NBR_PRESENT_VALUES;
 1025d86:	2328      	movs	r3, #40	; 0x28
 1025d88:	7243      	strb	r3, [r0, #9]
		is_ok = false;
 1025d8a:	2200      	movs	r2, #0
	}
	
	return is_ok;
}
 1025d8c:	4610      	mov	r0, r2
 1025d8e:	bc30      	pop	{r4, r5}
 1025d90:	4770      	bx	lr
 1025d92:	bf00      	nop

01025d94 <REGS_APP_vSt_22_to_array>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
void REGS_APP_vSt_22_to_array(ST_22_TYPE st_22_source, uint8_t *table_buffer) {
 1025d94:	b530      	push	{r4, r5, lr}

	uint8_t k = 0;
	uint8_t i = 0;
	
	for ( i = 0; i < st_21.nbr_summations; i++ ) {
 1025d96:	4d29      	ldr	r5, [pc, #164]	; (1025e3c <REGS_APP_vSt_22_to_array+0xa8>)
void REGS_APP_vSt_22_to_array(ST_22_TYPE st_22_source, uint8_t *table_buffer) {
 1025d98:	b085      	sub	sp, #20
	for ( i = 0; i < st_21.nbr_summations; i++ ) {
 1025d9a:	78ec      	ldrb	r4, [r5, #3]
void REGS_APP_vSt_22_to_array(ST_22_TYPE st_22_source, uint8_t *table_buffer) {
 1025d9c:	f10d 0e10 	add.w	lr, sp, #16
 1025da0:	e90e 0007 	stmdb	lr, {r0, r1, r2}
	for ( i = 0; i < st_21.nbr_summations; i++ ) {
 1025da4:	2c00      	cmp	r4, #0
 1025da6:	d045      	beq.n	1025e34 <REGS_APP_vSt_22_to_array+0xa0>
 1025da8:	2200      	movs	r2, #0
 1025daa:	e000      	b.n	1025dae <REGS_APP_vSt_22_to_array+0x1a>
 1025dac:	4622      	mov	r2, r4
		table_buffer[k++] = st_22_source.summation_select[i];
 1025dae:	a904      	add	r1, sp, #16
 1025db0:	4411      	add	r1, r2
 1025db2:	1c54      	adds	r4, r2, #1
 1025db4:	f811 1c0c 	ldrb.w	r1, [r1, #-12]
 1025db8:	5499      	strb	r1, [r3, r2]
	for ( i = 0; i < st_21.nbr_summations; i++ ) {
 1025dba:	78e9      	ldrb	r1, [r5, #3]
		table_buffer[k++] = st_22_source.summation_select[i];
 1025dbc:	b2e4      	uxtb	r4, r4
	for ( i = 0; i < st_21.nbr_summations; i++ ) {
 1025dbe:	42a1      	cmp	r1, r4
 1025dc0:	d8f4      	bhi.n	1025dac <REGS_APP_vSt_22_to_array+0x18>
 1025dc2:	3202      	adds	r2, #2
 1025dc4:	b2d0      	uxtb	r0, r2
 1025dc6:	4621      	mov	r1, r4
	}
	
	for ( i = 0; i < st_21.nbr_demands; i++ ) {
 1025dc8:	792a      	ldrb	r2, [r5, #4]
 1025dca:	b182      	cbz	r2, 1025dee <REGS_APP_vSt_22_to_array+0x5a>
 1025dcc:	2200      	movs	r2, #0
 1025dce:	e000      	b.n	1025dd2 <REGS_APP_vSt_22_to_array+0x3e>
		table_buffer[k++] = st_22_source.demand_select[i];
 1025dd0:	460c      	mov	r4, r1
 1025dd2:	a904      	add	r1, sp, #16
 1025dd4:	4411      	add	r1, r2
	for ( i = 0; i < st_21.nbr_demands; i++ ) {
 1025dd6:	3201      	adds	r2, #1
		table_buffer[k++] = st_22_source.demand_select[i];
 1025dd8:	f811 1c06 	ldrb.w	r1, [r1, #-6]
 1025ddc:	5519      	strb	r1, [r3, r4]
	for ( i = 0; i < st_21.nbr_demands; i++ ) {
 1025dde:	7928      	ldrb	r0, [r5, #4]
 1025de0:	b2d2      	uxtb	r2, r2
		table_buffer[k++] = st_22_source.demand_select[i];
 1025de2:	1c61      	adds	r1, r4, #1
	for ( i = 0; i < st_21.nbr_demands; i++ ) {
 1025de4:	4290      	cmp	r0, r2
		table_buffer[k++] = st_22_source.demand_select[i];
 1025de6:	b2c9      	uxtb	r1, r1
	for ( i = 0; i < st_21.nbr_demands; i++ ) {
 1025de8:	d8f2      	bhi.n	1025dd0 <REGS_APP_vSt_22_to_array+0x3c>
 1025dea:	3402      	adds	r4, #2
 1025dec:	b2e0      	uxtb	r0, r4
	}
	
	table_buffer[k++] = st_22_source.min_or_max_flags;
 1025dee:	f89d 200c 	ldrb.w	r2, [sp, #12]
 1025df2:	545a      	strb	r2, [r3, r1]
	
	for ( i = 0; i < st_21.nbr_coin_values; i++ ) {
 1025df4:	796a      	ldrb	r2, [r5, #5]
 1025df6:	b1da      	cbz	r2, 1025e30 <REGS_APP_vSt_22_to_array+0x9c>
 1025df8:	2200      	movs	r2, #0
		table_buffer[k++] = st_22_source.coincident_select[i];
 1025dfa:	a904      	add	r1, sp, #16
 1025dfc:	188c      	adds	r4, r1, r2
	for ( i = 0; i < st_21.nbr_coin_values; i++ ) {
 1025dfe:	3201      	adds	r2, #1
		table_buffer[k++] = st_22_source.coincident_select[i];
 1025e00:	f814 4c03 	ldrb.w	r4, [r4, #-3]
 1025e04:	541c      	strb	r4, [r3, r0]
	for ( i = 0; i < st_21.nbr_coin_values; i++ ) {
 1025e06:	796c      	ldrb	r4, [r5, #5]
		table_buffer[k++] = st_22_source.coincident_select[i];
 1025e08:	1c41      	adds	r1, r0, #1
	for ( i = 0; i < st_21.nbr_coin_values; i++ ) {
 1025e0a:	b2d2      	uxtb	r2, r2
		table_buffer[k++] = st_22_source.coincident_select[i];
 1025e0c:	b2c9      	uxtb	r1, r1
	for ( i = 0; i < st_21.nbr_coin_values; i++ ) {
 1025e0e:	4294      	cmp	r4, r2
		table_buffer[k++] = st_22_source.coincident_select[i];
 1025e10:	4608      	mov	r0, r1
	for ( i = 0; i < st_21.nbr_coin_values; i++ ) {
 1025e12:	d8f2      	bhi.n	1025dfa <REGS_APP_vSt_22_to_array+0x66>
	}
	
	for ( i = 0; i < st_21.nbr_coin_values; i++ ) {
 1025e14:	b164      	cbz	r4, 1025e30 <REGS_APP_vSt_22_to_array+0x9c>
 1025e16:	2200      	movs	r2, #0
		table_buffer[k++] = st_22_source.coin_demand_assoc[i];
 1025e18:	ac04      	add	r4, sp, #16
 1025e1a:	1888      	adds	r0, r1, r2
 1025e1c:	4414      	add	r4, r2
 1025e1e:	b2c0      	uxtb	r0, r0
 1025e20:	f814 4c03 	ldrb.w	r4, [r4, #-3]
 1025e24:	541c      	strb	r4, [r3, r0]
	for ( i = 0; i < st_21.nbr_coin_values; i++ ) {
 1025e26:	3201      	adds	r2, #1
 1025e28:	7968      	ldrb	r0, [r5, #5]
 1025e2a:	b2d2      	uxtb	r2, r2
 1025e2c:	4290      	cmp	r0, r2
 1025e2e:	d8f3      	bhi.n	1025e18 <REGS_APP_vSt_22_to_array+0x84>
	}
}
 1025e30:	b005      	add	sp, #20
 1025e32:	bd30      	pop	{r4, r5, pc}
	for ( i = 0; i < st_21.nbr_summations; i++ ) {
 1025e34:	4621      	mov	r1, r4
 1025e36:	2001      	movs	r0, #1
 1025e38:	e7c6      	b.n	1025dc8 <REGS_APP_vSt_22_to_array+0x34>
 1025e3a:	bf00      	nop
 1025e3c:	2000797c 	.word	0x2000797c

01025e40 <REGS_APP_bSt_22_validate_data>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool REGS_APP_bSt_22_validate_data(ST_22_TYPE *st_22_structure) {
 1025e40:	b470      	push	{r4, r5, r6}
	
	bool is_ok = true;
	uint8_t i;
	
	for ( i = 0; i < st_21.nbr_summations; i++ ) {
 1025e42:	4d1c      	ldr	r5, [pc, #112]	; (1025eb4 <REGS_APP_bSt_22_validate_data+0x74>)
 1025e44:	78ea      	ldrb	r2, [r5, #3]
bool REGS_APP_bSt_22_validate_data(ST_22_TYPE *st_22_structure) {
 1025e46:	4603      	mov	r3, r0
	for ( i = 0; i < st_21.nbr_summations; i++ ) {
 1025e48:	2a00      	cmp	r2, #0
 1025e4a:	d030      	beq.n	1025eae <REGS_APP_bSt_22_validate_data+0x6e>
 1025e4c:	2200      	movs	r2, #0
		
		if ( (st_22_structure->summation_select[i] < SUMMATIONS_INITIAL_ID) || (st_22_structure->summation_select[i] >= SM_NUMBER_OF_IDS) ) {
			is_ok = false;
			st_22_structure->summation_select[i] = SUMMATIONS_INITIAL_ID;
 1025e4e:	4616      	mov	r6, r2
	for ( i = 0; i < st_21.nbr_summations; i++ ) {
 1025e50:	2001      	movs	r0, #1
		if ( (st_22_structure->summation_select[i] < SUMMATIONS_INITIAL_ID) || (st_22_structure->summation_select[i] >= SM_NUMBER_OF_IDS) ) {
 1025e52:	5c99      	ldrb	r1, [r3, r2]
 1025e54:	2957      	cmp	r1, #87	; 0x57
			st_22_structure->summation_select[i] = SUMMATIONS_INITIAL_ID;
 1025e56:	bf88      	it	hi
 1025e58:	549e      	strbhi	r6, [r3, r2]
	for ( i = 0; i < st_21.nbr_summations; i++ ) {
 1025e5a:	f102 0401 	add.w	r4, r2, #1
 1025e5e:	78e9      	ldrb	r1, [r5, #3]
 1025e60:	b2e2      	uxtb	r2, r4
			is_ok = false;
 1025e62:	bf88      	it	hi
 1025e64:	2000      	movhi	r0, #0
	for ( i = 0; i < st_21.nbr_summations; i++ ) {
 1025e66:	4291      	cmp	r1, r2
 1025e68:	d8f3      	bhi.n	1025e52 <REGS_APP_bSt_22_validate_data+0x12>
		}
	}
	
	for ( i = 0; i < st_21.nbr_demands; i++ ) {
 1025e6a:	792a      	ldrb	r2, [r5, #4]
 1025e6c:	b15a      	cbz	r2, 1025e86 <REGS_APP_bSt_22_validate_data+0x46>
		
		if ( (st_22_structure->demand_select[i] < AVERAGE_DEMAND_INITIAL_ID) || (st_22_structure->demand_select[i] >= AD_NUMBER_OF_IDS) ) {
 1025e6e:	7999      	ldrb	r1, [r3, #6]
 1025e70:	2957      	cmp	r1, #87	; 0x57
			is_ok = false;
			st_22_structure->demand_select[i] = AVERAGE_DEMAND_INITIAL_ID;
 1025e72:	bf84      	itt	hi
 1025e74:	2000      	movhi	r0, #0
 1025e76:	7198      	strbhi	r0, [r3, #6]
	for ( i = 0; i < st_21.nbr_demands; i++ ) {
 1025e78:	2a01      	cmp	r2, #1
 1025e7a:	d904      	bls.n	1025e86 <REGS_APP_bSt_22_validate_data+0x46>
		if ( (st_22_structure->demand_select[i] < AVERAGE_DEMAND_INITIAL_ID) || (st_22_structure->demand_select[i] >= AD_NUMBER_OF_IDS) ) {
 1025e7c:	79da      	ldrb	r2, [r3, #7]
 1025e7e:	2a57      	cmp	r2, #87	; 0x57
			st_22_structure->demand_select[i] = AVERAGE_DEMAND_INITIAL_ID;
 1025e80:	bf84      	itt	hi
 1025e82:	2000      	movhi	r0, #0
 1025e84:	71d8      	strbhi	r0, [r3, #7]
		}
	}
	
	for ( i = 0; i < st_21.nbr_coin_values; i++ ) {
 1025e86:	7969      	ldrb	r1, [r5, #5]
 1025e88:	b179      	cbz	r1, 1025eaa <REGS_APP_bSt_22_validate_data+0x6a>
 1025e8a:	3901      	subs	r1, #1
 1025e8c:	b2c9      	uxtb	r1, r1
 1025e8e:	310a      	adds	r1, #10
 1025e90:	4419      	add	r1, r3
		
		if ( (st_22_structure->coincident_select[i] < AVERAGE_DEMAND_INITIAL_ID) || (st_22_structure->coincident_select[i] >= AD_NUMBER_OF_IDS) ) {
			is_ok = false;
			st_22_structure->coincident_select[i] = AVERAGE_DEMAND_INITIAL_ID;
 1025e92:	2400      	movs	r4, #0
 1025e94:	3309      	adds	r3, #9
		if ( (st_22_structure->coincident_select[i] < AVERAGE_DEMAND_INITIAL_ID) || (st_22_structure->coincident_select[i] >= AD_NUMBER_OF_IDS) ) {
 1025e96:	781a      	ldrb	r2, [r3, #0]
 1025e98:	2a57      	cmp	r2, #87	; 0x57
			st_22_structure->coincident_select[i] = AVERAGE_DEMAND_INITIAL_ID;
 1025e9a:	bf88      	it	hi
 1025e9c:	701c      	strbhi	r4, [r3, #0]
 1025e9e:	f103 0301 	add.w	r3, r3, #1
			is_ok = false;
 1025ea2:	bf88      	it	hi
 1025ea4:	2000      	movhi	r0, #0
	for ( i = 0; i < st_21.nbr_coin_values; i++ ) {
 1025ea6:	428b      	cmp	r3, r1
 1025ea8:	d1f5      	bne.n	1025e96 <REGS_APP_bSt_22_validate_data+0x56>
			st_22_structure->coin_demand_assoc[i] = AVERAGE_DEMAND_INITIAL_ID;
		}
	}
	
	return is_ok;
}
 1025eaa:	bc70      	pop	{r4, r5, r6}
 1025eac:	4770      	bx	lr
	bool is_ok = true;
 1025eae:	2001      	movs	r0, #1
 1025eb0:	e7db      	b.n	1025e6a <REGS_APP_bSt_22_validate_data+0x2a>
 1025eb2:	bf00      	nop
 1025eb4:	2000797c 	.word	0x2000797c

01025eb8 <REGS_APP_vReset_demands_intervals>:
void REGS_APP_vReset_demands_intervals(void) {
	
	uint8_t i;
	
	for ( i = 0; i < MAX_NBR_DEMANDS; i++ ) {
		demand.interval[i].current_seconds = 0;
 1025eb8:	4a09      	ldr	r2, [pc, #36]	; (1025ee0 <REGS_APP_vReset_demands_intervals+0x28>)
 1025eba:	2300      	movs	r3, #0
		demand.interval[i].is_int_expiried = 0;
		demand.interval[i].run_next_interval = false;
		
		memset( &demand.interval[i].present_demand, 0, sizeof(demand.interval[i].present_demand) );
 1025ebc:	6153      	str	r3, [r2, #20]
 1025ebe:	6193      	str	r3, [r2, #24]
 1025ec0:	61d3      	str	r3, [r2, #28]
		demand.interval[i].current_seconds = 0;
 1025ec2:	8113      	strh	r3, [r2, #8]
		demand.interval[i].is_int_expiried = 0;
 1025ec4:	72d3      	strb	r3, [r2, #11]
		demand.interval[i].run_next_interval = false;
 1025ec6:	7293      	strb	r3, [r2, #10]
		memset( &demand.interval[i].present_demand, 0, sizeof(demand.interval[i].present_demand) );
 1025ec8:	6113      	str	r3, [r2, #16]
		demand.interval[i].current_seconds = 0;
 1025eca:	8413      	strh	r3, [r2, #32]
		demand.interval[i].is_int_expiried = 0;
 1025ecc:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
		demand.interval[i].run_next_interval = false;
 1025ed0:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
		memset( &demand.interval[i].present_demand, 0, sizeof(demand.interval[i].present_demand) );
 1025ed4:	6293      	str	r3, [r2, #40]	; 0x28
 1025ed6:	62d3      	str	r3, [r2, #44]	; 0x2c
 1025ed8:	6313      	str	r3, [r2, #48]	; 0x30
 1025eda:	6353      	str	r3, [r2, #52]	; 0x34
 1025edc:	4770      	bx	lr
 1025ede:	bf00      	nop
 1025ee0:	200077d0 	.word	0x200077d0

01025ee4 <REGS_APP_vSt_11_read_eeprom_values>:
void REGS_APP_vSt_11_read_eeprom_values(ST_10_TYPE *st_11_structure) {	
 1025ee4:	b570      	push	{r4, r5, r6, lr}
	EEPROM_reader( ST_11_SOURCE_FLAGS_ADDR, &st_11_structure->source_flags, 1 );
 1025ee6:	4601      	mov	r1, r0
void REGS_APP_vSt_11_read_eeprom_values(ST_10_TYPE *st_11_structure) {	
 1025ee8:	4605      	mov	r5, r0
	EEPROM_reader( ST_11_SOURCE_FLAGS_ADDR, &st_11_structure->source_flags, 1 );
 1025eea:	4c15      	ldr	r4, [pc, #84]	; (1025f40 <REGS_APP_vSt_11_read_eeprom_values+0x5c>)
 1025eec:	2201      	movs	r2, #1
 1025eee:	f44f 60f3 	mov.w	r0, #1944	; 0x798
 1025ef2:	47a0      	blx	r4
	EEPROM_reader( ST_11_NBR_UOM_ENTRIES_ADDR, &st_11_structure->nbr_oum_entries, 1 );
 1025ef4:	1c69      	adds	r1, r5, #1
 1025ef6:	2201      	movs	r2, #1
 1025ef8:	f240 7099 	movw	r0, #1945	; 0x799
 1025efc:	47a0      	blx	r4
	EEPROM_reader( ST_11_NBR_DEMAND_CTRL_ENTRIES_ADDR, &st_11_structure->nbr_demand_ctrl_entries, 1 );
 1025efe:	1ca9      	adds	r1, r5, #2
 1025f00:	2201      	movs	r2, #1
 1025f02:	f240 709a 	movw	r0, #1946	; 0x79a
 1025f06:	47a0      	blx	r4
	EEPROM_reader( ST_11_DATA_CTRL_LENGTH_ADDR, &st_11_structure->data_ctrl_length, 1 );
 1025f08:	1ce9      	adds	r1, r5, #3
 1025f0a:	2201      	movs	r2, #1
 1025f0c:	f240 709b 	movw	r0, #1947	; 0x79b
 1025f10:	47a0      	blx	r4
	EEPROM_reader( ST_11_NBR_DATA_CTRL_ENTRIES_ADDR, &st_11_structure->nbr_data_ctrl_entries, 1 );
 1025f12:	1d29      	adds	r1, r5, #4
 1025f14:	2201      	movs	r2, #1
 1025f16:	f240 709c 	movw	r0, #1948	; 0x79c
 1025f1a:	47a0      	blx	r4
	EEPROM_reader( ST_11_NBR_CONSTANTS_ENTRIES_ADDR, &st_11_structure->nbr_constants_entries, 1 );
 1025f1c:	1d69      	adds	r1, r5, #5
 1025f1e:	2201      	movs	r2, #1
 1025f20:	f240 709d 	movw	r0, #1949	; 0x79d
 1025f24:	47a0      	blx	r4
	EEPROM_reader( ST_11_CONSTANTS_SELECTOR_ADDR, &st_11_structure->constants_selector, 1 );
 1025f26:	1da9      	adds	r1, r5, #6
 1025f28:	2201      	movs	r2, #1
 1025f2a:	f240 709e 	movw	r0, #1950	; 0x79e
 1025f2e:	47a0      	blx	r4
	EEPROM_reader( ST_11_NBR_SOURCES_ADDR, &st_11_structure->nbr_sources, 1 );
 1025f30:	1de9      	adds	r1, r5, #7
 1025f32:	4623      	mov	r3, r4
 1025f34:	2201      	movs	r2, #1
 1025f36:	f240 709f 	movw	r0, #1951	; 0x79f
}
 1025f3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	EEPROM_reader( ST_11_NBR_SOURCES_ADDR, &st_11_structure->nbr_sources, 1 );
 1025f3e:	4718      	bx	r3
 1025f40:	01017511 	.word	0x01017511

01025f44 <REGS_APP_vSt_21_read_eeprom_values>:
void REGS_APP_vSt_21_read_eeprom_values(ST_20_TYPE *st_21_structure) {	
 1025f44:	b570      	push	{r4, r5, r6, lr}
	EEPROM_reader( ST_21_REG_FUNC1_BFLD_ADDR, &st_21_structure->reg_func1_flags, 1 );
 1025f46:	4601      	mov	r1, r0
void REGS_APP_vSt_21_read_eeprom_values(ST_20_TYPE *st_21_structure) {	
 1025f48:	4605      	mov	r5, r0
	EEPROM_reader( ST_21_REG_FUNC1_BFLD_ADDR, &st_21_structure->reg_func1_flags, 1 );
 1025f4a:	4c1b      	ldr	r4, [pc, #108]	; (1025fb8 <REGS_APP_vSt_21_read_eeprom_values+0x74>)
 1025f4c:	2201      	movs	r2, #1
 1025f4e:	f240 70b6 	movw	r0, #1974	; 0x7b6
 1025f52:	47a0      	blx	r4
	EEPROM_reader( ST_21_REG_FUNC2_BFLD_ADDR, &st_21_structure->reg_func2_flags, 1 );
 1025f54:	1c69      	adds	r1, r5, #1
 1025f56:	2201      	movs	r2, #1
 1025f58:	f240 70b7 	movw	r0, #1975	; 0x7b7
 1025f5c:	47a0      	blx	r4
	EEPROM_reader( ST_21_NBR_SELF_READS_ADDR, &st_21_structure->nbr_self_reads, 1 );
 1025f5e:	1ca9      	adds	r1, r5, #2
 1025f60:	2201      	movs	r2, #1
 1025f62:	f44f 60f7 	mov.w	r0, #1976	; 0x7b8
 1025f66:	47a0      	blx	r4
	EEPROM_reader( ST_21_NBR_SUMMATIONS_ADDR, &st_21_structure->nbr_summations, 1 );
 1025f68:	1ce9      	adds	r1, r5, #3
 1025f6a:	2201      	movs	r2, #1
 1025f6c:	f240 70b9 	movw	r0, #1977	; 0x7b9
 1025f70:	47a0      	blx	r4
	EEPROM_reader( ST_21_NBR_DEMANDS_ADDR, &st_21_structure->nbr_demands, 1 );
 1025f72:	1d29      	adds	r1, r5, #4
 1025f74:	2201      	movs	r2, #1
 1025f76:	f240 70ba 	movw	r0, #1978	; 0x7ba
 1025f7a:	47a0      	blx	r4
	EEPROM_reader( ST_21_NBR_COIN_VALUES_ADDR, &st_21_structure->nbr_coin_values, 1 );
 1025f7c:	1d69      	adds	r1, r5, #5
 1025f7e:	2201      	movs	r2, #1
 1025f80:	f240 70bb 	movw	r0, #1979	; 0x7bb
 1025f84:	47a0      	blx	r4
	EEPROM_reader( ST_21_NBR_OCCUR_ADDR, &st_21_structure->nbr_occur, 1 );
 1025f86:	1da9      	adds	r1, r5, #6
 1025f88:	2201      	movs	r2, #1
 1025f8a:	f240 70bc 	movw	r0, #1980	; 0x7bc
 1025f8e:	47a0      	blx	r4
	EEPROM_reader( ST_21_NBR_TIERS_ADDR, &st_21_structure->nbr_tiers, 1 );
 1025f90:	1de9      	adds	r1, r5, #7
 1025f92:	2201      	movs	r2, #1
 1025f94:	f240 70bd 	movw	r0, #1981	; 0x7bd
 1025f98:	47a0      	blx	r4
	EEPROM_reader( ST_21_NBR_PRESENT_DEMANDS_ADDR, &st_21_structure->nbr_present_demands, 1 );
 1025f9a:	f105 0108 	add.w	r1, r5, #8
 1025f9e:	2201      	movs	r2, #1
 1025fa0:	f240 70be 	movw	r0, #1982	; 0x7be
 1025fa4:	47a0      	blx	r4
	EEPROM_reader( ST_21_NBR_PRESENT_VALUES_ADDR, &st_21_structure->nbr_present_values, 1 );
 1025fa6:	f105 0109 	add.w	r1, r5, #9
 1025faa:	4623      	mov	r3, r4
 1025fac:	2201      	movs	r2, #1
 1025fae:	f240 70bf 	movw	r0, #1983	; 0x7bf
}
 1025fb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	EEPROM_reader( ST_21_NBR_PRESENT_VALUES_ADDR, &st_21_structure->nbr_present_values, 1 );
 1025fb6:	4718      	bx	r3
 1025fb8:	01017511 	.word	0x01017511

01025fbc <REGS_APP_vSt_22_read_eeprom_values>:
void REGS_APP_vSt_22_read_eeprom_values(ST_22_TYPE *st_22_structure) {
 1025fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for ( i = 0; i < st_21.nbr_summations; i++ ) {
 1025fbe:	4d21      	ldr	r5, [pc, #132]	; (1026044 <REGS_APP_vSt_22_read_eeprom_values+0x88>)
 1025fc0:	4f21      	ldr	r7, [pc, #132]	; (1026048 <REGS_APP_vSt_22_read_eeprom_values+0x8c>)
 1025fc2:	78eb      	ldrb	r3, [r5, #3]
void REGS_APP_vSt_22_read_eeprom_values(ST_22_TYPE *st_22_structure) {
 1025fc4:	4606      	mov	r6, r0
	for ( i = 0; i < st_21.nbr_summations; i++ ) {
 1025fc6:	2400      	movs	r4, #0
 1025fc8:	b14b      	cbz	r3, 1025fde <REGS_APP_vSt_22_read_eeprom_values+0x22>
		EEPROM_reader( ST_22_SUMMATION_SELECT_ADDR + i, &st_22_structure->summation_select[i], 1 );
 1025fca:	1931      	adds	r1, r6, r4
 1025fcc:	f504 60f9 	add.w	r0, r4, #1992	; 0x7c8
 1025fd0:	2201      	movs	r2, #1
 1025fd2:	47b8      	blx	r7
	for ( i = 0; i < st_21.nbr_summations; i++ ) {
 1025fd4:	3401      	adds	r4, #1
 1025fd6:	78eb      	ldrb	r3, [r5, #3]
 1025fd8:	b2e4      	uxtb	r4, r4
 1025fda:	42a3      	cmp	r3, r4
 1025fdc:	d8f5      	bhi.n	1025fca <REGS_APP_vSt_22_read_eeprom_values+0xe>
	for ( i = 0; i < st_21.nbr_demands ; i++ ) {
 1025fde:	792b      	ldrb	r3, [r5, #4]
 1025fe0:	2400      	movs	r4, #0
 1025fe2:	b153      	cbz	r3, 1025ffa <REGS_APP_vSt_22_read_eeprom_values+0x3e>
		EEPROM_reader( ST_22_DEMAND_SELECT_ADDR + i, &st_22_structure->demand_select[i], 1 );
 1025fe4:	1da1      	adds	r1, r4, #6
 1025fe6:	f204 70ce 	addw	r0, r4, #1998	; 0x7ce
 1025fea:	4431      	add	r1, r6
 1025fec:	2201      	movs	r2, #1
 1025fee:	47b8      	blx	r7
	for ( i = 0; i < st_21.nbr_demands ; i++ ) {
 1025ff0:	3401      	adds	r4, #1
 1025ff2:	792b      	ldrb	r3, [r5, #4]
 1025ff4:	b2e4      	uxtb	r4, r4
 1025ff6:	42a3      	cmp	r3, r4
 1025ff8:	d8f4      	bhi.n	1025fe4 <REGS_APP_vSt_22_read_eeprom_values+0x28>
	EEPROM_reader( ST_22_MIN_OR_MAX_FLAGS_ADDR, &st_22_structure->min_or_max_flags, 1 );
 1025ffa:	2201      	movs	r2, #1
 1025ffc:	f106 0108 	add.w	r1, r6, #8
 1026000:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 1026004:	47b8      	blx	r7
	for ( i = 0; i < st_21.nbr_coin_values; i++ ) {
 1026006:	796b      	ldrb	r3, [r5, #5]
 1026008:	2400      	movs	r4, #0
 102600a:	b1d3      	cbz	r3, 1026042 <REGS_APP_vSt_22_read_eeprom_values+0x86>
		EEPROM_reader( ST_22_COINCIDENT_SELECT_ADDR + i, &st_22_structure->coincident_select[i], 1 );
 102600c:	f104 0109 	add.w	r1, r4, #9
 1026010:	f204 70d1 	addw	r0, r4, #2001	; 0x7d1
 1026014:	4431      	add	r1, r6
 1026016:	2201      	movs	r2, #1
 1026018:	47b8      	blx	r7
	for ( i = 0; i < st_21.nbr_coin_values; i++ ) {
 102601a:	3401      	adds	r4, #1
 102601c:	796b      	ldrb	r3, [r5, #5]
 102601e:	b2e4      	uxtb	r4, r4
 1026020:	42a3      	cmp	r3, r4
 1026022:	d8f3      	bhi.n	102600c <REGS_APP_vSt_22_read_eeprom_values+0x50>
	for ( i = 0; i < st_21.nbr_coin_values; i++ ) {
 1026024:	b163      	cbz	r3, 1026040 <REGS_APP_vSt_22_read_eeprom_values+0x84>
 1026026:	2400      	movs	r4, #0
		EEPROM_reader( ST_22_COIN_DEMAND_ASSOC_ADDR + i, &st_22_structure->coin_demand_assoc[i], 1 );
 1026028:	f104 0109 	add.w	r1, r4, #9
 102602c:	f204 70d1 	addw	r0, r4, #2001	; 0x7d1
 1026030:	4431      	add	r1, r6
 1026032:	2201      	movs	r2, #1
 1026034:	47b8      	blx	r7
	for ( i = 0; i < st_21.nbr_coin_values; i++ ) {
 1026036:	3401      	adds	r4, #1
 1026038:	796b      	ldrb	r3, [r5, #5]
 102603a:	b2e4      	uxtb	r4, r4
 102603c:	42a3      	cmp	r3, r4
 102603e:	d8f3      	bhi.n	1026028 <REGS_APP_vSt_22_read_eeprom_values+0x6c>
 1026040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 1026042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 1026044:	2000797c 	.word	0x2000797c
 1026048:	01017511 	.word	0x01017511

0102604c <REGS_APP_vSt_27_read_eeprom_values>:
void REGS_APP_vSt_27_read_eeprom_values(ST_27_TYPE *st_27_structure) {
 102604c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for ( i = 0; i < st_21.nbr_present_demands; i++ ) {
 102604e:	4d10      	ldr	r5, [pc, #64]	; (1026090 <REGS_APP_vSt_27_read_eeprom_values+0x44>)
 1026050:	7a2b      	ldrb	r3, [r5, #8]
void REGS_APP_vSt_27_read_eeprom_values(ST_27_TYPE *st_27_structure) {
 1026052:	4607      	mov	r7, r0
	for ( i = 0; i < st_21.nbr_present_demands; i++ ) {
 1026054:	b15b      	cbz	r3, 102606e <REGS_APP_vSt_27_read_eeprom_values+0x22>
 1026056:	4e0f      	ldr	r6, [pc, #60]	; (1026094 <REGS_APP_vSt_27_read_eeprom_values+0x48>)
 1026058:	2400      	movs	r4, #0
		EEPROM_reader( ST_27_PRESENT_DEMAND_SELECT_ADDR + i, &st_27_structure->present_demand_select[i], 1 );
 102605a:	1939      	adds	r1, r7, r4
 102605c:	f504 60fb 	add.w	r0, r4, #2008	; 0x7d8
 1026060:	2201      	movs	r2, #1
 1026062:	47b0      	blx	r6
	for ( i = 0; i < st_21.nbr_present_demands; i++ ) {
 1026064:	3401      	adds	r4, #1
 1026066:	7a2b      	ldrb	r3, [r5, #8]
 1026068:	b2e4      	uxtb	r4, r4
 102606a:	42a3      	cmp	r3, r4
 102606c:	d8f5      	bhi.n	102605a <REGS_APP_vSt_27_read_eeprom_values+0xe>
	for ( i = 0; i < st_21.nbr_present_values; i++ ) {
 102606e:	7a6b      	ldrb	r3, [r5, #9]
 1026070:	b16b      	cbz	r3, 102608e <REGS_APP_vSt_27_read_eeprom_values+0x42>
 1026072:	4e08      	ldr	r6, [pc, #32]	; (1026094 <REGS_APP_vSt_27_read_eeprom_values+0x48>)
 1026074:	2400      	movs	r4, #0
		EEPROM_reader( ST_27_PRESENT_VALUE_SELECT_ADDR + i, &st_27_structure->present_value_select[i], 1 );
 1026076:	1ca1      	adds	r1, r4, #2
 1026078:	f204 70da 	addw	r0, r4, #2010	; 0x7da
 102607c:	4439      	add	r1, r7
 102607e:	2201      	movs	r2, #1
 1026080:	47b0      	blx	r6
	for ( i = 0; i < st_21.nbr_present_values; i++ ) {
 1026082:	3401      	adds	r4, #1
 1026084:	7a6b      	ldrb	r3, [r5, #9]
 1026086:	b2e4      	uxtb	r4, r4
 1026088:	42a3      	cmp	r3, r4
 102608a:	d8f4      	bhi.n	1026076 <REGS_APP_vSt_27_read_eeprom_values+0x2a>
 102608c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 102608e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 1026090:	2000797c 	.word	0x2000797c
 1026094:	01017511 	.word	0x01017511

01026098 <REGS_APP_vStore_demands.part.1>:
void REGS_APP_vStore_demands(void) {
 1026098:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		for ( i = 0; i < st_21.nbr_demands; i++ ) {				 
 102609c:	f8df 914c 	ldr.w	r9, [pc, #332]	; 10261ec <REGS_APP_vStore_demands.part.1+0x154>
		st_23_struct_copy = st_23;
 10260a0:	494b      	ldr	r1, [pc, #300]	; (10261d0 <REGS_APP_vStore_demands.part.1+0x138>)
 10260a2:	4b4c      	ldr	r3, [pc, #304]	; (10261d4 <REGS_APP_vStore_demands.part.1+0x13c>)
 10260a4:	484c      	ldr	r0, [pc, #304]	; (10261d8 <REGS_APP_vStore_demands.part.1+0x140>)
		for ( i = 0; i < st_21.nbr_demands; i++ ) {				 
 10260a6:	4c4d      	ldr	r4, [pc, #308]	; (10261dc <REGS_APP_vStore_demands.part.1+0x144>)
		st_23_struct_copy = st_23;
 10260a8:	f44f 720e 	mov.w	r2, #568	; 0x238
 10260ac:	4798      	blx	r3
		registers_os.max_demand = false;
 10260ae:	494c      	ldr	r1, [pc, #304]	; (10261e0 <REGS_APP_vStore_demands.part.1+0x148>)
		for ( i = 0; i < st_21.nbr_demands; i++ ) {				 
 10260b0:	f899 2004 	ldrb.w	r2, [r9, #4]
		registers_os.max_demand = false;
 10260b4:	2300      	movs	r3, #0
 10260b6:	730b      	strb	r3, [r1, #12]
		for ( i = 0; i < st_21.nbr_demands; i++ ) {				 
 10260b8:	7023      	strb	r3, [r4, #0]
 10260ba:	b35a      	cbz	r2, 1026114 <REGS_APP_vStore_demands.part.1+0x7c>
 10260bc:	4e46      	ldr	r6, [pc, #280]	; (10261d8 <REGS_APP_vStore_demands.part.1+0x140>)
 10260be:	4d49      	ldr	r5, [pc, #292]	; (10261e4 <REGS_APP_vStore_demands.part.1+0x14c>)
			EEPROM_writer( ST_23_TOT_DEMANDS_DEMAND_ADDR + i*NI_FMAT2_SIZE, &st_23_struct_copy.tot_data_block.demands[i].demand[0], NI_FMAT2_SIZE );
 10260c0:	2720      	movs	r7, #32
 10260c2:	f04f 0a50 	mov.w	sl, #80	; 0x50
 10260c6:	f04f 0805 	mov.w	r8, #5
 10260ca:	fb17 a103 	smlabb	r1, r7, r3, sl
 10260ce:	f244 10df 	movw	r0, #16863	; 0x41df
 10260d2:	4431      	add	r1, r6
 10260d4:	fb08 0003 	mla	r0, r8, r3, r0
 10260d8:	2205      	movs	r2, #5
 10260da:	47a8      	blx	r5
			EEPROM_writer( ST_23_TOT_DEMANDS_CONT_CUM_DEMAND_ADDR + i*NI_FMAT1_SIZE, &st_23_struct_copy.tot_data_block.demands[i].cont_cum_demand, NI_FMAT1_SIZE );
 10260dc:	7823      	ldrb	r3, [r4, #0]
 10260de:	2206      	movs	r2, #6
 10260e0:	eb06 1143 	add.w	r1, r6, r3, lsl #5
 10260e4:	f244 10d3 	movw	r0, #16851	; 0x41d3
 10260e8:	fb02 0003 	mla	r0, r2, r3, r0
 10260ec:	3148      	adds	r1, #72	; 0x48
 10260ee:	47a8      	blx	r5
			EEPROM_writer( ST_23_TOT_DEMANDS_EVENT_TIME_ADDR + i*TM_FMAT_SIZE, &st_23_struct_copy.tot_data_block.demands[i].event_time[0], TM_FMAT_SIZE );
 10260f0:	7823      	ldrb	r3, [r4, #0]
 10260f2:	2204      	movs	r2, #4
 10260f4:	fb07 6103 	mla	r1, r7, r3, r6
 10260f8:	f244 10bf 	movw	r0, #16831	; 0x41bf
 10260fc:	fb02 0003 	mla	r0, r2, r3, r0
 1026100:	3138      	adds	r1, #56	; 0x38
 1026102:	47a8      	blx	r5
		for ( i = 0; i < st_21.nbr_demands; i++ ) {				 
 1026104:	7823      	ldrb	r3, [r4, #0]
 1026106:	f899 2004 	ldrb.w	r2, [r9, #4]
 102610a:	3301      	adds	r3, #1
 102610c:	b2db      	uxtb	r3, r3
 102610e:	429a      	cmp	r2, r3
 1026110:	7023      	strb	r3, [r4, #0]
 1026112:	d8da      	bhi.n	10260ca <REGS_APP_vStore_demands.part.1+0x32>
		for ( j = 0; j < st_21.nbr_tiers; j++ ) {
 1026114:	4d34      	ldr	r5, [pc, #208]	; (10261e8 <REGS_APP_vStore_demands.part.1+0x150>)
 1026116:	f899 3007 	ldrb.w	r3, [r9, #7]
 102611a:	2000      	movs	r0, #0
 102611c:	7028      	strb	r0, [r5, #0]
 102611e:	2b00      	cmp	r3, #0
 1026120:	d053      	beq.n	10261ca <REGS_APP_vStore_demands.part.1+0x132>
 1026122:	4f2d      	ldr	r7, [pc, #180]	; (10261d8 <REGS_APP_vStore_demands.part.1+0x140>)
 1026124:	4e2f      	ldr	r6, [pc, #188]	; (10261e4 <REGS_APP_vStore_demands.part.1+0x14c>)
			for ( i = 0; i < st_21.nbr_demands; i++ ) {
 1026126:	f899 3004 	ldrb.w	r3, [r9, #4]
 102612a:	f04f 0200 	mov.w	r2, #0
 102612e:	7022      	strb	r2, [r4, #0]
 1026130:	2b00      	cmp	r3, #0
 1026132:	d041      	beq.n	10261b8 <REGS_APP_vStore_demands.part.1+0x120>
 1026134:	2300      	movs	r3, #0
				EEPROM_writer( ST_23_TIER_DEMANDS_DEMAND_ADDR + (j * NI_FMAT2_SIZE * MAX_NBR_DEMANDS) + (i * NI_FMAT2_SIZE), &st_23_struct_copy.tier_data_block[j].demands[i].demand[0], NI_FMAT2_SIZE );
 1026136:	f04f 0820 	mov.w	r8, #32
 102613a:	f04f 0b0a 	mov.w	fp, #10
 102613e:	f244 2af9 	movw	sl, #17145	; 0x42f9
 1026142:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
 1026146:	0109      	lsls	r1, r1, #4
 1026148:	fb18 1103 	smlabb	r1, r8, r3, r1
 102614c:	2205      	movs	r2, #5
 102614e:	31c0      	adds	r1, #192	; 0xc0
 1026150:	fb1b a000 	smlabb	r0, fp, r0, sl
 1026154:	fb02 0003 	mla	r0, r2, r3, r0
 1026158:	4439      	add	r1, r7
 102615a:	47b0      	blx	r6
				EEPROM_writer( ST_23_TIER_DEMANDS_CONT_CUM_DEMAND_ADDR + (j * NI_FMAT1_SIZE * MAX_NBR_DEMANDS) + (i * NI_FMAT1_SIZE), &st_23_struct_copy.tier_data_block[j].demands[i].cont_cum_demand, NI_FMAT1_SIZE );
 102615c:	782a      	ldrb	r2, [r5, #0]
 102615e:	7820      	ldrb	r0, [r4, #0]
 1026160:	2378      	movs	r3, #120	; 0x78
 1026162:	2170      	movs	r1, #112	; 0x70
 1026164:	f100 0c02 	add.w	ip, r0, #2
 1026168:	fb11 3102 	smlabb	r1, r1, r2, r3
 102616c:	f244 2ec9 	movw	lr, #17097	; 0x42c9
 1026170:	230c      	movs	r3, #12
 1026172:	fb13 e302 	smlabb	r3, r3, r2, lr
 1026176:	eb01 114c 	add.w	r1, r1, ip, lsl #5
 102617a:	2206      	movs	r2, #6
 102617c:	fb02 3000 	mla	r0, r2, r0, r3
 1026180:	4439      	add	r1, r7
 1026182:	47b0      	blx	r6
				EEPROM_writer( ST_23_TIER_DEMANDS_EVENT_TIME_ADDR + (j * TM_FMAT_SIZE * MAX_NBR_DEMANDS) + (i * TM_FMAT_SIZE), &st_23_struct_copy.tier_data_block[j].demands[i].event_time[0], TM_FMAT_SIZE );		
 1026184:	782a      	ldrb	r2, [r5, #0]
 1026186:	7823      	ldrb	r3, [r4, #0]
 1026188:	ebc2 01c2 	rsb	r1, r2, r2, lsl #3
 102618c:	0109      	lsls	r1, r1, #4
 102618e:	fb18 1103 	smlabb	r1, r8, r3, r1
 1026192:	f244 2079 	movw	r0, #17017	; 0x4279
 1026196:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
 102619a:	31a8      	adds	r1, #168	; 0xa8
 102619c:	2204      	movs	r2, #4
 102619e:	fb02 0003 	mla	r0, r2, r3, r0
 10261a2:	4439      	add	r1, r7
 10261a4:	47b0      	blx	r6
			for ( i = 0; i < st_21.nbr_demands; i++ ) {
 10261a6:	7823      	ldrb	r3, [r4, #0]
 10261a8:	f899 2004 	ldrb.w	r2, [r9, #4]
 10261ac:	7828      	ldrb	r0, [r5, #0]
 10261ae:	3301      	adds	r3, #1
 10261b0:	b2db      	uxtb	r3, r3
 10261b2:	429a      	cmp	r2, r3
 10261b4:	7023      	strb	r3, [r4, #0]
 10261b6:	d8c4      	bhi.n	1026142 <REGS_APP_vStore_demands.part.1+0xaa>
		for ( j = 0; j < st_21.nbr_tiers; j++ ) {
 10261b8:	f899 3007 	ldrb.w	r3, [r9, #7]
 10261bc:	3001      	adds	r0, #1
 10261be:	b2c0      	uxtb	r0, r0
 10261c0:	4283      	cmp	r3, r0
 10261c2:	7028      	strb	r0, [r5, #0]
 10261c4:	d8af      	bhi.n	1026126 <REGS_APP_vStore_demands.part.1+0x8e>
 10261c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 10261ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 10261ce:	bf00      	nop
 10261d0:	20007998 	.word	0x20007998
 10261d4:	01030a3d 	.word	0x01030a3d
 10261d8:	20007d58 	.word	0x20007d58
 10261dc:	2000795a 	.word	0x2000795a
 10261e0:	20017150 	.word	0x20017150
 10261e4:	01017509 	.word	0x01017509
 10261e8:	20007971 	.word	0x20007971
 10261ec:	2000797c 	.word	0x2000797c

010261f0 <REGS_APP_vSt_27_write_eeprom_values.constprop.3>:
void REGS_APP_vSt_27_write_eeprom_values(ST_27_TYPE *st_27_structure) {
 10261f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for ( i = 0; i < st_21.nbr_present_demands; i++ ) {
 10261f4:	4d16      	ldr	r5, [pc, #88]	; (1026250 <REGS_APP_vSt_27_write_eeprom_values.constprop.3+0x60>)
	SM_APP_vChange_table_state(ST_27_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
 10261f6:	f8df 8064 	ldr.w	r8, [pc, #100]	; 102625c <REGS_APP_vSt_27_write_eeprom_values.constprop.3+0x6c>
 10261fa:	21ff      	movs	r1, #255	; 0xff
 10261fc:	f240 70d5 	movw	r0, #2005	; 0x7d5
 1026200:	47c0      	blx	r8
	for ( i = 0; i < st_21.nbr_present_demands; i++ ) {
 1026202:	7a2b      	ldrb	r3, [r5, #8]
 1026204:	b163      	cbz	r3, 1026220 <REGS_APP_vSt_27_write_eeprom_values.constprop.3+0x30>
 1026206:	4f13      	ldr	r7, [pc, #76]	; (1026254 <REGS_APP_vSt_27_write_eeprom_values.constprop.3+0x64>)
 1026208:	4e13      	ldr	r6, [pc, #76]	; (1026258 <REGS_APP_vSt_27_write_eeprom_values.constprop.3+0x68>)
 102620a:	2400      	movs	r4, #0
		EEPROM_writer( ST_27_PRESENT_DEMAND_SELECT_ADDR + i, &st_27_structure->present_demand_select[i], 1 );
 102620c:	1939      	adds	r1, r7, r4
 102620e:	f504 60fb 	add.w	r0, r4, #2008	; 0x7d8
 1026212:	2201      	movs	r2, #1
 1026214:	47b0      	blx	r6
	for ( i = 0; i < st_21.nbr_present_demands; i++ ) {
 1026216:	3401      	adds	r4, #1
 1026218:	7a2b      	ldrb	r3, [r5, #8]
 102621a:	b2e4      	uxtb	r4, r4
 102621c:	42a3      	cmp	r3, r4
 102621e:	d8f5      	bhi.n	102620c <REGS_APP_vSt_27_write_eeprom_values.constprop.3+0x1c>
	for ( i = 0; i < st_21.nbr_present_values; i++ ) {
 1026220:	7a6b      	ldrb	r3, [r5, #9]
 1026222:	b16b      	cbz	r3, 1026240 <REGS_APP_vSt_27_write_eeprom_values.constprop.3+0x50>
 1026224:	4f0b      	ldr	r7, [pc, #44]	; (1026254 <REGS_APP_vSt_27_write_eeprom_values.constprop.3+0x64>)
 1026226:	4e0c      	ldr	r6, [pc, #48]	; (1026258 <REGS_APP_vSt_27_write_eeprom_values.constprop.3+0x68>)
 1026228:	2400      	movs	r4, #0
		EEPROM_writer( ST_27_PRESENT_VALUE_SELECT_ADDR + i, &st_27_structure->present_value_select[i], 1 );
 102622a:	1ca1      	adds	r1, r4, #2
 102622c:	f204 70da 	addw	r0, r4, #2010	; 0x7da
 1026230:	4439      	add	r1, r7
 1026232:	2201      	movs	r2, #1
 1026234:	47b0      	blx	r6
	for ( i = 0; i < st_21.nbr_present_values; i++ ) {
 1026236:	3401      	adds	r4, #1
 1026238:	7a6b      	ldrb	r3, [r5, #9]
 102623a:	b2e4      	uxtb	r4, r4
 102623c:	42a3      	cmp	r3, r4
 102623e:	d8f4      	bhi.n	102622a <REGS_APP_vSt_27_write_eeprom_values.constprop.3+0x3a>
	SM_APP_vChange_table_state(ST_27_PROG_STATE_ADDR, C1219_TABLE_FULL);
 1026240:	4643      	mov	r3, r8
 1026242:	2145      	movs	r1, #69	; 0x45
 1026244:	f240 70d5 	movw	r0, #2005	; 0x7d5
}
 1026248:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	SM_APP_vChange_table_state(ST_27_PROG_STATE_ADDR, C1219_TABLE_FULL);
 102624c:	4718      	bx	r3
 102624e:	bf00      	nop
 1026250:	2000797c 	.word	0x2000797c
 1026254:	20007f90 	.word	0x20007f90
 1026258:	01017509 	.word	0x01017509
 102625c:	010203e9 	.word	0x010203e9

01026260 <REGS_APP_vSt_22_write_eeprom_values.constprop.5>:
void REGS_APP_vSt_22_write_eeprom_values(ST_22_TYPE *st_22_structure)
 1026260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for ( i = 0; i < st_21.nbr_summations; i++ ) {
 1026264:	4d28      	ldr	r5, [pc, #160]	; (1026308 <REGS_APP_vSt_22_write_eeprom_values.constprop.5+0xa8>)
	SM_APP_vChange_table_state(ST_22_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
 1026266:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 1026318 <REGS_APP_vSt_22_write_eeprom_values.constprop.5+0xb8>
 102626a:	21ff      	movs	r1, #255	; 0xff
 102626c:	f240 70c5 	movw	r0, #1989	; 0x7c5
 1026270:	47c0      	blx	r8
	for ( i = 0; i < st_21.nbr_summations; i++ ) {
 1026272:	78eb      	ldrb	r3, [r5, #3]
 1026274:	2b00      	cmp	r3, #0
 1026276:	d045      	beq.n	1026304 <REGS_APP_vSt_22_write_eeprom_values.constprop.5+0xa4>
 1026278:	4e24      	ldr	r6, [pc, #144]	; (102630c <REGS_APP_vSt_22_write_eeprom_values.constprop.5+0xac>)
 102627a:	4f25      	ldr	r7, [pc, #148]	; (1026310 <REGS_APP_vSt_22_write_eeprom_values.constprop.5+0xb0>)
 102627c:	2400      	movs	r4, #0
		EEPROM_writer( ST_22_SUMMATION_SELECT_ADDR + i, &st_22_structure->summation_select[i], 1 );
 102627e:	1931      	adds	r1, r6, r4
 1026280:	f504 60f9 	add.w	r0, r4, #1992	; 0x7c8
 1026284:	2201      	movs	r2, #1
 1026286:	47b8      	blx	r7
	for ( i = 0; i < st_21.nbr_summations; i++ ) {
 1026288:	3401      	adds	r4, #1
 102628a:	78eb      	ldrb	r3, [r5, #3]
 102628c:	b2e4      	uxtb	r4, r4
 102628e:	42a3      	cmp	r3, r4
 1026290:	d8f5      	bhi.n	102627e <REGS_APP_vSt_22_write_eeprom_values.constprop.5+0x1e>
	for ( i = 0; i < st_21.nbr_demands; i++ ) {
 1026292:	792b      	ldrb	r3, [r5, #4]
 1026294:	b163      	cbz	r3, 10262b0 <REGS_APP_vSt_22_write_eeprom_values.constprop.5+0x50>
 1026296:	4e1d      	ldr	r6, [pc, #116]	; (102630c <REGS_APP_vSt_22_write_eeprom_values.constprop.5+0xac>)
 1026298:	2400      	movs	r4, #0
		EEPROM_writer( ST_22_DEMAND_SELECT_ADDR + i, &st_22_structure->demand_select[i], 1 );
 102629a:	1da1      	adds	r1, r4, #6
 102629c:	f204 70ce 	addw	r0, r4, #1998	; 0x7ce
 10262a0:	4431      	add	r1, r6
 10262a2:	2201      	movs	r2, #1
 10262a4:	47b8      	blx	r7
	for ( i = 0; i < st_21.nbr_demands; i++ ) {
 10262a6:	3401      	adds	r4, #1
 10262a8:	792b      	ldrb	r3, [r5, #4]
 10262aa:	b2e4      	uxtb	r4, r4
 10262ac:	42a3      	cmp	r3, r4
 10262ae:	d8f4      	bhi.n	102629a <REGS_APP_vSt_22_write_eeprom_values.constprop.5+0x3a>
	EEPROM_writer( ST_22_MIN_OR_MAX_FLAGS_ADDR, &st_22_structure->min_or_max_flags, 1 );
 10262b0:	2201      	movs	r2, #1
 10262b2:	4918      	ldr	r1, [pc, #96]	; (1026314 <REGS_APP_vSt_22_write_eeprom_values.constprop.5+0xb4>)
 10262b4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 10262b8:	47b8      	blx	r7
	for ( i = 0; i < st_21.nbr_coin_values; i++ ) {
 10262ba:	796b      	ldrb	r3, [r5, #5]
 10262bc:	b1db      	cbz	r3, 10262f6 <REGS_APP_vSt_22_write_eeprom_values.constprop.5+0x96>
 10262be:	4e13      	ldr	r6, [pc, #76]	; (102630c <REGS_APP_vSt_22_write_eeprom_values.constprop.5+0xac>)
 10262c0:	2400      	movs	r4, #0
		EEPROM_writer( ST_22_COINCIDENT_SELECT_ADDR + i, &st_22_structure->coincident_select[i], 1 );
 10262c2:	f104 0109 	add.w	r1, r4, #9
 10262c6:	f204 70d1 	addw	r0, r4, #2001	; 0x7d1
 10262ca:	4431      	add	r1, r6
 10262cc:	2201      	movs	r2, #1
 10262ce:	47b8      	blx	r7
	for ( i = 0; i < st_21.nbr_coin_values; i++ ) {
 10262d0:	3401      	adds	r4, #1
 10262d2:	796b      	ldrb	r3, [r5, #5]
 10262d4:	b2e4      	uxtb	r4, r4
 10262d6:	429c      	cmp	r4, r3
 10262d8:	d3f3      	bcc.n	10262c2 <REGS_APP_vSt_22_write_eeprom_values.constprop.5+0x62>
	for ( i = 0; i < st_21.nbr_coin_values; i++ ) {
 10262da:	b163      	cbz	r3, 10262f6 <REGS_APP_vSt_22_write_eeprom_values.constprop.5+0x96>
 10262dc:	2400      	movs	r4, #0
		EEPROM_writer( ST_22_COIN_DEMAND_ASSOC_ADDR + i, &st_22_structure->coin_demand_assoc[i], 1 );
 10262de:	f104 0109 	add.w	r1, r4, #9
 10262e2:	f204 70d1 	addw	r0, r4, #2001	; 0x7d1
 10262e6:	4431      	add	r1, r6
 10262e8:	2201      	movs	r2, #1
 10262ea:	47b8      	blx	r7
	for ( i = 0; i < st_21.nbr_coin_values; i++ ) {
 10262ec:	3401      	adds	r4, #1
 10262ee:	796b      	ldrb	r3, [r5, #5]
 10262f0:	b2e4      	uxtb	r4, r4
 10262f2:	42a3      	cmp	r3, r4
 10262f4:	d8f3      	bhi.n	10262de <REGS_APP_vSt_22_write_eeprom_values.constprop.5+0x7e>
	SM_APP_vChange_table_state(ST_22_PROG_STATE_ADDR, C1219_TABLE_FULL);
 10262f6:	4643      	mov	r3, r8
 10262f8:	2145      	movs	r1, #69	; 0x45
 10262fa:	f240 70c5 	movw	r0, #1989	; 0x7c5
}
 10262fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	SM_APP_vChange_table_state(ST_22_PROG_STATE_ADDR, C1219_TABLE_FULL);
 1026302:	4718      	bx	r3
 1026304:	4f02      	ldr	r7, [pc, #8]	; (1026310 <REGS_APP_vSt_22_write_eeprom_values.constprop.5+0xb0>)
 1026306:	e7c4      	b.n	1026292 <REGS_APP_vSt_22_write_eeprom_values.constprop.5+0x32>
 1026308:	2000797c 	.word	0x2000797c
 102630c:	20007988 	.word	0x20007988
 1026310:	01017509 	.word	0x01017509
 1026314:	20007990 	.word	0x20007990
 1026318:	010203e9 	.word	0x010203e9

0102631c <REGS_APP_vSt_21_write_eeprom_values.constprop.6>:
void REGS_APP_vSt_21_write_eeprom_values(ST_20_TYPE *st_21_structure)
 102631c:	b570      	push	{r4, r5, r6, lr}
	EEPROM_writer( ST_21_REG_FUNC1_BFLD_ADDR, &st_21_structure->reg_func1_flags, 1 );
 102631e:	4d21      	ldr	r5, [pc, #132]	; (10263a4 <REGS_APP_vSt_21_write_eeprom_values.constprop.6+0x88>)
	SM_APP_vChange_table_state(ST_21_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
 1026320:	4e21      	ldr	r6, [pc, #132]	; (10263a8 <REGS_APP_vSt_21_write_eeprom_values.constprop.6+0x8c>)
	EEPROM_writer( ST_21_REG_FUNC1_BFLD_ADDR, &st_21_structure->reg_func1_flags, 1 );
 1026322:	4c22      	ldr	r4, [pc, #136]	; (10263ac <REGS_APP_vSt_21_write_eeprom_values.constprop.6+0x90>)
	SM_APP_vChange_table_state(ST_21_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
 1026324:	21ff      	movs	r1, #255	; 0xff
 1026326:	f240 70b3 	movw	r0, #1971	; 0x7b3
 102632a:	47b0      	blx	r6
	EEPROM_writer( ST_21_REG_FUNC1_BFLD_ADDR, &st_21_structure->reg_func1_flags, 1 );
 102632c:	4629      	mov	r1, r5
 102632e:	2201      	movs	r2, #1
 1026330:	f240 70b6 	movw	r0, #1974	; 0x7b6
 1026334:	47a0      	blx	r4
	EEPROM_writer( ST_21_REG_FUNC2_BFLD_ADDR, &st_21_structure->reg_func2_flags, 1 );
 1026336:	1c69      	adds	r1, r5, #1
 1026338:	2201      	movs	r2, #1
 102633a:	f240 70b7 	movw	r0, #1975	; 0x7b7
 102633e:	47a0      	blx	r4
	EEPROM_writer( ST_21_NBR_SELF_READS_ADDR, &st_21_structure->nbr_self_reads, 1 );
 1026340:	1ca9      	adds	r1, r5, #2
 1026342:	2201      	movs	r2, #1
 1026344:	f44f 60f7 	mov.w	r0, #1976	; 0x7b8
 1026348:	47a0      	blx	r4
	EEPROM_writer( ST_21_NBR_SUMMATIONS_ADDR, &st_21_structure->nbr_summations, 1 );
 102634a:	1ce9      	adds	r1, r5, #3
 102634c:	2201      	movs	r2, #1
 102634e:	f240 70b9 	movw	r0, #1977	; 0x7b9
 1026352:	47a0      	blx	r4
	EEPROM_writer( ST_21_NBR_DEMANDS_ADDR, &st_21_structure->nbr_demands, 1 );
 1026354:	1d29      	adds	r1, r5, #4
 1026356:	2201      	movs	r2, #1
 1026358:	f240 70ba 	movw	r0, #1978	; 0x7ba
 102635c:	47a0      	blx	r4
	EEPROM_writer( ST_21_NBR_COIN_VALUES_ADDR, &st_21_structure->nbr_coin_values, 1 );
 102635e:	1d69      	adds	r1, r5, #5
 1026360:	2201      	movs	r2, #1
 1026362:	f240 70bb 	movw	r0, #1979	; 0x7bb
 1026366:	47a0      	blx	r4
	EEPROM_writer( ST_21_NBR_OCCUR_ADDR, &st_21_structure->nbr_occur, 1 );
 1026368:	1da9      	adds	r1, r5, #6
 102636a:	2201      	movs	r2, #1
 102636c:	f240 70bc 	movw	r0, #1980	; 0x7bc
 1026370:	47a0      	blx	r4
	EEPROM_writer( ST_21_NBR_TIERS_ADDR, &st_21_structure->nbr_tiers, 1 );
 1026372:	1de9      	adds	r1, r5, #7
 1026374:	2201      	movs	r2, #1
 1026376:	f240 70bd 	movw	r0, #1981	; 0x7bd
 102637a:	47a0      	blx	r4
	EEPROM_writer( ST_21_NBR_PRESENT_DEMANDS_ADDR, &st_21_structure->nbr_present_demands, 1 );
 102637c:	f105 0108 	add.w	r1, r5, #8
 1026380:	2201      	movs	r2, #1
 1026382:	f240 70be 	movw	r0, #1982	; 0x7be
 1026386:	47a0      	blx	r4
	EEPROM_writer( ST_21_NBR_PRESENT_VALUES_ADDR, &st_21_structure->nbr_present_values, 1 );
 1026388:	f105 0109 	add.w	r1, r5, #9
 102638c:	2201      	movs	r2, #1
 102638e:	f240 70bf 	movw	r0, #1983	; 0x7bf
 1026392:	47a0      	blx	r4
	SM_APP_vChange_table_state(ST_21_PROG_STATE_ADDR, C1219_TABLE_FULL);
 1026394:	4633      	mov	r3, r6
 1026396:	2145      	movs	r1, #69	; 0x45
 1026398:	f240 70b3 	movw	r0, #1971	; 0x7b3
}
 102639c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	SM_APP_vChange_table_state(ST_21_PROG_STATE_ADDR, C1219_TABLE_FULL);
 10263a0:	4718      	bx	r3
 10263a2:	bf00      	nop
 10263a4:	2000797c 	.word	0x2000797c
 10263a8:	010203e9 	.word	0x010203e9
 10263ac:	01017509 	.word	0x01017509

010263b0 <REGS_APP_vSt_11_write_eeprom_values.constprop.7>:
void REGS_APP_vSt_11_write_eeprom_values(ST_10_TYPE *st_11_structure) {
 10263b0:	b570      	push	{r4, r5, r6, lr}
	EEPROM_writer( ST_11_SOURCE_FLAGS_ADDR, &st_11_structure->source_flags, 1 );
 10263b2:	4d1b      	ldr	r5, [pc, #108]	; (1026420 <REGS_APP_vSt_11_write_eeprom_values.constprop.7+0x70>)
	SM_APP_vChange_table_state(ST_11_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
 10263b4:	4e1b      	ldr	r6, [pc, #108]	; (1026424 <REGS_APP_vSt_11_write_eeprom_values.constprop.7+0x74>)
	EEPROM_writer( ST_11_SOURCE_FLAGS_ADDR, &st_11_structure->source_flags, 1 );
 10263b6:	4c1c      	ldr	r4, [pc, #112]	; (1026428 <REGS_APP_vSt_11_write_eeprom_values.constprop.7+0x78>)
	SM_APP_vChange_table_state(ST_11_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
 10263b8:	21ff      	movs	r1, #255	; 0xff
 10263ba:	f240 7095 	movw	r0, #1941	; 0x795
 10263be:	47b0      	blx	r6
	EEPROM_writer( ST_11_SOURCE_FLAGS_ADDR, &st_11_structure->source_flags, 1 );
 10263c0:	4629      	mov	r1, r5
 10263c2:	2201      	movs	r2, #1
 10263c4:	f44f 60f3 	mov.w	r0, #1944	; 0x798
 10263c8:	47a0      	blx	r4
	EEPROM_writer( ST_11_NBR_UOM_ENTRIES_ADDR, &st_11_structure->nbr_oum_entries, 1 );
 10263ca:	1c69      	adds	r1, r5, #1
 10263cc:	2201      	movs	r2, #1
 10263ce:	f240 7099 	movw	r0, #1945	; 0x799
 10263d2:	47a0      	blx	r4
	EEPROM_writer( ST_11_NBR_DEMAND_CTRL_ENTRIES_ADDR, &st_11_structure->nbr_demand_ctrl_entries, 1 );
 10263d4:	1ca9      	adds	r1, r5, #2
 10263d6:	2201      	movs	r2, #1
 10263d8:	f240 709a 	movw	r0, #1946	; 0x79a
 10263dc:	47a0      	blx	r4
	EEPROM_writer( ST_11_DATA_CTRL_LENGTH_ADDR, &st_11_structure->data_ctrl_length, 1 );
 10263de:	1ce9      	adds	r1, r5, #3
 10263e0:	2201      	movs	r2, #1
 10263e2:	f240 709b 	movw	r0, #1947	; 0x79b
 10263e6:	47a0      	blx	r4
	EEPROM_writer( ST_11_NBR_DATA_CTRL_ENTRIES_ADDR, &st_11_structure->nbr_data_ctrl_entries, 1 );
 10263e8:	1d29      	adds	r1, r5, #4
 10263ea:	2201      	movs	r2, #1
 10263ec:	f240 709c 	movw	r0, #1948	; 0x79c
 10263f0:	47a0      	blx	r4
	EEPROM_writer( ST_11_NBR_CONSTANTS_ENTRIES_ADDR, &st_11_structure->nbr_constants_entries, 1 );
 10263f2:	1d69      	adds	r1, r5, #5
 10263f4:	2201      	movs	r2, #1
 10263f6:	f240 709d 	movw	r0, #1949	; 0x79d
 10263fa:	47a0      	blx	r4
	EEPROM_writer( ST_11_CONSTANTS_SELECTOR_ADDR, &st_11_structure->constants_selector, 1 );
 10263fc:	1da9      	adds	r1, r5, #6
 10263fe:	2201      	movs	r2, #1
 1026400:	f240 709e 	movw	r0, #1950	; 0x79e
 1026404:	47a0      	blx	r4
	EEPROM_writer( ST_11_NBR_SOURCES_ADDR, &st_11_structure->nbr_sources, 1 );
 1026406:	1de9      	adds	r1, r5, #7
 1026408:	2201      	movs	r2, #1
 102640a:	f240 709f 	movw	r0, #1951	; 0x79f
 102640e:	47a0      	blx	r4
	SM_APP_vChange_table_state(ST_11_PROG_STATE_ADDR, C1219_TABLE_FULL);
 1026410:	4633      	mov	r3, r6
 1026412:	2145      	movs	r1, #69	; 0x45
 1026414:	f240 7095 	movw	r0, #1941	; 0x795
}
 1026418:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	SM_APP_vChange_table_state(ST_11_PROG_STATE_ADDR, C1219_TABLE_FULL);
 102641c:	4718      	bx	r3
 102641e:	bf00      	nop
 1026420:	20007974 	.word	0x20007974
 1026424:	010203e9 	.word	0x010203e9
 1026428:	01017509 	.word	0x01017509

0102642c <REGS_APP_vInitialize>:
void REGS_APP_vInitialize(void) {
 102642c:	b570      	push	{r4, r5, r6, lr}
	memset( &demand, 0, sizeof(demand) );
 102642e:	4c22      	ldr	r4, [pc, #136]	; (10264b8 <REGS_APP_vInitialize+0x8c>)
	registers_os.task_execute = false;
 1026430:	4b22      	ldr	r3, [pc, #136]	; (10264bc <REGS_APP_vInitialize+0x90>)
	memset( &demand, 0, sizeof(demand) );
 1026432:	4e23      	ldr	r6, [pc, #140]	; (10264c0 <REGS_APP_vInitialize+0x94>)
	registers_os.task_execute = false;
 1026434:	2500      	movs	r5, #0
void REGS_APP_vInitialize(void) {
 1026436:	b082      	sub	sp, #8
	memset( &demand, 0, sizeof(demand) );
 1026438:	4629      	mov	r1, r5
 102643a:	f44f 72c4 	mov.w	r2, #392	; 0x188
 102643e:	4620      	mov	r0, r4
	registers_os.task_execute = false;
 1026440:	715d      	strb	r5, [r3, #5]
	registers_os.time_after_last_backup = 0;
 1026442:	609d      	str	r5, [r3, #8]
	memset( &demand, 0, sizeof(demand) );
 1026444:	47b0      	blx	r6
	REGS_APP_vReset_demands_intervals();
 1026446:	4b1f      	ldr	r3, [pc, #124]	; (10264c4 <REGS_APP_vInitialize+0x98>)
 1026448:	4798      	blx	r3
	if ( (st_11.source_flags & BLOCK_DEMAND_FLAG_bm) == BLOCK_DEMAND_FLAG_bm ) {
 102644a:	4b1f      	ldr	r3, [pc, #124]	; (10264c8 <REGS_APP_vInitialize+0x9c>)
 102644c:	781b      	ldrb	r3, [r3, #0]
 102644e:	075b      	lsls	r3, r3, #29
 1026450:	d41f      	bmi.n	1026492 <REGS_APP_vInitialize+0x66>
		EEPROM_reader( ST_13_SUB_INT_ADDR, &sub_int_min, 1 );
 1026452:	f10d 0105 	add.w	r1, sp, #5
 1026456:	4d1d      	ldr	r5, [pc, #116]	; (10264cc <REGS_APP_vInitialize+0xa0>)
 1026458:	2201      	movs	r2, #1
 102645a:	f240 70ab 	movw	r0, #1963	; 0x7ab
 102645e:	47a8      	blx	r5
		EEPROM_reader( ST_13_INT_MULTIPLIER_ADDR, &int_multiplier, 1 );
 1026460:	f10d 0106 	add.w	r1, sp, #6
 1026464:	2201      	movs	r2, #1
 1026466:	f240 70ad 	movw	r0, #1965	; 0x7ad
 102646a:	47a8      	blx	r5
		demand.config.nbr_intervals = int_multiplier;
 102646c:	f89d 3006 	ldrb.w	r3, [sp, #6]
		demand.config.interval_length = sub_int_min * int_multiplier * SECONDS_PER_MINUTE;
 1026470:	f89d 2005 	ldrb.w	r2, [sp, #5]
		demand.config.nbr_intervals = int_multiplier;
 1026474:	71a3      	strb	r3, [r4, #6]
		demand.config.interval_length = sub_int_min * int_multiplier * SECONDS_PER_MINUTE;
 1026476:	fb13 f302 	smulbb	r3, r3, r2
 102647a:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
		demand.config.subinterval_length = sub_int_min * SECONDS_PER_MINUTE;
 102647e:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
		demand.config.interval_length = sub_int_min * int_multiplier * SECONDS_PER_MINUTE;
 1026482:	009b      	lsls	r3, r3, #2
		demand.config.subinterval_length = sub_int_min * SECONDS_PER_MINUTE;
 1026484:	0092      	lsls	r2, r2, #2
		demand.config.is_sliding_demand = true;
 1026486:	2101      	movs	r1, #1
		demand.config.interval_length = sub_int_min * int_multiplier * SECONDS_PER_MINUTE;
 1026488:	8063      	strh	r3, [r4, #2]
		demand.config.subinterval_length = sub_int_min * SECONDS_PER_MINUTE;
 102648a:	80a2      	strh	r2, [r4, #4]
		demand.config.is_sliding_demand = true;
 102648c:	7021      	strb	r1, [r4, #0]
}
 102648e:	b002      	add	sp, #8
 1026490:	bd70      	pop	{r4, r5, r6, pc}
		EEPROM_reader( ST_13_INT_LENGTH_ADDR, &int_len_min, 2 );
 1026492:	2202      	movs	r2, #2
 1026494:	f10d 0106 	add.w	r1, sp, #6
 1026498:	4b0c      	ldr	r3, [pc, #48]	; (10264cc <REGS_APP_vInitialize+0xa0>)
 102649a:	f240 70ab 	movw	r0, #1963	; 0x7ab
 102649e:	4798      	blx	r3
		demand.config.interval_length = int_len_min * SECONDS_PER_MINUTE;
 10264a0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		demand.config.is_sliding_demand = false;
 10264a4:	7025      	strb	r5, [r4, #0]
		demand.config.interval_length = int_len_min * SECONDS_PER_MINUTE;
 10264a6:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 10264aa:	009b      	lsls	r3, r3, #2
		demand.config.nbr_intervals = 0;
 10264ac:	71a5      	strb	r5, [r4, #6]
 		demand.config.subinterval_length = 0;
 10264ae:	80a5      	strh	r5, [r4, #4]
		demand.config.interval_length = int_len_min * SECONDS_PER_MINUTE;
 10264b0:	8063      	strh	r3, [r4, #2]
}
 10264b2:	b002      	add	sp, #8
 10264b4:	bd70      	pop	{r4, r5, r6, pc}
 10264b6:	bf00      	nop
 10264b8:	200077d0 	.word	0x200077d0
 10264bc:	20017150 	.word	0x20017150
 10264c0:	01030b71 	.word	0x01030b71
 10264c4:	01025eb9 	.word	0x01025eb9
 10264c8:	20007974 	.word	0x20007974
 10264cc:	01017511 	.word	0x01017511

010264d0 <REGS_APP_bSt_10_execute_table_reading>:
bool REGS_APP_bSt_10_execute_table_reading(uint8_t *table_buffer) {
 10264d0:	b410      	push	{r4}
	table_buffer[1] = MAX_NBR_UOM_ENTRIES;
 10264d2:	23ff      	movs	r3, #255	; 0xff
	table_buffer[0] = PERM_SOURCE_FLAGS;
 10264d4:	242c      	movs	r4, #44	; 0x2c
	table_buffer[3] = MAX_DATA_CTRL_LENGTH;
 10264d6:	2200      	movs	r2, #0
	table_buffer[6] = MAX_CONSTANTS_SELECTOR;
 10264d8:	2102      	movs	r1, #2
	table_buffer[0] = PERM_SOURCE_FLAGS;
 10264da:	7004      	strb	r4, [r0, #0]
	table_buffer[6] = MAX_CONSTANTS_SELECTOR;
 10264dc:	7181      	strb	r1, [r0, #6]
	table_buffer[1] = MAX_NBR_UOM_ENTRIES;
 10264de:	7043      	strb	r3, [r0, #1]
	table_buffer[2] = MAX_NBR_DEMAND_CTRL_ENTRIES;
 10264e0:	7083      	strb	r3, [r0, #2]
	table_buffer[5] = MAX_NBR_CONSTANTS_ENTRIES;
 10264e2:	7143      	strb	r3, [r0, #5]
	table_buffer[7] = MAX_NBR_SOURCES;
 10264e4:	71c3      	strb	r3, [r0, #7]
	table_buffer[3] = MAX_DATA_CTRL_LENGTH;
 10264e6:	70c2      	strb	r2, [r0, #3]
	table_buffer[4] = MAX_NBR_DATA_CTRL_ENTRIES;
 10264e8:	7102      	strb	r2, [r0, #4]
}
 10264ea:	bc10      	pop	{r4}
 10264ec:	2001      	movs	r0, #1
 10264ee:	4770      	bx	lr

010264f0 <REGS_APP_usSt_10_get_size>:
 10264f0:	2008      	movs	r0, #8
 10264f2:	4770      	bx	lr

010264f4 <REGS_APP_bSt_11_restore_default_values>:
bool REGS_APP_bSt_11_restore_default_values(void) {
 10264f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 10264f6:	b083      	sub	sp, #12
	st_11_temp.source_flags = DEFAULT_SOURCE_FLAGS;
 10264f8:	2124      	movs	r1, #36	; 0x24
	st_11_temp.nbr_oum_entries = DEFAULT_NBR_UOM_ENTRIES;
 10264fa:	2291      	movs	r2, #145	; 0x91
	st_11_temp.data_ctrl_length = DEFAULT_DATA_CTRL_LENGTH;
 10264fc:	2300      	movs	r3, #0
	st_11_temp.source_flags = DEFAULT_SOURCE_FLAGS;
 10264fe:	f88d 1000 	strb.w	r1, [sp]
	is_ok = REGS_APP_bSt_11_validate_data(&st_11_temp);
 1026502:	4668      	mov	r0, sp
	st_11_temp.nbr_demand_ctrl_entries = DEFAULT_NBR_DEMAND_CTRL_ENTRIES;
 1026504:	2738      	movs	r7, #56	; 0x38
	st_11_temp.constants_selector = DEFAULT_CONSTANTS_SELECTOR;
 1026506:	2602      	movs	r6, #2
	st_11_temp.nbr_sources = DEFAULT_NBR_SOURCES;
 1026508:	25ff      	movs	r5, #255	; 0xff
	is_ok = REGS_APP_bSt_11_validate_data(&st_11_temp);
 102650a:	490f      	ldr	r1, [pc, #60]	; (1026548 <REGS_APP_bSt_11_restore_default_values+0x54>)
	st_11_temp.nbr_oum_entries = DEFAULT_NBR_UOM_ENTRIES;
 102650c:	f88d 2001 	strb.w	r2, [sp, #1]
	st_11_temp.nbr_constants_entries = DEFAULT_NBR_CONSTANTS_ENTRIES;
 1026510:	f88d 2005 	strb.w	r2, [sp, #5]
	st_11_temp.data_ctrl_length = DEFAULT_DATA_CTRL_LENGTH;
 1026514:	f88d 3003 	strb.w	r3, [sp, #3]
	st_11_temp.nbr_data_ctrl_entries = DEFAULT_NBR_DATA_CTRL_ENTRIES;
 1026518:	f88d 3004 	strb.w	r3, [sp, #4]
	st_11_temp.nbr_sources = DEFAULT_NBR_SOURCES;
 102651c:	f88d 5007 	strb.w	r5, [sp, #7]
	st_11_temp.nbr_demand_ctrl_entries = DEFAULT_NBR_DEMAND_CTRL_ENTRIES;
 1026520:	f88d 7002 	strb.w	r7, [sp, #2]
	st_11_temp.constants_selector = DEFAULT_CONSTANTS_SELECTOR;
 1026524:	f88d 6006 	strb.w	r6, [sp, #6]
	is_ok = REGS_APP_bSt_11_validate_data(&st_11_temp);
 1026528:	4788      	blx	r1
 102652a:	4605      	mov	r5, r0
	st_11 = st_11_temp;
 102652c:	e89d 0003 	ldmia.w	sp, {r0, r1}
 1026530:	4b06      	ldr	r3, [pc, #24]	; (102654c <REGS_APP_bSt_11_restore_default_values+0x58>)
	REGS_APP_vSt_11_write_eeprom_values(&st_11);
 1026532:	4a07      	ldr	r2, [pc, #28]	; (1026550 <REGS_APP_bSt_11_restore_default_values+0x5c>)
	st_11 = st_11_temp;
 1026534:	e883 0003 	stmia.w	r3, {r0, r1}
	REGS_APP_vSt_11_write_eeprom_values(&st_11);
 1026538:	4790      	blx	r2
	uint16_t crc = SM_APP_usSt_11_ram_calculate_crc();
 102653a:	4b06      	ldr	r3, [pc, #24]	; (1026554 <REGS_APP_bSt_11_restore_default_values+0x60>)
 102653c:	4798      	blx	r3
	SM_APP_vSt_11_write_crc(crc);
 102653e:	4b06      	ldr	r3, [pc, #24]	; (1026558 <REGS_APP_bSt_11_restore_default_values+0x64>)
 1026540:	4798      	blx	r3
}
 1026542:	4628      	mov	r0, r5
 1026544:	b003      	add	sp, #12
 1026546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1026548:	01025c95 	.word	0x01025c95
 102654c:	20007974 	.word	0x20007974
 1026550:	010263b1 	.word	0x010263b1
 1026554:	0101f441 	.word	0x0101f441
 1026558:	0101f4f1 	.word	0x0101f4f1

0102655c <REGS_APP_bSt_11_refresh_ram>:
bool REGS_APP_bSt_11_refresh_ram(void) {
 102655c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1026560:	f8df 8050 	ldr.w	r8, [pc, #80]	; 10265b4 <REGS_APP_bSt_11_refresh_ram+0x58>
 1026564:	4f10      	ldr	r7, [pc, #64]	; (10265a8 <REGS_APP_bSt_11_refresh_ram+0x4c>)
 1026566:	b082      	sub	sp, #8
 1026568:	2403      	movs	r4, #3
 102656a:	466d      	mov	r5, sp
		REGS_APP_vSt_11_read_eeprom_values(&st_11_temp);
 102656c:	4628      	mov	r0, r5
 102656e:	47c0      	blx	r8
		is_ok = REGS_APP_bSt_11_validate_data(&st_11_temp);
 1026570:	4628      	mov	r0, r5
 1026572:	47b8      	blx	r7
 1026574:	1e63      	subs	r3, r4, #1
		if ( is_ok ) {
 1026576:	4606      	mov	r6, r0
 1026578:	b968      	cbnz	r0, 1026596 <REGS_APP_bSt_11_refresh_ram+0x3a>
	for (uint8_t i = 0; i < 3; i++) {
 102657a:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 102657e:	d1f5      	bne.n	102656c <REGS_APP_bSt_11_refresh_ram+0x10>
		st_11 = st_11_temp;
 1026580:	e895 0003 	ldmia.w	r5, {r0, r1}
 1026584:	4b09      	ldr	r3, [pc, #36]	; (10265ac <REGS_APP_bSt_11_refresh_ram+0x50>)
		REGS_APP_vSt_11_write_eeprom_values(&st_11);
 1026586:	4a0a      	ldr	r2, [pc, #40]	; (10265b0 <REGS_APP_bSt_11_refresh_ram+0x54>)
		st_11 = st_11_temp;
 1026588:	e883 0003 	stmia.w	r3, {r0, r1}
		REGS_APP_vSt_11_write_eeprom_values(&st_11);
 102658c:	4790      	blx	r2
}
 102658e:	4630      	mov	r0, r6
 1026590:	b002      	add	sp, #8
 1026592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			st_11 = st_11_temp;
 1026596:	e895 0003 	ldmia.w	r5, {r0, r1}
 102659a:	4b04      	ldr	r3, [pc, #16]	; (10265ac <REGS_APP_bSt_11_refresh_ram+0x50>)
 102659c:	e883 0003 	stmia.w	r3, {r0, r1}
}
 10265a0:	4630      	mov	r0, r6
 10265a2:	b002      	add	sp, #8
 10265a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 10265a8:	01025c95 	.word	0x01025c95
 10265ac:	20007974 	.word	0x20007974
 10265b0:	010263b1 	.word	0x010263b1
 10265b4:	01025ee5 	.word	0x01025ee5

010265b8 <REGS_APP_bLoad_st_11>:
bool REGS_APP_bLoad_st_11(void) {
 10265b8:	b510      	push	{r4, lr}
	if ( SM_APP_ucGet_table_state(ST_11_PROG_STATE_ADDR) != C1219_TABLE_FULL ) {
 10265ba:	f240 7095 	movw	r0, #1941	; 0x795
 10265be:	4b06      	ldr	r3, [pc, #24]	; (10265d8 <REGS_APP_bLoad_st_11+0x20>)
 10265c0:	4798      	blx	r3
 10265c2:	2845      	cmp	r0, #69	; 0x45
 10265c4:	d003      	beq.n	10265ce <REGS_APP_bLoad_st_11+0x16>
		is_ok = REGS_APP_bSt_11_restore_default_values();
 10265c6:	4b05      	ldr	r3, [pc, #20]	; (10265dc <REGS_APP_bLoad_st_11+0x24>)
}
 10265c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		is_ok = REGS_APP_bSt_11_restore_default_values();
 10265cc:	4718      	bx	r3
		is_ok = REGS_APP_bSt_11_refresh_ram();
 10265ce:	4b04      	ldr	r3, [pc, #16]	; (10265e0 <REGS_APP_bLoad_st_11+0x28>)
}
 10265d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		is_ok = REGS_APP_bSt_11_refresh_ram();
 10265d4:	4718      	bx	r3
 10265d6:	bf00      	nop
 10265d8:	010203cd 	.word	0x010203cd
 10265dc:	010264f5 	.word	0x010264f5
 10265e0:	0102655d 	.word	0x0102655d

010265e4 <REGS_APP_vCopy_st_11_ram>:
void REGS_APP_vCopy_st_11_ram(uint8_t* destination) {
 10265e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 10265e6:	4b0a      	ldr	r3, [pc, #40]	; (1026610 <REGS_APP_vCopy_st_11_ram+0x2c>)
 10265e8:	799a      	ldrb	r2, [r3, #6]
 10265ea:	7959      	ldrb	r1, [r3, #5]
 10265ec:	791c      	ldrb	r4, [r3, #4]
 10265ee:	78dd      	ldrb	r5, [r3, #3]
 10265f0:	789e      	ldrb	r6, [r3, #2]
 10265f2:	785f      	ldrb	r7, [r3, #1]
 10265f4:	f893 e000 	ldrb.w	lr, [r3]
 10265f8:	79db      	ldrb	r3, [r3, #7]
	table_buffer[7] = st_11_source.nbr_sources;
 10265fa:	71c3      	strb	r3, [r0, #7]
	table_buffer[0] = st_11_source.source_flags;
 10265fc:	f880 e000 	strb.w	lr, [r0]
	table_buffer[1] = st_11_source.nbr_oum_entries;
 1026600:	7047      	strb	r7, [r0, #1]
	table_buffer[2] = st_11_source.nbr_demand_ctrl_entries;
 1026602:	7086      	strb	r6, [r0, #2]
	table_buffer[3] = st_11_source.data_ctrl_length;
 1026604:	70c5      	strb	r5, [r0, #3]
	table_buffer[4] = st_11_source.nbr_data_ctrl_entries;
 1026606:	7104      	strb	r4, [r0, #4]
	table_buffer[5] = st_11_source.nbr_constants_entries;
 1026608:	7141      	strb	r1, [r0, #5]
	table_buffer[6] = st_11_source.constants_selector;
 102660a:	7182      	strb	r2, [r0, #6]
 102660c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 102660e:	bf00      	nop
 1026610:	20007974 	.word	0x20007974

01026614 <REGS_APP_vCopy_st_11_nvm>:
void REGS_APP_vCopy_st_11_nvm(uint8_t* destination) {
 1026614:	b5f0      	push	{r4, r5, r6, r7, lr}
 1026616:	b083      	sub	sp, #12
 1026618:	4604      	mov	r4, r0
	REGS_APP_vSt_11_read_eeprom_values(&st_11_aux);
 102661a:	4b0e      	ldr	r3, [pc, #56]	; (1026654 <REGS_APP_vCopy_st_11_nvm+0x40>)
 102661c:	4668      	mov	r0, sp
 102661e:	4798      	blx	r3
	table_buffer[0] = st_11_source.source_flags;
 1026620:	f89d 3000 	ldrb.w	r3, [sp]
 1026624:	f89d 7001 	ldrb.w	r7, [sp, #1]
 1026628:	f89d 6002 	ldrb.w	r6, [sp, #2]
 102662c:	f89d 5003 	ldrb.w	r5, [sp, #3]
 1026630:	f89d 0004 	ldrb.w	r0, [sp, #4]
 1026634:	f89d 1005 	ldrb.w	r1, [sp, #5]
 1026638:	f89d 2006 	ldrb.w	r2, [sp, #6]
 102663c:	7023      	strb	r3, [r4, #0]
 102663e:	f89d 3007 	ldrb.w	r3, [sp, #7]
	table_buffer[1] = st_11_source.nbr_oum_entries;
 1026642:	7067      	strb	r7, [r4, #1]
	table_buffer[2] = st_11_source.nbr_demand_ctrl_entries;
 1026644:	70a6      	strb	r6, [r4, #2]
	table_buffer[3] = st_11_source.data_ctrl_length;
 1026646:	70e5      	strb	r5, [r4, #3]
	table_buffer[4] = st_11_source.nbr_data_ctrl_entries;
 1026648:	7120      	strb	r0, [r4, #4]
	table_buffer[5] = st_11_source.nbr_constants_entries;
 102664a:	7161      	strb	r1, [r4, #5]
	table_buffer[6] = st_11_source.constants_selector;
 102664c:	71a2      	strb	r2, [r4, #6]
	table_buffer[7] = st_11_source.nbr_sources;
 102664e:	71e3      	strb	r3, [r4, #7]
}
 1026650:	b003      	add	sp, #12
 1026652:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1026654:	01025ee5 	.word	0x01025ee5

01026658 <REGS_APP_vSt_11_recover_nvm>:
	REGS_APP_vSt_11_write_eeprom_values(&st_11);
 1026658:	4b00      	ldr	r3, [pc, #0]	; (102665c <REGS_APP_vSt_11_recover_nvm+0x4>)
 102665a:	4718      	bx	r3
 102665c:	010263b1 	.word	0x010263b1

01026660 <REGS_APP_vSt_11_recover_ram>:
	REGS_APP_vSt_11_read_eeprom_values(&st_11);
 1026660:	4801      	ldr	r0, [pc, #4]	; (1026668 <REGS_APP_vSt_11_recover_ram+0x8>)
 1026662:	4b02      	ldr	r3, [pc, #8]	; (102666c <REGS_APP_vSt_11_recover_ram+0xc>)
 1026664:	4718      	bx	r3
 1026666:	bf00      	nop
 1026668:	20007974 	.word	0x20007974
 102666c:	01025ee5 	.word	0x01025ee5

01026670 <REGS_APP_bSt_11_execute_table_reading>:
bool REGS_APP_bSt_11_execute_table_reading(uint8_t *table_buffer) {
 1026670:	b5f0      	push	{r4, r5, r6, r7, lr}
 1026672:	4b0a      	ldr	r3, [pc, #40]	; (102669c <REGS_APP_bSt_11_execute_table_reading+0x2c>)
 1026674:	799a      	ldrb	r2, [r3, #6]
 1026676:	7959      	ldrb	r1, [r3, #5]
 1026678:	791c      	ldrb	r4, [r3, #4]
 102667a:	78dd      	ldrb	r5, [r3, #3]
 102667c:	789e      	ldrb	r6, [r3, #2]
 102667e:	785f      	ldrb	r7, [r3, #1]
 1026680:	f893 e000 	ldrb.w	lr, [r3]
 1026684:	79db      	ldrb	r3, [r3, #7]
	table_buffer[7] = st_11_source.nbr_sources;
 1026686:	71c3      	strb	r3, [r0, #7]
	table_buffer[0] = st_11_source.source_flags;
 1026688:	f880 e000 	strb.w	lr, [r0]
	table_buffer[1] = st_11_source.nbr_oum_entries;
 102668c:	7047      	strb	r7, [r0, #1]
	table_buffer[2] = st_11_source.nbr_demand_ctrl_entries;
 102668e:	7086      	strb	r6, [r0, #2]
	table_buffer[3] = st_11_source.data_ctrl_length;
 1026690:	70c5      	strb	r5, [r0, #3]
	table_buffer[4] = st_11_source.nbr_data_ctrl_entries;
 1026692:	7104      	strb	r4, [r0, #4]
	table_buffer[5] = st_11_source.nbr_constants_entries;
 1026694:	7141      	strb	r1, [r0, #5]
	table_buffer[6] = st_11_source.constants_selector;
 1026696:	7182      	strb	r2, [r0, #6]
}
 1026698:	2001      	movs	r0, #1
 102669a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 102669c:	20007974 	.word	0x20007974

010266a0 <REGS_APP_bSt_11_execute_table_writing>:
bool REGS_APP_bSt_11_execute_table_writing(uint8_t *table_buffer) {
 10266a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 10266a2:	b083      	sub	sp, #12
	st_11_temp.source_flags = table_buffer[k++];
 10266a4:	7802      	ldrb	r2, [r0, #0]
	st_11_temp.nbr_demand_ctrl_entries = table_buffer[k++];
 10266a6:	7883      	ldrb	r3, [r0, #2]
	st_11_temp.nbr_constants_entries = table_buffer[k++];
 10266a8:	7944      	ldrb	r4, [r0, #5]
	st_11_temp.nbr_oum_entries = table_buffer[k++];
 10266aa:	f890 e001 	ldrb.w	lr, [r0, #1]
	st_11_temp.data_ctrl_length = table_buffer[k++];
 10266ae:	78c7      	ldrb	r7, [r0, #3]
	st_11_temp.nbr_data_ctrl_entries = table_buffer[k++];
 10266b0:	7906      	ldrb	r6, [r0, #4]
	st_11_temp.constants_selector = table_buffer[k++];
 10266b2:	7981      	ldrb	r1, [r0, #6]
	st_11_temp.source_flags = table_buffer[k++];
 10266b4:	f88d 2000 	strb.w	r2, [sp]
	st_11_temp.nbr_demand_ctrl_entries = table_buffer[k++];
 10266b8:	f88d 3002 	strb.w	r3, [sp, #2]
	st_11_temp.nbr_sources = table_buffer[k++];
 10266bc:	79c2      	ldrb	r2, [r0, #7]
	is_ok = REGS_APP_bSt_11_validate_data(&st_11_temp);
 10266be:	4b0f      	ldr	r3, [pc, #60]	; (10266fc <REGS_APP_bSt_11_execute_table_writing+0x5c>)
	st_11_temp.nbr_constants_entries = table_buffer[k++];
 10266c0:	f88d 4005 	strb.w	r4, [sp, #5]
	is_ok = REGS_APP_bSt_11_validate_data(&st_11_temp);
 10266c4:	4668      	mov	r0, sp
	st_11_temp.nbr_oum_entries = table_buffer[k++];
 10266c6:	f88d e001 	strb.w	lr, [sp, #1]
	st_11_temp.data_ctrl_length = table_buffer[k++];
 10266ca:	f88d 7003 	strb.w	r7, [sp, #3]
	st_11_temp.nbr_data_ctrl_entries = table_buffer[k++];
 10266ce:	f88d 6004 	strb.w	r6, [sp, #4]
	st_11_temp.constants_selector = table_buffer[k++];
 10266d2:	f88d 1006 	strb.w	r1, [sp, #6]
	st_11_temp.nbr_sources = table_buffer[k++];
 10266d6:	f88d 2007 	strb.w	r2, [sp, #7]
	is_ok = REGS_APP_bSt_11_validate_data(&st_11_temp);
 10266da:	4798      	blx	r3
	if ( is_ok ) {
 10266dc:	4604      	mov	r4, r0
 10266de:	b150      	cbz	r0, 10266f6 <REGS_APP_bSt_11_execute_table_writing+0x56>
		st_11 = st_11_temp;
 10266e0:	e89d 0003 	ldmia.w	sp, {r0, r1}
 10266e4:	4b06      	ldr	r3, [pc, #24]	; (1026700 <REGS_APP_bSt_11_execute_table_writing+0x60>)
		REGS_APP_vSt_11_write_eeprom_values(&st_11);
 10266e6:	4a07      	ldr	r2, [pc, #28]	; (1026704 <REGS_APP_bSt_11_execute_table_writing+0x64>)
		st_11 = st_11_temp;
 10266e8:	e883 0003 	stmia.w	r3, {r0, r1}
		REGS_APP_vSt_11_write_eeprom_values(&st_11);
 10266ec:	4790      	blx	r2
		uint16_t crc = SM_APP_usSt_11_ram_calculate_crc();
 10266ee:	4b06      	ldr	r3, [pc, #24]	; (1026708 <REGS_APP_bSt_11_execute_table_writing+0x68>)
 10266f0:	4798      	blx	r3
		SM_APP_vSt_11_write_crc(crc);
 10266f2:	4b06      	ldr	r3, [pc, #24]	; (102670c <REGS_APP_bSt_11_execute_table_writing+0x6c>)
 10266f4:	4798      	blx	r3
}
 10266f6:	4620      	mov	r0, r4
 10266f8:	b003      	add	sp, #12
 10266fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 10266fc:	01025c95 	.word	0x01025c95
 1026700:	20007974 	.word	0x20007974
 1026704:	010263b1 	.word	0x010263b1
 1026708:	0101f441 	.word	0x0101f441
 102670c:	0101f4f1 	.word	0x0101f4f1

01026710 <REGS_APP_usSt_11_get_size>:
}
 1026710:	2008      	movs	r0, #8
 1026712:	4770      	bx	lr

01026714 <REGS_APP_bSt_12_execute_table_reading>:
bool REGS_APP_bSt_12_execute_table_reading(uint8_t *table_buffer) {
 1026714:	b510      	push	{r4, lr}
 1026716:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 102671a:	4604      	mov	r4, r0
	uint32_t st_12[145] = { 
 102671c:	490b      	ldr	r1, [pc, #44]	; (102674c <REGS_APP_bSt_12_execute_table_reading+0x38>)
 102671e:	4b0c      	ldr	r3, [pc, #48]	; (1026750 <REGS_APP_bSt_12_execute_table_reading+0x3c>)
 1026720:	f44f 7211 	mov.w	r2, #580	; 0x244
 1026724:	a801      	add	r0, sp, #4
 1026726:	4798      	blx	r3
 1026728:	4620      	mov	r0, r4
 102672a:	4669      	mov	r1, sp
 102672c:	ac91      	add	r4, sp, #580	; 0x244
		convert_32_bit_to_byte_array(st_12[i], &table_buffer[k]);
 102672e:	f851 3f04 	ldr.w	r3, [r1, #4]!
 1026732:	1d02      	adds	r2, r0, #4
		data[val_index++] = value & 0xFF;
 1026734:	f800 3b01 	strb.w	r3, [r0], #1
	while (val_index < 4)
 1026738:	4290      	cmp	r0, r2
		value = value >> 8;
 102673a:	ea4f 2313 	mov.w	r3, r3, lsr #8
	while (val_index < 4)
 102673e:	d1f9      	bne.n	1026734 <REGS_APP_bSt_12_execute_table_reading+0x20>
	for ( i = 0; i < 145; i++) {
 1026740:	42a1      	cmp	r1, r4
 1026742:	d1f4      	bne.n	102672e <REGS_APP_bSt_12_execute_table_reading+0x1a>
}
 1026744:	2001      	movs	r0, #1
 1026746:	f50d 7d12 	add.w	sp, sp, #584	; 0x248
 102674a:	bd10      	pop	{r4, pc}
 102674c:	0103167c 	.word	0x0103167c
 1026750:	01030a3d 	.word	0x01030a3d

01026754 <REGS_APP_usSt_12_get_size>:
}
 1026754:	f44f 7011 	mov.w	r0, #580	; 0x244
 1026758:	4770      	bx	lr
 102675a:	bf00      	nop

0102675c <REGS_APP_bSt_13_restore_default_values>:
void REGS_APP_bSt_13_restore_default_values(void) {
 102675c:	b5f0      	push	{r4, r5, r6, r7, lr}
 102675e:	b083      	sub	sp, #12
	data[3] = (uint8_t)(DEFAULT_COLD_LOAD_PICKUP);
 1026760:	2300      	movs	r3, #0
	data[2] = (uint8_t)(DEFAULT_P_FAIL_EXCLUSION);
 1026762:	220f      	movs	r2, #15
	data[1] = (uint8_t)(DEFAULT_P_FAIL_RECOGNTN_TM);
 1026764:	2403      	movs	r4, #3
	data[4] = (uint8_t)(DEFAULT_SUB_INT);
 1026766:	2605      	movs	r6, #5
	SM_APP_vChange_table_state(ST_13_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
 1026768:	4d22      	ldr	r5, [pc, #136]	; (10267f4 <REGS_APP_bSt_13_restore_default_values+0x98>)
	data[3] = (uint8_t)(DEFAULT_COLD_LOAD_PICKUP);
 102676a:	f88d 3003 	strb.w	r3, [sp, #3]
	data[0] = (uint8_t)(DEFAULT_RESET_EXCLUSION);
 102676e:	273c      	movs	r7, #60	; 0x3c
	SM_APP_vChange_table_state(ST_13_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
 1026770:	21ff      	movs	r1, #255	; 0xff
 1026772:	f240 70a4 	movw	r0, #1956	; 0x7a4
	data[7] = (uint8_t)(DEFAULT_INT_LENGTH >> 8);
 1026776:	f88d 3007 	strb.w	r3, [sp, #7]
	data[1] = (uint8_t)(DEFAULT_P_FAIL_RECOGNTN_TM);
 102677a:	f88d 4001 	strb.w	r4, [sp, #1]
	data[5] = (uint8_t)(DEFAULT_INT_MULTIPLIER);
 102677e:	f88d 4005 	strb.w	r4, [sp, #5]
	data[2] = (uint8_t)(DEFAULT_P_FAIL_EXCLUSION);
 1026782:	f88d 2002 	strb.w	r2, [sp, #2]
	EEPROM_writer( ST_13_RESET_EXCLUSION_ADDR, &data[0], 1 );
 1026786:	4c1c      	ldr	r4, [pc, #112]	; (10267f8 <REGS_APP_bSt_13_restore_default_values+0x9c>)
	data[6] = (uint8_t)(DEFAULT_INT_LENGTH);
 1026788:	f88d 2006 	strb.w	r2, [sp, #6]
	data[0] = (uint8_t)(DEFAULT_RESET_EXCLUSION);
 102678c:	f88d 7000 	strb.w	r7, [sp]
	data[4] = (uint8_t)(DEFAULT_SUB_INT);
 1026790:	f88d 6004 	strb.w	r6, [sp, #4]
	SM_APP_vChange_table_state(ST_13_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
 1026794:	47a8      	blx	r5
	EEPROM_writer( ST_13_RESET_EXCLUSION_ADDR, &data[0], 1 );
 1026796:	4669      	mov	r1, sp
 1026798:	2201      	movs	r2, #1
 102679a:	f240 70a7 	movw	r0, #1959	; 0x7a7
 102679e:	47a0      	blx	r4
	EEPROM_writer( ST_13_P_FAIL_RECOGNTN_TM_ADDR, &data[1], 1 );
 10267a0:	2201      	movs	r2, #1
 10267a2:	eb0d 0102 	add.w	r1, sp, r2
 10267a6:	f44f 60f5 	mov.w	r0, #1960	; 0x7a8
 10267aa:	47a0      	blx	r4
	EEPROM_writer( ST_13_P_FAIL_EXCLUSION_ADDR, &data[2], 1 );
 10267ac:	f10d 0102 	add.w	r1, sp, #2
 10267b0:	2201      	movs	r2, #1
 10267b2:	f240 70a9 	movw	r0, #1961	; 0x7a9
 10267b6:	47a0      	blx	r4
	EEPROM_writer( ST_13_COLD_LOAD_PICKUP_ADDR, &data[3], 1 );
 10267b8:	f10d 0103 	add.w	r1, sp, #3
 10267bc:	2201      	movs	r2, #1
 10267be:	f240 70aa 	movw	r0, #1962	; 0x7aa
 10267c2:	47a0      	blx	r4
	EEPROM_writer( ST_13_SUB_INT_ADDR, &data[4], 1 );
 10267c4:	a901      	add	r1, sp, #4
 10267c6:	2201      	movs	r2, #1
 10267c8:	f240 70ab 	movw	r0, #1963	; 0x7ab
 10267cc:	47a0      	blx	r4
	EEPROM_writer( ST_13_INT_MULTIPLIER_ADDR, &data[5], 1 );
 10267ce:	eb0d 0106 	add.w	r1, sp, r6
 10267d2:	2201      	movs	r2, #1
 10267d4:	f240 70ad 	movw	r0, #1965	; 0x7ad
 10267d8:	47a0      	blx	r4
	EEPROM_writer( ST_13_INT_LENGTH_ADDR, &data[6], 2 );
 10267da:	2202      	movs	r2, #2
 10267dc:	f10d 0106 	add.w	r1, sp, #6
 10267e0:	f240 70ab 	movw	r0, #1963	; 0x7ab
 10267e4:	47a0      	blx	r4
	SM_APP_vChange_table_state(ST_13_PROG_STATE_ADDR, C1219_TABLE_FULL);
 10267e6:	2145      	movs	r1, #69	; 0x45
 10267e8:	f240 70a4 	movw	r0, #1956	; 0x7a4
 10267ec:	47a8      	blx	r5
}
 10267ee:	b003      	add	sp, #12
 10267f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 10267f2:	bf00      	nop
 10267f4:	010203e9 	.word	0x010203e9
 10267f8:	01017509 	.word	0x01017509

010267fc <REGS_APP_bLoad_st_13>:
bool REGS_APP_bLoad_st_13(void) {
 10267fc:	b508      	push	{r3, lr}
	if ( SM_APP_ucGet_table_state(ST_13_PROG_STATE_ADDR) != C1219_TABLE_FULL ) {
 10267fe:	f240 70a4 	movw	r0, #1956	; 0x7a4
 1026802:	4b04      	ldr	r3, [pc, #16]	; (1026814 <REGS_APP_bLoad_st_13+0x18>)
 1026804:	4798      	blx	r3
 1026806:	2845      	cmp	r0, #69	; 0x45
 1026808:	d001      	beq.n	102680e <REGS_APP_bLoad_st_13+0x12>
		REGS_APP_bSt_13_restore_default_values();
 102680a:	4b03      	ldr	r3, [pc, #12]	; (1026818 <REGS_APP_bLoad_st_13+0x1c>)
 102680c:	4798      	blx	r3
}
 102680e:	2001      	movs	r0, #1
 1026810:	bd08      	pop	{r3, pc}
 1026812:	bf00      	nop
 1026814:	010203cd 	.word	0x010203cd
 1026818:	0102675d 	.word	0x0102675d

0102681c <REGS_APP_bSt_13_execute_table_reading>:
bool REGS_APP_bSt_13_execute_table_reading(uint8_t *table_buffer) {
 102681c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ( (st_11.source_flags & RESET_EXCLUDE_FLAG_bm) == RESET_EXCLUDE_FLAG_bm ) {
 1026820:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 10268dc <REGS_APP_bSt_13_execute_table_reading+0xc0>
 1026824:	f898 3000 	ldrb.w	r3, [r8]
 1026828:	f013 0402 	ands.w	r4, r3, #2
bool REGS_APP_bSt_13_execute_table_reading(uint8_t *table_buffer) {
 102682c:	4606      	mov	r6, r0
	if ( (st_11.source_flags & RESET_EXCLUDE_FLAG_bm) == RESET_EXCLUDE_FLAG_bm ) {
 102682e:	d12f      	bne.n	1026890 <REGS_APP_bSt_13_execute_table_reading+0x74>
	if ( (st_11.source_flags & PF_EXCLUDE_FLAG_bm) == PF_EXCLUDE_FLAG_bm ) {
 1026830:	07db      	lsls	r3, r3, #31
 1026832:	d439      	bmi.n	10268a8 <REGS_APP_bSt_13_execute_table_reading+0x8c>
	for ( i = 0; i < st_11.nbr_demand_ctrl_entries; i++ ) {
 1026834:	f898 3002 	ldrb.w	r3, [r8, #2]
 1026838:	b33b      	cbz	r3, 102688a <REGS_APP_bSt_13_execute_table_reading+0x6e>
 102683a:	3402      	adds	r4, #2
 102683c:	4f26      	ldr	r7, [pc, #152]	; (10268d8 <REGS_APP_bSt_13_execute_table_reading+0xbc>)
 102683e:	b2a4      	uxth	r4, r4
 1026840:	2500      	movs	r5, #0
 1026842:	e00f      	b.n	1026864 <REGS_APP_bSt_13_execute_table_reading+0x48>
			EEPROM_reader( ST_13_SUB_INT_ADDR, &table_buffer[k], 1 );
 1026844:	47b8      	blx	r7
			k += 1;
 1026846:	1e61      	subs	r1, r4, #1
			EEPROM_reader( ST_13_INT_MULTIPLIER_ADDR, &table_buffer[k], 1 );
 1026848:	fa16 f181 	uxtah	r1, r6, r1
 102684c:	2201      	movs	r2, #1
 102684e:	f240 70ad 	movw	r0, #1965	; 0x7ad
 1026852:	47b8      	blx	r7
	for ( i = 0; i < st_11.nbr_demand_ctrl_entries; i++ ) {
 1026854:	3501      	adds	r5, #1
 1026856:	f898 3002 	ldrb.w	r3, [r8, #2]
 102685a:	b2ed      	uxtb	r5, r5
 102685c:	3402      	adds	r4, #2
 102685e:	42ab      	cmp	r3, r5
 1026860:	b2a4      	uxth	r4, r4
 1026862:	d912      	bls.n	102688a <REGS_APP_bSt_13_execute_table_reading+0x6e>
		if ( (st_11.source_flags & SLIDING_DEMAND_FLAG_bm) == SLIDING_DEMAND_FLAG_bm ) {
 1026864:	f898 e000 	ldrb.w	lr, [r8]
 1026868:	1ea3      	subs	r3, r4, #2
 102686a:	b29b      	uxth	r3, r3
 102686c:	f01e 0f08 	tst.w	lr, #8
			EEPROM_reader( ST_13_SUB_INT_ADDR, &table_buffer[k], 1 );
 1026870:	f04f 0201 	mov.w	r2, #1
 1026874:	f240 70ab 	movw	r0, #1963	; 0x7ab
 1026878:	eb06 0103 	add.w	r1, r6, r3
		if ( (st_11.source_flags & SLIDING_DEMAND_FLAG_bm) == SLIDING_DEMAND_FLAG_bm ) {
 102687c:	d1e2      	bne.n	1026844 <REGS_APP_bSt_13_execute_table_reading+0x28>
			EEPROM_reader( ST_13_INT_LENGTH_ADDR, &table_buffer[k], 2 );
 102687e:	18f1      	adds	r1, r6, r3
 1026880:	2202      	movs	r2, #2
 1026882:	f240 70ab 	movw	r0, #1963	; 0x7ab
 1026886:	47b8      	blx	r7
 1026888:	e7e4      	b.n	1026854 <REGS_APP_bSt_13_execute_table_reading+0x38>
}
 102688a:	2001      	movs	r0, #1
 102688c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		EEPROM_reader( ST_13_RESET_EXCLUSION_ADDR, &table_buffer[k], 1 );
 1026890:	4601      	mov	r1, r0
 1026892:	2201      	movs	r2, #1
 1026894:	f240 70a7 	movw	r0, #1959	; 0x7a7
 1026898:	4f0f      	ldr	r7, [pc, #60]	; (10268d8 <REGS_APP_bSt_13_execute_table_reading+0xbc>)
 102689a:	47b8      	blx	r7
 102689c:	f898 3000 	ldrb.w	r3, [r8]
	if ( (st_11.source_flags & PF_EXCLUDE_FLAG_bm) == PF_EXCLUDE_FLAG_bm ) {
 10268a0:	07db      	lsls	r3, r3, #31
		k += 1;
 10268a2:	f04f 0401 	mov.w	r4, #1
	if ( (st_11.source_flags & PF_EXCLUDE_FLAG_bm) == PF_EXCLUDE_FLAG_bm ) {
 10268a6:	d5c5      	bpl.n	1026834 <REGS_APP_bSt_13_execute_table_reading+0x18>
		EEPROM_reader( ST_13_P_FAIL_RECOGNTN_TM_ADDR, &table_buffer[k], 1 );
 10268a8:	1931      	adds	r1, r6, r4
 10268aa:	4f0b      	ldr	r7, [pc, #44]	; (10268d8 <REGS_APP_bSt_13_execute_table_reading+0xbc>)
 10268ac:	2201      	movs	r2, #1
 10268ae:	f44f 60f5 	mov.w	r0, #1960	; 0x7a8
 10268b2:	47b8      	blx	r7
		k += 1;
 10268b4:	1c61      	adds	r1, r4, #1
		EEPROM_reader( ST_13_P_FAIL_EXCLUSION_ADDR, &table_buffer[k], 1 );
 10268b6:	fa16 f181 	uxtah	r1, r6, r1
 10268ba:	2201      	movs	r2, #1
 10268bc:	f240 70a9 	movw	r0, #1961	; 0x7a9
 10268c0:	47b8      	blx	r7
		k += 1;
 10268c2:	1ca1      	adds	r1, r4, #2
		EEPROM_reader( ST_13_COLD_LOAD_PICKUP_ADDR, &table_buffer[k], 1 );
 10268c4:	fa16 f181 	uxtah	r1, r6, r1
 10268c8:	2201      	movs	r2, #1
 10268ca:	f240 70aa 	movw	r0, #1962	; 0x7aa
		k += 1;
 10268ce:	3403      	adds	r4, #3
		EEPROM_reader( ST_13_COLD_LOAD_PICKUP_ADDR, &table_buffer[k], 1 );
 10268d0:	47b8      	blx	r7
		k += 1;
 10268d2:	b2a4      	uxth	r4, r4
 10268d4:	e7ae      	b.n	1026834 <REGS_APP_bSt_13_execute_table_reading+0x18>
 10268d6:	bf00      	nop
 10268d8:	01017511 	.word	0x01017511
 10268dc:	20007974 	.word	0x20007974

010268e0 <REGS_APP_bSt_13_execute_table_writing>:
bool REGS_APP_bSt_13_execute_table_writing(uint8_t *table_buffer) {
 10268e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ( (st_11.source_flags & RESET_EXCLUDE_FLAG_bm) == RESET_EXCLUDE_FLAG_bm ) {
 10268e2:	4f21      	ldr	r7, [pc, #132]	; (1026968 <REGS_APP_bSt_13_execute_table_writing+0x88>)
 10268e4:	783b      	ldrb	r3, [r7, #0]
 10268e6:	f013 0102 	ands.w	r1, r3, #2
bool REGS_APP_bSt_13_execute_table_writing(uint8_t *table_buffer) {
 10268ea:	4606      	mov	r6, r0
	if ( (st_11.source_flags & RESET_EXCLUDE_FLAG_bm) == RESET_EXCLUDE_FLAG_bm ) {
 10268ec:	d131      	bne.n	1026952 <REGS_APP_bSt_13_execute_table_writing+0x72>
 10268ee:	4d1f      	ldr	r5, [pc, #124]	; (102696c <REGS_APP_bSt_13_execute_table_writing+0x8c>)
	uint8_t k = 0;
 10268f0:	460c      	mov	r4, r1
	if ( (st_11.source_flags & PF_EXCLUDE_FLAG_bm) == PF_EXCLUDE_FLAG_bm ) {
 10268f2:	07da      	lsls	r2, r3, #31
 10268f4:	d415      	bmi.n	1026922 <REGS_APP_bSt_13_execute_table_writing+0x42>
		if ( (st_11.source_flags & SLIDING_DEMAND_FLAG_bm) == SLIDING_DEMAND_FLAG_bm ) {
 10268f6:	071b      	lsls	r3, r3, #28
			EEPROM_writer( ST_13_SUB_INT_ADDR, &table_buffer[k], 1 );
 10268f8:	4431      	add	r1, r6
		if ( (st_11.source_flags & SLIDING_DEMAND_FLAG_bm) == SLIDING_DEMAND_FLAG_bm ) {
 10268fa:	d405      	bmi.n	1026908 <REGS_APP_bSt_13_execute_table_writing+0x28>
			EEPROM_writer( ST_13_INT_LENGTH_ADDR, &table_buffer[k], 2 );
 10268fc:	2202      	movs	r2, #2
 10268fe:	f240 70ab 	movw	r0, #1963	; 0x7ab
 1026902:	47a8      	blx	r5
}
 1026904:	2001      	movs	r0, #1
 1026906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			EEPROM_writer( ST_13_SUB_INT_ADDR, &table_buffer[k], 1 );
 1026908:	2201      	movs	r2, #1
 102690a:	f240 70ab 	movw	r0, #1963	; 0x7ab
 102690e:	47a8      	blx	r5
			k += 1;
 1026910:	1c61      	adds	r1, r4, #1
			EEPROM_writer( ST_13_INT_MULTIPLIER_ADDR, &table_buffer[k], 1 );
 1026912:	fa56 f181 	uxtab	r1, r6, r1
 1026916:	2201      	movs	r2, #1
 1026918:	f240 70ad 	movw	r0, #1965	; 0x7ad
 102691c:	47a8      	blx	r5
}
 102691e:	2001      	movs	r0, #1
 1026920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		EEPROM_writer( ST_13_P_FAIL_RECOGNTN_TM_ADDR, &table_buffer[k], 1 );
 1026922:	4431      	add	r1, r6
 1026924:	2201      	movs	r2, #1
 1026926:	f44f 60f5 	mov.w	r0, #1960	; 0x7a8
 102692a:	47a8      	blx	r5
		k += 1;
 102692c:	1c61      	adds	r1, r4, #1
		EEPROM_writer( ST_13_P_FAIL_EXCLUSION_ADDR, &table_buffer[k], 1 );
 102692e:	fa56 f181 	uxtab	r1, r6, r1
 1026932:	2201      	movs	r2, #1
 1026934:	f240 70a9 	movw	r0, #1961	; 0x7a9
 1026938:	47a8      	blx	r5
		k += 1;
 102693a:	1ca1      	adds	r1, r4, #2
		k += 1;
 102693c:	3403      	adds	r4, #3
		EEPROM_writer( ST_13_COLD_LOAD_PICKUP_ADDR, &table_buffer[k], 1 );
 102693e:	fa56 f181 	uxtab	r1, r6, r1
 1026942:	2201      	movs	r2, #1
 1026944:	f240 70aa 	movw	r0, #1962	; 0x7aa
		k += 1;
 1026948:	b2e4      	uxtb	r4, r4
		EEPROM_writer( ST_13_COLD_LOAD_PICKUP_ADDR, &table_buffer[k], 1 );
 102694a:	47a8      	blx	r5
 102694c:	783b      	ldrb	r3, [r7, #0]
 102694e:	4621      	mov	r1, r4
 1026950:	e7d1      	b.n	10268f6 <REGS_APP_bSt_13_execute_table_writing+0x16>
		EEPROM_writer( ST_13_RESET_EXCLUSION_ADDR, &table_buffer[k], 1 );
 1026952:	4601      	mov	r1, r0
 1026954:	2201      	movs	r2, #1
 1026956:	f240 70a7 	movw	r0, #1959	; 0x7a7
 102695a:	4d04      	ldr	r5, [pc, #16]	; (102696c <REGS_APP_bSt_13_execute_table_writing+0x8c>)
 102695c:	47a8      	blx	r5
 102695e:	2101      	movs	r1, #1
		k += 1;
 1026960:	460c      	mov	r4, r1
 1026962:	783b      	ldrb	r3, [r7, #0]
 1026964:	e7c5      	b.n	10268f2 <REGS_APP_bSt_13_execute_table_writing+0x12>
 1026966:	bf00      	nop
 1026968:	20007974 	.word	0x20007974
 102696c:	01017509 	.word	0x01017509

01026970 <REGS_APP_usSt_13_get_size>:
	if ( (st_11.source_flags & RESET_EXCLUDE_FLAG_bm) == RESET_EXCLUDE_FLAG_bm ) {
 1026970:	4b05      	ldr	r3, [pc, #20]	; (1026988 <REGS_APP_usSt_13_get_size+0x18>)
 1026972:	781a      	ldrb	r2, [r3, #0]
	table_size += ( 2 * st_11.nbr_demand_ctrl_entries);
 1026974:	789b      	ldrb	r3, [r3, #2]
	uint16_t table_size = 0;
 1026976:	f3c2 0040 	ubfx	r0, r2, #1, #1
	if ( (st_11.source_flags & PF_EXCLUDE_FLAG_bm) == PF_EXCLUDE_FLAG_bm ) {
 102697a:	07d2      	lsls	r2, r2, #31
		table_size += 3;
 102697c:	bf48      	it	mi
 102697e:	3003      	addmi	r0, #3
	table_size += ( 2 * st_11.nbr_demand_ctrl_entries);
 1026980:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 1026984:	b280      	uxth	r0, r0
 1026986:	4770      	bx	lr
 1026988:	20007974 	.word	0x20007974

0102698c <REGS_APP_bSt_15_execute_table_reading>:
bool REGS_APP_bSt_15_execute_table_reading(uint8_t *table_buffer) {
 102698c:	b4f0      	push	{r4, r5, r6, r7}
	for ( i = 0; i < st_11.nbr_constants_entries; i++) {
 102698e:	4d35      	ldr	r5, [pc, #212]	; (1026a64 <REGS_APP_bSt_15_execute_table_reading+0xd8>)
 1026990:	796b      	ldrb	r3, [r5, #5]
 1026992:	2b00      	cmp	r3, #0
 1026994:	d061      	beq.n	1026a5a <REGS_APP_bSt_15_execute_table_reading+0xce>
 1026996:	2600      	movs	r6, #0
 1026998:	4631      	mov	r1, r6
        value = value >> 8;
 102699a:	4634      	mov	r4, r6
 102699c:	1e4b      	subs	r3, r1, #1
 102699e:	1dcf      	adds	r7, r1, #7
 10269a0:	4403      	add	r3, r0
 10269a2:	4407      	add	r7, r0
		convert_64_bit_to_byte_array(DEFAULT_MULTIPLIER, &table_buffer[k]);
 10269a4:	2201      	movs	r2, #1
        data[val_index++] = value & 0xFF;
 10269a6:	f803 2f01 	strb.w	r2, [r3, #1]!
    while (val_index < 8)
 10269aa:	42bb      	cmp	r3, r7
        value = value >> 8;
 10269ac:	f04f 0200 	mov.w	r2, #0
    while (val_index < 8)
 10269b0:	d1f9      	bne.n	10269a6 <REGS_APP_bSt_15_execute_table_reading+0x1a>
		k += NI_FMAT1_SIZE;
 10269b2:	1d8b      	adds	r3, r1, #6
		convert_64_bit_to_byte_array(DEFAULT_OFFSET, &table_buffer[k]);
 10269b4:	b29b      	uxth	r3, r3
 10269b6:	f103 0208 	add.w	r2, r3, #8
 10269ba:	4402      	add	r2, r0
 10269bc:	4403      	add	r3, r0
        data[val_index++] = value & 0xFF;
 10269be:	f803 4b01 	strb.w	r4, [r3], #1
    while (val_index < 8)
 10269c2:	4293      	cmp	r3, r2
 10269c4:	d1fb      	bne.n	10269be <REGS_APP_bSt_15_execute_table_reading+0x32>
		if ( (st_11.source_flags & SET1_PRESENT_FLAG_bm) == SET1_PRESENT_FLAG_bm ) {
 10269c6:	782f      	ldrb	r7, [r5, #0]
		k += NI_FMAT1_SIZE;
 10269c8:	f101 030c 	add.w	r3, r1, #12
 10269cc:	b29a      	uxth	r2, r3
		if ( (st_11.source_flags & SET1_PRESENT_FLAG_bm) == SET1_PRESENT_FLAG_bm ) {
 10269ce:	06bb      	lsls	r3, r7, #26
 10269d0:	d546      	bpl.n	1026a60 <REGS_APP_bSt_15_execute_table_reading+0xd4>
			table_buffer[k++] = DEFAULT_SET_1_FLAGS;
 10269d2:	f101 030d 	add.w	r3, r1, #13
			convert_64_bit_to_byte_array(DEFAULT_SET_1_RATIO_F1, &table_buffer[k]);
 10269d6:	b29b      	uxth	r3, r3
 10269d8:	f103 0708 	add.w	r7, r3, #8
			table_buffer[k++] = DEFAULT_SET_1_FLAGS;
 10269dc:	5484      	strb	r4, [r0, r2]
 10269de:	4407      	add	r7, r0
 10269e0:	4403      	add	r3, r0
			convert_64_bit_to_byte_array(DEFAULT_SET_1_RATIO_F1, &table_buffer[k]);
 10269e2:	2201      	movs	r2, #1
        data[val_index++] = value & 0xFF;
 10269e4:	f803 2b01 	strb.w	r2, [r3], #1
    while (val_index < 8)
 10269e8:	42bb      	cmp	r3, r7
        value = value >> 8;
 10269ea:	f04f 0200 	mov.w	r2, #0
    while (val_index < 8)
 10269ee:	d1f9      	bne.n	10269e4 <REGS_APP_bSt_15_execute_table_reading+0x58>
			k += NI_FMAT1_SIZE;
 10269f0:	f101 0313 	add.w	r3, r1, #19
			convert_64_bit_to_byte_array(DEFAULT_SET_1_RATIO_P1, &table_buffer[k]);
 10269f4:	b29b      	uxth	r3, r3
 10269f6:	f103 0708 	add.w	r7, r3, #8
 10269fa:	4407      	add	r7, r0
 10269fc:	4403      	add	r3, r0
 10269fe:	2201      	movs	r2, #1
        data[val_index++] = value & 0xFF;
 1026a00:	f803 2b01 	strb.w	r2, [r3], #1
    while (val_index < 8)
 1026a04:	42bb      	cmp	r3, r7
        value = value >> 8;
 1026a06:	f04f 0200 	mov.w	r2, #0
    while (val_index < 8)
 1026a0a:	d1f9      	bne.n	1026a00 <REGS_APP_bSt_15_execute_table_reading+0x74>
			k += NI_FMAT1_SIZE;
 1026a0c:	3119      	adds	r1, #25
 1026a0e:	782f      	ldrb	r7, [r5, #0]
 1026a10:	b289      	uxth	r1, r1
		if ( (st_11.source_flags & SET2_PRESENT_FLAG_bm) == SET2_PRESENT_FLAG_bm ) {
 1026a12:	067b      	lsls	r3, r7, #25
 1026a14:	d51c      	bpl.n	1026a50 <REGS_APP_bSt_15_execute_table_reading+0xc4>
			table_buffer[k++] = DEFAULT_SET_2_FLAGS;
 1026a16:	1c4b      	adds	r3, r1, #1
			convert_64_bit_to_byte_array(DEFAULT_SET_2_RATIO_F1, &table_buffer[k]);
 1026a18:	b29b      	uxth	r3, r3
 1026a1a:	f103 0708 	add.w	r7, r3, #8
			table_buffer[k++] = DEFAULT_SET_2_FLAGS;
 1026a1e:	5444      	strb	r4, [r0, r1]
 1026a20:	4407      	add	r7, r0
 1026a22:	4403      	add	r3, r0
			convert_64_bit_to_byte_array(DEFAULT_SET_2_RATIO_F1, &table_buffer[k]);
 1026a24:	2201      	movs	r2, #1
        data[val_index++] = value & 0xFF;
 1026a26:	f803 2b01 	strb.w	r2, [r3], #1
    while (val_index < 8)
 1026a2a:	429f      	cmp	r7, r3
        value = value >> 8;
 1026a2c:	f04f 0200 	mov.w	r2, #0
    while (val_index < 8)
 1026a30:	d1f9      	bne.n	1026a26 <REGS_APP_bSt_15_execute_table_reading+0x9a>
			k += NI_FMAT1_SIZE;
 1026a32:	1dcb      	adds	r3, r1, #7
			convert_64_bit_to_byte_array(DEFAULT_SET_2_RATIO_P1, &table_buffer[k]);
 1026a34:	b29b      	uxth	r3, r3
 1026a36:	f103 0708 	add.w	r7, r3, #8
 1026a3a:	4407      	add	r7, r0
 1026a3c:	4403      	add	r3, r0
 1026a3e:	2201      	movs	r2, #1
        data[val_index++] = value & 0xFF;
 1026a40:	f803 2b01 	strb.w	r2, [r3], #1
    while (val_index < 8)
 1026a44:	429f      	cmp	r7, r3
        value = value >> 8;
 1026a46:	f04f 0200 	mov.w	r2, #0
    while (val_index < 8)
 1026a4a:	d1f9      	bne.n	1026a40 <REGS_APP_bSt_15_execute_table_reading+0xb4>
			k += NI_FMAT1_SIZE;
 1026a4c:	310d      	adds	r1, #13
 1026a4e:	b289      	uxth	r1, r1
	for ( i = 0; i < st_11.nbr_constants_entries; i++) {
 1026a50:	3601      	adds	r6, #1
 1026a52:	796b      	ldrb	r3, [r5, #5]
 1026a54:	b2f6      	uxtb	r6, r6
 1026a56:	42b3      	cmp	r3, r6
 1026a58:	d8a0      	bhi.n	102699c <REGS_APP_bSt_15_execute_table_reading+0x10>
}
 1026a5a:	2001      	movs	r0, #1
 1026a5c:	bcf0      	pop	{r4, r5, r6, r7}
 1026a5e:	4770      	bx	lr
		k += NI_FMAT1_SIZE;
 1026a60:	4611      	mov	r1, r2
 1026a62:	e7d6      	b.n	1026a12 <REGS_APP_bSt_15_execute_table_reading+0x86>
 1026a64:	20007974 	.word	0x20007974

01026a68 <REGS_APP_usSt_15_get_size>:
	if ( (st_11.source_flags & SET1_PRESENT_FLAG_bm) == SET1_PRESENT_FLAG_bm ) {
 1026a68:	4a07      	ldr	r2, [pc, #28]	; (1026a88 <REGS_APP_usSt_15_get_size+0x20>)
 1026a6a:	7811      	ldrb	r1, [r2, #0]
	table_size *= st_11.nbr_constants_entries;
 1026a6c:	7950      	ldrb	r0, [r2, #5]
		table_size += (2*NI_FMAT1_SIZE + 1);
 1026a6e:	f011 0f20 	tst.w	r1, #32
 1026a72:	bf0c      	ite	eq
 1026a74:	230c      	moveq	r3, #12
 1026a76:	2319      	movne	r3, #25
	if ( (st_11.source_flags & SET2_PRESENT_FLAG_bm) == SET2_PRESENT_FLAG_bm ) {
 1026a78:	0649      	lsls	r1, r1, #25
		table_size += (2*NI_FMAT1_SIZE + 1);
 1026a7a:	bf48      	it	mi
 1026a7c:	330d      	addmi	r3, #13
	table_size *= st_11.nbr_constants_entries;
 1026a7e:	fb10 f003 	smulbb	r0, r0, r3
}
 1026a82:	b280      	uxth	r0, r0
 1026a84:	4770      	bx	lr
 1026a86:	bf00      	nop
 1026a88:	20007974 	.word	0x20007974

01026a8c <REGS_APP_bSt_16_execute_table_reading>:
bool REGS_APP_bSt_16_execute_table_reading(uint8_t *table_buffer) {
 1026a8c:	1e43      	subs	r3, r0, #1
 1026a8e:	f100 011b 	add.w	r1, r0, #27
		table_buffer[k++] = DEFAULT_SOURCE_SUMMATIONS;
 1026a92:	2239      	movs	r2, #57	; 0x39
 1026a94:	f803 2f01 	strb.w	r2, [r3, #1]!
	for ( i = 0; i < 28; i++ ) {
 1026a98:	4299      	cmp	r1, r3
 1026a9a:	d1fb      	bne.n	1026a94 <REGS_APP_bSt_16_execute_table_reading+0x8>
 1026a9c:	f100 0131 	add.w	r1, r0, #49	; 0x31
		table_buffer[k++] = 0;
 1026aa0:	2200      	movs	r2, #0
 1026aa2:	f803 2f01 	strb.w	r2, [r3, #1]!
	for ( i = 0; i < 22; i++ ) {
 1026aa6:	4299      	cmp	r1, r3
 1026aa8:	d1fb      	bne.n	1026aa2 <REGS_APP_bSt_16_execute_table_reading+0x16>
 1026aaa:	f100 014d 	add.w	r1, r0, #77	; 0x4d
		table_buffer[k++] = DEFAULT_SOURCE_LOAD_PROFILE;
 1026aae:	2239      	movs	r2, #57	; 0x39
 1026ab0:	f803 2f01 	strb.w	r2, [r3, #1]!
	for ( i = 0; i < 28; i++ ) {
 1026ab4:	4299      	cmp	r1, r3
 1026ab6:	d1fb      	bne.n	1026ab0 <REGS_APP_bSt_16_execute_table_reading+0x24>
 1026ab8:	f100 0163 	add.w	r1, r0, #99	; 0x63
		table_buffer[k++] = 0;
 1026abc:	2200      	movs	r2, #0
 1026abe:	f803 2f01 	strb.w	r2, [r3, #1]!
	for ( i = 0; i < 22; i++ ) {
 1026ac2:	4299      	cmp	r1, r3
 1026ac4:	d1fb      	bne.n	1026abe <REGS_APP_bSt_16_execute_table_reading+0x32>
 1026ac6:	f100 017f 	add.w	r1, r0, #127	; 0x7f
		table_buffer[k++] = DEFAULT_SOURCE_AVERAGE_DEMAND;
 1026aca:	223b      	movs	r2, #59	; 0x3b
 1026acc:	f803 2f01 	strb.w	r2, [r3, #1]!
	for ( i = 0; i < 28; i++ ) {
 1026ad0:	4299      	cmp	r1, r3
 1026ad2:	d1fb      	bne.n	1026acc <REGS_APP_bSt_16_execute_table_reading+0x40>
 1026ad4:	f100 0195 	add.w	r1, r0, #149	; 0x95
		table_buffer[k++] = 0;
 1026ad8:	2200      	movs	r2, #0
 1026ada:	f803 2f01 	strb.w	r2, [r3, #1]!
	for ( i = 0; i < 22; i++ ) {
 1026ade:	4299      	cmp	r1, r3
 1026ae0:	d1fb      	bne.n	1026ada <REGS_APP_bSt_16_execute_table_reading+0x4e>
 1026ae2:	f100 01a1 	add.w	r1, r0, #161	; 0xa1
		table_buffer[k++] = DEFAULT_SOURCE_INSTANTANEOUS_DEMAND;
 1026ae6:	2239      	movs	r2, #57	; 0x39
 1026ae8:	f803 2f01 	strb.w	r2, [r3, #1]!
	for ( i = 0; i < 12; i++ ) {
 1026aec:	4299      	cmp	r1, r3
 1026aee:	d1fb      	bne.n	1026ae8 <REGS_APP_bSt_16_execute_table_reading+0x5c>
 1026af0:	f100 01b3 	add.w	r1, r0, #179	; 0xb3
		table_buffer[k++] = 0;
 1026af4:	2200      	movs	r2, #0
 1026af6:	f803 2f01 	strb.w	r2, [r3, #1]!
	for ( i = 0; i < 18; i++ ) {
 1026afa:	4299      	cmp	r1, r3
 1026afc:	d1fb      	bne.n	1026af6 <REGS_APP_bSt_16_execute_table_reading+0x6a>
 1026afe:	f100 01c8 	add.w	r1, r0, #200	; 0xc8
		table_buffer[k++] = DEFAULT_SOURCE_INSTANTANEOUS_VALUE;
 1026b02:	2239      	movs	r2, #57	; 0x39
 1026b04:	f803 2f01 	strb.w	r2, [r3, #1]!
	for ( i = 0; i < 21; i++ ) {
 1026b08:	4299      	cmp	r1, r3
 1026b0a:	d1fb      	bne.n	1026b04 <REGS_APP_bSt_16_execute_table_reading+0x78>
 1026b0c:	f100 01d1 	add.w	r1, r0, #209	; 0xd1
		table_buffer[k++] = 0;
 1026b10:	2200      	movs	r2, #0
 1026b12:	f803 2f01 	strb.w	r2, [r3, #1]!
	for ( i = 0; i < 9; i++ ) {
 1026b16:	4299      	cmp	r1, r3
 1026b18:	d1fb      	bne.n	1026b12 <REGS_APP_bSt_16_execute_table_reading+0x86>
 1026b1a:	f100 01ed 	add.w	r1, r0, #237	; 0xed
		table_buffer[k++] = DEFAULT_SOURCE_PRESENT_DEMAND;
 1026b1e:	223b      	movs	r2, #59	; 0x3b
 1026b20:	f803 2f01 	strb.w	r2, [r3, #1]!
	for ( i = 0; i < 28; i++ ) {
 1026b24:	4299      	cmp	r1, r3
 1026b26:	d1fb      	bne.n	1026b20 <REGS_APP_bSt_16_execute_table_reading+0x94>
 1026b28:	30ff      	adds	r0, #255	; 0xff
		table_buffer[k++] = 0;
 1026b2a:	2200      	movs	r2, #0
 1026b2c:	f803 2f01 	strb.w	r2, [r3, #1]!
	for ( i = 0; i < 18; i++ ) {
 1026b30:	4298      	cmp	r0, r3
 1026b32:	d1fb      	bne.n	1026b2c <REGS_APP_bSt_16_execute_table_reading+0xa0>
}
 1026b34:	2001      	movs	r0, #1
 1026b36:	4770      	bx	lr

01026b38 <REGS_APP_usSt_16_get_size>:
}
 1026b38:	f44f 7080 	mov.w	r0, #256	; 0x100
 1026b3c:	4770      	bx	lr
 1026b3e:	bf00      	nop

01026b40 <REGS_APP_bSt_20_execute_table_reading>:
bool REGS_APP_bSt_20_execute_table_reading(uint8_t *table_buffer) {
 1026b40:	b4f0      	push	{r4, r5, r6, r7}
 1026b42:	4603      	mov	r3, r0
	table_buffer[0] = PERM_REG_FUNC1_FLAGS;
 1026b44:	227f      	movs	r2, #127	; 0x7f
	table_buffer[1] = PERM_REG_FUNC2_FLAGS;
 1026b46:	2016      	movs	r0, #22
	table_buffer[2] = MAX_NBR_SELF_READS;
 1026b48:	270e      	movs	r7, #14
	table_buffer[3] = MAX_NBR_SUMMATIONS;
 1026b4a:	2606      	movs	r6, #6
	table_buffer[5] = MAX_NBR_COIN_VALUES;
 1026b4c:	2500      	movs	r5, #0
	table_buffer[7] = MAX_NBR_TIERS;
 1026b4e:	2404      	movs	r4, #4
	table_buffer[0] = PERM_REG_FUNC1_FLAGS;
 1026b50:	701a      	strb	r2, [r3, #0]
	table_buffer[1] = PERM_REG_FUNC2_FLAGS;
 1026b52:	7058      	strb	r0, [r3, #1]
	table_buffer[4] = MAX_NBR_DEMANDS;
 1026b54:	2202      	movs	r2, #2
	table_buffer[6] = MAX_NBR_OCCUR;
 1026b56:	2001      	movs	r0, #1
	table_buffer[9] = MAX_NBR_PRESENT_VALUES;
 1026b58:	2128      	movs	r1, #40	; 0x28
	table_buffer[2] = MAX_NBR_SELF_READS;
 1026b5a:	709f      	strb	r7, [r3, #2]
	table_buffer[3] = MAX_NBR_SUMMATIONS;
 1026b5c:	70de      	strb	r6, [r3, #3]
	table_buffer[5] = MAX_NBR_COIN_VALUES;
 1026b5e:	715d      	strb	r5, [r3, #5]
	table_buffer[7] = MAX_NBR_TIERS;
 1026b60:	71dc      	strb	r4, [r3, #7]
	table_buffer[9] = MAX_NBR_PRESENT_VALUES;
 1026b62:	7259      	strb	r1, [r3, #9]
	table_buffer[4] = MAX_NBR_DEMANDS;
 1026b64:	711a      	strb	r2, [r3, #4]
	table_buffer[8] = MAX_NBR_PRESENT_DEMANDS;
 1026b66:	721a      	strb	r2, [r3, #8]
	table_buffer[6] = MAX_NBR_OCCUR;
 1026b68:	7198      	strb	r0, [r3, #6]
}
 1026b6a:	bcf0      	pop	{r4, r5, r6, r7}
 1026b6c:	4770      	bx	lr
 1026b6e:	bf00      	nop

01026b70 <REGS_APP_usSt_20_get_size>:
 1026b70:	200a      	movs	r0, #10
 1026b72:	4770      	bx	lr

01026b74 <REGS_APP_bSt_21_restore_default_values>:
bool REGS_APP_bSt_21_restore_default_values(void) {
 1026b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 1026b76:	b085      	sub	sp, #20
	is_ok = REGS_APP_bSt_21_validate_data(&st_21_temp);
 1026b78:	ac01      	add	r4, sp, #4
	st_21_temp.reg_func2_flags = DEFAULT_REG_FUNC2_FLAGS;
 1026b7a:	2302      	movs	r3, #2
	st_21_temp.reg_func1_flags = DEFAULT_REG_FUNC1_FLAGS;
 1026b7c:	2257      	movs	r2, #87	; 0x57
	st_21_temp.nbr_self_reads = DEFAULT_NBR_SELF_READS;
 1026b7e:	f04f 0e0e 	mov.w	lr, #14
	st_21_temp.reg_func1_flags = DEFAULT_REG_FUNC1_FLAGS;
 1026b82:	f88d 2004 	strb.w	r2, [sp, #4]
	st_21_temp.nbr_tiers = DEFAULT_NBR_TIERS;
 1026b86:	2104      	movs	r1, #4
	st_21_temp.reg_func2_flags = DEFAULT_REG_FUNC2_FLAGS;
 1026b88:	f88d 3005 	strb.w	r3, [sp, #5]
	st_21_temp.nbr_demands = DEFAULT_NBR_DEMANDS;
 1026b8c:	f88d 3008 	strb.w	r3, [sp, #8]
	st_21_temp.nbr_present_demands = DEFAULT_NBR_PRESENT_DEMANDS;
 1026b90:	f88d 300c 	strb.w	r3, [sp, #12]
	st_21_temp.nbr_present_values = DEFAULT_NBR_PRESENT_VALUES;
 1026b94:	2221      	movs	r2, #33	; 0x21
	is_ok = REGS_APP_bSt_21_validate_data(&st_21_temp);
 1026b96:	4620      	mov	r0, r4
	st_21_temp.nbr_summations = DEFAULT_NBR_SUMMATIONS;
 1026b98:	2706      	movs	r7, #6
	st_21_temp.nbr_coin_values = DEFAULT_NBR_COIN_VALUES;
 1026b9a:	2600      	movs	r6, #0
	st_21_temp.nbr_occur = DEFAULT_NBR_OCCUR;
 1026b9c:	2501      	movs	r5, #1
	is_ok = REGS_APP_bSt_21_validate_data(&st_21_temp);
 1026b9e:	4b0e      	ldr	r3, [pc, #56]	; (1026bd8 <REGS_APP_bSt_21_restore_default_values+0x64>)
	st_21_temp.nbr_self_reads = DEFAULT_NBR_SELF_READS;
 1026ba0:	f88d e006 	strb.w	lr, [sp, #6]
	st_21_temp.nbr_occur = DEFAULT_NBR_OCCUR;
 1026ba4:	f88d 500a 	strb.w	r5, [sp, #10]
	st_21_temp.nbr_tiers = DEFAULT_NBR_TIERS;
 1026ba8:	f88d 100b 	strb.w	r1, [sp, #11]
	st_21_temp.nbr_present_values = DEFAULT_NBR_PRESENT_VALUES;
 1026bac:	f88d 200d 	strb.w	r2, [sp, #13]
	st_21_temp.nbr_summations = DEFAULT_NBR_SUMMATIONS;
 1026bb0:	f88d 7007 	strb.w	r7, [sp, #7]
	st_21_temp.nbr_coin_values = DEFAULT_NBR_COIN_VALUES;
 1026bb4:	f88d 6009 	strb.w	r6, [sp, #9]
	is_ok = REGS_APP_bSt_21_validate_data(&st_21_temp);
 1026bb8:	4798      	blx	r3
 1026bba:	4605      	mov	r5, r0
	st_21 = st_21_temp;
 1026bbc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 1026bc0:	4b06      	ldr	r3, [pc, #24]	; (1026bdc <REGS_APP_bSt_21_restore_default_values+0x68>)
	REGS_APP_vSt_21_write_eeprom_values(&st_21);
 1026bc2:	4c07      	ldr	r4, [pc, #28]	; (1026be0 <REGS_APP_bSt_21_restore_default_values+0x6c>)
	st_21 = st_21_temp;
 1026bc4:	c303      	stmia	r3!, {r0, r1}
 1026bc6:	801a      	strh	r2, [r3, #0]
	REGS_APP_vSt_21_write_eeprom_values(&st_21);
 1026bc8:	47a0      	blx	r4
	uint16_t crc = SM_APP_usSt_21_ram_calculate_crc();
 1026bca:	4b06      	ldr	r3, [pc, #24]	; (1026be4 <REGS_APP_bSt_21_restore_default_values+0x70>)
 1026bcc:	4798      	blx	r3
	SM_APP_vSt_21_write_crc(crc);
 1026bce:	4b06      	ldr	r3, [pc, #24]	; (1026be8 <REGS_APP_bSt_21_restore_default_values+0x74>)
 1026bd0:	4798      	blx	r3
}
 1026bd2:	4628      	mov	r0, r5
 1026bd4:	b005      	add	sp, #20
 1026bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1026bd8:	01025ce1 	.word	0x01025ce1
 1026bdc:	2000797c 	.word	0x2000797c
 1026be0:	0102631d 	.word	0x0102631d
 1026be4:	0101f53d 	.word	0x0101f53d
 1026be8:	0101f5ed 	.word	0x0101f5ed

01026bec <REGS_APP_bSt_21_refresh_ram>:
bool REGS_APP_bSt_21_refresh_ram(void) {
 1026bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1026bf0:	f8df 8050 	ldr.w	r8, [pc, #80]	; 1026c44 <REGS_APP_bSt_21_refresh_ram+0x58>
 1026bf4:	4f10      	ldr	r7, [pc, #64]	; (1026c38 <REGS_APP_bSt_21_refresh_ram+0x4c>)
 1026bf6:	b084      	sub	sp, #16
 1026bf8:	2403      	movs	r4, #3
 1026bfa:	ad01      	add	r5, sp, #4
		REGS_APP_vSt_21_read_eeprom_values(&st_21_temp);
 1026bfc:	4628      	mov	r0, r5
 1026bfe:	47c0      	blx	r8
		is_ok = REGS_APP_bSt_21_validate_data(&st_21_temp);
 1026c00:	4628      	mov	r0, r5
 1026c02:	47b8      	blx	r7
 1026c04:	1e63      	subs	r3, r4, #1
		if ( is_ok ) {
 1026c06:	4606      	mov	r6, r0
 1026c08:	b968      	cbnz	r0, 1026c26 <REGS_APP_bSt_21_refresh_ram+0x3a>
	for (uint8_t i = 0; i < 3; i++) {
 1026c0a:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 1026c0e:	d1f5      	bne.n	1026bfc <REGS_APP_bSt_21_refresh_ram+0x10>
		st_21 = st_21_temp;
 1026c10:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 1026c14:	4b09      	ldr	r3, [pc, #36]	; (1026c3c <REGS_APP_bSt_21_refresh_ram+0x50>)
		REGS_APP_vSt_21_write_eeprom_values(&st_21);
 1026c16:	4c0a      	ldr	r4, [pc, #40]	; (1026c40 <REGS_APP_bSt_21_refresh_ram+0x54>)
		st_21 = st_21_temp;
 1026c18:	c303      	stmia	r3!, {r0, r1}
 1026c1a:	801a      	strh	r2, [r3, #0]
		REGS_APP_vSt_21_write_eeprom_values(&st_21);
 1026c1c:	47a0      	blx	r4
}
 1026c1e:	4630      	mov	r0, r6
 1026c20:	b004      	add	sp, #16
 1026c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			st_21 = st_21_temp;
 1026c26:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 1026c2a:	4b04      	ldr	r3, [pc, #16]	; (1026c3c <REGS_APP_bSt_21_refresh_ram+0x50>)
 1026c2c:	c303      	stmia	r3!, {r0, r1}
}
 1026c2e:	4630      	mov	r0, r6
			st_21 = st_21_temp;
 1026c30:	801a      	strh	r2, [r3, #0]
}
 1026c32:	b004      	add	sp, #16
 1026c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 1026c38:	01025ce1 	.word	0x01025ce1
 1026c3c:	2000797c 	.word	0x2000797c
 1026c40:	0102631d 	.word	0x0102631d
 1026c44:	01025f45 	.word	0x01025f45

01026c48 <REGS_APP_bLoad_st_21>:
bool REGS_APP_bLoad_st_21(void) {
 1026c48:	b510      	push	{r4, lr}
	if ( SM_APP_ucGet_table_state(ST_21_PROG_STATE_ADDR) != C1219_TABLE_FULL ) {
 1026c4a:	f240 70b3 	movw	r0, #1971	; 0x7b3
 1026c4e:	4b06      	ldr	r3, [pc, #24]	; (1026c68 <REGS_APP_bLoad_st_21+0x20>)
 1026c50:	4798      	blx	r3
 1026c52:	2845      	cmp	r0, #69	; 0x45
 1026c54:	d003      	beq.n	1026c5e <REGS_APP_bLoad_st_21+0x16>
		is_ok = REGS_APP_bSt_21_restore_default_values();
 1026c56:	4b05      	ldr	r3, [pc, #20]	; (1026c6c <REGS_APP_bLoad_st_21+0x24>)
}
 1026c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		is_ok = REGS_APP_bSt_21_restore_default_values();
 1026c5c:	4718      	bx	r3
		is_ok = REGS_APP_bSt_21_refresh_ram();
 1026c5e:	4b04      	ldr	r3, [pc, #16]	; (1026c70 <REGS_APP_bLoad_st_21+0x28>)
}
 1026c60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		is_ok = REGS_APP_bSt_21_refresh_ram();
 1026c64:	4718      	bx	r3
 1026c66:	bf00      	nop
 1026c68:	010203cd 	.word	0x010203cd
 1026c6c:	01026b75 	.word	0x01026b75
 1026c70:	01026bed 	.word	0x01026bed

01026c74 <REGS_APP_vCopy_st_21_ram>:
void REGS_APP_vCopy_st_21_ram(uint8_t* destination) {
 1026c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1026c78:	4b0e      	ldr	r3, [pc, #56]	; (1026cb4 <REGS_APP_vCopy_st_21_ram+0x40>)
 1026c7a:	7a1a      	ldrb	r2, [r3, #8]
 1026c7c:	79d9      	ldrb	r1, [r3, #7]
 1026c7e:	799c      	ldrb	r4, [r3, #6]
 1026c80:	795d      	ldrb	r5, [r3, #5]
 1026c82:	791e      	ldrb	r6, [r3, #4]
 1026c84:	78df      	ldrb	r7, [r3, #3]
 1026c86:	f893 e002 	ldrb.w	lr, [r3, #2]
 1026c8a:	f893 c001 	ldrb.w	ip, [r3, #1]
 1026c8e:	f893 8000 	ldrb.w	r8, [r3]
 1026c92:	7a5b      	ldrb	r3, [r3, #9]
	table_buffer[9] = st_21_source.nbr_present_values;
 1026c94:	7243      	strb	r3, [r0, #9]
	table_buffer[0] = st_21_source.reg_func1_flags;
 1026c96:	f880 8000 	strb.w	r8, [r0]
	table_buffer[1] = st_21_source.reg_func2_flags;
 1026c9a:	f880 c001 	strb.w	ip, [r0, #1]
	table_buffer[2] = st_21_source.nbr_self_reads;
 1026c9e:	f880 e002 	strb.w	lr, [r0, #2]
	table_buffer[3] = st_21_source.nbr_summations;
 1026ca2:	70c7      	strb	r7, [r0, #3]
	table_buffer[4] = st_21_source.nbr_demands;
 1026ca4:	7106      	strb	r6, [r0, #4]
	table_buffer[5] = st_21_source.nbr_coin_values;
 1026ca6:	7145      	strb	r5, [r0, #5]
	table_buffer[6] = st_21_source.nbr_occur;
 1026ca8:	7184      	strb	r4, [r0, #6]
	table_buffer[7] = st_21_source.nbr_tiers;
 1026caa:	71c1      	strb	r1, [r0, #7]
	table_buffer[8] = st_21_source.nbr_present_demands;
 1026cac:	7202      	strb	r2, [r0, #8]
 1026cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 1026cb2:	bf00      	nop
 1026cb4:	2000797c 	.word	0x2000797c

01026cb8 <REGS_APP_vCopy_st_21_nvm>:
void REGS_APP_vCopy_st_21_nvm(uint8_t* destination) {
 1026cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 1026cba:	b085      	sub	sp, #20
 1026cbc:	4604      	mov	r4, r0
	REGS_APP_vSt_21_read_eeprom_values(&st_21_aux);
 1026cbe:	4b11      	ldr	r3, [pc, #68]	; (1026d04 <REGS_APP_vCopy_st_21_nvm+0x4c>)
 1026cc0:	a801      	add	r0, sp, #4
 1026cc2:	4798      	blx	r3
	table_buffer[0] = st_21_source.reg_func1_flags;
 1026cc4:	f89d 1004 	ldrb.w	r1, [sp, #4]
 1026cc8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 1026ccc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 1026cd0:	f89d 7007 	ldrb.w	r7, [sp, #7]
 1026cd4:	f89d 6008 	ldrb.w	r6, [sp, #8]
 1026cd8:	f89d 5009 	ldrb.w	r5, [sp, #9]
 1026cdc:	f89d 000a 	ldrb.w	r0, [sp, #10]
 1026ce0:	7021      	strb	r1, [r4, #0]
	table_buffer[1] = st_21_source.reg_func2_flags;
 1026ce2:	7062      	strb	r2, [r4, #1]
 1026ce4:	f89d 100b 	ldrb.w	r1, [sp, #11]
 1026ce8:	f89d 200c 	ldrb.w	r2, [sp, #12]
	table_buffer[2] = st_21_source.nbr_self_reads;
 1026cec:	70a3      	strb	r3, [r4, #2]
 1026cee:	f89d 300d 	ldrb.w	r3, [sp, #13]
	table_buffer[3] = st_21_source.nbr_summations;
 1026cf2:	70e7      	strb	r7, [r4, #3]
	table_buffer[4] = st_21_source.nbr_demands;
 1026cf4:	7126      	strb	r6, [r4, #4]
	table_buffer[5] = st_21_source.nbr_coin_values;
 1026cf6:	7165      	strb	r5, [r4, #5]
	table_buffer[6] = st_21_source.nbr_occur;
 1026cf8:	71a0      	strb	r0, [r4, #6]
	table_buffer[7] = st_21_source.nbr_tiers;
 1026cfa:	71e1      	strb	r1, [r4, #7]
	table_buffer[8] = st_21_source.nbr_present_demands;
 1026cfc:	7222      	strb	r2, [r4, #8]
	table_buffer[9] = st_21_source.nbr_present_values;
 1026cfe:	7263      	strb	r3, [r4, #9]
}
 1026d00:	b005      	add	sp, #20
 1026d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1026d04:	01025f45 	.word	0x01025f45

01026d08 <REGS_APP_vSt_21_recover_nvm>:
	REGS_APP_vSt_21_write_eeprom_values(&st_21);
 1026d08:	4b00      	ldr	r3, [pc, #0]	; (1026d0c <REGS_APP_vSt_21_recover_nvm+0x4>)
 1026d0a:	4718      	bx	r3
 1026d0c:	0102631d 	.word	0x0102631d

01026d10 <REGS_APP_vSt_21_recover_ram>:
	REGS_APP_vSt_21_read_eeprom_values(&st_21);
 1026d10:	4801      	ldr	r0, [pc, #4]	; (1026d18 <REGS_APP_vSt_21_recover_ram+0x8>)
 1026d12:	4b02      	ldr	r3, [pc, #8]	; (1026d1c <REGS_APP_vSt_21_recover_ram+0xc>)
 1026d14:	4718      	bx	r3
 1026d16:	bf00      	nop
 1026d18:	2000797c 	.word	0x2000797c
 1026d1c:	01025f45 	.word	0x01025f45

01026d20 <REGS_APP_bSt_21_execute_table_reading>:
bool REGS_APP_bSt_21_execute_table_reading(uint8_t *table_buffer) {
 1026d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1026d24:	4b0e      	ldr	r3, [pc, #56]	; (1026d60 <REGS_APP_bSt_21_execute_table_reading+0x40>)
 1026d26:	7a1a      	ldrb	r2, [r3, #8]
 1026d28:	79d9      	ldrb	r1, [r3, #7]
 1026d2a:	799c      	ldrb	r4, [r3, #6]
 1026d2c:	795d      	ldrb	r5, [r3, #5]
 1026d2e:	791e      	ldrb	r6, [r3, #4]
 1026d30:	78df      	ldrb	r7, [r3, #3]
 1026d32:	f893 e002 	ldrb.w	lr, [r3, #2]
 1026d36:	f893 c001 	ldrb.w	ip, [r3, #1]
 1026d3a:	f893 8000 	ldrb.w	r8, [r3]
 1026d3e:	7a5b      	ldrb	r3, [r3, #9]
	table_buffer[9] = st_21_source.nbr_present_values;
 1026d40:	7243      	strb	r3, [r0, #9]
	table_buffer[0] = st_21_source.reg_func1_flags;
 1026d42:	f880 8000 	strb.w	r8, [r0]
	table_buffer[1] = st_21_source.reg_func2_flags;
 1026d46:	f880 c001 	strb.w	ip, [r0, #1]
	table_buffer[2] = st_21_source.nbr_self_reads;
 1026d4a:	f880 e002 	strb.w	lr, [r0, #2]
	table_buffer[3] = st_21_source.nbr_summations;
 1026d4e:	70c7      	strb	r7, [r0, #3]
	table_buffer[4] = st_21_source.nbr_demands;
 1026d50:	7106      	strb	r6, [r0, #4]
	table_buffer[5] = st_21_source.nbr_coin_values;
 1026d52:	7145      	strb	r5, [r0, #5]
	table_buffer[6] = st_21_source.nbr_occur;
 1026d54:	7184      	strb	r4, [r0, #6]
	table_buffer[7] = st_21_source.nbr_tiers;
 1026d56:	71c1      	strb	r1, [r0, #7]
	table_buffer[8] = st_21_source.nbr_present_demands;
 1026d58:	7202      	strb	r2, [r0, #8]
}
 1026d5a:	2001      	movs	r0, #1
 1026d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 1026d60:	2000797c 	.word	0x2000797c

01026d64 <REGS_APP_bSt_21_execute_table_writing>:
bool REGS_APP_bSt_21_execute_table_writing(uint8_t *table_buffer) {
 1026d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 1026d66:	b085      	sub	sp, #20
	st_21_temp.reg_func1_flags = table_buffer[k++];
 1026d68:	7805      	ldrb	r5, [r0, #0]
	st_21_temp.reg_func2_flags = table_buffer[k++];
 1026d6a:	7841      	ldrb	r1, [r0, #1]
	st_21_temp.nbr_self_reads = table_buffer[k++];
 1026d6c:	7882      	ldrb	r2, [r0, #2]
	st_21_temp.nbr_demands = table_buffer[k++];
 1026d6e:	7903      	ldrb	r3, [r0, #4]
	st_21_temp.nbr_summations = table_buffer[k++];
 1026d70:	f890 e003 	ldrb.w	lr, [r0, #3]
	st_21_temp.nbr_coin_values = table_buffer[k++];
 1026d74:	7947      	ldrb	r7, [r0, #5]
	st_21_temp.nbr_occur = table_buffer[k++];
 1026d76:	7986      	ldrb	r6, [r0, #6]
	st_21_temp.reg_func1_flags = table_buffer[k++];
 1026d78:	f88d 5004 	strb.w	r5, [sp, #4]
	is_ok = REGS_APP_bSt_21_validate_data(&st_21_temp);
 1026d7c:	ac01      	add	r4, sp, #4
	st_21_temp.nbr_tiers = table_buffer[k++];
 1026d7e:	79c5      	ldrb	r5, [r0, #7]
	st_21_temp.reg_func2_flags = table_buffer[k++];
 1026d80:	f88d 1005 	strb.w	r1, [sp, #5]
	st_21_temp.nbr_self_reads = table_buffer[k++];
 1026d84:	f88d 2006 	strb.w	r2, [sp, #6]
	st_21_temp.nbr_present_demands = table_buffer[k++];
 1026d88:	7a01      	ldrb	r1, [r0, #8]
	st_21_temp.nbr_present_values = table_buffer[k++];
 1026d8a:	7a42      	ldrb	r2, [r0, #9]
	st_21_temp.nbr_demands = table_buffer[k++];
 1026d8c:	f88d 3008 	strb.w	r3, [sp, #8]
	is_ok = REGS_APP_bSt_21_validate_data(&st_21_temp);
 1026d90:	4620      	mov	r0, r4
 1026d92:	4b0f      	ldr	r3, [pc, #60]	; (1026dd0 <REGS_APP_bSt_21_execute_table_writing+0x6c>)
	st_21_temp.nbr_tiers = table_buffer[k++];
 1026d94:	f88d 500b 	strb.w	r5, [sp, #11]
	st_21_temp.nbr_summations = table_buffer[k++];
 1026d98:	f88d e007 	strb.w	lr, [sp, #7]
	st_21_temp.nbr_coin_values = table_buffer[k++];
 1026d9c:	f88d 7009 	strb.w	r7, [sp, #9]
	st_21_temp.nbr_occur = table_buffer[k++];
 1026da0:	f88d 600a 	strb.w	r6, [sp, #10]
	st_21_temp.nbr_present_demands = table_buffer[k++];
 1026da4:	f88d 100c 	strb.w	r1, [sp, #12]
	st_21_temp.nbr_present_values = table_buffer[k++];
 1026da8:	f88d 200d 	strb.w	r2, [sp, #13]
	is_ok = REGS_APP_bSt_21_validate_data(&st_21_temp);
 1026dac:	4798      	blx	r3
	if ( is_ok ) {
 1026dae:	4605      	mov	r5, r0
 1026db0:	b150      	cbz	r0, 1026dc8 <REGS_APP_bSt_21_execute_table_writing+0x64>
		st_21 = st_21_temp;
 1026db2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 1026db6:	4b07      	ldr	r3, [pc, #28]	; (1026dd4 <REGS_APP_bSt_21_execute_table_writing+0x70>)
		REGS_APP_vSt_21_write_eeprom_values(&st_21);
 1026db8:	4c07      	ldr	r4, [pc, #28]	; (1026dd8 <REGS_APP_bSt_21_execute_table_writing+0x74>)
		st_21 = st_21_temp;
 1026dba:	c303      	stmia	r3!, {r0, r1}
 1026dbc:	801a      	strh	r2, [r3, #0]
		REGS_APP_vSt_21_write_eeprom_values(&st_21);
 1026dbe:	47a0      	blx	r4
		uint16_t crc = SM_APP_usSt_21_ram_calculate_crc();
 1026dc0:	4b06      	ldr	r3, [pc, #24]	; (1026ddc <REGS_APP_bSt_21_execute_table_writing+0x78>)
 1026dc2:	4798      	blx	r3
		SM_APP_vSt_21_write_crc(crc);
 1026dc4:	4b06      	ldr	r3, [pc, #24]	; (1026de0 <REGS_APP_bSt_21_execute_table_writing+0x7c>)
 1026dc6:	4798      	blx	r3
}
 1026dc8:	4628      	mov	r0, r5
 1026dca:	b005      	add	sp, #20
 1026dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1026dce:	bf00      	nop
 1026dd0:	01025ce1 	.word	0x01025ce1
 1026dd4:	2000797c 	.word	0x2000797c
 1026dd8:	0102631d 	.word	0x0102631d
 1026ddc:	0101f53d 	.word	0x0101f53d
 1026de0:	0101f5ed 	.word	0x0101f5ed

01026de4 <REGS_APP_usSt_21_get_size>:
}
 1026de4:	200a      	movs	r0, #10
 1026de6:	4770      	bx	lr

01026de8 <REGS_APP_bSt_22_restore_default_values>:
bool REGS_APP_bSt_22_restore_default_values(void) {
 1026de8:	b530      	push	{r4, r5, lr}
	for (i = 0; i < st_21.nbr_summations; i++) {
 1026dea:	4d18      	ldr	r5, [pc, #96]	; (1026e4c <REGS_APP_bSt_22_restore_default_values+0x64>)
bool REGS_APP_bSt_22_restore_default_values(void) {
 1026dec:	b085      	sub	sp, #20
	memset( &st_22_temp, 0, sizeof(st_22_temp) );
 1026dee:	ac01      	add	r4, sp, #4
	for (i = 0; i < st_21.nbr_summations; i++) {
 1026df0:	78e8      	ldrb	r0, [r5, #3]
	memset( &st_22_temp, 0, sizeof(st_22_temp) );
 1026df2:	2300      	movs	r3, #0
 1026df4:	6063      	str	r3, [r4, #4]
 1026df6:	4622      	mov	r2, r4
 1026df8:	9301      	str	r3, [sp, #4]
 1026dfa:	7223      	strb	r3, [r4, #8]
	for (i = 0; i < st_21.nbr_summations; i++) {
 1026dfc:	b128      	cbz	r0, 1026e0a <REGS_APP_bSt_22_restore_default_values+0x22>
		st_22_temp.summation_select[i] = SM_WH_DEL_ID + i;
 1026dfe:	f802 3b01 	strb.w	r3, [r2], #1
 1026e02:	3301      	adds	r3, #1
	for (i = 0; i < st_21.nbr_summations; i++) {
 1026e04:	b2d9      	uxtb	r1, r3
 1026e06:	4288      	cmp	r0, r1
 1026e08:	d8f9      	bhi.n	1026dfe <REGS_APP_bSt_22_restore_default_values+0x16>
	for (i = 0; i < st_21.nbr_demands; i++) {
 1026e0a:	792b      	ldrb	r3, [r5, #4]
 1026e0c:	b163      	cbz	r3, 1026e28 <REGS_APP_bSt_22_restore_default_values+0x40>
 1026e0e:	2b01      	cmp	r3, #1
		st_22_temp.demand_select[i] = AD_W_DEL_ID + i;
 1026e10:	f04f 0301 	mov.w	r3, #1
 1026e14:	f04f 0200 	mov.w	r2, #0
 1026e18:	bf84      	itt	hi
 1026e1a:	f88d 300b 	strbhi.w	r3, [sp, #11]
		st_22_temp.min_or_max_flags |= (uint8_t)(1 << i);
 1026e1e:	2303      	movhi	r3, #3
		st_22_temp.demand_select[i] = AD_W_DEL_ID + i;
 1026e20:	f88d 200a 	strb.w	r2, [sp, #10]
 1026e24:	f88d 300c 	strb.w	r3, [sp, #12]
	is_ok = REGS_APP_bSt_22_validate_data(&st_22_temp);
 1026e28:	4620      	mov	r0, r4
 1026e2a:	4b09      	ldr	r3, [pc, #36]	; (1026e50 <REGS_APP_bSt_22_restore_default_values+0x68>)
 1026e2c:	4798      	blx	r3
 1026e2e:	4605      	mov	r5, r0
	st_22 = st_22_temp;
 1026e30:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 1026e34:	4b07      	ldr	r3, [pc, #28]	; (1026e54 <REGS_APP_bSt_22_restore_default_values+0x6c>)
	REGS_APP_vSt_22_write_eeprom_values(&st_22);
 1026e36:	4c08      	ldr	r4, [pc, #32]	; (1026e58 <REGS_APP_bSt_22_restore_default_values+0x70>)
	st_22 = st_22_temp;
 1026e38:	c303      	stmia	r3!, {r0, r1}
 1026e3a:	701a      	strb	r2, [r3, #0]
	REGS_APP_vSt_22_write_eeprom_values(&st_22);
 1026e3c:	47a0      	blx	r4
	uint16_t crc = SM_APP_usSt_22_ram_calculate_crc();
 1026e3e:	4b07      	ldr	r3, [pc, #28]	; (1026e5c <REGS_APP_bSt_22_restore_default_values+0x74>)
 1026e40:	4798      	blx	r3
	SM_APP_vSt_22_write_crc(crc);
 1026e42:	4b07      	ldr	r3, [pc, #28]	; (1026e60 <REGS_APP_bSt_22_restore_default_values+0x78>)
 1026e44:	4798      	blx	r3
}
 1026e46:	4628      	mov	r0, r5
 1026e48:	b005      	add	sp, #20
 1026e4a:	bd30      	pop	{r4, r5, pc}
 1026e4c:	2000797c 	.word	0x2000797c
 1026e50:	01025e41 	.word	0x01025e41
 1026e54:	20007988 	.word	0x20007988
 1026e58:	01026261 	.word	0x01026261
 1026e5c:	0101f639 	.word	0x0101f639
 1026e60:	0101f6e9 	.word	0x0101f6e9

01026e64 <REGS_APP_bSt_22_refresh_ram>:
bool REGS_APP_bSt_22_refresh_ram(void) {
 1026e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1026e68:	f8df 8050 	ldr.w	r8, [pc, #80]	; 1026ebc <REGS_APP_bSt_22_refresh_ram+0x58>
 1026e6c:	4f10      	ldr	r7, [pc, #64]	; (1026eb0 <REGS_APP_bSt_22_refresh_ram+0x4c>)
 1026e6e:	b084      	sub	sp, #16
 1026e70:	2403      	movs	r4, #3
 1026e72:	ad01      	add	r5, sp, #4
		REGS_APP_vSt_22_read_eeprom_values(&st_22_temp);
 1026e74:	4628      	mov	r0, r5
 1026e76:	47c0      	blx	r8
		is_ok = REGS_APP_bSt_22_validate_data(&st_22_temp);
 1026e78:	4628      	mov	r0, r5
 1026e7a:	47b8      	blx	r7
 1026e7c:	1e63      	subs	r3, r4, #1
		if ( is_ok ) {
 1026e7e:	4606      	mov	r6, r0
 1026e80:	b968      	cbnz	r0, 1026e9e <REGS_APP_bSt_22_refresh_ram+0x3a>
	for (uint8_t i = 0; i < 3; i++) {
 1026e82:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 1026e86:	d1f5      	bne.n	1026e74 <REGS_APP_bSt_22_refresh_ram+0x10>
		st_22 = st_22_temp;
 1026e88:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 1026e8c:	4b09      	ldr	r3, [pc, #36]	; (1026eb4 <REGS_APP_bSt_22_refresh_ram+0x50>)
		REGS_APP_vSt_22_write_eeprom_values(&st_22);
 1026e8e:	4c0a      	ldr	r4, [pc, #40]	; (1026eb8 <REGS_APP_bSt_22_refresh_ram+0x54>)
		st_22 = st_22_temp;
 1026e90:	c303      	stmia	r3!, {r0, r1}
 1026e92:	701a      	strb	r2, [r3, #0]
		REGS_APP_vSt_22_write_eeprom_values(&st_22);
 1026e94:	47a0      	blx	r4
}
 1026e96:	4630      	mov	r0, r6
 1026e98:	b004      	add	sp, #16
 1026e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			st_22 = st_22_temp;
 1026e9e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 1026ea2:	4b04      	ldr	r3, [pc, #16]	; (1026eb4 <REGS_APP_bSt_22_refresh_ram+0x50>)
 1026ea4:	c303      	stmia	r3!, {r0, r1}
}
 1026ea6:	4630      	mov	r0, r6
			st_22 = st_22_temp;
 1026ea8:	701a      	strb	r2, [r3, #0]
}
 1026eaa:	b004      	add	sp, #16
 1026eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 1026eb0:	01025e41 	.word	0x01025e41
 1026eb4:	20007988 	.word	0x20007988
 1026eb8:	01026261 	.word	0x01026261
 1026ebc:	01025fbd 	.word	0x01025fbd

01026ec0 <REGS_APP_bLoad_st_22>:
bool REGS_APP_bLoad_st_22(void) {
 1026ec0:	b510      	push	{r4, lr}
	if ( SM_APP_ucGet_table_state(ST_22_PROG_STATE_ADDR) != C1219_TABLE_FULL ) {
 1026ec2:	f240 70c5 	movw	r0, #1989	; 0x7c5
 1026ec6:	4b06      	ldr	r3, [pc, #24]	; (1026ee0 <REGS_APP_bLoad_st_22+0x20>)
 1026ec8:	4798      	blx	r3
 1026eca:	2845      	cmp	r0, #69	; 0x45
 1026ecc:	d003      	beq.n	1026ed6 <REGS_APP_bLoad_st_22+0x16>
		is_ok = REGS_APP_bSt_22_restore_default_values();
 1026ece:	4b05      	ldr	r3, [pc, #20]	; (1026ee4 <REGS_APP_bLoad_st_22+0x24>)
}
 1026ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		is_ok = REGS_APP_bSt_22_restore_default_values();
 1026ed4:	4718      	bx	r3
		is_ok = REGS_APP_bSt_22_refresh_ram();
 1026ed6:	4b04      	ldr	r3, [pc, #16]	; (1026ee8 <REGS_APP_bLoad_st_22+0x28>)
}
 1026ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		is_ok = REGS_APP_bSt_22_refresh_ram();
 1026edc:	4718      	bx	r3
 1026ede:	bf00      	nop
 1026ee0:	010203cd 	.word	0x010203cd
 1026ee4:	01026de9 	.word	0x01026de9
 1026ee8:	01026e65 	.word	0x01026e65

01026eec <REGS_APP_vCopy_st_22_ram>:
void REGS_APP_vCopy_st_22_ram(uint8_t* destination) {
 1026eec:	b410      	push	{r4}
	REGS_APP_vSt_22_to_array(st_22, &destination[0]);
 1026eee:	4a03      	ldr	r2, [pc, #12]	; (1026efc <REGS_APP_vCopy_st_22_ram+0x10>)
 1026ef0:	4c03      	ldr	r4, [pc, #12]	; (1026f00 <REGS_APP_vCopy_st_22_ram+0x14>)
 1026ef2:	4603      	mov	r3, r0
 1026ef4:	46a4      	mov	ip, r4
 1026ef6:	ca07      	ldmia	r2, {r0, r1, r2}
}
 1026ef8:	bc10      	pop	{r4}
	REGS_APP_vSt_22_to_array(st_22, &destination[0]);
 1026efa:	4760      	bx	ip
 1026efc:	20007988 	.word	0x20007988
 1026f00:	01025d95 	.word	0x01025d95

01026f04 <REGS_APP_vCopy_st_22_nvm>:
void REGS_APP_vCopy_st_22_nvm(uint8_t* destination) {
 1026f04:	b530      	push	{r4, r5, lr}
 1026f06:	b085      	sub	sp, #20
	REGS_APP_vSt_22_read_eeprom_values(&st_22_aux);
 1026f08:	ac01      	add	r4, sp, #4
void REGS_APP_vCopy_st_22_nvm(uint8_t* destination) {
 1026f0a:	4605      	mov	r5, r0
	REGS_APP_vSt_22_read_eeprom_values(&st_22_aux);
 1026f0c:	4b04      	ldr	r3, [pc, #16]	; (1026f20 <REGS_APP_vCopy_st_22_nvm+0x1c>)
 1026f0e:	4620      	mov	r0, r4
 1026f10:	4798      	blx	r3
	REGS_APP_vSt_22_to_array(st_22_aux, &destination[0]);
 1026f12:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 1026f16:	462b      	mov	r3, r5
 1026f18:	4c02      	ldr	r4, [pc, #8]	; (1026f24 <REGS_APP_vCopy_st_22_nvm+0x20>)
 1026f1a:	47a0      	blx	r4
}
 1026f1c:	b005      	add	sp, #20
 1026f1e:	bd30      	pop	{r4, r5, pc}
 1026f20:	01025fbd 	.word	0x01025fbd
 1026f24:	01025d95 	.word	0x01025d95

01026f28 <REGS_APP_vSt_22_recover_nvm>:
	REGS_APP_vSt_22_write_eeprom_values(&st_22);
 1026f28:	4b00      	ldr	r3, [pc, #0]	; (1026f2c <REGS_APP_vSt_22_recover_nvm+0x4>)
 1026f2a:	4718      	bx	r3
 1026f2c:	01026261 	.word	0x01026261

01026f30 <REGS_APP_vSt_22_recover_ram>:
	REGS_APP_vSt_22_read_eeprom_values(&st_22);
 1026f30:	4801      	ldr	r0, [pc, #4]	; (1026f38 <REGS_APP_vSt_22_recover_ram+0x8>)
 1026f32:	4b02      	ldr	r3, [pc, #8]	; (1026f3c <REGS_APP_vSt_22_recover_ram+0xc>)
 1026f34:	4718      	bx	r3
 1026f36:	bf00      	nop
 1026f38:	20007988 	.word	0x20007988
 1026f3c:	01025fbd 	.word	0x01025fbd

01026f40 <REGS_APP_bSt_22_execute_table_reading>:
bool REGS_APP_bSt_22_execute_table_reading(uint8_t *table_buffer) {
 1026f40:	b510      	push	{r4, lr}
	REGS_APP_vSt_22_to_array(st_22, &table_buffer[0]);
 1026f42:	4a03      	ldr	r2, [pc, #12]	; (1026f50 <REGS_APP_bSt_22_execute_table_reading+0x10>)
 1026f44:	4c03      	ldr	r4, [pc, #12]	; (1026f54 <REGS_APP_bSt_22_execute_table_reading+0x14>)
 1026f46:	4603      	mov	r3, r0
 1026f48:	ca07      	ldmia	r2, {r0, r1, r2}
 1026f4a:	47a0      	blx	r4
}
 1026f4c:	2001      	movs	r0, #1
 1026f4e:	bd10      	pop	{r4, pc}
 1026f50:	20007988 	.word	0x20007988
 1026f54:	01025d95 	.word	0x01025d95

01026f58 <REGS_APP_bSt_22_execute_table_writing>:
bool REGS_APP_bSt_22_execute_table_writing(uint8_t *table_buffer) {
 1026f58:	b5f0      	push	{r4, r5, r6, r7, lr}
	for ( i = 0; i < st_21.nbr_summations; i++ ) {
 1026f5a:	4f2a      	ldr	r7, [pc, #168]	; (1027004 <REGS_APP_bSt_22_execute_table_writing+0xac>)
 1026f5c:	78fe      	ldrb	r6, [r7, #3]
bool REGS_APP_bSt_22_execute_table_writing(uint8_t *table_buffer) {
 1026f5e:	b085      	sub	sp, #20
	for ( i = 0; i < st_21.nbr_summations; i++ ) {
 1026f60:	2e00      	cmp	r6, #0
 1026f62:	d04b      	beq.n	1026ffc <REGS_APP_bSt_22_execute_table_writing+0xa4>
 1026f64:	ad01      	add	r5, sp, #4
 1026f66:	1e74      	subs	r4, r6, #1
 1026f68:	462a      	mov	r2, r5
 1026f6a:	fa50 f484 	uxtab	r4, r0, r4
 1026f6e:	1e43      	subs	r3, r0, #1
		st_22_temp.summation_select[i] = table_buffer[k++];
 1026f70:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 1026f74:	f802 1b01 	strb.w	r1, [r2], #1
	for ( i = 0; i < st_21.nbr_summations; i++ ) {
 1026f78:	429c      	cmp	r4, r3
 1026f7a:	d1f9      	bne.n	1026f70 <REGS_APP_bSt_22_execute_table_writing+0x18>
 1026f7c:	1c72      	adds	r2, r6, #1
 1026f7e:	b2d2      	uxtb	r2, r2
 1026f80:	4633      	mov	r3, r6
	for ( i = 0; i < st_21.nbr_demands; i++ ) {
 1026f82:	7939      	ldrb	r1, [r7, #4]
 1026f84:	b169      	cbz	r1, 1026fa2 <REGS_APP_bSt_22_execute_table_writing+0x4a>
		st_22_temp.demand_select[i] = table_buffer[k++];
 1026f86:	1c73      	adds	r3, r6, #1
 1026f88:	b2db      	uxtb	r3, r3
	for ( i = 0; i < st_21.nbr_demands; i++ ) {
 1026f8a:	2901      	cmp	r1, #1
		st_22_temp.demand_select[i] = table_buffer[k++];
 1026f8c:	5d82      	ldrb	r2, [r0, r6]
 1026f8e:	bf84      	itt	hi
 1026f90:	5cc3      	ldrbhi	r3, [r0, r3]
 1026f92:	f88d 300b 	strbhi.w	r3, [sp, #11]
 1026f96:	440e      	add	r6, r1
 1026f98:	b2f3      	uxtb	r3, r6
 1026f9a:	f88d 200a 	strb.w	r2, [sp, #10]
 1026f9e:	1c5a      	adds	r2, r3, #1
 1026fa0:	b2d2      	uxtb	r2, r2
	for ( i = 0; i < st_21.nbr_coin_values; i++ ) {
 1026fa2:	797f      	ldrb	r7, [r7, #5]
	st_22_temp.min_or_max_flags = table_buffer[k++];
 1026fa4:	5cc3      	ldrb	r3, [r0, r3]
 1026fa6:	f88d 300c 	strb.w	r3, [sp, #12]
	for ( i = 0; i < st_21.nbr_coin_values; i++ ) {
 1026faa:	b1a7      	cbz	r7, 1026fd6 <REGS_APP_bSt_22_execute_table_writing+0x7e>
 1026fac:	f10d 010d 	add.w	r1, sp, #13
 1026fb0:	18bb      	adds	r3, r7, r2
 1026fb2:	460c      	mov	r4, r1
 1026fb4:	b2db      	uxtb	r3, r3
		st_22_temp.coincident_select[i] = table_buffer[k++];
 1026fb6:	1c56      	adds	r6, r2, #1
 1026fb8:	5c82      	ldrb	r2, [r0, r2]
 1026fba:	f804 2b01 	strb.w	r2, [r4], #1
 1026fbe:	b2f2      	uxtb	r2, r6
	for ( i = 0; i < st_21.nbr_coin_values; i++ ) {
 1026fc0:	429a      	cmp	r2, r3
 1026fc2:	d1f8      	bne.n	1026fb6 <REGS_APP_bSt_22_execute_table_writing+0x5e>
 1026fc4:	18fc      	adds	r4, r7, r3
 1026fc6:	b2e4      	uxtb	r4, r4
		st_22_temp.coin_demand_assoc[i] = table_buffer[k++];
 1026fc8:	1c5a      	adds	r2, r3, #1
 1026fca:	5cc3      	ldrb	r3, [r0, r3]
 1026fcc:	f801 3b01 	strb.w	r3, [r1], #1
 1026fd0:	b2d3      	uxtb	r3, r2
	for ( i = 0; i < st_21.nbr_coin_values; i++ ) {
 1026fd2:	429c      	cmp	r4, r3
 1026fd4:	d1f8      	bne.n	1026fc8 <REGS_APP_bSt_22_execute_table_writing+0x70>
	is_ok = REGS_APP_bSt_22_validate_data(&st_22_temp);
 1026fd6:	4628      	mov	r0, r5
 1026fd8:	4b0b      	ldr	r3, [pc, #44]	; (1027008 <REGS_APP_bSt_22_execute_table_writing+0xb0>)
 1026fda:	4798      	blx	r3
	if ( is_ok ) {
 1026fdc:	4604      	mov	r4, r0
 1026fde:	b150      	cbz	r0, 1026ff6 <REGS_APP_bSt_22_execute_table_writing+0x9e>
		st_22 = st_22_temp;
 1026fe0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 1026fe4:	4b09      	ldr	r3, [pc, #36]	; (102700c <REGS_APP_bSt_22_execute_table_writing+0xb4>)
		REGS_APP_vSt_22_write_eeprom_values(&st_22);
 1026fe6:	4d0a      	ldr	r5, [pc, #40]	; (1027010 <REGS_APP_bSt_22_execute_table_writing+0xb8>)
		st_22 = st_22_temp;
 1026fe8:	c303      	stmia	r3!, {r0, r1}
 1026fea:	701a      	strb	r2, [r3, #0]
		REGS_APP_vSt_22_write_eeprom_values(&st_22);
 1026fec:	47a8      	blx	r5
		uint16_t crc = SM_APP_usSt_22_ram_calculate_crc();
 1026fee:	4b09      	ldr	r3, [pc, #36]	; (1027014 <REGS_APP_bSt_22_execute_table_writing+0xbc>)
 1026ff0:	4798      	blx	r3
		SM_APP_vSt_22_write_crc(crc);
 1026ff2:	4b09      	ldr	r3, [pc, #36]	; (1027018 <REGS_APP_bSt_22_execute_table_writing+0xc0>)
 1026ff4:	4798      	blx	r3
}
 1026ff6:	4620      	mov	r0, r4
 1026ff8:	b005      	add	sp, #20
 1026ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for ( i = 0; i < st_21.nbr_summations; i++ ) {
 1026ffc:	4633      	mov	r3, r6
 1026ffe:	2201      	movs	r2, #1
 1027000:	ad01      	add	r5, sp, #4
 1027002:	e7be      	b.n	1026f82 <REGS_APP_bSt_22_execute_table_writing+0x2a>
 1027004:	2000797c 	.word	0x2000797c
 1027008:	01025e41 	.word	0x01025e41
 102700c:	20007988 	.word	0x20007988
 1027010:	01026261 	.word	0x01026261
 1027014:	0101f639 	.word	0x0101f639
 1027018:	0101f6e9 	.word	0x0101f6e9

0102701c <REGS_APP_usSt_22_get_size>:
	table_size = st_21.nbr_summations + st_21.nbr_demands + 1 + st_21.nbr_coin_values + st_21.nbr_coin_values;
 102701c:	4b04      	ldr	r3, [pc, #16]	; (1027030 <REGS_APP_usSt_22_get_size+0x14>)
 102701e:	78d8      	ldrb	r0, [r3, #3]
 1027020:	791a      	ldrb	r2, [r3, #4]
 1027022:	795b      	ldrb	r3, [r3, #5]
 1027024:	4410      	add	r0, r2
 1027026:	3001      	adds	r0, #1
 1027028:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 102702c:	b280      	uxth	r0, r0
 102702e:	4770      	bx	lr
 1027030:	2000797c 	.word	0x2000797c
 1027034:	00000000 	.word	0x00000000

01027038 <REGS_APP_bLoad_st_23>:
bool REGS_APP_bLoad_st_23(void) {
 1027038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 102703c:	b08d      	sub	sp, #52	; 0x34
 102703e:	2303      	movs	r3, #3
 1027040:	f8df b2c8 	ldr.w	fp, [pc, #712]	; 102730c <REGS_APP_bLoad_st_23+0x2d4>
 1027044:	930b      	str	r3, [sp, #44]	; 0x2c
	memset( &st_23, 0, sizeof(st_23) );
 1027046:	f44f 720e 	mov.w	r2, #568	; 0x238
 102704a:	2100      	movs	r1, #0
 102704c:	4bae      	ldr	r3, [pc, #696]	; (1027308 <REGS_APP_bLoad_st_23+0x2d0>)
 102704e:	48af      	ldr	r0, [pc, #700]	; (102730c <REGS_APP_bLoad_st_23+0x2d4>)
 1027050:	4798      	blx	r3
	EEPROM_reader( ST_23_NBR_DEMAND_RESETS_ADDR, (uint8_t*)&st_23.nbr_demand_resets, 1 );
 1027052:	4baf      	ldr	r3, [pc, #700]	; (1027310 <REGS_APP_bLoad_st_23+0x2d8>)
 1027054:	49ad      	ldr	r1, [pc, #692]	; (102730c <REGS_APP_bLoad_st_23+0x2d4>)
 1027056:	2201      	movs	r2, #1
 1027058:	f244 109a 	movw	r0, #16794	; 0x419a
 102705c:	4798      	blx	r3
	if ( st_23.nbr_demand_resets == 0xFF ) {
 102705e:	f89b 3000 	ldrb.w	r3, [fp]
 1027062:	2bff      	cmp	r3, #255	; 0xff
		st_23.nbr_demand_resets = 0;
 1027064:	bf0a      	itet	eq
 1027066:	2300      	moveq	r3, #0
	bool is_ok = true;
 1027068:	2301      	movne	r3, #1
		st_23.nbr_demand_resets = 0;
 102706a:	f88b 3000 	strbeq.w	r3, [fp]
	bool is_ok = true;
 102706e:	9303      	str	r3, [sp, #12]
	for ( i = 0; i < st_21.nbr_summations; i++ ) {
 1027070:	4ba8      	ldr	r3, [pc, #672]	; (1027314 <REGS_APP_bLoad_st_23+0x2dc>)
 1027072:	78db      	ldrb	r3, [r3, #3]
 1027074:	2b00      	cmp	r3, #0
 1027076:	d040      	beq.n	10270fa <REGS_APP_bLoad_st_23+0xc2>
 1027078:	4da7      	ldr	r5, [pc, #668]	; (1027318 <REGS_APP_bLoad_st_23+0x2e0>)
 102707a:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 1027320 <REGS_APP_bLoad_st_23+0x2e8>
 102707e:	4ca7      	ldr	r4, [pc, #668]	; (102731c <REGS_APP_bLoad_st_23+0x2e4>)
		ull_auxvar = 0;
 1027080:	462b      	mov	r3, r5
	for ( i = 0; i < st_21.nbr_summations; i++ ) {
 1027082:	f04f 0a00 	mov.w	sl, #0
		ull_auxvar = 0;
 1027086:	4645      	mov	r5, r8
 1027088:	9300      	str	r3, [sp, #0]
 102708a:	e007      	b.n	102709c <REGS_APP_bLoad_st_23+0x64>
	for ( i = 0; i < st_21.nbr_summations; i++ ) {
 102708c:	4ba1      	ldr	r3, [pc, #644]	; (1027314 <REGS_APP_bLoad_st_23+0x2dc>)
		st_23.tot_data_block.summations[i] = (double)(ull_auxvar);
 102708e:	e9c1 6700 	strd	r6, r7, [r1]
	for ( i = 0; i < st_21.nbr_summations; i++ ) {
 1027092:	78d9      	ldrb	r1, [r3, #3]
 1027094:	fa5f fa82 	uxtb.w	sl, r2
 1027098:	4551      	cmp	r1, sl
 102709a:	d92e      	bls.n	10270fa <REGS_APP_bLoad_st_23+0xc2>
		EEPROM_reader( ST_23_TOT_SUMMATIONS_ADDR + i*NI_FMAT1_SIZE, (uint8_t*)&ull_auxvar, NI_FMAT1_SIZE );
 102709c:	2206      	movs	r2, #6
 102709e:	f244 109b 	movw	r0, #16795	; 0x419b
 10270a2:	fb02 000a 	mla	r0, r2, sl, r0
 10270a6:	4b9a      	ldr	r3, [pc, #616]	; (1027310 <REGS_APP_bLoad_st_23+0x2d8>)
 10270a8:	499c      	ldr	r1, [pc, #624]	; (102731c <REGS_APP_bLoad_st_23+0x2e4>)
		ull_auxvar = 0;
 10270aa:	2600      	movs	r6, #0
 10270ac:	2700      	movs	r7, #0
 10270ae:	e9c4 6700 	strd	r6, r7, [r4]
		EEPROM_reader( ST_23_TOT_SUMMATIONS_ADDR + i*NI_FMAT1_SIZE, (uint8_t*)&ull_auxvar, NI_FMAT1_SIZE );
 10270b2:	4798      	blx	r3
		st_23.tot_data_block.summations[i] = (double)(ull_auxvar);
 10270b4:	e9d4 0100 	ldrd	r0, r1, [r4]
 10270b8:	47a8      	blx	r5
		if ( (uint64_t)st_23.tot_data_block.summations[i] >= (uint64_t)MAX_REGISTER_VALUE) {
 10270ba:	9b00      	ldr	r3, [sp, #0]
 10270bc:	f20f 2940 	addw	r9, pc, #576	; 0x240
 10270c0:	e9d9 8900 	ldrd	r8, r9, [r9]
		st_23.tot_data_block.summations[i] = (double)(ull_auxvar);
 10270c4:	4606      	mov	r6, r0
 10270c6:	460f      	mov	r7, r1
		if ( (uint64_t)st_23.tot_data_block.summations[i] >= (uint64_t)MAX_REGISTER_VALUE) {
 10270c8:	4798      	blx	r3
 10270ca:	4589      	cmp	r9, r1
		st_23.tot_data_block.summations[i] = (double)(ull_auxvar);
 10270cc:	f10a 0201 	add.w	r2, sl, #1
		if ( (uint64_t)st_23.tot_data_block.summations[i] >= (uint64_t)MAX_REGISTER_VALUE) {
 10270d0:	bf08      	it	eq
 10270d2:	4580      	cmpeq	r8, r0
		st_23.tot_data_block.summations[i] = (double)(ull_auxvar);
 10270d4:	eb0b 01c2 	add.w	r1, fp, r2, lsl #3
		if ( (uint64_t)st_23.tot_data_block.summations[i] >= (uint64_t)MAX_REGISTER_VALUE) {
 10270d8:	d2d8      	bcs.n	102708c <REGS_APP_bLoad_st_23+0x54>
			st_23.tot_data_block.summations[i] = 0;
 10270da:	f10a 0201 	add.w	r2, sl, #1
 10270de:	eb0b 03c2 	add.w	r3, fp, r2, lsl #3
 10270e2:	2100      	movs	r1, #0
 10270e4:	2000      	movs	r0, #0
 10270e6:	e9c3 0100 	strd	r0, r1, [r3]
			is_ok = false;
 10270ea:	2300      	movs	r3, #0
 10270ec:	9303      	str	r3, [sp, #12]
	for ( i = 0; i < st_21.nbr_summations; i++ ) {
 10270ee:	4b89      	ldr	r3, [pc, #548]	; (1027314 <REGS_APP_bLoad_st_23+0x2dc>)
 10270f0:	78d9      	ldrb	r1, [r3, #3]
 10270f2:	fa5f fa82 	uxtb.w	sl, r2
 10270f6:	4551      	cmp	r1, sl
 10270f8:	d8d0      	bhi.n	102709c <REGS_APP_bLoad_st_23+0x64>
	for ( i = 0; i < st_21.nbr_demands; i++ ) {
 10270fa:	4b86      	ldr	r3, [pc, #536]	; (1027314 <REGS_APP_bLoad_st_23+0x2dc>)
 10270fc:	791b      	ldrb	r3, [r3, #4]
 10270fe:	2b00      	cmp	r3, #0
 1027100:	f000 8084 	beq.w	102720c <REGS_APP_bLoad_st_23+0x1d4>
 1027104:	f04f 0a00 	mov.w	sl, #0
 1027108:	e059      	b.n	10271be <REGS_APP_bLoad_st_23+0x186>
		EEPROM_reader( ST_23_TOT_DEMANDS_CUM_DEMAND_ADDR + i*NI_FMAT1_SIZE, (uint8_t*)&st_23.tot_data_block.demands[i].cum_demand, NI_FMAT1_SIZE );
 102710a:	4b81      	ldr	r3, [pc, #516]	; (1027310 <REGS_APP_bLoad_st_23+0x2d8>)
 102710c:	4798      	blx	r3
		if (st_23.tot_data_block.demands[i].cum_demand >= (uint64_t)0x0000FFFFFFFFFFFF) {
 102710e:	eb0b 1347 	add.w	r3, fp, r7, lsl #5
		EEPROM_reader( ST_23_TOT_DEMANDS_CONT_CUM_DEMAND_ADDR + i*NI_FMAT1_SIZE, (uint8_t*)&st_23.tot_data_block.demands[i].cont_cum_demand, NI_FMAT1_SIZE );
 1027112:	f504 4083 	add.w	r0, r4, #16768	; 0x4180
		if (st_23.tot_data_block.demands[i].cum_demand >= (uint64_t)0x0000FFFFFFFFFFFF) {
 1027116:	e9d3 4500 	ldrd	r4, r5, [r3]
 102711a:	f64f 79ff 	movw	r9, #65535	; 0xffff
 102711e:	45a9      	cmp	r9, r5
 1027120:	f06f 0801 	mvn.w	r8, #1
		EEPROM_reader( ST_23_TOT_DEMANDS_CONT_CUM_DEMAND_ADDR + i*NI_FMAT1_SIZE, (uint8_t*)&st_23.tot_data_block.demands[i].cont_cum_demand, NI_FMAT1_SIZE );
 1027124:	f106 0148 	add.w	r1, r6, #72	; 0x48
		if (st_23.tot_data_block.demands[i].cum_demand >= (uint64_t)0x0000FFFFFFFFFFFF) {
 1027128:	bf08      	it	eq
 102712a:	45a0      	cmpeq	r8, r4
		EEPROM_reader( ST_23_TOT_DEMANDS_CONT_CUM_DEMAND_ADDR + i*NI_FMAT1_SIZE, (uint8_t*)&st_23.tot_data_block.demands[i].cont_cum_demand, NI_FMAT1_SIZE );
 102712c:	f04f 0206 	mov.w	r2, #6
 1027130:	4459      	add	r1, fp
 1027132:	f100 0053 	add.w	r0, r0, #83	; 0x53
			st_23.tot_data_block.demands[i].cum_demand = 0;
 1027136:	f04f 0400 	mov.w	r4, #0
 102713a:	f04f 0500 	mov.w	r5, #0
		if (st_23.tot_data_block.demands[i].cum_demand >= (uint64_t)0x0000FFFFFFFFFFFF) {
 102713e:	d203      	bcs.n	1027148 <REGS_APP_bLoad_st_23+0x110>
			st_23.tot_data_block.demands[i].cum_demand = 0;
 1027140:	e9c3 4500 	strd	r4, r5, [r3]
			is_ok = false;
 1027144:	2300      	movs	r3, #0
 1027146:	9303      	str	r3, [sp, #12]
		EEPROM_reader( ST_23_TOT_DEMANDS_CONT_CUM_DEMAND_ADDR + i*NI_FMAT1_SIZE, (uint8_t*)&st_23.tot_data_block.demands[i].cont_cum_demand, NI_FMAT1_SIZE );
 1027148:	4b71      	ldr	r3, [pc, #452]	; (1027310 <REGS_APP_bLoad_st_23+0x2d8>)
		if (st_23.tot_data_block.demands[i].cont_cum_demand >= (uint64_t)0x0000FFFFFFFFFFFF) {
 102714a:	eb0b 1747 	add.w	r7, fp, r7, lsl #5
		EEPROM_reader( ST_23_TOT_DEMANDS_CONT_CUM_DEMAND_ADDR + i*NI_FMAT1_SIZE, (uint8_t*)&st_23.tot_data_block.demands[i].cont_cum_demand, NI_FMAT1_SIZE );
 102714e:	4798      	blx	r3
		if (st_23.tot_data_block.demands[i].cont_cum_demand >= (uint64_t)0x0000FFFFFFFFFFFF) {
 1027150:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 1027154:	f64f 79ff 	movw	r9, #65535	; 0xffff
 1027158:	45a9      	cmp	r9, r5
 102715a:	f06f 0801 	mvn.w	r8, #1
		EEPROM_reader( ST_23_TOT_DEMANDS_DEMAND_ADDR + i*NI_FMAT2_SIZE, (uint8_t*)&st_23.tot_data_block.demands[i].demand[0], NI_FMAT2_SIZE );
 102715e:	f04f 0205 	mov.w	r2, #5
 1027162:	f106 0150 	add.w	r1, r6, #80	; 0x50
 1027166:	f244 10df 	movw	r0, #16863	; 0x41df
		if (st_23.tot_data_block.demands[i].cont_cum_demand >= (uint64_t)0x0000FFFFFFFFFFFF) {
 102716a:	bf08      	it	eq
 102716c:	45a0      	cmpeq	r8, r4
		EEPROM_reader( ST_23_TOT_DEMANDS_DEMAND_ADDR + i*NI_FMAT2_SIZE, (uint8_t*)&st_23.tot_data_block.demands[i].demand[0], NI_FMAT2_SIZE );
 102716e:	fb02 000a 	mla	r0, r2, sl, r0
 1027172:	4459      	add	r1, fp
			st_23.tot_data_block.demands[i].cont_cum_demand = 0;
 1027174:	f04f 0400 	mov.w	r4, #0
 1027178:	f04f 0500 	mov.w	r5, #0
		if (st_23.tot_data_block.demands[i].cont_cum_demand >= (uint64_t)0x0000FFFFFFFFFFFF) {
 102717c:	d203      	bcs.n	1027186 <REGS_APP_bLoad_st_23+0x14e>
			st_23.tot_data_block.demands[i].cont_cum_demand = 0;
 102717e:	e9c7 4502 	strd	r4, r5, [r7, #8]
			is_ok = false;
 1027182:	2300      	movs	r3, #0
 1027184:	9303      	str	r3, [sp, #12]
		EEPROM_reader( ST_23_TOT_DEMANDS_DEMAND_ADDR + i*NI_FMAT2_SIZE, (uint8_t*)&st_23.tot_data_block.demands[i].demand[0], NI_FMAT2_SIZE );
 1027186:	4b62      	ldr	r3, [pc, #392]	; (1027310 <REGS_APP_bLoad_st_23+0x2d8>)
 1027188:	4798      	blx	r3
		if (st_23.tot_data_block.demands[i].demand[0] >= (uint64_t)0x000000FFFFFFFFFF) {
 102718a:	9b00      	ldr	r3, [sp, #0]
 102718c:	445b      	add	r3, fp
 102718e:	4698      	mov	r8, r3
 1027190:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 1027194:	2bff      	cmp	r3, #255	; 0xff
	for ( i = 0; i < st_21.nbr_demands; i++ ) {
 1027196:	f10a 0a01 	add.w	sl, sl, #1
		if (st_23.tot_data_block.demands[i].demand[0] >= (uint64_t)0x000000FFFFFFFFFF) {
 102719a:	bf08      	it	eq
 102719c:	f1b2 3fff 	cmpeq.w	r2, #4294967295
	for ( i = 0; i < st_21.nbr_demands; i++ ) {
 10271a0:	fa5f fa8a 	uxtb.w	sl, sl
			st_23.tot_data_block.demands[i].demand[0] = 0;
 10271a4:	f04f 0200 	mov.w	r2, #0
 10271a8:	f04f 0300 	mov.w	r3, #0
		if (st_23.tot_data_block.demands[i].demand[0] >= (uint64_t)0x000000FFFFFFFFFF) {
 10271ac:	d303      	bcc.n	10271b6 <REGS_APP_bLoad_st_23+0x17e>
			st_23.tot_data_block.demands[i].demand[0] = 0;
 10271ae:	e9c8 2314 	strd	r2, r3, [r8, #80]	; 0x50
			is_ok = false;
 10271b2:	2300      	movs	r3, #0
 10271b4:	9303      	str	r3, [sp, #12]
	for ( i = 0; i < st_21.nbr_demands; i++ ) {
 10271b6:	4b57      	ldr	r3, [pc, #348]	; (1027314 <REGS_APP_bLoad_st_23+0x2dc>)
 10271b8:	791b      	ldrb	r3, [r3, #4]
 10271ba:	4553      	cmp	r3, sl
 10271bc:	d926      	bls.n	102720c <REGS_APP_bLoad_st_23+0x1d4>
		if (st_23.tot_data_block.demands[i].event_time[0] >= (uint32_t)0xFFFFFFFF) {
 10271be:	ea4f 134a 	mov.w	r3, sl, lsl #5
 10271c2:	fa0f f48a 	sxth.w	r4, sl
 10271c6:	0166      	lsls	r6, r4, #5
 10271c8:	461d      	mov	r5, r3
		EEPROM_reader( ST_23_TOT_DEMANDS_EVENT_TIME_ADDR + i*TM_FMAT_SIZE, (uint8_t*)&st_23.tot_data_block.demands[i].event_time[0], TM_FMAT_SIZE );
 10271ca:	2204      	movs	r2, #4
 10271cc:	f106 0138 	add.w	r1, r6, #56	; 0x38
 10271d0:	f244 10bf 	movw	r0, #16831	; 0x41bf
		if (st_23.tot_data_block.demands[i].event_time[0] >= (uint32_t)0xFFFFFFFF) {
 10271d4:	445d      	add	r5, fp
		EEPROM_reader( ST_23_TOT_DEMANDS_EVENT_TIME_ADDR + i*TM_FMAT_SIZE, (uint8_t*)&st_23.tot_data_block.demands[i].event_time[0], TM_FMAT_SIZE );
 10271d6:	4459      	add	r1, fp
 10271d8:	fb02 000a 	mla	r0, r2, sl, r0
		if (st_23.tot_data_block.demands[i].event_time[0] >= (uint32_t)0xFFFFFFFF) {
 10271dc:	9300      	str	r3, [sp, #0]
		EEPROM_reader( ST_23_TOT_DEMANDS_EVENT_TIME_ADDR + i*TM_FMAT_SIZE, (uint8_t*)&st_23.tot_data_block.demands[i].event_time[0], TM_FMAT_SIZE );
 10271de:	4b4c      	ldr	r3, [pc, #304]	; (1027310 <REGS_APP_bLoad_st_23+0x2d8>)
 10271e0:	4798      	blx	r3
		EEPROM_reader( ST_23_TOT_DEMANDS_CUM_DEMAND_ADDR + i*NI_FMAT1_SIZE, (uint8_t*)&st_23.tot_data_block.demands[i].cum_demand, NI_FMAT1_SIZE );
 10271e2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
		if (st_23.tot_data_block.demands[i].event_time[0] >= (uint32_t)0xFFFFFFFF) {
 10271e6:	6bab      	ldr	r3, [r5, #56]	; 0x38
		EEPROM_reader( ST_23_TOT_DEMANDS_CUM_DEMAND_ADDR + i*NI_FMAT1_SIZE, (uint8_t*)&st_23.tot_data_block.demands[i].cum_demand, NI_FMAT1_SIZE );
 10271e8:	0064      	lsls	r4, r4, #1
 10271ea:	f106 0140 	add.w	r1, r6, #64	; 0x40
 10271ee:	f504 4083 	add.w	r0, r4, #16768	; 0x4180
		if (st_23.tot_data_block.demands[i].event_time[0] >= (uint32_t)0xFFFFFFFF) {
 10271f2:	3301      	adds	r3, #1
		if (st_23.tot_data_block.demands[i].cum_demand >= (uint64_t)0x0000FFFFFFFFFFFF) {
 10271f4:	f10a 0702 	add.w	r7, sl, #2
		EEPROM_reader( ST_23_TOT_DEMANDS_CUM_DEMAND_ADDR + i*NI_FMAT1_SIZE, (uint8_t*)&st_23.tot_data_block.demands[i].cum_demand, NI_FMAT1_SIZE );
 10271f8:	f04f 0206 	mov.w	r2, #6
 10271fc:	4459      	add	r1, fp
 10271fe:	f100 0047 	add.w	r0, r0, #71	; 0x47
		if (st_23.tot_data_block.demands[i].event_time[0] >= (uint32_t)0xFFFFFFFF) {
 1027202:	d182      	bne.n	102710a <REGS_APP_bLoad_st_23+0xd2>
			st_23.tot_data_block.demands[i].event_time[0] = 0;
 1027204:	2300      	movs	r3, #0
 1027206:	63ab      	str	r3, [r5, #56]	; 0x38
			is_ok = false;
 1027208:	9303      	str	r3, [sp, #12]
 102720a:	e77e      	b.n	102710a <REGS_APP_bLoad_st_23+0xd2>
	for ( i = 0; i < st_21.nbr_coin_values; i++ ) {
 102720c:	4b41      	ldr	r3, [pc, #260]	; (1027314 <REGS_APP_bLoad_st_23+0x2dc>)
 102720e:	795b      	ldrb	r3, [r3, #5]
 1027210:	b343      	cbz	r3, 1027264 <REGS_APP_bLoad_st_23+0x22c>
			st_23.tot_data_block.coincidents[i].coincident_values[0] = 0;
 1027212:	f8dd a00c 	ldr.w	sl, [sp, #12]
	for ( i = 0; i < st_21.nbr_coin_values; i++ ) {
 1027216:	2400      	movs	r4, #0
		EEPROM_reader( ST_23_TOT_COINCIDENTS_ADDR + i*NI_FMAT2_SIZE, (uint8_t*)&st_23.tot_data_block.coincidents[i].coincident_values[0], NI_FMAT2_SIZE );
 1027218:	f04f 0805 	mov.w	r8, #5
		if (st_23.tot_data_block.coincidents[i].coincident_values[0] >= (uint64_t)0x000000FFFFFFFFFF) {
 102721c:	f06f 0601 	mvn.w	r6, #1
 1027220:	27ff      	movs	r7, #255	; 0xff
		EEPROM_reader( ST_23_TOT_COINCIDENTS_ADDR + i*NI_FMAT2_SIZE, (uint8_t*)&st_23.tot_data_block.coincidents[i].coincident_values[0], NI_FMAT2_SIZE );
 1027222:	f104 050f 	add.w	r5, r4, #15
 1027226:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 102722a:	f244 10e9 	movw	r0, #16873	; 0x41e9
 102722e:	fb08 0004 	mla	r0, r8, r4, r0
 1027232:	2205      	movs	r2, #5
 1027234:	4b36      	ldr	r3, [pc, #216]	; (1027310 <REGS_APP_bLoad_st_23+0x2d8>)
 1027236:	4629      	mov	r1, r5
 1027238:	4798      	blx	r3
		if (st_23.tot_data_block.coincidents[i].coincident_values[0] >= (uint64_t)0x000000FFFFFFFFFF) {
 102723a:	e9d5 2300 	ldrd	r2, r3, [r5]
 102723e:	429f      	cmp	r7, r3
	for ( i = 0; i < st_21.nbr_coin_values; i++ ) {
 1027240:	f104 0401 	add.w	r4, r4, #1
		if (st_23.tot_data_block.coincidents[i].coincident_values[0] >= (uint64_t)0x000000FFFFFFFFFF) {
 1027244:	bf08      	it	eq
 1027246:	4296      	cmpeq	r6, r2
	for ( i = 0; i < st_21.nbr_coin_values; i++ ) {
 1027248:	b2e4      	uxtb	r4, r4
		if (st_23.tot_data_block.coincidents[i].coincident_values[0] >= (uint64_t)0x000000FFFFFFFFFF) {
 102724a:	d205      	bcs.n	1027258 <REGS_APP_bLoad_st_23+0x220>
			st_23.tot_data_block.coincidents[i].coincident_values[0] = 0;
 102724c:	2200      	movs	r2, #0
 102724e:	2300      	movs	r3, #0
 1027250:	e9c5 2300 	strd	r2, r3, [r5]
			is_ok = false;
 1027254:	f04f 0a00 	mov.w	sl, #0
	for ( i = 0; i < st_21.nbr_coin_values; i++ ) {
 1027258:	4b2e      	ldr	r3, [pc, #184]	; (1027314 <REGS_APP_bLoad_st_23+0x2dc>)
 102725a:	795b      	ldrb	r3, [r3, #5]
 102725c:	42a3      	cmp	r3, r4
 102725e:	d8e0      	bhi.n	1027222 <REGS_APP_bLoad_st_23+0x1ea>
 1027260:	f8cd a00c 	str.w	sl, [sp, #12]
	for ( i = 0; i < st_21.nbr_tiers; i++ ) {
 1027264:	4b2b      	ldr	r3, [pc, #172]	; (1027314 <REGS_APP_bLoad_st_23+0x2dc>)
 1027266:	79db      	ldrb	r3, [r3, #7]
 1027268:	2b00      	cmp	r3, #0
 102726a:	f000 814b 	beq.w	1027504 <REGS_APP_bLoad_st_23+0x4cc>
 102726e:	2300      	movs	r3, #0
 1027270:	930a      	str	r3, [sp, #40]	; 0x28
		for ( j = 0; j < st_21.nbr_summations; j++ ) {
 1027272:	4b28      	ldr	r3, [pc, #160]	; (1027314 <REGS_APP_bLoad_st_23+0x2dc>)
 1027274:	78db      	ldrb	r3, [r3, #3]
 1027276:	2b00      	cmp	r3, #0
 1027278:	d054      	beq.n	1027324 <REGS_APP_bLoad_st_23+0x2ec>
 102727a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 102727c:	4a26      	ldr	r2, [pc, #152]	; (1027318 <REGS_APP_bLoad_st_23+0x2e0>)
 102727e:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 1027320 <REGS_APP_bLoad_st_23+0x2e8>
 1027282:	f8cd a010 	str.w	sl, [sp, #16]
 1027286:	2524      	movs	r5, #36	; 0x24
 1027288:	f244 13e9 	movw	r3, #16873	; 0x41e9
 102728c:	ea4f 08c6 	mov.w	r8, r6, lsl #3
 1027290:	fb15 3506 	smlabb	r5, r5, r6, r3
 1027294:	2400      	movs	r4, #0
 1027296:	4691      	mov	r9, r2
 1027298:	46c2      	mov	sl, r8
 102729a:	e009      	b.n	10272b0 <REGS_APP_bLoad_st_23+0x278>
			st_23.tier_data_block[i].summations[j] = (double)(ull_auxvar);
 102729c:	e9dd 2300 	ldrd	r2, r3, [sp]
 10272a0:	e9ce 231e 	strd	r2, r3, [lr, #120]	; 0x78
		for ( j = 0; j < st_21.nbr_summations; j++ ) {
 10272a4:	4b1b      	ldr	r3, [pc, #108]	; (1027314 <REGS_APP_bLoad_st_23+0x2dc>)
 10272a6:	3401      	adds	r4, #1
 10272a8:	78da      	ldrb	r2, [r3, #3]
 10272aa:	b2e4      	uxtb	r4, r4
 10272ac:	42a2      	cmp	r2, r4
 10272ae:	d939      	bls.n	1027324 <REGS_APP_bLoad_st_23+0x2ec>
			EEPROM_reader( ST_23_TIER_SUMMATIONS_ADDR + (i * NI_FMAT1_SIZE * MAX_NBR_SUMMATIONS) + (j * NI_FMAT1_SIZE), (uint8_t*)&ull_auxvar, NI_FMAT1_SIZE );
 10272b0:	2206      	movs	r2, #6
 10272b2:	491a      	ldr	r1, [pc, #104]	; (102731c <REGS_APP_bLoad_st_23+0x2e4>)
 10272b4:	4b16      	ldr	r3, [pc, #88]	; (1027310 <REGS_APP_bLoad_st_23+0x2d8>)
 10272b6:	fb02 5004 	mla	r0, r2, r4, r5
			ull_auxvar = 0;
 10272ba:	2700      	movs	r7, #0
 10272bc:	f04f 0800 	mov.w	r8, #0
 10272c0:	e9c1 7800 	strd	r7, r8, [r1]
			EEPROM_reader( ST_23_TIER_SUMMATIONS_ADDR + (i * NI_FMAT1_SIZE * MAX_NBR_SUMMATIONS) + (j * NI_FMAT1_SIZE), (uint8_t*)&ull_auxvar, NI_FMAT1_SIZE );
 10272c4:	4798      	blx	r3
			st_23.tier_data_block[i].summations[j] = (double)(ull_auxvar);
 10272c6:	4b15      	ldr	r3, [pc, #84]	; (102731c <REGS_APP_bLoad_st_23+0x2e4>)
 10272c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 10272cc:	9b04      	ldr	r3, [sp, #16]
 10272ce:	4798      	blx	r3
 10272d0:	e9cd 0100 	strd	r0, r1, [sp]
			if ( (uint64_t)st_23.tier_data_block[i].summations[j] >= (uint64_t)MAX_REGISTER_VALUE) {
 10272d4:	47c8      	blx	r9
 10272d6:	f20f 0828 	addw	r8, pc, #40	; 0x28
 10272da:	e9d8 7800 	ldrd	r7, r8, [r8]
			st_23.tier_data_block[i].summations[j] = (double)(ull_auxvar);
 10272de:	ebaa 0e06 	sub.w	lr, sl, r6
			if ( (uint64_t)st_23.tier_data_block[i].summations[j] >= (uint64_t)MAX_REGISTER_VALUE) {
 10272e2:	4588      	cmp	r8, r1
			st_23.tier_data_block[i].summations[j] = (double)(ull_auxvar);
 10272e4:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
			if ( (uint64_t)st_23.tier_data_block[i].summations[j] >= (uint64_t)MAX_REGISTER_VALUE) {
 10272e8:	bf08      	it	eq
 10272ea:	4287      	cmpeq	r7, r0
			st_23.tier_data_block[i].summations[j] = (double)(ull_auxvar);
 10272ec:	eb0b 0ece 	add.w	lr, fp, lr, lsl #3
			if ( (uint64_t)st_23.tier_data_block[i].summations[j] >= (uint64_t)MAX_REGISTER_VALUE) {
 10272f0:	d2d4      	bcs.n	102729c <REGS_APP_bLoad_st_23+0x264>
				st_23.tier_data_block[i].summations[j] = 0;
 10272f2:	2000      	movs	r0, #0
 10272f4:	2100      	movs	r1, #0
				is_ok = false;
 10272f6:	2300      	movs	r3, #0
				st_23.tier_data_block[i].summations[j] = 0;
 10272f8:	e9ce 011e 	strd	r0, r1, [lr, #120]	; 0x78
				is_ok = false;
 10272fc:	9303      	str	r3, [sp, #12]
 10272fe:	e7d1      	b.n	10272a4 <REGS_APP_bLoad_st_23+0x26c>
 1027300:	d4a50fff 	.word	0xd4a50fff
 1027304:	000000e8 	.word	0x000000e8
 1027308:	01030b71 	.word	0x01030b71
 102730c:	20007998 	.word	0x20007998
 1027310:	01017511 	.word	0x01017511
 1027314:	2000797c 	.word	0x2000797c
 1027318:	01030659 	.word	0x01030659
 102731c:	20007fc0 	.word	0x20007fc0
 1027320:	0102ff99 	.word	0x0102ff99
		for ( j = 0; j < st_21.nbr_demands; j++ ) {
 1027324:	4b7f      	ldr	r3, [pc, #508]	; (1027524 <REGS_APP_bLoad_st_23+0x4ec>)
 1027326:	791b      	ldrb	r3, [r3, #4]
 1027328:	2b00      	cmp	r3, #0
 102732a:	f000 80a8 	beq.w	102747e <REGS_APP_bLoad_st_23+0x446>
 102732e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 1027330:	b223      	sxth	r3, r4
 1027332:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 1027336:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 102733a:	011b      	lsls	r3, r3, #4
 102733c:	0092      	lsls	r2, r2, #2
 102733e:	461d      	mov	r5, r3
 1027340:	9308      	str	r3, [sp, #32]
 1027342:	f502 4385 	add.w	r3, r2, #17024	; 0x4280
 1027346:	461e      	mov	r6, r3
 1027348:	4630      	mov	r0, r6
 102734a:	3019      	adds	r0, #25
 102734c:	9005      	str	r0, [sp, #20]
 102734e:	4630      	mov	r0, r6
 1027350:	3049      	adds	r0, #73	; 0x49
 1027352:	f244 2179 	movw	r1, #17017	; 0x4279
 1027356:	220a      	movs	r2, #10
 1027358:	f244 23f9 	movw	r3, #17145	; 0x42f9
 102735c:	9006      	str	r0, [sp, #24]
 102735e:	4628      	mov	r0, r5
			if (st_23.tier_data_block[i].demands[j].event_time[0] >= (uint32_t)0xFFFFFFFF) {
 1027360:	ebc4 0ac4 	rsb	sl, r4, r4, lsl #3
 1027364:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 1027368:	fb12 3304 	smlabb	r3, r2, r4, r3
 102736c:	3078      	adds	r0, #120	; 0x78
 102736e:	9009      	str	r0, [sp, #36]	; 0x24
 1027370:	9104      	str	r1, [sp, #16]
 1027372:	9307      	str	r3, [sp, #28]
 1027374:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
		for ( j = 0; j < st_21.nbr_demands; j++ ) {
 1027378:	2400      	movs	r4, #0
 102737a:	e05a      	b.n	1027432 <REGS_APP_bLoad_st_23+0x3fa>
			EEPROM_reader( ST_23_TIER_DEMANDS_CUM_DEMAND_ADDR + (i * NI_FMAT1_SIZE * MAX_NBR_DEMANDS) + (j * NI_FMAT1_SIZE), (uint8_t*)&st_23.tier_data_block[i].demands[j].cum_demand, NI_FMAT1_SIZE );
 102737c:	4b6a      	ldr	r3, [pc, #424]	; (1027528 <REGS_APP_bLoad_st_23+0x4f0>)
 102737e:	4798      	blx	r3
			EEPROM_reader( ST_23_TIER_DEMANDS_CONT_CUM_DEMAND_ADDR + (i * NI_FMAT1_SIZE * MAX_NBR_DEMANDS) + (j * NI_FMAT1_SIZE), (uint8_t*)&st_23.tier_data_block[i].demands[j].cont_cum_demand, NI_FMAT1_SIZE );
 1027380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 1027382:	f106 0140 	add.w	r1, r6, #64	; 0x40
 1027386:	4419      	add	r1, r3
 1027388:	9b06      	ldr	r3, [sp, #24]
 102738a:	18f8      	adds	r0, r7, r3
			if (st_23.tier_data_block[i].demands[j].cum_demand >= (uint64_t)0x0000FFFFFFFFFFFF) {
 102738c:	eb05 030a 	add.w	r3, r5, sl
 1027390:	445b      	add	r3, fp
 1027392:	e9d3 672c 	ldrd	r6, r7, [r3, #176]	; 0xb0
 1027396:	f64f 79ff 	movw	r9, #65535	; 0xffff
 102739a:	45b9      	cmp	r9, r7
 102739c:	f06f 0801 	mvn.w	r8, #1
 10273a0:	bf08      	it	eq
 10273a2:	45b0      	cmpeq	r8, r6
			EEPROM_reader( ST_23_TIER_DEMANDS_CONT_CUM_DEMAND_ADDR + (i * NI_FMAT1_SIZE * MAX_NBR_DEMANDS) + (j * NI_FMAT1_SIZE), (uint8_t*)&st_23.tier_data_block[i].demands[j].cont_cum_demand, NI_FMAT1_SIZE );
 10273a4:	f04f 0206 	mov.w	r2, #6
 10273a8:	4459      	add	r1, fp
				st_23.tier_data_block[i].demands[j].cum_demand = 0;
 10273aa:	f04f 0600 	mov.w	r6, #0
 10273ae:	f04f 0700 	mov.w	r7, #0
			if (st_23.tier_data_block[i].demands[j].cum_demand >= (uint64_t)0x0000FFFFFFFFFFFF) {
 10273b2:	d203      	bcs.n	10273bc <REGS_APP_bLoad_st_23+0x384>
				st_23.tier_data_block[i].demands[j].cum_demand = 0;
 10273b4:	e9c3 672c 	strd	r6, r7, [r3, #176]	; 0xb0
				is_ok = false;
 10273b8:	2300      	movs	r3, #0
 10273ba:	9303      	str	r3, [sp, #12]
			EEPROM_reader( ST_23_TIER_DEMANDS_CONT_CUM_DEMAND_ADDR + (i * NI_FMAT1_SIZE * MAX_NBR_DEMANDS) + (j * NI_FMAT1_SIZE), (uint8_t*)&st_23.tier_data_block[i].demands[j].cont_cum_demand, NI_FMAT1_SIZE );
 10273bc:	4b5a      	ldr	r3, [pc, #360]	; (1027528 <REGS_APP_bLoad_st_23+0x4f0>)
 10273be:	4798      	blx	r3
			if (st_23.tier_data_block[i].demands[j].cont_cum_demand >= (uint64_t)0x0000FFFFFFFFFFFF) {
 10273c0:	1ca3      	adds	r3, r4, #2
 10273c2:	eb0a 1343 	add.w	r3, sl, r3, lsl #5
 10273c6:	445b      	add	r3, fp
 10273c8:	e9d3 671e 	ldrd	r6, r7, [r3, #120]	; 0x78
			EEPROM_reader( ST_23_TIER_DEMANDS_DEMAND_ADDR + (i * NI_FMAT2_SIZE * MAX_NBR_DEMANDS) + (j * NI_FMAT2_SIZE), (uint8_t*)&st_23.tier_data_block[i].demands[j].demand[0], NI_FMAT2_SIZE );
 10273cc:	9900      	ldr	r1, [sp, #0]
 10273ce:	9807      	ldr	r0, [sp, #28]
			if (st_23.tier_data_block[i].demands[j].cont_cum_demand >= (uint64_t)0x0000FFFFFFFFFFFF) {
 10273d0:	f64f 79ff 	movw	r9, #65535	; 0xffff
 10273d4:	45b9      	cmp	r9, r7
 10273d6:	f06f 0801 	mvn.w	r8, #1
			EEPROM_reader( ST_23_TIER_DEMANDS_DEMAND_ADDR + (i * NI_FMAT2_SIZE * MAX_NBR_DEMANDS) + (j * NI_FMAT2_SIZE), (uint8_t*)&st_23.tier_data_block[i].demands[j].demand[0], NI_FMAT2_SIZE );
 10273da:	f04f 0205 	mov.w	r2, #5
 10273de:	f101 01c0 	add.w	r1, r1, #192	; 0xc0
			if (st_23.tier_data_block[i].demands[j].cont_cum_demand >= (uint64_t)0x0000FFFFFFFFFFFF) {
 10273e2:	bf08      	it	eq
 10273e4:	45b0      	cmpeq	r8, r6
			EEPROM_reader( ST_23_TIER_DEMANDS_DEMAND_ADDR + (i * NI_FMAT2_SIZE * MAX_NBR_DEMANDS) + (j * NI_FMAT2_SIZE), (uint8_t*)&st_23.tier_data_block[i].demands[j].demand[0], NI_FMAT2_SIZE );
 10273e6:	fb02 0004 	mla	r0, r2, r4, r0
 10273ea:	4459      	add	r1, fp
				st_23.tier_data_block[i].demands[j].cont_cum_demand = 0;
 10273ec:	f04f 0600 	mov.w	r6, #0
 10273f0:	f04f 0700 	mov.w	r7, #0
			if (st_23.tier_data_block[i].demands[j].cont_cum_demand >= (uint64_t)0x0000FFFFFFFFFFFF) {
 10273f4:	d203      	bcs.n	10273fe <REGS_APP_bLoad_st_23+0x3c6>
				st_23.tier_data_block[i].demands[j].cont_cum_demand = 0;
 10273f6:	e9c3 671e 	strd	r6, r7, [r3, #120]	; 0x78
				is_ok = false;
 10273fa:	2300      	movs	r3, #0
 10273fc:	9303      	str	r3, [sp, #12]
			if (st_23.tier_data_block[i].demands[j].demand[0] >= (uint64_t)0x000000FFFFFFFFFF) {
 10273fe:	4455      	add	r5, sl
			EEPROM_reader( ST_23_TIER_DEMANDS_DEMAND_ADDR + (i * NI_FMAT2_SIZE * MAX_NBR_DEMANDS) + (j * NI_FMAT2_SIZE), (uint8_t*)&st_23.tier_data_block[i].demands[j].demand[0], NI_FMAT2_SIZE );
 1027400:	4b49      	ldr	r3, [pc, #292]	; (1027528 <REGS_APP_bLoad_st_23+0x4f0>)
			if (st_23.tier_data_block[i].demands[j].demand[0] >= (uint64_t)0x000000FFFFFFFFFF) {
 1027402:	445d      	add	r5, fp
			EEPROM_reader( ST_23_TIER_DEMANDS_DEMAND_ADDR + (i * NI_FMAT2_SIZE * MAX_NBR_DEMANDS) + (j * NI_FMAT2_SIZE), (uint8_t*)&st_23.tier_data_block[i].demands[j].demand[0], NI_FMAT2_SIZE );
 1027404:	4798      	blx	r3
			if (st_23.tier_data_block[i].demands[j].demand[0] >= (uint64_t)0x000000FFFFFFFFFF) {
 1027406:	e9d5 2330 	ldrd	r2, r3, [r5, #192]	; 0xc0
 102740a:	2bff      	cmp	r3, #255	; 0xff
		for ( j = 0; j < st_21.nbr_demands; j++ ) {
 102740c:	f104 0401 	add.w	r4, r4, #1
			if (st_23.tier_data_block[i].demands[j].demand[0] >= (uint64_t)0x000000FFFFFFFFFF) {
 1027410:	bf08      	it	eq
 1027412:	f1b2 3fff 	cmpeq.w	r2, #4294967295
		for ( j = 0; j < st_21.nbr_demands; j++ ) {
 1027416:	b2e4      	uxtb	r4, r4
				st_23.tier_data_block[i].demands[j].demand[0] = 0;
 1027418:	f04f 0200 	mov.w	r2, #0
 102741c:	f04f 0300 	mov.w	r3, #0
			if (st_23.tier_data_block[i].demands[j].demand[0] >= (uint64_t)0x000000FFFFFFFFFF) {
 1027420:	d303      	bcc.n	102742a <REGS_APP_bLoad_st_23+0x3f2>
				st_23.tier_data_block[i].demands[j].demand[0] = 0;
 1027422:	e9c5 2330 	strd	r2, r3, [r5, #192]	; 0xc0
				is_ok = false;
 1027426:	2300      	movs	r3, #0
 1027428:	9303      	str	r3, [sp, #12]
		for ( j = 0; j < st_21.nbr_demands; j++ ) {
 102742a:	4b3e      	ldr	r3, [pc, #248]	; (1027524 <REGS_APP_bLoad_st_23+0x4ec>)
 102742c:	791b      	ldrb	r3, [r3, #4]
 102742e:	42a3      	cmp	r3, r4
 1027430:	d925      	bls.n	102747e <REGS_APP_bLoad_st_23+0x446>
 1027432:	b227      	sxth	r7, r4
 1027434:	9b08      	ldr	r3, [sp, #32]
 1027436:	017e      	lsls	r6, r7, #5
 1027438:	18f3      	adds	r3, r6, r3
			EEPROM_reader( ST_23_TIER_DEMANDS_EVENT_TIME_ADDR + (i * TM_FMAT_SIZE * MAX_NBR_DEMANDS) + (j * TM_FMAT_SIZE),(uint8_t*) &st_23.tier_data_block[i].demands[j].event_time[0], TM_FMAT_SIZE );
 102743a:	9300      	str	r3, [sp, #0]
 102743c:	f103 01a8 	add.w	r1, r3, #168	; 0xa8
 1027440:	9b04      	ldr	r3, [sp, #16]
 1027442:	2204      	movs	r2, #4
 1027444:	fb02 3004 	mla	r0, r2, r4, r3
 1027448:	4459      	add	r1, fp
 102744a:	4b37      	ldr	r3, [pc, #220]	; (1027528 <REGS_APP_bLoad_st_23+0x4f0>)
 102744c:	4798      	blx	r3
			if (st_23.tier_data_block[i].demands[j].event_time[0] >= (uint32_t)0xFFFFFFFF) {
 102744e:	0165      	lsls	r5, r4, #5
			EEPROM_reader( ST_23_TIER_DEMANDS_CUM_DEMAND_ADDR + (i * NI_FMAT1_SIZE * MAX_NBR_DEMANDS) + (j * NI_FMAT1_SIZE), (uint8_t*)&st_23.tier_data_block[i].demands[j].cum_demand, NI_FMAT1_SIZE );
 1027450:	9b00      	ldr	r3, [sp, #0]
			if (st_23.tier_data_block[i].demands[j].event_time[0] >= (uint32_t)0xFFFFFFFF) {
 1027452:	eb05 0e0a 	add.w	lr, r5, sl
			EEPROM_reader( ST_23_TIER_DEMANDS_CUM_DEMAND_ADDR + (i * NI_FMAT1_SIZE * MAX_NBR_DEMANDS) + (j * NI_FMAT1_SIZE), (uint8_t*)&st_23.tier_data_block[i].demands[j].cum_demand, NI_FMAT1_SIZE );
 1027456:	f103 01b0 	add.w	r1, r3, #176	; 0xb0
 102745a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 102745e:	9b05      	ldr	r3, [sp, #20]
			if (st_23.tier_data_block[i].demands[j].event_time[0] >= (uint32_t)0xFFFFFFFF) {
 1027460:	44de      	add	lr, fp
			EEPROM_reader( ST_23_TIER_DEMANDS_CUM_DEMAND_ADDR + (i * NI_FMAT1_SIZE * MAX_NBR_DEMANDS) + (j * NI_FMAT1_SIZE), (uint8_t*)&st_23.tier_data_block[i].demands[j].cum_demand, NI_FMAT1_SIZE );
 1027462:	007f      	lsls	r7, r7, #1
 1027464:	18f8      	adds	r0, r7, r3
			if (st_23.tier_data_block[i].demands[j].event_time[0] >= (uint32_t)0xFFFFFFFF) {
 1027466:	f8de 30a8 	ldr.w	r3, [lr, #168]	; 0xa8
 102746a:	3301      	adds	r3, #1
			EEPROM_reader( ST_23_TIER_DEMANDS_CUM_DEMAND_ADDR + (i * NI_FMAT1_SIZE * MAX_NBR_DEMANDS) + (j * NI_FMAT1_SIZE), (uint8_t*)&st_23.tier_data_block[i].demands[j].cum_demand, NI_FMAT1_SIZE );
 102746c:	f04f 0206 	mov.w	r2, #6
 1027470:	4459      	add	r1, fp
			if (st_23.tier_data_block[i].demands[j].event_time[0] >= (uint32_t)0xFFFFFFFF) {
 1027472:	d183      	bne.n	102737c <REGS_APP_bLoad_st_23+0x344>
				st_23.tier_data_block[i].demands[j].event_time[0] = 0;
 1027474:	2300      	movs	r3, #0
 1027476:	f8ce 30a8 	str.w	r3, [lr, #168]	; 0xa8
				is_ok = false;
 102747a:	9303      	str	r3, [sp, #12]
 102747c:	e77e      	b.n	102737c <REGS_APP_bLoad_st_23+0x344>
		for ( j = 0; j < st_21.nbr_coin_values; j++ ) {
 102747e:	4b29      	ldr	r3, [pc, #164]	; (1027524 <REGS_APP_bLoad_st_23+0x4ec>)
 1027480:	795b      	ldrb	r3, [r3, #5]
 1027482:	b3b3      	cbz	r3, 10274f2 <REGS_APP_bLoad_st_23+0x4ba>
			if (st_23.tier_data_block[i].coincidents[j].coincident_values[0] >= (uint64_t)0x000000FFFFFFFFFF) {
 1027484:	990a      	ldr	r1, [sp, #40]	; 0x28
 1027486:	f8dd a00c 	ldr.w	sl, [sp, #12]
 102748a:	270e      	movs	r7, #14
			EEPROM_reader( ST_23_TIER_COINCIDENTS_ADDR + (i * NI_FMAT2_SIZE * MAX_NBR_COIN_VALUES) + (j * NI_FMAT2_SIZE), (uint8_t*)&st_23.tier_data_block[i].coincidents[j].coincident_values[0], NI_FMAT2_SIZE );
 102748c:	231d      	movs	r3, #29
			if (st_23.tier_data_block[i].coincidents[j].coincident_values[0] >= (uint64_t)0x000000FFFFFFFFFF) {
 102748e:	ebc1 06c1 	rsb	r6, r1, r1, lsl #3
			EEPROM_reader( ST_23_TIER_COINCIDENTS_ADDR + (i * NI_FMAT2_SIZE * MAX_NBR_COIN_VALUES) + (j * NI_FMAT2_SIZE), (uint8_t*)&st_23.tier_data_block[i].coincidents[j].coincident_values[0], NI_FMAT2_SIZE );
 1027492:	fb17 3701 	smlabb	r7, r7, r1, r3
			if (st_23.tier_data_block[i].coincidents[j].coincident_values[0] >= (uint64_t)0x000000FFFFFFFFFF) {
 1027496:	0076      	lsls	r6, r6, #1
		for ( j = 0; j < st_21.nbr_coin_values; j++ ) {
 1027498:	f04f 0800 	mov.w	r8, #0
			if (st_23.tier_data_block[i].coincidents[j].coincident_values[0] >= (uint64_t)0x000000FFFFFFFFFF) {
 102749c:	f06f 0401 	mvn.w	r4, #1
 10274a0:	25ff      	movs	r5, #255	; 0xff
			EEPROM_reader( ST_23_TIER_COINCIDENTS_ADDR + (i * NI_FMAT2_SIZE * MAX_NBR_COIN_VALUES) + (j * NI_FMAT2_SIZE), (uint8_t*)&st_23.tier_data_block[i].coincidents[j].coincident_values[0], NI_FMAT2_SIZE );
 10274a2:	2205      	movs	r2, #5
 10274a4:	eb07 0108 	add.w	r1, r7, r8
 10274a8:	f244 3021 	movw	r0, #17185	; 0x4321
 10274ac:	fb02 0008 	mla	r0, r2, r8, r0
 10274b0:	eb0b 01c1 	add.w	r1, fp, r1, lsl #3
 10274b4:	4b1c      	ldr	r3, [pc, #112]	; (1027528 <REGS_APP_bLoad_st_23+0x4f0>)
 10274b6:	4798      	blx	r3
			if (st_23.tier_data_block[i].coincidents[j].coincident_values[0] >= (uint64_t)0x000000FFFFFFFFFF) {
 10274b8:	eb06 0108 	add.w	r1, r6, r8
 10274bc:	311d      	adds	r1, #29
 10274be:	eb0b 01c1 	add.w	r1, fp, r1, lsl #3
 10274c2:	e9d1 2300 	ldrd	r2, r3, [r1]
 10274c6:	429d      	cmp	r5, r3
		for ( j = 0; j < st_21.nbr_coin_values; j++ ) {
 10274c8:	f108 0801 	add.w	r8, r8, #1
			if (st_23.tier_data_block[i].coincidents[j].coincident_values[0] >= (uint64_t)0x000000FFFFFFFFFF) {
 10274cc:	bf08      	it	eq
 10274ce:	4294      	cmpeq	r4, r2
		for ( j = 0; j < st_21.nbr_coin_values; j++ ) {
 10274d0:	fa5f f888 	uxtb.w	r8, r8
				st_23.tier_data_block[i].coincidents[j].coincident_values[0] = 0;
 10274d4:	f04f 0200 	mov.w	r2, #0
 10274d8:	f04f 0300 	mov.w	r3, #0
			if (st_23.tier_data_block[i].coincidents[j].coincident_values[0] >= (uint64_t)0x000000FFFFFFFFFF) {
 10274dc:	d203      	bcs.n	10274e6 <REGS_APP_bLoad_st_23+0x4ae>
				st_23.tier_data_block[i].coincidents[j].coincident_values[0] = 0;
 10274de:	e9c1 2300 	strd	r2, r3, [r1]
				is_ok = false;
 10274e2:	f04f 0a00 	mov.w	sl, #0
		for ( j = 0; j < st_21.nbr_coin_values; j++ ) {
 10274e6:	4b0f      	ldr	r3, [pc, #60]	; (1027524 <REGS_APP_bLoad_st_23+0x4ec>)
 10274e8:	795b      	ldrb	r3, [r3, #5]
 10274ea:	4543      	cmp	r3, r8
 10274ec:	d8d9      	bhi.n	10274a2 <REGS_APP_bLoad_st_23+0x46a>
 10274ee:	f8cd a00c 	str.w	sl, [sp, #12]
	for ( i = 0; i < st_21.nbr_tiers; i++ ) {
 10274f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 10274f4:	4b0b      	ldr	r3, [pc, #44]	; (1027524 <REGS_APP_bLoad_st_23+0x4ec>)
 10274f6:	3201      	adds	r2, #1
 10274f8:	79db      	ldrb	r3, [r3, #7]
 10274fa:	b2d2      	uxtb	r2, r2
 10274fc:	4293      	cmp	r3, r2
 10274fe:	920a      	str	r2, [sp, #40]	; 0x28
 1027500:	f63f aeb7 	bhi.w	1027272 <REGS_APP_bLoad_st_23+0x23a>
		is_ok = REGS_APP_vSt_23_read_eeprom_values();
 1027504:	4b09      	ldr	r3, [pc, #36]	; (102752c <REGS_APP_bLoad_st_23+0x4f4>)
 1027506:	9903      	ldr	r1, [sp, #12]
 1027508:	7019      	strb	r1, [r3, #0]
		if ( is_ok ) {
 102750a:	b931      	cbnz	r1, 102751a <REGS_APP_bLoad_st_23+0x4e2>
 102750c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 102750e:	3b01      	subs	r3, #1
	for (uint8_t i = 0; i < 3; i++) {
 1027510:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 1027514:	930b      	str	r3, [sp, #44]	; 0x2c
 1027516:	f47f ad96 	bne.w	1027046 <REGS_APP_bLoad_st_23+0xe>
}
 102751a:	9803      	ldr	r0, [sp, #12]
 102751c:	b00d      	add	sp, #52	; 0x34
 102751e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1027522:	bf00      	nop
 1027524:	2000797c 	.word	0x2000797c
 1027528:	01017511 	.word	0x01017511
 102752c:	20007970 	.word	0x20007970

01027530 <REGS_APP_vClear_st_23>:
void REGS_APP_vClear_st_23(void) {
 1027530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	memset( &st_23, 0, sizeof(st_23) );
 1027534:	f8df a224 	ldr.w	sl, [pc, #548]	; 102775c <REGS_APP_vClear_st_23+0x22c>
 1027538:	4b86      	ldr	r3, [pc, #536]	; (1027754 <REGS_APP_vClear_st_23+0x224>)
void REGS_APP_vClear_st_23(void) {
 102753a:	b087      	sub	sp, #28
	memset( &st_23, 0, sizeof(st_23) );
 102753c:	4650      	mov	r0, sl
 102753e:	f44f 720e 	mov.w	r2, #568	; 0x238
 1027542:	2100      	movs	r1, #0
 1027544:	4798      	blx	r3
	if ( !meter.ed_mode.test_mode.enabled )
 1027546:	4b84      	ldr	r3, [pc, #528]	; (1027758 <REGS_APP_vClear_st_23+0x228>)
 1027548:	f893 4024 	ldrb.w	r4, [r3, #36]	; 0x24
 102754c:	b114      	cbz	r4, 1027554 <REGS_APP_vClear_st_23+0x24>
}
 102754e:	b007      	add	sp, #28
 1027550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for ( i = 0; i < st_21.nbr_summations; i++ ) {
 1027554:	f8df b208 	ldr.w	fp, [pc, #520]	; 1027760 <REGS_APP_vClear_st_23+0x230>
	EEPROM_writer( ST_23_NBR_DEMAND_RESETS_ADDR, &st_23_structure->nbr_demand_resets, 1 );
 1027558:	f8df 9208 	ldr.w	r9, [pc, #520]	; 1027764 <REGS_APP_vClear_st_23+0x234>
 102755c:	2201      	movs	r2, #1
 102755e:	4651      	mov	r1, sl
 1027560:	f244 109a 	movw	r0, #16794	; 0x419a
 1027564:	47c8      	blx	r9
	for ( i = 0; i < st_21.nbr_summations; i++ ) {
 1027566:	f89b 3003 	ldrb.w	r3, [fp, #3]
 102756a:	b17b      	cbz	r3, 102758c <REGS_APP_vClear_st_23+0x5c>
 102756c:	4620      	mov	r0, r4
		EEPROM_writer( ST_23_TOT_SUMMATIONS_ADDR + i*NI_FMAT1_SIZE, &st_23_structure->tot_data_block.summations[i], NI_FMAT1_SIZE );
 102756e:	2606      	movs	r6, #6
 1027570:	f244 159b 	movw	r5, #16795	; 0x419b
 1027574:	1c44      	adds	r4, r0, #1
 1027576:	eb0a 01c4 	add.w	r1, sl, r4, lsl #3
 102757a:	fb06 5000 	mla	r0, r6, r0, r5
 102757e:	2206      	movs	r2, #6
 1027580:	47c8      	blx	r9
	for ( i = 0; i < st_21.nbr_summations; i++ ) {
 1027582:	f89b 3003 	ldrb.w	r3, [fp, #3]
 1027586:	b2e0      	uxtb	r0, r4
 1027588:	4283      	cmp	r3, r0
 102758a:	d8f3      	bhi.n	1027574 <REGS_APP_vClear_st_23+0x44>
	for ( i = 0; i < st_21.nbr_demands; i++ ) {
 102758c:	f89b 3004 	ldrb.w	r3, [fp, #4]
 1027590:	b393      	cbz	r3, 10275f8 <REGS_APP_vClear_st_23+0xc8>
 1027592:	f04f 0800 	mov.w	r8, #0
		EEPROM_writer( ST_23_TOT_DEMANDS_EVENT_TIME_ADDR + i*TM_FMAT_SIZE, &st_23_structure->tot_data_block.demands[i].event_time[0], TM_FMAT_SIZE );
 1027596:	2704      	movs	r7, #4
 1027598:	f244 16bf 	movw	r6, #16831	; 0x41bf
 102759c:	fa0f f488 	sxth.w	r4, r8
 10275a0:	0165      	lsls	r5, r4, #5
 10275a2:	f105 0138 	add.w	r1, r5, #56	; 0x38
		EEPROM_writer( ST_23_TOT_DEMANDS_CUM_DEMAND_ADDR + i*NI_FMAT1_SIZE, &st_23_structure->tot_data_block.demands[i].cum_demand, NI_FMAT1_SIZE );
 10275a6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
		EEPROM_writer( ST_23_TOT_DEMANDS_EVENT_TIME_ADDR + i*TM_FMAT_SIZE, &st_23_structure->tot_data_block.demands[i].event_time[0], TM_FMAT_SIZE );
 10275aa:	4451      	add	r1, sl
 10275ac:	2204      	movs	r2, #4
 10275ae:	fb07 6008 	mla	r0, r7, r8, r6
		EEPROM_writer( ST_23_TOT_DEMANDS_CUM_DEMAND_ADDR + i*NI_FMAT1_SIZE, &st_23_structure->tot_data_block.demands[i].cum_demand, NI_FMAT1_SIZE );
 10275b2:	0064      	lsls	r4, r4, #1
		EEPROM_writer( ST_23_TOT_DEMANDS_EVENT_TIME_ADDR + i*TM_FMAT_SIZE, &st_23_structure->tot_data_block.demands[i].event_time[0], TM_FMAT_SIZE );
 10275b4:	47c8      	blx	r9
		EEPROM_writer( ST_23_TOT_DEMANDS_CUM_DEMAND_ADDR + i*NI_FMAT1_SIZE, &st_23_structure->tot_data_block.demands[i].cum_demand, NI_FMAT1_SIZE );
 10275b6:	f504 4083 	add.w	r0, r4, #16768	; 0x4180
 10275ba:	f105 0140 	add.w	r1, r5, #64	; 0x40
 10275be:	4451      	add	r1, sl
 10275c0:	2206      	movs	r2, #6
 10275c2:	3047      	adds	r0, #71	; 0x47
 10275c4:	47c8      	blx	r9
		EEPROM_writer( ST_23_TOT_DEMANDS_CONT_CUM_DEMAND_ADDR + i*NI_FMAT1_SIZE, &st_23_structure->tot_data_block.demands[i].cont_cum_demand, NI_FMAT1_SIZE );
 10275c6:	f504 4083 	add.w	r0, r4, #16768	; 0x4180
 10275ca:	f105 0148 	add.w	r1, r5, #72	; 0x48
 10275ce:	4451      	add	r1, sl
 10275d0:	2206      	movs	r2, #6
 10275d2:	3053      	adds	r0, #83	; 0x53
 10275d4:	47c8      	blx	r9
		EEPROM_writer( ST_23_TOT_DEMANDS_DEMAND_ADDR + i*NI_FMAT2_SIZE, &st_23_structure->tot_data_block.demands[i].demand[0], NI_FMAT2_SIZE );
 10275d6:	2205      	movs	r2, #5
 10275d8:	f105 0150 	add.w	r1, r5, #80	; 0x50
 10275dc:	f244 10df 	movw	r0, #16863	; 0x41df
 10275e0:	fb02 0008 	mla	r0, r2, r8, r0
 10275e4:	4451      	add	r1, sl
 10275e6:	47c8      	blx	r9
	for ( i = 0; i < st_21.nbr_demands; i++ ) {
 10275e8:	f108 0801 	add.w	r8, r8, #1
 10275ec:	f89b 3004 	ldrb.w	r3, [fp, #4]
 10275f0:	fa5f f888 	uxtb.w	r8, r8
 10275f4:	4543      	cmp	r3, r8
 10275f6:	d8d1      	bhi.n	102759c <REGS_APP_vClear_st_23+0x6c>
	for ( i = 0; i < st_21.nbr_coin_values; i++ ) {
 10275f8:	f89b 3005 	ldrb.w	r3, [fp, #5]
 10275fc:	b18b      	cbz	r3, 1027622 <REGS_APP_vClear_st_23+0xf2>
 10275fe:	2400      	movs	r4, #0
		EEPROM_writer( ST_23_TOT_COINCIDENTS_ADDR + i*NI_FMAT2_SIZE, &st_23_structure->tot_data_block.coincidents[i].coincident_values[0], NI_FMAT2_SIZE );
 1027600:	2605      	movs	r6, #5
 1027602:	f244 15e9 	movw	r5, #16873	; 0x41e9
 1027606:	f104 010f 	add.w	r1, r4, #15
 102760a:	fb06 5004 	mla	r0, r6, r4, r5
 102760e:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 1027612:	2205      	movs	r2, #5
 1027614:	47c8      	blx	r9
	for ( i = 0; i < st_21.nbr_coin_values; i++ ) {
 1027616:	3401      	adds	r4, #1
 1027618:	f89b 3005 	ldrb.w	r3, [fp, #5]
 102761c:	b2e4      	uxtb	r4, r4
 102761e:	42a3      	cmp	r3, r4
 1027620:	d8f1      	bhi.n	1027606 <REGS_APP_vClear_st_23+0xd6>
	for ( i = 0; i < st_21.nbr_tiers; i++ ) {
 1027622:	f89b 3007 	ldrb.w	r3, [fp, #7]
 1027626:	2b00      	cmp	r3, #0
 1027628:	d091      	beq.n	102754e <REGS_APP_vClear_st_23+0x1e>
 102762a:	2300      	movs	r3, #0
 102762c:	9305      	str	r3, [sp, #20]
		for ( j = 0; j < st_21.nbr_summations; j++ ) {
 102762e:	f89b 3003 	ldrb.w	r3, [fp, #3]
 1027632:	b1c3      	cbz	r3, 1027666 <REGS_APP_vClear_st_23+0x136>
 1027634:	9a05      	ldr	r2, [sp, #20]
 1027636:	ebc2 05c2 	rsb	r5, r2, r2, lsl #3
 102763a:	006d      	lsls	r5, r5, #1
 102763c:	2324      	movs	r3, #36	; 0x24
 102763e:	f244 11e9 	movw	r1, #16873	; 0x41e9
 1027642:	350f      	adds	r5, #15
 1027644:	fb13 1702 	smlabb	r7, r3, r2, r1
 1027648:	2400      	movs	r4, #0
			EEPROM_writer( ST_23_TIER_SUMMATIONS_ADDR + (i * NI_FMAT1_SIZE * MAX_NBR_SUMMATIONS) + (j * NI_FMAT1_SIZE), &st_23_structure->tier_data_block[i].summations[j], NI_FMAT1_SIZE );
 102764a:	2606      	movs	r6, #6
 102764c:	1929      	adds	r1, r5, r4
 102764e:	fb06 7004 	mla	r0, r6, r4, r7
 1027652:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 1027656:	2206      	movs	r2, #6
 1027658:	47c8      	blx	r9
		for ( j = 0; j < st_21.nbr_summations; j++ ) {
 102765a:	3401      	adds	r4, #1
 102765c:	f89b 3003 	ldrb.w	r3, [fp, #3]
 1027660:	b2e4      	uxtb	r4, r4
 1027662:	42a3      	cmp	r3, r4
 1027664:	d8f2      	bhi.n	102764c <REGS_APP_vClear_st_23+0x11c>
		for ( j = 0; j < st_21.nbr_demands; j++ ) {
 1027666:	f89b 3004 	ldrb.w	r3, [fp, #4]
 102766a:	2b00      	cmp	r3, #0
 102766c:	d04c      	beq.n	1027708 <REGS_APP_vClear_st_23+0x1d8>
 102766e:	9c05      	ldr	r4, [sp, #20]
 1027670:	b223      	sxth	r3, r4
 1027672:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 1027676:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 102767a:	011b      	lsls	r3, r3, #4
 102767c:	00bf      	lsls	r7, r7, #2
 102767e:	4618      	mov	r0, r3
 1027680:	9303      	str	r3, [sp, #12]
 1027682:	f507 4385 	add.w	r3, r7, #17024	; 0x4280
 1027686:	461d      	mov	r5, r3
 1027688:	461f      	mov	r7, r3
 102768a:	3519      	adds	r5, #25
 102768c:	f244 2179 	movw	r1, #17017	; 0x4279
 1027690:	220a      	movs	r2, #10
 1027692:	f244 23f9 	movw	r3, #17145	; 0x42f9
 1027696:	9501      	str	r5, [sp, #4]
 1027698:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 102769c:	f100 0578 	add.w	r5, r0, #120	; 0x78
 10276a0:	fb12 3304 	smlabb	r3, r2, r4, r3
 10276a4:	9504      	str	r5, [sp, #16]
 10276a6:	3749      	adds	r7, #73	; 0x49
 10276a8:	9100      	str	r1, [sp, #0]
 10276aa:	9302      	str	r3, [sp, #8]
 10276ac:	2500      	movs	r5, #0
 10276ae:	b22c      	sxth	r4, r5
 10276b0:	9b03      	ldr	r3, [sp, #12]
 10276b2:	0166      	lsls	r6, r4, #5
 10276b4:	eb06 0803 	add.w	r8, r6, r3
			EEPROM_writer( ST_23_TIER_DEMANDS_EVENT_TIME_ADDR + (i * TM_FMAT_SIZE * MAX_NBR_DEMANDS) + (j * TM_FMAT_SIZE), &st_23_structure->tier_data_block[i].demands[j].event_time[0], TM_FMAT_SIZE );
 10276b8:	9b00      	ldr	r3, [sp, #0]
 10276ba:	2204      	movs	r2, #4
 10276bc:	f108 01a8 	add.w	r1, r8, #168	; 0xa8
 10276c0:	fb02 3005 	mla	r0, r2, r5, r3
 10276c4:	4451      	add	r1, sl
 10276c6:	47c8      	blx	r9
			EEPROM_writer( ST_23_TIER_DEMANDS_CUM_DEMAND_ADDR + (i * NI_FMAT1_SIZE * MAX_NBR_DEMANDS) + (j * NI_FMAT1_SIZE), &st_23_structure->tier_data_block[i].demands[j].cum_demand, NI_FMAT1_SIZE );
 10276c8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 10276cc:	9b01      	ldr	r3, [sp, #4]
 10276ce:	0064      	lsls	r4, r4, #1
 10276d0:	f108 01b0 	add.w	r1, r8, #176	; 0xb0
 10276d4:	4451      	add	r1, sl
 10276d6:	18e0      	adds	r0, r4, r3
 10276d8:	2206      	movs	r2, #6
 10276da:	47c8      	blx	r9
			EEPROM_writer( ST_23_TIER_DEMANDS_CONT_CUM_DEMAND_ADDR + (i * NI_FMAT1_SIZE * MAX_NBR_DEMANDS) + (j * NI_FMAT1_SIZE), &st_23_structure->tier_data_block[i].demands[j].cont_cum_demand, NI_FMAT1_SIZE );
 10276dc:	9b04      	ldr	r3, [sp, #16]
 10276de:	f106 0140 	add.w	r1, r6, #64	; 0x40
 10276e2:	4419      	add	r1, r3
 10276e4:	4451      	add	r1, sl
 10276e6:	2206      	movs	r2, #6
 10276e8:	19e0      	adds	r0, r4, r7
 10276ea:	47c8      	blx	r9
			EEPROM_writer( ST_23_TIER_DEMANDS_DEMAND_ADDR + (i * NI_FMAT2_SIZE * MAX_NBR_DEMANDS) + (j * NI_FMAT2_SIZE), &st_23_structure->tier_data_block[i].demands[j].demand[0], NI_FMAT2_SIZE );
 10276ec:	9b02      	ldr	r3, [sp, #8]
 10276ee:	2205      	movs	r2, #5
 10276f0:	f108 01c0 	add.w	r1, r8, #192	; 0xc0
 10276f4:	fb02 3005 	mla	r0, r2, r5, r3
 10276f8:	4451      	add	r1, sl
 10276fa:	47c8      	blx	r9
		for ( j = 0; j < st_21.nbr_demands; j++ ) {
 10276fc:	3501      	adds	r5, #1
 10276fe:	f89b 3004 	ldrb.w	r3, [fp, #4]
 1027702:	b2ed      	uxtb	r5, r5
 1027704:	42ab      	cmp	r3, r5
 1027706:	d8d2      	bhi.n	10276ae <REGS_APP_vClear_st_23+0x17e>
		for ( j = 0; j < st_21.nbr_coin_values; j++ ) {
 1027708:	f89b 3005 	ldrb.w	r3, [fp, #5]
 102770c:	b1b3      	cbz	r3, 102773c <REGS_APP_vClear_st_23+0x20c>
			EEPROM_writer( ST_23_TIER_COINCIDENTS_ADDR + (i * NI_FMAT2_SIZE * MAX_NBR_COIN_VALUES) + (j * NI_FMAT2_SIZE), &st_23_structure->tier_data_block[i].coincidents[j].coincident_values[0], NI_FMAT2_SIZE );
 102770e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 1027712:	250e      	movs	r5, #14
 1027714:	231d      	movs	r3, #29
 1027716:	fb15 3502 	smlabb	r5, r5, r2, r3
		for ( j = 0; j < st_21.nbr_coin_values; j++ ) {
 102771a:	2400      	movs	r4, #0
			EEPROM_writer( ST_23_TIER_COINCIDENTS_ADDR + (i * NI_FMAT2_SIZE * MAX_NBR_COIN_VALUES) + (j * NI_FMAT2_SIZE), &st_23_structure->tier_data_block[i].coincidents[j].coincident_values[0], NI_FMAT2_SIZE );
 102771c:	2705      	movs	r7, #5
 102771e:	f244 3621 	movw	r6, #17185	; 0x4321
 1027722:	1929      	adds	r1, r5, r4
 1027724:	fb07 6004 	mla	r0, r7, r4, r6
 1027728:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 102772c:	2205      	movs	r2, #5
 102772e:	47c8      	blx	r9
		for ( j = 0; j < st_21.nbr_coin_values; j++ ) {
 1027730:	3401      	adds	r4, #1
 1027732:	f89b 3005 	ldrb.w	r3, [fp, #5]
 1027736:	b2e4      	uxtb	r4, r4
 1027738:	42a3      	cmp	r3, r4
 102773a:	d8f2      	bhi.n	1027722 <REGS_APP_vClear_st_23+0x1f2>
	for ( i = 0; i < st_21.nbr_tiers; i++ ) {
 102773c:	9a05      	ldr	r2, [sp, #20]
 102773e:	f89b 3007 	ldrb.w	r3, [fp, #7]
 1027742:	3201      	adds	r2, #1
 1027744:	b2d2      	uxtb	r2, r2
 1027746:	4293      	cmp	r3, r2
 1027748:	9205      	str	r2, [sp, #20]
 102774a:	f63f af70 	bhi.w	102762e <REGS_APP_vClear_st_23+0xfe>
}
 102774e:	b007      	add	sp, #28
 1027750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1027754:	01030b71 	.word	0x01030b71
 1027758:	20016c2c 	.word	0x20016c2c
 102775c:	20007998 	.word	0x20007998
 1027760:	2000797c 	.word	0x2000797c
 1027764:	01017509 	.word	0x01017509

01027768 <REGS_APP_bSt_23_execute_table_reading>:
bool REGS_APP_bSt_23_execute_table_reading(uint8_t *table_buffer) {
 1027768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if ( (st_21.reg_func1_flags & DEMAND_RESET_CTR_FLAG_bm) == DEMAND_RESET_CTR_FLAG_bm) {
 102776c:	f8df 924c 	ldr.w	r9, [pc, #588]	; 10279bc <REGS_APP_bSt_23_execute_table_reading+0x254>
 1027770:	f899 3000 	ldrb.w	r3, [r9]
 1027774:	f013 0404 	ands.w	r4, r3, #4
bool REGS_APP_bSt_23_execute_table_reading(uint8_t *table_buffer) {
 1027778:	b083      	sub	sp, #12
 102777a:	4605      	mov	r5, r0
	if ( (st_21.reg_func1_flags & DEMAND_RESET_CTR_FLAG_bm) == DEMAND_RESET_CTR_FLAG_bm) {
 102777c:	d003      	beq.n	1027786 <REGS_APP_bSt_23_execute_table_reading+0x1e>
		table_buffer[k++] = st_23.nbr_demand_resets;
 102777e:	4e8e      	ldr	r6, [pc, #568]	; (10279b8 <REGS_APP_bSt_23_execute_table_reading+0x250>)
 1027780:	7833      	ldrb	r3, [r6, #0]
 1027782:	7003      	strb	r3, [r0, #0]
 1027784:	2401      	movs	r4, #1
	for ( i = 0; i < st_21.nbr_summations; i++ ) {
 1027786:	f899 3003 	ldrb.w	r3, [r9, #3]
 102778a:	b1c3      	cbz	r3, 10277be <REGS_APP_bSt_23_execute_table_reading+0x56>
 102778c:	2300      	movs	r3, #0
 102778e:	4e8a      	ldr	r6, [pc, #552]	; (10279b8 <REGS_APP_bSt_23_execute_table_reading+0x250>)
 1027790:	f8df 822c 	ldr.w	r8, [pc, #556]	; 10279c0 <REGS_APP_bSt_23_execute_table_reading+0x258>
 1027794:	461f      	mov	r7, r3
		data = (uint64_t)st_23.tot_data_block.summations[i];
 1027796:	3701      	adds	r7, #1
 1027798:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 102779c:	e9d3 0100 	ldrd	r0, r1, [r3]
 10277a0:	47c0      	blx	r8
		memcpy(&table_buffer[k], &data, NI_FMAT1_SIZE);
 10277a2:	5128      	str	r0, [r5, r4]
	for ( i = 0; i < st_21.nbr_summations; i++ ) {
 10277a4:	f899 3003 	ldrb.w	r3, [r9, #3]
		data = (uint64_t)st_23.tot_data_block.summations[i];
 10277a8:	9101      	str	r1, [sp, #4]
		memcpy(&table_buffer[k], &data, NI_FMAT1_SIZE);
 10277aa:	192a      	adds	r2, r5, r4
	for ( i = 0; i < st_21.nbr_summations; i++ ) {
 10277ac:	b2ff      	uxtb	r7, r7
		memcpy(&table_buffer[k], &data, NI_FMAT1_SIZE);
 10277ae:	f8bd 1004 	ldrh.w	r1, [sp, #4]
		data = (uint64_t)st_23.tot_data_block.summations[i];
 10277b2:	9000      	str	r0, [sp, #0]
		k += NI_FMAT1_SIZE;
 10277b4:	3406      	adds	r4, #6
	for ( i = 0; i < st_21.nbr_summations; i++ ) {
 10277b6:	42bb      	cmp	r3, r7
		memcpy(&table_buffer[k], &data, NI_FMAT1_SIZE);
 10277b8:	8091      	strh	r1, [r2, #4]
		k += NI_FMAT1_SIZE;
 10277ba:	b2a4      	uxth	r4, r4
	for ( i = 0; i < st_21.nbr_summations; i++ ) {
 10277bc:	d8eb      	bhi.n	1027796 <REGS_APP_bSt_23_execute_table_reading+0x2e>
 	for ( i = 0; i < st_21.nbr_demands; i++ ) {				 
 10277be:	f899 3004 	ldrb.w	r3, [r9, #4]
 10277c2:	2b00      	cmp	r3, #0
 10277c4:	d042      	beq.n	102784c <REGS_APP_bSt_23_execute_table_reading+0xe4>
 10277c6:	4e7c      	ldr	r6, [pc, #496]	; (10279b8 <REGS_APP_bSt_23_execute_table_reading+0x250>)
 10277c8:	2300      	movs	r3, #0
 10277ca:	e00e      	b.n	10277ea <REGS_APP_bSt_23_execute_table_reading+0x82>
		if ( (st_21.reg_func1_flags & CONT_CUM_DEMAND_FLAG_bm) == CONT_CUM_DEMAND_FLAG_bm ) {
 10277cc:	0692      	lsls	r2, r2, #26
 10277ce:	d432      	bmi.n	1027836 <REGS_APP_bSt_23_execute_table_reading+0xce>
		memcpy(&table_buffer[k], &st_23.tot_data_block.demands[i].demand[0], NI_FMAT2_SIZE);	
 10277d0:	5870      	ldr	r0, [r6, r1]
 10277d2:	5128      	str	r0, [r5, r4]
 10277d4:	192a      	adds	r2, r5, r4
 10277d6:	7939      	ldrb	r1, [r7, #4]
 10277d8:	7111      	strb	r1, [r2, #4]
 	for ( i = 0; i < st_21.nbr_demands; i++ ) {				 
 10277da:	f899 2004 	ldrb.w	r2, [r9, #4]
 10277de:	fa5f f38e 	uxtb.w	r3, lr
		k += NI_FMAT2_SIZE;
 10277e2:	3405      	adds	r4, #5
 	for ( i = 0; i < st_21.nbr_demands; i++ ) {				 
 10277e4:	429a      	cmp	r2, r3
		k += NI_FMAT2_SIZE;
 10277e6:	b2a4      	uxth	r4, r4
 	for ( i = 0; i < st_21.nbr_demands; i++ ) {				 
 10277e8:	d930      	bls.n	102784c <REGS_APP_bSt_23_execute_table_reading+0xe4>
		if ( (st_21.reg_func1_flags & DATE_TIME_FIELD_FLAG_bm) == DATE_TIME_FIELD_FLAG_bm ) {
 10277ea:	f899 2000 	ldrb.w	r2, [r9]
			memcpy(&table_buffer[k], &st_23.tot_data_block.demands[i].event_time[0], TM_FMAT_SIZE);
 10277ee:	0159      	lsls	r1, r3, #5
		if ( (st_21.reg_func1_flags & DATE_TIME_FIELD_FLAG_bm) == DATE_TIME_FIELD_FLAG_bm ) {
 10277f0:	0797      	lsls	r7, r2, #30
			memcpy(&table_buffer[k], &st_23.tot_data_block.demands[i].event_time[0], TM_FMAT_SIZE);
 10277f2:	eb06 0001 	add.w	r0, r6, r1
		if ( (st_21.reg_func1_flags & DATE_TIME_FIELD_FLAG_bm) == DATE_TIME_FIELD_FLAG_bm ) {
 10277f6:	d505      	bpl.n	1027804 <REGS_APP_bSt_23_execute_table_reading+0x9c>
			memcpy(&table_buffer[k], &st_23.tot_data_block.demands[i].event_time[0], TM_FMAT_SIZE);
 10277f8:	6b82      	ldr	r2, [r0, #56]	; 0x38
 10277fa:	512a      	str	r2, [r5, r4]
			k += TM_FMAT_SIZE;
 10277fc:	3404      	adds	r4, #4
 10277fe:	f899 2000 	ldrb.w	r2, [r9]
 1027802:	b2a4      	uxth	r4, r4
		memcpy(&table_buffer[k], &st_23.tot_data_block.demands[i].demand[0], NI_FMAT2_SIZE);	
 1027804:	3150      	adds	r1, #80	; 0x50
		if ( (st_21.reg_func1_flags & CUM_DEMAND_FLAG_bm) == CUM_DEMAND_FLAG_bm ) {
 1027806:	06d0      	lsls	r0, r2, #27
		memcpy(&table_buffer[k], &st_23.tot_data_block.demands[i].demand[0], NI_FMAT2_SIZE);	
 1027808:	eb06 0701 	add.w	r7, r6, r1
 	for ( i = 0; i < st_21.nbr_demands; i++ ) {				 
 102780c:	f103 0e01 	add.w	lr, r3, #1
		if ( (st_21.reg_func1_flags & CUM_DEMAND_FLAG_bm) == CUM_DEMAND_FLAG_bm ) {
 1027810:	d5dc      	bpl.n	10277cc <REGS_APP_bSt_23_execute_table_reading+0x64>
			memcpy(&table_buffer[k], &st_23.tot_data_block.demands[i].cum_demand, NI_FMAT1_SIZE);															
 1027812:	1c9a      	adds	r2, r3, #2
 1027814:	0152      	lsls	r2, r2, #5
 1027816:	eb06 0c02 	add.w	ip, r6, r2
 102781a:	58b0      	ldr	r0, [r6, r2]
 102781c:	5128      	str	r0, [r5, r4]
 102781e:	f899 2000 	ldrb.w	r2, [r9]
 1027822:	f8bc c004 	ldrh.w	ip, [ip, #4]
 1027826:	1928      	adds	r0, r5, r4
		if ( (st_21.reg_func1_flags & CONT_CUM_DEMAND_FLAG_bm) == CONT_CUM_DEMAND_FLAG_bm ) {
 1027828:	0692      	lsls	r2, r2, #26
			k += NI_FMAT1_SIZE;
 102782a:	f104 0406 	add.w	r4, r4, #6
			memcpy(&table_buffer[k], &st_23.tot_data_block.demands[i].cum_demand, NI_FMAT1_SIZE);															
 102782e:	f8a0 c004 	strh.w	ip, [r0, #4]
			k += NI_FMAT1_SIZE;
 1027832:	b2a4      	uxth	r4, r4
		if ( (st_21.reg_func1_flags & CONT_CUM_DEMAND_FLAG_bm) == CONT_CUM_DEMAND_FLAG_bm ) {
 1027834:	d5cc      	bpl.n	10277d0 <REGS_APP_bSt_23_execute_table_reading+0x68>
			memcpy(&table_buffer[k], &st_23.tot_data_block.demands[i].cont_cum_demand, NI_FMAT1_SIZE);															
 1027836:	015b      	lsls	r3, r3, #5
 1027838:	3348      	adds	r3, #72	; 0x48
 102783a:	18f2      	adds	r2, r6, r3
 102783c:	58f0      	ldr	r0, [r6, r3]
 102783e:	5128      	str	r0, [r5, r4]
 1027840:	192b      	adds	r3, r5, r4
 1027842:	8892      	ldrh	r2, [r2, #4]
 1027844:	809a      	strh	r2, [r3, #4]
			k += NI_FMAT1_SIZE;
 1027846:	3406      	adds	r4, #6
 1027848:	b2a4      	uxth	r4, r4
 102784a:	e7c1      	b.n	10277d0 <REGS_APP_bSt_23_execute_table_reading+0x68>
	for ( i = 0; i < st_21.nbr_coin_values; i++ ) {
 102784c:	f899 3005 	ldrb.w	r3, [r9, #5]
 1027850:	b19b      	cbz	r3, 102787a <REGS_APP_bSt_23_execute_table_reading+0x112>
 1027852:	4e59      	ldr	r6, [pc, #356]	; (10279b8 <REGS_APP_bSt_23_execute_table_reading+0x250>)
 1027854:	2300      	movs	r3, #0
		memcpy(&table_buffer[k], &st_23.tot_data_block.coincidents[i], NI_FMAT2_SIZE);
 1027856:	f103 020f 	add.w	r2, r3, #15
 102785a:	eb06 01c2 	add.w	r1, r6, r2, lsl #3
 102785e:	f856 0032 	ldr.w	r0, [r6, r2, lsl #3]
 1027862:	5128      	str	r0, [r5, r4]
 1027864:	192a      	adds	r2, r5, r4
 1027866:	7909      	ldrb	r1, [r1, #4]
 1027868:	7111      	strb	r1, [r2, #4]
	for ( i = 0; i < st_21.nbr_coin_values; i++ ) {
 102786a:	3301      	adds	r3, #1
 102786c:	f899 2005 	ldrb.w	r2, [r9, #5]
 1027870:	b2db      	uxtb	r3, r3
		k += NI_FMAT2_SIZE;
 1027872:	3405      	adds	r4, #5
	for ( i = 0; i < st_21.nbr_coin_values; i++ ) {
 1027874:	429a      	cmp	r2, r3
		k += NI_FMAT2_SIZE;
 1027876:	b2a4      	uxth	r4, r4
	for ( i = 0; i < st_21.nbr_coin_values; i++ ) {
 1027878:	d8ed      	bhi.n	1027856 <REGS_APP_bSt_23_execute_table_reading+0xee>
	for ( j = 0; j < st_21.nbr_tiers; j++ ) {
 102787a:	f899 3007 	ldrb.w	r3, [r9, #7]
 102787e:	2b00      	cmp	r3, #0
 1027880:	f000 8095 	beq.w	10279ae <REGS_APP_bSt_23_execute_table_reading+0x246>
 1027884:	4e4c      	ldr	r6, [pc, #304]	; (10279b8 <REGS_APP_bSt_23_execute_table_reading+0x250>)
 1027886:	f8df 8138 	ldr.w	r8, [pc, #312]	; 10279c0 <REGS_APP_bSt_23_execute_table_reading+0x258>
 102788a:	2700      	movs	r7, #0
		for ( i = 0; i < st_21.nbr_summations; i++ ) {
 102788c:	f899 3003 	ldrb.w	r3, [r9, #3]
 1027890:	b1eb      	cbz	r3, 10278ce <REGS_APP_bSt_23_execute_table_reading+0x166>
			data = (uint64_t)(st_23.tier_data_block[j].summations[i]);
 1027892:	ebc7 0bc7 	rsb	fp, r7, r7, lsl #3
 1027896:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
		for ( i = 0; i < st_21.nbr_summations; i++ ) {
 102789a:	f04f 0a00 	mov.w	sl, #0
			data = (uint64_t)(st_23.tier_data_block[j].summations[i]);
 102789e:	eb0b 030a 	add.w	r3, fp, sl
 10278a2:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 10278a6:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 10278aa:	47c0      	blx	r8
			memcpy(&table_buffer[k], &data, NI_FMAT1_SIZE);								
 10278ac:	5128      	str	r0, [r5, r4]
		for ( i = 0; i < st_21.nbr_summations; i++ ) {
 10278ae:	f10a 0a01 	add.w	sl, sl, #1
 10278b2:	f899 3003 	ldrb.w	r3, [r9, #3]
			data = (uint64_t)(st_23.tier_data_block[j].summations[i]);
 10278b6:	9101      	str	r1, [sp, #4]
			memcpy(&table_buffer[k], &data, NI_FMAT1_SIZE);								
 10278b8:	192a      	adds	r2, r5, r4
		for ( i = 0; i < st_21.nbr_summations; i++ ) {
 10278ba:	fa5f fa8a 	uxtb.w	sl, sl
			memcpy(&table_buffer[k], &data, NI_FMAT1_SIZE);								
 10278be:	f8bd 1004 	ldrh.w	r1, [sp, #4]
			data = (uint64_t)(st_23.tier_data_block[j].summations[i]);
 10278c2:	9000      	str	r0, [sp, #0]
			k += NI_FMAT1_SIZE;
 10278c4:	3406      	adds	r4, #6
		for ( i = 0; i < st_21.nbr_summations; i++ ) {
 10278c6:	4553      	cmp	r3, sl
			memcpy(&table_buffer[k], &data, NI_FMAT1_SIZE);								
 10278c8:	8091      	strh	r1, [r2, #4]
			k += NI_FMAT1_SIZE;
 10278ca:	b2a4      	uxth	r4, r4
		for ( i = 0; i < st_21.nbr_summations; i++ ) {
 10278cc:	d8e7      	bhi.n	102789e <REGS_APP_bSt_23_execute_table_reading+0x136>
		for ( i = 0; i < st_21.nbr_demands; i++ ) {
 10278ce:	f899 3004 	ldrb.w	r3, [r9, #4]
 10278d2:	2b00      	cmp	r3, #0
 10278d4:	d04b      	beq.n	102796e <REGS_APP_bSt_23_execute_table_reading+0x206>
 10278d6:	ebc7 0ac7 	rsb	sl, r7, r7, lsl #3
 10278da:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
				memcpy(&table_buffer[k], &st_23.tier_data_block[j].demands[i].cont_cum_demand, NI_FMAT1_SIZE);													
 10278de:	f10a 0b78 	add.w	fp, sl, #120	; 0x78
				memcpy(&table_buffer[k], &st_23.tier_data_block[j].demands[i].event_time[0], TM_FMAT_SIZE);						  
 10278e2:	46d4      	mov	ip, sl
		for ( i = 0; i < st_21.nbr_demands; i++ ) {
 10278e4:	2200      	movs	r2, #0
 10278e6:	e013      	b.n	1027910 <REGS_APP_bSt_23_execute_table_reading+0x1a8>
			memcpy(&table_buffer[k], &st_23.tier_data_block[j].demands[i].demand[0], NI_FMAT2_SIZE);															
 10278e8:	33c0      	adds	r3, #192	; 0xc0
			if ( (st_21.reg_func1_flags & CONT_CUM_DEMAND_FLAG_bm) == CONT_CUM_DEMAND_FLAG_bm ) {
 10278ea:	0680      	lsls	r0, r0, #26
			memcpy(&table_buffer[k], &st_23.tier_data_block[j].demands[i].demand[0], NI_FMAT2_SIZE);															
 10278ec:	eb06 0103 	add.w	r1, r6, r3
		for ( i = 0; i < st_21.nbr_demands; i++ ) {
 10278f0:	f102 0e01 	add.w	lr, r2, #1
			if ( (st_21.reg_func1_flags & CONT_CUM_DEMAND_FLAG_bm) == CONT_CUM_DEMAND_FLAG_bm ) {
 10278f4:	d42f      	bmi.n	1027956 <REGS_APP_bSt_23_execute_table_reading+0x1ee>
			memcpy(&table_buffer[k], &st_23.tier_data_block[j].demands[i].demand[0], NI_FMAT2_SIZE);															
 10278f6:	58f0      	ldr	r0, [r6, r3]
 10278f8:	5128      	str	r0, [r5, r4]
 10278fa:	192b      	adds	r3, r5, r4
 10278fc:	7909      	ldrb	r1, [r1, #4]
 10278fe:	7119      	strb	r1, [r3, #4]
		for ( i = 0; i < st_21.nbr_demands; i++ ) {
 1027900:	f899 3004 	ldrb.w	r3, [r9, #4]
 1027904:	fa5f f28e 	uxtb.w	r2, lr
			k += NI_FMAT2_SIZE;
 1027908:	3405      	adds	r4, #5
		for ( i = 0; i < st_21.nbr_demands; i++ ) {
 102790a:	4293      	cmp	r3, r2
			k += NI_FMAT2_SIZE;
 102790c:	b2a4      	uxth	r4, r4
		for ( i = 0; i < st_21.nbr_demands; i++ ) {
 102790e:	d92e      	bls.n	102796e <REGS_APP_bSt_23_execute_table_reading+0x206>
			if ( (st_21.reg_func1_flags & DATE_TIME_FIELD_FLAG_bm) == DATE_TIME_FIELD_FLAG_bm ) {
 1027910:	f899 0000 	ldrb.w	r0, [r9]
				memcpy(&table_buffer[k], &st_23.tier_data_block[j].demands[i].event_time[0], TM_FMAT_SIZE);						  
 1027914:	0153      	lsls	r3, r2, #5
 1027916:	eb03 010c 	add.w	r1, r3, ip
			if ( (st_21.reg_func1_flags & DATE_TIME_FIELD_FLAG_bm) == DATE_TIME_FIELD_FLAG_bm ) {
 102791a:	f010 0f02 	tst.w	r0, #2
				memcpy(&table_buffer[k], &st_23.tier_data_block[j].demands[i].event_time[0], TM_FMAT_SIZE);						  
 102791e:	4431      	add	r1, r6
			if ( (st_21.reg_func1_flags & DATE_TIME_FIELD_FLAG_bm) == DATE_TIME_FIELD_FLAG_bm ) {
 1027920:	d006      	beq.n	1027930 <REGS_APP_bSt_23_execute_table_reading+0x1c8>
				memcpy(&table_buffer[k], &st_23.tier_data_block[j].demands[i].event_time[0], TM_FMAT_SIZE);						  
 1027922:	f8d1 10a8 	ldr.w	r1, [r1, #168]	; 0xa8
 1027926:	5129      	str	r1, [r5, r4]
				k += TM_FMAT_SIZE;
 1027928:	3404      	adds	r4, #4
 102792a:	f899 0000 	ldrb.w	r0, [r9]
 102792e:	b2a4      	uxth	r4, r4
			if ( (st_21.reg_func1_flags & CUM_DEMAND_FLAG_bm) == CUM_DEMAND_FLAG_bm ) {
 1027930:	06c1      	lsls	r1, r0, #27
 1027932:	4453      	add	r3, sl
 1027934:	d5d8      	bpl.n	10278e8 <REGS_APP_bSt_23_execute_table_reading+0x180>
				memcpy(&table_buffer[k], &st_23.tier_data_block[j].demands[i].cum_demand, NI_FMAT1_SIZE);													
 1027936:	f103 01b0 	add.w	r1, r3, #176	; 0xb0
 102793a:	eb06 0e01 	add.w	lr, r6, r1
 102793e:	5870      	ldr	r0, [r6, r1]
 1027940:	5128      	str	r0, [r5, r4]
 1027942:	1929      	adds	r1, r5, r4
 1027944:	f8be e004 	ldrh.w	lr, [lr, #4]
 1027948:	f899 0000 	ldrb.w	r0, [r9]
 102794c:	f8a1 e004 	strh.w	lr, [r1, #4]
				k += NI_FMAT1_SIZE;
 1027950:	3406      	adds	r4, #6
 1027952:	b2a4      	uxth	r4, r4
 1027954:	e7c8      	b.n	10278e8 <REGS_APP_bSt_23_execute_table_reading+0x180>
				memcpy(&table_buffer[k], &st_23.tier_data_block[j].demands[i].cont_cum_demand, NI_FMAT1_SIZE);													
 1027956:	3202      	adds	r2, #2
 1027958:	eb0b 1042 	add.w	r0, fp, r2, lsl #5
 102795c:	1832      	adds	r2, r6, r0
 102795e:	5830      	ldr	r0, [r6, r0]
 1027960:	5128      	str	r0, [r5, r4]
 1027962:	1928      	adds	r0, r5, r4
 1027964:	8892      	ldrh	r2, [r2, #4]
 1027966:	8082      	strh	r2, [r0, #4]
				k += NI_FMAT1_SIZE;
 1027968:	3406      	adds	r4, #6
 102796a:	b2a4      	uxth	r4, r4
 102796c:	e7c3      	b.n	10278f6 <REGS_APP_bSt_23_execute_table_reading+0x18e>
		for ( i = 0; i < st_21.nbr_coin_values; i++ ) {
 102796e:	f899 3005 	ldrb.w	r3, [r9, #5]
 1027972:	b1ab      	cbz	r3, 10279a0 <REGS_APP_bSt_23_execute_table_reading+0x238>
			memcpy(&table_buffer[k], &st_23.tier_data_block[j].coincidents[i], NI_FMAT2_SIZE);														
 1027974:	220e      	movs	r2, #14
 1027976:	211d      	movs	r1, #29
		for ( i = 0; i < st_21.nbr_coin_values; i++ ) {
 1027978:	2300      	movs	r3, #0
			memcpy(&table_buffer[k], &st_23.tier_data_block[j].coincidents[i], NI_FMAT2_SIZE);														
 102797a:	fb12 1107 	smlabb	r1, r2, r7, r1
 102797e:	18ca      	adds	r2, r1, r3
		for ( i = 0; i < st_21.nbr_coin_values; i++ ) {
 1027980:	3301      	adds	r3, #1
			memcpy(&table_buffer[k], &st_23.tier_data_block[j].coincidents[i], NI_FMAT2_SIZE);														
 1027982:	f856 0032 	ldr.w	r0, [r6, r2, lsl #3]
 1027986:	5128      	str	r0, [r5, r4]
 1027988:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 102798c:	1928      	adds	r0, r5, r4
 102798e:	7912      	ldrb	r2, [r2, #4]
 1027990:	7102      	strb	r2, [r0, #4]
		for ( i = 0; i < st_21.nbr_coin_values; i++ ) {
 1027992:	f899 2005 	ldrb.w	r2, [r9, #5]
 1027996:	b2db      	uxtb	r3, r3
			k += NI_FMAT2_SIZE;
 1027998:	3405      	adds	r4, #5
		for ( i = 0; i < st_21.nbr_coin_values; i++ ) {
 102799a:	429a      	cmp	r2, r3
			k += NI_FMAT2_SIZE;
 102799c:	b2a4      	uxth	r4, r4
		for ( i = 0; i < st_21.nbr_coin_values; i++ ) {
 102799e:	d8ee      	bhi.n	102797e <REGS_APP_bSt_23_execute_table_reading+0x216>
	for ( j = 0; j < st_21.nbr_tiers; j++ ) {
 10279a0:	3701      	adds	r7, #1
 10279a2:	f899 3007 	ldrb.w	r3, [r9, #7]
 10279a6:	b2ff      	uxtb	r7, r7
 10279a8:	42bb      	cmp	r3, r7
 10279aa:	f63f af6f 	bhi.w	102788c <REGS_APP_bSt_23_execute_table_reading+0x124>
}
 10279ae:	2001      	movs	r0, #1
 10279b0:	b003      	add	sp, #12
 10279b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 10279b6:	bf00      	nop
 10279b8:	20007998 	.word	0x20007998
 10279bc:	2000797c 	.word	0x2000797c
 10279c0:	01030659 	.word	0x01030659

010279c4 <REGS_APP_bSt_23_execute_table_writing>:
bool REGS_APP_bSt_23_execute_table_writing(uint8_t *table_buffer) {
 10279c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 10279c8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
	memset( &st_23_temp, 0, sizeof(st_23_temp) ); 
 10279cc:	4b9a      	ldr	r3, [pc, #616]	; (1027c38 <REGS_APP_bSt_23_execute_table_writing+0x274>)
bool REGS_APP_bSt_23_execute_table_writing(uint8_t *table_buffer) {
 10279ce:	4605      	mov	r5, r0
	memset( &st_23_temp, 0, sizeof(st_23_temp) ); 
 10279d0:	f44f 720e 	mov.w	r2, #568	; 0x238
 10279d4:	a80a      	add	r0, sp, #40	; 0x28
 10279d6:	2100      	movs	r1, #0
 10279d8:	4798      	blx	r3
	if ( (st_21.reg_func1_flags & DEMAND_RESET_CTR_FLAG_bm) == DEMAND_RESET_CTR_FLAG_bm) {
 10279da:	4b98      	ldr	r3, [pc, #608]	; (1027c3c <REGS_APP_bSt_23_execute_table_writing+0x278>)
 10279dc:	781b      	ldrb	r3, [r3, #0]
 10279de:	9302      	str	r3, [sp, #8]
 10279e0:	f013 0404 	ands.w	r4, r3, #4
 10279e4:	d003      	beq.n	10279ee <REGS_APP_bSt_23_execute_table_writing+0x2a>
		st_23_temp.nbr_demand_resets = table_buffer[k++];
 10279e6:	782b      	ldrb	r3, [r5, #0]
 10279e8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 10279ec:	2401      	movs	r4, #1
	for ( i = 0; i < st_21.nbr_summations; i++ ) {
 10279ee:	4b93      	ldr	r3, [pc, #588]	; (1027c3c <REGS_APP_bSt_23_execute_table_writing+0x278>)
 10279f0:	78db      	ldrb	r3, [r3, #3]
 10279f2:	9303      	str	r3, [sp, #12]
 10279f4:	b31b      	cbz	r3, 1027a3e <REGS_APP_bSt_23_execute_table_writing+0x7a>
 10279f6:	3b01      	subs	r3, #1
 10279f8:	b2db      	uxtb	r3, r3
 10279fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 10279fe:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 1027a02:	f10a 0a06 	add.w	sl, sl, #6
 1027a06:	f8df b238 	ldr.w	fp, [pc, #568]	; 1027c40 <REGS_APP_bSt_23_execute_table_writing+0x27c>
 1027a0a:	fa1f fa8a 	uxth.w	sl, sl
 1027a0e:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 1027a12:	f10d 0920 	add.w	r9, sp, #32
		data = 0;
 1027a16:	2600      	movs	r6, #0
 1027a18:	2700      	movs	r7, #0
		memcpy(&data, &table_buffer[k], NI_FMAT1_SIZE);
 1027a1a:	192b      	adds	r3, r5, r4
		data = 0;
 1027a1c:	e9c9 6700 	strd	r6, r7, [r9]
		memcpy(&data, &table_buffer[k], NI_FMAT1_SIZE);
 1027a20:	6818      	ldr	r0, [r3, #0]
 1027a22:	889b      	ldrh	r3, [r3, #4]
 1027a24:	f8c9 0000 	str.w	r0, [r9]
 1027a28:	f8a9 3004 	strh.w	r3, [r9, #4]
		st_23_temp.tot_data_block.summations[i] = (double)data;
 1027a2c:	e9d9 0100 	ldrd	r0, r1, [r9]
 1027a30:	47d8      	blx	fp
		k += NI_FMAT1_SIZE;
 1027a32:	3406      	adds	r4, #6
 1027a34:	b2a4      	uxth	r4, r4
	for ( i = 0; i < st_21.nbr_summations; i++ ) {
 1027a36:	4554      	cmp	r4, sl
		st_23_temp.tot_data_block.summations[i] = (double)data;
 1027a38:	e8e8 0102 	strd	r0, r1, [r8], #8
	for ( i = 0; i < st_21.nbr_summations; i++ ) {
 1027a3c:	d1ed      	bne.n	1027a1a <REGS_APP_bSt_23_execute_table_writing+0x56>
	for ( i = 0; i < st_21.nbr_demands; i++ ) {				 
 1027a3e:	4b7f      	ldr	r3, [pc, #508]	; (1027c3c <REGS_APP_bSt_23_execute_table_writing+0x278>)
 1027a40:	f893 b004 	ldrb.w	fp, [r3, #4]
 1027a44:	f1bb 0f00 	cmp.w	fp, #0
 1027a48:	d026      	beq.n	1027a98 <REGS_APP_bSt_23_execute_table_writing+0xd4>
 1027a4a:	9a02      	ldr	r2, [sp, #8]
 1027a4c:	f002 0320 	and.w	r3, r2, #32
 1027a50:	f002 0a02 	and.w	sl, r2, #2
 1027a54:	f002 0c10 	and.w	ip, r2, #16
 1027a58:	469e      	mov	lr, r3
 1027a5a:	aa1e      	add	r2, sp, #120	; 0x78
 1027a5c:	2100      	movs	r1, #0
 1027a5e:	4653      	mov	r3, sl
 1027a60:	3101      	adds	r1, #1
 1027a62:	b2cf      	uxtb	r7, r1
		if ( (st_21.reg_func1_flags & DATE_TIME_FIELD_FLAG_bm) == DATE_TIME_FIELD_FLAG_bm ) {	
 1027a64:	b123      	cbz	r3, 1027a70 <REGS_APP_bSt_23_execute_table_writing+0xac>
			memcpy(&st_23_temp.tot_data_block.demands[i].event_time[0], &table_buffer[k], TM_FMAT_SIZE);
 1027a66:	5928      	ldr	r0, [r5, r4]
 1027a68:	f842 0c18 	str.w	r0, [r2, #-24]
			k += TM_FMAT_SIZE;
 1027a6c:	3404      	adds	r4, #4
 1027a6e:	b2a4      	uxth	r4, r4
		if ( (st_21.reg_func1_flags & CUM_DEMAND_FLAG_bm) == CUM_DEMAND_FLAG_bm ) {
 1027a70:	f1bc 0f00 	cmp.w	ip, #0
 1027a74:	f040 80b3 	bne.w	1027bde <REGS_APP_bSt_23_execute_table_writing+0x21a>
		if ( (st_21.reg_func1_flags & CONT_CUM_DEMAND_FLAG_bm) == CONT_CUM_DEMAND_FLAG_bm ) {
 1027a78:	f1be 0f00 	cmp.w	lr, #0
 1027a7c:	f040 80bc 	bne.w	1027bf8 <REGS_APP_bSt_23_execute_table_writing+0x234>
		memcpy(&st_23_temp.tot_data_block.demands[i].demand[0], &table_buffer[k], NI_FMAT2_SIZE);
 1027a80:	192e      	adds	r6, r5, r4
	for ( i = 0; i < st_21.nbr_demands; i++ ) {				 
 1027a82:	455f      	cmp	r7, fp
		memcpy(&st_23_temp.tot_data_block.demands[i].demand[0], &table_buffer[k], NI_FMAT2_SIZE);
 1027a84:	6830      	ldr	r0, [r6, #0]
 1027a86:	7936      	ldrb	r6, [r6, #4]
 1027a88:	6010      	str	r0, [r2, #0]
		k += NI_FMAT2_SIZE;
 1027a8a:	f104 0405 	add.w	r4, r4, #5
		memcpy(&st_23_temp.tot_data_block.demands[i].demand[0], &table_buffer[k], NI_FMAT2_SIZE);
 1027a8e:	7116      	strb	r6, [r2, #4]
		k += NI_FMAT2_SIZE;
 1027a90:	b2a4      	uxth	r4, r4
 1027a92:	f102 0220 	add.w	r2, r2, #32
	for ( i = 0; i < st_21.nbr_demands; i++ ) {				 
 1027a96:	d3e3      	bcc.n	1027a60 <REGS_APP_bSt_23_execute_table_writing+0x9c>
	for ( i = 0; i < st_21.nbr_coin_values; i++ ) {
 1027a98:	4b68      	ldr	r3, [pc, #416]	; (1027c3c <REGS_APP_bSt_23_execute_table_writing+0x278>)
 1027a9a:	795b      	ldrb	r3, [r3, #5]
 1027a9c:	9304      	str	r3, [sp, #16]
 1027a9e:	b193      	cbz	r3, 1027ac6 <REGS_APP_bSt_23_execute_table_writing+0x102>
 1027aa0:	1e5a      	subs	r2, r3, #1
 1027aa2:	b2d2      	uxtb	r2, r2
 1027aa4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 1027aa8:	1d56      	adds	r6, r2, #5
 1027aaa:	4426      	add	r6, r4
 1027aac:	b2b6      	uxth	r6, r6
 1027aae:	aa28      	add	r2, sp, #160	; 0xa0
		memcpy(&st_23_temp.tot_data_block.coincidents[i], &table_buffer[k], NI_FMAT2_SIZE);
 1027ab0:	192b      	adds	r3, r5, r4
		k += NI_FMAT2_SIZE;
 1027ab2:	3405      	adds	r4, #5
 1027ab4:	b2a4      	uxth	r4, r4
		memcpy(&st_23_temp.tot_data_block.coincidents[i], &table_buffer[k], NI_FMAT2_SIZE);
 1027ab6:	6818      	ldr	r0, [r3, #0]
 1027ab8:	791b      	ldrb	r3, [r3, #4]
 1027aba:	6010      	str	r0, [r2, #0]
	for ( i = 0; i < st_21.nbr_coin_values; i++ ) {
 1027abc:	42a6      	cmp	r6, r4
		memcpy(&st_23_temp.tot_data_block.coincidents[i], &table_buffer[k], NI_FMAT2_SIZE);
 1027abe:	7113      	strb	r3, [r2, #4]
 1027ac0:	f102 0208 	add.w	r2, r2, #8
	for ( i = 0; i < st_21.nbr_coin_values; i++ ) {
 1027ac4:	d1f4      	bne.n	1027ab0 <REGS_APP_bSt_23_execute_table_writing+0xec>
	for ( j = 0; j < st_21.nbr_tiers; j++ ) {
 1027ac6:	4b5d      	ldr	r3, [pc, #372]	; (1027c3c <REGS_APP_bSt_23_execute_table_writing+0x278>)
 1027ac8:	79da      	ldrb	r2, [r3, #7]
 1027aca:	2a00      	cmp	r2, #0
 1027acc:	f000 8082 	beq.w	1027bd4 <REGS_APP_bSt_23_execute_table_writing+0x210>
 1027ad0:	9b03      	ldr	r3, [sp, #12]
 1027ad2:	3a01      	subs	r2, #1
 1027ad4:	1e59      	subs	r1, r3, #1
 1027ad6:	b2d2      	uxtb	r2, r2
 1027ad8:	9b04      	ldr	r3, [sp, #16]
 1027ada:	b2c9      	uxtb	r1, r1
 1027adc:	3201      	adds	r2, #1
 1027ade:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 1027ae2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 1027ae6:	1e58      	subs	r0, r3, #1
 1027ae8:	0049      	lsls	r1, r1, #1
 1027aea:	0113      	lsls	r3, r2, #4
 1027aec:	b2c0      	uxtb	r0, r0
 1027aee:	9305      	str	r3, [sp, #20]
 1027af0:	1d8b      	adds	r3, r1, #6
 1027af2:	9a02      	ldr	r2, [sp, #8]
 1027af4:	9307      	str	r3, [sp, #28]
 1027af6:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 1027afa:	9306      	str	r3, [sp, #24]
 1027afc:	ab3a      	add	r3, sp, #232	; 0xe8
 1027afe:	f002 0720 	and.w	r7, r2, #32
 1027b02:	9300      	str	r3, [sp, #0]
 1027b04:	f002 0a02 	and.w	sl, r2, #2
 1027b08:	2300      	movs	r3, #0
 1027b0a:	46b8      	mov	r8, r7
 1027b0c:	9301      	str	r3, [sp, #4]
 1027b0e:	f002 0910 	and.w	r9, r2, #16
 1027b12:	465e      	mov	r6, fp
 1027b14:	4657      	mov	r7, sl
		for ( i = 0; i < st_21.nbr_summations; i++ ) {
 1027b16:	9b03      	ldr	r3, [sp, #12]
 1027b18:	b313      	cbz	r3, 1027b60 <REGS_APP_bSt_23_execute_table_writing+0x19c>
 1027b1a:	9b07      	ldr	r3, [sp, #28]
 1027b1c:	9a00      	ldr	r2, [sp, #0]
 1027b1e:	9602      	str	r6, [sp, #8]
 1027b20:	eb04 0a03 	add.w	sl, r4, r3
 1027b24:	fa1f f38a 	uxth.w	r3, sl
 1027b28:	f1a2 0a50 	sub.w	sl, r2, #80	; 0x50
 1027b2c:	4656      	mov	r6, sl
 1027b2e:	f10d 0b20 	add.w	fp, sp, #32
 1027b32:	469a      	mov	sl, r3
			memcpy(&data, &table_buffer[k], NI_FMAT1_SIZE);
 1027b34:	192b      	adds	r3, r5, r4
			data = 0;
 1027b36:	2100      	movs	r1, #0
 1027b38:	2200      	movs	r2, #0
 1027b3a:	e9cb 1200 	strd	r1, r2, [fp]
			memcpy(&data, &table_buffer[k], NI_FMAT1_SIZE);
 1027b3e:	6818      	ldr	r0, [r3, #0]
 1027b40:	889b      	ldrh	r3, [r3, #4]
 1027b42:	f8ab 3004 	strh.w	r3, [fp, #4]
 1027b46:	f8cb 0000 	str.w	r0, [fp]
			st_23_temp.tier_data_block[j].summations[i] = (double)data;
 1027b4a:	e9db 0100 	ldrd	r0, r1, [fp]
 1027b4e:	4b3c      	ldr	r3, [pc, #240]	; (1027c40 <REGS_APP_bSt_23_execute_table_writing+0x27c>)
 1027b50:	4798      	blx	r3
			k += NI_FMAT1_SIZE;
 1027b52:	3406      	adds	r4, #6
 1027b54:	b2a4      	uxth	r4, r4
		for ( i = 0; i < st_21.nbr_summations; i++ ) {
 1027b56:	45a2      	cmp	sl, r4
			st_23_temp.tier_data_block[j].summations[i] = (double)data;
 1027b58:	e9e6 0102 	strd	r0, r1, [r6, #8]!
		for ( i = 0; i < st_21.nbr_summations; i++ ) {
 1027b5c:	d1ea      	bne.n	1027b34 <REGS_APP_bSt_23_execute_table_writing+0x170>
 1027b5e:	9e02      	ldr	r6, [sp, #8]
		for ( i = 0; i < st_21.nbr_demands; i++ ) {
 1027b60:	b1e6      	cbz	r6, 1027b9c <REGS_APP_bSt_23_execute_table_writing+0x1d8>
 1027b62:	9b00      	ldr	r3, [sp, #0]
 1027b64:	2200      	movs	r2, #0
 1027b66:	3201      	adds	r2, #1
 1027b68:	fa5f fe82 	uxtb.w	lr, r2
			if ( (st_21.reg_func1_flags & DATE_TIME_FIELD_FLAG_bm) == DATE_TIME_FIELD_FLAG_bm ) {
 1027b6c:	b127      	cbz	r7, 1027b78 <REGS_APP_bSt_23_execute_table_writing+0x1b4>
				memcpy(&st_23_temp.tier_data_block[j].demands[i].event_time[0], &table_buffer[k], TM_FMAT_SIZE);
 1027b6e:	5929      	ldr	r1, [r5, r4]
 1027b70:	f843 1c18 	str.w	r1, [r3, #-24]
				k += TM_FMAT_SIZE;
 1027b74:	3404      	adds	r4, #4
 1027b76:	b2a4      	uxth	r4, r4
			if ( (st_21.reg_func1_flags & CUM_DEMAND_FLAG_bm) == CUM_DEMAND_FLAG_bm ) {
 1027b78:	f1b9 0f00 	cmp.w	r9, #0
 1027b7c:	d146      	bne.n	1027c0c <REGS_APP_bSt_23_execute_table_writing+0x248>
			if ( (st_21.reg_func1_flags & CONT_CUM_DEMAND_FLAG_bm) == CONT_CUM_DEMAND_FLAG_bm ) {
 1027b7e:	f1b8 0f00 	cmp.w	r8, #0
 1027b82:	d14f      	bne.n	1027c24 <REGS_APP_bSt_23_execute_table_writing+0x260>
			memcpy(&st_23_temp.tier_data_block[j].demands[i].demand[0], &table_buffer[k], NI_FMAT2_SIZE);
 1027b84:	1929      	adds	r1, r5, r4
		for ( i = 0; i < st_21.nbr_demands; i++ ) {
 1027b86:	4576      	cmp	r6, lr
			memcpy(&st_23_temp.tier_data_block[j].demands[i].demand[0], &table_buffer[k], NI_FMAT2_SIZE);
 1027b88:	6808      	ldr	r0, [r1, #0]
 1027b8a:	7909      	ldrb	r1, [r1, #4]
 1027b8c:	6018      	str	r0, [r3, #0]
			k += NI_FMAT2_SIZE;			
 1027b8e:	f104 0405 	add.w	r4, r4, #5
			memcpy(&st_23_temp.tier_data_block[j].demands[i].demand[0], &table_buffer[k], NI_FMAT2_SIZE);
 1027b92:	7119      	strb	r1, [r3, #4]
			k += NI_FMAT2_SIZE;			
 1027b94:	b2a4      	uxth	r4, r4
 1027b96:	f103 0320 	add.w	r3, r3, #32
		for ( i = 0; i < st_21.nbr_demands; i++ ) {
 1027b9a:	d8e4      	bhi.n	1027b66 <REGS_APP_bSt_23_execute_table_writing+0x1a2>
		for ( i = 0; i < st_21.nbr_coin_values; i++ ) {
 1027b9c:	9b04      	ldr	r3, [sp, #16]
 1027b9e:	b183      	cbz	r3, 1027bc2 <REGS_APP_bSt_23_execute_table_writing+0x1fe>
 1027ba0:	9b06      	ldr	r3, [sp, #24]
 1027ba2:	1d59      	adds	r1, r3, #5
 1027ba4:	9b00      	ldr	r3, [sp, #0]
 1027ba6:	4421      	add	r1, r4
 1027ba8:	b289      	uxth	r1, r1
 1027baa:	3328      	adds	r3, #40	; 0x28
			memcpy(&st_23_temp.tier_data_block[j].coincidents[i], &table_buffer[k], NI_FMAT2_SIZE);
 1027bac:	192a      	adds	r2, r5, r4
			k += NI_FMAT2_SIZE;
 1027bae:	3405      	adds	r4, #5
 1027bb0:	b2a4      	uxth	r4, r4
			memcpy(&st_23_temp.tier_data_block[j].coincidents[i], &table_buffer[k], NI_FMAT2_SIZE);
 1027bb2:	6810      	ldr	r0, [r2, #0]
 1027bb4:	7912      	ldrb	r2, [r2, #4]
 1027bb6:	6018      	str	r0, [r3, #0]
		for ( i = 0; i < st_21.nbr_coin_values; i++ ) {
 1027bb8:	42a1      	cmp	r1, r4
			memcpy(&st_23_temp.tier_data_block[j].coincidents[i], &table_buffer[k], NI_FMAT2_SIZE);
 1027bba:	711a      	strb	r2, [r3, #4]
 1027bbc:	f103 0308 	add.w	r3, r3, #8
		for ( i = 0; i < st_21.nbr_coin_values; i++ ) {
 1027bc0:	d1f4      	bne.n	1027bac <REGS_APP_bSt_23_execute_table_writing+0x1e8>
 1027bc2:	9a00      	ldr	r2, [sp, #0]
 1027bc4:	9b01      	ldr	r3, [sp, #4]
 1027bc6:	3270      	adds	r2, #112	; 0x70
 1027bc8:	9200      	str	r2, [sp, #0]
	for ( j = 0; j < st_21.nbr_tiers; j++ ) {
 1027bca:	9a05      	ldr	r2, [sp, #20]
 1027bcc:	3370      	adds	r3, #112	; 0x70
 1027bce:	4293      	cmp	r3, r2
 1027bd0:	9301      	str	r3, [sp, #4]
 1027bd2:	d1a0      	bne.n	1027b16 <REGS_APP_bSt_23_execute_table_writing+0x152>
}
 1027bd4:	2001      	movs	r0, #1
 1027bd6:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 1027bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(&st_23_temp.tot_data_block.demands[i].cum_demand, &table_buffer[k], NI_FMAT1_SIZE);
 1027bde:	1928      	adds	r0, r5, r4
			k += NI_FMAT1_SIZE;
 1027be0:	3406      	adds	r4, #6
			memcpy(&st_23_temp.tot_data_block.demands[i].cum_demand, &table_buffer[k], NI_FMAT1_SIZE);
 1027be2:	6806      	ldr	r6, [r0, #0]
 1027be4:	8880      	ldrh	r0, [r0, #4]
 1027be6:	f842 6c10 	str.w	r6, [r2, #-16]
			k += NI_FMAT1_SIZE;
 1027bea:	b2a4      	uxth	r4, r4
			memcpy(&st_23_temp.tot_data_block.demands[i].cum_demand, &table_buffer[k], NI_FMAT1_SIZE);
 1027bec:	f822 0c0c 	strh.w	r0, [r2, #-12]
		if ( (st_21.reg_func1_flags & CONT_CUM_DEMAND_FLAG_bm) == CONT_CUM_DEMAND_FLAG_bm ) {
 1027bf0:	f1be 0f00 	cmp.w	lr, #0
 1027bf4:	f43f af44 	beq.w	1027a80 <REGS_APP_bSt_23_execute_table_writing+0xbc>
			memcpy(&st_23_temp.tot_data_block.demands[i].cont_cum_demand, &table_buffer[k], NI_FMAT1_SIZE);
 1027bf8:	1928      	adds	r0, r5, r4
			k += NI_FMAT1_SIZE;
 1027bfa:	3406      	adds	r4, #6
			memcpy(&st_23_temp.tot_data_block.demands[i].cont_cum_demand, &table_buffer[k], NI_FMAT1_SIZE);
 1027bfc:	6806      	ldr	r6, [r0, #0]
 1027bfe:	8880      	ldrh	r0, [r0, #4]
 1027c00:	f842 6c08 	str.w	r6, [r2, #-8]
			k += NI_FMAT1_SIZE;
 1027c04:	b2a4      	uxth	r4, r4
			memcpy(&st_23_temp.tot_data_block.demands[i].cont_cum_demand, &table_buffer[k], NI_FMAT1_SIZE);
 1027c06:	f822 0c04 	strh.w	r0, [r2, #-4]
 1027c0a:	e739      	b.n	1027a80 <REGS_APP_bSt_23_execute_table_writing+0xbc>
				memcpy(&st_23_temp.tier_data_block[j].demands[i].cum_demand, &table_buffer[k], NI_FMAT1_SIZE);
 1027c0c:	1929      	adds	r1, r5, r4
				k += NI_FMAT1_SIZE;
 1027c0e:	3406      	adds	r4, #6
				memcpy(&st_23_temp.tier_data_block[j].demands[i].cum_demand, &table_buffer[k], NI_FMAT1_SIZE);
 1027c10:	6808      	ldr	r0, [r1, #0]
 1027c12:	8889      	ldrh	r1, [r1, #4]
 1027c14:	f843 0c10 	str.w	r0, [r3, #-16]
				k += NI_FMAT1_SIZE;
 1027c18:	b2a4      	uxth	r4, r4
				memcpy(&st_23_temp.tier_data_block[j].demands[i].cum_demand, &table_buffer[k], NI_FMAT1_SIZE);
 1027c1a:	f823 1c0c 	strh.w	r1, [r3, #-12]
			if ( (st_21.reg_func1_flags & CONT_CUM_DEMAND_FLAG_bm) == CONT_CUM_DEMAND_FLAG_bm ) {
 1027c1e:	f1b8 0f00 	cmp.w	r8, #0
 1027c22:	d0af      	beq.n	1027b84 <REGS_APP_bSt_23_execute_table_writing+0x1c0>
				memcpy(&st_23_temp.tier_data_block[j].demands[i].cont_cum_demand, &table_buffer[k], NI_FMAT1_SIZE);
 1027c24:	1929      	adds	r1, r5, r4
				k += NI_FMAT1_SIZE;
 1027c26:	3406      	adds	r4, #6
				memcpy(&st_23_temp.tier_data_block[j].demands[i].cont_cum_demand, &table_buffer[k], NI_FMAT1_SIZE);
 1027c28:	6808      	ldr	r0, [r1, #0]
 1027c2a:	8889      	ldrh	r1, [r1, #4]
 1027c2c:	f843 0c08 	str.w	r0, [r3, #-8]
				k += NI_FMAT1_SIZE;
 1027c30:	b2a4      	uxth	r4, r4
				memcpy(&st_23_temp.tier_data_block[j].demands[i].cont_cum_demand, &table_buffer[k], NI_FMAT1_SIZE);
 1027c32:	f823 1c04 	strh.w	r1, [r3, #-4]
 1027c36:	e7a5      	b.n	1027b84 <REGS_APP_bSt_23_execute_table_writing+0x1c0>
 1027c38:	01030b71 	.word	0x01030b71
 1027c3c:	2000797c 	.word	0x2000797c
 1027c40:	0102ff99 	.word	0x0102ff99

01027c44 <REGS_APP_usSt_23_get_size>:
uint16_t REGS_APP_usSt_23_get_size(void) {
 1027c44:	b470      	push	{r4, r5, r6}
	if ( (st_21.reg_func1_flags & DEMAND_RESET_CTR_FLAG_bm) == DEMAND_RESET_CTR_FLAG_bm) {
 1027c46:	4815      	ldr	r0, [pc, #84]	; (1027c9c <REGS_APP_usSt_23_get_size+0x58>)
 1027c48:	7802      	ldrb	r2, [r0, #0]
	dataBlock_size = 6*st_21.nbr_summations + st_21.nbr_demands*(eventTime_size + cumDemand_size + contCumDemand_size + 5) + 5*st_21.nbr_coin_values;
 1027c4a:	78c4      	ldrb	r4, [r0, #3]
 1027c4c:	7941      	ldrb	r1, [r0, #5]
 1027c4e:	7905      	ldrb	r5, [r0, #4]
	tierDataBlock_size = st_21.nbr_tiers * dataBlock_size;
 1027c50:	79c0      	ldrb	r0, [r0, #7]
	if ( (st_21.reg_func1_flags & DATE_TIME_FIELD_FLAG_bm) == DATE_TIME_FIELD_FLAG_bm ){
 1027c52:	f012 0f02 	tst.w	r2, #2
 1027c56:	bf14      	ite	ne
 1027c58:	2304      	movne	r3, #4
 1027c5a:	2300      	moveq	r3, #0
	if ( (st_21.reg_func1_flags & CUM_DEMAND_FLAG_bm) == CUM_DEMAND_FLAG_bm ) {
 1027c5c:	f012 0f10 	tst.w	r2, #16
 1027c60:	bf14      	ite	ne
 1027c62:	2606      	movne	r6, #6
 1027c64:	2600      	moveq	r6, #0
	if ( (st_21.reg_func1_flags & CONT_CUM_DEMAND_FLAG_bm) == CONT_CUM_DEMAND_FLAG_bm ) {
 1027c66:	f012 0f20 	tst.w	r2, #32
	dataBlock_size = 6*st_21.nbr_summations + st_21.nbr_demands*(eventTime_size + cumDemand_size + contCumDemand_size + 5) + 5*st_21.nbr_coin_values;
 1027c6a:	4433      	add	r3, r6
	if ( (st_21.reg_func1_flags & CONT_CUM_DEMAND_FLAG_bm) == CONT_CUM_DEMAND_FLAG_bm ) {
 1027c6c:	bf14      	ite	ne
 1027c6e:	2606      	movne	r6, #6
 1027c70:	2600      	moveq	r6, #0
	dataBlock_size = 6*st_21.nbr_summations + st_21.nbr_demands*(eventTime_size + cumDemand_size + contCumDemand_size + 5) + 5*st_21.nbr_coin_values;
 1027c72:	4433      	add	r3, r6
 1027c74:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 1027c78:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 1027c7c:	eb01 0144 	add.w	r1, r1, r4, lsl #1
 1027c80:	3305      	adds	r3, #5
 1027c82:	fb05 1303 	mla	r3, r5, r3, r1
 1027c86:	b29b      	uxth	r3, r3
	if ( (st_21.reg_func1_flags & DEMAND_RESET_CTR_FLAG_bm) == DEMAND_RESET_CTR_FLAG_bm) {
 1027c88:	f3c2 0280 	ubfx	r2, r2, #2, #1
	table_size = nbrDemandsResets_size + totDataBlock_size + tierDataBlock_size;
 1027c8c:	441a      	add	r2, r3
	tierDataBlock_size = st_21.nbr_tiers * dataBlock_size;
 1027c8e:	fb10 f303 	smulbb	r3, r0, r3
	table_size = nbrDemandsResets_size + totDataBlock_size + tierDataBlock_size;
 1027c92:	441a      	add	r2, r3
}
 1027c94:	b290      	uxth	r0, r2
 1027c96:	bc70      	pop	{r4, r5, r6}
 1027c98:	4770      	bx	lr
 1027c9a:	bf00      	nop
 1027c9c:	2000797c 	.word	0x2000797c

01027ca0 <REGS_APP_vClear_st_24>:
void REGS_APP_vClear_st_24(void) {
 1027ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 1027ca2:	b083      	sub	sp, #12
	uint64_t default_value = 0;
 1027ca4:	2300      	movs	r3, #0
 1027ca6:	ac02      	add	r4, sp, #8
 1027ca8:	2200      	movs	r2, #0
 1027caa:	e964 2302 	strd	r2, r3, [r4, #-8]!
	EEPROM_writer( ST_24_END_DATE_TIME_ADDR, (uint8_t *)&default_value, TM_FMAT_SIZE );
 1027cae:	4d0d      	ldr	r5, [pc, #52]	; (1027ce4 <REGS_APP_vClear_st_24+0x44>)
	memset( &st_23_copy, 0, sizeof(st_23_copy) );
 1027cb0:	4e0d      	ldr	r6, [pc, #52]	; (1027ce8 <REGS_APP_vClear_st_24+0x48>)
	EEPROM_writer( ST_24_END_DATE_TIME_ADDR, (uint8_t *)&default_value, TM_FMAT_SIZE );
 1027cb2:	4621      	mov	r1, r4
 1027cb4:	2204      	movs	r2, #4
 1027cb6:	f244 30e5 	movw	r0, #17381	; 0x43e5
 1027cba:	47a8      	blx	r5
	memset( &st_23_copy, 0, sizeof(st_23_copy) );
 1027cbc:	f240 1787 	movw	r7, #391	; 0x187
	EEPROM_writer( ST_24_SEASON_ADDR, (uint8_t *)&default_value, 1 );
 1027cc0:	4621      	mov	r1, r4
 1027cc2:	2201      	movs	r2, #1
 1027cc4:	f244 30e9 	movw	r0, #17385	; 0x43e9
 1027cc8:	47a8      	blx	r5
	memset( &st_23_copy, 0, sizeof(st_23_copy) );
 1027cca:	463a      	mov	r2, r7
 1027ccc:	4b07      	ldr	r3, [pc, #28]	; (1027cec <REGS_APP_vClear_st_24+0x4c>)
 1027cce:	4630      	mov	r0, r6
 1027cd0:	2100      	movs	r1, #0
 1027cd2:	4798      	blx	r3
	EEPROM_writer( ST_24_PREV_SEASON_REG_DATA_ADDR, st_23_copy, ST_23_MAX_SIZE );
 1027cd4:	463a      	mov	r2, r7
 1027cd6:	4631      	mov	r1, r6
 1027cd8:	f244 30ea 	movw	r0, #17386	; 0x43ea
 1027cdc:	47a8      	blx	r5
}
 1027cde:	b003      	add	sp, #12
 1027ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1027ce2:	bf00      	nop
 1027ce4:	01017509 	.word	0x01017509
 1027ce8:	20007bd0 	.word	0x20007bd0
 1027cec:	01030b71 	.word	0x01030b71

01027cf0 <REGS_APP_bSt_24_execute_table_reading>:
bool REGS_APP_bSt_24_execute_table_reading(uint8_t *table_buffer) {
 1027cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ( (st_21.reg_func1_flags & DATE_TIME_FIELD_FLAG_bm) == DATE_TIME_FIELD_FLAG_bm ) {
 1027cf2:	4e12      	ldr	r6, [pc, #72]	; (1027d3c <REGS_APP_bSt_24_execute_table_reading+0x4c>)
	st_23_size = REGS_APP_usSt_23_get_size();
 1027cf4:	4b12      	ldr	r3, [pc, #72]	; (1027d40 <REGS_APP_bSt_24_execute_table_reading+0x50>)
bool REGS_APP_bSt_24_execute_table_reading(uint8_t *table_buffer) {
 1027cf6:	4605      	mov	r5, r0
	st_23_size = REGS_APP_usSt_23_get_size();
 1027cf8:	4798      	blx	r3
	if ( (st_21.reg_func1_flags & DATE_TIME_FIELD_FLAG_bm) == DATE_TIME_FIELD_FLAG_bm ) {
 1027cfa:	7833      	ldrb	r3, [r6, #0]
 1027cfc:	f013 0102 	ands.w	r1, r3, #2
	st_23_size = REGS_APP_usSt_23_get_size();
 1027d00:	4607      	mov	r7, r0
	if ( (st_21.reg_func1_flags & DATE_TIME_FIELD_FLAG_bm) == DATE_TIME_FIELD_FLAG_bm ) {
 1027d02:	d110      	bne.n	1027d26 <REGS_APP_bSt_24_execute_table_reading+0x36>
 1027d04:	4c0f      	ldr	r4, [pc, #60]	; (1027d44 <REGS_APP_bSt_24_execute_table_reading+0x54>)
	uint16_t k = 0;
 1027d06:	460e      	mov	r6, r1
	if ( (st_21.reg_func1_flags & SEASON_INFO_FIELD_FLAG_bm) == SEASON_INFO_FIELD_FLAG_bm ) {
 1027d08:	07db      	lsls	r3, r3, #31
 1027d0a:	d505      	bpl.n	1027d18 <REGS_APP_bSt_24_execute_table_reading+0x28>
		EEPROM_reader( ST_24_SEASON_ADDR, &table_buffer[k], 1 );
 1027d0c:	4429      	add	r1, r5
 1027d0e:	2201      	movs	r2, #1
 1027d10:	f244 30e9 	movw	r0, #17385	; 0x43e9
 1027d14:	47a0      	blx	r4
 1027d16:	1c71      	adds	r1, r6, #1
	EEPROM_reader( ST_24_PREV_SEASON_REG_DATA_ADDR, &table_buffer[k], st_23_size );
 1027d18:	463a      	mov	r2, r7
 1027d1a:	4429      	add	r1, r5
 1027d1c:	f244 30ea 	movw	r0, #17386	; 0x43ea
 1027d20:	47a0      	blx	r4
}
 1027d22:	2001      	movs	r0, #1
 1027d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		EEPROM_reader( ST_24_END_DATE_TIME_ADDR, &table_buffer[k], TM_FMAT_SIZE );
 1027d26:	4629      	mov	r1, r5
 1027d28:	2204      	movs	r2, #4
 1027d2a:	f244 30e5 	movw	r0, #17381	; 0x43e5
 1027d2e:	4c05      	ldr	r4, [pc, #20]	; (1027d44 <REGS_APP_bSt_24_execute_table_reading+0x54>)
 1027d30:	47a0      	blx	r4
 1027d32:	2104      	movs	r1, #4
 1027d34:	7833      	ldrb	r3, [r6, #0]
		k += TM_FMAT_SIZE;
 1027d36:	460e      	mov	r6, r1
 1027d38:	e7e6      	b.n	1027d08 <REGS_APP_bSt_24_execute_table_reading+0x18>
 1027d3a:	bf00      	nop
 1027d3c:	2000797c 	.word	0x2000797c
 1027d40:	01027c45 	.word	0x01027c45
 1027d44:	01017511 	.word	0x01017511

01027d48 <REGS_APP_bSt_24_execute_table_writing>:
bool REGS_APP_bSt_24_execute_table_writing(uint8_t *table_buffer) {
 1027d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ( (st_21.reg_func1_flags & DATE_TIME_FIELD_FLAG_bm) == DATE_TIME_FIELD_FLAG_bm ) {
 1027d4a:	4e12      	ldr	r6, [pc, #72]	; (1027d94 <REGS_APP_bSt_24_execute_table_writing+0x4c>)
	st_23_size = REGS_APP_usSt_23_get_size();
 1027d4c:	4b12      	ldr	r3, [pc, #72]	; (1027d98 <REGS_APP_bSt_24_execute_table_writing+0x50>)
bool REGS_APP_bSt_24_execute_table_writing(uint8_t *table_buffer) {
 1027d4e:	4605      	mov	r5, r0
	st_23_size = REGS_APP_usSt_23_get_size();
 1027d50:	4798      	blx	r3
	if ( (st_21.reg_func1_flags & DATE_TIME_FIELD_FLAG_bm) == DATE_TIME_FIELD_FLAG_bm ) {
 1027d52:	7833      	ldrb	r3, [r6, #0]
 1027d54:	f013 0102 	ands.w	r1, r3, #2
	st_23_size = REGS_APP_usSt_23_get_size();
 1027d58:	4607      	mov	r7, r0
	if ( (st_21.reg_func1_flags & DATE_TIME_FIELD_FLAG_bm) == DATE_TIME_FIELD_FLAG_bm ) {
 1027d5a:	d110      	bne.n	1027d7e <REGS_APP_bSt_24_execute_table_writing+0x36>
 1027d5c:	4c0f      	ldr	r4, [pc, #60]	; (1027d9c <REGS_APP_bSt_24_execute_table_writing+0x54>)
	uint16_t k = 0;
 1027d5e:	460e      	mov	r6, r1
	if ( (st_21.reg_func1_flags & SEASON_INFO_FIELD_FLAG_bm) == SEASON_INFO_FIELD_FLAG_bm ) {
 1027d60:	07db      	lsls	r3, r3, #31
 1027d62:	d505      	bpl.n	1027d70 <REGS_APP_bSt_24_execute_table_writing+0x28>
		EEPROM_writer( ST_24_SEASON_ADDR, &table_buffer[k], 1 );
 1027d64:	4429      	add	r1, r5
 1027d66:	2201      	movs	r2, #1
 1027d68:	f244 30e9 	movw	r0, #17385	; 0x43e9
 1027d6c:	47a0      	blx	r4
 1027d6e:	1c71      	adds	r1, r6, #1
	 EEPROM_writer( ST_24_PREV_SEASON_REG_DATA_ADDR, &table_buffer[k], st_23_size );
 1027d70:	463a      	mov	r2, r7
 1027d72:	4429      	add	r1, r5
 1027d74:	f244 30ea 	movw	r0, #17386	; 0x43ea
 1027d78:	47a0      	blx	r4
}
 1027d7a:	2001      	movs	r0, #1
 1027d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		EEPROM_writer( ST_24_END_DATE_TIME_ADDR, &table_buffer[k], TM_FMAT_SIZE );
 1027d7e:	4629      	mov	r1, r5
 1027d80:	2204      	movs	r2, #4
 1027d82:	f244 30e5 	movw	r0, #17381	; 0x43e5
 1027d86:	4c05      	ldr	r4, [pc, #20]	; (1027d9c <REGS_APP_bSt_24_execute_table_writing+0x54>)
 1027d88:	47a0      	blx	r4
 1027d8a:	2104      	movs	r1, #4
 1027d8c:	7833      	ldrb	r3, [r6, #0]
		k += TM_FMAT_SIZE;
 1027d8e:	460e      	mov	r6, r1
 1027d90:	e7e6      	b.n	1027d60 <REGS_APP_bSt_24_execute_table_writing+0x18>
 1027d92:	bf00      	nop
 1027d94:	2000797c 	.word	0x2000797c
 1027d98:	01027c45 	.word	0x01027c45
 1027d9c:	01017509 	.word	0x01017509

01027da0 <REGS_APP_usSt_24_get_size>:
uint16_t REGS_APP_usSt_24_get_size(void) {
 1027da0:	b510      	push	{r4, lr}
	if ( (st_21.reg_func1_flags & DATE_TIME_FIELD_FLAG_bm) == DATE_TIME_FIELD_FLAG_bm) {
 1027da2:	4b07      	ldr	r3, [pc, #28]	; (1027dc0 <REGS_APP_usSt_24_get_size+0x20>)
 1027da4:	781b      	ldrb	r3, [r3, #0]
		table_size += 4;
 1027da6:	f013 0f02 	tst.w	r3, #2
 1027daa:	bf0c      	ite	eq
 1027dac:	2400      	moveq	r4, #0
 1027dae:	2404      	movne	r4, #4
	if ( (st_21.reg_func1_flags & SEASON_INFO_FIELD_FLAG_bm) == SEASON_INFO_FIELD_FLAG_bm) {
 1027db0:	07db      	lsls	r3, r3, #31
	table_size += REGS_APP_usSt_23_get_size();
 1027db2:	4b04      	ldr	r3, [pc, #16]	; (1027dc4 <REGS_APP_usSt_24_get_size+0x24>)
		table_size += 1;
 1027db4:	bf48      	it	mi
 1027db6:	3401      	addmi	r4, #1
	table_size += REGS_APP_usSt_23_get_size();
 1027db8:	4798      	blx	r3
 1027dba:	4420      	add	r0, r4
}
 1027dbc:	b280      	uxth	r0, r0
 1027dbe:	bd10      	pop	{r4, pc}
 1027dc0:	2000797c 	.word	0x2000797c
 1027dc4:	01027c45 	.word	0x01027c45

01027dc8 <REGS_APP_vClear_st_25>:
void REGS_APP_vClear_st_25(void) {
 1027dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 1027dca:	b083      	sub	sp, #12
	uint64_t default_value = 0;
 1027dcc:	2300      	movs	r3, #0
 1027dce:	ac02      	add	r4, sp, #8
 1027dd0:	2200      	movs	r2, #0
 1027dd2:	e964 2302 	strd	r2, r3, [r4, #-8]!
	EEPROM_writer( ST_25_END_DATE_TIME_ADDR, (uint8_t *)&default_value, TM_FMAT_SIZE );
 1027dd6:	4d0d      	ldr	r5, [pc, #52]	; (1027e0c <REGS_APP_vClear_st_25+0x44>)
	memset( &st_23_copy, 0, sizeof(st_23_copy) );
 1027dd8:	4e0d      	ldr	r6, [pc, #52]	; (1027e10 <REGS_APP_vClear_st_25+0x48>)
	EEPROM_writer( ST_25_END_DATE_TIME_ADDR, (uint8_t *)&default_value, TM_FMAT_SIZE );
 1027dda:	4621      	mov	r1, r4
 1027ddc:	2204      	movs	r2, #4
 1027dde:	f244 6038 	movw	r0, #17976	; 0x4638
 1027de2:	47a8      	blx	r5
	memset( &st_23_copy, 0, sizeof(st_23_copy) );
 1027de4:	f240 1787 	movw	r7, #391	; 0x187
	EEPROM_writer( ST_25_SEASON_ADDR, (uint8_t *)&default_value, 1 );
 1027de8:	4621      	mov	r1, r4
 1027dea:	2201      	movs	r2, #1
 1027dec:	f244 603c 	movw	r0, #17980	; 0x463c
 1027df0:	47a8      	blx	r5
	memset( &st_23_copy, 0, sizeof(st_23_copy) );
 1027df2:	463a      	mov	r2, r7
 1027df4:	4b07      	ldr	r3, [pc, #28]	; (1027e14 <REGS_APP_vClear_st_25+0x4c>)
 1027df6:	4630      	mov	r0, r6
 1027df8:	2100      	movs	r1, #0
 1027dfa:	4798      	blx	r3
	EEPROM_writer( ST_25_PREV_DEMAND_RESET_DATA_ADDR, st_23_copy, ST_23_MAX_SIZE );
 1027dfc:	463a      	mov	r2, r7
 1027dfe:	4631      	mov	r1, r6
 1027e00:	f244 603d 	movw	r0, #17981	; 0x463d
 1027e04:	47a8      	blx	r5
}
 1027e06:	b003      	add	sp, #12
 1027e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1027e0a:	bf00      	nop
 1027e0c:	01017509 	.word	0x01017509
 1027e10:	20007bd0 	.word	0x20007bd0
 1027e14:	01030b71 	.word	0x01030b71

01027e18 <REGS_APP_bSt_25_execute_table_reading>:
bool REGS_APP_bSt_25_execute_table_reading(uint8_t *table_buffer) {
 1027e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ( (st_21.reg_func1_flags & DATE_TIME_FIELD_FLAG_bm) == DATE_TIME_FIELD_FLAG_bm ) {
 1027e1a:	4e12      	ldr	r6, [pc, #72]	; (1027e64 <REGS_APP_bSt_25_execute_table_reading+0x4c>)
	st_23_size = REGS_APP_usSt_23_get_size();
 1027e1c:	4b12      	ldr	r3, [pc, #72]	; (1027e68 <REGS_APP_bSt_25_execute_table_reading+0x50>)
bool REGS_APP_bSt_25_execute_table_reading(uint8_t *table_buffer) {
 1027e1e:	4605      	mov	r5, r0
	st_23_size = REGS_APP_usSt_23_get_size();
 1027e20:	4798      	blx	r3
	if ( (st_21.reg_func1_flags & DATE_TIME_FIELD_FLAG_bm) == DATE_TIME_FIELD_FLAG_bm ) {
 1027e22:	7833      	ldrb	r3, [r6, #0]
 1027e24:	f013 0102 	ands.w	r1, r3, #2
	st_23_size = REGS_APP_usSt_23_get_size();
 1027e28:	4607      	mov	r7, r0
	if ( (st_21.reg_func1_flags & DATE_TIME_FIELD_FLAG_bm) == DATE_TIME_FIELD_FLAG_bm ) {
 1027e2a:	d110      	bne.n	1027e4e <REGS_APP_bSt_25_execute_table_reading+0x36>
 1027e2c:	4c0f      	ldr	r4, [pc, #60]	; (1027e6c <REGS_APP_bSt_25_execute_table_reading+0x54>)
	uint16_t k = 0;
 1027e2e:	460e      	mov	r6, r1
	if ( (st_21.reg_func1_flags & SEASON_INFO_FIELD_FLAG_bm) == SEASON_INFO_FIELD_FLAG_bm ) {
 1027e30:	07db      	lsls	r3, r3, #31
 1027e32:	d505      	bpl.n	1027e40 <REGS_APP_bSt_25_execute_table_reading+0x28>
		EEPROM_reader( ST_25_SEASON_ADDR, &table_buffer[k], 1 );
 1027e34:	4429      	add	r1, r5
 1027e36:	2201      	movs	r2, #1
 1027e38:	f244 603c 	movw	r0, #17980	; 0x463c
 1027e3c:	47a0      	blx	r4
 1027e3e:	1c71      	adds	r1, r6, #1
	EEPROM_reader( ST_25_PREV_DEMAND_RESET_DATA_ADDR, &table_buffer[k], st_23_size );
 1027e40:	463a      	mov	r2, r7
 1027e42:	4429      	add	r1, r5
 1027e44:	f244 603d 	movw	r0, #17981	; 0x463d
 1027e48:	47a0      	blx	r4
}
 1027e4a:	2001      	movs	r0, #1
 1027e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		EEPROM_reader( ST_25_END_DATE_TIME_ADDR, &table_buffer[k], TM_FMAT_SIZE );
 1027e4e:	4629      	mov	r1, r5
 1027e50:	2204      	movs	r2, #4
 1027e52:	f244 6038 	movw	r0, #17976	; 0x4638
 1027e56:	4c05      	ldr	r4, [pc, #20]	; (1027e6c <REGS_APP_bSt_25_execute_table_reading+0x54>)
 1027e58:	47a0      	blx	r4
 1027e5a:	2104      	movs	r1, #4
 1027e5c:	7833      	ldrb	r3, [r6, #0]
		k += TM_FMAT_SIZE;
 1027e5e:	460e      	mov	r6, r1
 1027e60:	e7e6      	b.n	1027e30 <REGS_APP_bSt_25_execute_table_reading+0x18>
 1027e62:	bf00      	nop
 1027e64:	2000797c 	.word	0x2000797c
 1027e68:	01027c45 	.word	0x01027c45
 1027e6c:	01017511 	.word	0x01017511

01027e70 <REGS_APP_bSt_25_execute_table_writing>:
bool REGS_APP_bSt_25_execute_table_writing(uint8_t *table_buffer) {
 1027e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ( (st_21.reg_func1_flags & DATE_TIME_FIELD_FLAG_bm) == DATE_TIME_FIELD_FLAG_bm ) {
 1027e72:	4e12      	ldr	r6, [pc, #72]	; (1027ebc <REGS_APP_bSt_25_execute_table_writing+0x4c>)
	st_23_size = REGS_APP_usSt_23_get_size();
 1027e74:	4b12      	ldr	r3, [pc, #72]	; (1027ec0 <REGS_APP_bSt_25_execute_table_writing+0x50>)
bool REGS_APP_bSt_25_execute_table_writing(uint8_t *table_buffer) {
 1027e76:	4605      	mov	r5, r0
	st_23_size = REGS_APP_usSt_23_get_size();
 1027e78:	4798      	blx	r3
	if ( (st_21.reg_func1_flags & DATE_TIME_FIELD_FLAG_bm) == DATE_TIME_FIELD_FLAG_bm ) {
 1027e7a:	7833      	ldrb	r3, [r6, #0]
 1027e7c:	f013 0102 	ands.w	r1, r3, #2
	st_23_size = REGS_APP_usSt_23_get_size();
 1027e80:	4607      	mov	r7, r0
	if ( (st_21.reg_func1_flags & DATE_TIME_FIELD_FLAG_bm) == DATE_TIME_FIELD_FLAG_bm ) {
 1027e82:	d110      	bne.n	1027ea6 <REGS_APP_bSt_25_execute_table_writing+0x36>
 1027e84:	4c0f      	ldr	r4, [pc, #60]	; (1027ec4 <REGS_APP_bSt_25_execute_table_writing+0x54>)
	uint16_t k = 0;
 1027e86:	460e      	mov	r6, r1
	if ( (st_21.reg_func1_flags & SEASON_INFO_FIELD_FLAG_bm) == SEASON_INFO_FIELD_FLAG_bm ) {
 1027e88:	07db      	lsls	r3, r3, #31
 1027e8a:	d505      	bpl.n	1027e98 <REGS_APP_bSt_25_execute_table_writing+0x28>
		EEPROM_writer( ST_25_SEASON_ADDR, &table_buffer[k], 1 );
 1027e8c:	4429      	add	r1, r5
 1027e8e:	2201      	movs	r2, #1
 1027e90:	f244 603c 	movw	r0, #17980	; 0x463c
 1027e94:	47a0      	blx	r4
 1027e96:	1c71      	adds	r1, r6, #1
	 EEPROM_writer( ST_25_PREV_DEMAND_RESET_DATA_ADDR, &table_buffer[k], st_23_size );
 1027e98:	463a      	mov	r2, r7
 1027e9a:	4429      	add	r1, r5
 1027e9c:	f244 603d 	movw	r0, #17981	; 0x463d
 1027ea0:	47a0      	blx	r4
}
 1027ea2:	2001      	movs	r0, #1
 1027ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		EEPROM_writer( ST_25_END_DATE_TIME_ADDR, &table_buffer[k], TM_FMAT_SIZE );
 1027ea6:	4629      	mov	r1, r5
 1027ea8:	2204      	movs	r2, #4
 1027eaa:	f244 6038 	movw	r0, #17976	; 0x4638
 1027eae:	4c05      	ldr	r4, [pc, #20]	; (1027ec4 <REGS_APP_bSt_25_execute_table_writing+0x54>)
 1027eb0:	47a0      	blx	r4
 1027eb2:	2104      	movs	r1, #4
 1027eb4:	7833      	ldrb	r3, [r6, #0]
		k += TM_FMAT_SIZE;
 1027eb6:	460e      	mov	r6, r1
 1027eb8:	e7e6      	b.n	1027e88 <REGS_APP_bSt_25_execute_table_writing+0x18>
 1027eba:	bf00      	nop
 1027ebc:	2000797c 	.word	0x2000797c
 1027ec0:	01027c45 	.word	0x01027c45
 1027ec4:	01017509 	.word	0x01017509

01027ec8 <REGS_APP_usSt_25_get_size>:
	return REGS_APP_usSt_24_get_size();
 1027ec8:	4b00      	ldr	r3, [pc, #0]	; (1027ecc <REGS_APP_usSt_25_get_size+0x4>)
 1027eca:	4718      	bx	r3
 1027ecc:	01027da1 	.word	0x01027da1

01027ed0 <REGS_APP_bSt_26_restore_default_values>:
bool REGS_APP_bSt_26_restore_default_values(void) {
 1027ed0:	b530      	push	{r4, r5, lr}
 1027ed2:	b083      	sub	sp, #12
	data[1] = (uint8_t)(ST_26_DEFAULT_NBR_VALID_ENTRIES);
 1027ed4:	2300      	movs	r3, #0
	data[0] = (uint8_t)(ST_26_DEFAULT_LIST_STATUS);
 1027ed6:	2210      	movs	r2, #16
	SM_APP_vChange_table_state(ST_26_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
 1027ed8:	4d1a      	ldr	r5, [pc, #104]	; (1027f44 <REGS_APP_bSt_26_restore_default_values+0x74>)
	data[1] = (uint8_t)(ST_26_DEFAULT_NBR_VALID_ENTRIES);
 1027eda:	f88d 3001 	strb.w	r3, [sp, #1]
	SM_APP_vChange_table_state(ST_26_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
 1027ede:	21ff      	movs	r1, #255	; 0xff
 1027ee0:	f644 008a 	movw	r0, #18570	; 0x488a
	data[2] = (uint8_t)(ST_26_DEFAULT_LAST_ENTRY_ELEMENT);
 1027ee4:	f88d 3002 	strb.w	r3, [sp, #2]
	data[3] = (uint8_t)(ST_26_DEFAULT_LAST_ENTRY_SEQ_NBR);
 1027ee8:	f88d 3003 	strb.w	r3, [sp, #3]
	data[4] = (uint8_t)(ST_26_DEFAULT_LAST_ENTRY_SEQ_NBR >> 8);
 1027eec:	f88d 3004 	strb.w	r3, [sp, #4]
	data[5] = (uint8_t)(ST_26_DEFAULT_NBR_UNREAD_ENTRIES);
 1027ef0:	f88d 3005 	strb.w	r3, [sp, #5]
	EEPROM_writer( ST_26_LIST_STATUS_ADDR, &data[0], 1 );
 1027ef4:	4c14      	ldr	r4, [pc, #80]	; (1027f48 <REGS_APP_bSt_26_restore_default_values+0x78>)
	data[0] = (uint8_t)(ST_26_DEFAULT_LIST_STATUS);
 1027ef6:	f88d 2000 	strb.w	r2, [sp]
	SM_APP_vChange_table_state(ST_26_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
 1027efa:	47a8      	blx	r5
	EEPROM_writer( ST_26_LIST_STATUS_ADDR, &data[0], 1 );
 1027efc:	4669      	mov	r1, sp
 1027efe:	2201      	movs	r2, #1
 1027f00:	f644 008b 	movw	r0, #18571	; 0x488b
 1027f04:	47a0      	blx	r4
	EEPROM_writer( ST_26_NBR_VALID_ENTRIES_ADDR, &data[1], 1 );
 1027f06:	2201      	movs	r2, #1
 1027f08:	eb0d 0102 	add.w	r1, sp, r2
 1027f0c:	f644 008c 	movw	r0, #18572	; 0x488c
 1027f10:	47a0      	blx	r4
	EEPROM_writer( ST_26_LAST_ENTRY_ELEMENT_ADDR, &data[2], 1 );
 1027f12:	f10d 0102 	add.w	r1, sp, #2
 1027f16:	2201      	movs	r2, #1
 1027f18:	f644 008d 	movw	r0, #18573	; 0x488d
 1027f1c:	47a0      	blx	r4
	EEPROM_writer( ST_26_LAST_ENTRY_SEQ_NBR_ADDR, &data[3], 2 );
 1027f1e:	f10d 0103 	add.w	r1, sp, #3
 1027f22:	2202      	movs	r2, #2
 1027f24:	f644 008e 	movw	r0, #18574	; 0x488e
 1027f28:	47a0      	blx	r4
	EEPROM_writer( ST_26_NBR_UNREAD_ENTRIES_ADDR, &data[5], 1 );
 1027f2a:	2201      	movs	r2, #1
 1027f2c:	f10d 0105 	add.w	r1, sp, #5
 1027f30:	f644 0090 	movw	r0, #18576	; 0x4890
 1027f34:	47a0      	blx	r4
	SM_APP_vChange_table_state(ST_26_PROG_STATE_ADDR, C1219_TABLE_FULL);
 1027f36:	2145      	movs	r1, #69	; 0x45
 1027f38:	f644 008a 	movw	r0, #18570	; 0x488a
 1027f3c:	47a8      	blx	r5
}
 1027f3e:	2001      	movs	r0, #1
 1027f40:	b003      	add	sp, #12
 1027f42:	bd30      	pop	{r4, r5, pc}
 1027f44:	010203e9 	.word	0x010203e9
 1027f48:	01017509 	.word	0x01017509

01027f4c <REGS_APP_bLoad_st_26>:
bool REGS_APP_bLoad_st_26(void) {
 1027f4c:	b508      	push	{r3, lr}
	if ( SM_APP_ucGet_table_state(ST_26_PROG_STATE_ADDR) != C1219_TABLE_FULL ) {
 1027f4e:	f644 008a 	movw	r0, #18570	; 0x488a
 1027f52:	4b04      	ldr	r3, [pc, #16]	; (1027f64 <REGS_APP_bLoad_st_26+0x18>)
 1027f54:	4798      	blx	r3
 1027f56:	2845      	cmp	r0, #69	; 0x45
 1027f58:	d001      	beq.n	1027f5e <REGS_APP_bLoad_st_26+0x12>
		REGS_APP_bSt_26_restore_default_values();
 1027f5a:	4b03      	ldr	r3, [pc, #12]	; (1027f68 <REGS_APP_bLoad_st_26+0x1c>)
 1027f5c:	4798      	blx	r3
}
 1027f5e:	2001      	movs	r0, #1
 1027f60:	bd08      	pop	{r3, pc}
 1027f62:	bf00      	nop
 1027f64:	010203cd 	.word	0x010203cd
 1027f68:	01027ed1 	.word	0x01027ed1

01027f6c <REGS_APP_vClear_st_26>:
void REGS_APP_vClear_st_26(void) {
 1027f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1027f70:	b083      	sub	sp, #12
	uint64_t default_value = 0;
 1027f72:	2000      	movs	r0, #0
 1027f74:	2100      	movs	r1, #0
 1027f76:	ae02      	add	r6, sp, #8
	REGS_APP_bSt_26_restore_default_values();
 1027f78:	4b1a      	ldr	r3, [pc, #104]	; (1027fe4 <REGS_APP_vClear_st_26+0x78>)
 1027f7a:	4d1b      	ldr	r5, [pc, #108]	; (1027fe8 <REGS_APP_vClear_st_26+0x7c>)
 1027f7c:	f8df b06c 	ldr.w	fp, [pc, #108]	; 1027fec <REGS_APP_vClear_st_26+0x80>
		memset( &st_23_copy, 0, sizeof(st_23_copy) );
 1027f80:	f8df a06c 	ldr.w	sl, [pc, #108]	; 1027ff0 <REGS_APP_vClear_st_26+0x84>
	uint64_t default_value = 0;
 1027f84:	e966 0102 	strd	r0, r1, [r6, #-8]!
	REGS_APP_bSt_26_restore_default_values();
 1027f88:	4798      	blx	r3
 1027f8a:	f644 09f3 	movw	r9, #18675	; 0x48f3
 1027f8e:	f644 04e5 	movw	r4, #18661	; 0x48e5
 1027f92:	f644 08ad 	movw	r8, #18605	; 0x48ad
 1027f96:	f644 0791 	movw	r7, #18577	; 0x4891
		EEPROM_writer( ST_26_SELF_READ_SEQ_NBR_ADDR + 2*i, &default_value, 2 );
 1027f9a:	2202      	movs	r2, #2
 1027f9c:	4631      	mov	r1, r6
 1027f9e:	4638      	mov	r0, r7
 1027fa0:	47a8      	blx	r5
		EEPROM_writer( ST_26_END_DATE_TIME_ADDR + 4*i, &default_value, 4 );
 1027fa2:	2204      	movs	r2, #4
 1027fa4:	4631      	mov	r1, r6
 1027fa6:	4640      	mov	r0, r8
 1027fa8:	47a8      	blx	r5
		EEPROM_writer( ST_26_SEASON_ADDR + i, &default_value, 1 );
 1027faa:	2201      	movs	r2, #1
 1027fac:	4631      	mov	r1, r6
 1027fae:	4620      	mov	r0, r4
 1027fb0:	47a8      	blx	r5
		memset( &st_23_copy, 0, sizeof(st_23_copy) );
 1027fb2:	f240 1287 	movw	r2, #391	; 0x187
 1027fb6:	2100      	movs	r1, #0
 1027fb8:	4650      	mov	r0, sl
 1027fba:	47d8      	blx	fp
		EEPROM_writer( ST_26_SELF_READ_REGISTER_DATA_ADDR + i*ST_23_MAX_SIZE, st_23_copy, ST_23_MAX_SIZE );
 1027fbc:	4648      	mov	r0, r9
 1027fbe:	f240 1287 	movw	r2, #391	; 0x187
 1027fc2:	4651      	mov	r1, sl
 1027fc4:	47a8      	blx	r5
 1027fc6:	3401      	adds	r4, #1
	for ( i = 0; i < MAX_NBR_SELF_READS; i++ ) {
 1027fc8:	f644 03f3 	movw	r3, #18675	; 0x48f3
 1027fcc:	429c      	cmp	r4, r3
 1027fce:	f107 0702 	add.w	r7, r7, #2
 1027fd2:	f108 0804 	add.w	r8, r8, #4
 1027fd6:	f209 1987 	addw	r9, r9, #391	; 0x187
 1027fda:	d1de      	bne.n	1027f9a <REGS_APP_vClear_st_26+0x2e>
}
 1027fdc:	b003      	add	sp, #12
 1027fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1027fe2:	bf00      	nop
 1027fe4:	01027ed1 	.word	0x01027ed1
 1027fe8:	01017509 	.word	0x01017509
 1027fec:	01030b71 	.word	0x01030b71
 1027ff0:	20007bd0 	.word	0x20007bd0

01027ff4 <REGS_APP_bSt_26_execute_table_reading>:
bool REGS_APP_bSt_26_execute_table_reading(uint8_t *table_buffer) {
 1027ff4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	st_23_size = REGS_APP_usSt_23_get_size();
 1027ff8:	4b34      	ldr	r3, [pc, #208]	; (10280cc <REGS_APP_bSt_26_execute_table_reading+0xd8>)
		EEPROM_reader( ST_26_LIST_STATUS_ADDR, &table_buffer[k], 1 );
 1027ffa:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 10280d4 <REGS_APP_bSt_26_execute_table_reading+0xe0>
	for ( i = 0; i < st_21.nbr_self_reads; i++ ) {
 1027ffe:	4e34      	ldr	r6, [pc, #208]	; (10280d0 <REGS_APP_bSt_26_execute_table_reading+0xdc>)
bool REGS_APP_bSt_26_execute_table_reading(uint8_t *table_buffer) {
 1028000:	4607      	mov	r7, r0
	st_23_size = REGS_APP_usSt_23_get_size();
 1028002:	4798      	blx	r3
		EEPROM_reader( ST_26_LIST_STATUS_ADDR, &table_buffer[k], 1 );
 1028004:	4639      	mov	r1, r7
 1028006:	2201      	movs	r2, #1
	st_23_size = REGS_APP_usSt_23_get_size();
 1028008:	4681      	mov	r9, r0
		EEPROM_reader( ST_26_LIST_STATUS_ADDR, &table_buffer[k], 1 );
 102800a:	f644 008b 	movw	r0, #18571	; 0x488b
 102800e:	47c0      	blx	r8
		table_buffer[k] &= ~INHIBIT_OVERFLOW_FLAG_bm;
 1028010:	783b      	ldrb	r3, [r7, #0]
 1028012:	4639      	mov	r1, r7
 1028014:	f023 0309 	bic.w	r3, r3, #9
 1028018:	f043 0304 	orr.w	r3, r3, #4
 102801c:	f801 3b01 	strb.w	r3, [r1], #1
		EEPROM_reader( ST_26_NBR_VALID_ENTRIES_ADDR, &table_buffer[k], 1 );
 1028020:	2201      	movs	r2, #1
 1028022:	f644 008c 	movw	r0, #18572	; 0x488c
 1028026:	47c0      	blx	r8
		EEPROM_reader( ST_26_LAST_ENTRY_ELEMENT_ADDR, &table_buffer[k], 1 );
 1028028:	1cb9      	adds	r1, r7, #2
 102802a:	2201      	movs	r2, #1
 102802c:	f644 008d 	movw	r0, #18573	; 0x488d
 1028030:	47c0      	blx	r8
		EEPROM_reader( ST_26_LAST_ENTRY_SEQ_NBR_ADDR, &table_buffer[k], 2 );
 1028032:	1cf9      	adds	r1, r7, #3
 1028034:	2202      	movs	r2, #2
 1028036:	f644 008e 	movw	r0, #18574	; 0x488e
 102803a:	47c0      	blx	r8
		EEPROM_reader( ST_26_NBR_UNREAD_ENTRIES_ADDR, &table_buffer[k], 1 );
 102803c:	1d79      	adds	r1, r7, #5
 102803e:	2201      	movs	r2, #1
 1028040:	f644 0090 	movw	r0, #18576	; 0x4890
 1028044:	47c0      	blx	r8
	for ( i = 0; i < st_21.nbr_self_reads; i++ ) {
 1028046:	78b3      	ldrb	r3, [r6, #2]
 1028048:	2b00      	cmp	r3, #0
 102804a:	d03b      	beq.n	10280c4 <REGS_APP_bSt_26_execute_table_reading+0xd0>
 102804c:	2406      	movs	r4, #6
 102804e:	2500      	movs	r5, #0
			EEPROM_reader( ST_26_SELF_READ_SEQ_NBR_ADDR + 2*i, &table_buffer[k], 2 );
 1028050:	f644 0b91 	movw	fp, #18577	; 0x4891
			EEPROM_reader( ST_26_END_DATE_TIME_ADDR + 4*i, &table_buffer[k], 4 );
 1028054:	f644 0aad 	movw	sl, #18605	; 0x48ad
 1028058:	e014      	b.n	1028084 <REGS_APP_bSt_26_execute_table_reading+0x90>
		if ( (st_21.reg_func1_flags & DATE_TIME_FIELD_FLAG_bm) == DATE_TIME_FIELD_FLAG_bm ) {
 102805a:	7833      	ldrb	r3, [r6, #0]
 102805c:	079a      	lsls	r2, r3, #30
 102805e:	d41e      	bmi.n	102809e <REGS_APP_bSt_26_execute_table_reading+0xaa>
		if ( (st_21.reg_func1_flags & SEASON_INFO_FIELD_FLAG_bm) == SEASON_INFO_FIELD_FLAG_bm ) {
 1028060:	07db      	lsls	r3, r3, #31
 1028062:	d426      	bmi.n	10280b2 <REGS_APP_bSt_26_execute_table_reading+0xbe>
		EEPROM_reader( ST_26_SELF_READ_REGISTER_DATA_ADDR + i*ST_23_MAX_SIZE, &table_buffer[k], st_23_size );
 1028064:	f644 03f3 	movw	r3, #18675	; 0x48f3
 1028068:	f240 1087 	movw	r0, #391	; 0x187
 102806c:	fb00 3005 	mla	r0, r0, r5, r3
 1028070:	1939      	adds	r1, r7, r4
 1028072:	464a      	mov	r2, r9
 1028074:	47c0      	blx	r8
	for ( i = 0; i < st_21.nbr_self_reads; i++ ) {
 1028076:	3501      	adds	r5, #1
 1028078:	78b3      	ldrb	r3, [r6, #2]
 102807a:	b2ad      	uxth	r5, r5
		k += st_23_size;
 102807c:	444c      	add	r4, r9
	for ( i = 0; i < st_21.nbr_self_reads; i++ ) {
 102807e:	42ab      	cmp	r3, r5
		k += st_23_size;
 1028080:	b2a4      	uxth	r4, r4
	for ( i = 0; i < st_21.nbr_self_reads; i++ ) {
 1028082:	d91f      	bls.n	10280c4 <REGS_APP_bSt_26_execute_table_reading+0xd0>
		if ( (st_21.reg_func2_flags & SELF_READ_SEQ_NBR_FLAG_bm) == SELF_READ_SEQ_NBR_FLAG_bm ) {
 1028084:	7873      	ldrb	r3, [r6, #1]
 1028086:	0799      	lsls	r1, r3, #30
 1028088:	d5e7      	bpl.n	102805a <REGS_APP_bSt_26_execute_table_reading+0x66>
			EEPROM_reader( ST_26_SELF_READ_SEQ_NBR_ADDR + 2*i, &table_buffer[k], 2 );
 102808a:	2202      	movs	r2, #2
 102808c:	1939      	adds	r1, r7, r4
 102808e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
 1028092:	47c0      	blx	r8
		if ( (st_21.reg_func1_flags & DATE_TIME_FIELD_FLAG_bm) == DATE_TIME_FIELD_FLAG_bm ) {
 1028094:	7833      	ldrb	r3, [r6, #0]
			k += 2;
 1028096:	3402      	adds	r4, #2
		if ( (st_21.reg_func1_flags & DATE_TIME_FIELD_FLAG_bm) == DATE_TIME_FIELD_FLAG_bm ) {
 1028098:	079a      	lsls	r2, r3, #30
			k += 2;
 102809a:	b2a4      	uxth	r4, r4
		if ( (st_21.reg_func1_flags & DATE_TIME_FIELD_FLAG_bm) == DATE_TIME_FIELD_FLAG_bm ) {
 102809c:	d5e0      	bpl.n	1028060 <REGS_APP_bSt_26_execute_table_reading+0x6c>
			EEPROM_reader( ST_26_END_DATE_TIME_ADDR + 4*i, &table_buffer[k], 4 );
 102809e:	1939      	adds	r1, r7, r4
 10280a0:	2204      	movs	r2, #4
 10280a2:	eb0a 0085 	add.w	r0, sl, r5, lsl #2
 10280a6:	47c0      	blx	r8
 10280a8:	7833      	ldrb	r3, [r6, #0]
			k += 4;
 10280aa:	3404      	adds	r4, #4
		if ( (st_21.reg_func1_flags & SEASON_INFO_FIELD_FLAG_bm) == SEASON_INFO_FIELD_FLAG_bm ) {
 10280ac:	07db      	lsls	r3, r3, #31
			k += 4;
 10280ae:	b2a4      	uxth	r4, r4
		if ( (st_21.reg_func1_flags & SEASON_INFO_FIELD_FLAG_bm) == SEASON_INFO_FIELD_FLAG_bm ) {
 10280b0:	d5d8      	bpl.n	1028064 <REGS_APP_bSt_26_execute_table_reading+0x70>
			EEPROM_reader( ST_26_SEASON_ADDR + i, &table_buffer[k], 1 );
 10280b2:	f505 4091 	add.w	r0, r5, #18560	; 0x4880
 10280b6:	1939      	adds	r1, r7, r4
 10280b8:	3065      	adds	r0, #101	; 0x65
 10280ba:	2201      	movs	r2, #1
			k += 1;
 10280bc:	3401      	adds	r4, #1
			EEPROM_reader( ST_26_SEASON_ADDR + i, &table_buffer[k], 1 );
 10280be:	47c0      	blx	r8
			k += 1;
 10280c0:	b2a4      	uxth	r4, r4
 10280c2:	e7cf      	b.n	1028064 <REGS_APP_bSt_26_execute_table_reading+0x70>
}
 10280c4:	2001      	movs	r0, #1
 10280c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 10280ca:	bf00      	nop
 10280cc:	01027c45 	.word	0x01027c45
 10280d0:	2000797c 	.word	0x2000797c
 10280d4:	01017511 	.word	0x01017511

010280d8 <REGS_APP_bSt_26_execute_table_writing>:
bool REGS_APP_bSt_26_execute_table_writing(uint8_t *table_buffer) {
 10280d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	st_23_size = REGS_APP_usSt_23_get_size();
 10280dc:	4b30      	ldr	r3, [pc, #192]	; (10281a0 <REGS_APP_bSt_26_execute_table_writing+0xc8>)
		EEPROM_writer( ST_26_LIST_STATUS_ADDR, &table_buffer[k], 1 );
 10280de:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 10281a8 <REGS_APP_bSt_26_execute_table_writing+0xd0>
	for ( i = 0; i < st_21.nbr_self_reads; i++ ) {
 10280e2:	4e30      	ldr	r6, [pc, #192]	; (10281a4 <REGS_APP_bSt_26_execute_table_writing+0xcc>)
bool REGS_APP_bSt_26_execute_table_writing(uint8_t *table_buffer) {
 10280e4:	4607      	mov	r7, r0
	st_23_size = REGS_APP_usSt_23_get_size();
 10280e6:	4798      	blx	r3
		EEPROM_writer( ST_26_LIST_STATUS_ADDR, &table_buffer[k], 1 );
 10280e8:	4639      	mov	r1, r7
 10280ea:	2201      	movs	r2, #1
	st_23_size = REGS_APP_usSt_23_get_size();
 10280ec:	4681      	mov	r9, r0
		EEPROM_writer( ST_26_LIST_STATUS_ADDR, &table_buffer[k], 1 );
 10280ee:	f644 008b 	movw	r0, #18571	; 0x488b
 10280f2:	47c0      	blx	r8
		EEPROM_writer( ST_26_NBR_VALID_ENTRIES_ADDR, &table_buffer[k], 1 );
 10280f4:	1c79      	adds	r1, r7, #1
 10280f6:	2201      	movs	r2, #1
 10280f8:	f644 008c 	movw	r0, #18572	; 0x488c
 10280fc:	47c0      	blx	r8
		EEPROM_writer( ST_26_LAST_ENTRY_ELEMENT_ADDR, &table_buffer[k], 1 );
 10280fe:	1cb9      	adds	r1, r7, #2
 1028100:	2201      	movs	r2, #1
 1028102:	f644 008d 	movw	r0, #18573	; 0x488d
 1028106:	47c0      	blx	r8
		EEPROM_writer( ST_26_LAST_ENTRY_SEQ_NBR_ADDR, &table_buffer[k], 2 );
 1028108:	1cf9      	adds	r1, r7, #3
 102810a:	2202      	movs	r2, #2
 102810c:	f644 008e 	movw	r0, #18574	; 0x488e
 1028110:	47c0      	blx	r8
		EEPROM_writer( ST_26_NBR_UNREAD_ENTRIES_ADDR, &table_buffer[k], 1 );
 1028112:	1d79      	adds	r1, r7, #5
 1028114:	2201      	movs	r2, #1
 1028116:	f644 0090 	movw	r0, #18576	; 0x4890
 102811a:	47c0      	blx	r8
	for ( i = 0; i < st_21.nbr_self_reads; i++ ) {
 102811c:	78b3      	ldrb	r3, [r6, #2]
 102811e:	2b00      	cmp	r3, #0
 1028120:	d03b      	beq.n	102819a <REGS_APP_bSt_26_execute_table_writing+0xc2>
 1028122:	2500      	movs	r5, #0
 1028124:	2406      	movs	r4, #6
			EEPROM_writer( ST_26_SELF_READ_SEQ_NBR_ADDR + 2*i, &table_buffer[k], 2 );
 1028126:	f644 0b91 	movw	fp, #18577	; 0x4891
			EEPROM_writer( ST_26_END_DATE_TIME_ADDR + 4*i, &table_buffer[k], 4 );
 102812a:	f644 0aad 	movw	sl, #18605	; 0x48ad
 102812e:	e014      	b.n	102815a <REGS_APP_bSt_26_execute_table_writing+0x82>
		if ( (st_21.reg_func1_flags & DATE_TIME_FIELD_FLAG_bm) == DATE_TIME_FIELD_FLAG_bm ) {
 1028130:	7833      	ldrb	r3, [r6, #0]
 1028132:	079a      	lsls	r2, r3, #30
 1028134:	d41e      	bmi.n	1028174 <REGS_APP_bSt_26_execute_table_writing+0x9c>
		if ( (st_21.reg_func1_flags & SEASON_INFO_FIELD_FLAG_bm) == SEASON_INFO_FIELD_FLAG_bm ) {
 1028136:	07db      	lsls	r3, r3, #31
 1028138:	d426      	bmi.n	1028188 <REGS_APP_bSt_26_execute_table_writing+0xb0>
		EEPROM_writer( ST_26_SELF_READ_REGISTER_DATA_ADDR + i*ST_23_MAX_SIZE, &table_buffer[k], st_23_size );
 102813a:	f644 03f3 	movw	r3, #18675	; 0x48f3
 102813e:	f240 1087 	movw	r0, #391	; 0x187
 1028142:	fb00 3005 	mla	r0, r0, r5, r3
 1028146:	1939      	adds	r1, r7, r4
 1028148:	464a      	mov	r2, r9
 102814a:	47c0      	blx	r8
	for ( i = 0; i < st_21.nbr_self_reads; i++ ) {
 102814c:	3501      	adds	r5, #1
 102814e:	78b3      	ldrb	r3, [r6, #2]
 1028150:	b2ad      	uxth	r5, r5
		k += st_23_size;
 1028152:	444c      	add	r4, r9
	for ( i = 0; i < st_21.nbr_self_reads; i++ ) {
 1028154:	42ab      	cmp	r3, r5
		k += st_23_size;
 1028156:	b2a4      	uxth	r4, r4
	for ( i = 0; i < st_21.nbr_self_reads; i++ ) {
 1028158:	d91f      	bls.n	102819a <REGS_APP_bSt_26_execute_table_writing+0xc2>
		if ( (st_21.reg_func2_flags & SELF_READ_SEQ_NBR_FLAG_bm) == SELF_READ_SEQ_NBR_FLAG_bm ) {
 102815a:	7873      	ldrb	r3, [r6, #1]
 102815c:	0799      	lsls	r1, r3, #30
 102815e:	d5e7      	bpl.n	1028130 <REGS_APP_bSt_26_execute_table_writing+0x58>
			EEPROM_writer( ST_26_SELF_READ_SEQ_NBR_ADDR + 2*i, &table_buffer[k], 2 );
 1028160:	2202      	movs	r2, #2
 1028162:	1939      	adds	r1, r7, r4
 1028164:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
 1028168:	47c0      	blx	r8
		if ( (st_21.reg_func1_flags & DATE_TIME_FIELD_FLAG_bm) == DATE_TIME_FIELD_FLAG_bm ) {
 102816a:	7833      	ldrb	r3, [r6, #0]
			k += 2;
 102816c:	3402      	adds	r4, #2
		if ( (st_21.reg_func1_flags & DATE_TIME_FIELD_FLAG_bm) == DATE_TIME_FIELD_FLAG_bm ) {
 102816e:	079a      	lsls	r2, r3, #30
			k += 2;
 1028170:	b2a4      	uxth	r4, r4
		if ( (st_21.reg_func1_flags & DATE_TIME_FIELD_FLAG_bm) == DATE_TIME_FIELD_FLAG_bm ) {
 1028172:	d5e0      	bpl.n	1028136 <REGS_APP_bSt_26_execute_table_writing+0x5e>
			EEPROM_writer( ST_26_END_DATE_TIME_ADDR + 4*i, &table_buffer[k], 4 );
 1028174:	1939      	adds	r1, r7, r4
 1028176:	2204      	movs	r2, #4
 1028178:	eb0a 0085 	add.w	r0, sl, r5, lsl #2
 102817c:	47c0      	blx	r8
 102817e:	7833      	ldrb	r3, [r6, #0]
			k += 4;
 1028180:	3404      	adds	r4, #4
		if ( (st_21.reg_func1_flags & SEASON_INFO_FIELD_FLAG_bm) == SEASON_INFO_FIELD_FLAG_bm ) {
 1028182:	07db      	lsls	r3, r3, #31
			k += 4;
 1028184:	b2a4      	uxth	r4, r4
		if ( (st_21.reg_func1_flags & SEASON_INFO_FIELD_FLAG_bm) == SEASON_INFO_FIELD_FLAG_bm ) {
 1028186:	d5d8      	bpl.n	102813a <REGS_APP_bSt_26_execute_table_writing+0x62>
			EEPROM_writer( ST_26_SEASON_ADDR + i, &table_buffer[k], 1 );
 1028188:	f505 4091 	add.w	r0, r5, #18560	; 0x4880
 102818c:	1939      	adds	r1, r7, r4
 102818e:	3065      	adds	r0, #101	; 0x65
 1028190:	2201      	movs	r2, #1
			k += 1;
 1028192:	3401      	adds	r4, #1
			EEPROM_writer( ST_26_SEASON_ADDR + i, &table_buffer[k], 1 );
 1028194:	47c0      	blx	r8
			k += 1;
 1028196:	b2a4      	uxth	r4, r4
 1028198:	e7cf      	b.n	102813a <REGS_APP_bSt_26_execute_table_writing+0x62>
}
 102819a:	2001      	movs	r0, #1
 102819c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 10281a0:	01027c45 	.word	0x01027c45
 10281a4:	2000797c 	.word	0x2000797c
 10281a8:	01017509 	.word	0x01017509

010281ac <REGS_APP_usSt_26_get_size>:
uint16_t REGS_APP_usSt_26_get_size(void) {
 10281ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for ( i = 0; i < st_21.nbr_self_reads ; i++ ) {
 10281ae:	4b11      	ldr	r3, [pc, #68]	; (10281f4 <REGS_APP_usSt_26_get_size+0x48>)
 10281b0:	789e      	ldrb	r6, [r3, #2]
 10281b2:	b1e6      	cbz	r6, 10281ee <REGS_APP_usSt_26_get_size+0x42>
 10281b4:	781c      	ldrb	r4, [r3, #0]
 10281b6:	785d      	ldrb	r5, [r3, #1]
 10281b8:	4b0f      	ldr	r3, [pc, #60]	; (10281f8 <REGS_APP_usSt_26_get_size+0x4c>)
 10281ba:	4798      	blx	r3
 10281bc:	f004 0702 	and.w	r7, r4, #2
 10281c0:	4686      	mov	lr, r0
 10281c2:	f005 0502 	and.w	r5, r5, #2
 10281c6:	f004 0401 	and.w	r4, r4, #1
 10281ca:	2200      	movs	r2, #0
 10281cc:	2006      	movs	r0, #6
 10281ce:	3201      	adds	r2, #1
 10281d0:	b2d1      	uxtb	r1, r2
		if ( (st_21.reg_func2_flags & SELF_READ_SEQ_NBR_FLAG_bm) == SELF_READ_SEQ_NBR_FLAG_bm ) {
 10281d2:	b10d      	cbz	r5, 10281d8 <REGS_APP_usSt_26_get_size+0x2c>
			table_size += 2;
 10281d4:	1c83      	adds	r3, r0, #2
 10281d6:	b298      	uxth	r0, r3
		if ( (st_21.reg_func1_flags & DATE_TIME_FIELD_FLAG_bm) == DATE_TIME_FIELD_FLAG_bm ) {
 10281d8:	b10f      	cbz	r7, 10281de <REGS_APP_usSt_26_get_size+0x32>
			table_size += 4;
 10281da:	1d03      	adds	r3, r0, #4
 10281dc:	b298      	uxth	r0, r3
		if ( (st_21.reg_func1_flags & SEASON_INFO_FIELD_FLAG_bm) == SEASON_INFO_FIELD_FLAG_bm ) {
 10281de:	b10c      	cbz	r4, 10281e4 <REGS_APP_usSt_26_get_size+0x38>
			table_size += 1;
 10281e0:	1c43      	adds	r3, r0, #1
 10281e2:	b298      	uxth	r0, r3
		table_size += REGS_APP_usSt_23_get_size();
 10281e4:	4470      	add	r0, lr
	for ( i = 0; i < st_21.nbr_self_reads ; i++ ) {
 10281e6:	42b1      	cmp	r1, r6
		table_size += REGS_APP_usSt_23_get_size();
 10281e8:	b280      	uxth	r0, r0
	for ( i = 0; i < st_21.nbr_self_reads ; i++ ) {
 10281ea:	d3f0      	bcc.n	10281ce <REGS_APP_usSt_26_get_size+0x22>
 10281ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	table_size += 6;
 10281ee:	2006      	movs	r0, #6
}
 10281f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 10281f2:	bf00      	nop
 10281f4:	2000797c 	.word	0x2000797c
 10281f8:	01027c45 	.word	0x01027c45

010281fc <REGS_APP_bSt_27_restore_default_values>:
bool REGS_APP_bSt_27_restore_default_values(void) {
 10281fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1028200:	b08d      	sub	sp, #52	; 0x34
	memset( &st_27_temp, (uint8_t)PD_W_DEL_ID, sizeof(st_27_temp) );
 1028202:	ac01      	add	r4, sp, #4
 1028204:	4bb6      	ldr	r3, [pc, #728]	; (10284e0 <REGS_APP_bSt_27_restore_default_values+0x2e4>)
 1028206:	4620      	mov	r0, r4
 1028208:	222a      	movs	r2, #42	; 0x2a
 102820a:	2100      	movs	r1, #0
 102820c:	4798      	blx	r3
	for ( i = 0; i < st_21.nbr_present_demands; i++ ) {
 102820e:	4bb5      	ldr	r3, [pc, #724]	; (10284e4 <REGS_APP_bSt_27_restore_default_values+0x2e8>)
 1028210:	7a18      	ldrb	r0, [r3, #8]
 1028212:	b390      	cbz	r0, 102827a <REGS_APP_bSt_27_restore_default_values+0x7e>
 1028214:	49b4      	ldr	r1, [pc, #720]	; (10284e8 <REGS_APP_bSt_27_restore_default_values+0x2ec>)
 1028216:	4623      	mov	r3, r4
				st_27_temp.present_demand_select[i] = PD_VA_Q4_ID;
 1028218:	f04f 0b15 	mov.w	fp, #21
				st_27_temp.present_demand_select[i] = PD_VA_Q3_ID;
 102821c:	f04f 0a14 	mov.w	sl, #20
				st_27_temp.present_demand_select[i] = PD_VA_Q2_ID;
 1028220:	f04f 0913 	mov.w	r9, #19
				st_27_temp.present_demand_select[i] = PD_VA_Q1_ID;
 1028224:	f04f 0812 	mov.w	r8, #18
				st_27_temp.present_demand_select[i] = PD_VA_SUM_ID;
 1028228:	f04f 0c11 	mov.w	ip, #17
				st_27_temp.present_demand_select[i] = PD_VA_NET_ID;
 102822c:	f04f 0e10 	mov.w	lr, #16
				st_27_temp.present_demand_select[i] = PD_VA_REC_ID;
 1028230:	270f      	movs	r7, #15
				st_27_temp.present_demand_select[i] = PD_VA_DEL_ID;
 1028232:	260e      	movs	r6, #14
		switch (st_22.demand_select[i]) {
 1028234:	f811 2b01 	ldrb.w	r2, [r1], #1
 1028238:	2a15      	cmp	r2, #21
 102823a:	d819      	bhi.n	1028270 <REGS_APP_bSt_27_restore_default_values+0x74>
 102823c:	e8df f012 	tbh	[pc, r2, lsl #1]
 1028240:	013d0146 	.word	0x013d0146
 1028244:	012b0134 	.word	0x012b0134
 1028248:	01190122 	.word	0x01190122
 102824c:	01070110 	.word	0x01070110
 1028250:	00f500fe 	.word	0x00f500fe
 1028254:	00e300ec 	.word	0x00e300ec
 1028258:	00d000da 	.word	0x00d000da
 102825c:	00c000c8 	.word	0x00c000c8
 1028260:	00ae00b7 	.word	0x00ae00b7
 1028264:	001600a5 	.word	0x001600a5
 1028268:	0093009c 	.word	0x0093009c
				st_27_temp.present_demand_select[i] = PD_VA_Q2_ID;
 102826c:	f883 9000 	strb.w	r9, [r3]
 1028270:	3301      	adds	r3, #1
	for ( i = 0; i < st_21.nbr_present_demands; i++ ) {
 1028272:	1b1a      	subs	r2, r3, r4
 1028274:	b2d2      	uxtb	r2, r2
 1028276:	4290      	cmp	r0, r2
 1028278:	d8dc      	bhi.n	1028234 <REGS_APP_bSt_27_restore_default_values+0x38>
		st_27_temp.present_value_select[i++] = IV_VA_B_ID;
 102827a:	200a      	movs	r0, #10
		st_27_temp.present_value_select[i++] = IV_VA_C_ID;
 102827c:	210b      	movs	r1, #11
		st_27_temp.present_value_select[i++] = IV_V_A_ID;
 102827e:	220c      	movs	r2, #12
		st_27_temp.present_value_select[i++] = IV_V_B_ID;
 1028280:	230d      	movs	r3, #13
		st_27_temp.present_value_select[i++] = IV_VA_B_ID;
 1028282:	f88d 0010 	strb.w	r0, [sp, #16]
		st_27_temp.present_value_select[i++] = IV_VA_C_ID;
 1028286:	f88d 1011 	strb.w	r1, [sp, #17]
		st_27_temp.present_value_select[i++] = IV_V_A_ID;
 102828a:	f88d 2012 	strb.w	r2, [sp, #18]
		st_27_temp.present_value_select[i++] = IV_V_B_ID;
 102828e:	f88d 3013 	strb.w	r3, [sp, #19]
		st_27_temp.present_value_select[i++] = IV_W_B_ID;
 1028292:	2702      	movs	r7, #2
		st_27_temp.present_value_select[i++] = IV_W_C_ID;
 1028294:	2503      	movs	r5, #3
	st_27_temp.present_value_select[i++] = IV_VAR_TOTAL_ID;
 1028296:	2004      	movs	r0, #4
		st_27_temp.present_value_select[i++] = IV_VAR_A_ID;
 1028298:	2105      	movs	r1, #5
		st_27_temp.present_value_select[i++] = IV_VAR_B_ID;
 102829a:	2206      	movs	r2, #6
		st_27_temp.present_value_select[i++] = IV_VAR_C_ID;
 102829c:	2307      	movs	r3, #7
		st_27_temp.present_value_select[i++] = IV_W_B_ID;
 102829e:	f88d 7008 	strb.w	r7, [sp, #8]
		st_27_temp.present_value_select[i++] = IV_W_C_ID;
 10282a2:	f88d 5009 	strb.w	r5, [sp, #9]
	st_27_temp.present_value_select[i++] = IV_VAR_TOTAL_ID;
 10282a6:	f88d 000a 	strb.w	r0, [sp, #10]
		st_27_temp.present_value_select[i++] = IV_VAR_A_ID;
 10282aa:	f88d 100b 	strb.w	r1, [sp, #11]
		st_27_temp.present_value_select[i++] = IV_VAR_B_ID;
 10282ae:	f88d 200c 	strb.w	r2, [sp, #12]
		st_27_temp.present_value_select[i++] = IV_VAR_C_ID;
 10282b2:	f88d 300d 	strb.w	r3, [sp, #13]
	st_27_temp.present_value_select[i++] = IV_VA_TOTAL_ID;
 10282b6:	f04f 0e08 	mov.w	lr, #8
		st_27_temp.present_value_select[i++] = IV_VA_A_ID;
 10282ba:	2709      	movs	r7, #9
		st_27_temp.present_value_select[i++] = IV_V_C_ID;
 10282bc:	250e      	movs	r5, #14
		st_27_temp.present_value_select[i++] = IV_I_A_ID;
 10282be:	200f      	movs	r0, #15
		st_27_temp.present_value_select[i++] = IV_I_B_ID;
 10282c0:	2110      	movs	r1, #16
		st_27_temp.present_value_select[i++] = IV_I_C_ID;
 10282c2:	2211      	movs	r2, #17
		st_27_temp.present_value_select[i++] = IV_V_A_ANGLE_ID;
 10282c4:	2312      	movs	r3, #18
	st_27_temp.present_value_select[i++] = IV_VA_TOTAL_ID;
 10282c6:	f88d e00e 	strb.w	lr, [sp, #14]
		st_27_temp.present_value_select[i++] = IV_VA_A_ID;
 10282ca:	f88d 700f 	strb.w	r7, [sp, #15]
		st_27_temp.present_value_select[i++] = IV_V_C_ID;
 10282ce:	f88d 5014 	strb.w	r5, [sp, #20]
		st_27_temp.present_value_select[i++] = IV_I_A_ID;
 10282d2:	f88d 0015 	strb.w	r0, [sp, #21]
		st_27_temp.present_value_select[i++] = IV_I_B_ID;
 10282d6:	f88d 1016 	strb.w	r1, [sp, #22]
		st_27_temp.present_value_select[i++] = IV_I_C_ID;
 10282da:	f88d 2017 	strb.w	r2, [sp, #23]
		st_27_temp.present_value_select[i++] = IV_V_A_ANGLE_ID;
 10282de:	f88d 3018 	strb.w	r3, [sp, #24]
		st_27_temp.present_value_select[i++] = IV_V_B_ANGLE_ID;
 10282e2:	f04f 0e13 	mov.w	lr, #19
		st_27_temp.present_value_select[i++] = IV_V_C_ANGLE_ID;
 10282e6:	2714      	movs	r7, #20
		st_27_temp.present_value_select[i++] = IV_I_A_ANGLE_ID;
 10282e8:	2515      	movs	r5, #21
		st_27_temp.present_value_select[i++] = IV_I_B_ANGLE_ID;
 10282ea:	2016      	movs	r0, #22
		st_27_temp.present_value_select[i++] = IV_I_C_ANGLE_ID;
 10282ec:	2117      	movs	r1, #23
	st_27_temp.present_value_select[i++] = IV_PF_ANGLE_ID;
 10282ee:	2218      	movs	r2, #24
		st_27_temp.present_value_select[i++] = IV_PF_A_ANGLE_ID;
 10282f0:	2319      	movs	r3, #25
		st_27_temp.present_value_select[i++] = IV_W_A_ID;
 10282f2:	2601      	movs	r6, #1
		st_27_temp.present_value_select[i++] = IV_V_B_ANGLE_ID;
 10282f4:	f88d e019 	strb.w	lr, [sp, #25]
		st_27_temp.present_value_select[i++] = IV_V_C_ANGLE_ID;
 10282f8:	f88d 701a 	strb.w	r7, [sp, #26]
		st_27_temp.present_value_select[i++] = IV_PF_B_ANGLE_ID;
 10282fc:	f04f 0e1a 	mov.w	lr, #26
		st_27_temp.present_value_select[i++] = IV_I_A_ANGLE_ID;
 1028300:	f88d 501b 	strb.w	r5, [sp, #27]
		st_27_temp.present_value_select[i++] = IV_I_B_ANGLE_ID;
 1028304:	f88d 001c 	strb.w	r0, [sp, #28]
		st_27_temp.present_value_select[i++] = IV_I_C_ANGLE_ID;
 1028308:	f88d 101d 	strb.w	r1, [sp, #29]
	st_27_temp.present_value_select[i++] = IV_PF_ANGLE_ID;
 102830c:	f88d 201e 	strb.w	r2, [sp, #30]
		st_27_temp.present_value_select[i++] = IV_PF_A_ANGLE_ID;
 1028310:	f88d 301f 	strb.w	r3, [sp, #31]
		st_27_temp.present_value_select[i++] = IV_PF_C_ANGLE_ID;
 1028314:	271b      	movs	r7, #27
	st_27_temp.present_value_select[i++] = IV_PF_ID;
 1028316:	251c      	movs	r5, #28
		st_27_temp.present_value_select[i++] = IV_PF_A_ID;
 1028318:	201d      	movs	r0, #29
		st_27_temp.present_value_select[i++] = IV_PF_B_ID;
 102831a:	211e      	movs	r1, #30
		st_27_temp.present_value_select[i++] = IV_PF_C_ID;
 102831c:	221f      	movs	r2, #31
	st_27_temp.present_value_select[i++] = IV_F_ID;
 102831e:	2320      	movs	r3, #32
		st_27_temp.present_value_select[i++] = IV_PF_B_ANGLE_ID;
 1028320:	f88d e020 	strb.w	lr, [sp, #32]
		st_27_temp.present_value_select[i++] = IV_PF_C_ANGLE_ID;
 1028324:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
	st_27_temp.present_value_select[i++] = IV_PF_ID;
 1028328:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
		st_27_temp.present_value_select[i++] = IV_W_A_ID;
 102832c:	f88d 6007 	strb.w	r6, [sp, #7]
		st_27_temp.present_value_select[i++] = IV_PF_A_ID;
 1028330:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
		st_27_temp.present_value_select[i++] = IV_PF_B_ID;
 1028334:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
		st_27_temp.present_value_select[i++] = IV_PF_C_ID;
 1028338:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
	st_27_temp.present_value_select[i++] = IV_F_ID;
 102833c:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
	st_27 = st_27_temp;
 1028340:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 1028342:	4d6a      	ldr	r5, [pc, #424]	; (10284ec <REGS_APP_bSt_27_restore_default_values+0x2f0>)
	REGS_APP_vSt_27_write_eeprom_values(&st_27);
 1028344:	4f6a      	ldr	r7, [pc, #424]	; (10284f0 <REGS_APP_bSt_27_restore_default_values+0x2f4>)
	st_27 = st_27_temp;
 1028346:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 1028348:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 102834a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 102834c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 1028350:	c503      	stmia	r5!, {r0, r1}
 1028352:	802a      	strh	r2, [r5, #0]
	REGS_APP_vSt_27_write_eeprom_values(&st_27);
 1028354:	47b8      	blx	r7
	uint16_t crc = SM_APP_usSt_27_ram_calculate_crc();
 1028356:	4b67      	ldr	r3, [pc, #412]	; (10284f4 <REGS_APP_bSt_27_restore_default_values+0x2f8>)
 1028358:	4798      	blx	r3
	SM_APP_vSt_27_write_crc(crc);
 102835a:	4b67      	ldr	r3, [pc, #412]	; (10284f8 <REGS_APP_bSt_27_restore_default_values+0x2fc>)
 102835c:	4798      	blx	r3
}
 102835e:	4630      	mov	r0, r6
 1028360:	b00d      	add	sp, #52	; 0x34
 1028362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				st_27_temp.present_demand_select[i] = PD_VA_Q4_ID;
 1028366:	f883 b000 	strb.w	fp, [r3]
 102836a:	3301      	adds	r3, #1
	for ( i = 0; i < st_21.nbr_present_demands; i++ ) {
 102836c:	1b1a      	subs	r2, r3, r4
 102836e:	b2d2      	uxtb	r2, r2
 1028370:	4290      	cmp	r0, r2
 1028372:	f63f af5f 	bhi.w	1028234 <REGS_APP_bSt_27_restore_default_values+0x38>
 1028376:	e780      	b.n	102827a <REGS_APP_bSt_27_restore_default_values+0x7e>
				st_27_temp.present_demand_select[i] = PD_VA_Q3_ID;
 1028378:	f883 a000 	strb.w	sl, [r3]
 102837c:	3301      	adds	r3, #1
	for ( i = 0; i < st_21.nbr_present_demands; i++ ) {
 102837e:	1b1a      	subs	r2, r3, r4
 1028380:	b2d2      	uxtb	r2, r2
 1028382:	4290      	cmp	r0, r2
 1028384:	f63f af56 	bhi.w	1028234 <REGS_APP_bSt_27_restore_default_values+0x38>
 1028388:	e777      	b.n	102827a <REGS_APP_bSt_27_restore_default_values+0x7e>
				st_27_temp.present_demand_select[i] = PD_VA_Q1_ID;
 102838a:	f883 8000 	strb.w	r8, [r3]
 102838e:	3301      	adds	r3, #1
	for ( i = 0; i < st_21.nbr_present_demands; i++ ) {
 1028390:	1b1a      	subs	r2, r3, r4
 1028392:	b2d2      	uxtb	r2, r2
 1028394:	4290      	cmp	r0, r2
 1028396:	f63f af4d 	bhi.w	1028234 <REGS_APP_bSt_27_restore_default_values+0x38>
 102839a:	e76e      	b.n	102827a <REGS_APP_bSt_27_restore_default_values+0x7e>
				st_27_temp.present_demand_select[i] = PD_VA_SUM_ID;
 102839c:	f883 c000 	strb.w	ip, [r3]
 10283a0:	3301      	adds	r3, #1
	for ( i = 0; i < st_21.nbr_present_demands; i++ ) {
 10283a2:	1b1a      	subs	r2, r3, r4
 10283a4:	b2d2      	uxtb	r2, r2
 10283a6:	4290      	cmp	r0, r2
 10283a8:	f63f af44 	bhi.w	1028234 <REGS_APP_bSt_27_restore_default_values+0x38>
 10283ac:	e765      	b.n	102827a <REGS_APP_bSt_27_restore_default_values+0x7e>
				st_27_temp.present_demand_select[i] = PD_VA_NET_ID;
 10283ae:	f883 e000 	strb.w	lr, [r3]
 10283b2:	3301      	adds	r3, #1
	for ( i = 0; i < st_21.nbr_present_demands; i++ ) {
 10283b4:	1b1a      	subs	r2, r3, r4
 10283b6:	b2d2      	uxtb	r2, r2
 10283b8:	4290      	cmp	r0, r2
 10283ba:	f63f af3b 	bhi.w	1028234 <REGS_APP_bSt_27_restore_default_values+0x38>
 10283be:	e75c      	b.n	102827a <REGS_APP_bSt_27_restore_default_values+0x7e>
				st_27_temp.present_demand_select[i] = PD_VA_REC_ID;
 10283c0:	701f      	strb	r7, [r3, #0]
 10283c2:	3301      	adds	r3, #1
	for ( i = 0; i < st_21.nbr_present_demands; i++ ) {
 10283c4:	1b1a      	subs	r2, r3, r4
 10283c6:	b2d2      	uxtb	r2, r2
 10283c8:	4290      	cmp	r0, r2
 10283ca:	f63f af33 	bhi.w	1028234 <REGS_APP_bSt_27_restore_default_values+0x38>
 10283ce:	e754      	b.n	102827a <REGS_APP_bSt_27_restore_default_values+0x7e>
				st_27_temp.present_demand_select[i] = PD_VA_DEL_ID;
 10283d0:	701e      	strb	r6, [r3, #0]
 10283d2:	3301      	adds	r3, #1
	for ( i = 0; i < st_21.nbr_present_demands; i++ ) {
 10283d4:	1b1a      	subs	r2, r3, r4
 10283d6:	b2d2      	uxtb	r2, r2
 10283d8:	4290      	cmp	r0, r2
 10283da:	f63f af2b 	bhi.w	1028234 <REGS_APP_bSt_27_restore_default_values+0x38>
 10283de:	e74c      	b.n	102827a <REGS_APP_bSt_27_restore_default_values+0x7e>
				st_27_temp.present_demand_select[i] = PD_VAR_Q2_Q3_ID;
 10283e0:	f04f 020d 	mov.w	r2, #13
 10283e4:	701a      	strb	r2, [r3, #0]
 10283e6:	3301      	adds	r3, #1
	for ( i = 0; i < st_21.nbr_present_demands; i++ ) {
 10283e8:	1b1a      	subs	r2, r3, r4
 10283ea:	b2d2      	uxtb	r2, r2
 10283ec:	4290      	cmp	r0, r2
 10283ee:	f63f af21 	bhi.w	1028234 <REGS_APP_bSt_27_restore_default_values+0x38>
 10283f2:	e742      	b.n	102827a <REGS_APP_bSt_27_restore_default_values+0x7e>
				st_27_temp.present_demand_select[i] = PD_VAR_Q1_Q4_ID;
 10283f4:	220c      	movs	r2, #12
 10283f6:	701a      	strb	r2, [r3, #0]
 10283f8:	3301      	adds	r3, #1
	for ( i = 0; i < st_21.nbr_present_demands; i++ ) {
 10283fa:	1b1a      	subs	r2, r3, r4
 10283fc:	b2d2      	uxtb	r2, r2
 10283fe:	4290      	cmp	r0, r2
 1028400:	f63f af18 	bhi.w	1028234 <REGS_APP_bSt_27_restore_default_values+0x38>
 1028404:	e739      	b.n	102827a <REGS_APP_bSt_27_restore_default_values+0x7e>
				st_27_temp.present_demand_select[i] = PD_VAR_SUM_ID;
 1028406:	220b      	movs	r2, #11
 1028408:	701a      	strb	r2, [r3, #0]
 102840a:	3301      	adds	r3, #1
	for ( i = 0; i < st_21.nbr_present_demands; i++ ) {
 102840c:	1b1a      	subs	r2, r3, r4
 102840e:	b2d2      	uxtb	r2, r2
 1028410:	4290      	cmp	r0, r2
 1028412:	f63f af0f 	bhi.w	1028234 <REGS_APP_bSt_27_restore_default_values+0x38>
 1028416:	e730      	b.n	102827a <REGS_APP_bSt_27_restore_default_values+0x7e>
				st_27_temp.present_demand_select[i] = PD_VAR_NET_ID;
 1028418:	220a      	movs	r2, #10
 102841a:	701a      	strb	r2, [r3, #0]
 102841c:	3301      	adds	r3, #1
	for ( i = 0; i < st_21.nbr_present_demands; i++ ) {
 102841e:	1b1a      	subs	r2, r3, r4
 1028420:	b2d2      	uxtb	r2, r2
 1028422:	4290      	cmp	r0, r2
 1028424:	f63f af06 	bhi.w	1028234 <REGS_APP_bSt_27_restore_default_values+0x38>
 1028428:	e727      	b.n	102827a <REGS_APP_bSt_27_restore_default_values+0x7e>
				st_27_temp.present_demand_select[i] = PD_VAR_REC_ID;
 102842a:	2209      	movs	r2, #9
 102842c:	701a      	strb	r2, [r3, #0]
 102842e:	3301      	adds	r3, #1
	for ( i = 0; i < st_21.nbr_present_demands; i++ ) {
 1028430:	1b1a      	subs	r2, r3, r4
 1028432:	b2d2      	uxtb	r2, r2
 1028434:	4290      	cmp	r0, r2
 1028436:	f63f aefd 	bhi.w	1028234 <REGS_APP_bSt_27_restore_default_values+0x38>
 102843a:	e71e      	b.n	102827a <REGS_APP_bSt_27_restore_default_values+0x7e>
				st_27_temp.present_demand_select[i] = PD_VAR_DEL_ID;
 102843c:	2208      	movs	r2, #8
 102843e:	701a      	strb	r2, [r3, #0]
 1028440:	3301      	adds	r3, #1
	for ( i = 0; i < st_21.nbr_present_demands; i++ ) {
 1028442:	1b1a      	subs	r2, r3, r4
 1028444:	b2d2      	uxtb	r2, r2
 1028446:	4290      	cmp	r0, r2
 1028448:	f63f aef4 	bhi.w	1028234 <REGS_APP_bSt_27_restore_default_values+0x38>
 102844c:	e715      	b.n	102827a <REGS_APP_bSt_27_restore_default_values+0x7e>
				st_27_temp.present_demand_select[i] = PD_VAR_Q4_ID;
 102844e:	2207      	movs	r2, #7
 1028450:	701a      	strb	r2, [r3, #0]
 1028452:	3301      	adds	r3, #1
	for ( i = 0; i < st_21.nbr_present_demands; i++ ) {
 1028454:	1b1a      	subs	r2, r3, r4
 1028456:	b2d2      	uxtb	r2, r2
 1028458:	4290      	cmp	r0, r2
 102845a:	f63f aeeb 	bhi.w	1028234 <REGS_APP_bSt_27_restore_default_values+0x38>
 102845e:	e70c      	b.n	102827a <REGS_APP_bSt_27_restore_default_values+0x7e>
				st_27_temp.present_demand_select[i] = PD_VAR_Q3_ID;
 1028460:	2206      	movs	r2, #6
 1028462:	701a      	strb	r2, [r3, #0]
 1028464:	3301      	adds	r3, #1
	for ( i = 0; i < st_21.nbr_present_demands; i++ ) {
 1028466:	1b1a      	subs	r2, r3, r4
 1028468:	b2d2      	uxtb	r2, r2
 102846a:	4290      	cmp	r0, r2
 102846c:	f63f aee2 	bhi.w	1028234 <REGS_APP_bSt_27_restore_default_values+0x38>
 1028470:	e703      	b.n	102827a <REGS_APP_bSt_27_restore_default_values+0x7e>
				st_27_temp.present_demand_select[i] = PD_VAR_Q2_ID;
 1028472:	2205      	movs	r2, #5
 1028474:	701a      	strb	r2, [r3, #0]
 1028476:	3301      	adds	r3, #1
	for ( i = 0; i < st_21.nbr_present_demands; i++ ) {
 1028478:	1b1a      	subs	r2, r3, r4
 102847a:	b2d2      	uxtb	r2, r2
 102847c:	4290      	cmp	r0, r2
 102847e:	f63f aed9 	bhi.w	1028234 <REGS_APP_bSt_27_restore_default_values+0x38>
 1028482:	e6fa      	b.n	102827a <REGS_APP_bSt_27_restore_default_values+0x7e>
				st_27_temp.present_demand_select[i] = PD_VAR_Q1_ID;
 1028484:	2204      	movs	r2, #4
 1028486:	701a      	strb	r2, [r3, #0]
 1028488:	3301      	adds	r3, #1
	for ( i = 0; i < st_21.nbr_present_demands; i++ ) {
 102848a:	1b1a      	subs	r2, r3, r4
 102848c:	b2d2      	uxtb	r2, r2
 102848e:	4290      	cmp	r0, r2
 1028490:	f63f aed0 	bhi.w	1028234 <REGS_APP_bSt_27_restore_default_values+0x38>
 1028494:	e6f1      	b.n	102827a <REGS_APP_bSt_27_restore_default_values+0x7e>
				st_27_temp.present_demand_select[i] = PD_W_SUM_ID;
 1028496:	2203      	movs	r2, #3
 1028498:	701a      	strb	r2, [r3, #0]
 102849a:	3301      	adds	r3, #1
	for ( i = 0; i < st_21.nbr_present_demands; i++ ) {
 102849c:	1b1a      	subs	r2, r3, r4
 102849e:	b2d2      	uxtb	r2, r2
 10284a0:	4290      	cmp	r0, r2
 10284a2:	f63f aec7 	bhi.w	1028234 <REGS_APP_bSt_27_restore_default_values+0x38>
 10284a6:	e6e8      	b.n	102827a <REGS_APP_bSt_27_restore_default_values+0x7e>
				st_27_temp.present_demand_select[i] = PD_W_NET_ID;
 10284a8:	2202      	movs	r2, #2
 10284aa:	701a      	strb	r2, [r3, #0]
 10284ac:	3301      	adds	r3, #1
	for ( i = 0; i < st_21.nbr_present_demands; i++ ) {
 10284ae:	1b1a      	subs	r2, r3, r4
 10284b0:	b2d2      	uxtb	r2, r2
 10284b2:	4290      	cmp	r0, r2
 10284b4:	f63f aebe 	bhi.w	1028234 <REGS_APP_bSt_27_restore_default_values+0x38>
 10284b8:	e6df      	b.n	102827a <REGS_APP_bSt_27_restore_default_values+0x7e>
				st_27_temp.present_demand_select[i] = PD_W_REC_ID;
 10284ba:	2201      	movs	r2, #1
 10284bc:	701a      	strb	r2, [r3, #0]
 10284be:	3301      	adds	r3, #1
	for ( i = 0; i < st_21.nbr_present_demands; i++ ) {
 10284c0:	1b1a      	subs	r2, r3, r4
 10284c2:	b2d2      	uxtb	r2, r2
 10284c4:	4290      	cmp	r0, r2
 10284c6:	f63f aeb5 	bhi.w	1028234 <REGS_APP_bSt_27_restore_default_values+0x38>
 10284ca:	e6d6      	b.n	102827a <REGS_APP_bSt_27_restore_default_values+0x7e>
				st_27_temp.present_demand_select[i] = PD_W_DEL_ID;
 10284cc:	2200      	movs	r2, #0
 10284ce:	701a      	strb	r2, [r3, #0]
 10284d0:	3301      	adds	r3, #1
	for ( i = 0; i < st_21.nbr_present_demands; i++ ) {
 10284d2:	1b1a      	subs	r2, r3, r4
 10284d4:	b2d2      	uxtb	r2, r2
 10284d6:	4290      	cmp	r0, r2
 10284d8:	f63f aeac 	bhi.w	1028234 <REGS_APP_bSt_27_restore_default_values+0x38>
 10284dc:	e6cd      	b.n	102827a <REGS_APP_bSt_27_restore_default_values+0x7e>
 10284de:	bf00      	nop
 10284e0:	01030b71 	.word	0x01030b71
 10284e4:	2000797c 	.word	0x2000797c
 10284e8:	2000798e 	.word	0x2000798e
 10284ec:	20007f90 	.word	0x20007f90
 10284f0:	010261f1 	.word	0x010261f1
 10284f4:	0101f735 	.word	0x0101f735
 10284f8:	0101f7e5 	.word	0x0101f7e5

010284fc <REGS_APP_bSt_27_refresh_ram>:
bool REGS_APP_bSt_27_refresh_ram(void) {
 10284fc:	b530      	push	{r4, r5, lr}
 10284fe:	b08d      	sub	sp, #52	; 0x34
		REGS_APP_vSt_27_read_eeprom_values(&st_27_temp);
 1028500:	a801      	add	r0, sp, #4
 1028502:	4b07      	ldr	r3, [pc, #28]	; (1028520 <REGS_APP_bSt_27_refresh_ram+0x24>)
			st_27 = st_27_temp;
 1028504:	4d07      	ldr	r5, [pc, #28]	; (1028524 <REGS_APP_bSt_27_refresh_ram+0x28>)
 1028506:	ac01      	add	r4, sp, #4
		REGS_APP_vSt_27_read_eeprom_values(&st_27_temp);
 1028508:	4798      	blx	r3
			st_27 = st_27_temp;
 102850a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 102850c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 102850e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 1028510:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 1028512:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 1028516:	c503      	stmia	r5!, {r0, r1}
}
 1028518:	2001      	movs	r0, #1
			st_27 = st_27_temp;
 102851a:	802a      	strh	r2, [r5, #0]
}
 102851c:	b00d      	add	sp, #52	; 0x34
 102851e:	bd30      	pop	{r4, r5, pc}
 1028520:	0102604d 	.word	0x0102604d
 1028524:	20007f90 	.word	0x20007f90

01028528 <REGS_APP_bLoad_st_27>:
bool REGS_APP_bLoad_st_27(void) {
 1028528:	b510      	push	{r4, lr}
	if ( SM_APP_ucGet_table_state(ST_27_PROG_STATE_ADDR) != C1219_TABLE_FULL ) {
 102852a:	f240 70d5 	movw	r0, #2005	; 0x7d5
 102852e:	4b06      	ldr	r3, [pc, #24]	; (1028548 <REGS_APP_bLoad_st_27+0x20>)
 1028530:	4798      	blx	r3
 1028532:	2845      	cmp	r0, #69	; 0x45
 1028534:	d003      	beq.n	102853e <REGS_APP_bLoad_st_27+0x16>
		is_ok = REGS_APP_bSt_27_restore_default_values();
 1028536:	4b05      	ldr	r3, [pc, #20]	; (102854c <REGS_APP_bLoad_st_27+0x24>)
}
 1028538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		is_ok = REGS_APP_bSt_27_restore_default_values();
 102853c:	4718      	bx	r3
		is_ok = REGS_APP_bSt_27_refresh_ram();
 102853e:	4b04      	ldr	r3, [pc, #16]	; (1028550 <REGS_APP_bLoad_st_27+0x28>)
}
 1028540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		is_ok = REGS_APP_bSt_27_refresh_ram();
 1028544:	4718      	bx	r3
 1028546:	bf00      	nop
 1028548:	010203cd 	.word	0x010203cd
 102854c:	010281fd 	.word	0x010281fd
 1028550:	010284fd 	.word	0x010284fd

01028554 <REGS_APP_vCopy_st_27_ram>:
void REGS_APP_vCopy_st_27_ram(uint8_t* destination) {
 1028554:	b4f0      	push	{r4, r5, r6, r7}
 1028556:	4f16      	ldr	r7, [pc, #88]	; (10285b0 <REGS_APP_vCopy_st_27_ram+0x5c>)
	for ( i = 0; i < st_21.nbr_present_demands; i++ ) {
 1028558:	4c16      	ldr	r4, [pc, #88]	; (10285b4 <REGS_APP_vCopy_st_27_ram+0x60>)
void REGS_APP_vCopy_st_27_ram(uint8_t* destination) {
 102855a:	4605      	mov	r5, r0
 102855c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 102855e:	b08c      	sub	sp, #48	; 0x30
 1028560:	ae01      	add	r6, sp, #4
 1028562:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 1028564:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 1028566:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 1028568:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 102856c:	c603      	stmia	r6!, {r0, r1}
	for ( i = 0; i < st_21.nbr_present_demands; i++ ) {
 102856e:	7a21      	ldrb	r1, [r4, #8]
 1028570:	8032      	strh	r2, [r6, #0]
 1028572:	b159      	cbz	r1, 102858c <REGS_APP_vCopy_st_27_ram+0x38>
 1028574:	2300      	movs	r3, #0
		table_buffer[k++] = (uint8_t)st_27_source.present_demand_select[i];
 1028576:	aa0c      	add	r2, sp, #48	; 0x30
 1028578:	441a      	add	r2, r3
 102857a:	1c59      	adds	r1, r3, #1
 102857c:	f812 2c2c 	ldrb.w	r2, [r2, #-44]
 1028580:	54ea      	strb	r2, [r5, r3]
	for ( i = 0; i < st_21.nbr_present_demands; i++ ) {
 1028582:	7a22      	ldrb	r2, [r4, #8]
		table_buffer[k++] = (uint8_t)st_27_source.present_demand_select[i];
 1028584:	b2c9      	uxtb	r1, r1
	for ( i = 0; i < st_21.nbr_present_demands; i++ ) {
 1028586:	428a      	cmp	r2, r1
 1028588:	460b      	mov	r3, r1
 102858a:	d8f4      	bhi.n	1028576 <REGS_APP_vCopy_st_27_ram+0x22>
	for ( i = 0; i < st_21.nbr_present_values; i++ ) {
 102858c:	7a63      	ldrb	r3, [r4, #9]
 102858e:	b163      	cbz	r3, 10285aa <REGS_APP_vCopy_st_27_ram+0x56>
 1028590:	2300      	movs	r3, #0
		table_buffer[k++] = (uint8_t)st_27_source.present_value_select[i];
 1028592:	a80c      	add	r0, sp, #48	; 0x30
 1028594:	18ca      	adds	r2, r1, r3
 1028596:	4418      	add	r0, r3
 1028598:	b2d2      	uxtb	r2, r2
 102859a:	f810 0c2a 	ldrb.w	r0, [r0, #-42]
 102859e:	54a8      	strb	r0, [r5, r2]
	for ( i = 0; i < st_21.nbr_present_values; i++ ) {
 10285a0:	3301      	adds	r3, #1
 10285a2:	7a62      	ldrb	r2, [r4, #9]
 10285a4:	b2db      	uxtb	r3, r3
 10285a6:	429a      	cmp	r2, r3
 10285a8:	d8f3      	bhi.n	1028592 <REGS_APP_vCopy_st_27_ram+0x3e>
}
 10285aa:	b00c      	add	sp, #48	; 0x30
 10285ac:	bcf0      	pop	{r4, r5, r6, r7}
 10285ae:	4770      	bx	lr
 10285b0:	20007f90 	.word	0x20007f90
 10285b4:	2000797c 	.word	0x2000797c

010285b8 <REGS_APP_vCopy_st_27_nvm>:
void REGS_APP_vCopy_st_27_nvm(uint8_t* destination) {
 10285b8:	b570      	push	{r4, r5, r6, lr}
 10285ba:	b096      	sub	sp, #88	; 0x58
	REGS_APP_vSt_27_read_eeprom_values(&st_27_aux);
 10285bc:	4b16      	ldr	r3, [pc, #88]	; (1028618 <REGS_APP_vCopy_st_27_nvm+0x60>)
void REGS_APP_vCopy_st_27_nvm(uint8_t* destination) {
 10285be:	4605      	mov	r5, r0
 10285c0:	466c      	mov	r4, sp
	REGS_APP_vSt_27_read_eeprom_values(&st_27_aux);
 10285c2:	4668      	mov	r0, sp
 10285c4:	4798      	blx	r3
 10285c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 10285c8:	ae0b      	add	r6, sp, #44	; 0x2c
 10285ca:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 10285cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 10285ce:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 10285d0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
	for ( i = 0; i < st_21.nbr_present_demands; i++ ) {
 10285d4:	4c11      	ldr	r4, [pc, #68]	; (102861c <REGS_APP_vCopy_st_27_nvm+0x64>)
 10285d6:	c603      	stmia	r6!, {r0, r1}
 10285d8:	7a21      	ldrb	r1, [r4, #8]
 10285da:	8032      	strh	r2, [r6, #0]
 10285dc:	b159      	cbz	r1, 10285f6 <REGS_APP_vCopy_st_27_nvm+0x3e>
 10285de:	2300      	movs	r3, #0
		table_buffer[k++] = (uint8_t)st_27_source.present_demand_select[i];
 10285e0:	aa16      	add	r2, sp, #88	; 0x58
 10285e2:	441a      	add	r2, r3
 10285e4:	1c59      	adds	r1, r3, #1
 10285e6:	f812 2c2c 	ldrb.w	r2, [r2, #-44]
 10285ea:	54ea      	strb	r2, [r5, r3]
	for ( i = 0; i < st_21.nbr_present_demands; i++ ) {
 10285ec:	7a22      	ldrb	r2, [r4, #8]
		table_buffer[k++] = (uint8_t)st_27_source.present_demand_select[i];
 10285ee:	b2c9      	uxtb	r1, r1
	for ( i = 0; i < st_21.nbr_present_demands; i++ ) {
 10285f0:	428a      	cmp	r2, r1
 10285f2:	460b      	mov	r3, r1
 10285f4:	d8f4      	bhi.n	10285e0 <REGS_APP_vCopy_st_27_nvm+0x28>
	for ( i = 0; i < st_21.nbr_present_values; i++ ) {
 10285f6:	7a63      	ldrb	r3, [r4, #9]
 10285f8:	b163      	cbz	r3, 1028614 <REGS_APP_vCopy_st_27_nvm+0x5c>
 10285fa:	2300      	movs	r3, #0
		table_buffer[k++] = (uint8_t)st_27_source.present_value_select[i];
 10285fc:	a816      	add	r0, sp, #88	; 0x58
 10285fe:	18ca      	adds	r2, r1, r3
 1028600:	4418      	add	r0, r3
 1028602:	b2d2      	uxtb	r2, r2
 1028604:	f810 0c2a 	ldrb.w	r0, [r0, #-42]
 1028608:	54a8      	strb	r0, [r5, r2]
	for ( i = 0; i < st_21.nbr_present_values; i++ ) {
 102860a:	3301      	adds	r3, #1
 102860c:	7a62      	ldrb	r2, [r4, #9]
 102860e:	b2db      	uxtb	r3, r3
 1028610:	429a      	cmp	r2, r3
 1028612:	d8f3      	bhi.n	10285fc <REGS_APP_vCopy_st_27_nvm+0x44>
}
 1028614:	b016      	add	sp, #88	; 0x58
 1028616:	bd70      	pop	{r4, r5, r6, pc}
 1028618:	0102604d 	.word	0x0102604d
 102861c:	2000797c 	.word	0x2000797c

01028620 <REGS_APP_vSt_27_recover_nvm>:
	REGS_APP_vSt_27_write_eeprom_values(&st_27);
 1028620:	4b00      	ldr	r3, [pc, #0]	; (1028624 <REGS_APP_vSt_27_recover_nvm+0x4>)
 1028622:	4718      	bx	r3
 1028624:	010261f1 	.word	0x010261f1

01028628 <REGS_APP_vSt_27_recover_ram>:
	REGS_APP_vSt_27_read_eeprom_values(&st_27);
 1028628:	4801      	ldr	r0, [pc, #4]	; (1028630 <REGS_APP_vSt_27_recover_ram+0x8>)
 102862a:	4b02      	ldr	r3, [pc, #8]	; (1028634 <REGS_APP_vSt_27_recover_ram+0xc>)
 102862c:	4718      	bx	r3
 102862e:	bf00      	nop
 1028630:	20007f90 	.word	0x20007f90
 1028634:	0102604d 	.word	0x0102604d

01028638 <REGS_APP_bSt_27_execute_table_reading>:
bool REGS_APP_bSt_27_execute_table_reading(uint8_t *table_buffer) {
 1028638:	b4f0      	push	{r4, r5, r6, r7}
 102863a:	4f17      	ldr	r7, [pc, #92]	; (1028698 <REGS_APP_bSt_27_execute_table_reading+0x60>)
	for ( i = 0; i < st_21.nbr_present_demands; i++ ) {
 102863c:	4c17      	ldr	r4, [pc, #92]	; (102869c <REGS_APP_bSt_27_execute_table_reading+0x64>)
bool REGS_APP_bSt_27_execute_table_reading(uint8_t *table_buffer) {
 102863e:	4605      	mov	r5, r0
 1028640:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 1028642:	b08c      	sub	sp, #48	; 0x30
 1028644:	ae01      	add	r6, sp, #4
 1028646:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 1028648:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 102864a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 102864c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 1028650:	c603      	stmia	r6!, {r0, r1}
	for ( i = 0; i < st_21.nbr_present_demands; i++ ) {
 1028652:	7a21      	ldrb	r1, [r4, #8]
 1028654:	8032      	strh	r2, [r6, #0]
 1028656:	b159      	cbz	r1, 1028670 <REGS_APP_bSt_27_execute_table_reading+0x38>
 1028658:	2300      	movs	r3, #0
		table_buffer[k++] = (uint8_t)st_27_source.present_demand_select[i];
 102865a:	aa0c      	add	r2, sp, #48	; 0x30
 102865c:	441a      	add	r2, r3
 102865e:	1c59      	adds	r1, r3, #1
 1028660:	f812 2c2c 	ldrb.w	r2, [r2, #-44]
 1028664:	54ea      	strb	r2, [r5, r3]
	for ( i = 0; i < st_21.nbr_present_demands; i++ ) {
 1028666:	7a22      	ldrb	r2, [r4, #8]
		table_buffer[k++] = (uint8_t)st_27_source.present_demand_select[i];
 1028668:	b2c9      	uxtb	r1, r1
	for ( i = 0; i < st_21.nbr_present_demands; i++ ) {
 102866a:	428a      	cmp	r2, r1
 102866c:	460b      	mov	r3, r1
 102866e:	d8f4      	bhi.n	102865a <REGS_APP_bSt_27_execute_table_reading+0x22>
	for ( i = 0; i < st_21.nbr_present_values; i++ ) {
 1028670:	7a63      	ldrb	r3, [r4, #9]
 1028672:	b163      	cbz	r3, 102868e <REGS_APP_bSt_27_execute_table_reading+0x56>
 1028674:	2300      	movs	r3, #0
		table_buffer[k++] = (uint8_t)st_27_source.present_value_select[i];
 1028676:	a80c      	add	r0, sp, #48	; 0x30
 1028678:	18ca      	adds	r2, r1, r3
 102867a:	4418      	add	r0, r3
 102867c:	b2d2      	uxtb	r2, r2
 102867e:	f810 0c2a 	ldrb.w	r0, [r0, #-42]
 1028682:	54a8      	strb	r0, [r5, r2]
	for ( i = 0; i < st_21.nbr_present_values; i++ ) {
 1028684:	3301      	adds	r3, #1
 1028686:	7a62      	ldrb	r2, [r4, #9]
 1028688:	b2db      	uxtb	r3, r3
 102868a:	429a      	cmp	r2, r3
 102868c:	d8f3      	bhi.n	1028676 <REGS_APP_bSt_27_execute_table_reading+0x3e>
}
 102868e:	2001      	movs	r0, #1
 1028690:	b00c      	add	sp, #48	; 0x30
 1028692:	bcf0      	pop	{r4, r5, r6, r7}
 1028694:	4770      	bx	lr
 1028696:	bf00      	nop
 1028698:	20007f90 	.word	0x20007f90
 102869c:	2000797c 	.word	0x2000797c

010286a0 <REGS_APP_bSt_27_execute_table_writing>:
bool REGS_APP_bSt_27_execute_table_writing(uint8_t *table_buffer) {
 10286a0:	b570      	push	{r4, r5, r6, lr}
	for ( i = 0; i < st_21.nbr_present_demands; i++ ) {
 10286a2:	4a14      	ldr	r2, [pc, #80]	; (10286f4 <REGS_APP_bSt_27_execute_table_writing+0x54>)
 10286a4:	7a13      	ldrb	r3, [r2, #8]
bool REGS_APP_bSt_27_execute_table_writing(uint8_t *table_buffer) {
 10286a6:	b08c      	sub	sp, #48	; 0x30
	for ( i = 0; i < st_21.nbr_present_demands; i++ ) {
 10286a8:	b143      	cbz	r3, 10286bc <REGS_APP_bSt_27_execute_table_writing+0x1c>
		st_27_temp.present_demand_select[i] = (PRESENT_DEMAND_ID_TYPE)table_buffer[k++];
 10286aa:	7801      	ldrb	r1, [r0, #0]
 10286ac:	f88d 1004 	strb.w	r1, [sp, #4]
	for ( i = 0; i < st_21.nbr_present_demands; i++ ) {
 10286b0:	2b01      	cmp	r3, #1
		st_27_temp.present_demand_select[i] = (PRESENT_DEMAND_ID_TYPE)table_buffer[k++];
 10286b2:	bf86      	itte	hi
 10286b4:	7841      	ldrbhi	r1, [r0, #1]
 10286b6:	f88d 1005 	strbhi.w	r1, [sp, #5]
	for ( i = 0; i < st_21.nbr_present_demands; i++ ) {
 10286ba:	2301      	movls	r3, #1
	for ( i = 0; i < st_21.nbr_present_values; i++ ) {
 10286bc:	7a54      	ldrb	r4, [r2, #9]
 10286be:	b154      	cbz	r4, 10286d6 <REGS_APP_bSt_27_execute_table_writing+0x36>
 10286c0:	441c      	add	r4, r3
 10286c2:	b2e4      	uxtb	r4, r4
 10286c4:	f10d 0205 	add.w	r2, sp, #5
		st_27_temp.present_value_select[i] = (INSTANTANEOUS_VALUE_ID_TYPE)table_buffer[k++];
 10286c8:	1c59      	adds	r1, r3, #1
 10286ca:	5cc3      	ldrb	r3, [r0, r3]
 10286cc:	f802 3f01 	strb.w	r3, [r2, #1]!
 10286d0:	b2cb      	uxtb	r3, r1
	for ( i = 0; i < st_21.nbr_present_values; i++ ) {
 10286d2:	42a3      	cmp	r3, r4
 10286d4:	d1f8      	bne.n	10286c8 <REGS_APP_bSt_27_execute_table_writing+0x28>
		st_27 = st_27_temp;
 10286d6:	ad01      	add	r5, sp, #4
 10286d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 10286da:	4c07      	ldr	r4, [pc, #28]	; (10286f8 <REGS_APP_bSt_27_execute_table_writing+0x58>)
		REGS_APP_vSt_27_write_eeprom_values(&st_27);
 10286dc:	4e07      	ldr	r6, [pc, #28]	; (10286fc <REGS_APP_bSt_27_execute_table_writing+0x5c>)
		st_27 = st_27_temp;
 10286de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 10286e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 10286e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 10286e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 10286e8:	c403      	stmia	r4!, {r0, r1}
 10286ea:	8022      	strh	r2, [r4, #0]
		REGS_APP_vSt_27_write_eeprom_values(&st_27);
 10286ec:	47b0      	blx	r6
}
 10286ee:	2001      	movs	r0, #1
 10286f0:	b00c      	add	sp, #48	; 0x30
 10286f2:	bd70      	pop	{r4, r5, r6, pc}
 10286f4:	2000797c 	.word	0x2000797c
 10286f8:	20007f90 	.word	0x20007f90
 10286fc:	010261f1 	.word	0x010261f1

01028700 <REGS_APP_usSt_27_get_size>:
	return (uint8_t)(st_21.nbr_present_demands + st_21.nbr_present_values);
 1028700:	4b02      	ldr	r3, [pc, #8]	; (102870c <REGS_APP_usSt_27_get_size+0xc>)
 1028702:	7a18      	ldrb	r0, [r3, #8]
 1028704:	7a5b      	ldrb	r3, [r3, #9]
 1028706:	4418      	add	r0, r3
}
 1028708:	b2c0      	uxtb	r0, r0
 102870a:	4770      	bx	lr
 102870c:	2000797c 	.word	0x2000797c

01028710 <REGS_APP_bSt_28_execute_table_reading>:
bool REGS_APP_bSt_28_execute_table_reading(uint8_t *table_buffer) {
 1028710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for ( j = 0; j < st_21.nbr_present_demands; j++ ) {
 1028714:	4b19      	ldr	r3, [pc, #100]	; (102877c <REGS_APP_bSt_28_execute_table_reading+0x6c>)
bool REGS_APP_bSt_28_execute_table_reading(uint8_t *table_buffer) {
 1028716:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
	for ( j = 0; j < st_21.nbr_present_demands; j++ ) {
 102871a:	f893 b008 	ldrb.w	fp, [r3, #8]
bool REGS_APP_bSt_28_execute_table_reading(uint8_t *table_buffer) {
 102871e:	9002      	str	r0, [sp, #8]
	for ( j = 0; j < st_21.nbr_present_demands; j++ ) {
 1028720:	f1bb 0f00 	cmp.w	fp, #0
 1028724:	d06d      	beq.n	1028802 <REGS_APP_bSt_28_execute_table_reading+0xf2>
 1028726:	f04f 0b00 	mov.w	fp, #0
 102872a:	f8df 8060 	ldr.w	r8, [pc, #96]	; 102878c <REGS_APP_bSt_28_execute_table_reading+0x7c>
 102872e:	465e      	mov	r6, fp
	for ( uint8_t i = 0; i < st_21.nbr_demands; i++ ) {
 1028730:	4b12      	ldr	r3, [pc, #72]	; (102877c <REGS_APP_bSt_28_execute_table_reading+0x6c>)
 1028732:	791f      	ldrb	r7, [r3, #4]
 1028734:	b367      	cbz	r7, 1028790 <REGS_APP_bSt_28_execute_table_reading+0x80>
 1028736:	2400      	movs	r4, #0
 1028738:	4d11      	ldr	r5, [pc, #68]	; (1028780 <REGS_APP_bSt_28_execute_table_reading+0x70>)
 102873a:	9701      	str	r7, [sp, #4]
 102873c:	4620      	mov	r0, r4
 102873e:	4621      	mov	r1, r4
 1028740:	e006      	b.n	1028750 <REGS_APP_bSt_28_execute_table_reading+0x40>
 1028742:	3401      	adds	r4, #1
 1028744:	9a01      	ldr	r2, [sp, #4]
 1028746:	b2e3      	uxtb	r3, r4
 1028748:	429a      	cmp	r2, r3
 102874a:	f105 0508 	add.w	r5, r5, #8
 102874e:	d921      	bls.n	1028794 <REGS_APP_bSt_28_execute_table_reading+0x84>
		if ( (uint8_t)(st_22.demand_select[i] - AD_W_DEL_ID) == (uint8_t)(demand_id - PD_W_DEL_ID)) {
 1028750:	eb08 0304 	add.w	r3, r8, r4
 1028754:	799b      	ldrb	r3, [r3, #6]
 1028756:	42b3      	cmp	r3, r6
 1028758:	d1f3      	bne.n	1028742 <REGS_APP_bSt_28_execute_table_reading+0x32>
			if ( demand.interval[int_nbr].present_demand[i] < 0 ) {
 102875a:	e895 0600 	ldmia.w	r5, {r9, sl}
 102875e:	2200      	movs	r2, #0
 1028760:	4648      	mov	r0, r9
 1028762:	4651      	mov	r1, sl
 1028764:	2300      	movs	r3, #0
 1028766:	4f07      	ldr	r7, [pc, #28]	; (1028784 <REGS_APP_bSt_28_execute_table_reading+0x74>)
 1028768:	47b8      	blx	r7
 102876a:	2800      	cmp	r0, #0
 102876c:	f040 814d 	bne.w	1028a0a <REGS_APP_bSt_28_execute_table_reading+0x2fa>
				present_demand = (uint64_t)(demand.interval[int_nbr].present_demand[i]);
 1028770:	4648      	mov	r0, r9
 1028772:	4651      	mov	r1, sl
 1028774:	4b04      	ldr	r3, [pc, #16]	; (1028788 <REGS_APP_bSt_28_execute_table_reading+0x78>)
 1028776:	4798      	blx	r3
 1028778:	e7e3      	b.n	1028742 <REGS_APP_bSt_28_execute_table_reading+0x32>
 102877a:	bf00      	nop
 102877c:	2000797c 	.word	0x2000797c
 1028780:	200077e0 	.word	0x200077e0
 1028784:	010304e9 	.word	0x010304e9
 1028788:	01030659 	.word	0x01030659
 102878c:	20007988 	.word	0x20007988
	for ( uint8_t i = 0; i < st_21.nbr_demands; i++ ) {
 1028790:	2000      	movs	r0, #0
 1028792:	4601      	mov	r1, r0
		if ( (st_21.reg_func1_flags & TIME_REMAINING_FLAG_bm) == TIME_REMAINING_FLAG_bm )
 1028794:	4b8a      	ldr	r3, [pc, #552]	; (10289c0 <REGS_APP_bSt_28_execute_table_reading+0x2b0>)
 1028796:	781b      	ldrb	r3, [r3, #0]
 1028798:	065b      	lsls	r3, r3, #25
 102879a:	d513      	bpl.n	10287c4 <REGS_APP_bSt_28_execute_table_reading+0xb4>
	remaining_time = demand.config.interval_length - demand.interval[int_nbr].current_seconds;
 102879c:	4b89      	ldr	r3, [pc, #548]	; (10289c4 <REGS_APP_bSt_28_execute_table_reading+0x2b4>)
 102879e:	4a89      	ldr	r2, [pc, #548]	; (10289c4 <REGS_APP_bSt_28_execute_table_reading+0x2b4>)
 10287a0:	9d02      	ldr	r5, [sp, #8]
 10287a2:	8912      	ldrh	r2, [r2, #8]
 10287a4:	885b      	ldrh	r3, [r3, #2]
 10287a6:	f10b 0404 	add.w	r4, fp, #4
 10287aa:	1a9b      	subs	r3, r3, r2
 10287ac:	462a      	mov	r2, r5
		rem_time = (uint32_t)REGS_APP_vGet_present_demand_time_remining(INTERVAL_0);
 10287ae:	b29b      	uxth	r3, r3
 10287b0:	44ab      	add	fp, r5
 10287b2:	4422      	add	r2, r4
		data[val_index++] = value & 0xFF;
 10287b4:	f80b 3b01 	strb.w	r3, [fp], #1
	while (val_index < 4)
 10287b8:	455a      	cmp	r2, fp
		value = value >> 8;
 10287ba:	ea4f 2313 	mov.w	r3, r3, lsr #8
	while (val_index < 4)
 10287be:	d1f9      	bne.n	10287b4 <REGS_APP_bSt_28_execute_table_reading+0xa4>
			k += TM_FMAT_SIZE;
 10287c0:	fa5f fb84 	uxtb.w	fp, r4
 10287c4:	9c02      	ldr	r4, [sp, #8]
 10287c6:	f10b 32ff 	add.w	r2, fp, #4294967295
 10287ca:	f10b 0507 	add.w	r5, fp, #7
 10287ce:	4422      	add	r2, r4
 10287d0:	4425      	add	r5, r4
		convert_64_bit_to_byte_array(inst_value, &table_buffer[k]);
 10287d2:	4603      	mov	r3, r0
 10287d4:	460c      	mov	r4, r1
        data[val_index++] = value & 0xFF;
 10287d6:	f802 3f01 	strb.w	r3, [r2, #1]!
        value = value >> 8;
 10287da:	0a1b      	lsrs	r3, r3, #8
    while (val_index < 8)
 10287dc:	4295      	cmp	r5, r2
        value = value >> 8;
 10287de:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 10287e2:	ea4f 2414 	mov.w	r4, r4, lsr #8
    while (val_index < 8)
 10287e6:	d1f6      	bne.n	10287d6 <REGS_APP_bSt_28_execute_table_reading+0xc6>
	for ( j = 0; j < st_21.nbr_present_demands; j++ ) {
 10287e8:	4b75      	ldr	r3, [pc, #468]	; (10289c0 <REGS_APP_bSt_28_execute_table_reading+0x2b0>)
 10287ea:	3601      	adds	r6, #1
 10287ec:	7a1b      	ldrb	r3, [r3, #8]
 10287ee:	b2f6      	uxtb	r6, r6
		k += NI_FMAT2_SIZE;
 10287f0:	f10b 0b05 	add.w	fp, fp, #5
	for ( j = 0; j < st_21.nbr_present_demands; j++ ) {
 10287f4:	42b3      	cmp	r3, r6
		k += NI_FMAT2_SIZE;
 10287f6:	fa5f fb8b 	uxtb.w	fp, fp
	for ( j = 0; j < st_21.nbr_present_demands; j++ ) {
 10287fa:	d899      	bhi.n	1028730 <REGS_APP_bSt_28_execute_table_reading+0x20>
 10287fc:	4b72      	ldr	r3, [pc, #456]	; (10289c8 <REGS_APP_bSt_28_execute_table_reading+0x2b8>)
 10287fe:	e883 0003 	stmia.w	r3, {r0, r1}
	METROLOGY_APP_vCopy_instantaneous_struct(&st_28_instantaneous);
 1028802:	4b72      	ldr	r3, [pc, #456]	; (10289cc <REGS_APP_bSt_28_execute_table_reading+0x2bc>)
 1028804:	a840      	add	r0, sp, #256	; 0x100
 1028806:	4798      	blx	r3
	for ( i = 0; i < st_21.nbr_present_values; i++ )
 1028808:	4b6d      	ldr	r3, [pc, #436]	; (10289c0 <REGS_APP_bSt_28_execute_table_reading+0x2b0>)
 102880a:	7a5b      	ldrb	r3, [r3, #9]
 102880c:	2b00      	cmp	r3, #0
 102880e:	f000 8124 	beq.w	1028a5a <REGS_APP_bSt_28_execute_table_reading+0x34a>
				inst_value = (uint64_t)st_28_instantaneous.Freq_t;
 1028812:	ab8e      	add	r3, sp, #568	; 0x238
 1028814:	4f6e      	ldr	r7, [pc, #440]	; (10289d0 <REGS_APP_bSt_28_execute_table_reading+0x2c0>)
 1028816:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 10289d4 <REGS_APP_bSt_28_execute_table_reading+0x2c4>
 102881a:	e9d3 0100 	ldrd	r0, r1, [r3]
 102881e:	47b8      	blx	r7
				inst_value = (uint64_t)st_28_instantaneous.PF_c;
 1028820:	ab84      	add	r3, sp, #528	; 0x210
				inst_value = (uint64_t)st_28_instantaneous.Freq_t;
 1028822:	4606      	mov	r6, r0
 1028824:	460d      	mov	r5, r1
				inst_value = (uint64_t)st_28_instantaneous.PF_c;
 1028826:	e9d3 0100 	ldrd	r0, r1, [r3]
 102882a:	47b8      	blx	r7
				inst_value = (uint64_t)st_28_instantaneous.PF_b;
 102882c:	ab82      	add	r3, sp, #520	; 0x208
				inst_value = (uint64_t)st_28_instantaneous.PF_c;
 102882e:	4604      	mov	r4, r0
 1028830:	4689      	mov	r9, r1
				inst_value = (uint64_t)st_28_instantaneous.PF_b;
 1028832:	e9d3 0100 	ldrd	r0, r1, [r3]
 1028836:	47b8      	blx	r7
				inst_value = (uint64_t)st_28_instantaneous.PF_a;
 1028838:	ab80      	add	r3, sp, #512	; 0x200
				inst_value = (uint64_t)st_28_instantaneous.PF_b;
 102883a:	4682      	mov	sl, r0
 102883c:	9126      	str	r1, [sp, #152]	; 0x98
				inst_value = (uint64_t)st_28_instantaneous.PF_a;
 102883e:	e9d3 0100 	ldrd	r0, r1, [r3]
 1028842:	47b8      	blx	r7
				inst_value = (uint64_t)st_28_instantaneous.PF_t;
 1028844:	ab7e      	add	r3, sp, #504	; 0x1f8
				inst_value = (uint64_t)st_28_instantaneous.PF_a;
 1028846:	9024      	str	r0, [sp, #144]	; 0x90
 1028848:	9125      	str	r1, [sp, #148]	; 0x94
				inst_value = (uint64_t)st_28_instantaneous.PF_t;
 102884a:	e9d3 0100 	ldrd	r0, r1, [r3]
 102884e:	47b8      	blx	r7
				inst_value = (uint64_t)st_28_instantaneous.Angle_PF_c;
 1028850:	ab7c      	add	r3, sp, #496	; 0x1f0
				inst_value = (uint64_t)st_28_instantaneous.PF_t;
 1028852:	9022      	str	r0, [sp, #136]	; 0x88
 1028854:	9123      	str	r1, [sp, #140]	; 0x8c
				inst_value = (uint64_t)st_28_instantaneous.Angle_PF_c;
 1028856:	e9d3 0100 	ldrd	r0, r1, [r3]
 102885a:	47b8      	blx	r7
				inst_value = (uint64_t)st_28_instantaneous.Angle_PF_b;
 102885c:	ab7a      	add	r3, sp, #488	; 0x1e8
				inst_value = (uint64_t)st_28_instantaneous.Angle_PF_c;
 102885e:	9020      	str	r0, [sp, #128]	; 0x80
 1028860:	9121      	str	r1, [sp, #132]	; 0x84
				inst_value = (uint64_t)st_28_instantaneous.Angle_PF_b;
 1028862:	e9d3 0100 	ldrd	r0, r1, [r3]
 1028866:	47b8      	blx	r7
				inst_value = (uint64_t)st_28_instantaneous.Angle_PF_a;
 1028868:	ab78      	add	r3, sp, #480	; 0x1e0
				inst_value = (uint64_t)st_28_instantaneous.Angle_PF_b;
 102886a:	901e      	str	r0, [sp, #120]	; 0x78
 102886c:	911f      	str	r1, [sp, #124]	; 0x7c
				inst_value = (uint64_t)st_28_instantaneous.Angle_PF_a;
 102886e:	e9d3 0100 	ldrd	r0, r1, [r3]
 1028872:	47b8      	blx	r7
				inst_value = (uint64_t)st_28_instantaneous.Angle_PF_t;
 1028874:	ab76      	add	r3, sp, #472	; 0x1d8
				inst_value = (uint64_t)st_28_instantaneous.Angle_PF_a;
 1028876:	901c      	str	r0, [sp, #112]	; 0x70
 1028878:	911d      	str	r1, [sp, #116]	; 0x74
				inst_value = (uint64_t)st_28_instantaneous.Angle_PF_t;
 102887a:	e9d3 0100 	ldrd	r0, r1, [r3]
 102887e:	47b8      	blx	r7
				inst_value = (uint64_t)st_28_instantaneous.Angle_I_c;
 1028880:	ab74      	add	r3, sp, #464	; 0x1d0
				inst_value = (uint64_t)st_28_instantaneous.Angle_PF_t;
 1028882:	901a      	str	r0, [sp, #104]	; 0x68
 1028884:	911b      	str	r1, [sp, #108]	; 0x6c
				inst_value = (uint64_t)st_28_instantaneous.Angle_I_c;
 1028886:	e9d3 0100 	ldrd	r0, r1, [r3]
 102888a:	47b8      	blx	r7
				inst_value = (uint64_t)st_28_instantaneous.Angle_I_b;
 102888c:	ab72      	add	r3, sp, #456	; 0x1c8
				inst_value = (uint64_t)st_28_instantaneous.Angle_I_c;
 102888e:	9018      	str	r0, [sp, #96]	; 0x60
 1028890:	9119      	str	r1, [sp, #100]	; 0x64
				inst_value = (uint64_t)st_28_instantaneous.Angle_I_b;
 1028892:	e9d3 0100 	ldrd	r0, r1, [r3]
 1028896:	47b8      	blx	r7
				inst_value = (uint64_t)st_28_instantaneous.Angle_I_a;
 1028898:	ab70      	add	r3, sp, #448	; 0x1c0
				inst_value = (uint64_t)st_28_instantaneous.Angle_I_b;
 102889a:	9016      	str	r0, [sp, #88]	; 0x58
 102889c:	9117      	str	r1, [sp, #92]	; 0x5c
				inst_value = (uint64_t)st_28_instantaneous.Angle_I_a;
 102889e:	e9d3 0100 	ldrd	r0, r1, [r3]
 10288a2:	47b8      	blx	r7
				inst_value = (uint64_t)st_28_instantaneous.Angle_V_c;
 10288a4:	ab6e      	add	r3, sp, #440	; 0x1b8
				inst_value = (uint64_t)st_28_instantaneous.Angle_I_a;
 10288a6:	9014      	str	r0, [sp, #80]	; 0x50
 10288a8:	9115      	str	r1, [sp, #84]	; 0x54
				inst_value = (uint64_t)st_28_instantaneous.Angle_V_c;
 10288aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 10288ae:	47b8      	blx	r7
				inst_value = (uint64_t)st_28_instantaneous.Angle_V_b;
 10288b0:	ab6c      	add	r3, sp, #432	; 0x1b0
				inst_value = (uint64_t)st_28_instantaneous.Angle_V_c;
 10288b2:	9012      	str	r0, [sp, #72]	; 0x48
 10288b4:	9113      	str	r1, [sp, #76]	; 0x4c
				inst_value = (uint64_t)st_28_instantaneous.Angle_V_b;
 10288b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 10288ba:	47b8      	blx	r7
				inst_value = (uint64_t)st_28_instantaneous.Angle_V_a;
 10288bc:	ab6a      	add	r3, sp, #424	; 0x1a8
				inst_value = (uint64_t)st_28_instantaneous.Angle_V_b;
 10288be:	9010      	str	r0, [sp, #64]	; 0x40
 10288c0:	9111      	str	r1, [sp, #68]	; 0x44
				inst_value = (uint64_t)st_28_instantaneous.Angle_V_a;
 10288c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 10288c6:	47b8      	blx	r7
				inst_value = (uint64_t)st_28_instantaneous.I_c;
 10288c8:	ab68      	add	r3, sp, #416	; 0x1a0
				inst_value = (uint64_t)st_28_instantaneous.Angle_V_a;
 10288ca:	900e      	str	r0, [sp, #56]	; 0x38
 10288cc:	910f      	str	r1, [sp, #60]	; 0x3c
				inst_value = (uint64_t)st_28_instantaneous.I_c;
 10288ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 10288d2:	47b8      	blx	r7
				inst_value = (uint64_t)st_28_instantaneous.I_b;
 10288d4:	ab66      	add	r3, sp, #408	; 0x198
				inst_value = (uint64_t)st_28_instantaneous.I_c;
 10288d6:	900c      	str	r0, [sp, #48]	; 0x30
 10288d8:	910d      	str	r1, [sp, #52]	; 0x34
				inst_value = (uint64_t)st_28_instantaneous.I_b;
 10288da:	e9d3 0100 	ldrd	r0, r1, [r3]
 10288de:	47b8      	blx	r7
				inst_value = (uint64_t)st_28_instantaneous.I_a;
 10288e0:	ab64      	add	r3, sp, #400	; 0x190
				inst_value = (uint64_t)st_28_instantaneous.I_b;
 10288e2:	900a      	str	r0, [sp, #40]	; 0x28
 10288e4:	910b      	str	r1, [sp, #44]	; 0x2c
				inst_value = (uint64_t)st_28_instantaneous.I_a;
 10288e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 10288ea:	47b8      	blx	r7
				inst_value = (uint64_t)st_28_instantaneous.V_c;
 10288ec:	ab5c      	add	r3, sp, #368	; 0x170
				inst_value = (uint64_t)st_28_instantaneous.I_a;
 10288ee:	9008      	str	r0, [sp, #32]
 10288f0:	9109      	str	r1, [sp, #36]	; 0x24
				inst_value = (uint64_t)st_28_instantaneous.V_c;
 10288f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 10288f6:	47b8      	blx	r7
				inst_value = (uint64_t)st_28_instantaneous.V_b;
 10288f8:	ab5a      	add	r3, sp, #360	; 0x168
				inst_value = (uint64_t)st_28_instantaneous.V_c;
 10288fa:	9006      	str	r0, [sp, #24]
 10288fc:	9107      	str	r1, [sp, #28]
				inst_value = (uint64_t)st_28_instantaneous.V_b;
 10288fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 1028902:	47b8      	blx	r7
				inst_value = (uint64_t)st_28_instantaneous.V_a;
 1028904:	ab58      	add	r3, sp, #352	; 0x160
				inst_value = (uint64_t)st_28_instantaneous.V_b;
 1028906:	9004      	str	r0, [sp, #16]
 1028908:	9105      	str	r1, [sp, #20]
				inst_value = (uint64_t)st_28_instantaneous.V_a;
 102890a:	e9d3 0100 	ldrd	r0, r1, [r3]
 102890e:	47b8      	blx	r7
				inst_value = (uint64_t)st_28_instantaneous.S_c;
 1028910:	ab56      	add	r3, sp, #344	; 0x158
				inst_value = (uint64_t)st_28_instantaneous.V_a;
 1028912:	9001      	str	r0, [sp, #4]
 1028914:	9103      	str	r1, [sp, #12]
				inst_value = (uint64_t)st_28_instantaneous.S_c;
 1028916:	e9d3 0100 	ldrd	r0, r1, [r3]
 102891a:	47b8      	blx	r7
				inst_value = (uint64_t)st_28_instantaneous.S_b;
 102891c:	ab54      	add	r3, sp, #336	; 0x150
				inst_value = (uint64_t)st_28_instantaneous.S_c;
 102891e:	903d      	str	r0, [sp, #244]	; 0xf4
 1028920:	913e      	str	r1, [sp, #248]	; 0xf8
				inst_value = (uint64_t)st_28_instantaneous.S_b;
 1028922:	e9d3 0100 	ldrd	r0, r1, [r3]
 1028926:	47b8      	blx	r7
				inst_value = (uint64_t)st_28_instantaneous.S_a;
 1028928:	ab52      	add	r3, sp, #328	; 0x148
				inst_value = (uint64_t)st_28_instantaneous.S_b;
 102892a:	903b      	str	r0, [sp, #236]	; 0xec
 102892c:	913c      	str	r1, [sp, #240]	; 0xf0
				inst_value = (uint64_t)st_28_instantaneous.S_a;
 102892e:	e9d3 0100 	ldrd	r0, r1, [r3]
 1028932:	47b8      	blx	r7
				inst_value = (uint64_t)st_28_instantaneous.S_t;
 1028934:	ab50      	add	r3, sp, #320	; 0x140
				inst_value = (uint64_t)st_28_instantaneous.S_a;
 1028936:	9039      	str	r0, [sp, #228]	; 0xe4
 1028938:	913a      	str	r1, [sp, #232]	; 0xe8
				inst_value = (uint64_t)st_28_instantaneous.S_t;
 102893a:	e9d3 0100 	ldrd	r0, r1, [r3]
 102893e:	47b8      	blx	r7
				inst_value = (uint64_t)fabs(st_28_instantaneous.Q_c);
 1028940:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
				inst_value = (uint64_t)st_28_instantaneous.S_t;
 1028942:	9037      	str	r0, [sp, #220]	; 0xdc
 1028944:	9138      	str	r1, [sp, #224]	; 0xe0
				inst_value = (uint64_t)fabs(st_28_instantaneous.Q_c);
 1028946:	984e      	ldr	r0, [sp, #312]	; 0x138
 1028948:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 102894c:	47b8      	blx	r7
				inst_value = (uint64_t)fabs(st_28_instantaneous.Q_b);
 102894e:	9b4d      	ldr	r3, [sp, #308]	; 0x134
				inst_value = (uint64_t)fabs(st_28_instantaneous.Q_c);
 1028950:	9035      	str	r0, [sp, #212]	; 0xd4
 1028952:	9136      	str	r1, [sp, #216]	; 0xd8
				inst_value = (uint64_t)fabs(st_28_instantaneous.Q_b);
 1028954:	984c      	ldr	r0, [sp, #304]	; 0x130
 1028956:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 102895a:	47b8      	blx	r7
				inst_value = (uint64_t)fabs(st_28_instantaneous.Q_a);
 102895c:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
				inst_value = (uint64_t)fabs(st_28_instantaneous.Q_b);
 102895e:	9033      	str	r0, [sp, #204]	; 0xcc
 1028960:	9134      	str	r1, [sp, #208]	; 0xd0
				inst_value = (uint64_t)fabs(st_28_instantaneous.Q_a);
 1028962:	984a      	ldr	r0, [sp, #296]	; 0x128
 1028964:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 1028968:	47b8      	blx	r7
				inst_value = (uint64_t)fabs(st_28_instantaneous.Q_t);
 102896a:	9b49      	ldr	r3, [sp, #292]	; 0x124
				inst_value = (uint64_t)fabs(st_28_instantaneous.Q_a);
 102896c:	9132      	str	r1, [sp, #200]	; 0xc8
 102896e:	9031      	str	r0, [sp, #196]	; 0xc4
				inst_value = (uint64_t)fabs(st_28_instantaneous.Q_t);
 1028970:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 1028974:	9848      	ldr	r0, [sp, #288]	; 0x120
 1028976:	47b8      	blx	r7
				inst_value = (uint64_t)fabs(st_28_instantaneous.P_c);
 1028978:	9b47      	ldr	r3, [sp, #284]	; 0x11c
				inst_value = (uint64_t)fabs(st_28_instantaneous.Q_t);
 102897a:	902f      	str	r0, [sp, #188]	; 0xbc
 102897c:	9130      	str	r1, [sp, #192]	; 0xc0
				inst_value = (uint64_t)fabs(st_28_instantaneous.P_c);
 102897e:	9846      	ldr	r0, [sp, #280]	; 0x118
 1028980:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 1028984:	47b8      	blx	r7
				inst_value = (uint64_t)fabs(st_28_instantaneous.P_b);
 1028986:	9b45      	ldr	r3, [sp, #276]	; 0x114
				inst_value = (uint64_t)fabs(st_28_instantaneous.P_c);
 1028988:	902d      	str	r0, [sp, #180]	; 0xb4
 102898a:	912e      	str	r1, [sp, #184]	; 0xb8
				inst_value = (uint64_t)fabs(st_28_instantaneous.P_b);
 102898c:	9844      	ldr	r0, [sp, #272]	; 0x110
 102898e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 1028992:	47b8      	blx	r7
				inst_value = (uint64_t)fabs(st_28_instantaneous.P_a);
 1028994:	9b43      	ldr	r3, [sp, #268]	; 0x10c
				inst_value = (uint64_t)fabs(st_28_instantaneous.P_b);
 1028996:	902b      	str	r0, [sp, #172]	; 0xac
 1028998:	912c      	str	r1, [sp, #176]	; 0xb0
				inst_value = (uint64_t)fabs(st_28_instantaneous.P_a);
 102899a:	9842      	ldr	r0, [sp, #264]	; 0x108
 102899c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 10289a0:	47b8      	blx	r7
				inst_value = (uint64_t)fabs(st_28_instantaneous.P_t);
 10289a2:	9b41      	ldr	r3, [sp, #260]	; 0x104
				inst_value = (uint64_t)fabs(st_28_instantaneous.P_a);
 10289a4:	9029      	str	r0, [sp, #164]	; 0xa4
 10289a6:	912a      	str	r1, [sp, #168]	; 0xa8
				inst_value = (uint64_t)fabs(st_28_instantaneous.P_t);
 10289a8:	9840      	ldr	r0, [sp, #256]	; 0x100
 10289aa:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 10289ae:	47b8      	blx	r7
 10289b0:	f8cd a0fc 	str.w	sl, [sp, #252]	; 0xfc
 10289b4:	f8dd a008 	ldr.w	sl, [sp, #8]
 10289b8:	9027      	str	r0, [sp, #156]	; 0x9c
 10289ba:	9128      	str	r1, [sp, #160]	; 0xa0
 10289bc:	2700      	movs	r7, #0
 10289be:	e00b      	b.n	10289d8 <REGS_APP_bSt_28_execute_table_reading+0x2c8>
 10289c0:	2000797c 	.word	0x2000797c
 10289c4:	200077d0 	.word	0x200077d0
 10289c8:	20007960 	.word	0x20007960
 10289cc:	0101f255 	.word	0x0101f255
 10289d0:	01030659 	.word	0x01030659
 10289d4:	20007f90 	.word	0x20007f90
		switch ( st_27.present_value_select[i] )
 10289d8:	eb08 0307 	add.w	r3, r8, r7
 10289dc:	789b      	ldrb	r3, [r3, #2]
 10289de:	2b20      	cmp	r3, #32
 10289e0:	f200 80dc 	bhi.w	1028b9c <REGS_APP_bSt_28_execute_table_reading+0x48c>
 10289e4:	e8df f003 	tbb	[pc, r3]
 10289e8:	6b70757a 	.word	0x6b70757a
 10289ec:	575c6166 	.word	0x575c6166
 10289f0:	43484d52 	.word	0x43484d52
 10289f4:	d0d5173e 	.word	0xd0d5173e
 10289f8:	bcc1c6cb 	.word	0xbcc1c6cb
 10289fc:	a8adb2b7 	.word	0xa8adb2b7
 1028a00:	94999ea3 	.word	0x94999ea3
 1028a04:	82858a8f 	.word	0x82858a8f
 1028a08:	7f          	.byte	0x7f
 1028a09:	00          	.byte	0x00
				present_demand = (uint64_t)( demand.interval[int_nbr].present_demand[i] * (-1) );
 1028a0a:	4648      	mov	r0, r9
 1028a0c:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 1028a10:	4b64      	ldr	r3, [pc, #400]	; (1028ba4 <REGS_APP_bSt_28_execute_table_reading+0x494>)
 1028a12:	4798      	blx	r3
 1028a14:	e695      	b.n	1028742 <REGS_APP_bSt_28_execute_table_reading+0x32>
		switch ( st_27.present_value_select[i] )
 1028a16:	f8dd c010 	ldr.w	ip, [sp, #16]
 1028a1a:	f8dd e014 	ldr.w	lr, [sp, #20]
 1028a1e:	f10b 32ff 	add.w	r2, fp, #4294967295
 1028a22:	f10b 0007 	add.w	r0, fp, #7
 1028a26:	4452      	add	r2, sl
 1028a28:	4450      	add	r0, sl
		convert_64_bit_to_byte_array(inst_value, &table_buffer[k]);
 1028a2a:	4663      	mov	r3, ip
 1028a2c:	4671      	mov	r1, lr
        data[val_index++] = value & 0xFF;
 1028a2e:	f802 3f01 	strb.w	r3, [r2, #1]!
        value = value >> 8;
 1028a32:	0a1b      	lsrs	r3, r3, #8
    while (val_index < 8)
 1028a34:	4290      	cmp	r0, r2
        value = value >> 8;
 1028a36:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 1028a3a:	ea4f 2111 	mov.w	r1, r1, lsr #8
    while (val_index < 8)
 1028a3e:	d1f6      	bne.n	1028a2e <REGS_APP_bSt_28_execute_table_reading+0x31e>
	for ( i = 0; i < st_21.nbr_present_values; i++ )
 1028a40:	4b59      	ldr	r3, [pc, #356]	; (1028ba8 <REGS_APP_bSt_28_execute_table_reading+0x498>)
 1028a42:	3701      	adds	r7, #1
 1028a44:	7a5b      	ldrb	r3, [r3, #9]
 1028a46:	b2ff      	uxtb	r7, r7
		k += NI_FMAT1_SIZE;
 1028a48:	f10b 0b06 	add.w	fp, fp, #6
	for ( i = 0; i < st_21.nbr_present_values; i++ )
 1028a4c:	42bb      	cmp	r3, r7
		k += NI_FMAT1_SIZE;
 1028a4e:	fa5f fb8b 	uxtb.w	fp, fp
	for ( i = 0; i < st_21.nbr_present_values; i++ )
 1028a52:	d8c1      	bhi.n	10289d8 <REGS_APP_bSt_28_execute_table_reading+0x2c8>
 1028a54:	4b55      	ldr	r3, [pc, #340]	; (1028bac <REGS_APP_bSt_28_execute_table_reading+0x49c>)
 1028a56:	e883 5000 	stmia.w	r3, {ip, lr}
}
 1028a5a:	2001      	movs	r0, #1
 1028a5c:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
 1028a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switch ( st_27.present_value_select[i] )
 1028a64:	f8dd c004 	ldr.w	ip, [sp, #4]
 1028a68:	f8dd e00c 	ldr.w	lr, [sp, #12]
 1028a6c:	e7d7      	b.n	1028a1e <REGS_APP_bSt_28_execute_table_reading+0x30e>
				break;
 1028a6e:	f8dd c0f4 	ldr.w	ip, [sp, #244]	; 0xf4
 1028a72:	f8dd e0f8 	ldr.w	lr, [sp, #248]	; 0xf8
 1028a76:	e7d2      	b.n	1028a1e <REGS_APP_bSt_28_execute_table_reading+0x30e>
				break;
 1028a78:	f8dd c0ec 	ldr.w	ip, [sp, #236]	; 0xec
 1028a7c:	f8dd e0f0 	ldr.w	lr, [sp, #240]	; 0xf0
 1028a80:	e7cd      	b.n	1028a1e <REGS_APP_bSt_28_execute_table_reading+0x30e>
				break;
 1028a82:	f8dd c0e4 	ldr.w	ip, [sp, #228]	; 0xe4
 1028a86:	f8dd e0e8 	ldr.w	lr, [sp, #232]	; 0xe8
 1028a8a:	e7c8      	b.n	1028a1e <REGS_APP_bSt_28_execute_table_reading+0x30e>
				break;
 1028a8c:	f8dd c0dc 	ldr.w	ip, [sp, #220]	; 0xdc
 1028a90:	f8dd e0e0 	ldr.w	lr, [sp, #224]	; 0xe0
 1028a94:	e7c3      	b.n	1028a1e <REGS_APP_bSt_28_execute_table_reading+0x30e>
				break;
 1028a96:	f8dd c0d4 	ldr.w	ip, [sp, #212]	; 0xd4
 1028a9a:	f8dd e0d8 	ldr.w	lr, [sp, #216]	; 0xd8
 1028a9e:	e7be      	b.n	1028a1e <REGS_APP_bSt_28_execute_table_reading+0x30e>
				break;
 1028aa0:	f8dd c0cc 	ldr.w	ip, [sp, #204]	; 0xcc
 1028aa4:	f8dd e0d0 	ldr.w	lr, [sp, #208]	; 0xd0
 1028aa8:	e7b9      	b.n	1028a1e <REGS_APP_bSt_28_execute_table_reading+0x30e>
				break;
 1028aaa:	f8dd c0c4 	ldr.w	ip, [sp, #196]	; 0xc4
 1028aae:	f8dd e0c8 	ldr.w	lr, [sp, #200]	; 0xc8
 1028ab2:	e7b4      	b.n	1028a1e <REGS_APP_bSt_28_execute_table_reading+0x30e>
				break;
 1028ab4:	f8dd c0bc 	ldr.w	ip, [sp, #188]	; 0xbc
 1028ab8:	f8dd e0c0 	ldr.w	lr, [sp, #192]	; 0xc0
 1028abc:	e7af      	b.n	1028a1e <REGS_APP_bSt_28_execute_table_reading+0x30e>
				break;
 1028abe:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
 1028ac2:	f8dd e0b8 	ldr.w	lr, [sp, #184]	; 0xb8
 1028ac6:	e7aa      	b.n	1028a1e <REGS_APP_bSt_28_execute_table_reading+0x30e>
				break;
 1028ac8:	f8dd c0ac 	ldr.w	ip, [sp, #172]	; 0xac
 1028acc:	f8dd e0b0 	ldr.w	lr, [sp, #176]	; 0xb0
 1028ad0:	e7a5      	b.n	1028a1e <REGS_APP_bSt_28_execute_table_reading+0x30e>
				break;
 1028ad2:	f8dd c0a4 	ldr.w	ip, [sp, #164]	; 0xa4
 1028ad6:	f8dd e0a8 	ldr.w	lr, [sp, #168]	; 0xa8
 1028ada:	e7a0      	b.n	1028a1e <REGS_APP_bSt_28_execute_table_reading+0x30e>
				break;
 1028adc:	f8dd c09c 	ldr.w	ip, [sp, #156]	; 0x9c
 1028ae0:	f8dd e0a0 	ldr.w	lr, [sp, #160]	; 0xa0
 1028ae4:	e79b      	b.n	1028a1e <REGS_APP_bSt_28_execute_table_reading+0x30e>
				break;
 1028ae6:	46b4      	mov	ip, r6
 1028ae8:	46ae      	mov	lr, r5
 1028aea:	e798      	b.n	1028a1e <REGS_APP_bSt_28_execute_table_reading+0x30e>
				break;
 1028aec:	46a4      	mov	ip, r4
 1028aee:	46ce      	mov	lr, r9
 1028af0:	e795      	b.n	1028a1e <REGS_APP_bSt_28_execute_table_reading+0x30e>
				break;
 1028af2:	f8dd c0fc 	ldr.w	ip, [sp, #252]	; 0xfc
 1028af6:	f8dd e098 	ldr.w	lr, [sp, #152]	; 0x98
 1028afa:	e790      	b.n	1028a1e <REGS_APP_bSt_28_execute_table_reading+0x30e>
				break;
 1028afc:	f8dd c090 	ldr.w	ip, [sp, #144]	; 0x90
 1028b00:	f8dd e094 	ldr.w	lr, [sp, #148]	; 0x94
 1028b04:	e78b      	b.n	1028a1e <REGS_APP_bSt_28_execute_table_reading+0x30e>
				break;
 1028b06:	f8dd c088 	ldr.w	ip, [sp, #136]	; 0x88
 1028b0a:	f8dd e08c 	ldr.w	lr, [sp, #140]	; 0x8c
 1028b0e:	e786      	b.n	1028a1e <REGS_APP_bSt_28_execute_table_reading+0x30e>
				break;
 1028b10:	f8dd c080 	ldr.w	ip, [sp, #128]	; 0x80
 1028b14:	f8dd e084 	ldr.w	lr, [sp, #132]	; 0x84
 1028b18:	e781      	b.n	1028a1e <REGS_APP_bSt_28_execute_table_reading+0x30e>
				break;
 1028b1a:	f8dd c078 	ldr.w	ip, [sp, #120]	; 0x78
 1028b1e:	f8dd e07c 	ldr.w	lr, [sp, #124]	; 0x7c
 1028b22:	e77c      	b.n	1028a1e <REGS_APP_bSt_28_execute_table_reading+0x30e>
				break;
 1028b24:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 1028b28:	f8dd e074 	ldr.w	lr, [sp, #116]	; 0x74
 1028b2c:	e777      	b.n	1028a1e <REGS_APP_bSt_28_execute_table_reading+0x30e>
				break;
 1028b2e:	f8dd c068 	ldr.w	ip, [sp, #104]	; 0x68
 1028b32:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
 1028b36:	e772      	b.n	1028a1e <REGS_APP_bSt_28_execute_table_reading+0x30e>
				break;
 1028b38:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 1028b3c:	f8dd e064 	ldr.w	lr, [sp, #100]	; 0x64
 1028b40:	e76d      	b.n	1028a1e <REGS_APP_bSt_28_execute_table_reading+0x30e>
				break;
 1028b42:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 1028b46:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 1028b4a:	e768      	b.n	1028a1e <REGS_APP_bSt_28_execute_table_reading+0x30e>
				break;
 1028b4c:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 1028b50:	f8dd e054 	ldr.w	lr, [sp, #84]	; 0x54
 1028b54:	e763      	b.n	1028a1e <REGS_APP_bSt_28_execute_table_reading+0x30e>
				break;
 1028b56:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
 1028b5a:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 1028b5e:	e75e      	b.n	1028a1e <REGS_APP_bSt_28_execute_table_reading+0x30e>
				break;
 1028b60:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 1028b64:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 1028b68:	e759      	b.n	1028a1e <REGS_APP_bSt_28_execute_table_reading+0x30e>
				break;
 1028b6a:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 1028b6e:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
 1028b72:	e754      	b.n	1028a1e <REGS_APP_bSt_28_execute_table_reading+0x30e>
				break;
 1028b74:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
 1028b78:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 1028b7c:	e74f      	b.n	1028a1e <REGS_APP_bSt_28_execute_table_reading+0x30e>
				break;
 1028b7e:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 1028b82:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 1028b86:	e74a      	b.n	1028a1e <REGS_APP_bSt_28_execute_table_reading+0x30e>
				break;
 1028b88:	f8dd c020 	ldr.w	ip, [sp, #32]
 1028b8c:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 1028b90:	e745      	b.n	1028a1e <REGS_APP_bSt_28_execute_table_reading+0x30e>
				break;
 1028b92:	f8dd c018 	ldr.w	ip, [sp, #24]
 1028b96:	f8dd e01c 	ldr.w	lr, [sp, #28]
 1028b9a:	e740      	b.n	1028a1e <REGS_APP_bSt_28_execute_table_reading+0x30e>
				break;
 1028b9c:	f04f 0c00 	mov.w	ip, #0
 1028ba0:	46e6      	mov	lr, ip
 1028ba2:	e73c      	b.n	1028a1e <REGS_APP_bSt_28_execute_table_reading+0x30e>
 1028ba4:	01030659 	.word	0x01030659
 1028ba8:	2000797c 	.word	0x2000797c
 1028bac:	20007960 	.word	0x20007960

01028bb0 <REGS_APP_usSt_28_get_size>:
uint16_t REGS_APP_usSt_28_get_size(void) {
 1028bb0:	b410      	push	{r4}
	table_size += st_21.nbr_present_demands * NI_FMAT2_SIZE;
 1028bb2:	4908      	ldr	r1, [pc, #32]	; (1028bd4 <REGS_APP_usSt_28_get_size+0x24>)
 1028bb4:	7a0b      	ldrb	r3, [r1, #8]
	table_size += st_21.nbr_present_values * NI_FMAT1_SIZE;
 1028bb6:	7a4a      	ldrb	r2, [r1, #9]
	if ( (st_21.reg_func1_flags & TIME_REMAINING_FLAG_bm) == TIME_REMAINING_FLAG_bm ) {
 1028bb8:	780c      	ldrb	r4, [r1, #0]
	table_size += st_21.nbr_present_demands * NI_FMAT2_SIZE;
 1028bba:	0099      	lsls	r1, r3, #2
 1028bbc:	1858      	adds	r0, r3, r1
	table_size += st_21.nbr_present_values * NI_FMAT1_SIZE;
 1028bbe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 1028bc2:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 1028bc6:	b280      	uxth	r0, r0
	if ( (st_21.reg_func1_flags & TIME_REMAINING_FLAG_bm) == TIME_REMAINING_FLAG_bm ) {
 1028bc8:	0663      	lsls	r3, r4, #25
		table_size += st_21.nbr_present_demands * TM_FMAT_SIZE;
 1028bca:	bf44      	itt	mi
 1028bcc:	1840      	addmi	r0, r0, r1
 1028bce:	b280      	uxthmi	r0, r0
}
 1028bd0:	bc10      	pop	{r4}
 1028bd2:	4770      	bx	lr
 1028bd4:	2000797c 	.word	0x2000797c

01028bd8 <REGS_APP_v1sec_handler>:
	if ( !meter.system_state.changing_configuration ) {
 1028bd8:	4b0a      	ldr	r3, [pc, #40]	; (1028c04 <REGS_APP_v1sec_handler+0x2c>)
 1028bda:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 1028bde:	b923      	cbnz	r3, 1028bea <REGS_APP_v1sec_handler+0x12>
		registers_os.task_execute = true;
 1028be0:	4b09      	ldr	r3, [pc, #36]	; (1028c08 <REGS_APP_v1sec_handler+0x30>)
		if ( registers_os.rtos_task_active ) {
 1028be2:	791a      	ldrb	r2, [r3, #4]
		registers_os.task_execute = true;
 1028be4:	2101      	movs	r1, #1
 1028be6:	7159      	strb	r1, [r3, #5]
		if ( registers_os.rtos_task_active ) {
 1028be8:	b902      	cbnz	r2, 1028bec <REGS_APP_v1sec_handler+0x14>
 1028bea:	4770      	bx	lr
void REGS_APP_v1sec_handler(void) {
 1028bec:	b510      	push	{r4, lr}
			xYieldRequired = xTaskResumeFromISR(registers_os.storage_task_id);
 1028bee:	6818      	ldr	r0, [r3, #0]
 1028bf0:	4b06      	ldr	r3, [pc, #24]	; (1028c0c <REGS_APP_v1sec_handler+0x34>)
 1028bf2:	4798      	blx	r3
			if ( xYieldRequired == pdTRUE ) {
 1028bf4:	2801      	cmp	r0, #1
 1028bf6:	d000      	beq.n	1028bfa <REGS_APP_v1sec_handler+0x22>
 1028bf8:	bd10      	pop	{r4, pc}
				portYIELD();
 1028bfa:	4b05      	ldr	r3, [pc, #20]	; (1028c10 <REGS_APP_v1sec_handler+0x38>)
}
 1028bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				portYIELD();
 1028c00:	4718      	bx	r3
 1028c02:	bf00      	nop
 1028c04:	20016c2c 	.word	0x20016c2c
 1028c08:	20017150 	.word	0x20017150
 1028c0c:	0102eb75 	.word	0x0102eb75
 1028c10:	0102ddbd 	.word	0x0102ddbd

01028c14 <REGS_APP_vCreate_task>:
void REGS_APP_vCreate_task(void) {
 1028c14:	b570      	push	{r4, r5, r6, lr}
 1028c16:	b084      	sub	sp, #16
	registers_os.rtos_task_active = false;
 1028c18:	2400      	movs	r4, #0
 1028c1a:	4d09      	ldr	r5, [pc, #36]	; (1028c40 <REGS_APP_vCreate_task+0x2c>)
	xTaskCreate( REGS_APP_vStorage_rtos_task, (const signed char * const ) "Metering_Task", METERING_STACK_SIZE, NULL, METERING_TASK_PRIO, &registers_os.storage_task_id );
 1028c1c:	9501      	str	r5, [sp, #4]
 1028c1e:	2204      	movs	r2, #4
 1028c20:	4623      	mov	r3, r4
 1028c22:	9200      	str	r2, [sp, #0]
 1028c24:	9403      	str	r4, [sp, #12]
 1028c26:	9402      	str	r4, [sp, #8]
 1028c28:	f240 228a 	movw	r2, #650	; 0x28a
 1028c2c:	4905      	ldr	r1, [pc, #20]	; (1028c44 <REGS_APP_vCreate_task+0x30>)
 1028c2e:	4e06      	ldr	r6, [pc, #24]	; (1028c48 <REGS_APP_vCreate_task+0x34>)
 1028c30:	4806      	ldr	r0, [pc, #24]	; (1028c4c <REGS_APP_vCreate_task+0x38>)
	registers_os.rtos_task_active = false;
 1028c32:	712c      	strb	r4, [r5, #4]
	xTaskCreate( REGS_APP_vStorage_rtos_task, (const signed char * const ) "Metering_Task", METERING_STACK_SIZE, NULL, METERING_TASK_PRIO, &registers_os.storage_task_id );
 1028c34:	47b0      	blx	r6
	registers_os.rtos_task_active = true;
 1028c36:	2301      	movs	r3, #1
 1028c38:	712b      	strb	r3, [r5, #4]
}
 1028c3a:	b004      	add	sp, #16
 1028c3c:	bd70      	pop	{r4, r5, r6, pc}
 1028c3e:	bf00      	nop
 1028c40:	20017150 	.word	0x20017150
 1028c44:	010318c0 	.word	0x010318c0
 1028c48:	0102e7f9 	.word	0x0102e7f9
 1028c4c:	01029885 	.word	0x01029885

01028c50 <REGS_APP_vSuspend_storage_rtos_task>:
void REGS_APP_vSuspend_storage_rtos_task(void) {
 1028c50:	b510      	push	{r4, lr}
	registers_os.rtos_task_active = false;
 1028c52:	4c06      	ldr	r4, [pc, #24]	; (1028c6c <REGS_APP_vSuspend_storage_rtos_task+0x1c>)
	if ( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING ) {
 1028c54:	4b06      	ldr	r3, [pc, #24]	; (1028c70 <REGS_APP_vSuspend_storage_rtos_task+0x20>)
	registers_os.rtos_task_active = false;
 1028c56:	2200      	movs	r2, #0
 1028c58:	7122      	strb	r2, [r4, #4]
	if ( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING ) {
 1028c5a:	4798      	blx	r3
 1028c5c:	2801      	cmp	r0, #1
 1028c5e:	d000      	beq.n	1028c62 <REGS_APP_vSuspend_storage_rtos_task+0x12>
 1028c60:	bd10      	pop	{r4, pc}
		vTaskSuspend(registers_os.storage_task_id);
 1028c62:	6820      	ldr	r0, [r4, #0]
 1028c64:	4b03      	ldr	r3, [pc, #12]	; (1028c74 <REGS_APP_vSuspend_storage_rtos_task+0x24>)
}
 1028c66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		vTaskSuspend(registers_os.storage_task_id);
 1028c6a:	4718      	bx	r3
 1028c6c:	20017150 	.word	0x20017150
 1028c70:	0102f149 	.word	0x0102f149
 1028c74:	0102ea59 	.word	0x0102ea59

01028c78 <REGS_APP_vResume_storage_rtos_task>:
	registers_os.rtos_task_active = true;
 1028c78:	4b01      	ldr	r3, [pc, #4]	; (1028c80 <REGS_APP_vResume_storage_rtos_task+0x8>)
 1028c7a:	2201      	movs	r2, #1
 1028c7c:	711a      	strb	r2, [r3, #4]
 1028c7e:	4770      	bx	lr
 1028c80:	20017150 	.word	0x20017150

01028c84 <REGS_APP_vStore_demands>:
	if ( (!meter.ed_mode.test_mode.enabled) && (registers_os.max_demand == true) ){
 1028c84:	4b04      	ldr	r3, [pc, #16]	; (1028c98 <REGS_APP_vStore_demands+0x14>)
 1028c86:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 1028c8a:	b923      	cbnz	r3, 1028c96 <REGS_APP_vStore_demands+0x12>
 1028c8c:	4b03      	ldr	r3, [pc, #12]	; (1028c9c <REGS_APP_vStore_demands+0x18>)
 1028c8e:	7b1b      	ldrb	r3, [r3, #12]
 1028c90:	b10b      	cbz	r3, 1028c96 <REGS_APP_vStore_demands+0x12>
 1028c92:	4b03      	ldr	r3, [pc, #12]	; (1028ca0 <REGS_APP_vStore_demands+0x1c>)
 1028c94:	4718      	bx	r3
 1028c96:	4770      	bx	lr
 1028c98:	20016c2c 	.word	0x20016c2c
 1028c9c:	20017150 	.word	0x20017150
 1028ca0:	01026099 	.word	0x01026099

01028ca4 <REGS_APP_dDetermine_instantaneous_power>:
double REGS_APP_dDetermine_instantaneous_power(uint8_t source) {
 1028ca4:	b570      	push	{r4, r5, r6, lr}
	switch ( source ) {
 1028ca6:	2857      	cmp	r0, #87	; 0x57
 1028ca8:	d863      	bhi.n	1028d72 <REGS_APP_dDetermine_instantaneous_power+0xce>
 1028caa:	e8df f010 	tbh	[pc, r0, lsl #1]
 1028cae:	0118      	.short	0x0118
 1028cb0:	01100116 	.word	0x01100116
 1028cb4:	00ff0109 	.word	0x00ff0109
 1028cb8:	00eb00f5 	.word	0x00eb00f5
 1028cbc:	00d100dd 	.word	0x00d100dd
 1028cc0:	00bd00c3 	.word	0x00bd00c3
 1028cc4:	00ab00b6 	.word	0x00ab00b6
 1028cc8:	0092009c 	.word	0x0092009c
 1028ccc:	007e0084 	.word	0x007e0084
 1028cd0:	02da007e 	.word	0x02da007e
 1028cd4:	02fb02d0 	.word	0x02fb02d0
 1028cd8:	02e602f1 	.word	0x02e602f1
 1028cdc:	012102e4 	.word	0x012102e4
 1028ce0:	0127011a 	.word	0x0127011a
 1028ce4:	0313031d 	.word	0x0313031d
 1028ce8:	03070309 	.word	0x03070309
 1028cec:	02850305 	.word	0x02850305
 1028cf0:	0271027e 	.word	0x0271027e
 1028cf4:	025c0266 	.word	0x025c0266
 1028cf8:	00780251 	.word	0x00780251
 1028cfc:	02310078 	.word	0x02310078
 1028d00:	02190227 	.word	0x02190227
 1028d04:	029a029c 	.word	0x029a029c
 1028d08:	02920298 	.word	0x02920298
 1028d0c:	01fb028b 	.word	0x01fb028b
 1028d10:	0205020f 	.word	0x0205020f
 1028d14:	01540136 	.word	0x01540136
 1028d18:	014c0152 	.word	0x014c0152
 1028d1c:	01a50145 	.word	0x01a50145
 1028d20:	01860190 	.word	0x01860190
 1028d24:	00720058 	.word	0x00720058
 1028d28:	017c0072 	.word	0x017c0072
 1028d2c:	02b2016e 	.word	0x02b2016e
 1028d30:	02a602a8 	.word	0x02a602a8
 1028d34:	01cd01d3 	.word	0x01cd01d3
 1028d38:	01bc01c6 	.word	0x01bc01c6
 1028d3c:	033301b1 	.word	0x033301b1
 1028d40:	03270329 	.word	0x03270329
 1028d44:	01e801ee 	.word	0x01e801ee
 1028d48:	01d501e1 	.word	0x01d501e1
 1028d4c:	024601f0 	.word	0x024601f0
 1028d50:	006c023b 	.word	0x006c023b
 1028d54:	0156006c 	.word	0x0156006c
 1028d58:	02bc0164 	.word	0x02bc0164
 1028d5c:	02c6      	.short	0x02c6
			if ( METROLOGY_APP_dGet_instantaneous_value(P_B_ID) < 0 ) {
 1028d5e:	2002      	movs	r0, #2
 1028d60:	4ca0      	ldr	r4, [pc, #640]	; (1028fe4 <REGS_APP_dDetermine_instantaneous_power+0x340>)
 1028d62:	4da1      	ldr	r5, [pc, #644]	; (1028fe8 <REGS_APP_dDetermine_instantaneous_power+0x344>)
 1028d64:	47a0      	blx	r4
 1028d66:	2200      	movs	r2, #0
 1028d68:	2300      	movs	r3, #0
 1028d6a:	47a8      	blx	r5
 1028d6c:	2800      	cmp	r0, #0
 1028d6e:	f040 8115 	bne.w	1028f9c <REGS_APP_dDetermine_instantaneous_power+0x2f8>
			inst_value = 0;
 1028d72:	2500      	movs	r5, #0
 1028d74:	462c      	mov	r4, r5
	if (meter_os.metrology_ready == false) {
 1028d76:	499d      	ldr	r1, [pc, #628]	; (1028fec <REGS_APP_dDetermine_instantaneous_power+0x348>)
 1028d78:	7809      	ldrb	r1, [r1, #0]
 1028d7a:	b909      	cbnz	r1, 1028d80 <REGS_APP_dDetermine_instantaneous_power+0xdc>
		inst_value = 0;
 1028d7c:	460d      	mov	r5, r1
 1028d7e:	460c      	mov	r4, r1
}
 1028d80:	4628      	mov	r0, r5
 1028d82:	4621      	mov	r1, r4
 1028d84:	bd70      	pop	{r4, r5, r6, pc}
			inst_value = METROLOGY_APP_dGet_instantaneous_value(S_C_ID);
 1028d86:	200b      	movs	r0, #11
 1028d88:	4b96      	ldr	r3, [pc, #600]	; (1028fe4 <REGS_APP_dDetermine_instantaneous_power+0x340>)
 1028d8a:	4798      	blx	r3
 1028d8c:	4605      	mov	r5, r0
 1028d8e:	460c      	mov	r4, r1
			break;
 1028d90:	e7f1      	b.n	1028d76 <REGS_APP_dDetermine_instantaneous_power+0xd2>
			inst_value = METROLOGY_APP_dGet_instantaneous_value(S_B_ID);
 1028d92:	200a      	movs	r0, #10
 1028d94:	4b93      	ldr	r3, [pc, #588]	; (1028fe4 <REGS_APP_dDetermine_instantaneous_power+0x340>)
 1028d96:	4798      	blx	r3
 1028d98:	4605      	mov	r5, r0
 1028d9a:	460c      	mov	r4, r1
			break;
 1028d9c:	e7eb      	b.n	1028d76 <REGS_APP_dDetermine_instantaneous_power+0xd2>
			inst_value = METROLOGY_APP_dGet_instantaneous_value(S_A_ID);
 1028d9e:	2009      	movs	r0, #9
 1028da0:	4b90      	ldr	r3, [pc, #576]	; (1028fe4 <REGS_APP_dDetermine_instantaneous_power+0x340>)
 1028da2:	4798      	blx	r3
 1028da4:	4605      	mov	r5, r0
 1028da6:	460c      	mov	r4, r1
			break;
 1028da8:	e7e5      	b.n	1028d76 <REGS_APP_dDetermine_instantaneous_power+0xd2>
			inst_value = METROLOGY_APP_dGet_instantaneous_value(S_T_ID);
 1028daa:	2008      	movs	r0, #8
 1028dac:	4b8d      	ldr	r3, [pc, #564]	; (1028fe4 <REGS_APP_dDetermine_instantaneous_power+0x340>)
 1028dae:	4798      	blx	r3
 1028db0:	4605      	mov	r5, r0
 1028db2:	460c      	mov	r4, r1
			break;
 1028db4:	e7df      	b.n	1028d76 <REGS_APP_dDetermine_instantaneous_power+0xd2>
			if ( METROLOGY_APP_dGet_instantaneous_value(P_T_ID) < 0 ) {
 1028db6:	2000      	movs	r0, #0
 1028db8:	4c8a      	ldr	r4, [pc, #552]	; (1028fe4 <REGS_APP_dDetermine_instantaneous_power+0x340>)
 1028dba:	4d8b      	ldr	r5, [pc, #556]	; (1028fe8 <REGS_APP_dDetermine_instantaneous_power+0x344>)
 1028dbc:	47a0      	blx	r4
 1028dbe:	2200      	movs	r2, #0
 1028dc0:	2300      	movs	r3, #0
 1028dc2:	47a8      	blx	r5
 1028dc4:	2800      	cmp	r0, #0
 1028dc6:	d0d4      	beq.n	1028d72 <REGS_APP_dDetermine_instantaneous_power+0xce>
				inst_value = METROLOGY_APP_dGet_instantaneous_value(S_T_ID);
 1028dc8:	2008      	movs	r0, #8
 1028dca:	47a0      	blx	r4
 1028dcc:	4605      	mov	r5, r0
 1028dce:	460c      	mov	r4, r1
 1028dd0:	e7d1      	b.n	1028d76 <REGS_APP_dDetermine_instantaneous_power+0xd2>
			if ( METROLOGY_APP_dGet_instantaneous_value(P_T_ID) > 0 ) {
 1028dd2:	2000      	movs	r0, #0
 1028dd4:	4c83      	ldr	r4, [pc, #524]	; (1028fe4 <REGS_APP_dDetermine_instantaneous_power+0x340>)
 1028dd6:	4d86      	ldr	r5, [pc, #536]	; (1028ff0 <REGS_APP_dDetermine_instantaneous_power+0x34c>)
 1028dd8:	47a0      	blx	r4
 1028dda:	2200      	movs	r2, #0
 1028ddc:	2300      	movs	r3, #0
 1028dde:	47a8      	blx	r5
 1028de0:	2800      	cmp	r0, #0
 1028de2:	d1f1      	bne.n	1028dc8 <REGS_APP_dDetermine_instantaneous_power+0x124>
 1028de4:	e7c5      	b.n	1028d72 <REGS_APP_dDetermine_instantaneous_power+0xce>
			quadrant = (uint8_t)METROLOGY_APP_dGet_instantaneous_value(QUADRANT_T_ID);
 1028de6:	2023      	movs	r0, #35	; 0x23
 1028de8:	4c7e      	ldr	r4, [pc, #504]	; (1028fe4 <REGS_APP_dDetermine_instantaneous_power+0x340>)
 1028dea:	47a0      	blx	r4
 1028dec:	4b81      	ldr	r3, [pc, #516]	; (1028ff4 <REGS_APP_dDetermine_instantaneous_power+0x350>)
 1028dee:	4798      	blx	r3
			if ( (quadrant == (uint8_t)QUADRANT_2) || (quadrant == (uint8_t)QUADRANT_3) ) {
 1028df0:	1e83      	subs	r3, r0, #2
 1028df2:	b2db      	uxtb	r3, r3
 1028df4:	2b01      	cmp	r3, #1
 1028df6:	d8bc      	bhi.n	1028d72 <REGS_APP_dDetermine_instantaneous_power+0xce>
				inst_value = fabs( METROLOGY_APP_dGet_instantaneous_value(Q_T_ID) );
 1028df8:	2004      	movs	r0, #4
 1028dfa:	47a0      	blx	r4
 1028dfc:	4605      	mov	r5, r0
 1028dfe:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 1028e02:	e7b8      	b.n	1028d76 <REGS_APP_dDetermine_instantaneous_power+0xd2>
			quadrant = (uint8_t)METROLOGY_APP_dGet_instantaneous_value(QUADRANT_T_ID);
 1028e04:	2023      	movs	r0, #35	; 0x23
 1028e06:	4c77      	ldr	r4, [pc, #476]	; (1028fe4 <REGS_APP_dDetermine_instantaneous_power+0x340>)
 1028e08:	47a0      	blx	r4
 1028e0a:	4b7a      	ldr	r3, [pc, #488]	; (1028ff4 <REGS_APP_dDetermine_instantaneous_power+0x350>)
 1028e0c:	4798      	blx	r3
 1028e0e:	b2c0      	uxtb	r0, r0
			if ( (quadrant == (uint8_t)QUADRANT_1) || (quadrant == (uint8_t)QUADRANT_4) ) {
 1028e10:	2801      	cmp	r0, #1
 1028e12:	d0f1      	beq.n	1028df8 <REGS_APP_dDetermine_instantaneous_power+0x154>
 1028e14:	2804      	cmp	r0, #4
 1028e16:	d1ac      	bne.n	1028d72 <REGS_APP_dDetermine_instantaneous_power+0xce>
 1028e18:	e7ee      	b.n	1028df8 <REGS_APP_dDetermine_instantaneous_power+0x154>
			inst_value = fabs( METROLOGY_APP_dGet_instantaneous_value(Q_T_ID) );
 1028e1a:	2004      	movs	r0, #4
 1028e1c:	4b71      	ldr	r3, [pc, #452]	; (1028fe4 <REGS_APP_dDetermine_instantaneous_power+0x340>)
 1028e1e:	4798      	blx	r3
 1028e20:	4605      	mov	r5, r0
 1028e22:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
			break;
 1028e26:	e7a6      	b.n	1028d76 <REGS_APP_dDetermine_instantaneous_power+0xd2>
			inst_value = METROLOGY_APP_dGet_instantaneous_value(Q_T_ID);
 1028e28:	2004      	movs	r0, #4
 1028e2a:	4b6e      	ldr	r3, [pc, #440]	; (1028fe4 <REGS_APP_dDetermine_instantaneous_power+0x340>)
 1028e2c:	4798      	blx	r3
 1028e2e:	4605      	mov	r5, r0
 1028e30:	460c      	mov	r4, r1
			break;
 1028e32:	e7a0      	b.n	1028d76 <REGS_APP_dDetermine_instantaneous_power+0xd2>
			rms_val = METROLOGY_APP_dGet_instantaneous_value(Q_T_ID);
 1028e34:	2004      	movs	r0, #4
			rms_val = METROLOGY_APP_dGet_instantaneous_value(Q_C_ID);
 1028e36:	4b6b      	ldr	r3, [pc, #428]	; (1028fe4 <REGS_APP_dDetermine_instantaneous_power+0x340>)
			if ( rms_val < 0 ) {
 1028e38:	4e6b      	ldr	r6, [pc, #428]	; (1028fe8 <REGS_APP_dDetermine_instantaneous_power+0x344>)
			rms_val = METROLOGY_APP_dGet_instantaneous_value(Q_C_ID);
 1028e3a:	4798      	blx	r3
			if ( rms_val < 0 ) {
 1028e3c:	2200      	movs	r2, #0
 1028e3e:	2300      	movs	r3, #0
			rms_val = METROLOGY_APP_dGet_instantaneous_value(Q_C_ID);
 1028e40:	4605      	mov	r5, r0
 1028e42:	460c      	mov	r4, r1
			if ( rms_val < 0 ) {
 1028e44:	47b0      	blx	r6
 1028e46:	2800      	cmp	r0, #0
 1028e48:	d093      	beq.n	1028d72 <REGS_APP_dDetermine_instantaneous_power+0xce>
				inst_value = fabs(rms_val);
 1028e4a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 1028e4e:	e792      	b.n	1028d76 <REGS_APP_dDetermine_instantaneous_power+0xd2>
			rms_val = METROLOGY_APP_dGet_instantaneous_value(Q_T_ID);
 1028e50:	2004      	movs	r0, #4
			rms_val = METROLOGY_APP_dGet_instantaneous_value(Q_C_ID);
 1028e52:	4b64      	ldr	r3, [pc, #400]	; (1028fe4 <REGS_APP_dDetermine_instantaneous_power+0x340>)
			if ( rms_val > 0 ) {
 1028e54:	4e66      	ldr	r6, [pc, #408]	; (1028ff0 <REGS_APP_dDetermine_instantaneous_power+0x34c>)
			rms_val = METROLOGY_APP_dGet_instantaneous_value(Q_C_ID);
 1028e56:	4798      	blx	r3
			if ( rms_val > 0 ) {
 1028e58:	2200      	movs	r2, #0
 1028e5a:	2300      	movs	r3, #0
			rms_val = METROLOGY_APP_dGet_instantaneous_value(Q_C_ID);
 1028e5c:	4605      	mov	r5, r0
 1028e5e:	460c      	mov	r4, r1
			if ( rms_val > 0 ) {
 1028e60:	47b0      	blx	r6
 1028e62:	2800      	cmp	r0, #0
 1028e64:	d1f1      	bne.n	1028e4a <REGS_APP_dDetermine_instantaneous_power+0x1a6>
 1028e66:	e784      	b.n	1028d72 <REGS_APP_dDetermine_instantaneous_power+0xce>
			quadrant = (uint8_t)METROLOGY_APP_dGet_instantaneous_value(QUADRANT_T_ID);
 1028e68:	2023      	movs	r0, #35	; 0x23
 1028e6a:	4c5e      	ldr	r4, [pc, #376]	; (1028fe4 <REGS_APP_dDetermine_instantaneous_power+0x340>)
 1028e6c:	47a0      	blx	r4
 1028e6e:	4b61      	ldr	r3, [pc, #388]	; (1028ff4 <REGS_APP_dDetermine_instantaneous_power+0x350>)
 1028e70:	4798      	blx	r3
			if ( quadrant == (uint8_t)QUADRANT_4 ) {
 1028e72:	b2c0      	uxtb	r0, r0
 1028e74:	2804      	cmp	r0, #4
 1028e76:	f47f af7c 	bne.w	1028d72 <REGS_APP_dDetermine_instantaneous_power+0xce>
				inst_value = fabs( METROLOGY_APP_dGet_instantaneous_value(Q_C_ID) );
 1028e7a:	47a0      	blx	r4
 1028e7c:	4605      	mov	r5, r0
 1028e7e:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 1028e82:	e778      	b.n	1028d76 <REGS_APP_dDetermine_instantaneous_power+0xd2>
			quadrant = (uint8_t)METROLOGY_APP_dGet_instantaneous_value(QUADRANT_T_ID);
 1028e84:	2023      	movs	r0, #35	; 0x23
 1028e86:	4c57      	ldr	r4, [pc, #348]	; (1028fe4 <REGS_APP_dDetermine_instantaneous_power+0x340>)
 1028e88:	47a0      	blx	r4
 1028e8a:	4b5a      	ldr	r3, [pc, #360]	; (1028ff4 <REGS_APP_dDetermine_instantaneous_power+0x350>)
 1028e8c:	4798      	blx	r3
			if ( quadrant == (uint8_t)QUADRANT_3 ) {
 1028e8e:	b2c0      	uxtb	r0, r0
 1028e90:	2803      	cmp	r0, #3
 1028e92:	f47f af6e 	bne.w	1028d72 <REGS_APP_dDetermine_instantaneous_power+0xce>
 1028e96:	e7af      	b.n	1028df8 <REGS_APP_dDetermine_instantaneous_power+0x154>
			quadrant = (uint8_t)METROLOGY_APP_dGet_instantaneous_value(QUADRANT_T_ID);
 1028e98:	2023      	movs	r0, #35	; 0x23
 1028e9a:	4c52      	ldr	r4, [pc, #328]	; (1028fe4 <REGS_APP_dDetermine_instantaneous_power+0x340>)
 1028e9c:	47a0      	blx	r4
 1028e9e:	4b55      	ldr	r3, [pc, #340]	; (1028ff4 <REGS_APP_dDetermine_instantaneous_power+0x350>)
 1028ea0:	4798      	blx	r3
			if ( quadrant == (uint8_t)QUADRANT_2 ) {
 1028ea2:	b2c0      	uxtb	r0, r0
 1028ea4:	2802      	cmp	r0, #2
 1028ea6:	f47f af64 	bne.w	1028d72 <REGS_APP_dDetermine_instantaneous_power+0xce>
 1028eaa:	e7a5      	b.n	1028df8 <REGS_APP_dDetermine_instantaneous_power+0x154>
			quadrant = (uint8_t)METROLOGY_APP_dGet_instantaneous_value(QUADRANT_T_ID);
 1028eac:	2023      	movs	r0, #35	; 0x23
 1028eae:	4c4d      	ldr	r4, [pc, #308]	; (1028fe4 <REGS_APP_dDetermine_instantaneous_power+0x340>)
 1028eb0:	47a0      	blx	r4
 1028eb2:	4b50      	ldr	r3, [pc, #320]	; (1028ff4 <REGS_APP_dDetermine_instantaneous_power+0x350>)
 1028eb4:	4798      	blx	r3
			if ( quadrant == (uint8_t)QUADRANT_1 ) {
 1028eb6:	b2c0      	uxtb	r0, r0
 1028eb8:	2801      	cmp	r0, #1
 1028eba:	f47f af5a 	bne.w	1028d72 <REGS_APP_dDetermine_instantaneous_power+0xce>
 1028ebe:	e79b      	b.n	1028df8 <REGS_APP_dDetermine_instantaneous_power+0x154>
			rms_val = METROLOGY_APP_dGet_instantaneous_value(P_T_ID);		
 1028ec0:	2000      	movs	r0, #0
 1028ec2:	4b48      	ldr	r3, [pc, #288]	; (1028fe4 <REGS_APP_dDetermine_instantaneous_power+0x340>)
 1028ec4:	4798      	blx	r3
			inst_value = fabs(rms_val);
 1028ec6:	4605      	mov	r5, r0
 1028ec8:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
			break;
 1028ecc:	e753      	b.n	1028d76 <REGS_APP_dDetermine_instantaneous_power+0xd2>
			inst_value = METROLOGY_APP_dGet_instantaneous_value(P_T_ID);
 1028ece:	2000      	movs	r0, #0
 1028ed0:	4b44      	ldr	r3, [pc, #272]	; (1028fe4 <REGS_APP_dDetermine_instantaneous_power+0x340>)
 1028ed2:	4798      	blx	r3
 1028ed4:	4605      	mov	r5, r0
 1028ed6:	460c      	mov	r4, r1
			break;
 1028ed8:	e74d      	b.n	1028d76 <REGS_APP_dDetermine_instantaneous_power+0xd2>
			rms_val = METROLOGY_APP_dGet_instantaneous_value(P_T_ID);
 1028eda:	2000      	movs	r0, #0
 1028edc:	e7ab      	b.n	1028e36 <REGS_APP_dDetermine_instantaneous_power+0x192>
			rms_val = METROLOGY_APP_dGet_instantaneous_value(P_T_ID);
 1028ede:	2000      	movs	r0, #0
 1028ee0:	e7b7      	b.n	1028e52 <REGS_APP_dDetermine_instantaneous_power+0x1ae>
			rms_val = METROLOGY_APP_dGet_instantaneous_value(P_A_ID);		
 1028ee2:	2001      	movs	r0, #1
 1028ee4:	4b3f      	ldr	r3, [pc, #252]	; (1028fe4 <REGS_APP_dDetermine_instantaneous_power+0x340>)
 1028ee6:	4798      	blx	r3
			inst_value = fabs(rms_val);
 1028ee8:	4605      	mov	r5, r0
 1028eea:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
			break;
 1028eee:	e742      	b.n	1028d76 <REGS_APP_dDetermine_instantaneous_power+0xd2>
			inst_value = METROLOGY_APP_dGet_instantaneous_value(P_A_ID);
 1028ef0:	2001      	movs	r0, #1
 1028ef2:	4b3c      	ldr	r3, [pc, #240]	; (1028fe4 <REGS_APP_dDetermine_instantaneous_power+0x340>)
 1028ef4:	4798      	blx	r3
 1028ef6:	4605      	mov	r5, r0
 1028ef8:	460c      	mov	r4, r1
			break;
 1028efa:	e73c      	b.n	1028d76 <REGS_APP_dDetermine_instantaneous_power+0xd2>
			quadrant = (uint8_t)METROLOGY_APP_dGet_instantaneous_value(QUADRANT_A_ID);
 1028efc:	2024      	movs	r0, #36	; 0x24
 1028efe:	4c39      	ldr	r4, [pc, #228]	; (1028fe4 <REGS_APP_dDetermine_instantaneous_power+0x340>)
 1028f00:	47a0      	blx	r4
 1028f02:	4b3c      	ldr	r3, [pc, #240]	; (1028ff4 <REGS_APP_dDetermine_instantaneous_power+0x350>)
 1028f04:	4798      	blx	r3
			if ( quadrant == (uint8_t)QUADRANT_1 ) {
 1028f06:	b2c0      	uxtb	r0, r0
 1028f08:	2801      	cmp	r0, #1
 1028f0a:	f47f af32 	bne.w	1028d72 <REGS_APP_dDetermine_instantaneous_power+0xce>
				inst_value = fabs( METROLOGY_APP_dGet_instantaneous_value(Q_A_ID) );
 1028f0e:	2005      	movs	r0, #5
 1028f10:	47a0      	blx	r4
 1028f12:	4605      	mov	r5, r0
 1028f14:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 1028f18:	e72d      	b.n	1028d76 <REGS_APP_dDetermine_instantaneous_power+0xd2>
			quadrant = (uint8_t)METROLOGY_APP_dGet_instantaneous_value(QUADRANT_B_ID);
 1028f1a:	2025      	movs	r0, #37	; 0x25
 1028f1c:	4c31      	ldr	r4, [pc, #196]	; (1028fe4 <REGS_APP_dDetermine_instantaneous_power+0x340>)
 1028f1e:	47a0      	blx	r4
 1028f20:	4b34      	ldr	r3, [pc, #208]	; (1028ff4 <REGS_APP_dDetermine_instantaneous_power+0x350>)
 1028f22:	4798      	blx	r3
			if ( quadrant == (uint8_t)QUADRANT_4 ) {
 1028f24:	b2c0      	uxtb	r0, r0
 1028f26:	2804      	cmp	r0, #4
 1028f28:	f47f af23 	bne.w	1028d72 <REGS_APP_dDetermine_instantaneous_power+0xce>
				inst_value = fabs( METROLOGY_APP_dGet_instantaneous_value(Q_B_ID) );
 1028f2c:	2006      	movs	r0, #6
 1028f2e:	47a0      	blx	r4
 1028f30:	4605      	mov	r5, r0
 1028f32:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 1028f36:	e71e      	b.n	1028d76 <REGS_APP_dDetermine_instantaneous_power+0xd2>
			inst_value = fabs( METROLOGY_APP_dGet_instantaneous_value(Q_B_ID) );
 1028f38:	2006      	movs	r0, #6
 1028f3a:	4b2a      	ldr	r3, [pc, #168]	; (1028fe4 <REGS_APP_dDetermine_instantaneous_power+0x340>)
 1028f3c:	4798      	blx	r3
 1028f3e:	4605      	mov	r5, r0
 1028f40:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
			break;
 1028f44:	e717      	b.n	1028d76 <REGS_APP_dDetermine_instantaneous_power+0xd2>
			inst_value = METROLOGY_APP_dGet_instantaneous_value(Q_B_ID);
 1028f46:	2006      	movs	r0, #6
 1028f48:	4b26      	ldr	r3, [pc, #152]	; (1028fe4 <REGS_APP_dDetermine_instantaneous_power+0x340>)
 1028f4a:	4798      	blx	r3
 1028f4c:	4605      	mov	r5, r0
 1028f4e:	460c      	mov	r4, r1
			break;
 1028f50:	e711      	b.n	1028d76 <REGS_APP_dDetermine_instantaneous_power+0xd2>
			rms_val = METROLOGY_APP_dGet_instantaneous_value(Q_B_ID);
 1028f52:	2006      	movs	r0, #6
 1028f54:	e76f      	b.n	1028e36 <REGS_APP_dDetermine_instantaneous_power+0x192>
			rms_val = METROLOGY_APP_dGet_instantaneous_value(Q_B_ID);
 1028f56:	2006      	movs	r0, #6
 1028f58:	e77b      	b.n	1028e52 <REGS_APP_dDetermine_instantaneous_power+0x1ae>
			quadrant = (uint8_t)METROLOGY_APP_dGet_instantaneous_value(QUADRANT_C_ID);
 1028f5a:	2026      	movs	r0, #38	; 0x26
 1028f5c:	4c21      	ldr	r4, [pc, #132]	; (1028fe4 <REGS_APP_dDetermine_instantaneous_power+0x340>)
 1028f5e:	47a0      	blx	r4
 1028f60:	4b24      	ldr	r3, [pc, #144]	; (1028ff4 <REGS_APP_dDetermine_instantaneous_power+0x350>)
 1028f62:	4798      	blx	r3
			if ( quadrant == (uint8_t)QUADRANT_1 ) {
 1028f64:	b2c0      	uxtb	r0, r0
 1028f66:	2801      	cmp	r0, #1
 1028f68:	f47f af03 	bne.w	1028d72 <REGS_APP_dDetermine_instantaneous_power+0xce>
				inst_value = METROLOGY_APP_dGet_instantaneous_value(S_C_ID);
 1028f6c:	200b      	movs	r0, #11
 1028f6e:	47a0      	blx	r4
 1028f70:	4605      	mov	r5, r0
 1028f72:	460c      	mov	r4, r1
 1028f74:	e6ff      	b.n	1028d76 <REGS_APP_dDetermine_instantaneous_power+0xd2>
			quadrant = (uint8_t)METROLOGY_APP_dGet_instantaneous_value(QUADRANT_C_ID);
 1028f76:	2026      	movs	r0, #38	; 0x26
 1028f78:	4c1a      	ldr	r4, [pc, #104]	; (1028fe4 <REGS_APP_dDetermine_instantaneous_power+0x340>)
 1028f7a:	47a0      	blx	r4
 1028f7c:	4b1d      	ldr	r3, [pc, #116]	; (1028ff4 <REGS_APP_dDetermine_instantaneous_power+0x350>)
 1028f7e:	4798      	blx	r3
			if ( quadrant == (uint8_t)QUADRANT_2 ) {
 1028f80:	b2c0      	uxtb	r0, r0
 1028f82:	2802      	cmp	r0, #2
 1028f84:	f47f aef5 	bne.w	1028d72 <REGS_APP_dDetermine_instantaneous_power+0xce>
 1028f88:	e7f0      	b.n	1028f6c <REGS_APP_dDetermine_instantaneous_power+0x2c8>
			quadrant = (uint8_t)METROLOGY_APP_dGet_instantaneous_value(QUADRANT_B_ID);
 1028f8a:	2025      	movs	r0, #37	; 0x25
 1028f8c:	4c15      	ldr	r4, [pc, #84]	; (1028fe4 <REGS_APP_dDetermine_instantaneous_power+0x340>)
 1028f8e:	47a0      	blx	r4
 1028f90:	4b18      	ldr	r3, [pc, #96]	; (1028ff4 <REGS_APP_dDetermine_instantaneous_power+0x350>)
 1028f92:	4798      	blx	r3
			if ( quadrant == (uint8_t)QUADRANT_2 ) {
 1028f94:	b2c0      	uxtb	r0, r0
 1028f96:	2802      	cmp	r0, #2
 1028f98:	f47f aeeb 	bne.w	1028d72 <REGS_APP_dDetermine_instantaneous_power+0xce>
				inst_value = METROLOGY_APP_dGet_instantaneous_value(S_B_ID);
 1028f9c:	200a      	movs	r0, #10
 1028f9e:	47a0      	blx	r4
 1028fa0:	4605      	mov	r5, r0
 1028fa2:	460c      	mov	r4, r1
 1028fa4:	e6e7      	b.n	1028d76 <REGS_APP_dDetermine_instantaneous_power+0xd2>
			quadrant = (uint8_t)METROLOGY_APP_dGet_instantaneous_value(QUADRANT_B_ID);
 1028fa6:	2025      	movs	r0, #37	; 0x25
 1028fa8:	4c0e      	ldr	r4, [pc, #56]	; (1028fe4 <REGS_APP_dDetermine_instantaneous_power+0x340>)
 1028faa:	47a0      	blx	r4
 1028fac:	4b11      	ldr	r3, [pc, #68]	; (1028ff4 <REGS_APP_dDetermine_instantaneous_power+0x350>)
 1028fae:	4798      	blx	r3
			if ( quadrant == (uint8_t)QUADRANT_1 ) {
 1028fb0:	b2c0      	uxtb	r0, r0
 1028fb2:	2801      	cmp	r0, #1
 1028fb4:	f47f aedd 	bne.w	1028d72 <REGS_APP_dDetermine_instantaneous_power+0xce>
 1028fb8:	e7f0      	b.n	1028f9c <REGS_APP_dDetermine_instantaneous_power+0x2f8>
			if ( METROLOGY_APP_dGet_instantaneous_value(P_B_ID) > 0 ) {
 1028fba:	2002      	movs	r0, #2
 1028fbc:	4c09      	ldr	r4, [pc, #36]	; (1028fe4 <REGS_APP_dDetermine_instantaneous_power+0x340>)
 1028fbe:	4d0c      	ldr	r5, [pc, #48]	; (1028ff0 <REGS_APP_dDetermine_instantaneous_power+0x34c>)
 1028fc0:	47a0      	blx	r4
 1028fc2:	2200      	movs	r2, #0
 1028fc4:	2300      	movs	r3, #0
 1028fc6:	47a8      	blx	r5
 1028fc8:	2800      	cmp	r0, #0
 1028fca:	d1e7      	bne.n	1028f9c <REGS_APP_dDetermine_instantaneous_power+0x2f8>
 1028fcc:	e6d1      	b.n	1028d72 <REGS_APP_dDetermine_instantaneous_power+0xce>
			quadrant = (uint8_t)METROLOGY_APP_dGet_instantaneous_value(QUADRANT_B_ID);
 1028fce:	2025      	movs	r0, #37	; 0x25
 1028fd0:	4c04      	ldr	r4, [pc, #16]	; (1028fe4 <REGS_APP_dDetermine_instantaneous_power+0x340>)
 1028fd2:	47a0      	blx	r4
 1028fd4:	4b07      	ldr	r3, [pc, #28]	; (1028ff4 <REGS_APP_dDetermine_instantaneous_power+0x350>)
 1028fd6:	4798      	blx	r3
			if ( (quadrant == (uint8_t)QUADRANT_2) || (quadrant == (uint8_t)QUADRANT_3) ) {
 1028fd8:	1e83      	subs	r3, r0, #2
 1028fda:	b2db      	uxtb	r3, r3
 1028fdc:	2b01      	cmp	r3, #1
 1028fde:	f63f aec8 	bhi.w	1028d72 <REGS_APP_dDetermine_instantaneous_power+0xce>
 1028fe2:	e7a3      	b.n	1028f2c <REGS_APP_dDetermine_instantaneous_power+0x288>
 1028fe4:	0101f065 	.word	0x0101f065
 1028fe8:	010304e9 	.word	0x010304e9
 1028fec:	20016c28 	.word	0x20016c28
 1028ff0:	01030525 	.word	0x01030525
 1028ff4:	010305b5 	.word	0x010305b5
			quadrant = (uint8_t)METROLOGY_APP_dGet_instantaneous_value(QUADRANT_B_ID);
 1028ff8:	2025      	movs	r0, #37	; 0x25
 1028ffa:	4ca1      	ldr	r4, [pc, #644]	; (1029280 <REGS_APP_dDetermine_instantaneous_power+0x5dc>)
 1028ffc:	47a0      	blx	r4
 1028ffe:	4ba1      	ldr	r3, [pc, #644]	; (1029284 <REGS_APP_dDetermine_instantaneous_power+0x5e0>)
 1029000:	4798      	blx	r3
 1029002:	b2c0      	uxtb	r0, r0
			if ( (quadrant == (uint8_t)QUADRANT_1) || (quadrant == (uint8_t)QUADRANT_4) ) {
 1029004:	2801      	cmp	r0, #1
 1029006:	d091      	beq.n	1028f2c <REGS_APP_dDetermine_instantaneous_power+0x288>
 1029008:	2804      	cmp	r0, #4
 102900a:	f47f aeb2 	bne.w	1028d72 <REGS_APP_dDetermine_instantaneous_power+0xce>
 102900e:	e78d      	b.n	1028f2c <REGS_APP_dDetermine_instantaneous_power+0x288>
			quadrant = (uint8_t)METROLOGY_APP_dGet_instantaneous_value(QUADRANT_C_ID);
 1029010:	2026      	movs	r0, #38	; 0x26
 1029012:	4c9b      	ldr	r4, [pc, #620]	; (1029280 <REGS_APP_dDetermine_instantaneous_power+0x5dc>)
 1029014:	47a0      	blx	r4
 1029016:	4b9b      	ldr	r3, [pc, #620]	; (1029284 <REGS_APP_dDetermine_instantaneous_power+0x5e0>)
 1029018:	4798      	blx	r3
			if ( quadrant == (uint8_t)QUADRANT_2 ) {
 102901a:	b2c0      	uxtb	r0, r0
 102901c:	2802      	cmp	r0, #2
 102901e:	f47f aea8 	bne.w	1028d72 <REGS_APP_dDetermine_instantaneous_power+0xce>
				inst_value = fabs( METROLOGY_APP_dGet_instantaneous_value(Q_C_ID) );
 1029022:	2007      	movs	r0, #7
 1029024:	e729      	b.n	1028e7a <REGS_APP_dDetermine_instantaneous_power+0x1d6>
			quadrant = (uint8_t)METROLOGY_APP_dGet_instantaneous_value(QUADRANT_C_ID);
 1029026:	2026      	movs	r0, #38	; 0x26
 1029028:	4c95      	ldr	r4, [pc, #596]	; (1029280 <REGS_APP_dDetermine_instantaneous_power+0x5dc>)
 102902a:	47a0      	blx	r4
 102902c:	4b95      	ldr	r3, [pc, #596]	; (1029284 <REGS_APP_dDetermine_instantaneous_power+0x5e0>)
 102902e:	4798      	blx	r3
			if ( quadrant == (uint8_t)QUADRANT_1 ) {
 1029030:	b2c0      	uxtb	r0, r0
 1029032:	2801      	cmp	r0, #1
 1029034:	f47f ae9d 	bne.w	1028d72 <REGS_APP_dDetermine_instantaneous_power+0xce>
 1029038:	e7f3      	b.n	1029022 <REGS_APP_dDetermine_instantaneous_power+0x37e>
			rms_val = METROLOGY_APP_dGet_instantaneous_value(P_C_ID);		
 102903a:	2003      	movs	r0, #3
 102903c:	4b90      	ldr	r3, [pc, #576]	; (1029280 <REGS_APP_dDetermine_instantaneous_power+0x5dc>)
 102903e:	4798      	blx	r3
			inst_value = fabs(rms_val);
 1029040:	4605      	mov	r5, r0
 1029042:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
			break;
 1029046:	e696      	b.n	1028d76 <REGS_APP_dDetermine_instantaneous_power+0xd2>
			inst_value = METROLOGY_APP_dGet_instantaneous_value(P_C_ID);
 1029048:	2003      	movs	r0, #3
 102904a:	4b8d      	ldr	r3, [pc, #564]	; (1029280 <REGS_APP_dDetermine_instantaneous_power+0x5dc>)
 102904c:	4798      	blx	r3
 102904e:	4605      	mov	r5, r0
 1029050:	460c      	mov	r4, r1
			break;
 1029052:	e690      	b.n	1028d76 <REGS_APP_dDetermine_instantaneous_power+0xd2>
			rms_val = METROLOGY_APP_dGet_instantaneous_value(P_C_ID);
 1029054:	2003      	movs	r0, #3
 1029056:	e6ee      	b.n	1028e36 <REGS_APP_dDetermine_instantaneous_power+0x192>
			quadrant = (uint8_t)METROLOGY_APP_dGet_instantaneous_value(QUADRANT_C_ID);
 1029058:	2026      	movs	r0, #38	; 0x26
 102905a:	4c89      	ldr	r4, [pc, #548]	; (1029280 <REGS_APP_dDetermine_instantaneous_power+0x5dc>)
 102905c:	47a0      	blx	r4
 102905e:	4b89      	ldr	r3, [pc, #548]	; (1029284 <REGS_APP_dDetermine_instantaneous_power+0x5e0>)
 1029060:	4798      	blx	r3
 1029062:	b2c0      	uxtb	r0, r0
			if ( (quadrant == (uint8_t)QUADRANT_1) || (quadrant == (uint8_t)QUADRANT_4) ) {
 1029064:	2801      	cmp	r0, #1
 1029066:	d0dc      	beq.n	1029022 <REGS_APP_dDetermine_instantaneous_power+0x37e>
 1029068:	2804      	cmp	r0, #4
 102906a:	f47f ae82 	bne.w	1028d72 <REGS_APP_dDetermine_instantaneous_power+0xce>
 102906e:	e7d8      	b.n	1029022 <REGS_APP_dDetermine_instantaneous_power+0x37e>
			inst_value = fabs( METROLOGY_APP_dGet_instantaneous_value(Q_C_ID) );
 1029070:	2007      	movs	r0, #7
 1029072:	4b83      	ldr	r3, [pc, #524]	; (1029280 <REGS_APP_dDetermine_instantaneous_power+0x5dc>)
 1029074:	4798      	blx	r3
 1029076:	4605      	mov	r5, r0
 1029078:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
			break;
 102907c:	e67b      	b.n	1028d76 <REGS_APP_dDetermine_instantaneous_power+0xd2>
			inst_value = METROLOGY_APP_dGet_instantaneous_value(Q_C_ID);
 102907e:	2007      	movs	r0, #7
 1029080:	4b7f      	ldr	r3, [pc, #508]	; (1029280 <REGS_APP_dDetermine_instantaneous_power+0x5dc>)
 1029082:	4798      	blx	r3
 1029084:	4605      	mov	r5, r0
 1029086:	460c      	mov	r4, r1
			break;
 1029088:	e675      	b.n	1028d76 <REGS_APP_dDetermine_instantaneous_power+0xd2>
			rms_val = METROLOGY_APP_dGet_instantaneous_value(Q_C_ID);
 102908a:	2007      	movs	r0, #7
 102908c:	e6d3      	b.n	1028e36 <REGS_APP_dDetermine_instantaneous_power+0x192>
			quadrant = (uint8_t)METROLOGY_APP_dGet_instantaneous_value(QUADRANT_C_ID);
 102908e:	2026      	movs	r0, #38	; 0x26
 1029090:	4c7b      	ldr	r4, [pc, #492]	; (1029280 <REGS_APP_dDetermine_instantaneous_power+0x5dc>)
 1029092:	47a0      	blx	r4
 1029094:	4b7b      	ldr	r3, [pc, #492]	; (1029284 <REGS_APP_dDetermine_instantaneous_power+0x5e0>)
 1029096:	4798      	blx	r3
			if ( (quadrant == (uint8_t)QUADRANT_2) || (quadrant == (uint8_t)QUADRANT_3) ) {
 1029098:	1e83      	subs	r3, r0, #2
 102909a:	b2db      	uxtb	r3, r3
 102909c:	2b01      	cmp	r3, #1
 102909e:	f63f ae68 	bhi.w	1028d72 <REGS_APP_dDetermine_instantaneous_power+0xce>
 10290a2:	e7be      	b.n	1029022 <REGS_APP_dDetermine_instantaneous_power+0x37e>
			quadrant = (uint8_t)METROLOGY_APP_dGet_instantaneous_value(QUADRANT_B_ID);
 10290a4:	2025      	movs	r0, #37	; 0x25
 10290a6:	4c76      	ldr	r4, [pc, #472]	; (1029280 <REGS_APP_dDetermine_instantaneous_power+0x5dc>)
 10290a8:	47a0      	blx	r4
 10290aa:	4b76      	ldr	r3, [pc, #472]	; (1029284 <REGS_APP_dDetermine_instantaneous_power+0x5e0>)
 10290ac:	4798      	blx	r3
			if ( quadrant == (uint8_t)QUADRANT_1 ) {
 10290ae:	b2c0      	uxtb	r0, r0
 10290b0:	2801      	cmp	r0, #1
 10290b2:	f47f ae5e 	bne.w	1028d72 <REGS_APP_dDetermine_instantaneous_power+0xce>
 10290b6:	e739      	b.n	1028f2c <REGS_APP_dDetermine_instantaneous_power+0x288>
			quadrant = (uint8_t)METROLOGY_APP_dGet_instantaneous_value(QUADRANT_B_ID);
 10290b8:	2025      	movs	r0, #37	; 0x25
 10290ba:	4c71      	ldr	r4, [pc, #452]	; (1029280 <REGS_APP_dDetermine_instantaneous_power+0x5dc>)
 10290bc:	47a0      	blx	r4
 10290be:	4b71      	ldr	r3, [pc, #452]	; (1029284 <REGS_APP_dDetermine_instantaneous_power+0x5e0>)
 10290c0:	4798      	blx	r3
			if ( quadrant == (uint8_t)QUADRANT_3 ) {
 10290c2:	b2c0      	uxtb	r0, r0
 10290c4:	2803      	cmp	r0, #3
 10290c6:	f47f ae54 	bne.w	1028d72 <REGS_APP_dDetermine_instantaneous_power+0xce>
 10290ca:	e72f      	b.n	1028f2c <REGS_APP_dDetermine_instantaneous_power+0x288>
			quadrant = (uint8_t)METROLOGY_APP_dGet_instantaneous_value(QUADRANT_B_ID);
 10290cc:	2025      	movs	r0, #37	; 0x25
 10290ce:	4c6c      	ldr	r4, [pc, #432]	; (1029280 <REGS_APP_dDetermine_instantaneous_power+0x5dc>)
 10290d0:	47a0      	blx	r4
 10290d2:	4b6c      	ldr	r3, [pc, #432]	; (1029284 <REGS_APP_dDetermine_instantaneous_power+0x5e0>)
 10290d4:	4798      	blx	r3
			if ( quadrant == (uint8_t)QUADRANT_2 ) {
 10290d6:	b2c0      	uxtb	r0, r0
 10290d8:	2802      	cmp	r0, #2
 10290da:	f47f ae4a 	bne.w	1028d72 <REGS_APP_dDetermine_instantaneous_power+0xce>
 10290de:	e725      	b.n	1028f2c <REGS_APP_dDetermine_instantaneous_power+0x288>
			quadrant = (uint8_t)METROLOGY_APP_dGet_instantaneous_value(QUADRANT_A_ID);
 10290e0:	2024      	movs	r0, #36	; 0x24
 10290e2:	4c67      	ldr	r4, [pc, #412]	; (1029280 <REGS_APP_dDetermine_instantaneous_power+0x5dc>)
 10290e4:	47a0      	blx	r4
 10290e6:	4b67      	ldr	r3, [pc, #412]	; (1029284 <REGS_APP_dDetermine_instantaneous_power+0x5e0>)
 10290e8:	4798      	blx	r3
			if ( quadrant == (uint8_t)QUADRANT_3 ) {
 10290ea:	b2c0      	uxtb	r0, r0
 10290ec:	2803      	cmp	r0, #3
 10290ee:	f47f ae40 	bne.w	1028d72 <REGS_APP_dDetermine_instantaneous_power+0xce>
				inst_value = METROLOGY_APP_dGet_instantaneous_value(S_A_ID);
 10290f2:	2009      	movs	r0, #9
 10290f4:	47a0      	blx	r4
 10290f6:	4605      	mov	r5, r0
 10290f8:	460c      	mov	r4, r1
 10290fa:	e63c      	b.n	1028d76 <REGS_APP_dDetermine_instantaneous_power+0xd2>
			quadrant = (uint8_t)METROLOGY_APP_dGet_instantaneous_value(QUADRANT_A_ID);
 10290fc:	2024      	movs	r0, #36	; 0x24
 10290fe:	4c60      	ldr	r4, [pc, #384]	; (1029280 <REGS_APP_dDetermine_instantaneous_power+0x5dc>)
 1029100:	47a0      	blx	r4
 1029102:	4b60      	ldr	r3, [pc, #384]	; (1029284 <REGS_APP_dDetermine_instantaneous_power+0x5e0>)
 1029104:	4798      	blx	r3
			if ( quadrant == (uint8_t)QUADRANT_2 ) {
 1029106:	b2c0      	uxtb	r0, r0
 1029108:	2802      	cmp	r0, #2
 102910a:	f47f ae32 	bne.w	1028d72 <REGS_APP_dDetermine_instantaneous_power+0xce>
 102910e:	e7f0      	b.n	10290f2 <REGS_APP_dDetermine_instantaneous_power+0x44e>
			quadrant = (uint8_t)METROLOGY_APP_dGet_instantaneous_value(QUADRANT_A_ID);
 1029110:	2024      	movs	r0, #36	; 0x24
 1029112:	4c5b      	ldr	r4, [pc, #364]	; (1029280 <REGS_APP_dDetermine_instantaneous_power+0x5dc>)
 1029114:	47a0      	blx	r4
 1029116:	4b5b      	ldr	r3, [pc, #364]	; (1029284 <REGS_APP_dDetermine_instantaneous_power+0x5e0>)
 1029118:	4798      	blx	r3
			if ( quadrant == (uint8_t)QUADRANT_1 ) {
 102911a:	b2c0      	uxtb	r0, r0
 102911c:	2801      	cmp	r0, #1
 102911e:	f47f ae28 	bne.w	1028d72 <REGS_APP_dDetermine_instantaneous_power+0xce>
 1029122:	e7e6      	b.n	10290f2 <REGS_APP_dDetermine_instantaneous_power+0x44e>
			if ( METROLOGY_APP_dGet_instantaneous_value(P_C_ID) < 0 ) {
 1029124:	2003      	movs	r0, #3
 1029126:	4c56      	ldr	r4, [pc, #344]	; (1029280 <REGS_APP_dDetermine_instantaneous_power+0x5dc>)
 1029128:	4d57      	ldr	r5, [pc, #348]	; (1029288 <REGS_APP_dDetermine_instantaneous_power+0x5e4>)
 102912a:	47a0      	blx	r4
 102912c:	2200      	movs	r2, #0
 102912e:	2300      	movs	r3, #0
 1029130:	47a8      	blx	r5
 1029132:	2800      	cmp	r0, #0
 1029134:	f43f ae1d 	beq.w	1028d72 <REGS_APP_dDetermine_instantaneous_power+0xce>
 1029138:	e718      	b.n	1028f6c <REGS_APP_dDetermine_instantaneous_power+0x2c8>
			if ( METROLOGY_APP_dGet_instantaneous_value(P_C_ID) > 0 ) {
 102913a:	2003      	movs	r0, #3
 102913c:	4c50      	ldr	r4, [pc, #320]	; (1029280 <REGS_APP_dDetermine_instantaneous_power+0x5dc>)
 102913e:	4d53      	ldr	r5, [pc, #332]	; (102928c <REGS_APP_dDetermine_instantaneous_power+0x5e8>)
 1029140:	47a0      	blx	r4
 1029142:	2200      	movs	r2, #0
 1029144:	2300      	movs	r3, #0
 1029146:	47a8      	blx	r5
 1029148:	2800      	cmp	r0, #0
 102914a:	f47f af0f 	bne.w	1028f6c <REGS_APP_dDetermine_instantaneous_power+0x2c8>
 102914e:	e610      	b.n	1028d72 <REGS_APP_dDetermine_instantaneous_power+0xce>
			if ( METROLOGY_APP_dGet_instantaneous_value(P_A_ID) < 0 ) {
 1029150:	2001      	movs	r0, #1
 1029152:	4c4b      	ldr	r4, [pc, #300]	; (1029280 <REGS_APP_dDetermine_instantaneous_power+0x5dc>)
 1029154:	4d4c      	ldr	r5, [pc, #304]	; (1029288 <REGS_APP_dDetermine_instantaneous_power+0x5e4>)
 1029156:	47a0      	blx	r4
 1029158:	2200      	movs	r2, #0
 102915a:	2300      	movs	r3, #0
 102915c:	47a8      	blx	r5
 102915e:	2800      	cmp	r0, #0
 1029160:	f43f ae07 	beq.w	1028d72 <REGS_APP_dDetermine_instantaneous_power+0xce>
 1029164:	e7c5      	b.n	10290f2 <REGS_APP_dDetermine_instantaneous_power+0x44e>
			if ( METROLOGY_APP_dGet_instantaneous_value(P_A_ID) > 0 ) {
 1029166:	2001      	movs	r0, #1
 1029168:	4c45      	ldr	r4, [pc, #276]	; (1029280 <REGS_APP_dDetermine_instantaneous_power+0x5dc>)
 102916a:	4d48      	ldr	r5, [pc, #288]	; (102928c <REGS_APP_dDetermine_instantaneous_power+0x5e8>)
 102916c:	47a0      	blx	r4
 102916e:	2200      	movs	r2, #0
 1029170:	2300      	movs	r3, #0
 1029172:	47a8      	blx	r5
 1029174:	2800      	cmp	r0, #0
 1029176:	d1bc      	bne.n	10290f2 <REGS_APP_dDetermine_instantaneous_power+0x44e>
 1029178:	e5fb      	b.n	1028d72 <REGS_APP_dDetermine_instantaneous_power+0xce>
			quadrant = (uint8_t)METROLOGY_APP_dGet_instantaneous_value(QUADRANT_A_ID);
 102917a:	2024      	movs	r0, #36	; 0x24
 102917c:	4c40      	ldr	r4, [pc, #256]	; (1029280 <REGS_APP_dDetermine_instantaneous_power+0x5dc>)
 102917e:	47a0      	blx	r4
 1029180:	4b40      	ldr	r3, [pc, #256]	; (1029284 <REGS_APP_dDetermine_instantaneous_power+0x5e0>)
 1029182:	4798      	blx	r3
			if ( (quadrant == (uint8_t)QUADRANT_2) || (quadrant == (uint8_t)QUADRANT_3) ) {
 1029184:	1e83      	subs	r3, r0, #2
 1029186:	b2db      	uxtb	r3, r3
 1029188:	2b01      	cmp	r3, #1
 102918a:	f63f adf2 	bhi.w	1028d72 <REGS_APP_dDetermine_instantaneous_power+0xce>
 102918e:	e6be      	b.n	1028f0e <REGS_APP_dDetermine_instantaneous_power+0x26a>
			quadrant = (uint8_t)METROLOGY_APP_dGet_instantaneous_value(QUADRANT_A_ID);
 1029190:	2024      	movs	r0, #36	; 0x24
 1029192:	4c3b      	ldr	r4, [pc, #236]	; (1029280 <REGS_APP_dDetermine_instantaneous_power+0x5dc>)
 1029194:	47a0      	blx	r4
 1029196:	4b3b      	ldr	r3, [pc, #236]	; (1029284 <REGS_APP_dDetermine_instantaneous_power+0x5e0>)
 1029198:	4798      	blx	r3
 102919a:	b2c0      	uxtb	r0, r0
			if ( (quadrant == (uint8_t)QUADRANT_1) || (quadrant == (uint8_t)QUADRANT_4) ) {
 102919c:	2801      	cmp	r0, #1
 102919e:	f43f aeb6 	beq.w	1028f0e <REGS_APP_dDetermine_instantaneous_power+0x26a>
 10291a2:	2804      	cmp	r0, #4
 10291a4:	f47f ade5 	bne.w	1028d72 <REGS_APP_dDetermine_instantaneous_power+0xce>
 10291a8:	e6b1      	b.n	1028f0e <REGS_APP_dDetermine_instantaneous_power+0x26a>
			inst_value = fabs( METROLOGY_APP_dGet_instantaneous_value(Q_A_ID) );
 10291aa:	2005      	movs	r0, #5
 10291ac:	4b34      	ldr	r3, [pc, #208]	; (1029280 <REGS_APP_dDetermine_instantaneous_power+0x5dc>)
 10291ae:	4798      	blx	r3
 10291b0:	4605      	mov	r5, r0
 10291b2:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
			break;
 10291b6:	e5de      	b.n	1028d76 <REGS_APP_dDetermine_instantaneous_power+0xd2>
			inst_value = METROLOGY_APP_dGet_instantaneous_value(Q_A_ID);
 10291b8:	2005      	movs	r0, #5
 10291ba:	4b31      	ldr	r3, [pc, #196]	; (1029280 <REGS_APP_dDetermine_instantaneous_power+0x5dc>)
 10291bc:	4798      	blx	r3
 10291be:	4605      	mov	r5, r0
 10291c0:	460c      	mov	r4, r1
			break;
 10291c2:	e5d8      	b.n	1028d76 <REGS_APP_dDetermine_instantaneous_power+0xd2>
			rms_val = METROLOGY_APP_dGet_instantaneous_value(P_B_ID);		
 10291c4:	2002      	movs	r0, #2
 10291c6:	4b2e      	ldr	r3, [pc, #184]	; (1029280 <REGS_APP_dDetermine_instantaneous_power+0x5dc>)
 10291c8:	4798      	blx	r3
			inst_value = fabs(rms_val);
 10291ca:	4605      	mov	r5, r0
 10291cc:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
			break;
 10291d0:	e5d1      	b.n	1028d76 <REGS_APP_dDetermine_instantaneous_power+0xd2>
			inst_value = METROLOGY_APP_dGet_instantaneous_value(P_B_ID);
 10291d2:	2002      	movs	r0, #2
 10291d4:	4b2a      	ldr	r3, [pc, #168]	; (1029280 <REGS_APP_dDetermine_instantaneous_power+0x5dc>)
 10291d6:	4798      	blx	r3
 10291d8:	4605      	mov	r5, r0
 10291da:	460c      	mov	r4, r1
			break;
 10291dc:	e5cb      	b.n	1028d76 <REGS_APP_dDetermine_instantaneous_power+0xd2>
			rms_val = METROLOGY_APP_dGet_instantaneous_value(P_B_ID);
 10291de:	2002      	movs	r0, #2
 10291e0:	e629      	b.n	1028e36 <REGS_APP_dDetermine_instantaneous_power+0x192>
			rms_val = METROLOGY_APP_dGet_instantaneous_value(P_B_ID);
 10291e2:	2002      	movs	r0, #2
 10291e4:	e635      	b.n	1028e52 <REGS_APP_dDetermine_instantaneous_power+0x1ae>
			quadrant = (uint8_t)METROLOGY_APP_dGet_instantaneous_value(QUADRANT_A_ID);
 10291e6:	2024      	movs	r0, #36	; 0x24
 10291e8:	4c25      	ldr	r4, [pc, #148]	; (1029280 <REGS_APP_dDetermine_instantaneous_power+0x5dc>)
 10291ea:	47a0      	blx	r4
 10291ec:	4b25      	ldr	r3, [pc, #148]	; (1029284 <REGS_APP_dDetermine_instantaneous_power+0x5e0>)
 10291ee:	4798      	blx	r3
			if ( quadrant == (uint8_t)QUADRANT_4 ) {
 10291f0:	b2c0      	uxtb	r0, r0
 10291f2:	2804      	cmp	r0, #4
 10291f4:	f47f adbd 	bne.w	1028d72 <REGS_APP_dDetermine_instantaneous_power+0xce>
 10291f8:	e77b      	b.n	10290f2 <REGS_APP_dDetermine_instantaneous_power+0x44e>
			rms_val = METROLOGY_APP_dGet_instantaneous_value(P_C_ID);
 10291fa:	2003      	movs	r0, #3
 10291fc:	e629      	b.n	1028e52 <REGS_APP_dDetermine_instantaneous_power+0x1ae>
			quadrant = (uint8_t)METROLOGY_APP_dGet_instantaneous_value(QUADRANT_B_ID);
 10291fe:	2025      	movs	r0, #37	; 0x25
 1029200:	4c1f      	ldr	r4, [pc, #124]	; (1029280 <REGS_APP_dDetermine_instantaneous_power+0x5dc>)
 1029202:	47a0      	blx	r4
 1029204:	4b1f      	ldr	r3, [pc, #124]	; (1029284 <REGS_APP_dDetermine_instantaneous_power+0x5e0>)
 1029206:	4798      	blx	r3
			if ( quadrant == (uint8_t)QUADRANT_4 ) {
 1029208:	b2c0      	uxtb	r0, r0
 102920a:	2804      	cmp	r0, #4
 102920c:	f47f adb1 	bne.w	1028d72 <REGS_APP_dDetermine_instantaneous_power+0xce>
 1029210:	e6c4      	b.n	1028f9c <REGS_APP_dDetermine_instantaneous_power+0x2f8>
			quadrant = (uint8_t)METROLOGY_APP_dGet_instantaneous_value(QUADRANT_B_ID);
 1029212:	2025      	movs	r0, #37	; 0x25
 1029214:	4c1a      	ldr	r4, [pc, #104]	; (1029280 <REGS_APP_dDetermine_instantaneous_power+0x5dc>)
 1029216:	47a0      	blx	r4
 1029218:	4b1a      	ldr	r3, [pc, #104]	; (1029284 <REGS_APP_dDetermine_instantaneous_power+0x5e0>)
 102921a:	4798      	blx	r3
			if ( quadrant == (uint8_t)QUADRANT_3 ) {
 102921c:	b2c0      	uxtb	r0, r0
 102921e:	2803      	cmp	r0, #3
 1029220:	f47f ada7 	bne.w	1028d72 <REGS_APP_dDetermine_instantaneous_power+0xce>
 1029224:	e6ba      	b.n	1028f9c <REGS_APP_dDetermine_instantaneous_power+0x2f8>
			quadrant = (uint8_t)METROLOGY_APP_dGet_instantaneous_value(QUADRANT_C_ID);
 1029226:	2026      	movs	r0, #38	; 0x26
 1029228:	4c15      	ldr	r4, [pc, #84]	; (1029280 <REGS_APP_dDetermine_instantaneous_power+0x5dc>)
 102922a:	47a0      	blx	r4
 102922c:	4b15      	ldr	r3, [pc, #84]	; (1029284 <REGS_APP_dDetermine_instantaneous_power+0x5e0>)
 102922e:	4798      	blx	r3
			if ( quadrant == (uint8_t)QUADRANT_3 ) {
 1029230:	b2c0      	uxtb	r0, r0
 1029232:	2803      	cmp	r0, #3
 1029234:	f47f ad9d 	bne.w	1028d72 <REGS_APP_dDetermine_instantaneous_power+0xce>
 1029238:	e698      	b.n	1028f6c <REGS_APP_dDetermine_instantaneous_power+0x2c8>
			quadrant = (uint8_t)METROLOGY_APP_dGet_instantaneous_value(QUADRANT_C_ID);
 102923a:	2026      	movs	r0, #38	; 0x26
 102923c:	4c10      	ldr	r4, [pc, #64]	; (1029280 <REGS_APP_dDetermine_instantaneous_power+0x5dc>)
 102923e:	47a0      	blx	r4
 1029240:	4b10      	ldr	r3, [pc, #64]	; (1029284 <REGS_APP_dDetermine_instantaneous_power+0x5e0>)
 1029242:	4798      	blx	r3
			if ( quadrant == (uint8_t)QUADRANT_4 ) {
 1029244:	b2c0      	uxtb	r0, r0
 1029246:	2804      	cmp	r0, #4
 1029248:	f47f ad93 	bne.w	1028d72 <REGS_APP_dDetermine_instantaneous_power+0xce>
 102924c:	e68e      	b.n	1028f6c <REGS_APP_dDetermine_instantaneous_power+0x2c8>
			quadrant = (uint8_t)METROLOGY_APP_dGet_instantaneous_value(QUADRANT_T_ID);
 102924e:	2023      	movs	r0, #35	; 0x23
 1029250:	4c0b      	ldr	r4, [pc, #44]	; (1029280 <REGS_APP_dDetermine_instantaneous_power+0x5dc>)
 1029252:	47a0      	blx	r4
 1029254:	4b0b      	ldr	r3, [pc, #44]	; (1029284 <REGS_APP_dDetermine_instantaneous_power+0x5e0>)
 1029256:	4798      	blx	r3
			if ( quadrant == (uint8_t)QUADRANT_2 ) {
 1029258:	b2c0      	uxtb	r0, r0
 102925a:	2802      	cmp	r0, #2
 102925c:	f47f ad89 	bne.w	1028d72 <REGS_APP_dDetermine_instantaneous_power+0xce>
 1029260:	e5b2      	b.n	1028dc8 <REGS_APP_dDetermine_instantaneous_power+0x124>
			quadrant = (uint8_t)METROLOGY_APP_dGet_instantaneous_value(QUADRANT_T_ID);
 1029262:	2023      	movs	r0, #35	; 0x23
 1029264:	4c06      	ldr	r4, [pc, #24]	; (1029280 <REGS_APP_dDetermine_instantaneous_power+0x5dc>)
 1029266:	47a0      	blx	r4
 1029268:	4b06      	ldr	r3, [pc, #24]	; (1029284 <REGS_APP_dDetermine_instantaneous_power+0x5e0>)
 102926a:	4798      	blx	r3
			if ( quadrant == (uint8_t)QUADRANT_1 ) {
 102926c:	b2c0      	uxtb	r0, r0
 102926e:	2801      	cmp	r0, #1
 1029270:	f47f ad7f 	bne.w	1028d72 <REGS_APP_dDetermine_instantaneous_power+0xce>
 1029274:	e5a8      	b.n	1028dc8 <REGS_APP_dDetermine_instantaneous_power+0x124>
			rms_val = METROLOGY_APP_dGet_instantaneous_value(P_A_ID);
 1029276:	2001      	movs	r0, #1
 1029278:	e5dd      	b.n	1028e36 <REGS_APP_dDetermine_instantaneous_power+0x192>
			rms_val = METROLOGY_APP_dGet_instantaneous_value(P_A_ID);
 102927a:	2001      	movs	r0, #1
 102927c:	e5e9      	b.n	1028e52 <REGS_APP_dDetermine_instantaneous_power+0x1ae>
 102927e:	bf00      	nop
 1029280:	0101f065 	.word	0x0101f065
 1029284:	010305b5 	.word	0x010305b5
 1029288:	010304e9 	.word	0x010304e9
 102928c:	01030525 	.word	0x01030525
			quadrant = (uint8_t)METROLOGY_APP_dGet_instantaneous_value(QUADRANT_T_ID);
 1029290:	2023      	movs	r0, #35	; 0x23
 1029292:	4c25      	ldr	r4, [pc, #148]	; (1029328 <REGS_APP_dDetermine_instantaneous_power+0x684>)
 1029294:	47a0      	blx	r4
 1029296:	4b25      	ldr	r3, [pc, #148]	; (102932c <REGS_APP_dDetermine_instantaneous_power+0x688>)
 1029298:	4798      	blx	r3
			if ( quadrant == (uint8_t)QUADRANT_4 ) {
 102929a:	b2c0      	uxtb	r0, r0
 102929c:	2804      	cmp	r0, #4
 102929e:	f47f ad68 	bne.w	1028d72 <REGS_APP_dDetermine_instantaneous_power+0xce>
 10292a2:	e591      	b.n	1028dc8 <REGS_APP_dDetermine_instantaneous_power+0x124>
			quadrant = (uint8_t)METROLOGY_APP_dGet_instantaneous_value(QUADRANT_T_ID);
 10292a4:	2023      	movs	r0, #35	; 0x23
 10292a6:	4c20      	ldr	r4, [pc, #128]	; (1029328 <REGS_APP_dDetermine_instantaneous_power+0x684>)
 10292a8:	47a0      	blx	r4
 10292aa:	4b20      	ldr	r3, [pc, #128]	; (102932c <REGS_APP_dDetermine_instantaneous_power+0x688>)
 10292ac:	4798      	blx	r3
			if ( quadrant == (uint8_t)QUADRANT_3 ) {
 10292ae:	b2c0      	uxtb	r0, r0
 10292b0:	2803      	cmp	r0, #3
 10292b2:	f47f ad5e 	bne.w	1028d72 <REGS_APP_dDetermine_instantaneous_power+0xce>
 10292b6:	e587      	b.n	1028dc8 <REGS_APP_dDetermine_instantaneous_power+0x124>
			rms_val = METROLOGY_APP_dGet_instantaneous_value(Q_A_ID);
 10292b8:	2005      	movs	r0, #5
 10292ba:	e5bc      	b.n	1028e36 <REGS_APP_dDetermine_instantaneous_power+0x192>
			rms_val = METROLOGY_APP_dGet_instantaneous_value(Q_A_ID);
 10292bc:	2005      	movs	r0, #5
 10292be:	e5c8      	b.n	1028e52 <REGS_APP_dDetermine_instantaneous_power+0x1ae>
			quadrant = (uint8_t)METROLOGY_APP_dGet_instantaneous_value(QUADRANT_A_ID);
 10292c0:	2024      	movs	r0, #36	; 0x24
 10292c2:	4c19      	ldr	r4, [pc, #100]	; (1029328 <REGS_APP_dDetermine_instantaneous_power+0x684>)
 10292c4:	47a0      	blx	r4
 10292c6:	4b19      	ldr	r3, [pc, #100]	; (102932c <REGS_APP_dDetermine_instantaneous_power+0x688>)
 10292c8:	4798      	blx	r3
			if ( quadrant == (uint8_t)QUADRANT_4 ) {
 10292ca:	b2c0      	uxtb	r0, r0
 10292cc:	2804      	cmp	r0, #4
 10292ce:	f47f ad50 	bne.w	1028d72 <REGS_APP_dDetermine_instantaneous_power+0xce>
 10292d2:	e61c      	b.n	1028f0e <REGS_APP_dDetermine_instantaneous_power+0x26a>
			quadrant = (uint8_t)METROLOGY_APP_dGet_instantaneous_value(QUADRANT_A_ID);
 10292d4:	2024      	movs	r0, #36	; 0x24
 10292d6:	4c14      	ldr	r4, [pc, #80]	; (1029328 <REGS_APP_dDetermine_instantaneous_power+0x684>)
 10292d8:	47a0      	blx	r4
 10292da:	4b14      	ldr	r3, [pc, #80]	; (102932c <REGS_APP_dDetermine_instantaneous_power+0x688>)
 10292dc:	4798      	blx	r3
			if ( quadrant == (uint8_t)QUADRANT_3 ) {
 10292de:	b2c0      	uxtb	r0, r0
 10292e0:	2803      	cmp	r0, #3
 10292e2:	f47f ad46 	bne.w	1028d72 <REGS_APP_dDetermine_instantaneous_power+0xce>
 10292e6:	e612      	b.n	1028f0e <REGS_APP_dDetermine_instantaneous_power+0x26a>
			quadrant = (uint8_t)METROLOGY_APP_dGet_instantaneous_value(QUADRANT_A_ID);
 10292e8:	2024      	movs	r0, #36	; 0x24
 10292ea:	4c0f      	ldr	r4, [pc, #60]	; (1029328 <REGS_APP_dDetermine_instantaneous_power+0x684>)
 10292ec:	47a0      	blx	r4
 10292ee:	4b0f      	ldr	r3, [pc, #60]	; (102932c <REGS_APP_dDetermine_instantaneous_power+0x688>)
 10292f0:	4798      	blx	r3
			if ( quadrant == (uint8_t)QUADRANT_2 ) {
 10292f2:	b2c0      	uxtb	r0, r0
 10292f4:	2802      	cmp	r0, #2
 10292f6:	f47f ad3c 	bne.w	1028d72 <REGS_APP_dDetermine_instantaneous_power+0xce>
 10292fa:	e608      	b.n	1028f0e <REGS_APP_dDetermine_instantaneous_power+0x26a>
			rms_val = METROLOGY_APP_dGet_instantaneous_value(Q_C_ID);
 10292fc:	2007      	movs	r0, #7
 10292fe:	e5a8      	b.n	1028e52 <REGS_APP_dDetermine_instantaneous_power+0x1ae>
			quadrant = (uint8_t)METROLOGY_APP_dGet_instantaneous_value(QUADRANT_C_ID);
 1029300:	2026      	movs	r0, #38	; 0x26
 1029302:	4c09      	ldr	r4, [pc, #36]	; (1029328 <REGS_APP_dDetermine_instantaneous_power+0x684>)
 1029304:	47a0      	blx	r4
 1029306:	4b09      	ldr	r3, [pc, #36]	; (102932c <REGS_APP_dDetermine_instantaneous_power+0x688>)
 1029308:	4798      	blx	r3
			if ( quadrant == (uint8_t)QUADRANT_4 ) {
 102930a:	b2c0      	uxtb	r0, r0
 102930c:	2804      	cmp	r0, #4
 102930e:	f47f ad30 	bne.w	1028d72 <REGS_APP_dDetermine_instantaneous_power+0xce>
 1029312:	e686      	b.n	1029022 <REGS_APP_dDetermine_instantaneous_power+0x37e>
			quadrant = (uint8_t)METROLOGY_APP_dGet_instantaneous_value(QUADRANT_C_ID);
 1029314:	2026      	movs	r0, #38	; 0x26
 1029316:	4c04      	ldr	r4, [pc, #16]	; (1029328 <REGS_APP_dDetermine_instantaneous_power+0x684>)
 1029318:	47a0      	blx	r4
 102931a:	4b04      	ldr	r3, [pc, #16]	; (102932c <REGS_APP_dDetermine_instantaneous_power+0x688>)
 102931c:	4798      	blx	r3
			if ( quadrant == (uint8_t)QUADRANT_3 ) {
 102931e:	b2c0      	uxtb	r0, r0
 1029320:	2803      	cmp	r0, #3
 1029322:	f47f ad26 	bne.w	1028d72 <REGS_APP_dDetermine_instantaneous_power+0xce>
 1029326:	e67c      	b.n	1029022 <REGS_APP_dDetermine_instantaneous_power+0x37e>
 1029328:	0101f065 	.word	0x0101f065
 102932c:	010305b5 	.word	0x010305b5

01029330 <REGS_APP_vSummation_task>:
void REGS_APP_vSummation_task(void) {
 1029330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if ( !meter.system_state.changing_configuration ) {
 1029334:	4b52      	ldr	r3, [pc, #328]	; (1029480 <REGS_APP_vSummation_task+0x150>)
 1029336:	f893 5022 	ldrb.w	r5, [r3, #34]	; 0x22
void REGS_APP_vSummation_task(void) {
 102933a:	b085      	sub	sp, #20
	if ( !meter.system_state.changing_configuration ) {
 102933c:	b115      	cbz	r5, 1029344 <REGS_APP_vSummation_task+0x14>
}
 102933e:	b005      	add	sp, #20
 1029340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tier = TOU_APP_ucGet_current_tier();
 1029344:	4b4f      	ldr	r3, [pc, #316]	; (1029484 <REGS_APP_vSummation_task+0x154>)
		for ( i = 0; i < st_21.nbr_summations; i++ ) {
 1029346:	f8df a164 	ldr.w	sl, [pc, #356]	; 10294ac <REGS_APP_vSummation_task+0x17c>
		curr_tier = TOU_APP_ucGet_current_tier();
 102934a:	4798      	blx	r3
		for ( i = 0; i < st_21.nbr_summations; i++ ) {
 102934c:	4b4e      	ldr	r3, [pc, #312]	; (1029488 <REGS_APP_vSummation_task+0x158>)
		curr_tier = TOU_APP_ucGet_current_tier();
 102934e:	9002      	str	r0, [sp, #8]
		for ( i = 0; i < st_21.nbr_summations; i++ ) {
 1029350:	78db      	ldrb	r3, [r3, #3]
 1029352:	f88a 5000 	strb.w	r5, [sl]
 1029356:	2b00      	cmp	r3, #0
 1029358:	d0f1      	beq.n	102933e <REGS_APP_vSummation_task+0xe>
 102935a:	00c3      	lsls	r3, r0, #3
 102935c:	4e4b      	ldr	r6, [pc, #300]	; (102948c <REGS_APP_vSummation_task+0x15c>)
 102935e:	f8df b150 	ldr.w	fp, [pc, #336]	; 10294b0 <REGS_APP_vSummation_task+0x180>
 1029362:	9303      	str	r3, [sp, #12]
 1029364:	e036      	b.n	10293d4 <REGS_APP_vSummation_task+0xa4>
				st_23.tot_data_block.summations[i] -= MAX_REGISTER_VALUE;
 1029366:	4640      	mov	r0, r8
 1029368:	a341      	add	r3, pc, #260	; (adr r3, 1029470 <REGS_APP_vSummation_task+0x140>)
 102936a:	e9d3 2300 	ldrd	r2, r3, [r3]
 102936e:	4649      	mov	r1, r9
 1029370:	f8df 8128 	ldr.w	r8, [pc, #296]	; 102949c <REGS_APP_vSummation_task+0x16c>
 1029374:	47c0      	blx	r8
 1029376:	9b01      	ldr	r3, [sp, #4]
 1029378:	e9c3 0100 	strd	r0, r1, [r3]
			st_23.tier_data_block[curr_tier].summations[i] += (double)(inst_value/(double)SECONDS_PER_HOUR); 
 102937c:	9a02      	ldr	r2, [sp, #8]
 102937e:	9b03      	ldr	r3, [sp, #12]
 1029380:	4d43      	ldr	r5, [pc, #268]	; (1029490 <REGS_APP_vSummation_task+0x160>)
 1029382:	1a9b      	subs	r3, r3, r2
 1029384:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 1029388:	340f      	adds	r4, #15
 102938a:	a33b      	add	r3, pc, #236	; (adr r3, 1029478 <REGS_APP_vSummation_task+0x148>)
 102938c:	e9d3 2300 	ldrd	r2, r3, [r3]
 1029390:	e9d6 0100 	ldrd	r0, r1, [r6]
 1029394:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 1029398:	47a8      	blx	r5
 102939a:	e9d4 2300 	ldrd	r2, r3, [r4]
 102939e:	4d3d      	ldr	r5, [pc, #244]	; (1029494 <REGS_APP_vSummation_task+0x164>)
 10293a0:	47a8      	blx	r5
			if (st_23.tier_data_block[curr_tier].summations[i] >= MAX_REGISTER_VALUE) {
 10293a2:	a333      	add	r3, pc, #204	; (adr r3, 1029470 <REGS_APP_vSummation_task+0x140>)
 10293a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 10293a8:	4d3b      	ldr	r5, [pc, #236]	; (1029498 <REGS_APP_vSummation_task+0x168>)
			st_23.tier_data_block[curr_tier].summations[i] += (double)(inst_value/(double)SECONDS_PER_HOUR); 
 10293aa:	4680      	mov	r8, r0
 10293ac:	4689      	mov	r9, r1
			if (st_23.tier_data_block[curr_tier].summations[i] >= MAX_REGISTER_VALUE) {
 10293ae:	47a8      	blx	r5
 10293b0:	2800      	cmp	r0, #0
 10293b2:	d03b      	beq.n	102942c <REGS_APP_vSummation_task+0xfc>
				st_23.tier_data_block[curr_tier].summations[i] -= MAX_REGISTER_VALUE;
 10293b4:	4640      	mov	r0, r8
 10293b6:	4649      	mov	r1, r9
 10293b8:	4d38      	ldr	r5, [pc, #224]	; (102949c <REGS_APP_vSummation_task+0x16c>)
 10293ba:	a32d      	add	r3, pc, #180	; (adr r3, 1029470 <REGS_APP_vSummation_task+0x140>)
 10293bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 10293c0:	47a8      	blx	r5
 10293c2:	e9c4 0100 	strd	r0, r1, [r4]
		for ( i = 0; i < st_21.nbr_summations; i++ ) {
 10293c6:	4b30      	ldr	r3, [pc, #192]	; (1029488 <REGS_APP_vSummation_task+0x158>)
 10293c8:	78db      	ldrb	r3, [r3, #3]
 10293ca:	b2fd      	uxtb	r5, r7
 10293cc:	42ab      	cmp	r3, r5
 10293ce:	f88a 5000 	strb.w	r5, [sl]
 10293d2:	d9b4      	bls.n	102933e <REGS_APP_vSummation_task+0xe>
			inst_value = REGS_APP_dDetermine_instantaneous_power( (uint8_t)st_22.summation_select[i] ); 
 10293d4:	4b32      	ldr	r3, [pc, #200]	; (10294a0 <REGS_APP_vSummation_task+0x170>)
 10293d6:	5d58      	ldrb	r0, [r3, r5]
 10293d8:	4b32      	ldr	r3, [pc, #200]	; (10294a4 <REGS_APP_vSummation_task+0x174>)
 10293da:	4798      	blx	r3
			st_23.tot_data_block.summations[i] += (double)(inst_value/(double)SECONDS_PER_HOUR); 
 10293dc:	f89a 4000 	ldrb.w	r4, [sl]
			inst_value = REGS_APP_dDetermine_instantaneous_power( (uint8_t)st_22.summation_select[i] ); 
 10293e0:	e9c6 0100 	strd	r0, r1, [r6]
			st_23.tot_data_block.summations[i] += (double)(inst_value/(double)SECONDS_PER_HOUR); 
 10293e4:	1c67      	adds	r7, r4, #1
 10293e6:	eb0b 05c7 	add.w	r5, fp, r7, lsl #3
 10293ea:	a323      	add	r3, pc, #140	; (adr r3, 1029478 <REGS_APP_vSummation_task+0x148>)
 10293ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 10293f0:	e9d6 0100 	ldrd	r0, r1, [r6]
 10293f4:	9501      	str	r5, [sp, #4]
 10293f6:	4d26      	ldr	r5, [pc, #152]	; (1029490 <REGS_APP_vSummation_task+0x160>)
 10293f8:	47a8      	blx	r5
 10293fa:	9b01      	ldr	r3, [sp, #4]
 10293fc:	4d25      	ldr	r5, [pc, #148]	; (1029494 <REGS_APP_vSummation_task+0x164>)
 10293fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 1029402:	47a8      	blx	r5
			if (st_23.tot_data_block.summations[i] >= MAX_REGISTER_VALUE) {
 1029404:	a31a      	add	r3, pc, #104	; (adr r3, 1029470 <REGS_APP_vSummation_task+0x140>)
 1029406:	e9d3 2300 	ldrd	r2, r3, [r3]
 102940a:	4d23      	ldr	r5, [pc, #140]	; (1029498 <REGS_APP_vSummation_task+0x168>)
			st_23.tot_data_block.summations[i] += (double)(inst_value/(double)SECONDS_PER_HOUR); 
 102940c:	4680      	mov	r8, r0
 102940e:	4689      	mov	r9, r1
			if (st_23.tot_data_block.summations[i] >= MAX_REGISTER_VALUE) {
 1029410:	47a8      	blx	r5
 1029412:	2800      	cmp	r0, #0
 1029414:	d1a7      	bne.n	1029366 <REGS_APP_vSummation_task+0x36>
			else if ( st_23.tot_data_block.summations[i] < 0 ) {
 1029416:	2200      	movs	r2, #0
 1029418:	2300      	movs	r3, #0
 102941a:	4640      	mov	r0, r8
 102941c:	4649      	mov	r1, r9
 102941e:	4d22      	ldr	r5, [pc, #136]	; (10294a8 <REGS_APP_vSummation_task+0x178>)
 1029420:	47a8      	blx	r5
 1029422:	b968      	cbnz	r0, 1029440 <REGS_APP_vSummation_task+0x110>
			st_23.tot_data_block.summations[i] += (double)(inst_value/(double)SECONDS_PER_HOUR); 
 1029424:	9b01      	ldr	r3, [sp, #4]
 1029426:	e9c3 8900 	strd	r8, r9, [r3]
 102942a:	e7a7      	b.n	102937c <REGS_APP_vSummation_task+0x4c>
			else if ( st_23.tier_data_block[curr_tier].summations[i] < 0 ) {
 102942c:	4d1e      	ldr	r5, [pc, #120]	; (10294a8 <REGS_APP_vSummation_task+0x178>)
 102942e:	2200      	movs	r2, #0
 1029430:	2300      	movs	r3, #0
 1029432:	4640      	mov	r0, r8
 1029434:	4649      	mov	r1, r9
 1029436:	47a8      	blx	r5
 1029438:	b968      	cbnz	r0, 1029456 <REGS_APP_vSummation_task+0x126>
			st_23.tier_data_block[curr_tier].summations[i] += (double)(inst_value/(double)SECONDS_PER_HOUR); 
 102943a:	e9c4 8900 	strd	r8, r9, [r4]
 102943e:	e7c2      	b.n	10293c6 <REGS_APP_vSummation_task+0x96>
				st_23.tot_data_block.summations[i] += MAX_REGISTER_VALUE;
 1029440:	a30b      	add	r3, pc, #44	; (adr r3, 1029470 <REGS_APP_vSummation_task+0x140>)
 1029442:	e9d3 2300 	ldrd	r2, r3, [r3]
 1029446:	4640      	mov	r0, r8
 1029448:	4649      	mov	r1, r9
 102944a:	4d12      	ldr	r5, [pc, #72]	; (1029494 <REGS_APP_vSummation_task+0x164>)
 102944c:	47a8      	blx	r5
 102944e:	9b01      	ldr	r3, [sp, #4]
 1029450:	e9c3 0100 	strd	r0, r1, [r3]
 1029454:	e792      	b.n	102937c <REGS_APP_vSummation_task+0x4c>
				st_23.tier_data_block[curr_tier].summations[i] += MAX_REGISTER_VALUE;
 1029456:	4640      	mov	r0, r8
 1029458:	4649      	mov	r1, r9
 102945a:	a305      	add	r3, pc, #20	; (adr r3, 1029470 <REGS_APP_vSummation_task+0x140>)
 102945c:	e9d3 2300 	ldrd	r2, r3, [r3]
 1029460:	4d0c      	ldr	r5, [pc, #48]	; (1029494 <REGS_APP_vSummation_task+0x164>)
 1029462:	47a8      	blx	r5
 1029464:	e9c4 0100 	strd	r0, r1, [r4]
 1029468:	e7ad      	b.n	10293c6 <REGS_APP_vSummation_task+0x96>
 102946a:	bf00      	nop
 102946c:	f3af 8000 	nop.w
 1029470:	a2000000 	.word	0xa2000000
 1029474:	426d1a94 	.word	0x426d1a94
 1029478:	00000000 	.word	0x00000000
 102947c:	40ac2000 	.word	0x40ac2000
 1029480:	20016c2c 	.word	0x20016c2c
 1029484:	0102d2d5 	.word	0x0102d2d5
 1029488:	2000797c 	.word	0x2000797c
 102948c:	20007968 	.word	0x20007968
 1029490:	01030259 	.word	0x01030259
 1029494:	0102fca1 	.word	0x0102fca1
 1029498:	01030511 	.word	0x01030511
 102949c:	0102fc9d 	.word	0x0102fc9d
 10294a0:	20007988 	.word	0x20007988
 10294a4:	01028ca5 	.word	0x01028ca5
 10294a8:	010304e9 	.word	0x010304e9
 10294ac:	20007958 	.word	0x20007958
 10294b0:	20007998 	.word	0x20007998

010294b4 <REGS_APP_vProcess_demand_interval>:
void REGS_APP_vProcess_demand_interval(PRESENT_DEMAND_INTERVAL_TYPE* demand_interval) {
 10294b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	demand_interval->current_seconds++;
 10294b8:	8803      	ldrh	r3, [r0, #0]
	uint32_t timestamp = rtc.utc_timestamp;
 10294ba:	4a53      	ldr	r2, [pc, #332]	; (1029608 <REGS_APP_vProcess_demand_interval+0x154>)
	if (demand_interval->current_seconds >= demand.config.interval_length ) {
 10294bc:	f8df b174 	ldr.w	fp, [pc, #372]	; 1029634 <REGS_APP_vProcess_demand_interval+0x180>
	uint32_t timestamp = rtc.utc_timestamp;
 10294c0:	6852      	ldr	r2, [r2, #4]
	demand_interval->current_seconds++;
 10294c2:	3301      	adds	r3, #1
 10294c4:	b29b      	uxth	r3, r3
void REGS_APP_vProcess_demand_interval(PRESENT_DEMAND_INTERVAL_TYPE* demand_interval) {
 10294c6:	b085      	sub	sp, #20
	demand_interval->current_seconds++;
 10294c8:	8003      	strh	r3, [r0, #0]
	uint32_t timestamp = rtc.utc_timestamp;
 10294ca:	9202      	str	r2, [sp, #8]
	if (demand_interval->current_seconds >= demand.config.interval_length ) {
 10294cc:	f8bb 2002 	ldrh.w	r2, [fp, #2]
 10294d0:	429a      	cmp	r2, r3
void REGS_APP_vProcess_demand_interval(PRESENT_DEMAND_INTERVAL_TYPE* demand_interval) {
 10294d2:	4682      	mov	sl, r0
	if (demand_interval->current_seconds >= demand.config.interval_length ) {
 10294d4:	f200 8090 	bhi.w	10295f8 <REGS_APP_vProcess_demand_interval+0x144>
		demand_interval->current_seconds = 0;
 10294d8:	2200      	movs	r2, #0
		demand_interval->is_int_expiried = true;
 10294da:	2301      	movs	r3, #1
		demand_interval->current_seconds = 0;
 10294dc:	8002      	strh	r2, [r0, #0]
		demand_interval->is_int_expiried = true;
 10294de:	70c3      	strb	r3, [r0, #3]
	curr_tier = TOU_APP_ucGet_current_tier();
 10294e0:	4b4a      	ldr	r3, [pc, #296]	; (102960c <REGS_APP_vProcess_demand_interval+0x158>)
	for ( i = 0; i < st_21.nbr_demands; i++ ) {
 10294e2:	f8df 8154 	ldr.w	r8, [pc, #340]	; 1029638 <REGS_APP_vProcess_demand_interval+0x184>
	curr_tier = TOU_APP_ucGet_current_tier();
 10294e6:	4798      	blx	r3
	for ( i = 0; i < st_21.nbr_demands; i++ ) {
 10294e8:	4b49      	ldr	r3, [pc, #292]	; (1029610 <REGS_APP_vProcess_demand_interval+0x15c>)
 10294ea:	791b      	ldrb	r3, [r3, #4]
 10294ec:	2500      	movs	r5, #0
 10294ee:	f888 5000 	strb.w	r5, [r8]
 10294f2:	2b00      	cmp	r3, #0
 10294f4:	d06f      	beq.n	10295d6 <REGS_APP_vProcess_demand_interval+0x122>
		if ( demand_value > st_23.tier_data_block[curr_tier].demands[i].demand[0] ) {
 10294f6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 10294fa:	4c46      	ldr	r4, [pc, #280]	; (1029614 <REGS_APP_vProcess_demand_interval+0x160>)
	for ( i = 0; i < st_21.nbr_demands; i++ ) {
 10294fc:	f8cd a004 	str.w	sl, [sp, #4]
		if ( demand_value > st_23.tier_data_block[curr_tier].demands[i].demand[0] ) {
 1029500:	ea4f 1900 	mov.w	r9, r0, lsl #4
	for ( i = 0; i < st_21.nbr_demands; i++ ) {
 1029504:	f8cd b00c 	str.w	fp, [sp, #12]
		inst_value = REGS_APP_dDetermine_instantaneous_power( (uint8_t)st_22.demand_select[i] );
 1029508:	4b43      	ldr	r3, [pc, #268]	; (1029618 <REGS_APP_vProcess_demand_interval+0x164>)
 102950a:	441d      	add	r5, r3
 102950c:	4b43      	ldr	r3, [pc, #268]	; (102961c <REGS_APP_vProcess_demand_interval+0x168>)
 102950e:	79a8      	ldrb	r0, [r5, #6]
 1029510:	4798      	blx	r3
		demand_interval->present_demand[i] += ( inst_value / (double)demand.config.interval_length );
 1029512:	9b03      	ldr	r3, [sp, #12]
 1029514:	f898 5000 	ldrb.w	r5, [r8]
		inst_value = REGS_APP_dDetermine_instantaneous_power( (uint8_t)st_22.demand_select[i] );
 1029518:	4606      	mov	r6, r0
		demand_interval->present_demand[i] += ( inst_value / (double)demand.config.interval_length );
 102951a:	8858      	ldrh	r0, [r3, #2]
 102951c:	4b40      	ldr	r3, [pc, #256]	; (1029620 <REGS_APP_vProcess_demand_interval+0x16c>)
		inst_value = REGS_APP_dDetermine_instantaneous_power( (uint8_t)st_22.demand_select[i] );
 102951e:	460f      	mov	r7, r1
		demand_interval->present_demand[i] += ( inst_value / (double)demand.config.interval_length );
 1029520:	4798      	blx	r3
 1029522:	4602      	mov	r2, r0
 1029524:	4630      	mov	r0, r6
 1029526:	9e01      	ldr	r6, [sp, #4]
 1029528:	460b      	mov	r3, r1
 102952a:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
 102952e:	4639      	mov	r1, r7
 1029530:	4f3c      	ldr	r7, [pc, #240]	; (1029624 <REGS_APP_vProcess_demand_interval+0x170>)
 1029532:	47b8      	blx	r7
 1029534:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
 1029538:	4f3b      	ldr	r7, [pc, #236]	; (1029628 <REGS_APP_vProcess_demand_interval+0x174>)
 102953a:	47b8      	blx	r7
 102953c:	4602      	mov	r2, r0
 102953e:	460b      	mov	r3, r1
 1029540:	e9c6 2302 	strd	r2, r3, [r6, #8]
		demand_value = (uint64_t)( fabs(demand_interval->present_demand[i]) );
 1029544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 1029548:	4b38      	ldr	r3, [pc, #224]	; (102962c <REGS_APP_vProcess_demand_interval+0x178>)
 102954a:	4798      	blx	r3
		if ( demand_value > st_23.tot_data_block.demands[i].demand[0] ) {
 102954c:	016e      	lsls	r6, r5, #5
		demand_value = (uint64_t)( fabs(demand_interval->present_demand[i]) );
 102954e:	4682      	mov	sl, r0
		if ( demand_value > st_23.tier_data_block[curr_tier].demands[i].demand[0] ) {
 1029550:	eb06 0009 	add.w	r0, r6, r9
		if ( demand_value > st_23.tot_data_block.demands[i].demand[0] ) {
 1029554:	4426      	add	r6, r4
 1029556:	e9d6 2314 	ldrd	r2, r3, [r6, #80]	; 0x50
		demand_value = (uint64_t)( fabs(demand_interval->present_demand[i]) );
 102955a:	468b      	mov	fp, r1
		if ( demand_value > st_23.tot_data_block.demands[i].demand[0] ) {
 102955c:	455b      	cmp	r3, fp
			st_23.tier_data_block[curr_tier].demands[i].cont_cum_demand += demand_value;
 102955e:	f105 0102 	add.w	r1, r5, #2
			st_23.tot_data_block.demands[i].cont_cum_demand += demand_value;
 1029562:	460f      	mov	r7, r1
	for ( i = 0; i < st_21.nbr_demands; i++ ) {
 1029564:	f105 0501 	add.w	r5, r5, #1
			st_23.tier_data_block[curr_tier].demands[i].cont_cum_demand += demand_value;
 1029568:	eb09 1141 	add.w	r1, r9, r1, lsl #5
		if ( demand_value > st_23.tot_data_block.demands[i].demand[0] ) {
 102956c:	bf08      	it	eq
 102956e:	4552      	cmpeq	r2, sl
		if ( demand_value > st_23.tier_data_block[curr_tier].demands[i].demand[0] ) {
 1029570:	4420      	add	r0, r4
			st_23.tot_data_block.demands[i].cont_cum_demand += demand_value;
 1029572:	eb04 1747 	add.w	r7, r4, r7, lsl #5
			st_23.tier_data_block[curr_tier].demands[i].cont_cum_demand += demand_value;
 1029576:	4421      	add	r1, r4
	for ( i = 0; i < st_21.nbr_demands; i++ ) {
 1029578:	b2ed      	uxtb	r5, r5
		if ( demand_value > st_23.tot_data_block.demands[i].demand[0] ) {
 102957a:	d20e      	bcs.n	102959a <REGS_APP_vProcess_demand_interval+0xe6>
			st_23.tot_data_block.demands[i].cont_cum_demand += demand_value;
 102957c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 1029580:	eb12 020a 	adds.w	r2, r2, sl
 1029584:	eb43 030b 	adc.w	r3, r3, fp
 1029588:	e9c7 2302 	strd	r2, r3, [r7, #8]
			st_23.tot_data_block.demands[i].event_time[0] = timestamp;
 102958c:	9a02      	ldr	r2, [sp, #8]
 102958e:	63b2      	str	r2, [r6, #56]	; 0x38
			st_23.tot_data_block.demands[i].demand[0] = demand_value;
 1029590:	e9c6 ab14 	strd	sl, fp, [r6, #80]	; 0x50
			registers_os.max_demand = true;
 1029594:	4a26      	ldr	r2, [pc, #152]	; (1029630 <REGS_APP_vProcess_demand_interval+0x17c>)
 1029596:	2301      	movs	r3, #1
 1029598:	7313      	strb	r3, [r2, #12]
		if ( demand_value > st_23.tier_data_block[curr_tier].demands[i].demand[0] ) {
 102959a:	e9d0 2330 	ldrd	r2, r3, [r0, #192]	; 0xc0
 102959e:	455b      	cmp	r3, fp
 10295a0:	bf08      	it	eq
 10295a2:	4552      	cmpeq	r2, sl
 10295a4:	d20f      	bcs.n	10295c6 <REGS_APP_vProcess_demand_interval+0x112>
			st_23.tier_data_block[curr_tier].demands[i].cont_cum_demand += demand_value;
 10295a6:	e9d1 231e 	ldrd	r2, r3, [r1, #120]	; 0x78
 10295aa:	eb12 020a 	adds.w	r2, r2, sl
 10295ae:	eb43 030b 	adc.w	r3, r3, fp
 10295b2:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			st_23.tier_data_block[curr_tier].demands[i].event_time[0] = timestamp;
 10295b6:	9a02      	ldr	r2, [sp, #8]
 10295b8:	f8c0 20a8 	str.w	r2, [r0, #168]	; 0xa8
			st_23.tier_data_block[curr_tier].demands[i].demand[0] = demand_value;
 10295bc:	e9c0 ab30 	strd	sl, fp, [r0, #192]	; 0xc0
			registers_os.max_demand = true;
 10295c0:	4a1b      	ldr	r2, [pc, #108]	; (1029630 <REGS_APP_vProcess_demand_interval+0x17c>)
 10295c2:	2301      	movs	r3, #1
 10295c4:	7313      	strb	r3, [r2, #12]
	for ( i = 0; i < st_21.nbr_demands; i++ ) {
 10295c6:	4b12      	ldr	r3, [pc, #72]	; (1029610 <REGS_APP_vProcess_demand_interval+0x15c>)
 10295c8:	f888 5000 	strb.w	r5, [r8]
 10295cc:	791b      	ldrb	r3, [r3, #4]
 10295ce:	42ab      	cmp	r3, r5
 10295d0:	d89a      	bhi.n	1029508 <REGS_APP_vProcess_demand_interval+0x54>
 10295d2:	f8dd a004 	ldr.w	sl, [sp, #4]
	if ( demand_interval->is_int_expiried ) {
 10295d6:	f89a 3003 	ldrb.w	r3, [sl, #3]
 10295da:	b153      	cbz	r3, 10295f2 <REGS_APP_vProcess_demand_interval+0x13e>
		memset( &demand_interval->present_demand, 0, sizeof(demand_interval->present_demand) );
 10295dc:	2300      	movs	r3, #0
 10295de:	f8ca 3008 	str.w	r3, [sl, #8]
 10295e2:	f8ca 300c 	str.w	r3, [sl, #12]
 10295e6:	f8ca 3010 	str.w	r3, [sl, #16]
 10295ea:	f8ca 3014 	str.w	r3, [sl, #20]
		demand_interval->is_int_expiried = false;
 10295ee:	f88a 3003 	strb.w	r3, [sl, #3]
}
 10295f2:	b005      	add	sp, #20
 10295f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (demand_interval->current_seconds >= (demand.config.subinterval_length + 1) ) {
 10295f8:	f8bb 2004 	ldrh.w	r2, [fp, #4]
 10295fc:	429a      	cmp	r2, r3
		demand_interval->run_next_interval = true;
 10295fe:	bfbc      	itt	lt
 1029600:	2301      	movlt	r3, #1
 1029602:	7083      	strblt	r3, [r0, #2]
 1029604:	e76c      	b.n	10294e0 <REGS_APP_vProcess_demand_interval+0x2c>
 1029606:	bf00      	nop
 1029608:	20017160 	.word	0x20017160
 102960c:	0102d2d5 	.word	0x0102d2d5
 1029610:	2000797c 	.word	0x2000797c
 1029614:	20007998 	.word	0x20007998
 1029618:	20007988 	.word	0x20007988
 102961c:	01028ca5 	.word	0x01028ca5
 1029620:	0102ff19 	.word	0x0102ff19
 1029624:	01030259 	.word	0x01030259
 1029628:	0102fca1 	.word	0x0102fca1
 102962c:	01030659 	.word	0x01030659
 1029630:	20017150 	.word	0x20017150
 1029634:	200077d0 	.word	0x200077d0
 1029638:	20007959 	.word	0x20007959

0102963c <REGS_APP_vDemand_task>:
void REGS_APP_vDemand_task(void) {
 102963c:	b570      	push	{r4, r5, r6, lr}
	if ( !meter.system_state.changing_configuration ) {
 102963e:	4b15      	ldr	r3, [pc, #84]	; (1029694 <REGS_APP_vDemand_task+0x58>)
 1029640:	f893 4022 	ldrb.w	r4, [r3, #34]	; 0x22
 1029644:	bb0c      	cbnz	r4, 102968a <REGS_APP_vDemand_task+0x4e>
 		if ( demand.config.is_sliding_demand ) {
 1029646:	4d14      	ldr	r5, [pc, #80]	; (1029698 <REGS_APP_vDemand_task+0x5c>)
 1029648:	782b      	ldrb	r3, [r5, #0]
			REGS_APP_vProcess_demand_interval( &demand.interval[0] );
 102964a:	f105 0008 	add.w	r0, r5, #8
 		if ( demand.config.is_sliding_demand ) {
 102964e:	b1eb      	cbz	r3, 102968c <REGS_APP_vDemand_task+0x50>
			REGS_APP_vProcess_demand_interval( &demand.interval[0] );
 1029650:	4e12      	ldr	r6, [pc, #72]	; (102969c <REGS_APP_vDemand_task+0x60>)
 1029652:	47b0      	blx	r6
			for ( uint8_t i = 0; i < demand.config.nbr_intervals; i++ ) {
 1029654:	79ab      	ldrb	r3, [r5, #6]
 1029656:	b1c3      	cbz	r3, 102968a <REGS_APP_vDemand_task+0x4e>
 1029658:	4623      	mov	r3, r4
 102965a:	e003      	b.n	1029664 <REGS_APP_vDemand_task+0x28>
 102965c:	79aa      	ldrb	r2, [r5, #6]
 102965e:	b2e3      	uxtb	r3, r4
 1029660:	429a      	cmp	r2, r3
 1029662:	d911      	bls.n	1029688 <REGS_APP_vDemand_task+0x4c>
				if ( demand.interval[i].run_next_interval == true ) {
 1029664:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 1029668:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 102966c:	1c5c      	adds	r4, r3, #1
 102966e:	7a92      	ldrb	r2, [r2, #10]
 1029670:	2a00      	cmp	r2, #0
 1029672:	d0f3      	beq.n	102965c <REGS_APP_vDemand_task+0x20>
					REGS_APP_vProcess_demand_interval( &demand.interval[i + 1] );
 1029674:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 1029678:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 102967c:	3008      	adds	r0, #8
 102967e:	47b0      	blx	r6
			for ( uint8_t i = 0; i < demand.config.nbr_intervals; i++ ) {
 1029680:	79aa      	ldrb	r2, [r5, #6]
 1029682:	b2e3      	uxtb	r3, r4
 1029684:	429a      	cmp	r2, r3
 1029686:	d8ed      	bhi.n	1029664 <REGS_APP_vDemand_task+0x28>
 1029688:	bd70      	pop	{r4, r5, r6, pc}
 102968a:	bd70      	pop	{r4, r5, r6, pc}
			REGS_APP_vProcess_demand_interval( &demand.interval[0] );
 102968c:	4b03      	ldr	r3, [pc, #12]	; (102969c <REGS_APP_vDemand_task+0x60>)
}
 102968e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			REGS_APP_vProcess_demand_interval( &demand.interval[0] );
 1029692:	4718      	bx	r3
 1029694:	20016c2c 	.word	0x20016c2c
 1029698:	200077d0 	.word	0x200077d0
 102969c:	010294b5 	.word	0x010294b5

010296a0 <REGS_APP_bCopy_summation>:
bool REGS_APP_bCopy_summation(DATA_BLOCK_TYPE data_block, SUMMATION_ID_TYPE summation_id, uint64_t *value_ptr) {
 10296a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for ( uint8_t i = 0; i < st_21.nbr_summations; i++ ) {
 10296a2:	f8df e0ec 	ldr.w	lr, [pc, #236]	; 1029790 <REGS_APP_bCopy_summation+0xf0>
 10296a6:	f89e 6003 	ldrb.w	r6, [lr, #3]
bool REGS_APP_bCopy_summation(DATA_BLOCK_TYPE data_block, SUMMATION_ID_TYPE summation_id, uint64_t *value_ptr) {
 10296aa:	4617      	mov	r7, r2
	for ( uint8_t i = 0; i < st_21.nbr_summations; i++ ) {
 10296ac:	2e00      	cmp	r6, #0
 10296ae:	d065      	beq.n	102977c <REGS_APP_bCopy_summation+0xdc>
		if ( st_22.summation_select[i] == summation_id ) {
 10296b0:	4c34      	ldr	r4, [pc, #208]	; (1029784 <REGS_APP_bCopy_summation+0xe4>)
 10296b2:	7823      	ldrb	r3, [r4, #0]
 10296b4:	428b      	cmp	r3, r1
 10296b6:	bf18      	it	ne
 10296b8:	2301      	movne	r3, #1
 10296ba:	d104      	bne.n	10296c6 <REGS_APP_bCopy_summation+0x26>
 10296bc:	e00f      	b.n	10296de <REGS_APP_bCopy_summation+0x3e>
 10296be:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 10296c2:	428d      	cmp	r5, r1
 10296c4:	d00c      	beq.n	10296e0 <REGS_APP_bCopy_summation+0x40>
	for ( uint8_t i = 0; i < st_21.nbr_summations; i++ ) {
 10296c6:	b2dd      	uxtb	r5, r3
 10296c8:	42ae      	cmp	r6, r5
		if ( st_22.summation_select[i] == summation_id ) {
 10296ca:	461a      	mov	r2, r3
 10296cc:	f103 0301 	add.w	r3, r3, #1
	for ( uint8_t i = 0; i < st_21.nbr_summations; i++ ) {
 10296d0:	d8f5      	bhi.n	10296be <REGS_APP_bCopy_summation+0x1e>
	uint64_t summation = 0;
 10296d2:	2200      	movs	r2, #0
 10296d4:	2300      	movs	r3, #0
	bool id_exist = false;
 10296d6:	2000      	movs	r0, #0
	*value_ptr = summation;
 10296d8:	e9c7 2300 	strd	r2, r3, [r7]
}
 10296dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ( st_22.summation_select[i] == summation_id ) {
 10296de:	2200      	movs	r2, #0
			switch (data_block) {
 10296e0:	2804      	cmp	r0, #4
 10296e2:	d8f6      	bhi.n	10296d2 <REGS_APP_bCopy_summation+0x32>
 10296e4:	e8df f000 	tbb	[pc, r0]
 10296e8:	1323313c 	.word	0x1323313c
 10296ec:	03          	.byte	0x03
 10296ed:	00          	.byte	0x00
					if (st_21.nbr_tiers >= 3) {
 10296ee:	f89e 3007 	ldrb.w	r3, [lr, #7]
 10296f2:	2b02      	cmp	r3, #2
 10296f4:	d9ed      	bls.n	10296d2 <REGS_APP_bCopy_summation+0x32>
						summation = (uint64_t)st_23.tier_data_block[3].summations[i];
 10296f6:	4b24      	ldr	r3, [pc, #144]	; (1029788 <REGS_APP_bCopy_summation+0xe8>)
 10296f8:	4c24      	ldr	r4, [pc, #144]	; (102978c <REGS_APP_bCopy_summation+0xec>)
 10296fa:	3239      	adds	r2, #57	; 0x39
 10296fc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 1029700:	e9d2 0100 	ldrd	r0, r1, [r2]
 1029704:	47a0      	blx	r4
 1029706:	4602      	mov	r2, r0
 1029708:	460b      	mov	r3, r1
						id_exist = true;
 102970a:	2001      	movs	r0, #1
 102970c:	e7e4      	b.n	10296d8 <REGS_APP_bCopy_summation+0x38>
					if (st_21.nbr_tiers >= 2) {
 102970e:	f89e 3007 	ldrb.w	r3, [lr, #7]
 1029712:	2b01      	cmp	r3, #1
 1029714:	d9dd      	bls.n	10296d2 <REGS_APP_bCopy_summation+0x32>
						summation = (uint64_t)st_23.tier_data_block[2].summations[i];
 1029716:	4b1c      	ldr	r3, [pc, #112]	; (1029788 <REGS_APP_bCopy_summation+0xe8>)
 1029718:	4c1c      	ldr	r4, [pc, #112]	; (102978c <REGS_APP_bCopy_summation+0xec>)
 102971a:	322b      	adds	r2, #43	; 0x2b
 102971c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 1029720:	e9d3 0100 	ldrd	r0, r1, [r3]
 1029724:	47a0      	blx	r4
 1029726:	4602      	mov	r2, r0
 1029728:	460b      	mov	r3, r1
						id_exist = true;
 102972a:	2001      	movs	r0, #1
 102972c:	e7d4      	b.n	10296d8 <REGS_APP_bCopy_summation+0x38>
					if (st_21.nbr_tiers >= 1) {
 102972e:	f89e 0007 	ldrb.w	r0, [lr, #7]
 1029732:	b300      	cbz	r0, 1029776 <REGS_APP_bCopy_summation+0xd6>
						summation = (uint64_t)st_23.tier_data_block[1].summations[i];
 1029734:	4b14      	ldr	r3, [pc, #80]	; (1029788 <REGS_APP_bCopy_summation+0xe8>)
 1029736:	4c15      	ldr	r4, [pc, #84]	; (102978c <REGS_APP_bCopy_summation+0xec>)
 1029738:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 102973c:	e9d2 013a 	ldrd	r0, r1, [r2, #232]	; 0xe8
 1029740:	47a0      	blx	r4
 1029742:	4602      	mov	r2, r0
 1029744:	460b      	mov	r3, r1
						id_exist = true;
 1029746:	2001      	movs	r0, #1
 1029748:	e7c6      	b.n	10296d8 <REGS_APP_bCopy_summation+0x38>
						summation = (uint64_t)st_23.tier_data_block[0].summations[i];
 102974a:	4b0f      	ldr	r3, [pc, #60]	; (1029788 <REGS_APP_bCopy_summation+0xe8>)
 102974c:	4c0f      	ldr	r4, [pc, #60]	; (102978c <REGS_APP_bCopy_summation+0xec>)
 102974e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 1029752:	e9d2 011e 	ldrd	r0, r1, [r2, #120]	; 0x78
 1029756:	47a0      	blx	r4
 1029758:	4602      	mov	r2, r0
 102975a:	460b      	mov	r3, r1
						id_exist = true;
 102975c:	2001      	movs	r0, #1
					break;
 102975e:	e7bb      	b.n	10296d8 <REGS_APP_bCopy_summation+0x38>
					summation = (uint64_t)st_23.tot_data_block.summations[i];
 1029760:	4b09      	ldr	r3, [pc, #36]	; (1029788 <REGS_APP_bCopy_summation+0xe8>)
 1029762:	4c0a      	ldr	r4, [pc, #40]	; (102978c <REGS_APP_bCopy_summation+0xec>)
 1029764:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 1029768:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
 102976c:	47a0      	blx	r4
 102976e:	4602      	mov	r2, r0
 1029770:	460b      	mov	r3, r1
					id_exist = true;
 1029772:	2001      	movs	r0, #1
					break;
 1029774:	e7b0      	b.n	10296d8 <REGS_APP_bCopy_summation+0x38>
	uint64_t summation = 0;
 1029776:	2200      	movs	r2, #0
 1029778:	2300      	movs	r3, #0
 102977a:	e7ad      	b.n	10296d8 <REGS_APP_bCopy_summation+0x38>
	bool id_exist = false;
 102977c:	4630      	mov	r0, r6
	uint64_t summation = 0;
 102977e:	2200      	movs	r2, #0
 1029780:	2300      	movs	r3, #0
 1029782:	e7a9      	b.n	10296d8 <REGS_APP_bCopy_summation+0x38>
 1029784:	20007988 	.word	0x20007988
 1029788:	20007998 	.word	0x20007998
 102978c:	01030659 	.word	0x01030659
 1029790:	2000797c 	.word	0x2000797c

01029794 <REGS_APP_vStore_summations>:
void REGS_APP_vStore_summations(void) {
 1029794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	st_23_struct_copy = st_23;
 1029798:	4b33      	ldr	r3, [pc, #204]	; (1029868 <REGS_APP_vStore_summations+0xd4>)
 102979a:	4934      	ldr	r1, [pc, #208]	; (102986c <REGS_APP_vStore_summations+0xd8>)
 102979c:	4834      	ldr	r0, [pc, #208]	; (1029870 <REGS_APP_vStore_summations+0xdc>)
void REGS_APP_vStore_summations(void) {
 102979e:	b085      	sub	sp, #20
	st_23_struct_copy = st_23;
 10297a0:	f44f 720e 	mov.w	r2, #568	; 0x238
 10297a4:	4798      	blx	r3
	if ( (!meter.ed_mode.test_mode.enabled) ) {
 10297a6:	4b33      	ldr	r3, [pc, #204]	; (1029874 <REGS_APP_vStore_summations+0xe0>)
 10297a8:	f893 4024 	ldrb.w	r4, [r3, #36]	; 0x24
 10297ac:	2c00      	cmp	r4, #0
 10297ae:	d157      	bne.n	1029860 <REGS_APP_vStore_summations+0xcc>
		for ( i = 0; i < st_21.nbr_summations; i++ ){
 10297b0:	4e31      	ldr	r6, [pc, #196]	; (1029878 <REGS_APP_vStore_summations+0xe4>)
 10297b2:	78f3      	ldrb	r3, [r6, #3]
 10297b4:	b1e3      	cbz	r3, 10297f0 <REGS_APP_vStore_summations+0x5c>
 10297b6:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 1029870 <REGS_APP_vStore_summations+0xdc>
 10297ba:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 1029880 <REGS_APP_vStore_summations+0xec>
 10297be:	f10d 0808 	add.w	r8, sp, #8
			EEPROM_writer( ST_23_TOT_SUMMATIONS_ADDR + i*NI_FMAT1_SIZE, &summation, NI_FMAT1_SIZE );
 10297c2:	2706      	movs	r7, #6
 10297c4:	f244 159b 	movw	r5, #16795	; 0x419b
			summation = (uint64_t)(st_23_struct_copy.tot_data_block.summations[i]);
 10297c8:	f104 0901 	add.w	r9, r4, #1
 10297cc:	eb0b 03c9 	add.w	r3, fp, r9, lsl #3
 10297d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 10297d4:	47d0      	blx	sl
			EEPROM_writer( ST_23_TOT_SUMMATIONS_ADDR + i*NI_FMAT1_SIZE, &summation, NI_FMAT1_SIZE );
 10297d6:	4b29      	ldr	r3, [pc, #164]	; (102987c <REGS_APP_vStore_summations+0xe8>)
			summation = (uint64_t)(st_23_struct_copy.tot_data_block.summations[i]);
 10297d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
			EEPROM_writer( ST_23_TOT_SUMMATIONS_ADDR + i*NI_FMAT1_SIZE, &summation, NI_FMAT1_SIZE );
 10297dc:	2206      	movs	r2, #6
 10297de:	fb07 5004 	mla	r0, r7, r4, r5
 10297e2:	4641      	mov	r1, r8
 10297e4:	4798      	blx	r3
		for ( i = 0; i < st_21.nbr_summations; i++ ){
 10297e6:	78f3      	ldrb	r3, [r6, #3]
 10297e8:	fa5f f489 	uxtb.w	r4, r9
 10297ec:	42a3      	cmp	r3, r4
 10297ee:	d8eb      	bhi.n	10297c8 <REGS_APP_vStore_summations+0x34>
		for ( i = 0; i < st_21.nbr_tiers; i++ ) {
 10297f0:	79f3      	ldrb	r3, [r6, #7]
 10297f2:	2b00      	cmp	r3, #0
 10297f4:	d034      	beq.n	1029860 <REGS_APP_vStore_summations+0xcc>
 10297f6:	2300      	movs	r3, #0
 10297f8:	f8df b074 	ldr.w	fp, [pc, #116]	; 1029870 <REGS_APP_vStore_summations+0xdc>
 10297fc:	f8df a080 	ldr.w	sl, [pc, #128]	; 1029880 <REGS_APP_vStore_summations+0xec>
 1029800:	9301      	str	r3, [sp, #4]
			for ( j = 0; j < st_21.nbr_summations; j++ ) {
 1029802:	78f3      	ldrb	r3, [r6, #3]
 1029804:	b31b      	cbz	r3, 102984e <REGS_APP_vStore_summations+0xba>
				summation = (uint64_t)(st_23_struct_copy.tier_data_block[i].summations[j]);
 1029806:	9901      	ldr	r1, [sp, #4]
 1029808:	2524      	movs	r5, #36	; 0x24
 102980a:	f244 13e9 	movw	r3, #16873	; 0x41e9
 102980e:	ebc1 04c1 	rsb	r4, r1, r1, lsl #3
 1029812:	fb15 3501 	smlabb	r5, r5, r1, r3
 1029816:	0064      	lsls	r4, r4, #1
			for ( j = 0; j < st_21.nbr_summations; j++ ) {
 1029818:	f04f 0900 	mov.w	r9, #0
 102981c:	f10d 0808 	add.w	r8, sp, #8
				EEPROM_writer( ST_23_TIER_SUMMATIONS_ADDR + (i * NI_FMAT1_SIZE * MAX_NBR_SUMMATIONS) + (j * NI_FMAT1_SIZE), &summation, NI_FMAT1_SIZE );
 1029820:	2706      	movs	r7, #6
				summation = (uint64_t)(st_23_struct_copy.tier_data_block[i].summations[j]);
 1029822:	eb04 0309 	add.w	r3, r4, r9
 1029826:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 102982a:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 102982e:	47d0      	blx	sl
				EEPROM_writer( ST_23_TIER_SUMMATIONS_ADDR + (i * NI_FMAT1_SIZE * MAX_NBR_SUMMATIONS) + (j * NI_FMAT1_SIZE), &summation, NI_FMAT1_SIZE );
 1029830:	4b12      	ldr	r3, [pc, #72]	; (102987c <REGS_APP_vStore_summations+0xe8>)
				summation = (uint64_t)(st_23_struct_copy.tier_data_block[i].summations[j]);
 1029832:	e9cd 0102 	strd	r0, r1, [sp, #8]
				EEPROM_writer( ST_23_TIER_SUMMATIONS_ADDR + (i * NI_FMAT1_SIZE * MAX_NBR_SUMMATIONS) + (j * NI_FMAT1_SIZE), &summation, NI_FMAT1_SIZE );
 1029836:	2206      	movs	r2, #6
 1029838:	fb07 5009 	mla	r0, r7, r9, r5
 102983c:	4641      	mov	r1, r8
 102983e:	4798      	blx	r3
			for ( j = 0; j < st_21.nbr_summations; j++ ) {
 1029840:	f109 0901 	add.w	r9, r9, #1
 1029844:	78f3      	ldrb	r3, [r6, #3]
 1029846:	fa5f f989 	uxtb.w	r9, r9
 102984a:	454b      	cmp	r3, r9
 102984c:	d8e9      	bhi.n	1029822 <REGS_APP_vStore_summations+0x8e>
		for ( i = 0; i < st_21.nbr_tiers; i++ ) {
 102984e:	9b01      	ldr	r3, [sp, #4]
 1029850:	f103 0901 	add.w	r9, r3, #1
 1029854:	79f3      	ldrb	r3, [r6, #7]
 1029856:	fa5f f289 	uxtb.w	r2, r9
 102985a:	4293      	cmp	r3, r2
 102985c:	9201      	str	r2, [sp, #4]
 102985e:	d8d0      	bhi.n	1029802 <REGS_APP_vStore_summations+0x6e>
}
 1029860:	b005      	add	sp, #20
 1029862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1029866:	bf00      	nop
 1029868:	01030a3d 	.word	0x01030a3d
 102986c:	20007998 	.word	0x20007998
 1029870:	20007d58 	.word	0x20007d58
 1029874:	20016c2c 	.word	0x20016c2c
 1029878:	2000797c 	.word	0x2000797c
 102987c:	01017509 	.word	0x01017509
 1029880:	01030659 	.word	0x01030659

01029884 <REGS_APP_vStorage_rtos_task>:
void REGS_APP_vStorage_rtos_task(void *pvParameters) {
 1029884:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
 1029888:	4c15      	ldr	r4, [pc, #84]	; (10298e0 <REGS_APP_vStorage_rtos_task+0x5c>)
 102988a:	f8df a060 	ldr.w	sl, [pc, #96]	; 10298ec <REGS_APP_vStorage_rtos_task+0x68>
 102988e:	4e15      	ldr	r6, [pc, #84]	; (10298e4 <REGS_APP_vStorage_rtos_task+0x60>)
 1029890:	f8df 905c 	ldr.w	r9, [pc, #92]	; 10298f0 <REGS_APP_vStorage_rtos_task+0x6c>
 1029894:	f8df b05c 	ldr.w	fp, [pc, #92]	; 10298f4 <REGS_APP_vStorage_rtos_task+0x70>
 1029898:	f8df 805c 	ldr.w	r8, [pc, #92]	; 10298f8 <REGS_APP_vStorage_rtos_task+0x74>
 102989c:	4d12      	ldr	r5, [pc, #72]	; (10298e8 <REGS_APP_vStorage_rtos_task+0x64>)
		registers_os.task_execute = false;
 102989e:	2700      	movs	r7, #0
 10298a0:	e001      	b.n	10298a6 <REGS_APP_vStorage_rtos_task+0x22>
		vTaskSuspend(registers_os.storage_task_id);
 10298a2:	6820      	ldr	r0, [r4, #0]
 10298a4:	47a8      	blx	r5
		if ( registers_os.rtos_task_active ) {
 10298a6:	7923      	ldrb	r3, [r4, #4]
 10298a8:	2b00      	cmp	r3, #0
 10298aa:	d0fa      	beq.n	10298a2 <REGS_APP_vStorage_rtos_task+0x1e>
	if ( registers_os.task_execute ) {
 10298ac:	7963      	ldrb	r3, [r4, #5]
 10298ae:	b173      	cbz	r3, 10298ce <REGS_APP_vStorage_rtos_task+0x4a>
		if ( ++registers_os.time_after_last_backup >= (10 * SECONDS_PER_MINUTE) ) {
 10298b0:	68a3      	ldr	r3, [r4, #8]
		registers_os.task_execute = false;
 10298b2:	7167      	strb	r7, [r4, #5]
		if ( ++registers_os.time_after_last_backup >= (10 * SECONDS_PER_MINUTE) ) {
 10298b4:	3301      	adds	r3, #1
 10298b6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 10298ba:	d20a      	bcs.n	10298d2 <REGS_APP_vStorage_rtos_task+0x4e>
 10298bc:	60a3      	str	r3, [r4, #8]
	if ( (!meter.ed_mode.test_mode.enabled) && (registers_os.max_demand == true) ){
 10298be:	f899 3024 	ldrb.w	r3, [r9, #36]	; 0x24
 10298c2:	b90b      	cbnz	r3, 10298c8 <REGS_APP_vStorage_rtos_task+0x44>
 10298c4:	7b23      	ldrb	r3, [r4, #12]
 10298c6:	b943      	cbnz	r3, 10298da <REGS_APP_vStorage_rtos_task+0x56>
		WATCHDOG_APP_vRestart();
 10298c8:	47b0      	blx	r6
		LP_APP_vStore_data_task();
 10298ca:	47c0      	blx	r8
		WATCHDOG_APP_vRestart();
 10298cc:	47b0      	blx	r6
			WATCHDOG_APP_vRestart();
 10298ce:	47b0      	blx	r6
 10298d0:	e7e7      	b.n	10298a2 <REGS_APP_vStorage_rtos_task+0x1e>
			registers_os.time_after_last_backup = 0;
 10298d2:	60a7      	str	r7, [r4, #8]
			REGS_APP_vStore_summations();
 10298d4:	47d0      	blx	sl
			WATCHDOG_APP_vRestart();
 10298d6:	47b0      	blx	r6
 10298d8:	e7f1      	b.n	10298be <REGS_APP_vStorage_rtos_task+0x3a>
 10298da:	47d8      	blx	fp
 10298dc:	e7f4      	b.n	10298c8 <REGS_APP_vStorage_rtos_task+0x44>
 10298de:	bf00      	nop
 10298e0:	20017150 	.word	0x20017150
 10298e4:	0101603d 	.word	0x0101603d
 10298e8:	0102ea59 	.word	0x0102ea59
 10298ec:	01029795 	.word	0x01029795
 10298f0:	20016c2c 	.word	0x20016c2c
 10298f4:	01026099 	.word	0x01026099
 10298f8:	0101c0d5 	.word	0x0101c0d5

010298fc <REGS_APP_vReset_summations>:
	if ( meter.ed_mode.test_mode.enabled == false ) {
 10298fc:	4b21      	ldr	r3, [pc, #132]	; (1029984 <REGS_APP_vReset_summations+0x88>)
 10298fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 1029902:	2b00      	cmp	r3, #0
 1029904:	d13d      	bne.n	1029982 <REGS_APP_vReset_summations+0x86>
{
 1029906:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 102990a:	f8df a084 	ldr.w	sl, [pc, #132]	; 1029990 <REGS_APP_vReset_summations+0x94>
 102990e:	4d1e      	ldr	r5, [pc, #120]	; (1029988 <REGS_APP_vReset_summations+0x8c>)
 1029910:	b085      	sub	sp, #20
	if ( meter.ed_mode.test_mode.enabled == false ) {
 1029912:	f244 149b 	movw	r4, #16795	; 0x419b
			summation = 0;
 1029916:	f04f 0800 	mov.w	r8, #0
 102991a:	f04f 0900 	mov.w	r9, #0
			st_23.tot_data_block.summations[i] = 0;
 102991e:	2600      	movs	r6, #0
 1029920:	2700      	movs	r7, #0
			EEPROM_writer( ST_23_TOT_SUMMATIONS_ADDR + i*NI_FMAT1_SIZE, &summation, NI_FMAT1_SIZE );
 1029922:	2206      	movs	r2, #6
 1029924:	4620      	mov	r0, r4
 1029926:	a902      	add	r1, sp, #8
			st_23.tot_data_block.summations[i] = 0;
 1029928:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 102992c:	4414      	add	r4, r2
			summation = 0;
 102992e:	e9cd 8902 	strd	r8, r9, [sp, #8]
			EEPROM_writer( ST_23_TOT_SUMMATIONS_ADDR + i*NI_FMAT1_SIZE, &summation, NI_FMAT1_SIZE );
 1029932:	47a8      	blx	r5
		for ( i = 0; i < MAX_NBR_SUMMATIONS; i++) {
 1029934:	f244 13bf 	movw	r3, #16831	; 0x41bf
 1029938:	429c      	cmp	r4, r3
 102993a:	d1f2      	bne.n	1029922 <REGS_APP_vReset_summations+0x26>
 102993c:	4b13      	ldr	r3, [pc, #76]	; (102998c <REGS_APP_vReset_summations+0x90>)
 102993e:	9301      	str	r3, [sp, #4]
 1029940:	f244 14e9 	movw	r4, #16873	; 0x41e9
				summation = 0;
 1029944:	f04f 0800 	mov.w	r8, #0
 1029948:	f04f 0900 	mov.w	r9, #0
				st_23.tier_data_block[i].summations[j] = 0;
 102994c:	2600      	movs	r6, #0
 102994e:	2700      	movs	r7, #0
	if ( meter.ed_mode.test_mode.enabled == false ) {
 1029950:	f8dd b004 	ldr.w	fp, [sp, #4]
 1029954:	f104 0a24 	add.w	sl, r4, #36	; 0x24
				EEPROM_writer( ST_23_TIER_SUMMATIONS_ADDR + (i * NI_FMAT1_SIZE * MAX_NBR_SUMMATIONS) + (j * NI_FMAT1_SIZE), &summation, NI_FMAT1_SIZE );
 1029958:	2206      	movs	r2, #6
 102995a:	4620      	mov	r0, r4
 102995c:	a902      	add	r1, sp, #8
 102995e:	4414      	add	r4, r2
				st_23.tier_data_block[i].summations[j] = 0;
 1029960:	e9eb 6702 	strd	r6, r7, [fp, #8]!
				summation = 0;
 1029964:	e9cd 8902 	strd	r8, r9, [sp, #8]
				EEPROM_writer( ST_23_TIER_SUMMATIONS_ADDR + (i * NI_FMAT1_SIZE * MAX_NBR_SUMMATIONS) + (j * NI_FMAT1_SIZE), &summation, NI_FMAT1_SIZE );
 1029968:	47a8      	blx	r5
			for ( j = 0; j < MAX_NBR_SUMMATIONS; j++ ) {
 102996a:	45a2      	cmp	sl, r4
 102996c:	d1f4      	bne.n	1029958 <REGS_APP_vReset_summations+0x5c>
 102996e:	9a01      	ldr	r2, [sp, #4]
		for ( i = 0; i < MAX_NBR_TIERS; i++ ) {
 1029970:	f244 2379 	movw	r3, #17017	; 0x4279
 1029974:	3270      	adds	r2, #112	; 0x70
 1029976:	429c      	cmp	r4, r3
 1029978:	9201      	str	r2, [sp, #4]
 102997a:	d1e9      	bne.n	1029950 <REGS_APP_vReset_summations+0x54>
}
 102997c:	b005      	add	sp, #20
 102997e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1029982:	4770      	bx	lr
 1029984:	20016c2c 	.word	0x20016c2c
 1029988:	01017509 	.word	0x01017509
 102998c:	20007a08 	.word	0x20007a08
 1029990:	20007998 	.word	0x20007998

01029994 <REGS_APP_vEnable_test_mode>:
void REGS_APP_vEnable_test_mode(void) {
 1029994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	REGS_APP_vStore_summations();
 1029996:	4b0e      	ldr	r3, [pc, #56]	; (10299d0 <REGS_APP_vEnable_test_mode+0x3c>)
	memset( &st_23, 0, sizeof(st_23) );
 1029998:	4e0e      	ldr	r6, [pc, #56]	; (10299d4 <REGS_APP_vEnable_test_mode+0x40>)
	REGS_APP_vStore_summations();
 102999a:	4798      	blx	r3
	st_21.nbr_summations = 3;
 102999c:	490e      	ldr	r1, [pc, #56]	; (10299d8 <REGS_APP_vEnable_test_mode+0x44>)
	st_22.summation_select[0] = SM_WH_SUM_ID;
 102999e:	4b0f      	ldr	r3, [pc, #60]	; (10299dc <REGS_APP_vEnable_test_mode+0x48>)
	memset( &st_23, 0, sizeof(st_23) );
 10299a0:	480f      	ldr	r0, [pc, #60]	; (10299e0 <REGS_APP_vEnable_test_mode+0x4c>)
	st_21.nbr_summations = 3;
 10299a2:	2403      	movs	r4, #3
	st_21.nbr_demands = 2;
 10299a4:	2202      	movs	r2, #2
 10299a6:	710a      	strb	r2, [r1, #4]
	st_22.summation_select[1] = SM_VARH_SUM_ID;
 10299a8:	250b      	movs	r5, #11
	memset( &st_23, 0, sizeof(st_23) );
 10299aa:	f44f 720e 	mov.w	r2, #568	; 0x238
	st_21.nbr_summations = 3;
 10299ae:	70cc      	strb	r4, [r1, #3]
	st_22.summation_select[2] = SM_VAH_SUM_ID;
 10299b0:	2711      	movs	r7, #17
	memset( &st_23, 0, sizeof(st_23) );
 10299b2:	2100      	movs	r1, #0
	st_22.summation_select[0] = SM_WH_SUM_ID;
 10299b4:	701c      	strb	r4, [r3, #0]
	st_22.demand_select[0] = AD_W_SUM_ID;
 10299b6:	719c      	strb	r4, [r3, #6]
	st_22.summation_select[2] = SM_VAH_SUM_ID;
 10299b8:	709f      	strb	r7, [r3, #2]
	st_22.summation_select[1] = SM_VARH_SUM_ID;
 10299ba:	705d      	strb	r5, [r3, #1]
	st_22.demand_select[1] = AD_VAR_SUM_ID;
 10299bc:	71dd      	strb	r5, [r3, #7]
	memset( &st_23, 0, sizeof(st_23) );
 10299be:	47b0      	blx	r6
	REGS_APP_vInitialize();
 10299c0:	4b08      	ldr	r3, [pc, #32]	; (10299e4 <REGS_APP_vEnable_test_mode+0x50>)
 10299c2:	4798      	blx	r3
	meter.ed_mode.test_mode.enabled = true;
 10299c4:	4b08      	ldr	r3, [pc, #32]	; (10299e8 <REGS_APP_vEnable_test_mode+0x54>)
 10299c6:	2201      	movs	r2, #1
 10299c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 10299cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 10299ce:	bf00      	nop
 10299d0:	01029795 	.word	0x01029795
 10299d4:	01030b71 	.word	0x01030b71
 10299d8:	2000797c 	.word	0x2000797c
 10299dc:	20007988 	.word	0x20007988
 10299e0:	20007998 	.word	0x20007998
 10299e4:	0102642d 	.word	0x0102642d
 10299e8:	20016c2c 	.word	0x20016c2c

010299ec <REGS_APP_vDisable_test_mode>:
void REGS_APP_vDisable_test_mode(void) {
 10299ec:	b508      	push	{r3, lr}
	REGS_APP_bLoad_st_21();
 10299ee:	4b06      	ldr	r3, [pc, #24]	; (1029a08 <REGS_APP_vDisable_test_mode+0x1c>)
 10299f0:	4798      	blx	r3
	REGS_APP_bLoad_st_22();
 10299f2:	4b06      	ldr	r3, [pc, #24]	; (1029a0c <REGS_APP_vDisable_test_mode+0x20>)
 10299f4:	4798      	blx	r3
	REGS_APP_bLoad_st_23();
 10299f6:	4b06      	ldr	r3, [pc, #24]	; (1029a10 <REGS_APP_vDisable_test_mode+0x24>)
 10299f8:	4798      	blx	r3
	REGS_APP_vInitialize();
 10299fa:	4b06      	ldr	r3, [pc, #24]	; (1029a14 <REGS_APP_vDisable_test_mode+0x28>)
 10299fc:	4798      	blx	r3
	meter.ed_mode.test_mode.enabled = false;
 10299fe:	4b06      	ldr	r3, [pc, #24]	; (1029a18 <REGS_APP_vDisable_test_mode+0x2c>)
 1029a00:	2200      	movs	r2, #0
 1029a02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 1029a06:	bd08      	pop	{r3, pc}
 1029a08:	01026c49 	.word	0x01026c49
 1029a0c:	01026ec1 	.word	0x01026ec1
 1029a10:	01027039 	.word	0x01027039
 1029a14:	0102642d 	.word	0x0102642d
 1029a18:	20016c2c 	.word	0x20016c2c

01029a1c <REGS_APP_vReset_present_demand>:
void REGS_APP_vReset_present_demand(void) {
	
	uint8_t i;
	
	for ( i = 0; i < MAX_NBR_DEMANDS; i++ ) {
		memset( &demand.interval[i].present_demand, 0, sizeof(demand.interval[i].present_demand) );
 1029a1c:	4a05      	ldr	r2, [pc, #20]	; (1029a34 <REGS_APP_vReset_present_demand+0x18>)
 1029a1e:	2300      	movs	r3, #0
 1029a20:	6153      	str	r3, [r2, #20]
 1029a22:	6193      	str	r3, [r2, #24]
 1029a24:	61d3      	str	r3, [r2, #28]
 1029a26:	6113      	str	r3, [r2, #16]
 1029a28:	6293      	str	r3, [r2, #40]	; 0x28
 1029a2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 1029a2c:	6313      	str	r3, [r2, #48]	; 0x30
 1029a2e:	6353      	str	r3, [r2, #52]	; 0x34
 1029a30:	4770      	bx	lr
 1029a32:	bf00      	nop
 1029a34:	200077d0 	.word	0x200077d0

01029a38 <REGS_APP_vTake_snapshot_st_23>:
 * 
 * \param void
 * \retval void
 ******************************************************************************
 */
void REGS_APP_vTake_snapshot_st_23(uint8_t cause, uint8_t season, uint32_t timestamp) {
 1029a38:	b570      	push	{r4, r5, r6, lr}
	
	uint16_t data_length;
	uint8_t last_entry_element;
	uint32_t addr[3];
	
	if (meter.ed_mode.test_mode.enabled == false) {
 1029a3a:	4b22      	ldr	r3, [pc, #136]	; (1029ac4 <REGS_APP_vTake_snapshot_st_23+0x8c>)
void REGS_APP_vTake_snapshot_st_23(uint8_t cause, uint8_t season, uint32_t timestamp) {
 1029a3c:	b084      	sub	sp, #16
	if (meter.ed_mode.test_mode.enabled == false) {
 1029a3e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
void REGS_APP_vTake_snapshot_st_23(uint8_t cause, uint8_t season, uint32_t timestamp) {
 1029a42:	9200      	str	r2, [sp, #0]
 1029a44:	f88d 1007 	strb.w	r1, [sp, #7]
	if (meter.ed_mode.test_mode.enabled == false) {
 1029a48:	bb5b      	cbnz	r3, 1029aa2 <REGS_APP_vTake_snapshot_st_23+0x6a>
		
		switch (cause) {
 1029a4a:	2801      	cmp	r0, #1
 1029a4c:	d02b      	beq.n	1029aa6 <REGS_APP_vTake_snapshot_st_23+0x6e>
 1029a4e:	d331      	bcc.n	1029ab4 <REGS_APP_vTake_snapshot_st_23+0x7c>
 1029a50:	2802      	cmp	r0, #2
 1029a52:	d116      	bne.n	1029a82 <REGS_APP_vTake_snapshot_st_23+0x4a>
				addr[1] = ST_25_SEASON_ADDR;
				addr[2] = ST_25_PREV_DEMAND_RESET_DATA_ADDR;					
				break;
			
			case SELF_READ:
				EEPROM_reader( ST_26_LAST_ENTRY_ELEMENT_ADDR, &last_entry_element, 1 );
 1029a54:	2201      	movs	r2, #1
 1029a56:	4b1c      	ldr	r3, [pc, #112]	; (1029ac8 <REGS_APP_vTake_snapshot_st_23+0x90>)
 1029a58:	f10d 010f 	add.w	r1, sp, #15
 1029a5c:	f644 008d 	movw	r0, #18573	; 0x488d
 1029a60:	4798      	blx	r3
			
				addr[0] = ST_26_END_DATE_TIME_ADDR + ( (last_entry_element - 1) * 4 );
 1029a62:	f89d 500f 	ldrb.w	r5, [sp, #15]
				addr[1] = ST_26_SEASON_ADDR + ( (last_entry_element - 1) * 1 );
				addr[2] = ST_26_SELF_READ_REGISTER_DATA_ADDR + (last_entry_element - 1)*ST_23_MAX_SIZE;	
 1029a66:	f240 1687 	movw	r6, #391	; 0x187
				addr[0] = ST_26_END_DATE_TIME_ADDR + ( (last_entry_element - 1) * 4 );
 1029a6a:	1e6b      	subs	r3, r5, #1
				addr[2] = ST_26_SELF_READ_REGISTER_DATA_ADDR + (last_entry_element - 1)*ST_23_MAX_SIZE;	
 1029a6c:	f644 02f3 	movw	r2, #18675	; 0x48f3
				addr[1] = ST_26_SEASON_ADDR + ( (last_entry_element - 1) * 1 );
 1029a70:	f505 4591 	add.w	r5, r5, #18560	; 0x4880
				addr[0] = ST_26_END_DATE_TIME_ADDR + ( (last_entry_element - 1) * 4 );
 1029a74:	f644 04ad 	movw	r4, #18605	; 0x48ad
				addr[1] = ST_26_SEASON_ADDR + ( (last_entry_element - 1) * 1 );
 1029a78:	3564      	adds	r5, #100	; 0x64
				addr[2] = ST_26_SELF_READ_REGISTER_DATA_ADDR + (last_entry_element - 1)*ST_23_MAX_SIZE;	
 1029a7a:	fb06 2603 	mla	r6, r6, r3, r2
				addr[0] = ST_26_END_DATE_TIME_ADDR + ( (last_entry_element - 1) * 4 );
 1029a7e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
			default:
				break;	
		}
	
		// REGISTER_INFO
		EEPROM_writer( addr[0], &timestamp, TM_FMAT_SIZE );
 1029a82:	4620      	mov	r0, r4
 1029a84:	2204      	movs	r2, #4
 1029a86:	4669      	mov	r1, sp
 1029a88:	4c10      	ldr	r4, [pc, #64]	; (1029acc <REGS_APP_vTake_snapshot_st_23+0x94>)
 1029a8a:	47a0      	blx	r4
		EEPROM_writer( addr[1], &season, 1 );
 1029a8c:	2201      	movs	r2, #1
 1029a8e:	f10d 0107 	add.w	r1, sp, #7
 1029a92:	4628      	mov	r0, r5
 1029a94:	47a0      	blx	r4
	
		// PREV_SEASON_REG_DATA | PREV_DEMAND_RESET_DATA | SELF_READ_REGISTER_DATA
		data_length = REGS_APP_usSt_23_get_size();
 1029a96:	4b0e      	ldr	r3, [pc, #56]	; (1029ad0 <REGS_APP_vTake_snapshot_st_23+0x98>)
 1029a98:	4798      	blx	r3
		EEPROM_writer( addr[2], &st_23_copy, data_length );
 1029a9a:	490e      	ldr	r1, [pc, #56]	; (1029ad4 <REGS_APP_vTake_snapshot_st_23+0x9c>)
 1029a9c:	4602      	mov	r2, r0
 1029a9e:	4630      	mov	r0, r6
 1029aa0:	47a0      	blx	r4
	}
}
 1029aa2:	b004      	add	sp, #16
 1029aa4:	bd70      	pop	{r4, r5, r6, pc}
				addr[2] = ST_25_PREV_DEMAND_RESET_DATA_ADDR;					
 1029aa6:	f244 663d 	movw	r6, #17981	; 0x463d
				addr[1] = ST_25_SEASON_ADDR;
 1029aaa:	f244 653c 	movw	r5, #17980	; 0x463c
				addr[0] = ST_25_END_DATE_TIME_ADDR;
 1029aae:	f244 6438 	movw	r4, #17976	; 0x4638
				break;
 1029ab2:	e7e6      	b.n	1029a82 <REGS_APP_vTake_snapshot_st_23+0x4a>
				addr[2] = ST_24_PREV_SEASON_REG_DATA_ADDR;					
 1029ab4:	f244 36ea 	movw	r6, #17386	; 0x43ea
				addr[1] = ST_24_SEASON_ADDR;
 1029ab8:	f244 35e9 	movw	r5, #17385	; 0x43e9
				addr[0] = ST_24_END_DATE_TIME_ADDR;
 1029abc:	f244 34e5 	movw	r4, #17381	; 0x43e5
 1029ac0:	e7df      	b.n	1029a82 <REGS_APP_vTake_snapshot_st_23+0x4a>
 1029ac2:	bf00      	nop
 1029ac4:	20016c2c 	.word	0x20016c2c
 1029ac8:	01017511 	.word	0x01017511
 1029acc:	01017509 	.word	0x01017509
 1029ad0:	01027c45 	.word	0x01027c45
 1029ad4:	20007bd0 	.word	0x20007bd0

01029ad8 <REGS_APP_vDemand_reset>:
void REGS_APP_vDemand_reset(uint16_t user, uint8_t season, uint32_t timestamp) {
 1029ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1029adc:	b08b      	sub	sp, #44	; 0x2c
	REGS_APP_vReset_demands_intervals();
 1029ade:	4b74      	ldr	r3, [pc, #464]	; (1029cb0 <REGS_APP_vDemand_reset+0x1d8>)
void REGS_APP_vDemand_reset(uint16_t user, uint8_t season, uint32_t timestamp) {
 1029ae0:	9009      	str	r0, [sp, #36]	; 0x24
 1029ae2:	9208      	str	r2, [sp, #32]
	REGS_APP_vReset_demands_intervals();
 1029ae4:	4798      	blx	r3
	if ( !meter.ed_mode.test_mode.enabled ) {
 1029ae6:	4b73      	ldr	r3, [pc, #460]	; (1029cb4 <REGS_APP_vDemand_reset+0x1dc>)
 1029ae8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 1029aec:	2b00      	cmp	r3, #0
 1029aee:	f000 80cf 	beq.w	1029c90 <REGS_APP_vDemand_reset+0x1b8>
	for ( i = 0; i < st_21.nbr_demands; i++) {
 1029af2:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 1029cc8 <REGS_APP_vDemand_reset+0x1f0>
 1029af6:	f89a 3004 	ldrb.w	r3, [sl, #4]
 1029afa:	2b00      	cmp	r3, #0
 1029afc:	d048      	beq.n	1029b90 <REGS_APP_vDemand_reset+0xb8>
 1029afe:	4e6e      	ldr	r6, [pc, #440]	; (1029cb8 <REGS_APP_vDemand_reset+0x1e0>)
 1029b00:	2400      	movs	r4, #0
		st_23.tot_data_block.demands[i].event_time[0] = 0;
 1029b02:	46a0      	mov	r8, r4
		st_23.tot_data_block.demands[i].demand[0] = 0;
 1029b04:	4637      	mov	r7, r6
 1029b06:	e005      	b.n	1029b14 <REGS_APP_vDemand_reset+0x3c>
	for ( i = 0; i < st_21.nbr_demands; i++) {
 1029b08:	3401      	adds	r4, #1
 1029b0a:	f89a 3004 	ldrb.w	r3, [sl, #4]
 1029b0e:	b2e4      	uxtb	r4, r4
 1029b10:	42a3      	cmp	r3, r4
 1029b12:	d93d      	bls.n	1029b90 <REGS_APP_vDemand_reset+0xb8>
		st_23.tot_data_block.demands[i].cum_demand += st_23.tot_data_block.demands[i].demand[0];
 1029b14:	1ca1      	adds	r1, r4, #2
 1029b16:	014b      	lsls	r3, r1, #5
 1029b18:	18f9      	adds	r1, r7, r3
 1029b1a:	eb07 1544 	add.w	r5, r7, r4, lsl #5
 1029b1e:	e9d1 bc00 	ldrd	fp, ip, [r1]
 1029b22:	461e      	mov	r6, r3
 1029b24:	e9d5 2314 	ldrd	r2, r3, [r5, #80]	; 0x50
		if ( !meter.ed_mode.test_mode.enabled ) {
 1029b28:	4862      	ldr	r0, [pc, #392]	; (1029cb4 <REGS_APP_vDemand_reset+0x1dc>)
		st_23.tot_data_block.demands[i].event_time[0] = 0;
 1029b2a:	f8c5 8038 	str.w	r8, [r5, #56]	; 0x38
		st_23.tot_data_block.demands[i].cum_demand += st_23.tot_data_block.demands[i].demand[0];
 1029b2e:	eb1b 0b02 	adds.w	fp, fp, r2
 1029b32:	eb4c 0c03 	adc.w	ip, ip, r3
 1029b36:	465a      	mov	r2, fp
 1029b38:	4663      	mov	r3, ip
		if ( !meter.ed_mode.test_mode.enabled ) {
 1029b3a:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
		st_23.tot_data_block.demands[i].cum_demand += st_23.tot_data_block.demands[i].demand[0];
 1029b3e:	e9c1 2300 	strd	r2, r3, [r1]
		st_23.tot_data_block.demands[i].demand[0] = 0;
 1029b42:	2200      	movs	r2, #0
 1029b44:	2300      	movs	r3, #0
 1029b46:	e9c5 2314 	strd	r2, r3, [r5, #80]	; 0x50
		if ( !meter.ed_mode.test_mode.enabled ) {
 1029b4a:	2800      	cmp	r0, #0
 1029b4c:	d1dc      	bne.n	1029b08 <REGS_APP_vDemand_reset+0x30>
			EEPROM_writer( ST_23_TOT_DEMANDS_CUM_DEMAND_ADDR + i*NI_FMAT1_SIZE, &st_23.tot_data_block.demands[i].cum_demand, NI_FMAT1_SIZE );
 1029b4e:	2206      	movs	r2, #6
 1029b50:	f244 10c7 	movw	r0, #16839	; 0x41c7
 1029b54:	fb02 0004 	mla	r0, r2, r4, r0
 1029b58:	4b58      	ldr	r3, [pc, #352]	; (1029cbc <REGS_APP_vDemand_reset+0x1e4>)
 1029b5a:	4798      	blx	r3
			EEPROM_writer( ST_23_TOT_DEMANDS_DEMAND_ADDR + i*NI_FMAT2_SIZE, &st_23.tot_data_block.demands[i].demand[0], NI_FMAT2_SIZE );
 1029b5c:	2205      	movs	r2, #5
 1029b5e:	f106 0110 	add.w	r1, r6, #16
 1029b62:	f244 10df 	movw	r0, #16863	; 0x41df
 1029b66:	fb02 0004 	mla	r0, r2, r4, r0
 1029b6a:	4439      	add	r1, r7
 1029b6c:	4b53      	ldr	r3, [pc, #332]	; (1029cbc <REGS_APP_vDemand_reset+0x1e4>)
 1029b6e:	4798      	blx	r3
			EEPROM_writer( ST_23_TOT_DEMANDS_EVENT_TIME_ADDR + i*TM_FMAT_SIZE, &st_23.tot_data_block.demands[i].event_time[0], TM_FMAT_SIZE );
 1029b70:	2204      	movs	r2, #4
 1029b72:	f1a6 0108 	sub.w	r1, r6, #8
 1029b76:	f244 10bf 	movw	r0, #16831	; 0x41bf
 1029b7a:	fb02 0004 	mla	r0, r2, r4, r0
 1029b7e:	4b4f      	ldr	r3, [pc, #316]	; (1029cbc <REGS_APP_vDemand_reset+0x1e4>)
 1029b80:	4439      	add	r1, r7
 1029b82:	4798      	blx	r3
	for ( i = 0; i < st_21.nbr_demands; i++) {
 1029b84:	3401      	adds	r4, #1
 1029b86:	f89a 3004 	ldrb.w	r3, [sl, #4]
 1029b8a:	b2e4      	uxtb	r4, r4
 1029b8c:	42a3      	cmp	r3, r4
 1029b8e:	d8c1      	bhi.n	1029b14 <REGS_APP_vDemand_reset+0x3c>
	for ( i = 0; i < st_21.nbr_tiers; i++ ) {
 1029b90:	f89a 3007 	ldrb.w	r3, [sl, #7]
 1029b94:	2b00      	cmp	r3, #0
 1029b96:	d06e      	beq.n	1029c76 <REGS_APP_vDemand_reset+0x19e>
 1029b98:	2300      	movs	r3, #0
 1029b9a:	f8df b11c 	ldr.w	fp, [pc, #284]	; 1029cb8 <REGS_APP_vDemand_reset+0x1e0>
 1029b9e:	461e      	mov	r6, r3
		for ( j = 0; j < st_21.nbr_demands; j++) {
 1029ba0:	f89a 3004 	ldrb.w	r3, [sl, #4]
 1029ba4:	2b00      	cmp	r3, #0
 1029ba6:	d060      	beq.n	1029c6a <REGS_APP_vDemand_reset+0x192>
 1029ba8:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
			st_23.tier_data_block[i].demands[j].cum_demand += st_23.tier_data_block[i].demands[j].demand[0];
 1029bac:	461d      	mov	r5, r3
				EEPROM_writer( ST_23_TIER_DEMANDS_DEMAND_ADDR + (i * NI_FMAT2_SIZE * MAX_NBR_DEMANDS) + (j * NI_FMAT2_SIZE), &st_23.tier_data_block[i].demands[j].demand[0], NI_FMAT2_SIZE );
 1029bae:	200a      	movs	r0, #10
 1029bb0:	011b      	lsls	r3, r3, #4
 1029bb2:	f244 21f9 	movw	r1, #17145	; 0x42f9
				EEPROM_writer( ST_23_TIER_DEMANDS_CUM_DEMAND_ADDR + (i * NI_FMAT1_SIZE * MAX_NBR_DEMANDS) + (j * NI_FMAT1_SIZE), &st_23.tier_data_block[i].demands[j].cum_demand, NI_FMAT1_SIZE );
 1029bb6:	240c      	movs	r4, #12
 1029bb8:	f244 2899 	movw	r8, #17049	; 0x4299
				EEPROM_writer( ST_23_TIER_DEMANDS_EVENT_TIME_ADDR + (i * TM_FMAT_SIZE * MAX_NBR_DEMANDS) + (j * TM_FMAT_SIZE), &st_23.tier_data_block[i].demands[j].event_time[0], TM_FMAT_SIZE );
 1029bbc:	f244 2279 	movw	r2, #17017	; 0x4279
 1029bc0:	9305      	str	r3, [sp, #20]
				EEPROM_writer( ST_23_TIER_DEMANDS_DEMAND_ADDR + (i * NI_FMAT2_SIZE * MAX_NBR_DEMANDS) + (j * NI_FMAT2_SIZE), &st_23.tier_data_block[i].demands[j].demand[0], NI_FMAT2_SIZE );
 1029bc2:	fb10 1306 	smlabb	r3, r0, r6, r1
				EEPROM_writer( ST_23_TIER_DEMANDS_CUM_DEMAND_ADDR + (i * NI_FMAT1_SIZE * MAX_NBR_DEMANDS) + (j * NI_FMAT1_SIZE), &st_23.tier_data_block[i].demands[j].cum_demand, NI_FMAT1_SIZE );
 1029bc6:	fb14 8806 	smlabb	r8, r4, r6, r8
				EEPROM_writer( ST_23_TIER_DEMANDS_DEMAND_ADDR + (i * NI_FMAT2_SIZE * MAX_NBR_DEMANDS) + (j * NI_FMAT2_SIZE), &st_23.tier_data_block[i].demands[j].demand[0], NI_FMAT2_SIZE );
 1029bca:	9304      	str	r3, [sp, #16]
				EEPROM_writer( ST_23_TIER_DEMANDS_EVENT_TIME_ADDR + (i * TM_FMAT_SIZE * MAX_NBR_DEMANDS) + (j * TM_FMAT_SIZE), &st_23.tier_data_block[i].demands[j].event_time[0], TM_FMAT_SIZE );
 1029bcc:	eb02 03c6 	add.w	r3, r2, r6, lsl #3
 1029bd0:	9303      	str	r3, [sp, #12]
			st_23.tier_data_block[i].demands[j].cum_demand += st_23.tier_data_block[i].demands[j].demand[0];
 1029bd2:	012d      	lsls	r5, r5, #4
				EEPROM_writer( ST_23_TIER_DEMANDS_EVENT_TIME_ADDR + (i * TM_FMAT_SIZE * MAX_NBR_DEMANDS) + (j * TM_FMAT_SIZE), &st_23.tier_data_block[i].demands[j].event_time[0], TM_FMAT_SIZE );
 1029bd4:	2400      	movs	r4, #0
 1029bd6:	9607      	str	r6, [sp, #28]
 1029bd8:	f8cd 8018 	str.w	r8, [sp, #24]
 1029bdc:	e005      	b.n	1029bea <REGS_APP_vDemand_reset+0x112>
		for ( j = 0; j < st_21.nbr_demands; j++) {
 1029bde:	3401      	adds	r4, #1
 1029be0:	f89a 3004 	ldrb.w	r3, [sl, #4]
 1029be4:	b2e4      	uxtb	r4, r4
 1029be6:	42a3      	cmp	r3, r4
 1029be8:	d93e      	bls.n	1029c68 <REGS_APP_vDemand_reset+0x190>
			st_23.tier_data_block[i].demands[j].cum_demand += st_23.tier_data_block[i].demands[j].demand[0];
 1029bea:	eb05 1644 	add.w	r6, r5, r4, lsl #5
 1029bee:	445e      	add	r6, fp
 1029bf0:	e9d6 2330 	ldrd	r2, r3, [r6, #192]	; 0xc0
 1029bf4:	e9d6 012c 	ldrd	r0, r1, [r6, #176]	; 0xb0
			if ( !meter.ed_mode.test_mode.enabled ) {
 1029bf8:	4f2e      	ldr	r7, [pc, #184]	; (1029cb4 <REGS_APP_vDemand_reset+0x1dc>)
			st_23.tier_data_block[i].demands[j].cum_demand += st_23.tier_data_block[i].demands[j].demand[0];
 1029bfa:	eb12 0800 	adds.w	r8, r2, r0
 1029bfe:	eb43 0901 	adc.w	r9, r3, r1
 1029c02:	4642      	mov	r2, r8
 1029c04:	464b      	mov	r3, r9
			if ( !meter.ed_mode.test_mode.enabled ) {
 1029c06:	f897 7024 	ldrb.w	r7, [r7, #36]	; 0x24
			st_23.tier_data_block[i].demands[j].cum_demand += st_23.tier_data_block[i].demands[j].demand[0];
 1029c0a:	e9c6 232c 	strd	r2, r3, [r6, #176]	; 0xb0
			st_23.tier_data_block[i].demands[j].event_time[0] = 0;
 1029c0e:	2100      	movs	r1, #0
			st_23.tier_data_block[i].demands[j].demand[0] = 0;
 1029c10:	2200      	movs	r2, #0
 1029c12:	2300      	movs	r3, #0
 1029c14:	e9c6 2330 	strd	r2, r3, [r6, #192]	; 0xc0
			st_23.tier_data_block[i].demands[j].event_time[0] = 0;
 1029c18:	f8c6 10a8 	str.w	r1, [r6, #168]	; 0xa8
			if ( !meter.ed_mode.test_mode.enabled ) {
 1029c1c:	2f00      	cmp	r7, #0
 1029c1e:	d1de      	bne.n	1029bde <REGS_APP_vDemand_reset+0x106>
 1029c20:	9b05      	ldr	r3, [sp, #20]
 1029c22:	eb03 1644 	add.w	r6, r3, r4, lsl #5
				EEPROM_writer( ST_23_TIER_DEMANDS_CUM_DEMAND_ADDR + (i * NI_FMAT1_SIZE * MAX_NBR_DEMANDS) + (j * NI_FMAT1_SIZE), &st_23.tier_data_block[i].demands[j].cum_demand, NI_FMAT1_SIZE );
 1029c26:	9b06      	ldr	r3, [sp, #24]
 1029c28:	2206      	movs	r2, #6
 1029c2a:	f106 01b0 	add.w	r1, r6, #176	; 0xb0
 1029c2e:	fb02 3004 	mla	r0, r2, r4, r3
 1029c32:	4459      	add	r1, fp
 1029c34:	4b21      	ldr	r3, [pc, #132]	; (1029cbc <REGS_APP_vDemand_reset+0x1e4>)
 1029c36:	4798      	blx	r3
				EEPROM_writer( ST_23_TIER_DEMANDS_DEMAND_ADDR + (i * NI_FMAT2_SIZE * MAX_NBR_DEMANDS) + (j * NI_FMAT2_SIZE), &st_23.tier_data_block[i].demands[j].demand[0], NI_FMAT2_SIZE );
 1029c38:	9b04      	ldr	r3, [sp, #16]
 1029c3a:	2205      	movs	r2, #5
 1029c3c:	f106 01c0 	add.w	r1, r6, #192	; 0xc0
 1029c40:	fb02 3004 	mla	r0, r2, r4, r3
 1029c44:	4459      	add	r1, fp
 1029c46:	4b1d      	ldr	r3, [pc, #116]	; (1029cbc <REGS_APP_vDemand_reset+0x1e4>)
 1029c48:	4798      	blx	r3
				EEPROM_writer( ST_23_TIER_DEMANDS_EVENT_TIME_ADDR + (i * TM_FMAT_SIZE * MAX_NBR_DEMANDS) + (j * TM_FMAT_SIZE), &st_23.tier_data_block[i].demands[j].event_time[0], TM_FMAT_SIZE );
 1029c4a:	9b03      	ldr	r3, [sp, #12]
 1029c4c:	2204      	movs	r2, #4
 1029c4e:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 1029c52:	fb02 3004 	mla	r0, r2, r4, r3
 1029c56:	4459      	add	r1, fp
 1029c58:	4b18      	ldr	r3, [pc, #96]	; (1029cbc <REGS_APP_vDemand_reset+0x1e4>)
 1029c5a:	4798      	blx	r3
		for ( j = 0; j < st_21.nbr_demands; j++) {
 1029c5c:	3401      	adds	r4, #1
 1029c5e:	f89a 3004 	ldrb.w	r3, [sl, #4]
 1029c62:	b2e4      	uxtb	r4, r4
 1029c64:	42a3      	cmp	r3, r4
 1029c66:	d8c0      	bhi.n	1029bea <REGS_APP_vDemand_reset+0x112>
 1029c68:	9e07      	ldr	r6, [sp, #28]
	for ( i = 0; i < st_21.nbr_tiers; i++ ) {
 1029c6a:	f89a 3007 	ldrb.w	r3, [sl, #7]
 1029c6e:	3601      	adds	r6, #1
 1029c70:	b2f6      	uxtb	r6, r6
 1029c72:	42b3      	cmp	r3, r6
 1029c74:	d894      	bhi.n	1029ba0 <REGS_APP_vDemand_reset+0xc8>
	REGS_APP_vReset_demands_intervals();	
 1029c76:	4b0e      	ldr	r3, [pc, #56]	; (1029cb0 <REGS_APP_vDemand_reset+0x1d8>)
	EVNT_APP_vRegister_event(DEMAND_RESET_OCCURRED, 0, true, user, timestamp);
 1029c78:	4c11      	ldr	r4, [pc, #68]	; (1029cc0 <REGS_APP_vDemand_reset+0x1e8>)
	REGS_APP_vReset_demands_intervals();	
 1029c7a:	4798      	blx	r3
	EVNT_APP_vRegister_event(DEMAND_RESET_OCCURRED, 0, true, user, timestamp);
 1029c7c:	9b08      	ldr	r3, [sp, #32]
 1029c7e:	9300      	str	r3, [sp, #0]
 1029c80:	2201      	movs	r2, #1
 1029c82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 1029c84:	2100      	movs	r1, #0
 1029c86:	2014      	movs	r0, #20
 1029c88:	47a0      	blx	r4
}
 1029c8a:	b00b      	add	sp, #44	; 0x2c
 1029c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		st_23.nbr_demand_resets++;
 1029c90:	4e09      	ldr	r6, [pc, #36]	; (1029cb8 <REGS_APP_vDemand_reset+0x1e0>)
		REGS_APP_vTake_snapshot_st_23((uint8_t)DEMAND_RESET, season, timestamp);
 1029c92:	9a08      	ldr	r2, [sp, #32]
 1029c94:	4b0b      	ldr	r3, [pc, #44]	; (1029cc4 <REGS_APP_vDemand_reset+0x1ec>)
		EEPROM_writer( ST_23_NBR_DEMAND_RESETS_ADDR, &st_23.nbr_demand_resets, 1 );
 1029c96:	4c09      	ldr	r4, [pc, #36]	; (1029cbc <REGS_APP_vDemand_reset+0x1e4>)
		REGS_APP_vTake_snapshot_st_23((uint8_t)DEMAND_RESET, season, timestamp);
 1029c98:	2001      	movs	r0, #1
 1029c9a:	4798      	blx	r3
		st_23.nbr_demand_resets++;
 1029c9c:	7833      	ldrb	r3, [r6, #0]
		EEPROM_writer( ST_23_NBR_DEMAND_RESETS_ADDR, &st_23.nbr_demand_resets, 1 );
 1029c9e:	4631      	mov	r1, r6
		st_23.nbr_demand_resets++;
 1029ca0:	3301      	adds	r3, #1
		EEPROM_writer( ST_23_NBR_DEMAND_RESETS_ADDR, &st_23.nbr_demand_resets, 1 );
 1029ca2:	2201      	movs	r2, #1
 1029ca4:	f244 109a 	movw	r0, #16794	; 0x419a
		st_23.nbr_demand_resets++;
 1029ca8:	7033      	strb	r3, [r6, #0]
		EEPROM_writer( ST_23_NBR_DEMAND_RESETS_ADDR, &st_23.nbr_demand_resets, 1 );
 1029caa:	47a0      	blx	r4
 1029cac:	e721      	b.n	1029af2 <REGS_APP_vDemand_reset+0x1a>
 1029cae:	bf00      	nop
 1029cb0:	01025eb9 	.word	0x01025eb9
 1029cb4:	20016c2c 	.word	0x20016c2c
 1029cb8:	20007998 	.word	0x20007998
 1029cbc:	01017509 	.word	0x01017509
 1029cc0:	01019961 	.word	0x01019961
 1029cc4:	01029a39 	.word	0x01029a39
 1029cc8:	2000797c 	.word	0x2000797c

01029ccc <REGS_APP_vSelf_read>:
void REGS_APP_vSelf_read(uint16_t user, uint8_t season, uint32_t timestamp) {
 1029ccc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 1029cd0:	b085      	sub	sp, #20
		EEPROM_reader( ST_26_LIST_STATUS_ADDR, &list_status, 1 );
 1029cd2:	4c33      	ldr	r4, [pc, #204]	; (1029da0 <REGS_APP_vSelf_read+0xd4>)
		if ( nbr_valid_entries < st_21.nbr_self_reads ) {
 1029cd4:	4e33      	ldr	r6, [pc, #204]	; (1029da4 <REGS_APP_vSelf_read+0xd8>)
		EEPROM_writer( ST_26_NBR_VALID_ENTRIES_ADDR, &nbr_valid_entries, 1 );
 1029cd6:	4d34      	ldr	r5, [pc, #208]	; (1029da8 <REGS_APP_vSelf_read+0xdc>)
void REGS_APP_vSelf_read(uint16_t user, uint8_t season, uint32_t timestamp) {
 1029cd8:	4680      	mov	r8, r0
 1029cda:	4689      	mov	r9, r1
 1029cdc:	4617      	mov	r7, r2
		EEPROM_reader( ST_26_LIST_STATUS_ADDR, &list_status, 1 );
 1029cde:	f10d 010b 	add.w	r1, sp, #11
 1029ce2:	2201      	movs	r2, #1
 1029ce4:	f644 008b 	movw	r0, #18571	; 0x488b
 1029ce8:	47a0      	blx	r4
		EEPROM_reader( ST_26_NBR_VALID_ENTRIES_ADDR, &nbr_valid_entries, 1 );
 1029cea:	a903      	add	r1, sp, #12
 1029cec:	2201      	movs	r2, #1
 1029cee:	f644 008c 	movw	r0, #18572	; 0x488c
 1029cf2:	47a0      	blx	r4
		if ( nbr_valid_entries < st_21.nbr_self_reads ) {
 1029cf4:	f89d 300c 	ldrb.w	r3, [sp, #12]
 1029cf8:	78b2      	ldrb	r2, [r6, #2]
 1029cfa:	429a      	cmp	r2, r3
			nbr_valid_entries++;
 1029cfc:	bf88      	it	hi
 1029cfe:	3301      	addhi	r3, #1
		EEPROM_writer( ST_26_NBR_VALID_ENTRIES_ADDR, &nbr_valid_entries, 1 );
 1029d00:	a903      	add	r1, sp, #12
 1029d02:	f04f 0201 	mov.w	r2, #1
 1029d06:	f644 008c 	movw	r0, #18572	; 0x488c
			nbr_valid_entries++;
 1029d0a:	bf88      	it	hi
 1029d0c:	f88d 300c 	strbhi.w	r3, [sp, #12]
		EEPROM_writer( ST_26_NBR_VALID_ENTRIES_ADDR, &nbr_valid_entries, 1 );
 1029d10:	47a8      	blx	r5
		EEPROM_reader( ST_26_LAST_ENTRY_ELEMENT_ADDR, &last_entry_element, 1 );
 1029d12:	f10d 010d 	add.w	r1, sp, #13
 1029d16:	2201      	movs	r2, #1
 1029d18:	f644 008d 	movw	r0, #18573	; 0x488d
 1029d1c:	47a0      	blx	r4
		last_entry_element++;
 1029d1e:	f89d 300d 	ldrb.w	r3, [sp, #13]
		if ( last_entry_element > st_21.nbr_self_reads ){
 1029d22:	78b2      	ldrb	r2, [r6, #2]
		last_entry_element++;
 1029d24:	3301      	adds	r3, #1
 1029d26:	b2db      	uxtb	r3, r3
		if ( last_entry_element > st_21.nbr_self_reads ){
 1029d28:	429a      	cmp	r2, r3
		last_entry_element++;
 1029d2a:	f88d 300d 	strb.w	r3, [sp, #13]
		EEPROM_writer( ST_26_LAST_ENTRY_ELEMENT_ADDR, &last_entry_element, 1 );
 1029d2e:	f10d 010d 	add.w	r1, sp, #13
			last_entry_element = 1;
 1029d32:	bf38      	it	cc
 1029d34:	2301      	movcc	r3, #1
		EEPROM_writer( ST_26_LAST_ENTRY_ELEMENT_ADDR, &last_entry_element, 1 );
 1029d36:	f04f 0201 	mov.w	r2, #1
 1029d3a:	f644 008d 	movw	r0, #18573	; 0x488d
			last_entry_element = 1;
 1029d3e:	bf38      	it	cc
 1029d40:	f88d 300d 	strbcc.w	r3, [sp, #13]
		EEPROM_writer( ST_26_LAST_ENTRY_ELEMENT_ADDR, &last_entry_element, 1 );
 1029d44:	47a8      	blx	r5
		EEPROM_reader( ST_26_LAST_ENTRY_SEQ_NBR_ADDR, &last_entry_seq_nbr, 2 );
 1029d46:	f10d 010e 	add.w	r1, sp, #14
 1029d4a:	2202      	movs	r2, #2
 1029d4c:	f644 008e 	movw	r0, #18574	; 0x488e
 1029d50:	47a0      	blx	r4
		last_entry_seq_nbr++;
 1029d52:	f8bd 300e 	ldrh.w	r3, [sp, #14]
		EEPROM_writer( ST_26_LAST_ENTRY_SEQ_NBR_ADDR, &last_entry_seq_nbr, 2 );
 1029d56:	f10d 010e 	add.w	r1, sp, #14
		last_entry_seq_nbr++;
 1029d5a:	3301      	adds	r3, #1
		EEPROM_writer( ST_26_LAST_ENTRY_SEQ_NBR_ADDR, &last_entry_seq_nbr, 2 );
 1029d5c:	2202      	movs	r2, #2
 1029d5e:	f644 008e 	movw	r0, #18574	; 0x488e
		last_entry_seq_nbr++;
 1029d62:	f8ad 300e 	strh.w	r3, [sp, #14]
		EEPROM_writer( ST_26_LAST_ENTRY_SEQ_NBR_ADDR, &last_entry_seq_nbr, 2 );
 1029d66:	47a8      	blx	r5
		if ( (st_21.reg_func2_flags & SELF_READ_SEQ_NBR_FLAG_bm) == SELF_READ_SEQ_NBR_FLAG_bm ) {
 1029d68:	7873      	ldrb	r3, [r6, #1]
 1029d6a:	079b      	lsls	r3, r3, #30
 1029d6c:	d509      	bpl.n	1029d82 <REGS_APP_vSelf_read+0xb6>
			address = ST_26_SELF_READ_SEQ_NBR_ADDR + ( (last_entry_element - 1) * 2 );
 1029d6e:	f89d 000d 	ldrb.w	r0, [sp, #13]
 1029d72:	0040      	lsls	r0, r0, #1
			EEPROM_writer( (uint32_t)address, &last_entry_seq_nbr, 2 );
 1029d74:	f500 4091 	add.w	r0, r0, #18560	; 0x4880
 1029d78:	f10d 010e 	add.w	r1, sp, #14
 1029d7c:	300f      	adds	r0, #15
 1029d7e:	2202      	movs	r2, #2
 1029d80:	47a8      	blx	r5
		REGS_APP_vTake_snapshot_st_23((uint8_t)SELF_READ, season, timestamp);
 1029d82:	4649      	mov	r1, r9
 1029d84:	463a      	mov	r2, r7
 1029d86:	2002      	movs	r0, #2
 1029d88:	4b08      	ldr	r3, [pc, #32]	; (1029dac <REGS_APP_vSelf_read+0xe0>)
		EVNT_APP_vRegister_event(SELF_READ_OCCURRED, 0, true, user, timestamp);
 1029d8a:	4c09      	ldr	r4, [pc, #36]	; (1029db0 <REGS_APP_vSelf_read+0xe4>)
		REGS_APP_vTake_snapshot_st_23((uint8_t)SELF_READ, season, timestamp);
 1029d8c:	4798      	blx	r3
		EVNT_APP_vRegister_event(SELF_READ_OCCURRED, 0, true, user, timestamp);
 1029d8e:	9700      	str	r7, [sp, #0]
 1029d90:	4643      	mov	r3, r8
 1029d92:	2201      	movs	r2, #1
 1029d94:	2100      	movs	r1, #0
 1029d96:	2015      	movs	r0, #21
 1029d98:	47a0      	blx	r4
}
 1029d9a:	b005      	add	sp, #20
 1029d9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 1029da0:	01017511 	.word	0x01017511
 1029da4:	2000797c 	.word	0x2000797c
 1029da8:	01017509 	.word	0x01017509
 1029dac:	01029a39 	.word	0x01029a39
 1029db0:	01019961 	.word	0x01019961

01029db4 <REGS_APP_vCopy_st_23>:
 * \retval void
 ******************************************************************************
 */
void REGS_APP_vCopy_st_23(void) {
	
	REGS_APP_bSt_23_execute_table_reading(&st_23_copy[0]);
 1029db4:	4801      	ldr	r0, [pc, #4]	; (1029dbc <REGS_APP_vCopy_st_23+0x8>)
 1029db6:	4b02      	ldr	r3, [pc, #8]	; (1029dc0 <REGS_APP_vCopy_st_23+0xc>)
 1029db8:	4718      	bx	r3
 1029dba:	bf00      	nop
 1029dbc:	20007bd0 	.word	0x20007bd0
 1029dc0:	01027769 	.word	0x01027769

01029dc4 <RTC_APP_vIo_configure>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
void RTC_APP_vIo_configure(void) {
 1029dc4:	b510      	push	{r4, lr}

	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
 1029dc6:	4c0a      	ldr	r4, [pc, #40]	; (1029df0 <RTC_APP_vIo_configure+0x2c>)
 1029dc8:	4b0a      	ldr	r3, [pc, #40]	; (1029df4 <RTC_APP_vIo_configure+0x30>)
 1029dca:	4620      	mov	r0, r4
 1029dcc:	2100      	movs	r1, #0
 1029dce:	4798      	blx	r3
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 1029dd0:	4a09      	ldr	r2, [pc, #36]	; (1029df8 <RTC_APP_vIo_configure+0x34>)
	/*===========================================================================*\
	 * EPSON RTC Model: RX8900
	\*===========================================================================*/
	if ( RTC_TYPE_USED == RTC_RX8900 ) {
		
		RX8900_APP_ucDisable_vdd_monitor_pmos_sw_off();
 1029dd2:	490a      	ldr	r1, [pc, #40]	; (1029dfc <RTC_APP_vIo_configure+0x38>)
 1029dd4:	2304      	movs	r3, #4
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 1029dd6:	2000      	movs	r0, #0
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 1029dd8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 1029ddc:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 1029de0:	f882 0302 	strb.w	r0, [r2, #770]	; 0x302
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 1029de4:	6013      	str	r3, [r2, #0]
	RTC->RTC_IER = RTC_IER_SECEN;
 1029de6:	6223      	str	r3, [r4, #32]
	}
}
 1029de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		RX8900_APP_ucDisable_vdd_monitor_pmos_sw_off();
 1029dec:	4708      	bx	r1
 1029dee:	bf00      	nop
 1029df0:	400e1460 	.word	0x400e1460
 1029df4:	010160a9 	.word	0x010160a9
 1029df8:	e000e100 	.word	0xe000e100
 1029dfc:	01015fcd 	.word	0x01015fcd

01029e00 <RTC_APP_bIs_leap_year>:
 * \retval true if year is a leap year
 ******************************************************************************
 */
bool RTC_APP_bIs_leap_year(uint16_t yr)
{
	return (((yr % 400) == 0) || (((yr % 4) == 0) && ((yr % 100) != 0)));
 1029e00:	4b0c      	ldr	r3, [pc, #48]	; (1029e34 <RTC_APP_bIs_leap_year+0x34>)
 1029e02:	fba3 2300 	umull	r2, r3, r3, r0
 1029e06:	09da      	lsrs	r2, r3, #7
 1029e08:	f44f 71c8 	mov.w	r1, #400	; 0x190
 1029e0c:	fb01 0212 	mls	r2, r1, r2, r0
 1029e10:	b292      	uxth	r2, r2
 1029e12:	b162      	cbz	r2, 1029e2e <RTC_APP_bIs_leap_year+0x2e>
 1029e14:	0782      	lsls	r2, r0, #30
 1029e16:	d108      	bne.n	1029e2a <RTC_APP_bIs_leap_year+0x2a>
 1029e18:	095b      	lsrs	r3, r3, #5
 1029e1a:	2264      	movs	r2, #100	; 0x64
 1029e1c:	fb02 0013 	mls	r0, r2, r3, r0
 1029e20:	b280      	uxth	r0, r0
 1029e22:	3000      	adds	r0, #0
 1029e24:	bf18      	it	ne
 1029e26:	2001      	movne	r0, #1
 1029e28:	4770      	bx	lr
 1029e2a:	2000      	movs	r0, #0
}
 1029e2c:	4770      	bx	lr
 1029e2e:	2001      	movs	r0, #1
 1029e30:	4770      	bx	lr
 1029e32:	bf00      	nop
 1029e34:	51eb851f 	.word	0x51eb851f

01029e38 <RTC_APP_ucDay_of_week>:
 * \param day
 * \retval weekday
 ******************************************************************************
 */
uint8_t RTC_APP_ucDay_of_week(uint16_t year, uint8_t month, uint8_t day)
{
 1029e38:	b470      	push	{r4, r5, r6}
	int adjustment, mm, yy, day_of_week;
	
	adjustment = (14 - month) / 12;
 1029e3a:	4e1c      	ldr	r6, [pc, #112]	; (1029eac <RTC_APP_ucDay_of_week+0x74>)
	mm = month + 12 * adjustment - 2;
	yy = year - adjustment;
	day_of_week = (day + (13 * mm - 1) / 5 + yy + yy / 4 - yy / 100 + yy / 400) % 7;
 1029e3c:	4d1c      	ldr	r5, [pc, #112]	; (1029eb0 <RTC_APP_ucDay_of_week+0x78>)
	adjustment = (14 - month) / 12;
 1029e3e:	f1c1 040e 	rsb	r4, r1, #14
 1029e42:	fb86 3604 	smull	r3, r6, r6, r4
 1029e46:	17e3      	asrs	r3, r4, #31
 1029e48:	ebc3 0366 	rsb	r3, r3, r6, asr #1
	mm = month + 12 * adjustment - 2;
 1029e4c:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 1029e50:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 1029e54:	3902      	subs	r1, #2
	day_of_week = (day + (13 * mm - 1) / 5 + yy + yy / 4 - yy / 100 + yy / 400) % 7;
 1029e56:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 1029e5a:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 1029e5e:	3901      	subs	r1, #1
 1029e60:	fb85 5401 	smull	r5, r4, r5, r1
 1029e64:	17c9      	asrs	r1, r1, #31
	yy = year - adjustment;
 1029e66:	1ac3      	subs	r3, r0, r3
	day_of_week = (day + (13 * mm - 1) / 5 + yy + yy / 4 - yy / 100 + yy / 400) % 7;
 1029e68:	ebc1 0164 	rsb	r1, r1, r4, asr #1
 1029e6c:	4c11      	ldr	r4, [pc, #68]	; (1029eb4 <RTC_APP_ucDay_of_week+0x7c>)
 1029e6e:	1888      	adds	r0, r1, r2
 1029e70:	2b00      	cmp	r3, #0
 1029e72:	fb84 5403 	smull	r5, r4, r4, r3
 1029e76:	bfb4      	ite	lt
 1029e78:	1cd9      	addlt	r1, r3, #3
 1029e7a:	4619      	movge	r1, r3
 1029e7c:	4418      	add	r0, r3
 1029e7e:	17db      	asrs	r3, r3, #31
 1029e80:	eb00 00a1 	add.w	r0, r0, r1, asr #2
 1029e84:	eba3 1164 	sub.w	r1, r3, r4, asr #5
 1029e88:	4a0b      	ldr	r2, [pc, #44]	; (1029eb8 <RTC_APP_ucDay_of_week+0x80>)
 1029e8a:	ebc3 13e4 	rsb	r3, r3, r4, asr #7
 1029e8e:	4408      	add	r0, r1
 1029e90:	4418      	add	r0, r3
 1029e92:	fb82 2300 	smull	r2, r3, r2, r0
 1029e96:	181a      	adds	r2, r3, r0
 1029e98:	17c3      	asrs	r3, r0, #31
 1029e9a:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 1029e9e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 1029ea2:	1ac0      	subs	r0, r0, r3
	
	return (uint8_t)day_of_week;
}
 1029ea4:	b2c0      	uxtb	r0, r0
 1029ea6:	bc70      	pop	{r4, r5, r6}
 1029ea8:	4770      	bx	lr
 1029eaa:	bf00      	nop
 1029eac:	2aaaaaab 	.word	0x2aaaaaab
 1029eb0:	66666667 	.word	0x66666667
 1029eb4:	51eb851f 	.word	0x51eb851f
 1029eb8:	92492493 	.word	0x92492493

01029ebc <RTC_APP_vBreak_timestamp>:
 * \retval
 *
 ******************************************************************************
 */
void RTC_APP_vBreak_timestamp(RTC_TYPE* rtc, uint32_t timestamp)
{
 1029ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rtc->htime.second = time % 60;
	time /= 60;									// time = minutes
	rtc->htime.minute = time % 60;
	time /= 60;									// time = hours
	rtc->htime.hour = time % 24;
	time /= 24;									// time = days
 1029ec0:	4e63      	ldr	r6, [pc, #396]	; (102a050 <RTC_APP_vBreak_timestamp+0x194>)
	rtc->htime.second = time % 60;
 1029ec2:	4b64      	ldr	r3, [pc, #400]	; (102a054 <RTC_APP_vBreak_timestamp+0x198>)
	time /= 60;									// time = hours
 1029ec4:	4c64      	ldr	r4, [pc, #400]	; (102a058 <RTC_APP_vBreak_timestamp+0x19c>)
	rtc->day_of_week = ((time + 4) % 7);		// Sunday = day 0
 1029ec6:	4a65      	ldr	r2, [pc, #404]	; (102a05c <RTC_APP_vBreak_timestamp+0x1a0>)
	rtc->htime.hour = time % 24;
 1029ec8:	4d65      	ldr	r5, [pc, #404]	; (102a060 <RTC_APP_vBreak_timestamp+0x1a4>)
	uint8_t month_days[12]={31,28,31,30,31,30,31,31,30,31,30,31};
 1029eca:	f8df 919c 	ldr.w	r9, [pc, #412]	; 102a068 <RTC_APP_vBreak_timestamp+0x1ac>
	return (((yr % 400) == 0) || (((yr % 4) == 0) && ((yr % 100) != 0)));
 1029ece:	4f65      	ldr	r7, [pc, #404]	; (102a064 <RTC_APP_vBreak_timestamp+0x1a8>)
	time /= 24;									// time = days
 1029ed0:	fba6 e601 	umull	lr, r6, r6, r1
 1029ed4:	0c36      	lsrs	r6, r6, #16
	rtc->htime.second = time % 60;
 1029ed6:	fba3 ec01 	umull	lr, ip, r3, r1
	rtc->day_of_week = ((time + 4) % 7);		// Sunday = day 0
 1029eda:	f106 0804 	add.w	r8, r6, #4
	time /= 60;									// time = hours
 1029ede:	fba4 4e01 	umull	r4, lr, r4, r1
	rtc->day_of_week = ((time + 4) % 7);		// Sunday = day 0
 1029ee2:	fba2 4208 	umull	r4, r2, r2, r8
	rtc->htime.second = time % 60;
 1029ee6:	ea4f 145c 	mov.w	r4, ip, lsr #5
	time /= 60;									// time = hours
 1029eea:	ea4f 2ade 	mov.w	sl, lr, lsr #11
	rtc->htime.minute = time % 60;
 1029eee:	fba3 e304 	umull	lr, r3, r3, r4
 1029ef2:	095b      	lsrs	r3, r3, #5
	rtc->htime.hour = time % 24;
 1029ef4:	fba5 5e0a 	umull	r5, lr, r5, sl
	rtc->htime.minute = time % 60;
 1029ef8:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
	rtc->day_of_week = ((time + 4) % 7);		// Sunday = day 0
 1029efc:	eba8 0502 	sub.w	r5, r8, r2
	rtc->htime.minute = time % 60;
 1029f00:	eba4 0383 	sub.w	r3, r4, r3, lsl #2
	rtc->day_of_week = ((time + 4) % 7);		// Sunday = day 0
 1029f04:	eb02 0255 	add.w	r2, r2, r5, lsr #1
	rtc->htime.second = time % 60;
 1029f08:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
{
 1029f0c:	4605      	mov	r5, r0
	rtc->htime.second = time % 60;
 1029f0e:	eba1 0184 	sub.w	r1, r1, r4, lsl #2
	rtc->day_of_week = ((time + 4) % 7);		// Sunday = day 0
 1029f12:	0892      	lsrs	r2, r2, #2
{
 1029f14:	b084      	sub	sp, #16
	rtc->htime.hour = time % 24;
 1029f16:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
	rtc->day_of_week = ((time + 4) % 7);		// Sunday = day 0
 1029f1a:	ebc2 0cc2 	rsb	ip, r2, r2, lsl #3
	rtc->htime.hour = time % 24;
 1029f1e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
	uint8_t month_days[12]={31,28,31,30,31,30,31,31,30,31,30,31};
 1029f22:	f8d9 2008 	ldr.w	r2, [r9, #8]
 1029f26:	f8d9 0000 	ldr.w	r0, [r9]
	rtc->htime.second = time % 60;
 1029f2a:	74a9      	strb	r1, [r5, #18]
	uint8_t month_days[12]={31,28,31,30,31,30,31,31,30,31,30,31};
 1029f2c:	ac01      	add	r4, sp, #4
 1029f2e:	f8d9 1004 	ldr.w	r1, [r9, #4]
	rtc->htime.minute = time % 60;
 1029f32:	746b      	strb	r3, [r5, #17]
	rtc->day_of_week = ((time + 4) % 7);		// Sunday = day 0
 1029f34:	eba8 0c0c 	sub.w	ip, r8, ip
	rtc->htime.hour = time % 24;
 1029f38:	ebaa 0ece 	sub.w	lr, sl, lr, lsl #3
	uint8_t month_days[12]={31,28,31,30,31,30,31,31,30,31,30,31};
 1029f3c:	4623      	mov	r3, r4
 1029f3e:	c307      	stmia	r3!, {r0, r1, r2}
	rtc->htime.hour = time % 24;
 1029f40:	f885 e010 	strb.w	lr, [r5, #16]
	rtc->day_of_week = ((time + 4) % 7);		// Sunday = day 0
 1029f44:	f885 c017 	strb.w	ip, [r5, #23]
	
	year = 1970;
	days = 0;
 1029f48:	2200      	movs	r2, #0
	year = 1970;
 1029f4a:	f240 73b2 	movw	r3, #1970	; 0x7b2
	return (((yr % 400) == 0) || (((yr % 4) == 0) && ((yr % 100) != 0)));
 1029f4e:	f44f 7ec8 	mov.w	lr, #400	; 0x190
 1029f52:	f240 186d 	movw	r8, #365	; 0x16d
 1029f56:	f04f 0c64 	mov.w	ip, #100	; 0x64

	while((unsigned)(days += (RTC_APP_bIs_leap_year(year) ? 366 : 365)) <= time)
 1029f5a:	e010      	b.n	1029f7e <RTC_APP_vBreak_timestamp+0xc2>
	return (((yr % 400) == 0) || (((yr % 4) == 0) && ((yr % 100) != 0)));
 1029f5c:	0940      	lsrs	r0, r0, #5
 1029f5e:	fb0c 3010 	mls	r0, ip, r0, r3
 1029f62:	f013 0f03 	tst.w	r3, #3
 1029f66:	b280      	uxth	r0, r0
 1029f68:	d129      	bne.n	1029fbe <RTC_APP_vBreak_timestamp+0x102>
 1029f6a:	2800      	cmp	r0, #0
 1029f6c:	bf0c      	ite	eq
 1029f6e:	4640      	moveq	r0, r8
 1029f70:	f44f 70b7 	movne.w	r0, #366	; 0x16e
	while((unsigned)(days += (RTC_APP_bIs_leap_year(year) ? 366 : 365)) <= time)
 1029f74:	4402      	add	r2, r0
 1029f76:	4296      	cmp	r6, r2
 1029f78:	d30e      	bcc.n	1029f98 <RTC_APP_vBreak_timestamp+0xdc>
	{
		year++;
 1029f7a:	3301      	adds	r3, #1
 1029f7c:	b29b      	uxth	r3, r3
	return (((yr % 400) == 0) || (((yr % 4) == 0) && ((yr % 100) != 0)));
 1029f7e:	fba7 1003 	umull	r1, r0, r7, r3
 1029f82:	09c1      	lsrs	r1, r0, #7
 1029f84:	fb0e 3111 	mls	r1, lr, r1, r3
 1029f88:	b289      	uxth	r1, r1
 1029f8a:	2900      	cmp	r1, #0
 1029f8c:	d1e6      	bne.n	1029f5c <RTC_APP_vBreak_timestamp+0xa0>
 1029f8e:	f44f 70b7 	mov.w	r0, #366	; 0x16e
	while((unsigned)(days += (RTC_APP_bIs_leap_year(year) ? 366 : 365)) <= time)
 1029f92:	4402      	add	r2, r0
 1029f94:	4296      	cmp	r6, r2
 1029f96:	d2f0      	bcs.n	1029f7a <RTC_APP_vBreak_timestamp+0xbe>
	}
	rtc->htime.year = year;
 1029f98:	81ab      	strh	r3, [r5, #12]
	return (((yr % 400) == 0) || (((yr % 4) == 0) && ((yr % 100) != 0)));
 1029f9a:	b199      	cbz	r1, 1029fc4 <RTC_APP_vBreak_timestamp+0x108>
 1029f9c:	0798      	lsls	r0, r3, #30
 1029f9e:	d13c      	bne.n	102a01a <RTC_APP_vBreak_timestamp+0x15e>
 1029fa0:	4830      	ldr	r0, [pc, #192]	; (102a064 <RTC_APP_vBreak_timestamp+0x1a8>)
 1029fa2:	fba0 7003 	umull	r7, r0, r0, r3
 1029fa6:	0940      	lsrs	r0, r0, #5
 1029fa8:	2764      	movs	r7, #100	; 0x64
 1029faa:	fb07 3010 	mls	r0, r7, r0, r3
 1029fae:	b280      	uxth	r0, r0
 1029fb0:	2800      	cmp	r0, #0
 1029fb2:	f240 176d 	movw	r7, #365	; 0x16d
 1029fb6:	bf18      	it	ne
 1029fb8:	f44f 77b7 	movne.w	r7, #366	; 0x16e
 1029fbc:	e004      	b.n	1029fc8 <RTC_APP_vBreak_timestamp+0x10c>
 1029fbe:	f240 106d 	movw	r0, #365	; 0x16d
 1029fc2:	e7d7      	b.n	1029f74 <RTC_APP_vBreak_timestamp+0xb8>
 1029fc4:	f44f 77b7 	mov.w	r7, #366	; 0x16e
 1029fc8:	4826      	ldr	r0, [pc, #152]	; (102a064 <RTC_APP_vBreak_timestamp+0x1a8>)
	
	days -= RTC_APP_bIs_leap_year(year) ? 366 : 365;
 1029fca:	1bd2      	subs	r2, r2, r7
	return (((yr % 400) == 0) || (((yr % 4) == 0) && ((yr % 100) != 0)));
 1029fcc:	fba0 7003 	umull	r7, r0, r0, r3
	time  -= days;								// time = days in this year, starting at 0
 1029fd0:	1ab2      	subs	r2, r6, r2
	return (((yr % 400) == 0) || (((yr % 4) == 0) && ((yr % 100) != 0)));
 1029fd2:	0940      	lsrs	r0, r0, #5
 1029fd4:	2664      	movs	r6, #100	; 0x64
 1029fd6:	fb06 3010 	mls	r0, r6, r0, r3
	rtc->day_of_year = time + 1;
 1029fda:	1c56      	adds	r6, r2, #1
	return (((yr % 400) == 0) || (((yr % 4) == 0) && ((yr % 100) != 0)));
 1029fdc:	fa1f fc80 	uxth.w	ip, r0
	rtc->day_of_year = time + 1;
 1029fe0:	762e      	strb	r6, [r5, #24]
	return (((yr % 400) == 0) || (((yr % 4) == 0) && ((yr % 100) != 0)));
 1029fe2:	f003 0303 	and.w	r3, r3, #3
 1029fe6:	2601      	movs	r6, #1
 1029fe8:	2000      	movs	r0, #0
 1029fea:	e002      	b.n	1029ff2 <RTC_APP_vBreak_timestamp+0x136>
 1029fec:	3601      	adds	r6, #1
 1029fee:	b2f6      	uxtb	r6, r6
 1029ff0:	3001      	adds	r0, #1
	month = 0;
	month_length = 0;
	
	for ( month = 0; month < 12; month++)
	{
		if ( month == 1 )
 1029ff2:	2801      	cmp	r0, #1
 1029ff4:	fa5f fe80 	uxtb.w	lr, r0
 1029ff8:	d017      	beq.n	102a02a <RTC_APP_vBreak_timestamp+0x16e>
		else
		{
			month_length = month_days[month];
		}
		
		if ( time >= month_length )
 1029ffa:	5c27      	ldrb	r7, [r4, r0]
 1029ffc:	4297      	cmp	r7, r2
 1029ffe:	d80f      	bhi.n	102a020 <RTC_APP_vBreak_timestamp+0x164>
	for ( month = 0; month < 12; month++)
 102a000:	2e0c      	cmp	r6, #12
		{
			time -= month_length;
 102a002:	eba2 0207 	sub.w	r2, r2, r7
	for ( month = 0; month < 12; month++)
 102a006:	d1f1      	bne.n	1029fec <RTC_APP_vBreak_timestamp+0x130>
 102a008:	f04f 0e0d 	mov.w	lr, #13
			break;
		}
	}
	
	rtc->htime.month = month + 1;  // Jan = month 1
	rtc->htime.day = time + 1;     // Day of month
 102a00c:	3201      	adds	r2, #1
 102a00e:	73ea      	strb	r2, [r5, #15]
	rtc->htime.month = month + 1;  // Jan = month 1
 102a010:	f885 e00e 	strb.w	lr, [r5, #14]
}
 102a014:	b004      	add	sp, #16
 102a016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return (((yr % 400) == 0) || (((yr % 4) == 0) && ((yr % 100) != 0)));
 102a01a:	f240 176d 	movw	r7, #365	; 0x16d
 102a01e:	e7d3      	b.n	1029fc8 <RTC_APP_vBreak_timestamp+0x10c>
 102a020:	f10e 0e01 	add.w	lr, lr, #1
 102a024:	fa5f fe8e 	uxtb.w	lr, lr
 102a028:	e7f0      	b.n	102a00c <RTC_APP_vBreak_timestamp+0x150>
 102a02a:	b149      	cbz	r1, 102a040 <RTC_APP_vBreak_timestamp+0x184>
 102a02c:	b953      	cbnz	r3, 102a044 <RTC_APP_vBreak_timestamp+0x188>
 102a02e:	f1bc 0f00 	cmp.w	ip, #0
 102a032:	bf0c      	ite	eq
 102a034:	271c      	moveq	r7, #28
 102a036:	271d      	movne	r7, #29
		if ( time >= month_length )
 102a038:	4297      	cmp	r7, r2
 102a03a:	d805      	bhi.n	102a048 <RTC_APP_vBreak_timestamp+0x18c>
			time -= month_length;
 102a03c:	1bd2      	subs	r2, r2, r7
 102a03e:	e7d5      	b.n	1029fec <RTC_APP_vBreak_timestamp+0x130>
	return (((yr % 400) == 0) || (((yr % 4) == 0) && ((yr % 100) != 0)));
 102a040:	271d      	movs	r7, #29
 102a042:	e7f9      	b.n	102a038 <RTC_APP_vBreak_timestamp+0x17c>
 102a044:	271c      	movs	r7, #28
 102a046:	e7f7      	b.n	102a038 <RTC_APP_vBreak_timestamp+0x17c>
		if ( time >= month_length )
 102a048:	f04f 0e02 	mov.w	lr, #2
 102a04c:	e7de      	b.n	102a00c <RTC_APP_vBreak_timestamp+0x150>
 102a04e:	bf00      	nop
 102a050:	c22e4507 	.word	0xc22e4507
 102a054:	88888889 	.word	0x88888889
 102a058:	91a2b3c5 	.word	0x91a2b3c5
 102a05c:	24924925 	.word	0x24924925
 102a060:	aaaaaaab 	.word	0xaaaaaaab
 102a064:	51eb851f 	.word	0x51eb851f
 102a068:	010318d0 	.word	0x010318d0

0102a06c <RTC_APP_v1sec_handler>:
void RTC_APP_v1sec_handler(void) {
 102a06c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rtc.tick_count++;
 102a070:	4c76      	ldr	r4, [pc, #472]	; (102a24c <RTC_APP_v1sec_handler+0x1e0>)
 102a072:	8823      	ldrh	r3, [r4, #0]
 102a074:	3301      	adds	r3, #1
 102a076:	b21b      	sxth	r3, r3
	if ( rtc.tick_count >= RTC_TICKS_PER_SEC) {
 102a078:	2b00      	cmp	r3, #0
 102a07a:	f340 808e 	ble.w	102a19a <RTC_APP_v1sec_handler+0x12e>
		meter.time_running++;
 102a07e:	4d74      	ldr	r5, [pc, #464]	; (102a250 <RTC_APP_v1sec_handler+0x1e4>)
		tou_os.rtc_change_mask |= SECOND_CHANGE_bm;
 102a080:	4974      	ldr	r1, [pc, #464]	; (102a254 <RTC_APP_v1sec_handler+0x1e8>)
		rtc.htime.second++;
 102a082:	7ca3      	ldrb	r3, [r4, #18]
		meter.time_running++;
 102a084:	686e      	ldr	r6, [r5, #4]
		tou_os.rtc_change_mask |= SECOND_CHANGE_bm;
 102a086:	794f      	ldrb	r7, [r1, #5]
		rtc.utc_timestamp++;
 102a088:	6860      	ldr	r0, [r4, #4]
		rtc.timestamp++;
 102a08a:	68a2      	ldr	r2, [r4, #8]
		rtc.htime.second++;
 102a08c:	3301      	adds	r3, #1
		meter.time_running++;
 102a08e:	3601      	adds	r6, #1
		rtc.htime.second++;
 102a090:	b2db      	uxtb	r3, r3
		rtc.utc_timestamp++;
 102a092:	3001      	adds	r0, #1
		rtc.timestamp++;
 102a094:	3201      	adds	r2, #1
		tou_os.rtc_change_mask |= SECOND_CHANGE_bm;
 102a096:	f047 0e01 	orr.w	lr, r7, #1
		meter.time_running++;
 102a09a:	606e      	str	r6, [r5, #4]
		if ( rtc.htime.second >= 60 ) {
 102a09c:	2b3b      	cmp	r3, #59	; 0x3b
		rtc.tick_count = 0;
 102a09e:	f04f 0600 	mov.w	r6, #0
		tou_os.rtc_change_mask |= SECOND_CHANGE_bm;
 102a0a2:	f881 e005 	strb.w	lr, [r1, #5]
		rtc.htime.second++;
 102a0a6:	74a3      	strb	r3, [r4, #18]
		rtc.utc_timestamp++;
 102a0a8:	6060      	str	r0, [r4, #4]
		rtc.timestamp++;
 102a0aa:	60a2      	str	r2, [r4, #8]
		rtc.tick_count = 0;
 102a0ac:	8026      	strh	r6, [r4, #0]
		if ( rtc.htime.second >= 60 ) {
 102a0ae:	d80e      	bhi.n	102a0ce <RTC_APP_v1sec_handler+0x62>
		if (rtc.dst_applied_flag == 1) {
 102a0b0:	7d23      	ldrb	r3, [r4, #20]
 102a0b2:	2b01      	cmp	r3, #1
 102a0b4:	d074      	beq.n	102a1a0 <RTC_APP_v1sec_handler+0x134>
	if ( !meter.system_state.initialiting ) {
 102a0b6:	f895 3020 	ldrb.w	r3, [r5, #32]
 102a0ba:	b933      	cbnz	r3, 102a0ca <RTC_APP_v1sec_handler+0x5e>
		if ( tou_os.rtc_change_mask != 0 ) {
 102a0bc:	4b65      	ldr	r3, [pc, #404]	; (102a254 <RTC_APP_v1sec_handler+0x1e8>)
 102a0be:	795a      	ldrb	r2, [r3, #5]
 102a0c0:	b11a      	cbz	r2, 102a0ca <RTC_APP_v1sec_handler+0x5e>
			if ( tou_os.rtos_task_active ) {
 102a0c2:	791a      	ldrb	r2, [r3, #4]
 102a0c4:	2a00      	cmp	r2, #0
 102a0c6:	f040 808a 	bne.w	102a1de <RTC_APP_v1sec_handler+0x172>
 102a0ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			rtc.htime.minute++;
 102a0ce:	7c63      	ldrb	r3, [r4, #17]
			rtc.htime.second = 0;
 102a0d0:	74a6      	strb	r6, [r4, #18]
			rtc.htime.minute++;
 102a0d2:	3301      	adds	r3, #1
 102a0d4:	b2db      	uxtb	r3, r3
			tou_os.rtc_change_mask |= MINUTE_CHANGE_bm;
 102a0d6:	f047 0e03 	orr.w	lr, r7, #3
			if ( rtc.htime.minute >= 60 ) {
 102a0da:	2b3b      	cmp	r3, #59	; 0x3b
			rtc.htime.minute++;
 102a0dc:	7463      	strb	r3, [r4, #17]
			tou_os.rtc_change_mask |= MINUTE_CHANGE_bm;
 102a0de:	f881 e005 	strb.w	lr, [r1, #5]
			if ( rtc.htime.minute >= 60 ) {
 102a0e2:	d9e5      	bls.n	102a0b0 <RTC_APP_v1sec_handler+0x44>
				rtc.htime.hour++;
 102a0e4:	7c23      	ldrb	r3, [r4, #16]
				rtc.htime.minute = 0;
 102a0e6:	7466      	strb	r6, [r4, #17]
				rtc.htime.hour++;
 102a0e8:	3301      	adds	r3, #1
 102a0ea:	b2db      	uxtb	r3, r3
				tou_os.rtc_change_mask |= HOUR_CHANGE_bm;
 102a0ec:	f047 0e07 	orr.w	lr, r7, #7
				if ( rtc.htime.hour >= 24 ) {
 102a0f0:	2b17      	cmp	r3, #23
				rtc.htime.hour++;
 102a0f2:	7423      	strb	r3, [r4, #16]
				tou_os.rtc_change_mask |= HOUR_CHANGE_bm;
 102a0f4:	f881 e005 	strb.w	lr, [r1, #5]
				if ( rtc.htime.hour >= 24 ) {
 102a0f8:	d9da      	bls.n	102a0b0 <RTC_APP_v1sec_handler+0x44>
					rtc.day_of_week++;
 102a0fa:	7de3      	ldrb	r3, [r4, #23]
					leap_year = RTC_APP_bIs_leap_year(rtc.htime.year);
 102a0fc:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
					rtc.htime.hour = 0;
 102a100:	7426      	strb	r6, [r4, #16]
					rtc.day_of_week++;
 102a102:	3301      	adds	r3, #1
 102a104:	b2db      	uxtb	r3, r3
					if ( rtc.day_of_week > 6 ) {
 102a106:	2b06      	cmp	r3, #6
					rtc.day_of_week++;
 102a108:	bf98      	it	ls
 102a10a:	75e3      	strbls	r3, [r4, #23]
	return (((yr % 400) == 0) || (((yr % 4) == 0) && ((yr % 100) != 0)));
 102a10c:	4b52      	ldr	r3, [pc, #328]	; (102a258 <RTC_APP_v1sec_handler+0x1ec>)
						rtc.day_of_week = 0;
 102a10e:	bf88      	it	hi
 102a110:	75e6      	strbhi	r6, [r4, #23]
	return (((yr % 400) == 0) || (((yr % 4) == 0) && ((yr % 100) != 0)));
 102a112:	fba3 c30e 	umull	ip, r3, r3, lr
					rtc.htime.day++;
 102a116:	7be6      	ldrb	r6, [r4, #15]
					rtc.day_of_year++;
 102a118:	f894 9018 	ldrb.w	r9, [r4, #24]
	return (((yr % 400) == 0) || (((yr % 4) == 0) && ((yr % 100) != 0)));
 102a11c:	f44f 78c8 	mov.w	r8, #400	; 0x190
 102a120:	ea4f 1cd3 	mov.w	ip, r3, lsr #7
 102a124:	fb08 ec1c 	mls	ip, r8, ip, lr
					rtc.htime.day++;
 102a128:	3601      	adds	r6, #1
 102a12a:	b2f6      	uxtb	r6, r6
					rtc.day_of_year++;
 102a12c:	f109 0901 	add.w	r9, r9, #1
					tou_os.rtc_change_mask |= DAY_CHANGE_bm;
 102a130:	f047 080f 	orr.w	r8, r7, #15
	return (((yr % 400) == 0) || (((yr % 4) == 0) && ((yr % 100) != 0)));
 102a134:	fa1f fc8c 	uxth.w	ip, ip
					rtc.htime.day++;
 102a138:	73e6      	strb	r6, [r4, #15]
					rtc.day_of_year++;
 102a13a:	f884 9018 	strb.w	r9, [r4, #24]
					tou_os.rtc_change_mask |= DAY_CHANGE_bm;
 102a13e:	f881 8005 	strb.w	r8, [r1, #5]
	return (((yr % 400) == 0) || (((yr % 4) == 0) && ((yr % 100) != 0)));
 102a142:	f1bc 0f00 	cmp.w	ip, #0
 102a146:	d167      	bne.n	102a218 <RTC_APP_v1sec_handler+0x1ac>
 102a148:	2301      	movs	r3, #1
					if ( rtc.htime.day > month_days[leap_year][rtc.htime.month] ) {
 102a14a:	ea4f 0843 	mov.w	r8, r3, lsl #1
 102a14e:	f8df c118 	ldr.w	ip, [pc, #280]	; 102a268 <RTC_APP_v1sec_handler+0x1fc>
 102a152:	4498      	add	r8, r3
 102a154:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 102a158:	4463      	add	r3, ip
 102a15a:	f894 c00e 	ldrb.w	ip, [r4, #14]
 102a15e:	f813 300c 	ldrb.w	r3, [r3, ip]
 102a162:	42b3      	cmp	r3, r6
 102a164:	d2a4      	bcs.n	102a0b0 <RTC_APP_v1sec_handler+0x44>
						rtc.htime.month++;
 102a166:	f10c 0c01 	add.w	ip, ip, #1
 102a16a:	fa5f fc8c 	uxtb.w	ip, ip
						rtc.htime.day = 1;
 102a16e:	2601      	movs	r6, #1
						tou_os.rtc_change_mask |= MONTH_CHANGE_bm;
 102a170:	f047 031f 	orr.w	r3, r7, #31
						if ( rtc.htime.month > 12 ) {
 102a174:	f1bc 0f0c 	cmp.w	ip, #12
						rtc.htime.month++;
 102a178:	f884 c00e 	strb.w	ip, [r4, #14]
						rtc.htime.day = 1;
 102a17c:	73e6      	strb	r6, [r4, #15]
						tou_os.rtc_change_mask |= MONTH_CHANGE_bm;
 102a17e:	714b      	strb	r3, [r1, #5]
						if ( rtc.htime.month > 12 ) {
 102a180:	d996      	bls.n	102a0b0 <RTC_APP_v1sec_handler+0x44>
							rtc.is_dst = 0;
 102a182:	2300      	movs	r3, #0
							rtc.htime.year++;
 102a184:	44b6      	add	lr, r6
							tou_os.rtc_change_mask |= YEAR_CHANGE_bm;
 102a186:	f047 073f 	orr.w	r7, r7, #63	; 0x3f
							rtc.htime.year++;
 102a18a:	f8a4 e00c 	strh.w	lr, [r4, #12]
							tou_os.rtc_change_mask |= YEAR_CHANGE_bm;
 102a18e:	714f      	strb	r7, [r1, #5]
							rtc.day_of_year = 1;
 102a190:	7626      	strb	r6, [r4, #24]
							rtc.htime.month = 1;
 102a192:	73a6      	strb	r6, [r4, #14]
							rtc.is_dst = 0;
 102a194:	7563      	strb	r3, [r4, #21]
							rtc.dst_step = 0;
 102a196:	75a3      	strb	r3, [r4, #22]
 102a198:	e78a      	b.n	102a0b0 <RTC_APP_v1sec_handler+0x44>
	rtc.tick_count++;
 102a19a:	8023      	strh	r3, [r4, #0]
 102a19c:	4d2c      	ldr	r5, [pc, #176]	; (102a250 <RTC_APP_v1sec_handler+0x1e4>)
 102a19e:	e78a      	b.n	102a0b6 <RTC_APP_v1sec_handler+0x4a>
			if ( (rtc.timestamp >= rtc.dst_to_effective) && (rtc.timestamp < rtc.dst_from_effective) && (rtc.dst_step < 2) ) {
 102a1a0:	69e6      	ldr	r6, [r4, #28]
 102a1a2:	42b2      	cmp	r2, r6
 102a1a4:	d225      	bcs.n	102a1f2 <RTC_APP_v1sec_handler+0x186>
				if ( rtc.is_dst == 1 ) {
 102a1a6:	7d63      	ldrb	r3, [r4, #21]
 102a1a8:	2b01      	cmp	r3, #1
 102a1aa:	d030      	beq.n	102a20e <RTC_APP_v1sec_handler+0x1a2>
				rtc.is_dst = 0;
 102a1ac:	2300      	movs	r3, #0
 102a1ae:	7563      	strb	r3, [r4, #21]
			if ( (rtc.is_dst == 1) && (rtc.dst_step == 0) ) {
 102a1b0:	6963      	ldr	r3, [r4, #20]
 102a1b2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 102a1b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 102a1ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 102a1be:	d038      	beq.n	102a232 <RTC_APP_v1sec_handler+0x1c6>
			else if ( (rtc.is_dst == 0) && (rtc.dst_step == 1) ) {
 102a1c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 102a1c4:	f47f af77 	bne.w	102a0b6 <RTC_APP_v1sec_handler+0x4a>
				rtc.timestamp -= rtc.dst_time_amount;
 102a1c8:	68a3      	ldr	r3, [r4, #8]
 102a1ca:	6a61      	ldr	r1, [r4, #36]	; 0x24
				RTC_APP_vBreak_timestamp(&rtc, rtc.timestamp);
 102a1cc:	481f      	ldr	r0, [pc, #124]	; (102a24c <RTC_APP_v1sec_handler+0x1e0>)
 102a1ce:	4a23      	ldr	r2, [pc, #140]	; (102a25c <RTC_APP_v1sec_handler+0x1f0>)
				rtc.timestamp -= rtc.dst_time_amount;
 102a1d0:	1a5b      	subs	r3, r3, r1
				RTC_APP_vBreak_timestamp(&rtc, rtc.timestamp);
 102a1d2:	4619      	mov	r1, r3
				rtc.timestamp -= rtc.dst_time_amount;
 102a1d4:	60a3      	str	r3, [r4, #8]
				RTC_APP_vBreak_timestamp(&rtc, rtc.timestamp);
 102a1d6:	4790      	blx	r2
				rtc.dst_step = 2;
 102a1d8:	2302      	movs	r3, #2
 102a1da:	75a3      	strb	r3, [r4, #22]
 102a1dc:	e76b      	b.n	102a0b6 <RTC_APP_v1sec_handler+0x4a>
				xYieldRequired = xTaskResumeFromISR(tou_os.task_id);
 102a1de:	6818      	ldr	r0, [r3, #0]
 102a1e0:	4b1f      	ldr	r3, [pc, #124]	; (102a260 <RTC_APP_v1sec_handler+0x1f4>)
 102a1e2:	4798      	blx	r3
				if ( xYieldRequired == pdTRUE ){
 102a1e4:	2801      	cmp	r0, #1
 102a1e6:	f47f af70 	bne.w	102a0ca <RTC_APP_v1sec_handler+0x5e>
					taskYIELD();
 102a1ea:	4b1e      	ldr	r3, [pc, #120]	; (102a264 <RTC_APP_v1sec_handler+0x1f8>)
}
 102a1ec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
					taskYIELD();
 102a1f0:	4718      	bx	r3
			if ( (rtc.timestamp >= rtc.dst_to_effective) && (rtc.timestamp < rtc.dst_from_effective) && (rtc.dst_step < 2) ) {
 102a1f2:	6a26      	ldr	r6, [r4, #32]
 102a1f4:	42b2      	cmp	r2, r6
 102a1f6:	d2d6      	bcs.n	102a1a6 <RTC_APP_v1sec_handler+0x13a>
 102a1f8:	7da2      	ldrb	r2, [r4, #22]
 102a1fa:	2a01      	cmp	r2, #1
 102a1fc:	d8d3      	bhi.n	102a1a6 <RTC_APP_v1sec_handler+0x13a>
				if ( rtc.is_dst == 0 ) {
 102a1fe:	7d62      	ldrb	r2, [r4, #21]
 102a200:	b912      	cbnz	r2, 102a208 <RTC_APP_v1sec_handler+0x19c>
					tou_os.register_dst_on = true;
 102a202:	718b      	strb	r3, [r1, #6]
					tou_os.user = END_DEVICE;
 102a204:	730a      	strb	r2, [r1, #12]
					tou_os.event_timestamp = rtc.utc_timestamp;
 102a206:	6088      	str	r0, [r1, #8]
				rtc.is_dst = 1;
 102a208:	2301      	movs	r3, #1
 102a20a:	7563      	strb	r3, [r4, #21]
 102a20c:	e7d0      	b.n	102a1b0 <RTC_APP_v1sec_handler+0x144>
					tou_os.user = END_DEVICE;
 102a20e:	2200      	movs	r2, #0
					tou_os.register_dst_off = true;
 102a210:	71cb      	strb	r3, [r1, #7]
					tou_os.event_timestamp = rtc.utc_timestamp;
 102a212:	6088      	str	r0, [r1, #8]
					tou_os.user = END_DEVICE;
 102a214:	730a      	strb	r2, [r1, #12]
 102a216:	e7c9      	b.n	102a1ac <RTC_APP_v1sec_handler+0x140>
	return (((yr % 400) == 0) || (((yr % 4) == 0) && ((yr % 100) != 0)));
 102a218:	f01e 0f03 	tst.w	lr, #3
 102a21c:	d114      	bne.n	102a248 <RTC_APP_v1sec_handler+0x1dc>
 102a21e:	095b      	lsrs	r3, r3, #5
 102a220:	f04f 0c64 	mov.w	ip, #100	; 0x64
 102a224:	fb0c e313 	mls	r3, ip, r3, lr
 102a228:	b29b      	uxth	r3, r3
 102a22a:	3300      	adds	r3, #0
 102a22c:	bf18      	it	ne
 102a22e:	2301      	movne	r3, #1
 102a230:	e78b      	b.n	102a14a <RTC_APP_v1sec_handler+0xde>
				rtc.timestamp += rtc.dst_time_amount;
 102a232:	68a3      	ldr	r3, [r4, #8]
 102a234:	6a61      	ldr	r1, [r4, #36]	; 0x24
				RTC_APP_vBreak_timestamp(&rtc, rtc.timestamp);
 102a236:	4805      	ldr	r0, [pc, #20]	; (102a24c <RTC_APP_v1sec_handler+0x1e0>)
 102a238:	4a08      	ldr	r2, [pc, #32]	; (102a25c <RTC_APP_v1sec_handler+0x1f0>)
				rtc.timestamp += rtc.dst_time_amount;
 102a23a:	440b      	add	r3, r1
				RTC_APP_vBreak_timestamp(&rtc, rtc.timestamp);
 102a23c:	4619      	mov	r1, r3
				rtc.timestamp += rtc.dst_time_amount;
 102a23e:	60a3      	str	r3, [r4, #8]
				RTC_APP_vBreak_timestamp(&rtc, rtc.timestamp);
 102a240:	4790      	blx	r2
				rtc.dst_step = 1;
 102a242:	2301      	movs	r3, #1
 102a244:	75a3      	strb	r3, [r4, #22]
 102a246:	e736      	b.n	102a0b6 <RTC_APP_v1sec_handler+0x4a>
	return (((yr % 400) == 0) || (((yr % 4) == 0) && ((yr % 100) != 0)));
 102a248:	2300      	movs	r3, #0
 102a24a:	e77e      	b.n	102a14a <RTC_APP_v1sec_handler+0xde>
 102a24c:	20017160 	.word	0x20017160
 102a250:	20016c2c 	.word	0x20016c2c
 102a254:	200172b4 	.word	0x200172b4
 102a258:	51eb851f 	.word	0x51eb851f
 102a25c:	01029ebd 	.word	0x01029ebd
 102a260:	0102eb75 	.word	0x0102eb75
 102a264:	0102ddbd 	.word	0x0102ddbd
 102a268:	010318dc 	.word	0x010318dc

0102a26c <RTC_APP_ulMake_timestamp>:
 * \retval
 *
 ******************************************************************************
 */
uint32_t RTC_APP_ulMake_timestamp(HUMAN_TIME_TYPE *time)
{	
 102a26c:	b5f0      	push	{r4, r5, r6, r7, lr}
	int i;
	uint32_t seconds;
	uint8_t monthDays[12] = {31,28,31,30,31,30,31,31,30,31,30,31};
 102a26e:	4b3a      	ldr	r3, [pc, #232]	; (102a358 <RTC_APP_ulMake_timestamp+0xec>)

	// Seconds from 1970 until 1 jan 00:00:00
	seconds = (time->year - 1970)*(SECONDS_PER_DAY * 365);
 102a270:	8806      	ldrh	r6, [r0, #0]
	uint8_t monthDays[12] = {31,28,31,30,31,30,31,31,30,31,30,31};
 102a272:	6859      	ldr	r1, [r3, #4]
 102a274:	689a      	ldr	r2, [r3, #8]
	seconds = (time->year - 1970)*(SECONDS_PER_DAY * 365);
 102a276:	4f39      	ldr	r7, [pc, #228]	; (102a35c <RTC_APP_ulMake_timestamp+0xf0>)
{	
 102a278:	b085      	sub	sp, #20
 102a27a:	4605      	mov	r5, r0
	
	for ( i = 1970; i < time->year; i++ )
 102a27c:	f240 7eb2 	movw	lr, #1970	; 0x7b2
	uint8_t monthDays[12] = {31,28,31,30,31,30,31,31,30,31,30,31};
 102a280:	6818      	ldr	r0, [r3, #0]
	seconds = (time->year - 1970)*(SECONDS_PER_DAY * 365);
 102a282:	f2a6 74b2 	subw	r4, r6, #1970	; 0x7b2
	uint8_t monthDays[12] = {31,28,31,30,31,30,31,31,30,31,30,31};
 102a286:	ab01      	add	r3, sp, #4
	for ( i = 1970; i < time->year; i++ )
 102a288:	4576      	cmp	r6, lr
	seconds = (time->year - 1970)*(SECONDS_PER_DAY * 365);
 102a28a:	fb07 f404 	mul.w	r4, r7, r4
	uint8_t monthDays[12] = {31,28,31,30,31,30,31,31,30,31,30,31};
 102a28e:	c307      	stmia	r3!, {r0, r1, r2}
	for ( i = 1970; i < time->year; i++ )
 102a290:	dd1d      	ble.n	102a2ce <RTC_APP_ulMake_timestamp+0x62>
	return (((yr % 400) == 0) || (((yr % 4) == 0) && ((yr % 100) != 0)));
 102a292:	4f33      	ldr	r7, [pc, #204]	; (102a360 <RTC_APP_ulMake_timestamp+0xf4>)
	for ( i = 1970; i < time->year; i++ )
 102a294:	4671      	mov	r1, lr
	return (((yr % 400) == 0) || (((yr % 4) == 0) && ((yr % 100) != 0)));
 102a296:	f44f 70c8 	mov.w	r0, #400	; 0x190
 102a29a:	f04f 0e64 	mov.w	lr, #100	; 0x64
	{
		if ( RTC_APP_bIs_leap_year(i) )
 102a29e:	fa1f fc81 	uxth.w	ip, r1
	return (((yr % 400) == 0) || (((yr % 4) == 0) && ((yr % 100) != 0)));
 102a2a2:	fba7 320c 	umull	r3, r2, r7, ip
 102a2a6:	09d3      	lsrs	r3, r2, #7
 102a2a8:	fb00 c313 	mls	r3, r0, r3, ip
 102a2ac:	b29b      	uxth	r3, r3
 102a2ae:	b13b      	cbz	r3, 102a2c0 <RTC_APP_ulMake_timestamp+0x54>
 102a2b0:	0952      	lsrs	r2, r2, #5
 102a2b2:	fb0e c212 	mls	r2, lr, r2, ip
 102a2b6:	f01c 0f03 	tst.w	ip, #3
 102a2ba:	b292      	uxth	r2, r2
 102a2bc:	d104      	bne.n	102a2c8 <RTC_APP_ulMake_timestamp+0x5c>
 102a2be:	b11a      	cbz	r2, 102a2c8 <RTC_APP_ulMake_timestamp+0x5c>
		{
			seconds +=  SECONDS_PER_DAY;   // Add additional days for leap years
 102a2c0:	f504 34a8 	add.w	r4, r4, #86016	; 0x15000
 102a2c4:	f504 74c0 	add.w	r4, r4, #384	; 0x180
	for ( i = 1970; i < time->year; i++ )
 102a2c8:	3101      	adds	r1, #1
 102a2ca:	428e      	cmp	r6, r1
 102a2cc:	d1e7      	bne.n	102a29e <RTC_APP_ulMake_timestamp+0x32>
		}
	}
	
	// Add days for this year, months start from 1
	for ( i = 1; i < time->month; i++)
 102a2ce:	78a9      	ldrb	r1, [r5, #2]
 102a2d0:	2901      	cmp	r1, #1
 102a2d2:	dd2d      	ble.n	102a330 <RTC_APP_ulMake_timestamp+0xc4>
	return (((yr % 400) == 0) || (((yr % 4) == 0) && ((yr % 100) != 0)));
 102a2d4:	4b22      	ldr	r3, [pc, #136]	; (102a360 <RTC_APP_ulMake_timestamp+0xf4>)
		{
			seconds += SECONDS_PER_DAY * 29;
		}
		else
		{
			seconds += SECONDS_PER_DAY * monthDays[i-1];
 102a2d6:	4f23      	ldr	r7, [pc, #140]	; (102a364 <RTC_APP_ulMake_timestamp+0xf8>)
	return (((yr % 400) == 0) || (((yr % 4) == 0) && ((yr % 100) != 0)));
 102a2d8:	fba3 2306 	umull	r2, r3, r3, r6
 102a2dc:	ea4f 1ed3 	mov.w	lr, r3, lsr #7
 102a2e0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 102a2e4:	095b      	lsrs	r3, r3, #5
 102a2e6:	2264      	movs	r2, #100	; 0x64
 102a2e8:	fb00 6e1e 	mls	lr, r0, lr, r6
 102a2ec:	fb02 6313 	mls	r3, r2, r3, r6
 102a2f0:	b298      	uxth	r0, r3
 102a2f2:	fa1f fe8e 	uxth.w	lr, lr
 102a2f6:	f006 0603 	and.w	r6, r6, #3
 102a2fa:	2301      	movs	r3, #1
 102a2fc:	e006      	b.n	102a30c <RTC_APP_ulMake_timestamp+0xa0>
			seconds += SECONDS_PER_DAY * monthDays[i-1];
 102a2fe:	f812 2c01 	ldrb.w	r2, [r2, #-1]
	for ( i = 1; i < time->month; i++)
 102a302:	3301      	adds	r3, #1
 102a304:	4299      	cmp	r1, r3
			seconds += SECONDS_PER_DAY * monthDays[i-1];
 102a306:	fb07 4402 	mla	r4, r7, r2, r4
	for ( i = 1; i < time->month; i++)
 102a30a:	d011      	beq.n	102a330 <RTC_APP_ulMake_timestamp+0xc4>
			seconds += SECONDS_PER_DAY * monthDays[i-1];
 102a30c:	aa01      	add	r2, sp, #4
		if ( (i == 2) && RTC_APP_bIs_leap_year(time->year) )
 102a30e:	2b02      	cmp	r3, #2
			seconds += SECONDS_PER_DAY * monthDays[i-1];
 102a310:	441a      	add	r2, r3
		if ( (i == 2) && RTC_APP_bIs_leap_year(time->year) )
 102a312:	d1f4      	bne.n	102a2fe <RTC_APP_ulMake_timestamp+0x92>
	return (((yr % 400) == 0) || (((yr % 4) == 0) && ((yr % 100) != 0)));
 102a314:	f1be 0f00 	cmp.w	lr, #0
 102a318:	d003      	beq.n	102a322 <RTC_APP_ulMake_timestamp+0xb6>
 102a31a:	2e00      	cmp	r6, #0
 102a31c:	d1ef      	bne.n	102a2fe <RTC_APP_ulMake_timestamp+0x92>
 102a31e:	2800      	cmp	r0, #0
 102a320:	d0ed      	beq.n	102a2fe <RTC_APP_ulMake_timestamp+0x92>
	for ( i = 1; i < time->month; i++)
 102a322:	3301      	adds	r3, #1
			seconds += SECONDS_PER_DAY * 29;
 102a324:	f504 1418 	add.w	r4, r4, #2490368	; 0x260000
	for ( i = 1; i < time->month; i++)
 102a328:	4299      	cmp	r1, r3
			seconds += SECONDS_PER_DAY * 29;
 102a32a:	f504 546e 	add.w	r4, r4, #15232	; 0x3b80
	for ( i = 1; i < time->month; i++)
 102a32e:	d1ed      	bne.n	102a30c <RTC_APP_ulMake_timestamp+0xa0>
		}
	}
	
	seconds += (time->day - 1) * SECONDS_PER_DAY;
	seconds += time->hour * SECONDS_PER_HOUR;
	seconds += time->minute * SECONDS_PER_MINUTE;
 102a330:	796b      	ldrb	r3, [r5, #5]
	seconds += time->hour * SECONDS_PER_HOUR;
 102a332:	792a      	ldrb	r2, [r5, #4]
	seconds += time->second;
 102a334:	79ae      	ldrb	r6, [r5, #6]
	seconds += (time->day - 1) * SECONDS_PER_DAY;
 102a336:	78e8      	ldrb	r0, [r5, #3]
 102a338:	490a      	ldr	r1, [pc, #40]	; (102a364 <RTC_APP_ulMake_timestamp+0xf8>)
	seconds += time->minute * SECONDS_PER_MINUTE;
 102a33a:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
	seconds += time->hour * SECONDS_PER_HOUR;
 102a33e:	f44f 6561 	mov.w	r5, #3600	; 0xe10
	seconds += time->minute * SECONDS_PER_MINUTE;
 102a342:	009b      	lsls	r3, r3, #2
	seconds += time->second;
 102a344:	fb05 3302 	mla	r3, r5, r2, r3
 102a348:	4433      	add	r3, r6
	seconds += (time->day - 1) * SECONDS_PER_DAY;
 102a34a:	3801      	subs	r0, #1
	seconds += time->second;
 102a34c:	fb01 3000 	mla	r0, r1, r0, r3
 102a350:	4420      	add	r0, r4
	
	return seconds;
}
 102a352:	b005      	add	sp, #20
 102a354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 102a356:	bf00      	nop
 102a358:	010318d0 	.word	0x010318d0
 102a35c:	01e13380 	.word	0x01e13380
 102a360:	51eb851f 	.word	0x51eb851f
 102a364:	00015180 	.word	0x00015180

0102a368 <RTC_APP_vLoad_tm_zn_dst>:
 * \retval
 *
 ******************************************************************************
 */
void RTC_APP_vLoad_tm_zn_dst(RTC_TYPE* rtc)
{
 102a368:	b530      	push	{r4, r5, lr}
 102a36a:	b083      	sub	sp, #12
 102a36c:	4604      	mov	r4, r0
	uint8_t dst_amount;
	int16_t tm_zn_offset;
		
	EEPROM_reader( ST_53_DST_TIME_AMT_ADDR, &dst_amount, sizeof(dst_amount));
 102a36e:	f10d 0105 	add.w	r1, sp, #5
 102a372:	4d0c      	ldr	r5, [pc, #48]	; (102a3a4 <RTC_APP_vLoad_tm_zn_dst+0x3c>)
 102a374:	2201      	movs	r2, #1
 102a376:	f44f 6028 	mov.w	r0, #2688	; 0xa80
 102a37a:	47a8      	blx	r5
	EEPROM_reader( ST_53_TIME_ZONE_OFFSET_ADDR, &tm_zn_offset, sizeof(tm_zn_offset));
 102a37c:	2202      	movs	r2, #2
 102a37e:	f10d 0106 	add.w	r1, sp, #6
 102a382:	f640 2081 	movw	r0, #2689	; 0xa81
 102a386:	47a8      	blx	r5
	
	rtc->dst_time_amount = ((uint32_t)dst_amount)*SECONDS_PER_MINUTE;
 102a388:	f89d 2005 	ldrb.w	r2, [sp, #5]
	rtc->time_zone_offset = (uint32_t)tm_zn_offset;
	if ( tm_zn_offset < 0 )
	{
		rtc->time_zone_offset |= 0xFFFF0000;
	} 
	rtc->time_zone_offset *= SECONDS_PER_MINUTE;
 102a38c:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
	rtc->dst_time_amount = ((uint32_t)dst_amount)*SECONDS_PER_MINUTE;
 102a390:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
	rtc->time_zone_offset *= SECONDS_PER_MINUTE;
 102a394:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
	rtc->dst_time_amount = ((uint32_t)dst_amount)*SECONDS_PER_MINUTE;
 102a398:	0092      	lsls	r2, r2, #2
	rtc->time_zone_offset *= SECONDS_PER_MINUTE;
 102a39a:	009b      	lsls	r3, r3, #2
	rtc->dst_time_amount = ((uint32_t)dst_amount)*SECONDS_PER_MINUTE;
 102a39c:	6262      	str	r2, [r4, #36]	; 0x24
	rtc->time_zone_offset *= SECONDS_PER_MINUTE;
 102a39e:	62a3      	str	r3, [r4, #40]	; 0x28
}
 102a3a0:	b003      	add	sp, #12
 102a3a2:	bd30      	pop	{r4, r5, pc}
 102a3a4:	01017511 	.word	0x01017511

0102a3a8 <RTC_APP_vRecover_rtc>:
void RTC_APP_vRecover_rtc(void) {
 102a3a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 102a3ac:	b096      	sub	sp, #88	; 0x58
	uint32_t year = 2000, month = 2, day = 1, day_of_week = 0, hour = 0, minute = 0, second = 0;
 102a3ae:	2300      	movs	r3, #0
	memset( &rtc_temp, 0, sizeof(rtc_temp) );
 102a3b0:	4619      	mov	r1, r3
	uint32_t year = 2000, month = 2, day = 1, day_of_week = 0, hour = 0, minute = 0, second = 0;
 102a3b2:	2502      	movs	r5, #2
 102a3b4:	2401      	movs	r4, #1
	memset( &rtc_temp, 0, sizeof(rtc_temp) );
 102a3b6:	222c      	movs	r2, #44	; 0x2c
	uint32_t year = 2000, month = 2, day = 1, day_of_week = 0, hour = 0, minute = 0, second = 0;
 102a3b8:	9307      	str	r3, [sp, #28]
 102a3ba:	9308      	str	r3, [sp, #32]
 102a3bc:	9309      	str	r3, [sp, #36]	; 0x24
 102a3be:	930a      	str	r3, [sp, #40]	; 0x28
	memset( &rtc_temp, 0, sizeof(rtc_temp) );
 102a3c0:	a80b      	add	r0, sp, #44	; 0x2c
 102a3c2:	4b6a      	ldr	r3, [pc, #424]	; (102a56c <RTC_APP_vRecover_rtc+0x1c4>)
	uint32_t year = 2000, month = 2, day = 1, day_of_week = 0, hour = 0, minute = 0, second = 0;
 102a3c4:	9505      	str	r5, [sp, #20]
 102a3c6:	f44f 66fa 	mov.w	r6, #2000	; 0x7d0
 102a3ca:	9406      	str	r4, [sp, #24]
 102a3cc:	9604      	str	r6, [sp, #16]
	memset( &rtc_temp, 0, sizeof(rtc_temp) );
 102a3ce:	4798      	blx	r3
			clock_ok = RX8900_APP_bRead_date_time(&second, &minute, &hour, &day_of_week, &day, &month, &year);		
 102a3d0:	a904      	add	r1, sp, #16
 102a3d2:	aa05      	add	r2, sp, #20
 102a3d4:	ab06      	add	r3, sp, #24
 102a3d6:	9102      	str	r1, [sp, #8]
 102a3d8:	9201      	str	r2, [sp, #4]
 102a3da:	9300      	str	r3, [sp, #0]
 102a3dc:	aa08      	add	r2, sp, #32
 102a3de:	ab07      	add	r3, sp, #28
 102a3e0:	a909      	add	r1, sp, #36	; 0x24
 102a3e2:	4c63      	ldr	r4, [pc, #396]	; (102a570 <RTC_APP_vRecover_rtc+0x1c8>)
 102a3e4:	a80a      	add	r0, sp, #40	; 0x28
 102a3e6:	47a0      	blx	r4
 102a3e8:	4607      	mov	r7, r0
	rtc_temp.day_of_week = day_of_week;
 102a3ea:	a805      	add	r0, sp, #20
 102a3ec:	c829      	ldmia	r0, {r0, r3, r5}
	rtc_temp.htime.year = year;
 102a3ee:	9a04      	ldr	r2, [sp, #16]
	rtc_temp.htime.minute = minute;
 102a3f0:	9909      	ldr	r1, [sp, #36]	; 0x24
	rtc_temp.htime.year = year;
 102a3f2:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
	rtc_temp.htime.month = month;
 102a3f6:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
	rtc_temp.htime.second = second;
 102a3fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	rtc_temp.htime.day = day;
 102a3fc:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
	rtc_temp.htime.hour = hour;
 102a400:	9c08      	ldr	r4, [sp, #32]
	rtc_temp.utc_timestamp = RTC_APP_ulMake_timestamp(&rtc_temp.htime);
 102a402:	4b5c      	ldr	r3, [pc, #368]	; (102a574 <RTC_APP_vRecover_rtc+0x1cc>)
	rtc_temp.day_of_week = day_of_week;
 102a404:	f88d 5043 	strb.w	r5, [sp, #67]	; 0x43
	rtc_temp.utc_timestamp = RTC_APP_ulMake_timestamp(&rtc_temp.htime);
 102a408:	a80e      	add	r0, sp, #56	; 0x38
	rtc_temp.htime.hour = hour;
 102a40a:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
	rtc_temp.htime.minute = minute;
 102a40e:	f88d 103d 	strb.w	r1, [sp, #61]	; 0x3d
	rtc_temp.htime.second = second;
 102a412:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
	rtc_temp.utc_timestamp = RTC_APP_ulMake_timestamp(&rtc_temp.htime);
 102a416:	4798      	blx	r3
	if ( meter.system_state.initialiting || ( (!meter.system_state.initialiting) && clock_ok ) ) {
 102a418:	4b57      	ldr	r3, [pc, #348]	; (102a578 <RTC_APP_vRecover_rtc+0x1d0>)
	rtc_temp.utc_timestamp = RTC_APP_ulMake_timestamp(&rtc_temp.htime);
 102a41a:	900c      	str	r0, [sp, #48]	; 0x30
	if ( meter.system_state.initialiting || ( (!meter.system_state.initialiting) && clock_ok ) ) {
 102a41c:	f893 3020 	ldrb.w	r3, [r3, #32]
 102a420:	bb63      	cbnz	r3, 102a47c <RTC_APP_vRecover_rtc+0xd4>
 102a422:	bb5f      	cbnz	r7, 102a47c <RTC_APP_vRecover_rtc+0xd4>
 102a424:	f8df 8174 	ldr.w	r8, [pc, #372]	; 102a59c <RTC_APP_vRecover_rtc+0x1f4>
 102a428:	4e54      	ldr	r6, [pc, #336]	; (102a57c <RTC_APP_vRecover_rtc+0x1d4>)
 102a42a:	4c55      	ldr	r4, [pc, #340]	; (102a580 <RTC_APP_vRecover_rtc+0x1d8>)
		EVNT_APP_vRegister_event(CLOCK_ERROR_DETECTED, 0, true, END_DEVICE, rtc.utc_timestamp);
 102a42c:	6873      	ldr	r3, [r6, #4]
 102a42e:	9300      	str	r3, [sp, #0]
 102a430:	2300      	movs	r3, #0
 102a432:	4619      	mov	r1, r3
 102a434:	2201      	movs	r2, #1
 102a436:	202a      	movs	r0, #42	; 0x2a
 102a438:	4d52      	ldr	r5, [pc, #328]	; (102a584 <RTC_APP_vRecover_rtc+0x1dc>)
 102a43a:	47a8      	blx	r5
		RTC_APP_vBreak_timestamp(&rtc_temp, rtc.utc_timestamp);
 102a43c:	a80b      	add	r0, sp, #44	; 0x2c
 102a43e:	6871      	ldr	r1, [r6, #4]
 102a440:	47c0      	blx	r8
				RX8900_APP_bWrite_date_time(rtc_temp.htime.second, rtc_temp.htime.minute, rtc_temp.htime.hour, 
 102a442:	f89d 503b 	ldrb.w	r5, [sp, #59]	; 0x3b
 102a446:	f8bd e038 	ldrh.w	lr, [sp, #56]	; 0x38
 102a44a:	f89d 703a 	ldrb.w	r7, [sp, #58]	; 0x3a
 102a44e:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 102a452:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 102a456:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 102a45a:	f89d 003e 	ldrb.w	r0, [sp, #62]	; 0x3e
 102a45e:	e88d 40a0 	stmia.w	sp, {r5, r7, lr}
 102a462:	4d49      	ldr	r5, [pc, #292]	; (102a588 <RTC_APP_vRecover_rtc+0x1e0>)
 102a464:	47a8      	blx	r5
	tou_os.rtc_change_mask = (SECOND_CHANGE_bm | MINUTE_CHANGE_bm | HOUR_CHANGE_bm | DAY_CHANGE_bm | MONTH_CHANGE_bm | YEAR_CHANGE_bm);
 102a466:	223f      	movs	r2, #63	; 0x3f
	TOU_APP_vTask();
 102a468:	4b48      	ldr	r3, [pc, #288]	; (102a58c <RTC_APP_vRecover_rtc+0x1e4>)
	tou_os.rtc_change_mask = (SECOND_CHANGE_bm | MINUTE_CHANGE_bm | HOUR_CHANGE_bm | DAY_CHANGE_bm | MONTH_CHANGE_bm | YEAR_CHANGE_bm);
 102a46a:	7162      	strb	r2, [r4, #5]
	TOU_APP_vTask();
 102a46c:	4798      	blx	r3
	LP_APP_vSynchronize_clock(rtc_backup.utc_timestamp, rtc.utc_timestamp);
 102a46e:	6871      	ldr	r1, [r6, #4]
 102a470:	4b47      	ldr	r3, [pc, #284]	; (102a590 <RTC_APP_vRecover_rtc+0x1e8>)
 102a472:	4648      	mov	r0, r9
 102a474:	4798      	blx	r3
}
 102a476:	b016      	add	sp, #88	; 0x58
 102a478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		RTC_APP_vLoad_tm_zn_dst(&rtc_temp);
 102a47c:	a80b      	add	r0, sp, #44	; 0x2c
 102a47e:	4b45      	ldr	r3, [pc, #276]	; (102a594 <RTC_APP_vRecover_rtc+0x1ec>)
		RTC_APP_vBreak_timestamp(&rtc_temp, rtc_temp.timestamp);
 102a480:	f8df 8118 	ldr.w	r8, [pc, #280]	; 102a59c <RTC_APP_vRecover_rtc+0x1f4>
		RTC_APP_vLoad_tm_zn_dst(&rtc_temp);
 102a484:	4798      	blx	r3
		rtc_temp.timestamp = rtc_temp.utc_timestamp + rtc_temp.time_zone_offset;
 102a486:	9a15      	ldr	r2, [sp, #84]	; 0x54
 102a488:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 102a48a:	4413      	add	r3, r2
		RTC_APP_vBreak_timestamp(&rtc_temp, rtc_temp.timestamp);
 102a48c:	4619      	mov	r1, r3
 102a48e:	a80b      	add	r0, sp, #44	; 0x2c
		rtc_temp.timestamp = rtc_temp.utc_timestamp + rtc_temp.time_zone_offset;
 102a490:	930d      	str	r3, [sp, #52]	; 0x34
		RTC_APP_vBreak_timestamp(&rtc_temp, rtc_temp.timestamp);
 102a492:	47c0      	blx	r8
		rtc_temp.dst_applied_flag = TOU_APP_ucLoad_dst_dates(&rtc_temp);
 102a494:	4b40      	ldr	r3, [pc, #256]	; (102a598 <RTC_APP_vRecover_rtc+0x1f0>)
 102a496:	a80b      	add	r0, sp, #44	; 0x2c
 102a498:	4798      	blx	r3
		if ( (rtc_temp.timestamp >= rtc_temp.dst_to_effective) && (rtc_temp.timestamp < rtc_temp.dst_from_effective) ) {
 102a49a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 102a49c:	9912      	ldr	r1, [sp, #72]	; 0x48
		rtc_temp.dst_applied_flag = TOU_APP_ucLoad_dst_dates(&rtc_temp);
 102a49e:	f88d 0040 	strb.w	r0, [sp, #64]	; 0x40
		rtc_temp.is_dst = 0;
 102a4a2:	2200      	movs	r2, #0
		if ( (rtc_temp.timestamp >= rtc_temp.dst_to_effective) && (rtc_temp.timestamp < rtc_temp.dst_from_effective) ) {
 102a4a4:	428b      	cmp	r3, r1
		rtc_temp.is_dst = 0;
 102a4a6:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		rtc_temp.dst_step = 0;
 102a4aa:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
		if ( (rtc_temp.timestamp >= rtc_temp.dst_to_effective) && (rtc_temp.timestamp < rtc_temp.dst_from_effective) ) {
 102a4ae:	d233      	bcs.n	102a518 <RTC_APP_vRecover_rtc+0x170>
		if ( rtc_temp.timestamp >= rtc_temp.dst_from_effective ) {
 102a4b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 102a4b2:	429a      	cmp	r2, r3
 102a4b4:	d933      	bls.n	102a51e <RTC_APP_vRecover_rtc+0x176>
		rtc_temp.is_time_relative = 0;
 102a4b6:	f04f 0e00 	mov.w	lr, #0
 102a4ba:	f88d e02e 	strb.w	lr, [sp, #46]	; 0x2e
 102a4be:	b672      	cpsid	i
 102a4c0:	f3bf 8f5f 	dmb	sy
		rtc = rtc_temp;
 102a4c4:	ad0b      	add	r5, sp, #44	; 0x2c
 102a4c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
		rtc_backup = rtc;
 102a4c8:	4e2c      	ldr	r6, [pc, #176]	; (102a57c <RTC_APP_vRecover_rtc+0x1d4>)
		Disable_global_interrupt();
 102a4ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 102a5a0 <RTC_APP_vRecover_rtc+0x1f8>
		rtc_backup = rtc;
 102a4ce:	f896 c015 	ldrb.w	ip, [r6, #21]
 102a4d2:	f8d6 9004 	ldr.w	r9, [r6, #4]
		Disable_global_interrupt();
 102a4d6:	f88a e000 	strb.w	lr, [sl]
		rtc = rtc_temp;
 102a4da:	4634      	mov	r4, r6
 102a4dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 102a4de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 102a4e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 102a4e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
		Enable_global_interrupt();
 102a4e6:	2301      	movs	r3, #1
		rtc.tick_count = 0;
 102a4e8:	f8a6 e000 	strh.w	lr, [r6]
		rtc = rtc_temp;
 102a4ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		Enable_global_interrupt();
 102a4f0:	f88a 3000 	strb.w	r3, [sl]
 102a4f4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
 102a4f8:	b662      	cpsie	i
		if ( (rtc_backup.is_dst == 0) && (rtc_backup.is_dst != rtc_temp.is_dst) ) {
 102a4fa:	f1bc 0f00 	cmp.w	ip, #0
 102a4fe:	d112      	bne.n	102a526 <RTC_APP_vRecover_rtc+0x17e>
 102a500:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
			tou_os.register_dst_on = true;
 102a504:	4c1e      	ldr	r4, [pc, #120]	; (102a580 <RTC_APP_vRecover_rtc+0x1d8>)
		if ( (rtc_backup.is_dst == 0) && (rtc_backup.is_dst != rtc_temp.is_dst) ) {
 102a506:	b122      	cbz	r2, 102a512 <RTC_APP_vRecover_rtc+0x16a>
			tou_os.event_timestamp = rtc.utc_timestamp;
 102a508:	6872      	ldr	r2, [r6, #4]
			tou_os.register_dst_on = true;
 102a50a:	71a3      	strb	r3, [r4, #6]
			tou_os.user = END_DEVICE;
 102a50c:	f884 c00c 	strb.w	ip, [r4, #12]
			tou_os.event_timestamp = rtc.utc_timestamp;
 102a510:	60a2      	str	r2, [r4, #8]
	if ( !clock_ok ) {
 102a512:	2f00      	cmp	r7, #0
 102a514:	d1a7      	bne.n	102a466 <RTC_APP_vRecover_rtc+0xbe>
 102a516:	e789      	b.n	102a42c <RTC_APP_vRecover_rtc+0x84>
		if ( (rtc_temp.timestamp >= rtc_temp.dst_to_effective) && (rtc_temp.timestamp < rtc_temp.dst_from_effective) ) {
 102a518:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 102a51a:	4293      	cmp	r3, r2
 102a51c:	d318      	bcc.n	102a550 <RTC_APP_vRecover_rtc+0x1a8>
			rtc_temp.dst_step = 2;
 102a51e:	2302      	movs	r3, #2
 102a520:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
 102a524:	e7c7      	b.n	102a4b6 <RTC_APP_vRecover_rtc+0x10e>
		else if ( (rtc_backup.is_dst == 1) && (rtc_backup.is_dst != rtc_temp.is_dst) ) {
 102a526:	f1bc 0f01 	cmp.w	ip, #1
 102a52a:	d003      	beq.n	102a534 <RTC_APP_vRecover_rtc+0x18c>
 102a52c:	4c14      	ldr	r4, [pc, #80]	; (102a580 <RTC_APP_vRecover_rtc+0x1d8>)
	if ( !clock_ok ) {
 102a52e:	2f00      	cmp	r7, #0
 102a530:	d199      	bne.n	102a466 <RTC_APP_vRecover_rtc+0xbe>
 102a532:	e77b      	b.n	102a42c <RTC_APP_vRecover_rtc+0x84>
		else if ( (rtc_backup.is_dst == 1) && (rtc_backup.is_dst != rtc_temp.is_dst) ) {
 102a534:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
			tou_os.register_dst_off = true;
 102a538:	4c11      	ldr	r4, [pc, #68]	; (102a580 <RTC_APP_vRecover_rtc+0x1d8>)
		else if ( (rtc_backup.is_dst == 1) && (rtc_backup.is_dst != rtc_temp.is_dst) ) {
 102a53a:	2b01      	cmp	r3, #1
 102a53c:	d0e9      	beq.n	102a512 <RTC_APP_vRecover_rtc+0x16a>
			tou_os.event_timestamp = rtc.utc_timestamp;
 102a53e:	6873      	ldr	r3, [r6, #4]
			tou_os.register_dst_off = true;
 102a540:	f884 c007 	strb.w	ip, [r4, #7]
			tou_os.user = END_DEVICE;
 102a544:	f884 e00c 	strb.w	lr, [r4, #12]
			tou_os.event_timestamp = rtc.utc_timestamp;
 102a548:	60a3      	str	r3, [r4, #8]
	if ( !clock_ok ) {
 102a54a:	2f00      	cmp	r7, #0
 102a54c:	d18b      	bne.n	102a466 <RTC_APP_vRecover_rtc+0xbe>
 102a54e:	e76d      	b.n	102a42c <RTC_APP_vRecover_rtc+0x84>
			rtc_temp.timestamp += rtc_temp.dst_time_amount;
 102a550:	9a14      	ldr	r2, [sp, #80]	; 0x50
 102a552:	4413      	add	r3, r2
			RTC_APP_vBreak_timestamp(&rtc_temp, rtc_temp.timestamp);
 102a554:	4619      	mov	r1, r3
			rtc_temp.is_dst = 1;
 102a556:	2201      	movs	r2, #1
			RTC_APP_vBreak_timestamp(&rtc_temp, rtc_temp.timestamp);
 102a558:	a80b      	add	r0, sp, #44	; 0x2c
			rtc_temp.timestamp += rtc_temp.dst_time_amount;
 102a55a:	930d      	str	r3, [sp, #52]	; 0x34
			rtc_temp.is_dst = 1;
 102a55c:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			rtc_temp.dst_step = 1;
 102a560:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
			RTC_APP_vBreak_timestamp(&rtc_temp, rtc_temp.timestamp);
 102a564:	47c0      	blx	r8
 102a566:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 102a568:	e7a2      	b.n	102a4b0 <RTC_APP_vRecover_rtc+0x108>
 102a56a:	bf00      	nop
 102a56c:	01030b71 	.word	0x01030b71
 102a570:	01015c51 	.word	0x01015c51
 102a574:	0102a26d 	.word	0x0102a26d
 102a578:	20016c2c 	.word	0x20016c2c
 102a57c:	20017160 	.word	0x20017160
 102a580:	200172b4 	.word	0x200172b4
 102a584:	01019961 	.word	0x01019961
 102a588:	01015ded 	.word	0x01015ded
 102a58c:	0102c761 	.word	0x0102c761
 102a590:	0101c86d 	.word	0x0101c86d
 102a594:	0102a369 	.word	0x0102a369
 102a598:	0102d101 	.word	0x0102d101
 102a59c:	01029ebd 	.word	0x01029ebd
 102a5a0:	2000008d 	.word	0x2000008d

0102a5a4 <RTC_APP_vInitialize>:
void RTC_APP_vInitialize(void) {
 102a5a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 102a5a6:	b08d      	sub	sp, #52	; 0x34
  __ASM volatile ("nop");
 102a5a8:	bf00      	nop
	RTC_APP_vIo_configure();
 102a5aa:	4b12      	ldr	r3, [pc, #72]	; (102a5f4 <RTC_APP_vInitialize+0x50>)
	rtc = rtc_temp;
 102a5ac:	4f12      	ldr	r7, [pc, #72]	; (102a5f8 <RTC_APP_vInitialize+0x54>)
	RTC_APP_vIo_configure();
 102a5ae:	4798      	blx	r3
	rtc_temp.timestamp = 0;
 102a5b0:	2600      	movs	r6, #0
	RTC_APP_vLoad_tm_zn_dst(&rtc_temp);
 102a5b2:	a801      	add	r0, sp, #4
 102a5b4:	4b11      	ldr	r3, [pc, #68]	; (102a5fc <RTC_APP_vInitialize+0x58>)
	rtc_temp.timestamp = 0;
 102a5b6:	9603      	str	r6, [sp, #12]
	RTC_APP_vLoad_tm_zn_dst(&rtc_temp);
 102a5b8:	4798      	blx	r3
	RTC_APP_vBreak_timestamp(&rtc_temp, rtc_temp.timestamp);
 102a5ba:	a801      	add	r0, sp, #4
 102a5bc:	9903      	ldr	r1, [sp, #12]
 102a5be:	4b10      	ldr	r3, [pc, #64]	; (102a600 <RTC_APP_vInitialize+0x5c>)
	rtc_temp.utc_timestamp = 0;
 102a5c0:	9602      	str	r6, [sp, #8]
	RTC_APP_vBreak_timestamp(&rtc_temp, rtc_temp.timestamp);
 102a5c2:	4798      	blx	r3
	rtc_temp.is_time_relative = 1;
 102a5c4:	2301      	movs	r3, #1
 102a5c6:	f88d 3006 	strb.w	r3, [sp, #6]
	rtc = rtc_temp;
 102a5ca:	ac01      	add	r4, sp, #4
 102a5cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
	rtc_temp.is_dst = 0;
 102a5ce:	f88d 6019 	strb.w	r6, [sp, #25]
	rtc_temp.dst_step = 0;
 102a5d2:	f88d 601a 	strb.w	r6, [sp, #26]
	rtc_temp.dst_applied_flag = 0;
 102a5d6:	f88d 6018 	strb.w	r6, [sp, #24]
	rtc = rtc_temp;
 102a5da:	463d      	mov	r5, r7
 102a5dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 102a5de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 102a5e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 102a5e2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
		RTC_APP_vRecover_rtc();
 102a5e6:	4b07      	ldr	r3, [pc, #28]	; (102a604 <RTC_APP_vInitialize+0x60>)
	rtc.tick_count = 0;
 102a5e8:	803e      	strh	r6, [r7, #0]
	rtc = rtc_temp;
 102a5ea:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		RTC_APP_vRecover_rtc();
 102a5ee:	4798      	blx	r3
}
 102a5f0:	b00d      	add	sp, #52	; 0x34
 102a5f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 102a5f4:	01029dc5 	.word	0x01029dc5
 102a5f8:	20017160 	.word	0x20017160
 102a5fc:	0102a369 	.word	0x0102a369
 102a600:	01029ebd 	.word	0x01029ebd
 102a604:	0102a3a9 	.word	0x0102a3a9

0102a608 <RTC_Handler>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
void RTC_Handler(void) {
 102a608:	b510      	push	{r4, lr}
	
	uint32_t ul_status = rtc_get_status(RTC);
 102a60a:	4817      	ldr	r0, [pc, #92]	; (102a668 <RTC_Handler+0x60>)
 102a60c:	4b17      	ldr	r3, [pc, #92]	; (102a66c <RTC_Handler+0x64>)
 102a60e:	4798      	blx	r3

	/* Second increment interrupt */
	if ( (ul_status & RTC_SR_SEC) == RTC_SR_SEC ) {
 102a610:	0742      	lsls	r2, r0, #29
	uint32_t ul_status = rtc_get_status(RTC);
 102a612:	4604      	mov	r4, r0
	if ( (ul_status & RTC_SR_SEC) == RTC_SR_SEC ) {
 102a614:	d409      	bmi.n	102a62a <RTC_Handler+0x22>

		rtc_clear_status(RTC, RTC_SCCR_SECCLR);
		rtc_enable_interrupt(RTC, RTC_IER_SECEN);
	} 

	if ( (ul_status & RTC_SR_ALARM_ALARMEVENT) == RTC_SR_ALARM_ALARMEVENT ) {
 102a616:	07a3      	lsls	r3, r4, #30
 102a618:	d506      	bpl.n	102a628 <RTC_Handler+0x20>
		
		rtc_clear_status(RTC, RTC_SCCR_ALRCLR);
 102a61a:	4c13      	ldr	r4, [pc, #76]	; (102a668 <RTC_Handler+0x60>)
 102a61c:	4b14      	ldr	r3, [pc, #80]	; (102a670 <RTC_Handler+0x68>)
 102a61e:	4620      	mov	r0, r4
 102a620:	2102      	movs	r1, #2
 102a622:	4798      	blx	r3
		RTC->RTC_IER = RTC_IER_ALREN;
 102a624:	2302      	movs	r3, #2
 102a626:	6223      	str	r3, [r4, #32]
 102a628:	bd10      	pop	{r4, pc}
		rtc_disable_interrupt(RTC, RTC_IDR_SECDIS);
 102a62a:	4b12      	ldr	r3, [pc, #72]	; (102a674 <RTC_Handler+0x6c>)
 102a62c:	480e      	ldr	r0, [pc, #56]	; (102a668 <RTC_Handler+0x60>)
 102a62e:	2104      	movs	r1, #4
 102a630:	4798      	blx	r3
		if ( !meter.system_state.initialiting ) {
 102a632:	4b11      	ldr	r3, [pc, #68]	; (102a678 <RTC_Handler+0x70>)
 102a634:	f893 3020 	ldrb.w	r3, [r3, #32]
 102a638:	b143      	cbz	r3, 102a64c <RTC_Handler+0x44>
		rtc_clear_status(RTC, RTC_SCCR_SECCLR);
 102a63a:	2104      	movs	r1, #4
 102a63c:	480a      	ldr	r0, [pc, #40]	; (102a668 <RTC_Handler+0x60>)
 102a63e:	4b0c      	ldr	r3, [pc, #48]	; (102a670 <RTC_Handler+0x68>)
 102a640:	4798      	blx	r3
		rtc_enable_interrupt(RTC, RTC_IER_SECEN);
 102a642:	2104      	movs	r1, #4
 102a644:	4808      	ldr	r0, [pc, #32]	; (102a668 <RTC_Handler+0x60>)
 102a646:	4b0d      	ldr	r3, [pc, #52]	; (102a67c <RTC_Handler+0x74>)
 102a648:	4798      	blx	r3
 102a64a:	e7e4      	b.n	102a616 <RTC_Handler+0xe>
			RTC_APP_v1sec_handler();
 102a64c:	4b0c      	ldr	r3, [pc, #48]	; (102a680 <RTC_Handler+0x78>)
 102a64e:	4798      	blx	r3
			METROLOGY_APP_vRefresh_inst_values();
 102a650:	4b0c      	ldr	r3, [pc, #48]	; (102a684 <RTC_Handler+0x7c>)
 102a652:	4798      	blx	r3
			REGS_APP_vSummation_task();
 102a654:	4b0c      	ldr	r3, [pc, #48]	; (102a688 <RTC_Handler+0x80>)
 102a656:	4798      	blx	r3
			REGS_APP_vDemand_task();
 102a658:	4b0c      	ldr	r3, [pc, #48]	; (102a68c <RTC_Handler+0x84>)
 102a65a:	4798      	blx	r3
			LP_APP_vRecorder_task();
 102a65c:	4b0c      	ldr	r3, [pc, #48]	; (102a690 <RTC_Handler+0x88>)
 102a65e:	4798      	blx	r3
			REGS_APP_v1sec_handler();
 102a660:	4b0c      	ldr	r3, [pc, #48]	; (102a694 <RTC_Handler+0x8c>)
 102a662:	4798      	blx	r3
 102a664:	e7e9      	b.n	102a63a <RTC_Handler+0x32>
 102a666:	bf00      	nop
 102a668:	400e1460 	.word	0x400e1460
 102a66c:	010160c5 	.word	0x010160c5
 102a670:	010160c9 	.word	0x010160c9
 102a674:	010160c1 	.word	0x010160c1
 102a678:	20016c2c 	.word	0x20016c2c
 102a67c:	010160bd 	.word	0x010160bd
 102a680:	0102a06d 	.word	0x0102a06d
 102a684:	0101e5d1 	.word	0x0101e5d1
 102a688:	01029331 	.word	0x01029331
 102a68c:	0102963d 	.word	0x0102963d
 102a690:	0101bcad 	.word	0x0101bcad
 102a694:	01028bd9 	.word	0x01028bd9

0102a698 <SECR_APP_vSt_41_read_eeprom_values>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
void SECR_APP_vSt_41_read_eeprom_values(ST_40_TYPE *st_41_structure) {	
 102a698:	b570      	push	{r4, r5, r6, lr}
	
	EEPROM_reader(ST_41_NBR_PASSWORDS_ADDR, &st_41_structure->nbr_passwords, 1);
 102a69a:	4601      	mov	r1, r0
void SECR_APP_vSt_41_read_eeprom_values(ST_40_TYPE *st_41_structure) {	
 102a69c:	4605      	mov	r5, r0
	EEPROM_reader(ST_41_NBR_PASSWORDS_ADDR, &st_41_structure->nbr_passwords, 1);
 102a69e:	4c0e      	ldr	r4, [pc, #56]	; (102a6d8 <SECR_APP_vSt_41_read_eeprom_values+0x40>)
 102a6a0:	2201      	movs	r2, #1
 102a6a2:	f640 000e 	movw	r0, #2062	; 0x80e
 102a6a6:	47a0      	blx	r4
	EEPROM_reader(ST_41_PASSWORD_LEN_ADDR, &st_41_structure->password_len, 1);
 102a6a8:	1c69      	adds	r1, r5, #1
 102a6aa:	2201      	movs	r2, #1
 102a6ac:	f640 000f 	movw	r0, #2063	; 0x80f
 102a6b0:	47a0      	blx	r4
	EEPROM_reader(ST_41_NBR_KEYS_ADDR, &st_41_structure->nbr_keys, 1);
 102a6b2:	1ca9      	adds	r1, r5, #2
 102a6b4:	2201      	movs	r2, #1
 102a6b6:	f44f 6001 	mov.w	r0, #2064	; 0x810
 102a6ba:	47a0      	blx	r4
	EEPROM_reader(ST_41_KEY_LEN_ADDR, &st_41_structure->key_len, 1);
 102a6bc:	1ce9      	adds	r1, r5, #3
 102a6be:	2201      	movs	r2, #1
 102a6c0:	f640 0011 	movw	r0, #2065	; 0x811
 102a6c4:	47a0      	blx	r4
	EEPROM_reader(ST_41_NBR_PERM_USED_ADDR, &st_41_structure->nbr_perm_used, 2);
 102a6c6:	1d29      	adds	r1, r5, #4
 102a6c8:	4623      	mov	r3, r4
 102a6ca:	2202      	movs	r2, #2
 102a6cc:	f640 0012 	movw	r0, #2066	; 0x812
}
 102a6d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	EEPROM_reader(ST_41_NBR_PERM_USED_ADDR, &st_41_structure->nbr_perm_used, 2);
 102a6d4:	4718      	bx	r3
 102a6d6:	bf00      	nop
 102a6d8:	01017511 	.word	0x01017511

0102a6dc <SECR_APP_vSt_42_read_eeprom_values>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
void SECR_APP_vSt_42_read_eeprom_values(ST_42_TYPE *st_42_structure) {	
 102a6dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	
	for (uint8_t i = 0; i < st_41.nbr_passwords; i++) {
 102a6e0:	f8df a048 	ldr.w	sl, [pc, #72]	; 102a72c <SECR_APP_vSt_42_read_eeprom_values+0x50>
 102a6e4:	f89a 3000 	ldrb.w	r3, [sl]
 102a6e8:	b1e3      	cbz	r3, 102a724 <SECR_APP_vSt_42_read_eeprom_values+0x48>
 102a6ea:	4f0f      	ldr	r7, [pc, #60]	; (102a728 <SECR_APP_vSt_42_read_eeprom_values+0x4c>)
 102a6ec:	4606      	mov	r6, r0
 102a6ee:	2400      	movs	r4, #0
		
		EEPROM_reader(ST_42_PASSWORD_ADDR + (MAX_PASSWORD_LEN * i), &st_42_structure->security_entries[i].password, st_41.password_len);
 102a6f0:	f04f 0914 	mov.w	r9, #20
 102a6f4:	f640 081a 	movw	r8, #2074	; 0x81a
 102a6f8:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 102a6fc:	012d      	lsls	r5, r5, #4
 102a6fe:	1971      	adds	r1, r6, r5
 102a700:	f89a 2001 	ldrb.w	r2, [sl, #1]
 102a704:	fb09 8004 	mla	r0, r9, r4, r8
 102a708:	47b8      	blx	r7
		EEPROM_reader(ST_42_ACCESS_PERMISSION_BFLD_ADDR + i, &st_42_structure->security_entries[i].access_permissions, 1);
 102a70a:	f105 0114 	add.w	r1, r5, #20
 102a70e:	f604 0092 	addw	r0, r4, #2194	; 0x892
 102a712:	4431      	add	r1, r6
 102a714:	2201      	movs	r2, #1
 102a716:	47b8      	blx	r7
	for (uint8_t i = 0; i < st_41.nbr_passwords; i++) {
 102a718:	3401      	adds	r4, #1
 102a71a:	f89a 3000 	ldrb.w	r3, [sl]
 102a71e:	b2e4      	uxtb	r4, r4
 102a720:	42a3      	cmp	r3, r4
 102a722:	d8e9      	bhi.n	102a6f8 <SECR_APP_vSt_42_read_eeprom_values+0x1c>
 102a724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 102a728:	01017511 	.word	0x01017511
 102a72c:	2001718c 	.word	0x2001718c

0102a730 <SECR_APP_vSt_43_read_eeprom_values>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
void SECR_APP_vSt_43_read_eeprom_values(ST_43_TYPE *st_43_structure) {	
 102a730:	b570      	push	{r4, r5, r6, lr}
	
	EEPROM_reader(ST_43_ACCESS_TABLE_DEFAULT_ADDR, &st_43_structure->table_default.access_table_default, 2);
 102a732:	4601      	mov	r1, r0
void SECR_APP_vSt_43_read_eeprom_values(ST_43_TYPE *st_43_structure) {	
 102a734:	4605      	mov	r5, r0
	EEPROM_reader(ST_43_ACCESS_TABLE_DEFAULT_ADDR, &st_43_structure->table_default.access_table_default, 2);
 102a736:	4c10      	ldr	r4, [pc, #64]	; (102a778 <SECR_APP_vSt_43_read_eeprom_values+0x48>)
 102a738:	2202      	movs	r2, #2
 102a73a:	f640 00da 	movw	r0, #2266	; 0x8da
 102a73e:	47a0      	blx	r4
	EEPROM_reader(ST_43_TABLE_ACCESS_PERM_BFLD_READ_ADDR, &st_43_structure->table_default.read, 1);
 102a740:	1ca9      	adds	r1, r5, #2
 102a742:	2201      	movs	r2, #1
 102a744:	f640 00dc 	movw	r0, #2268	; 0x8dc
 102a748:	47a0      	blx	r4
	EEPROM_reader(ST_43_TABLE_ACCESS_PERM_BFLD_WRITE_ADDR, &st_43_structure->table_default.write, 1);
 102a74a:	1ce9      	adds	r1, r5, #3
 102a74c:	2201      	movs	r2, #1
 102a74e:	f640 00dd 	movw	r0, #2269	; 0x8dd
 102a752:	47a0      	blx	r4
	EEPROM_reader(ST_43_ACCESS_PROCEDURE_DEFAULT_ADDR, &st_43_structure->procedure_default.access_table_default, 2);
 102a754:	1d29      	adds	r1, r5, #4
 102a756:	2202      	movs	r2, #2
 102a758:	f640 00de 	movw	r0, #2270	; 0x8de
 102a75c:	47a0      	blx	r4
	EEPROM_reader(ST_43_PROCEDURE_ACCESS_PERM_BFLD_READ_ADDR, &st_43_structure->procedure_default.read, 1);
 102a75e:	1da9      	adds	r1, r5, #6
 102a760:	2201      	movs	r2, #1
 102a762:	f44f 600e 	mov.w	r0, #2272	; 0x8e0
 102a766:	47a0      	blx	r4
	EEPROM_reader(ST_43_PROCEDURE_ACCESS_PERM_BFLD_WRITE_ADDR, &st_43_structure->procedure_default.write, 1);
 102a768:	1de9      	adds	r1, r5, #7
 102a76a:	4623      	mov	r3, r4
 102a76c:	2201      	movs	r2, #1
 102a76e:	f640 00e1 	movw	r0, #2273	; 0x8e1
}
 102a772:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	EEPROM_reader(ST_43_PROCEDURE_ACCESS_PERM_BFLD_WRITE_ADDR, &st_43_structure->procedure_default.write, 1);
 102a776:	4718      	bx	r3
 102a778:	01017511 	.word	0x01017511

0102a77c <SECR_APP_vSt_42_to_array>:
void SECR_APP_vSt_42_to_array(ST_42_TYPE st_42_source, uint8_t *table_buffer) {
 102a77c:	b084      	sub	sp, #16
 102a77e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint8_t i = 0; i < st_41.nbr_passwords; i++) {
 102a782:	4e14      	ldr	r6, [pc, #80]	; (102a7d4 <SECR_APP_vSt_42_to_array+0x58>)
void SECR_APP_vSt_42_to_array(ST_42_TYPE st_42_source, uint8_t *table_buffer) {
 102a784:	9f4e      	ldr	r7, [sp, #312]	; 0x138
	for (uint8_t i = 0; i < st_41.nbr_passwords; i++) {
 102a786:	7834      	ldrb	r4, [r6, #0]
void SECR_APP_vSt_42_to_array(ST_42_TYPE st_42_source, uint8_t *table_buffer) {
 102a788:	ad06      	add	r5, sp, #24
 102a78a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	for (uint8_t i = 0; i < st_41.nbr_passwords; i++) {
 102a78e:	b1e4      	cbz	r4, 102a7ca <SECR_APP_vSt_42_to_array+0x4e>
 102a790:	2500      	movs	r5, #0
 102a792:	f8df 8044 	ldr.w	r8, [pc, #68]	; 102a7d8 <SECR_APP_vSt_42_to_array+0x5c>
 102a796:	462c      	mov	r4, r5
		memcpy(&table_buffer[k], &st_42_source.security_entries[i].password, st_41.password_len);
 102a798:	ab06      	add	r3, sp, #24
 102a79a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 102a79e:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 102a7a2:	7872      	ldrb	r2, [r6, #1]
 102a7a4:	1938      	adds	r0, r7, r4
 102a7a6:	47c0      	blx	r8
		k += st_41.password_len;
 102a7a8:	7872      	ldrb	r2, [r6, #1]
		table_buffer[k] = st_42_source.security_entries[i].access_permissions;
 102a7aa:	eb05 0345 	add.w	r3, r5, r5, lsl #1
		k += st_41.password_len;
 102a7ae:	4414      	add	r4, r2
		table_buffer[k] = st_42_source.security_entries[i].access_permissions;
 102a7b0:	aa06      	add	r2, sp, #24
 102a7b2:	eb02 1303 	add.w	r3, r2, r3, lsl #4
		k += st_41.password_len;
 102a7b6:	b2a4      	uxth	r4, r4
		table_buffer[k] = st_42_source.security_entries[i].access_permissions;
 102a7b8:	7d1b      	ldrb	r3, [r3, #20]
 102a7ba:	553b      	strb	r3, [r7, r4]
	for (uint8_t i = 0; i < st_41.nbr_passwords; i++) {
 102a7bc:	3501      	adds	r5, #1
 102a7be:	7833      	ldrb	r3, [r6, #0]
 102a7c0:	b2ed      	uxtb	r5, r5
		k++;
 102a7c2:	3401      	adds	r4, #1
	for (uint8_t i = 0; i < st_41.nbr_passwords; i++) {
 102a7c4:	42ab      	cmp	r3, r5
		k++;
 102a7c6:	b2a4      	uxth	r4, r4
	for (uint8_t i = 0; i < st_41.nbr_passwords; i++) {
 102a7c8:	d8e6      	bhi.n	102a798 <SECR_APP_vSt_42_to_array+0x1c>
}
 102a7ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 102a7ce:	b004      	add	sp, #16
 102a7d0:	4770      	bx	lr
 102a7d2:	bf00      	nop
 102a7d4:	2001718c 	.word	0x2001718c
 102a7d8:	01030a3d 	.word	0x01030a3d

0102a7dc <SECR_APP_vSt_44_read_eeprom_values>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
void SECR_APP_vSt_44_read_eeprom_values(ST_44_TYPE *st_44_structure) {	
 102a7dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	
	for ( uint16_t i = 0; i < st_41.nbr_perm_used; i++ ) {
 102a7e0:	f8df 804c 	ldr.w	r8, [pc, #76]	; 102a830 <SECR_APP_vSt_44_read_eeprom_values+0x54>
 102a7e4:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 102a7e8:	b1f3      	cbz	r3, 102a828 <SECR_APP_vSt_44_read_eeprom_values+0x4c>
 102a7ea:	4f10      	ldr	r7, [pc, #64]	; (102a82c <SECR_APP_vSt_44_read_eeprom_values+0x50>)
 102a7ec:	f8df 9044 	ldr.w	r9, [pc, #68]	; 102a834 <SECR_APP_vSt_44_read_eeprom_values+0x58>
 102a7f0:	4606      	mov	r6, r0
 102a7f2:	2400      	movs	r4, #0
 102a7f4:	00a5      	lsls	r5, r4, #2
		
		EEPROM_reader(ST_44_ACCESS_TABLE_DEFAULT_ADDR + 2*i, &st_44_structure->access_control[i].access_table_def, 2);
 102a7f6:	0060      	lsls	r0, r4, #1
 102a7f8:	1971      	adds	r1, r6, r5
 102a7fa:	2202      	movs	r2, #2
 102a7fc:	f600 00e9 	addw	r0, r0, #2281	; 0x8e9
 102a800:	47b8      	blx	r7
		EEPROM_reader(ST_44_TABLE_ACCESS_PERMISSION_BFLD_READ_ADDR + i, &st_44_structure->access_control[i].read, 1);
 102a802:	1ca9      	adds	r1, r5, #2
 102a804:	4431      	add	r1, r6
 102a806:	2201      	movs	r2, #1
 102a808:	f604 1069 	addw	r0, r4, #2409	; 0x969
 102a80c:	47b8      	blx	r7
		EEPROM_reader(ST_44_TABLE_ACCESS_PERMISSION_BFLD_WRITE_ADDR + i, &st_44_structure->access_control[i].write, 1);
 102a80e:	1ce9      	adds	r1, r5, #3
 102a810:	4431      	add	r1, r6
 102a812:	2201      	movs	r2, #1
 102a814:	f604 10a9 	addw	r0, r4, #2473	; 0x9a9
 102a818:	47b8      	blx	r7
	for ( uint16_t i = 0; i < st_41.nbr_perm_used; i++ ) {
 102a81a:	3401      	adds	r4, #1
		WATCHDOG_APP_vRestart();
 102a81c:	47c8      	blx	r9
	for ( uint16_t i = 0; i < st_41.nbr_perm_used; i++ ) {
 102a81e:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 102a822:	b2a4      	uxth	r4, r4
 102a824:	42a3      	cmp	r3, r4
 102a826:	d8e5      	bhi.n	102a7f4 <SECR_APP_vSt_44_read_eeprom_values+0x18>
 102a828:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 102a82c:	01017511 	.word	0x01017511
 102a830:	2001718c 	.word	0x2001718c
 102a834:	0101603d 	.word	0x0101603d

0102a838 <SECR_APP_vSt_44_write_eeprom_values.constprop.3>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
void SECR_APP_vSt_44_write_eeprom_values(ST_44_TYPE *st_44_structure) {
 102a838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	
	SM_APP_vChange_table_state(ST_44_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
	
	for ( uint16_t i = 0; i < st_41.nbr_perm_used; i++ ) {
 102a83c:	f8df 8068 	ldr.w	r8, [pc, #104]	; 102a8a8 <SECR_APP_vSt_44_write_eeprom_values.constprop.3+0x70>
	SM_APP_vChange_table_state(ST_44_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
 102a840:	f8df a068 	ldr.w	sl, [pc, #104]	; 102a8ac <SECR_APP_vSt_44_write_eeprom_values.constprop.3+0x74>
 102a844:	21ff      	movs	r1, #255	; 0xff
 102a846:	f640 00e6 	movw	r0, #2278	; 0x8e6
 102a84a:	47d0      	blx	sl
	for ( uint16_t i = 0; i < st_41.nbr_perm_used; i++ ) {
 102a84c:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 102a850:	b1f3      	cbz	r3, 102a890 <SECR_APP_vSt_44_write_eeprom_values.constprop.3+0x58>
 102a852:	4f13      	ldr	r7, [pc, #76]	; (102a8a0 <SECR_APP_vSt_44_write_eeprom_values.constprop.3+0x68>)
 102a854:	4e13      	ldr	r6, [pc, #76]	; (102a8a4 <SECR_APP_vSt_44_write_eeprom_values.constprop.3+0x6c>)
 102a856:	f8df 9058 	ldr.w	r9, [pc, #88]	; 102a8b0 <SECR_APP_vSt_44_write_eeprom_values.constprop.3+0x78>
 102a85a:	2400      	movs	r4, #0
 102a85c:	00a5      	lsls	r5, r4, #2
		
		EEPROM_writer(ST_44_ACCESS_TABLE_DEFAULT_ADDR + 2*i, &st_44_structure->access_control[i].access_table_def, 2);
 102a85e:	0060      	lsls	r0, r4, #1
 102a860:	1979      	adds	r1, r7, r5
 102a862:	2202      	movs	r2, #2
 102a864:	f600 00e9 	addw	r0, r0, #2281	; 0x8e9
 102a868:	47b0      	blx	r6
		EEPROM_writer(ST_44_TABLE_ACCESS_PERMISSION_BFLD_READ_ADDR + i, &st_44_structure->access_control[i].read, 1);
 102a86a:	1ca9      	adds	r1, r5, #2
 102a86c:	4439      	add	r1, r7
 102a86e:	2201      	movs	r2, #1
 102a870:	f604 1069 	addw	r0, r4, #2409	; 0x969
 102a874:	47b0      	blx	r6
		EEPROM_writer(ST_44_TABLE_ACCESS_PERMISSION_BFLD_WRITE_ADDR + i, &st_44_structure->access_control[i].write, 1);
 102a876:	1ce9      	adds	r1, r5, #3
 102a878:	4439      	add	r1, r7
 102a87a:	2201      	movs	r2, #1
 102a87c:	f604 10a9 	addw	r0, r4, #2473	; 0x9a9
 102a880:	47b0      	blx	r6
	for ( uint16_t i = 0; i < st_41.nbr_perm_used; i++ ) {
 102a882:	3401      	adds	r4, #1
		WATCHDOG_APP_vRestart();
 102a884:	47c8      	blx	r9
	for ( uint16_t i = 0; i < st_41.nbr_perm_used; i++ ) {
 102a886:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 102a88a:	b2a4      	uxth	r4, r4
 102a88c:	42a3      	cmp	r3, r4
 102a88e:	d8e5      	bhi.n	102a85c <SECR_APP_vSt_44_write_eeprom_values.constprop.3+0x24>
	}
	
	SM_APP_vChange_table_state(ST_44_PROG_STATE_ADDR, C1219_TABLE_FULL);
 102a890:	4653      	mov	r3, sl
 102a892:	2145      	movs	r1, #69	; 0x45
 102a894:	f640 00e6 	movw	r0, #2278	; 0x8e6
}
 102a898:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SM_APP_vChange_table_state(ST_44_PROG_STATE_ADDR, C1219_TABLE_FULL);
 102a89c:	4718      	bx	r3
 102a89e:	bf00      	nop
 102a8a0:	20007fd4 	.word	0x20007fd4
 102a8a4:	01017509 	.word	0x01017509
 102a8a8:	2001718c 	.word	0x2001718c
 102a8ac:	010203e9 	.word	0x010203e9
 102a8b0:	0101603d 	.word	0x0101603d

0102a8b4 <SECR_APP_vSt_43_write_eeprom_values.constprop.4>:
void SECR_APP_vSt_43_write_eeprom_values(ST_43_TYPE *st_43_structure) {
 102a8b4:	b570      	push	{r4, r5, r6, lr}
	EEPROM_writer(ST_43_ACCESS_TABLE_DEFAULT_ADDR, &st_43_structure->table_default.access_table_default, 2);
 102a8b6:	4d16      	ldr	r5, [pc, #88]	; (102a910 <SECR_APP_vSt_43_write_eeprom_values.constprop.4+0x5c>)
	SM_APP_vChange_table_state(ST_43_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
 102a8b8:	4e16      	ldr	r6, [pc, #88]	; (102a914 <SECR_APP_vSt_43_write_eeprom_values.constprop.4+0x60>)
	EEPROM_writer(ST_43_ACCESS_TABLE_DEFAULT_ADDR, &st_43_structure->table_default.access_table_default, 2);
 102a8ba:	4c17      	ldr	r4, [pc, #92]	; (102a918 <SECR_APP_vSt_43_write_eeprom_values.constprop.4+0x64>)
	SM_APP_vChange_table_state(ST_43_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
 102a8bc:	21ff      	movs	r1, #255	; 0xff
 102a8be:	f640 00d7 	movw	r0, #2263	; 0x8d7
 102a8c2:	47b0      	blx	r6
	EEPROM_writer(ST_43_ACCESS_TABLE_DEFAULT_ADDR, &st_43_structure->table_default.access_table_default, 2);
 102a8c4:	4629      	mov	r1, r5
 102a8c6:	2202      	movs	r2, #2
 102a8c8:	f640 00da 	movw	r0, #2266	; 0x8da
 102a8cc:	47a0      	blx	r4
	EEPROM_writer(ST_43_TABLE_ACCESS_PERM_BFLD_READ_ADDR, &st_43_structure->table_default.read, 1);
 102a8ce:	1ca9      	adds	r1, r5, #2
 102a8d0:	2201      	movs	r2, #1
 102a8d2:	f640 00dc 	movw	r0, #2268	; 0x8dc
 102a8d6:	47a0      	blx	r4
	EEPROM_writer(ST_43_TABLE_ACCESS_PERM_BFLD_WRITE_ADDR, &st_43_structure->table_default.write, 1);
 102a8d8:	1ce9      	adds	r1, r5, #3
 102a8da:	2201      	movs	r2, #1
 102a8dc:	f640 00dd 	movw	r0, #2269	; 0x8dd
 102a8e0:	47a0      	blx	r4
	EEPROM_writer(ST_43_ACCESS_PROCEDURE_DEFAULT_ADDR, &st_43_structure->procedure_default.access_table_default, 2);
 102a8e2:	1d29      	adds	r1, r5, #4
 102a8e4:	2202      	movs	r2, #2
 102a8e6:	f640 00de 	movw	r0, #2270	; 0x8de
 102a8ea:	47a0      	blx	r4
	EEPROM_writer(ST_43_PROCEDURE_ACCESS_PERM_BFLD_READ_ADDR, &st_43_structure->procedure_default.read, 1);
 102a8ec:	1da9      	adds	r1, r5, #6
 102a8ee:	2201      	movs	r2, #1
 102a8f0:	f44f 600e 	mov.w	r0, #2272	; 0x8e0
 102a8f4:	47a0      	blx	r4
	EEPROM_writer(ST_43_PROCEDURE_ACCESS_PERM_BFLD_WRITE_ADDR, &st_43_structure->procedure_default.write, 1);
 102a8f6:	1de9      	adds	r1, r5, #7
 102a8f8:	2201      	movs	r2, #1
 102a8fa:	f640 00e1 	movw	r0, #2273	; 0x8e1
 102a8fe:	47a0      	blx	r4
	SM_APP_vChange_table_state(ST_43_PROG_STATE_ADDR, C1219_TABLE_FULL);
 102a900:	4633      	mov	r3, r6
 102a902:	2145      	movs	r1, #69	; 0x45
 102a904:	f640 00d7 	movw	r0, #2263	; 0x8d7
}
 102a908:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	SM_APP_vChange_table_state(ST_43_PROG_STATE_ADDR, C1219_TABLE_FULL);
 102a90c:	4718      	bx	r3
 102a90e:	bf00      	nop
 102a910:	20007fcc 	.word	0x20007fcc
 102a914:	010203e9 	.word	0x010203e9
 102a918:	01017509 	.word	0x01017509

0102a91c <SECR_APP_vSt_42_write_eeprom_values.constprop.5>:
void SECR_APP_vSt_42_write_eeprom_values(ST_42_TYPE *st_42_structure) {
 102a91c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint8_t i = 0; i < st_41.nbr_passwords; i++) {
 102a920:	f8df b068 	ldr.w	fp, [pc, #104]	; 102a98c <SECR_APP_vSt_42_write_eeprom_values.constprop.5+0x70>
	SM_APP_vChange_table_state(ST_42_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
 102a924:	f8df a068 	ldr.w	sl, [pc, #104]	; 102a990 <SECR_APP_vSt_42_write_eeprom_values.constprop.5+0x74>
void SECR_APP_vSt_42_write_eeprom_values(ST_42_TYPE *st_42_structure) {
 102a928:	b081      	sub	sp, #4
	SM_APP_vChange_table_state(ST_42_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
 102a92a:	21ff      	movs	r1, #255	; 0xff
 102a92c:	f640 0017 	movw	r0, #2071	; 0x817
 102a930:	47d0      	blx	sl
	for (uint8_t i = 0; i < st_41.nbr_passwords; i++) {
 102a932:	f89b 3000 	ldrb.w	r3, [fp]
 102a936:	b1e3      	cbz	r3, 102a972 <SECR_APP_vSt_42_write_eeprom_values.constprop.5+0x56>
 102a938:	4f12      	ldr	r7, [pc, #72]	; (102a984 <SECR_APP_vSt_42_write_eeprom_values.constprop.5+0x68>)
 102a93a:	4e13      	ldr	r6, [pc, #76]	; (102a988 <SECR_APP_vSt_42_write_eeprom_values.constprop.5+0x6c>)
 102a93c:	2400      	movs	r4, #0
		EEPROM_writer(ST_42_PASSWORD_ADDR + (MAX_PASSWORD_LEN * i), &st_42_structure->security_entries[i].password, st_41.password_len);
 102a93e:	f04f 0914 	mov.w	r9, #20
 102a942:	f640 081a 	movw	r8, #2074	; 0x81a
 102a946:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 102a94a:	012d      	lsls	r5, r5, #4
 102a94c:	1979      	adds	r1, r7, r5
 102a94e:	f89b 2001 	ldrb.w	r2, [fp, #1]
 102a952:	fb09 8004 	mla	r0, r9, r4, r8
 102a956:	47b0      	blx	r6
		EEPROM_writer(ST_42_ACCESS_PERMISSION_BFLD_ADDR + i, &st_42_structure->security_entries[i].access_permissions, 1);
 102a958:	f105 0114 	add.w	r1, r5, #20
 102a95c:	f604 0092 	addw	r0, r4, #2194	; 0x892
 102a960:	4439      	add	r1, r7
 102a962:	2201      	movs	r2, #1
 102a964:	47b0      	blx	r6
	for (uint8_t i = 0; i < st_41.nbr_passwords; i++) {
 102a966:	3401      	adds	r4, #1
 102a968:	f89b 3000 	ldrb.w	r3, [fp]
 102a96c:	b2e4      	uxtb	r4, r4
 102a96e:	42a3      	cmp	r3, r4
 102a970:	d8e9      	bhi.n	102a946 <SECR_APP_vSt_42_write_eeprom_values.constprop.5+0x2a>
	SM_APP_vChange_table_state(ST_42_PROG_STATE_ADDR, C1219_TABLE_FULL);
 102a972:	2145      	movs	r1, #69	; 0x45
 102a974:	f640 0017 	movw	r0, #2071	; 0x817
 102a978:	4653      	mov	r3, sl
}
 102a97a:	b001      	add	sp, #4
 102a97c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	SM_APP_vChange_table_state(ST_42_PROG_STATE_ADDR, C1219_TABLE_FULL);
 102a980:	4718      	bx	r3
 102a982:	bf00      	nop
 102a984:	20017194 	.word	0x20017194
 102a988:	01017509 	.word	0x01017509
 102a98c:	2001718c 	.word	0x2001718c
 102a990:	010203e9 	.word	0x010203e9

0102a994 <SECR_APP_vSt_41_write_eeprom_values.constprop.6>:
void SECR_APP_vSt_41_write_eeprom_values(ST_40_TYPE *st_41_structure) {
 102a994:	b570      	push	{r4, r5, r6, lr}
	EEPROM_writer(ST_41_NBR_PASSWORDS_ADDR, &st_41_structure->nbr_passwords, 1);
 102a996:	4d13      	ldr	r5, [pc, #76]	; (102a9e4 <SECR_APP_vSt_41_write_eeprom_values.constprop.6+0x50>)
	SM_APP_vChange_table_state(ST_41_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
 102a998:	4e13      	ldr	r6, [pc, #76]	; (102a9e8 <SECR_APP_vSt_41_write_eeprom_values.constprop.6+0x54>)
	EEPROM_writer(ST_41_NBR_PASSWORDS_ADDR, &st_41_structure->nbr_passwords, 1);
 102a99a:	4c14      	ldr	r4, [pc, #80]	; (102a9ec <SECR_APP_vSt_41_write_eeprom_values.constprop.6+0x58>)
	SM_APP_vChange_table_state(ST_41_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
 102a99c:	21ff      	movs	r1, #255	; 0xff
 102a99e:	f640 000b 	movw	r0, #2059	; 0x80b
 102a9a2:	47b0      	blx	r6
	EEPROM_writer(ST_41_NBR_PASSWORDS_ADDR, &st_41_structure->nbr_passwords, 1);
 102a9a4:	4629      	mov	r1, r5
 102a9a6:	2201      	movs	r2, #1
 102a9a8:	f640 000e 	movw	r0, #2062	; 0x80e
 102a9ac:	47a0      	blx	r4
	EEPROM_writer(ST_41_PASSWORD_LEN_ADDR, &st_41_structure->password_len, 1);
 102a9ae:	1c69      	adds	r1, r5, #1
 102a9b0:	2201      	movs	r2, #1
 102a9b2:	f640 000f 	movw	r0, #2063	; 0x80f
 102a9b6:	47a0      	blx	r4
	EEPROM_writer(ST_41_NBR_KEYS_ADDR, &st_41_structure->nbr_keys, 1);
 102a9b8:	1ca9      	adds	r1, r5, #2
 102a9ba:	2201      	movs	r2, #1
 102a9bc:	f44f 6001 	mov.w	r0, #2064	; 0x810
 102a9c0:	47a0      	blx	r4
	EEPROM_writer(ST_41_KEY_LEN_ADDR, &st_41_structure->key_len, 1);
 102a9c2:	1ce9      	adds	r1, r5, #3
 102a9c4:	2201      	movs	r2, #1
 102a9c6:	f640 0011 	movw	r0, #2065	; 0x811
 102a9ca:	47a0      	blx	r4
	EEPROM_writer(ST_41_NBR_PERM_USED_ADDR, &st_41_structure->nbr_perm_used, 2);
 102a9cc:	1d29      	adds	r1, r5, #4
 102a9ce:	2202      	movs	r2, #2
 102a9d0:	f640 0012 	movw	r0, #2066	; 0x812
 102a9d4:	47a0      	blx	r4
	SM_APP_vChange_table_state(ST_41_PROG_STATE_ADDR, C1219_TABLE_FULL);
 102a9d6:	4633      	mov	r3, r6
 102a9d8:	2145      	movs	r1, #69	; 0x45
 102a9da:	f640 000b 	movw	r0, #2059	; 0x80b
}
 102a9de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	SM_APP_vChange_table_state(ST_41_PROG_STATE_ADDR, C1219_TABLE_FULL);
 102a9e2:	4718      	bx	r3
 102a9e4:	2001718c 	.word	0x2001718c
 102a9e8:	010203e9 	.word	0x010203e9
 102a9ec:	01017509 	.word	0x01017509

0102a9f0 <SECR_APP_bSt_40_execute_table_reading>:
bool SECR_APP_bSt_40_execute_table_reading(uint8_t *table_buffer) {
 102a9f0:	b410      	push	{r4}
	table_buffer[2] = MAX_NBR_KEYS;
 102a9f2:	2300      	movs	r3, #0
	table_buffer[0] = MAX_NBR_PASSWORDS;
 102a9f4:	2406      	movs	r4, #6
	table_buffer[1] = MAX_PASSWORD_LEN;
 102a9f6:	2114      	movs	r1, #20
	table_buffer[4] = (uint8_t)((MAX_NBR_PERM_USED & 0x00FF) >> 0);
 102a9f8:	2240      	movs	r2, #64	; 0x40
	table_buffer[0] = MAX_NBR_PASSWORDS;
 102a9fa:	7004      	strb	r4, [r0, #0]
	table_buffer[1] = MAX_PASSWORD_LEN;
 102a9fc:	7041      	strb	r1, [r0, #1]
	table_buffer[4] = (uint8_t)((MAX_NBR_PERM_USED & 0x00FF) >> 0);
 102a9fe:	7102      	strb	r2, [r0, #4]
	table_buffer[2] = MAX_NBR_KEYS;
 102aa00:	7083      	strb	r3, [r0, #2]
	table_buffer[3] = MAX_KEY_LEN;
 102aa02:	70c3      	strb	r3, [r0, #3]
	table_buffer[5] = (uint8_t)((MAX_NBR_PERM_USED & 0xFF00) >> 8);
 102aa04:	7143      	strb	r3, [r0, #5]
}
 102aa06:	bc10      	pop	{r4}
 102aa08:	2001      	movs	r0, #1
 102aa0a:	4770      	bx	lr

0102aa0c <SECR_APP_usSt_40_get_size>:
 102aa0c:	2006      	movs	r0, #6
 102aa0e:	4770      	bx	lr

0102aa10 <SECR_APP_bSt_41_restore_default_values>:
bool SECR_APP_bSt_41_restore_default_values(void) {
 102aa10:	b510      	push	{r4, lr}
	st_41 = st_41_temp;
 102aa12:	4b08      	ldr	r3, [pc, #32]	; (102aa34 <SECR_APP_bSt_41_restore_default_values+0x24>)
	SECR_APP_vSt_41_write_eeprom_values(&st_41);
 102aa14:	4908      	ldr	r1, [pc, #32]	; (102aa38 <SECR_APP_bSt_41_restore_default_values+0x28>)
	st_41 = st_41_temp;
 102aa16:	2200      	movs	r2, #0
 102aa18:	2014      	movs	r0, #20
 102aa1a:	2405      	movs	r4, #5
 102aa1c:	709a      	strb	r2, [r3, #2]
 102aa1e:	70da      	strb	r2, [r3, #3]
 102aa20:	809a      	strh	r2, [r3, #4]
 102aa22:	701c      	strb	r4, [r3, #0]
 102aa24:	7058      	strb	r0, [r3, #1]
	SECR_APP_vSt_41_write_eeprom_values(&st_41);
 102aa26:	4788      	blx	r1
	uint16_t crc = SM_APP_usSt_41_ram_calculate_crc();
 102aa28:	4b04      	ldr	r3, [pc, #16]	; (102aa3c <SECR_APP_bSt_41_restore_default_values+0x2c>)
 102aa2a:	4798      	blx	r3
	SM_APP_vSt_41_write_crc(crc);
 102aa2c:	4b04      	ldr	r3, [pc, #16]	; (102aa40 <SECR_APP_bSt_41_restore_default_values+0x30>)
 102aa2e:	4798      	blx	r3
}
 102aa30:	2001      	movs	r0, #1
 102aa32:	bd10      	pop	{r4, pc}
 102aa34:	2001718c 	.word	0x2001718c
 102aa38:	0102a995 	.word	0x0102a995
 102aa3c:	0101f831 	.word	0x0101f831
 102aa40:	0101f8e1 	.word	0x0101f8e1

0102aa44 <SECR_APP_bSt_41_refresh_ram>:
bool SECR_APP_bSt_41_refresh_ram(void) {
 102aa44:	b5f0      	push	{r4, r5, r6, r7, lr}
 102aa46:	4e2a      	ldr	r6, [pc, #168]	; (102aaf0 <SECR_APP_bSt_41_refresh_ram+0xac>)
 102aa48:	b083      	sub	sp, #12
 102aa4a:	2403      	movs	r4, #3
		st_41_structure->nbr_passwords = MAX_NBR_PASSWORDS;
 102aa4c:	2706      	movs	r7, #6
		is_ok = false;
 102aa4e:	2500      	movs	r5, #0
		SECR_APP_vSt_41_read_eeprom_values(&st_41_temp);
 102aa50:	4668      	mov	r0, sp
 102aa52:	47b0      	blx	r6
	if (st_41_structure->nbr_passwords > MAX_NBR_PASSWORDS) {
 102aa54:	f89d 3000 	ldrb.w	r3, [sp]
 102aa58:	2b06      	cmp	r3, #6
	if (st_41_structure->password_len > MAX_PASSWORD_LEN) {
 102aa5a:	f89d 3001 	ldrb.w	r3, [sp, #1]
		st_41_structure->nbr_passwords = MAX_NBR_PASSWORDS;
 102aa5e:	bf86      	itte	hi
 102aa60:	f88d 7000 	strbhi.w	r7, [sp]
		is_ok = false;
 102aa64:	2200      	movhi	r2, #0
	bool is_ok = true;
 102aa66:	2201      	movls	r2, #1
	if (st_41_structure->password_len > MAX_PASSWORD_LEN) {
 102aa68:	2b14      	cmp	r3, #20
	if (st_41_structure->nbr_keys > MAX_NBR_KEYS) {
 102aa6a:	f89d 3002 	ldrb.w	r3, [sp, #2]
	if (st_41_structure->password_len > MAX_PASSWORD_LEN) {
 102aa6e:	d92a      	bls.n	102aac6 <SECR_APP_bSt_41_refresh_ram+0x82>
		st_41_structure->password_len = MAX_PASSWORD_LEN;
 102aa70:	2214      	movs	r2, #20
 102aa72:	f88d 2001 	strb.w	r2, [sp, #1]
	if (st_41_structure->nbr_keys > MAX_NBR_KEYS) {
 102aa76:	b1eb      	cbz	r3, 102aab4 <SECR_APP_bSt_41_refresh_ram+0x70>
	if (st_41_structure->key_len > MAX_KEY_LEN) {
 102aa78:	f89d 3003 	ldrb.w	r3, [sp, #3]
		st_41_structure->nbr_keys = MAX_NBR_KEYS;
 102aa7c:	f88d 5002 	strb.w	r5, [sp, #2]
	if (st_41_structure->key_len > MAX_KEY_LEN) {
 102aa80:	b1e3      	cbz	r3, 102aabc <SECR_APP_bSt_41_refresh_ram+0x78>
	if (st_41_structure->nbr_perm_used > MAX_NBR_PERM_USED) {
 102aa82:	f8bd 3004 	ldrh.w	r3, [sp, #4]
		st_41_structure->key_len = MAX_KEY_LEN;
 102aa86:	f88d 5003 	strb.w	r5, [sp, #3]
	if (st_41_structure->nbr_perm_used > MAX_NBR_PERM_USED) {
 102aa8a:	2b40      	cmp	r3, #64	; 0x40
 102aa8c:	d902      	bls.n	102aa94 <SECR_APP_bSt_41_refresh_ram+0x50>
		st_41_structure->nbr_perm_used = MAX_NBR_PERM_USED;
 102aa8e:	2340      	movs	r3, #64	; 0x40
 102aa90:	f8ad 3004 	strh.w	r3, [sp, #4]
 102aa94:	1e63      	subs	r3, r4, #1
	for (uint8_t i = 0; i < 3; i++) {
 102aa96:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 102aa9a:	d1d9      	bne.n	102aa50 <SECR_APP_bSt_41_refresh_ram+0xc>
		st_41 = st_41_temp;
 102aa9c:	4b15      	ldr	r3, [pc, #84]	; (102aaf4 <SECR_APP_bSt_41_refresh_ram+0xb0>)
 102aa9e:	9800      	ldr	r0, [sp, #0]
 102aaa0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
		SECR_APP_vSt_41_write_eeprom_values(&st_41);
 102aaa4:	4a14      	ldr	r2, [pc, #80]	; (102aaf8 <SECR_APP_bSt_41_refresh_ram+0xb4>)
		st_41 = st_41_temp;
 102aaa6:	6018      	str	r0, [r3, #0]
 102aaa8:	8099      	strh	r1, [r3, #4]
		SECR_APP_vSt_41_write_eeprom_values(&st_41);
 102aaaa:	4790      	blx	r2
 102aaac:	4622      	mov	r2, r4
}
 102aaae:	4610      	mov	r0, r2
 102aab0:	b003      	add	sp, #12
 102aab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (st_41_structure->key_len > MAX_KEY_LEN) {
 102aab4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 102aab8:	2b00      	cmp	r3, #0
 102aaba:	d1e2      	bne.n	102aa82 <SECR_APP_bSt_41_refresh_ram+0x3e>
	if (st_41_structure->nbr_perm_used > MAX_NBR_PERM_USED) {
 102aabc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 102aac0:	2b40      	cmp	r3, #64	; 0x40
 102aac2:	d9e7      	bls.n	102aa94 <SECR_APP_bSt_41_refresh_ram+0x50>
 102aac4:	e7e3      	b.n	102aa8e <SECR_APP_bSt_41_refresh_ram+0x4a>
	if (st_41_structure->nbr_keys > MAX_NBR_KEYS) {
 102aac6:	2b00      	cmp	r3, #0
 102aac8:	d1d6      	bne.n	102aa78 <SECR_APP_bSt_41_refresh_ram+0x34>
	if (st_41_structure->key_len > MAX_KEY_LEN) {
 102aaca:	f89d 3003 	ldrb.w	r3, [sp, #3]
 102aace:	2b00      	cmp	r3, #0
 102aad0:	d1d7      	bne.n	102aa82 <SECR_APP_bSt_41_refresh_ram+0x3e>
	if (st_41_structure->nbr_perm_used > MAX_NBR_PERM_USED) {
 102aad2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 102aad6:	2b40      	cmp	r3, #64	; 0x40
 102aad8:	d8d9      	bhi.n	102aa8e <SECR_APP_bSt_41_refresh_ram+0x4a>
		if ( is_ok ) {
 102aada:	2a00      	cmp	r2, #0
 102aadc:	d0da      	beq.n	102aa94 <SECR_APP_bSt_41_refresh_ram+0x50>
			st_41 = st_41_temp;
 102aade:	4b05      	ldr	r3, [pc, #20]	; (102aaf4 <SECR_APP_bSt_41_refresh_ram+0xb0>)
 102aae0:	9800      	ldr	r0, [sp, #0]
 102aae2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 102aae6:	6018      	str	r0, [r3, #0]
}
 102aae8:	4610      	mov	r0, r2
			st_41 = st_41_temp;
 102aaea:	8099      	strh	r1, [r3, #4]
}
 102aaec:	b003      	add	sp, #12
 102aaee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 102aaf0:	0102a699 	.word	0x0102a699
 102aaf4:	2001718c 	.word	0x2001718c
 102aaf8:	0102a995 	.word	0x0102a995

0102aafc <SECR_APP_bLoad_st_41>:
bool SECR_APP_bLoad_st_41(void) {
 102aafc:	b510      	push	{r4, lr}
	if ( SM_APP_ucGet_table_state(ST_41_PROG_STATE_ADDR) != C1219_TABLE_FULL ) {
 102aafe:	f640 000b 	movw	r0, #2059	; 0x80b
 102ab02:	4b06      	ldr	r3, [pc, #24]	; (102ab1c <SECR_APP_bLoad_st_41+0x20>)
 102ab04:	4798      	blx	r3
 102ab06:	2845      	cmp	r0, #69	; 0x45
 102ab08:	d003      	beq.n	102ab12 <SECR_APP_bLoad_st_41+0x16>
		is_ok = SECR_APP_bSt_41_restore_default_values();
 102ab0a:	4b05      	ldr	r3, [pc, #20]	; (102ab20 <SECR_APP_bLoad_st_41+0x24>)
}
 102ab0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		is_ok = SECR_APP_bSt_41_restore_default_values();
 102ab10:	4718      	bx	r3
		is_ok = SECR_APP_bSt_41_refresh_ram();
 102ab12:	4b04      	ldr	r3, [pc, #16]	; (102ab24 <SECR_APP_bLoad_st_41+0x28>)
}
 102ab14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		is_ok = SECR_APP_bSt_41_refresh_ram();
 102ab18:	4718      	bx	r3
 102ab1a:	bf00      	nop
 102ab1c:	010203cd 	.word	0x010203cd
 102ab20:	0102aa11 	.word	0x0102aa11
 102ab24:	0102aa45 	.word	0x0102aa45

0102ab28 <SECR_APP_vCopy_st_41_ram>:
void SECR_APP_vCopy_st_41_ram(uint8_t* destination) {
 102ab28:	b470      	push	{r4, r5, r6}
 102ab2a:	4b07      	ldr	r3, [pc, #28]	; (102ab48 <SECR_APP_vCopy_st_41_ram+0x20>)
 102ab2c:	889a      	ldrh	r2, [r3, #4]
 102ab2e:	785c      	ldrb	r4, [r3, #1]
 102ab30:	7899      	ldrb	r1, [r3, #2]
 102ab32:	781d      	ldrb	r5, [r3, #0]
 102ab34:	78db      	ldrb	r3, [r3, #3]
	table_buffer[4] = (uint8_t)((st_41_source.nbr_perm_used & 0x00FF) >> 0);
 102ab36:	7102      	strb	r2, [r0, #4]
	table_buffer[5] = (uint8_t)((st_41_source.nbr_perm_used & 0xFF00) >> 8);
 102ab38:	0a16      	lsrs	r6, r2, #8
 102ab3a:	7146      	strb	r6, [r0, #5]
	table_buffer[0] = st_41_source.nbr_passwords;
 102ab3c:	7005      	strb	r5, [r0, #0]
	table_buffer[1] = st_41_source.password_len;
 102ab3e:	7044      	strb	r4, [r0, #1]
	table_buffer[2] = st_41_source.nbr_keys;
 102ab40:	7081      	strb	r1, [r0, #2]
	table_buffer[3] = st_41_source.key_len;
 102ab42:	70c3      	strb	r3, [r0, #3]
}
 102ab44:	bc70      	pop	{r4, r5, r6}
 102ab46:	4770      	bx	lr
 102ab48:	2001718c 	.word	0x2001718c

0102ab4c <SECR_APP_vCopy_st_41_nvm>:
void SECR_APP_vCopy_st_41_nvm(uint8_t* destination) {
 102ab4c:	b530      	push	{r4, r5, lr}
 102ab4e:	b083      	sub	sp, #12
 102ab50:	4604      	mov	r4, r0
	SECR_APP_vSt_41_read_eeprom_values(&st_41_aux);
 102ab52:	4b0b      	ldr	r3, [pc, #44]	; (102ab80 <SECR_APP_vCopy_st_41_nvm+0x34>)
 102ab54:	4668      	mov	r0, sp
 102ab56:	4798      	blx	r3
 102ab58:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	table_buffer[0] = st_41_source.nbr_passwords;
 102ab5c:	f89d 2000 	ldrb.w	r2, [sp]
 102ab60:	f89d 5001 	ldrb.w	r5, [sp, #1]
 102ab64:	f89d 0002 	ldrb.w	r0, [sp, #2]
 102ab68:	f89d 1003 	ldrb.w	r1, [sp, #3]
 102ab6c:	7022      	strb	r2, [r4, #0]
	table_buffer[5] = (uint8_t)((st_41_source.nbr_perm_used & 0xFF00) >> 8);
 102ab6e:	0a1a      	lsrs	r2, r3, #8
	table_buffer[1] = st_41_source.password_len;
 102ab70:	7065      	strb	r5, [r4, #1]
	table_buffer[2] = st_41_source.nbr_keys;
 102ab72:	70a0      	strb	r0, [r4, #2]
	table_buffer[3] = st_41_source.key_len;
 102ab74:	70e1      	strb	r1, [r4, #3]
	table_buffer[4] = (uint8_t)((st_41_source.nbr_perm_used & 0x00FF) >> 0);
 102ab76:	7123      	strb	r3, [r4, #4]
	table_buffer[5] = (uint8_t)((st_41_source.nbr_perm_used & 0xFF00) >> 8);
 102ab78:	7162      	strb	r2, [r4, #5]
}
 102ab7a:	b003      	add	sp, #12
 102ab7c:	bd30      	pop	{r4, r5, pc}
 102ab7e:	bf00      	nop
 102ab80:	0102a699 	.word	0x0102a699

0102ab84 <SECR_APP_vSt_41_recover_nvm>:
	SECR_APP_vSt_41_write_eeprom_values(&st_41);
 102ab84:	4b00      	ldr	r3, [pc, #0]	; (102ab88 <SECR_APP_vSt_41_recover_nvm+0x4>)
 102ab86:	4718      	bx	r3
 102ab88:	0102a995 	.word	0x0102a995

0102ab8c <SECR_APP_vSt_41_recover_ram>:
	SECR_APP_vSt_41_read_eeprom_values(&st_41);
 102ab8c:	4801      	ldr	r0, [pc, #4]	; (102ab94 <SECR_APP_vSt_41_recover_ram+0x8>)
 102ab8e:	4b02      	ldr	r3, [pc, #8]	; (102ab98 <SECR_APP_vSt_41_recover_ram+0xc>)
 102ab90:	4718      	bx	r3
 102ab92:	bf00      	nop
 102ab94:	2001718c 	.word	0x2001718c
 102ab98:	0102a699 	.word	0x0102a699

0102ab9c <SECR_APP_bSt_41_execute_table_reading>:
bool SECR_APP_bSt_41_execute_table_reading(uint8_t *table_buffer) {
 102ab9c:	b470      	push	{r4, r5, r6}
 102ab9e:	4b08      	ldr	r3, [pc, #32]	; (102abc0 <SECR_APP_bSt_41_execute_table_reading+0x24>)
 102aba0:	889a      	ldrh	r2, [r3, #4]
 102aba2:	785c      	ldrb	r4, [r3, #1]
 102aba4:	7899      	ldrb	r1, [r3, #2]
 102aba6:	781d      	ldrb	r5, [r3, #0]
 102aba8:	78db      	ldrb	r3, [r3, #3]
	table_buffer[4] = (uint8_t)((st_41_source.nbr_perm_used & 0x00FF) >> 0);
 102abaa:	7102      	strb	r2, [r0, #4]
	table_buffer[5] = (uint8_t)((st_41_source.nbr_perm_used & 0xFF00) >> 8);
 102abac:	0a16      	lsrs	r6, r2, #8
 102abae:	7146      	strb	r6, [r0, #5]
	table_buffer[0] = st_41_source.nbr_passwords;
 102abb0:	7005      	strb	r5, [r0, #0]
	table_buffer[1] = st_41_source.password_len;
 102abb2:	7044      	strb	r4, [r0, #1]
	table_buffer[2] = st_41_source.nbr_keys;
 102abb4:	7081      	strb	r1, [r0, #2]
	table_buffer[3] = st_41_source.key_len;
 102abb6:	70c3      	strb	r3, [r0, #3]
}
 102abb8:	bc70      	pop	{r4, r5, r6}
 102abba:	2001      	movs	r0, #1
 102abbc:	4770      	bx	lr
 102abbe:	bf00      	nop
 102abc0:	2001718c 	.word	0x2001718c

0102abc4 <SECR_APP_bSt_41_execute_table_writing>:
bool SECR_APP_bSt_41_execute_table_writing(uint8_t *table_buffer) {
 102abc4:	b570      	push	{r4, r5, r6, lr}
	st_41_temp.nbr_passwords = table_buffer[0];
 102abc6:	7802      	ldrb	r2, [r0, #0]
	st_41_temp.password_len = table_buffer[1];
 102abc8:	7843      	ldrb	r3, [r0, #1]
	st_41_temp.nbr_keys = table_buffer[2];
 102abca:	7885      	ldrb	r5, [r0, #2]
	st_41_temp.key_len = table_buffer[3];
 102abcc:	78c1      	ldrb	r1, [r0, #3]
	if (st_41_structure->nbr_passwords > MAX_NBR_PASSWORDS) {
 102abce:	2a06      	cmp	r2, #6
		is_ok = false;
 102abd0:	bf8a      	itet	hi
 102abd2:	2400      	movhi	r4, #0
	bool is_ok = true;
 102abd4:	2401      	movls	r4, #1
		st_41_structure->nbr_passwords = MAX_NBR_PASSWORDS;
 102abd6:	2206      	movhi	r2, #6
	if (st_41_structure->password_len > MAX_PASSWORD_LEN) {
 102abd8:	2b14      	cmp	r3, #20
		is_ok = false;
 102abda:	bf84      	itt	hi
 102abdc:	2400      	movhi	r4, #0
		st_41_structure->password_len = MAX_PASSWORD_LEN;
 102abde:	2314      	movhi	r3, #20
		is_ok = false;
 102abe0:	2d00      	cmp	r5, #0
 102abe2:	bf18      	it	ne
 102abe4:	2400      	movne	r4, #0
	if (st_41_structure->key_len > MAX_KEY_LEN) {
 102abe6:	b989      	cbnz	r1, 102ac0c <SECR_APP_bSt_41_execute_table_writing+0x48>
	st_41_temp.nbr_perm_used |= (uint16_t)(table_buffer[5] << 8);
 102abe8:	8885      	ldrh	r5, [r0, #4]
	if (st_41_structure->nbr_perm_used > MAX_NBR_PERM_USED) {
 102abea:	2d40      	cmp	r5, #64	; 0x40
 102abec:	d811      	bhi.n	102ac12 <SECR_APP_bSt_41_execute_table_writing+0x4e>
	if ( is_ok ) {
 102abee:	b174      	cbz	r4, 102ac0e <SECR_APP_bSt_41_execute_table_writing+0x4a>
		st_41 = st_41_temp;
 102abf0:	4809      	ldr	r0, [pc, #36]	; (102ac18 <SECR_APP_bSt_41_execute_table_writing+0x54>)
		SECR_APP_vSt_41_write_eeprom_values(&st_41);
 102abf2:	4e0a      	ldr	r6, [pc, #40]	; (102ac1c <SECR_APP_bSt_41_execute_table_writing+0x58>)
		st_41 = st_41_temp;
 102abf4:	7002      	strb	r2, [r0, #0]
 102abf6:	7081      	strb	r1, [r0, #2]
 102abf8:	70c1      	strb	r1, [r0, #3]
 102abfa:	7043      	strb	r3, [r0, #1]
 102abfc:	8085      	strh	r5, [r0, #4]
		SECR_APP_vSt_41_write_eeprom_values(&st_41);
 102abfe:	47b0      	blx	r6
		uint16_t crc = SM_APP_usSt_41_ram_calculate_crc();
 102ac00:	4b07      	ldr	r3, [pc, #28]	; (102ac20 <SECR_APP_bSt_41_execute_table_writing+0x5c>)
 102ac02:	4798      	blx	r3
		SM_APP_vSt_41_write_crc(crc);
 102ac04:	4b07      	ldr	r3, [pc, #28]	; (102ac24 <SECR_APP_bSt_41_execute_table_writing+0x60>)
 102ac06:	4798      	blx	r3
}
 102ac08:	4620      	mov	r0, r4
 102ac0a:	bd70      	pop	{r4, r5, r6, pc}
		is_ok = false;
 102ac0c:	2400      	movs	r4, #0
}
 102ac0e:	4620      	mov	r0, r4
 102ac10:	bd70      	pop	{r4, r5, r6, pc}
		is_ok = false;
 102ac12:	460c      	mov	r4, r1
}
 102ac14:	4620      	mov	r0, r4
 102ac16:	bd70      	pop	{r4, r5, r6, pc}
 102ac18:	2001718c 	.word	0x2001718c
 102ac1c:	0102a995 	.word	0x0102a995
 102ac20:	0101f831 	.word	0x0101f831
 102ac24:	0101f8e1 	.word	0x0101f8e1

0102ac28 <SECR_APP_usSt_41_get_size>:
}
 102ac28:	2006      	movs	r0, #6
 102ac2a:	4770      	bx	lr

0102ac2c <SECR_APP_bSt_42_restore_default_values>:
bool SECR_APP_bSt_42_restore_default_values(void) {
 102ac2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(st_42_temp.security_entries[0].password, DEFAULT_PASSWORD_0, MAX_PASSWORD_LEN);
 102ac30:	4c1f      	ldr	r4, [pc, #124]	; (102acb0 <SECR_APP_bSt_42_restore_default_values+0x84>)
	st_42 = st_42_temp;
 102ac32:	f8df 8090 	ldr.w	r8, [pc, #144]	; 102acc4 <SECR_APP_bSt_42_restore_default_values+0x98>
	memcpy(st_42_temp.security_entries[0].password, DEFAULT_PASSWORD_0, MAX_PASSWORD_LEN);
 102ac36:	46a6      	mov	lr, r4
 102ac38:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
bool SECR_APP_bSt_42_restore_default_values(void) {
 102ac3c:	b0c8      	sub	sp, #288	; 0x120
	memcpy(st_42_temp.security_entries[0].password, DEFAULT_PASSWORD_0, MAX_PASSWORD_LEN);
 102ac3e:	466f      	mov	r7, sp
	memcpy(st_42_temp.security_entries[1].password, DEFAULT_PASSWORD_1, MAX_PASSWORD_LEN);
 102ac40:	4625      	mov	r5, r4
	memcpy(st_42_temp.security_entries[0].password, DEFAULT_PASSWORD_0, MAX_PASSWORD_LEN);
 102ac42:	c70f      	stmia	r7!, {r0, r1, r2, r3}
	memcpy(st_42_temp.security_entries[1].password, DEFAULT_PASSWORD_1, MAX_PASSWORD_LEN);
 102ac44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 102ac46:	ae0c      	add	r6, sp, #48	; 0x30
	memcpy(st_42_temp.security_entries[2].password, DEFAULT_PASSWORD_2, MAX_PASSWORD_LEN);
 102ac48:	4625      	mov	r5, r4
	memcpy(st_42_temp.security_entries[1].password, DEFAULT_PASSWORD_1, MAX_PASSWORD_LEN);
 102ac4a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
	memcpy(st_42_temp.security_entries[2].password, DEFAULT_PASSWORD_2, MAX_PASSWORD_LEN);
 102ac4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 102ac4e:	ad18      	add	r5, sp, #96	; 0x60
 102ac50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
	memcpy(st_42_temp.security_entries[3].password, DEFAULT_PASSWORD_3, MAX_PASSWORD_LEN);
 102ac52:	46a4      	mov	ip, r4
 102ac54:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
	memcpy(st_42_temp.security_entries[0].password, DEFAULT_PASSWORD_0, MAX_PASSWORD_LEN);
 102ac58:	f8de e000 	ldr.w	lr, [lr]
	memcpy(st_42_temp.security_entries[1].password, DEFAULT_PASSWORD_1, MAX_PASSWORD_LEN);
 102ac5c:	f8c6 e000 	str.w	lr, [r6]
	memcpy(st_42_temp.security_entries[0].password, DEFAULT_PASSWORD_0, MAX_PASSWORD_LEN);
 102ac60:	f8c7 e000 	str.w	lr, [r7]
	memcpy(st_42_temp.security_entries[2].password, DEFAULT_PASSWORD_2, MAX_PASSWORD_LEN);
 102ac64:	f8c5 e000 	str.w	lr, [r5]
	memcpy(st_42_temp.security_entries[3].password, DEFAULT_PASSWORD_3, MAX_PASSWORD_LEN);
 102ac68:	ad24      	add	r5, sp, #144	; 0x90
 102ac6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
	memcpy(st_42_temp.security_entries[4].password, DEFAULT_PASSWORD_4, MAX_PASSWORD_LEN);
 102ac6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 102ac6e:	ac30      	add	r4, sp, #192	; 0xc0
 102ac70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	st_42 = st_42_temp;
 102ac72:	2601      	movs	r6, #1
	memcpy(st_42_temp.security_entries[3].password, DEFAULT_PASSWORD_3, MAX_PASSWORD_LEN);
 102ac74:	f8c5 e000 	str.w	lr, [r5]
	memcpy(st_42_temp.security_entries[4].password, DEFAULT_PASSWORD_4, MAX_PASSWORD_LEN);
 102ac78:	f8c4 e000 	str.w	lr, [r4]
	st_42 = st_42_temp;
 102ac7c:	4669      	mov	r1, sp
 102ac7e:	f44f 7290 	mov.w	r2, #288	; 0x120
 102ac82:	480c      	ldr	r0, [pc, #48]	; (102acb4 <SECR_APP_bSt_42_restore_default_values+0x88>)
 102ac84:	f88d 6014 	strb.w	r6, [sp, #20]
 102ac88:	f88d 6044 	strb.w	r6, [sp, #68]	; 0x44
 102ac8c:	f88d 6074 	strb.w	r6, [sp, #116]	; 0x74
 102ac90:	f88d 60a4 	strb.w	r6, [sp, #164]	; 0xa4
 102ac94:	f88d 60d4 	strb.w	r6, [sp, #212]	; 0xd4
 102ac98:	47c0      	blx	r8
	SECR_APP_vSt_42_write_eeprom_values(&st_42);
 102ac9a:	4b07      	ldr	r3, [pc, #28]	; (102acb8 <SECR_APP_bSt_42_restore_default_values+0x8c>)
 102ac9c:	4798      	blx	r3
	uint16_t crc = SM_APP_usSt_42_ram_calculate_crc();
 102ac9e:	4b07      	ldr	r3, [pc, #28]	; (102acbc <SECR_APP_bSt_42_restore_default_values+0x90>)
 102aca0:	4798      	blx	r3
	SM_APP_vSt_42_write_crc(crc);
 102aca2:	4b07      	ldr	r3, [pc, #28]	; (102acc0 <SECR_APP_bSt_42_restore_default_values+0x94>)
 102aca4:	4798      	blx	r3
}
 102aca6:	4630      	mov	r0, r6
 102aca8:	b048      	add	sp, #288	; 0x120
 102acaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 102acae:	bf00      	nop
 102acb0:	010318f8 	.word	0x010318f8
 102acb4:	20017194 	.word	0x20017194
 102acb8:	0102a91d 	.word	0x0102a91d
 102acbc:	0101f92d 	.word	0x0101f92d
 102acc0:	0101f9dd 	.word	0x0101f9dd
 102acc4:	01030a3d 	.word	0x01030a3d

0102acc8 <SECR_APP_bSt_42_refresh_ram>:
bool SECR_APP_bSt_42_refresh_ram(void) {
 102acc8:	b500      	push	{lr}
 102acca:	b0c9      	sub	sp, #292	; 0x124
		SECR_APP_vSt_42_read_eeprom_values(&st_42_temp);
 102accc:	4668      	mov	r0, sp
 102acce:	4b06      	ldr	r3, [pc, #24]	; (102ace8 <SECR_APP_bSt_42_refresh_ram+0x20>)
 102acd0:	4798      	blx	r3
			st_42 = st_42_temp;
 102acd2:	4669      	mov	r1, sp
 102acd4:	f44f 7290 	mov.w	r2, #288	; 0x120
 102acd8:	4b04      	ldr	r3, [pc, #16]	; (102acec <SECR_APP_bSt_42_refresh_ram+0x24>)
 102acda:	4805      	ldr	r0, [pc, #20]	; (102acf0 <SECR_APP_bSt_42_refresh_ram+0x28>)
 102acdc:	4798      	blx	r3
}
 102acde:	2001      	movs	r0, #1
 102ace0:	b049      	add	sp, #292	; 0x124
 102ace2:	f85d fb04 	ldr.w	pc, [sp], #4
 102ace6:	bf00      	nop
 102ace8:	0102a6dd 	.word	0x0102a6dd
 102acec:	01030a3d 	.word	0x01030a3d
 102acf0:	20017194 	.word	0x20017194

0102acf4 <SECR_APP_bLoad_st_42>:
bool SECR_APP_bLoad_st_42(void) {
 102acf4:	b510      	push	{r4, lr}
	if ( SM_APP_ucGet_table_state(ST_42_PROG_STATE_ADDR) != C1219_TABLE_FULL ) {
 102acf6:	f640 0017 	movw	r0, #2071	; 0x817
 102acfa:	4b06      	ldr	r3, [pc, #24]	; (102ad14 <SECR_APP_bLoad_st_42+0x20>)
 102acfc:	4798      	blx	r3
 102acfe:	2845      	cmp	r0, #69	; 0x45
 102ad00:	d003      	beq.n	102ad0a <SECR_APP_bLoad_st_42+0x16>
		is_ok = SECR_APP_bSt_42_restore_default_values();
 102ad02:	4b05      	ldr	r3, [pc, #20]	; (102ad18 <SECR_APP_bLoad_st_42+0x24>)
}
 102ad04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		is_ok = SECR_APP_bSt_42_restore_default_values();
 102ad08:	4718      	bx	r3
		is_ok = SECR_APP_bSt_42_refresh_ram();
 102ad0a:	4b04      	ldr	r3, [pc, #16]	; (102ad1c <SECR_APP_bLoad_st_42+0x28>)
}
 102ad0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		is_ok = SECR_APP_bSt_42_refresh_ram();
 102ad10:	4718      	bx	r3
 102ad12:	bf00      	nop
 102ad14:	010203cd 	.word	0x010203cd
 102ad18:	0102ac2d 	.word	0x0102ac2d
 102ad1c:	0102acc9 	.word	0x0102acc9

0102ad20 <SECR_APP_vCopy_st_42_ram>:
void SECR_APP_vCopy_st_42_ram(uint8_t* destination) {
 102ad20:	b5f0      	push	{r4, r5, r6, r7, lr}
 102ad22:	b0c7      	sub	sp, #284	; 0x11c
	SECR_APP_vSt_42_to_array(st_42, &destination[0]);
 102ad24:	4909      	ldr	r1, [pc, #36]	; (102ad4c <SECR_APP_vCopy_st_42_ram+0x2c>)
 102ad26:	9044      	str	r0, [sp, #272]	; 0x110
 102ad28:	680f      	ldr	r7, [r1, #0]
 102ad2a:	688d      	ldr	r5, [r1, #8]
 102ad2c:	68cc      	ldr	r4, [r1, #12]
 102ad2e:	684e      	ldr	r6, [r1, #4]
 102ad30:	4b07      	ldr	r3, [pc, #28]	; (102ad50 <SECR_APP_vCopy_st_42_ram+0x30>)
 102ad32:	3110      	adds	r1, #16
 102ad34:	f44f 7288 	mov.w	r2, #272	; 0x110
 102ad38:	4668      	mov	r0, sp
 102ad3a:	4798      	blx	r3
 102ad3c:	4623      	mov	r3, r4
 102ad3e:	4638      	mov	r0, r7
 102ad40:	4631      	mov	r1, r6
 102ad42:	462a      	mov	r2, r5
 102ad44:	4c03      	ldr	r4, [pc, #12]	; (102ad54 <SECR_APP_vCopy_st_42_ram+0x34>)
 102ad46:	47a0      	blx	r4
}
 102ad48:	b047      	add	sp, #284	; 0x11c
 102ad4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 102ad4c:	20017194 	.word	0x20017194
 102ad50:	01030a3d 	.word	0x01030a3d
 102ad54:	0102a77d 	.word	0x0102a77d

0102ad58 <SECR_APP_vCopy_st_42_nvm>:
void SECR_APP_vCopy_st_42_nvm(uint8_t* destination) {
 102ad58:	b530      	push	{r4, r5, lr}
 102ad5a:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
	SECR_APP_vSt_42_read_eeprom_values(&st_42_aux);
 102ad5e:	ac46      	add	r4, sp, #280	; 0x118
void SECR_APP_vCopy_st_42_nvm(uint8_t* destination) {
 102ad60:	4605      	mov	r5, r0
	SECR_APP_vSt_42_read_eeprom_values(&st_42_aux);
 102ad62:	4b08      	ldr	r3, [pc, #32]	; (102ad84 <SECR_APP_vCopy_st_42_nvm+0x2c>)
 102ad64:	4620      	mov	r0, r4
 102ad66:	4798      	blx	r3
	SECR_APP_vSt_42_to_array(st_42_aux, &destination[0]);
 102ad68:	a94a      	add	r1, sp, #296	; 0x128
 102ad6a:	f44f 7288 	mov.w	r2, #272	; 0x110
 102ad6e:	4668      	mov	r0, sp
 102ad70:	4b05      	ldr	r3, [pc, #20]	; (102ad88 <SECR_APP_vCopy_st_42_nvm+0x30>)
 102ad72:	9544      	str	r5, [sp, #272]	; 0x110
 102ad74:	4798      	blx	r3
 102ad76:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 102ad7a:	4c04      	ldr	r4, [pc, #16]	; (102ad8c <SECR_APP_vCopy_st_42_nvm+0x34>)
 102ad7c:	47a0      	blx	r4
}
 102ad7e:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 102ad82:	bd30      	pop	{r4, r5, pc}
 102ad84:	0102a6dd 	.word	0x0102a6dd
 102ad88:	01030a3d 	.word	0x01030a3d
 102ad8c:	0102a77d 	.word	0x0102a77d

0102ad90 <SECR_APP_vSt_42_recover_nvm>:
	SECR_APP_vSt_42_write_eeprom_values(&st_42);
 102ad90:	4b00      	ldr	r3, [pc, #0]	; (102ad94 <SECR_APP_vSt_42_recover_nvm+0x4>)
 102ad92:	4718      	bx	r3
 102ad94:	0102a91d 	.word	0x0102a91d

0102ad98 <SECR_APP_vSt_42_recover_ram>:
	SECR_APP_vSt_42_read_eeprom_values(&st_42);
 102ad98:	4801      	ldr	r0, [pc, #4]	; (102ada0 <SECR_APP_vSt_42_recover_ram+0x8>)
 102ad9a:	4b02      	ldr	r3, [pc, #8]	; (102ada4 <SECR_APP_vSt_42_recover_ram+0xc>)
 102ad9c:	4718      	bx	r3
 102ad9e:	bf00      	nop
 102ada0:	20017194 	.word	0x20017194
 102ada4:	0102a6dd 	.word	0x0102a6dd

0102ada8 <SECR_APP_bSt_42_execute_table_reading>:
bool SECR_APP_bSt_42_execute_table_reading(uint8_t *table_buffer) {
 102ada8:	b5f0      	push	{r4, r5, r6, r7, lr}
 102adaa:	b0c7      	sub	sp, #284	; 0x11c
	SECR_APP_vSt_42_to_array(st_42, &table_buffer[0]);
 102adac:	490a      	ldr	r1, [pc, #40]	; (102add8 <SECR_APP_bSt_42_execute_table_reading+0x30>)
 102adae:	9044      	str	r0, [sp, #272]	; 0x110
 102adb0:	680f      	ldr	r7, [r1, #0]
 102adb2:	688d      	ldr	r5, [r1, #8]
 102adb4:	68cc      	ldr	r4, [r1, #12]
 102adb6:	684e      	ldr	r6, [r1, #4]
 102adb8:	4b08      	ldr	r3, [pc, #32]	; (102addc <SECR_APP_bSt_42_execute_table_reading+0x34>)
 102adba:	3110      	adds	r1, #16
 102adbc:	f44f 7288 	mov.w	r2, #272	; 0x110
 102adc0:	4668      	mov	r0, sp
 102adc2:	4798      	blx	r3
 102adc4:	4638      	mov	r0, r7
 102adc6:	4623      	mov	r3, r4
 102adc8:	4631      	mov	r1, r6
 102adca:	462a      	mov	r2, r5
 102adcc:	4c04      	ldr	r4, [pc, #16]	; (102ade0 <SECR_APP_bSt_42_execute_table_reading+0x38>)
 102adce:	47a0      	blx	r4
}
 102add0:	2001      	movs	r0, #1
 102add2:	b047      	add	sp, #284	; 0x11c
 102add4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 102add6:	bf00      	nop
 102add8:	20017194 	.word	0x20017194
 102addc:	01030a3d 	.word	0x01030a3d
 102ade0:	0102a77d 	.word	0x0102a77d

0102ade4 <SECR_APP_bSt_42_execute_table_writing>:
bool SECR_APP_bSt_42_execute_table_writing(uint8_t *table_buffer) {
 102ade4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (uint8_t i = 0; i < st_41.nbr_passwords; i++) {
 102ade8:	4a1a      	ldr	r2, [pc, #104]	; (102ae54 <SECR_APP_bSt_42_execute_table_writing+0x70>)
 102adea:	7816      	ldrb	r6, [r2, #0]
bool SECR_APP_bSt_42_execute_table_writing(uint8_t *table_buffer) {
 102adec:	b0c8      	sub	sp, #288	; 0x120
	for (uint8_t i = 0; i < st_41.nbr_passwords; i++) {
 102adee:	b36e      	cbz	r6, 102ae4c <SECR_APP_bSt_42_execute_table_writing+0x68>
 102adf0:	3e01      	subs	r6, #1
 102adf2:	b2f6      	uxtb	r6, r6
 102adf4:	3601      	adds	r6, #1
 102adf6:	7855      	ldrb	r5, [r2, #1]
 102adf8:	4f17      	ldr	r7, [pc, #92]	; (102ae58 <SECR_APP_bSt_42_execute_table_writing+0x74>)
 102adfa:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 102adfe:	4682      	mov	sl, r0
 102ae00:	46e9      	mov	r9, sp
 102ae02:	eb0d 1606 	add.w	r6, sp, r6, lsl #4
 102ae06:	466b      	mov	r3, sp
 102ae08:	f105 0801 	add.w	r8, r5, #1
 102ae0c:	2400      	movs	r4, #0
		memcpy(&st_42_temp.security_entries[i].password, &table_buffer[k], st_41.password_len);
 102ae0e:	462a      	mov	r2, r5
 102ae10:	eb0a 0104 	add.w	r1, sl, r4
 102ae14:	4618      	mov	r0, r3
 102ae16:	47b8      	blx	r7
 102ae18:	1962      	adds	r2, r4, r5
 102ae1a:	4603      	mov	r3, r0
 102ae1c:	b2d2      	uxtb	r2, r2
 102ae1e:	3330      	adds	r3, #48	; 0x30
 102ae20:	4444      	add	r4, r8
		st_42_temp.security_entries[i].access_permissions = table_buffer[k++];
 102ae22:	f81a 2002 	ldrb.w	r2, [sl, r2]
 102ae26:	7502      	strb	r2, [r0, #20]
	for (uint8_t i = 0; i < st_41.nbr_passwords; i++) {
 102ae28:	429e      	cmp	r6, r3
 102ae2a:	b2e4      	uxtb	r4, r4
 102ae2c:	d1ef      	bne.n	102ae0e <SECR_APP_bSt_42_execute_table_writing+0x2a>
		st_42 = st_42_temp;
 102ae2e:	4649      	mov	r1, r9
 102ae30:	f44f 7290 	mov.w	r2, #288	; 0x120
 102ae34:	4809      	ldr	r0, [pc, #36]	; (102ae5c <SECR_APP_bSt_42_execute_table_writing+0x78>)
 102ae36:	47b8      	blx	r7
		SECR_APP_vSt_42_write_eeprom_values(&st_42);
 102ae38:	4b09      	ldr	r3, [pc, #36]	; (102ae60 <SECR_APP_bSt_42_execute_table_writing+0x7c>)
 102ae3a:	4798      	blx	r3
		uint16_t crc = SM_APP_usSt_42_ram_calculate_crc();
 102ae3c:	4b09      	ldr	r3, [pc, #36]	; (102ae64 <SECR_APP_bSt_42_execute_table_writing+0x80>)
 102ae3e:	4798      	blx	r3
		SM_APP_vSt_42_write_crc(crc);
 102ae40:	4b09      	ldr	r3, [pc, #36]	; (102ae68 <SECR_APP_bSt_42_execute_table_writing+0x84>)
 102ae42:	4798      	blx	r3
}
 102ae44:	2001      	movs	r0, #1
 102ae46:	b048      	add	sp, #288	; 0x120
 102ae48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 102ae4c:	4f02      	ldr	r7, [pc, #8]	; (102ae58 <SECR_APP_bSt_42_execute_table_writing+0x74>)
 102ae4e:	46e9      	mov	r9, sp
 102ae50:	e7ed      	b.n	102ae2e <SECR_APP_bSt_42_execute_table_writing+0x4a>
 102ae52:	bf00      	nop
 102ae54:	2001718c 	.word	0x2001718c
 102ae58:	01030a3d 	.word	0x01030a3d
 102ae5c:	20017194 	.word	0x20017194
 102ae60:	0102a91d 	.word	0x0102a91d
 102ae64:	0101f92d 	.word	0x0101f92d
 102ae68:	0101f9dd 	.word	0x0101f9dd

0102ae6c <SECR_APP_usSt_42_get_size>:
	return (uint16_t)( (st_41.nbr_passwords) * (st_41.password_len + 1) );
 102ae6c:	4b03      	ldr	r3, [pc, #12]	; (102ae7c <SECR_APP_usSt_42_get_size+0x10>)
 102ae6e:	785a      	ldrb	r2, [r3, #1]
 102ae70:	7818      	ldrb	r0, [r3, #0]
 102ae72:	fb02 0000 	mla	r0, r2, r0, r0
}
 102ae76:	b280      	uxth	r0, r0
 102ae78:	4770      	bx	lr
 102ae7a:	bf00      	nop
 102ae7c:	2001718c 	.word	0x2001718c

0102ae80 <SECR_APP_bSt_43_restore_default_values>:
bool SECR_APP_bSt_43_restore_default_values(void) {
 102ae80:	b510      	push	{r4, lr}
	st_43 = st_43_temp;
 102ae82:	4b08      	ldr	r3, [pc, #32]	; (102aea4 <SECR_APP_bSt_43_restore_default_values+0x24>)
	SECR_APP_vSt_43_write_eeprom_values(&st_43);
 102ae84:	4908      	ldr	r1, [pc, #32]	; (102aea8 <SECR_APP_bSt_43_restore_default_values+0x28>)
	st_43 = st_43_temp;
 102ae86:	2200      	movs	r2, #0
 102ae88:	2401      	movs	r4, #1
 102ae8a:	801a      	strh	r2, [r3, #0]
 102ae8c:	809a      	strh	r2, [r3, #4]
 102ae8e:	709c      	strb	r4, [r3, #2]
 102ae90:	70dc      	strb	r4, [r3, #3]
 102ae92:	719c      	strb	r4, [r3, #6]
 102ae94:	71dc      	strb	r4, [r3, #7]
	SECR_APP_vSt_43_write_eeprom_values(&st_43);
 102ae96:	4788      	blx	r1
	uint16_t crc = SM_APP_usSt_43_ram_calculate_crc();
 102ae98:	4b04      	ldr	r3, [pc, #16]	; (102aeac <SECR_APP_bSt_43_restore_default_values+0x2c>)
 102ae9a:	4798      	blx	r3
	SM_APP_vSt_43_write_crc(crc);
 102ae9c:	4b04      	ldr	r3, [pc, #16]	; (102aeb0 <SECR_APP_bSt_43_restore_default_values+0x30>)
 102ae9e:	4798      	blx	r3
}
 102aea0:	4620      	mov	r0, r4
 102aea2:	bd10      	pop	{r4, pc}
 102aea4:	20007fcc 	.word	0x20007fcc
 102aea8:	0102a8b5 	.word	0x0102a8b5
 102aeac:	0101fa29 	.word	0x0101fa29
 102aeb0:	0101fad9 	.word	0x0101fad9

0102aeb4 <SECR_APP_bLoad_st_43>:
bool SECR_APP_bLoad_st_43(void) {
 102aeb4:	b510      	push	{r4, lr}
	if ( SM_APP_ucGet_table_state(ST_43_PROG_STATE_ADDR) != C1219_TABLE_FULL ) {
 102aeb6:	f640 00d7 	movw	r0, #2263	; 0x8d7
bool SECR_APP_bLoad_st_43(void) {
 102aeba:	b082      	sub	sp, #8
	if ( SM_APP_ucGet_table_state(ST_43_PROG_STATE_ADDR) != C1219_TABLE_FULL ) {
 102aebc:	4b09      	ldr	r3, [pc, #36]	; (102aee4 <SECR_APP_bLoad_st_43+0x30>)
 102aebe:	4798      	blx	r3
 102aec0:	2845      	cmp	r0, #69	; 0x45
 102aec2:	d003      	beq.n	102aecc <SECR_APP_bLoad_st_43+0x18>
		is_ok = SECR_APP_bSt_43_restore_default_values();
 102aec4:	4b08      	ldr	r3, [pc, #32]	; (102aee8 <SECR_APP_bLoad_st_43+0x34>)
 102aec6:	4798      	blx	r3
}
 102aec8:	b002      	add	sp, #8
 102aeca:	bd10      	pop	{r4, pc}
		SECR_APP_vSt_43_read_eeprom_values(&st_43_temp);
 102aecc:	4668      	mov	r0, sp
 102aece:	4b07      	ldr	r3, [pc, #28]	; (102aeec <SECR_APP_bLoad_st_43+0x38>)
 102aed0:	4798      	blx	r3
			st_43 = st_43_temp;
 102aed2:	e89d 0003 	ldmia.w	sp, {r0, r1}
 102aed6:	4b06      	ldr	r3, [pc, #24]	; (102aef0 <SECR_APP_bLoad_st_43+0x3c>)
 102aed8:	e883 0003 	stmia.w	r3, {r0, r1}
		is_ok = SECR_APP_bSt_43_refresh_ram();
 102aedc:	2001      	movs	r0, #1
}
 102aede:	b002      	add	sp, #8
 102aee0:	bd10      	pop	{r4, pc}
 102aee2:	bf00      	nop
 102aee4:	010203cd 	.word	0x010203cd
 102aee8:	0102ae81 	.word	0x0102ae81
 102aeec:	0102a731 	.word	0x0102a731
 102aef0:	20007fcc 	.word	0x20007fcc

0102aef4 <SECR_APP_vCopy_st_43_ram>:
void SECR_APP_vCopy_st_43_ram(uint8_t* destination) {
 102aef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 102aef6:	4b0a      	ldr	r3, [pc, #40]	; (102af20 <SECR_APP_vCopy_st_43_ram+0x2c>)
 102aef8:	889a      	ldrh	r2, [r3, #4]
 102aefa:	8819      	ldrh	r1, [r3, #0]
 102aefc:	799c      	ldrb	r4, [r3, #6]
 102aefe:	78de      	ldrb	r6, [r3, #3]
 102af00:	789f      	ldrb	r7, [r3, #2]
 102af02:	79db      	ldrb	r3, [r3, #7]
	table_buffer[7] = st_43_source.procedure_default.write;
 102af04:	71c3      	strb	r3, [r0, #7]
	table_buffer[1] = (uint8_t)(st_43_source.table_default.access_table_default >> 8);
 102af06:	ea4f 2e11 	mov.w	lr, r1, lsr #8
	table_buffer[5] = (uint8_t)(st_43_source.procedure_default.access_table_default >> 8);
 102af0a:	0a15      	lsrs	r5, r2, #8
	table_buffer[1] = (uint8_t)(st_43_source.table_default.access_table_default >> 8);
 102af0c:	f880 e001 	strb.w	lr, [r0, #1]
	table_buffer[0] = (uint8_t)(st_43_source.table_default.access_table_default >> 0);
 102af10:	7001      	strb	r1, [r0, #0]
	table_buffer[2] = st_43_source.table_default.read;
 102af12:	7087      	strb	r7, [r0, #2]
	table_buffer[3] = st_43_source.table_default.write;
 102af14:	70c6      	strb	r6, [r0, #3]
	table_buffer[4] = (uint8_t)(st_43_source.procedure_default.access_table_default >> 0);
 102af16:	7102      	strb	r2, [r0, #4]
	table_buffer[5] = (uint8_t)(st_43_source.procedure_default.access_table_default >> 8);
 102af18:	7145      	strb	r5, [r0, #5]
	table_buffer[6] = st_43_source.procedure_default.read;
 102af1a:	7184      	strb	r4, [r0, #6]
	table_buffer[7] = st_43_source.procedure_default.write;
 102af1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 102af1e:	bf00      	nop
 102af20:	20007fcc 	.word	0x20007fcc

0102af24 <SECR_APP_vCopy_st_43_nvm>:
void SECR_APP_vCopy_st_43_nvm(uint8_t* destination) {
 102af24:	b5f0      	push	{r4, r5, r6, r7, lr}
 102af26:	b083      	sub	sp, #12
 102af28:	4604      	mov	r4, r0
	SECR_APP_vSt_43_read_eeprom_values(&st_43_aux);
 102af2a:	4b0d      	ldr	r3, [pc, #52]	; (102af60 <SECR_APP_vCopy_st_43_nvm+0x3c>)
 102af2c:	4668      	mov	r0, sp
 102af2e:	4798      	blx	r3
 102af30:	f8bd 3000 	ldrh.w	r3, [sp]
 102af34:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 102af38:	f89d 7002 	ldrb.w	r7, [sp, #2]
 102af3c:	f89d 6003 	ldrb.w	r6, [sp, #3]
 102af40:	f89d 0006 	ldrb.w	r0, [sp, #6]
 102af44:	f89d 1007 	ldrb.w	r1, [sp, #7]
	table_buffer[0] = (uint8_t)(st_43_source.table_default.access_table_default >> 0);
 102af48:	7023      	strb	r3, [r4, #0]
	table_buffer[5] = (uint8_t)(st_43_source.procedure_default.access_table_default >> 8);
 102af4a:	0a15      	lsrs	r5, r2, #8
	table_buffer[1] = (uint8_t)(st_43_source.table_default.access_table_default >> 8);
 102af4c:	0a1b      	lsrs	r3, r3, #8
 102af4e:	7063      	strb	r3, [r4, #1]
	table_buffer[2] = st_43_source.table_default.read;
 102af50:	70a7      	strb	r7, [r4, #2]
	table_buffer[3] = st_43_source.table_default.write;
 102af52:	70e6      	strb	r6, [r4, #3]
	table_buffer[4] = (uint8_t)(st_43_source.procedure_default.access_table_default >> 0);
 102af54:	7122      	strb	r2, [r4, #4]
	table_buffer[5] = (uint8_t)(st_43_source.procedure_default.access_table_default >> 8);
 102af56:	7165      	strb	r5, [r4, #5]
	table_buffer[6] = st_43_source.procedure_default.read;
 102af58:	71a0      	strb	r0, [r4, #6]
	table_buffer[7] = st_43_source.procedure_default.write;
 102af5a:	71e1      	strb	r1, [r4, #7]
}
 102af5c:	b003      	add	sp, #12
 102af5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 102af60:	0102a731 	.word	0x0102a731

0102af64 <SECR_APP_vSt_43_recover_nvm>:
	SECR_APP_vSt_43_write_eeprom_values(&st_43);
 102af64:	4b00      	ldr	r3, [pc, #0]	; (102af68 <SECR_APP_vSt_43_recover_nvm+0x4>)
 102af66:	4718      	bx	r3
 102af68:	0102a8b5 	.word	0x0102a8b5

0102af6c <SECR_APP_vSt_43_recover_ram>:
	SECR_APP_vSt_43_read_eeprom_values(&st_43);
 102af6c:	4801      	ldr	r0, [pc, #4]	; (102af74 <SECR_APP_vSt_43_recover_ram+0x8>)
 102af6e:	4b02      	ldr	r3, [pc, #8]	; (102af78 <SECR_APP_vSt_43_recover_ram+0xc>)
 102af70:	4718      	bx	r3
 102af72:	bf00      	nop
 102af74:	20007fcc 	.word	0x20007fcc
 102af78:	0102a731 	.word	0x0102a731

0102af7c <SECR_APP_bSt_43_execute_table_reading>:
bool SECR_APP_bSt_43_execute_table_reading(uint8_t *table_buffer) {
 102af7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 102af7e:	4b0a      	ldr	r3, [pc, #40]	; (102afa8 <SECR_APP_bSt_43_execute_table_reading+0x2c>)
 102af80:	889a      	ldrh	r2, [r3, #4]
 102af82:	8819      	ldrh	r1, [r3, #0]
 102af84:	799c      	ldrb	r4, [r3, #6]
 102af86:	78de      	ldrb	r6, [r3, #3]
 102af88:	789f      	ldrb	r7, [r3, #2]
 102af8a:	79db      	ldrb	r3, [r3, #7]
	table_buffer[7] = st_43_source.procedure_default.write;
 102af8c:	71c3      	strb	r3, [r0, #7]
	table_buffer[1] = (uint8_t)(st_43_source.table_default.access_table_default >> 8);
 102af8e:	ea4f 2e11 	mov.w	lr, r1, lsr #8
	table_buffer[5] = (uint8_t)(st_43_source.procedure_default.access_table_default >> 8);
 102af92:	0a15      	lsrs	r5, r2, #8
	table_buffer[1] = (uint8_t)(st_43_source.table_default.access_table_default >> 8);
 102af94:	f880 e001 	strb.w	lr, [r0, #1]
	table_buffer[0] = (uint8_t)(st_43_source.table_default.access_table_default >> 0);
 102af98:	7001      	strb	r1, [r0, #0]
	table_buffer[2] = st_43_source.table_default.read;
 102af9a:	7087      	strb	r7, [r0, #2]
	table_buffer[3] = st_43_source.table_default.write;
 102af9c:	70c6      	strb	r6, [r0, #3]
	table_buffer[4] = (uint8_t)(st_43_source.procedure_default.access_table_default >> 0);
 102af9e:	7102      	strb	r2, [r0, #4]
	table_buffer[5] = (uint8_t)(st_43_source.procedure_default.access_table_default >> 8);
 102afa0:	7145      	strb	r5, [r0, #5]
	table_buffer[6] = st_43_source.procedure_default.read;
 102afa2:	7184      	strb	r4, [r0, #6]
}
 102afa4:	2001      	movs	r0, #1
 102afa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 102afa8:	20007fcc 	.word	0x20007fcc

0102afac <SECR_APP_bSt_43_execute_table_writing>:
bool SECR_APP_bSt_43_execute_table_writing(uint8_t *table_buffer) {
 102afac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		st_43 = st_43_temp;
 102afae:	4b0b      	ldr	r3, [pc, #44]	; (102afdc <SECR_APP_bSt_43_execute_table_writing+0x30>)
	st_43_temp.table_default.access_table_default |= (uint16_t)(table_buffer[1] << 8);
 102afb0:	f8b0 e000 	ldrh.w	lr, [r0]
	st_43_temp.table_default.read = table_buffer[2];
 102afb4:	7887      	ldrb	r7, [r0, #2]
	st_43_temp.table_default.write = table_buffer[3];
 102afb6:	78c6      	ldrb	r6, [r0, #3]
	st_43_temp.procedure_default.access_table_default |= (uint16_t)(table_buffer[5] << 8);
 102afb8:	8885      	ldrh	r5, [r0, #4]
	st_43_temp.procedure_default.read = table_buffer[6];
 102afba:	7984      	ldrb	r4, [r0, #6]
	st_43_temp.procedure_default.write = table_buffer[7];
 102afbc:	79c1      	ldrb	r1, [r0, #7]
		st_43 = st_43_temp;
 102afbe:	f8a3 e000 	strh.w	lr, [r3]
 102afc2:	71d9      	strb	r1, [r3, #7]
		SECR_APP_vSt_43_write_eeprom_values(&st_43);
 102afc4:	4a06      	ldr	r2, [pc, #24]	; (102afe0 <SECR_APP_bSt_43_execute_table_writing+0x34>)
		st_43 = st_43_temp;
 102afc6:	709f      	strb	r7, [r3, #2]
 102afc8:	70de      	strb	r6, [r3, #3]
 102afca:	809d      	strh	r5, [r3, #4]
 102afcc:	719c      	strb	r4, [r3, #6]
		SECR_APP_vSt_43_write_eeprom_values(&st_43);
 102afce:	4790      	blx	r2
		uint16_t crc = SM_APP_usSt_43_ram_calculate_crc();
 102afd0:	4b04      	ldr	r3, [pc, #16]	; (102afe4 <SECR_APP_bSt_43_execute_table_writing+0x38>)
 102afd2:	4798      	blx	r3
		SM_APP_vSt_43_write_crc(crc);
 102afd4:	4b04      	ldr	r3, [pc, #16]	; (102afe8 <SECR_APP_bSt_43_execute_table_writing+0x3c>)
 102afd6:	4798      	blx	r3
}
 102afd8:	2001      	movs	r0, #1
 102afda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 102afdc:	20007fcc 	.word	0x20007fcc
 102afe0:	0102a8b5 	.word	0x0102a8b5
 102afe4:	0101fa29 	.word	0x0101fa29
 102afe8:	0101fad9 	.word	0x0101fad9

0102afec <SECR_APP_usSt_43_get_size>:
}
 102afec:	2008      	movs	r0, #8
 102afee:	4770      	bx	lr

0102aff0 <SECR_APP_bSt_44_restore_default_values>:
bool SECR_APP_bSt_44_restore_default_values(void) {
 102aff0:	b510      	push	{r4, lr}
	for ( i = 0; i < st_41.nbr_perm_used; i++ ) {
 102aff2:	4b11      	ldr	r3, [pc, #68]	; (102b038 <SECR_APP_bSt_44_restore_default_values+0x48>)
 102aff4:	8898      	ldrh	r0, [r3, #4]
bool SECR_APP_bSt_44_restore_default_values(void) {
 102aff6:	b0c0      	sub	sp, #256	; 0x100
 102aff8:	4669      	mov	r1, sp
	for ( i = 0; i < st_41.nbr_perm_used; i++ ) {
 102affa:	b178      	cbz	r0, 102b01c <SECR_APP_bSt_44_restore_default_values+0x2c>
 102affc:	3801      	subs	r0, #1
 102affe:	b280      	uxth	r0, r0
 102b000:	3001      	adds	r0, #1
 102b002:	4669      	mov	r1, sp
 102b004:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
 102b008:	466b      	mov	r3, sp
		st_44_temp.access_control[i].access_table_def = DEFAULT_ACCESS_TABLE_DEF;
 102b00a:	f240 74ff 	movw	r4, #2047	; 0x7ff
		st_44_temp.access_control[i].read = DEFAULT_DEF_CTRL_ACCESS_READ;
 102b00e:	2200      	movs	r2, #0
		st_44_temp.access_control[i].access_table_def = DEFAULT_ACCESS_TABLE_DEF;
 102b010:	801c      	strh	r4, [r3, #0]
		st_44_temp.access_control[i].read = DEFAULT_DEF_CTRL_ACCESS_READ;
 102b012:	709a      	strb	r2, [r3, #2]
		st_44_temp.access_control[i].write = DEFAULT_DEF_CTRL_ACCESS_WRITE;
 102b014:	70da      	strb	r2, [r3, #3]
 102b016:	3304      	adds	r3, #4
	for ( i = 0; i < st_41.nbr_perm_used; i++ ) {
 102b018:	4283      	cmp	r3, r0
 102b01a:	d1f9      	bne.n	102b010 <SECR_APP_bSt_44_restore_default_values+0x20>
	st_44 = st_44_temp;
 102b01c:	f44f 7280 	mov.w	r2, #256	; 0x100
 102b020:	4b06      	ldr	r3, [pc, #24]	; (102b03c <SECR_APP_bSt_44_restore_default_values+0x4c>)
 102b022:	4807      	ldr	r0, [pc, #28]	; (102b040 <SECR_APP_bSt_44_restore_default_values+0x50>)
 102b024:	4798      	blx	r3
	SECR_APP_vSt_44_write_eeprom_values(&st_44);
 102b026:	4b07      	ldr	r3, [pc, #28]	; (102b044 <SECR_APP_bSt_44_restore_default_values+0x54>)
 102b028:	4798      	blx	r3
	uint16_t crc = SM_APP_usSt_44_ram_calculate_crc();
 102b02a:	4b07      	ldr	r3, [pc, #28]	; (102b048 <SECR_APP_bSt_44_restore_default_values+0x58>)
 102b02c:	4798      	blx	r3
	SM_APP_vSt_44_write_crc(crc);
 102b02e:	4b07      	ldr	r3, [pc, #28]	; (102b04c <SECR_APP_bSt_44_restore_default_values+0x5c>)
 102b030:	4798      	blx	r3
}
 102b032:	2001      	movs	r0, #1
 102b034:	b040      	add	sp, #256	; 0x100
 102b036:	bd10      	pop	{r4, pc}
 102b038:	2001718c 	.word	0x2001718c
 102b03c:	01030a3d 	.word	0x01030a3d
 102b040:	20007fd4 	.word	0x20007fd4
 102b044:	0102a839 	.word	0x0102a839
 102b048:	0101fb35 	.word	0x0101fb35
 102b04c:	0101fbf5 	.word	0x0101fbf5

0102b050 <SECR_APP_bSt_44_refresh_ram>:
bool SECR_APP_bSt_44_refresh_ram(void) {
 102b050:	b500      	push	{lr}
 102b052:	b0c1      	sub	sp, #260	; 0x104
		SECR_APP_vSt_44_read_eeprom_values(&st_44_temp);
 102b054:	4668      	mov	r0, sp
 102b056:	4b06      	ldr	r3, [pc, #24]	; (102b070 <SECR_APP_bSt_44_refresh_ram+0x20>)
 102b058:	4798      	blx	r3
			st_44 = st_44_temp;
 102b05a:	4669      	mov	r1, sp
 102b05c:	f44f 7280 	mov.w	r2, #256	; 0x100
 102b060:	4b04      	ldr	r3, [pc, #16]	; (102b074 <SECR_APP_bSt_44_refresh_ram+0x24>)
 102b062:	4805      	ldr	r0, [pc, #20]	; (102b078 <SECR_APP_bSt_44_refresh_ram+0x28>)
 102b064:	4798      	blx	r3
}
 102b066:	2001      	movs	r0, #1
 102b068:	b041      	add	sp, #260	; 0x104
 102b06a:	f85d fb04 	ldr.w	pc, [sp], #4
 102b06e:	bf00      	nop
 102b070:	0102a7dd 	.word	0x0102a7dd
 102b074:	01030a3d 	.word	0x01030a3d
 102b078:	20007fd4 	.word	0x20007fd4

0102b07c <SECR_APP_bLoad_st_44>:
bool SECR_APP_bLoad_st_44(void) {
 102b07c:	b510      	push	{r4, lr}
	if ( SM_APP_ucGet_table_state(ST_44_PROG_STATE_ADDR) != C1219_TABLE_FULL ) {
 102b07e:	f640 00e6 	movw	r0, #2278	; 0x8e6
 102b082:	4b06      	ldr	r3, [pc, #24]	; (102b09c <SECR_APP_bLoad_st_44+0x20>)
 102b084:	4798      	blx	r3
 102b086:	2845      	cmp	r0, #69	; 0x45
 102b088:	d003      	beq.n	102b092 <SECR_APP_bLoad_st_44+0x16>
		is_ok = SECR_APP_bSt_44_restore_default_values();
 102b08a:	4b05      	ldr	r3, [pc, #20]	; (102b0a0 <SECR_APP_bLoad_st_44+0x24>)
}
 102b08c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		is_ok = SECR_APP_bSt_44_restore_default_values();
 102b090:	4718      	bx	r3
		is_ok = SECR_APP_bSt_44_refresh_ram();
 102b092:	4b04      	ldr	r3, [pc, #16]	; (102b0a4 <SECR_APP_bLoad_st_44+0x28>)
}
 102b094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		is_ok = SECR_APP_bSt_44_refresh_ram();
 102b098:	4718      	bx	r3
 102b09a:	bf00      	nop
 102b09c:	010203cd 	.word	0x010203cd
 102b0a0:	0102aff1 	.word	0x0102aff1
 102b0a4:	0102b051 	.word	0x0102b051

0102b0a8 <SECR_APP_vCopy_st_44_ram>:
void SECR_APP_vCopy_st_44_ram(uint8_t* destination) {
 102b0a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for ( uint16_t i = 0; i < st_41.nbr_perm_used; i++) {
 102b0ac:	4e16      	ldr	r6, [pc, #88]	; (102b108 <SECR_APP_vCopy_st_44_ram+0x60>)
 102b0ae:	4b17      	ldr	r3, [pc, #92]	; (102b10c <SECR_APP_vCopy_st_44_ram+0x64>)
 102b0b0:	4917      	ldr	r1, [pc, #92]	; (102b110 <SECR_APP_vCopy_st_44_ram+0x68>)
void SECR_APP_vCopy_st_44_ram(uint8_t* destination) {
 102b0b2:	b0c0      	sub	sp, #256	; 0x100
 102b0b4:	4604      	mov	r4, r0
 102b0b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 102b0ba:	4668      	mov	r0, sp
 102b0bc:	4798      	blx	r3
	for ( uint16_t i = 0; i < st_41.nbr_perm_used; i++) {
 102b0be:	88b3      	ldrh	r3, [r6, #4]
 102b0c0:	b1fb      	cbz	r3, 102b102 <SECR_APP_vCopy_st_44_ram+0x5a>
 102b0c2:	2702      	movs	r7, #2
 102b0c4:	2300      	movs	r3, #0
		table_buffer[k++] = (uint8_t)((st_44_source.access_control[i].access_table_def & 0x00FF) >> 0);
 102b0c6:	009a      	lsls	r2, r3, #2
		table_buffer[k++] = st_44_source.access_control[i].read;
 102b0c8:	eb0d 0102 	add.w	r1, sp, r2
		table_buffer[k++] = (uint8_t)((st_44_source.access_control[i].access_table_def & 0x00FF) >> 0);
 102b0cc:	f83d 5023 	ldrh.w	r5, [sp, r3, lsl #2]
		table_buffer[k++] = st_44_source.access_control[i].read;
 102b0d0:	f891 c002 	ldrb.w	ip, [r1, #2]
		table_buffer[k++] = st_44_source.access_control[i].write;
 102b0d4:	f891 e003 	ldrb.w	lr, [r1, #3]
		table_buffer[k++] = (uint8_t)((st_44_source.access_control[i].access_table_def & 0x00FF) >> 0);
 102b0d8:	1e78      	subs	r0, r7, #1
		table_buffer[k++] = st_44_source.access_control[i].read;
 102b0da:	1c79      	adds	r1, r7, #1
		table_buffer[k++] = (uint8_t)((st_44_source.access_control[i].access_table_def & 0x00FF) >> 0);
 102b0dc:	b292      	uxth	r2, r2
		table_buffer[k++] = st_44_source.access_control[i].write;
 102b0de:	b289      	uxth	r1, r1
		table_buffer[k++] = (uint8_t)((st_44_source.access_control[i].access_table_def & 0xFF00) >> 8);
 102b0e0:	b280      	uxth	r0, r0
 102b0e2:	ea4f 2815 	mov.w	r8, r5, lsr #8
		table_buffer[k++] = (uint8_t)((st_44_source.access_control[i].access_table_def & 0x00FF) >> 0);
 102b0e6:	54a5      	strb	r5, [r4, r2]
		table_buffer[k++] = (uint8_t)((st_44_source.access_control[i].access_table_def & 0xFF00) >> 8);
 102b0e8:	f804 8000 	strb.w	r8, [r4, r0]
		table_buffer[k++] = st_44_source.access_control[i].read;
 102b0ec:	f804 c007 	strb.w	ip, [r4, r7]
		table_buffer[k++] = st_44_source.access_control[i].write;
 102b0f0:	f804 e001 	strb.w	lr, [r4, r1]
	for ( uint16_t i = 0; i < st_41.nbr_perm_used; i++) {
 102b0f4:	3301      	adds	r3, #1
 102b0f6:	88b2      	ldrh	r2, [r6, #4]
 102b0f8:	b29b      	uxth	r3, r3
 102b0fa:	1d39      	adds	r1, r7, #4
 102b0fc:	429a      	cmp	r2, r3
 102b0fe:	b28f      	uxth	r7, r1
 102b100:	d8e1      	bhi.n	102b0c6 <SECR_APP_vCopy_st_44_ram+0x1e>
}
 102b102:	b040      	add	sp, #256	; 0x100
 102b104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 102b108:	2001718c 	.word	0x2001718c
 102b10c:	01030a3d 	.word	0x01030a3d
 102b110:	20007fd4 	.word	0x20007fd4

0102b114 <SECR_APP_vCopy_st_44_nvm>:
void SECR_APP_vCopy_st_44_nvm(uint8_t* destination) {
 102b114:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 102b118:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
	SECR_APP_vSt_44_read_eeprom_values(&st_44_aux);
 102b11c:	4b19      	ldr	r3, [pc, #100]	; (102b184 <SECR_APP_vCopy_st_44_nvm+0x70>)
void SECR_APP_vCopy_st_44_nvm(uint8_t* destination) {
 102b11e:	4604      	mov	r4, r0
 102b120:	ae40      	add	r6, sp, #256	; 0x100
	SECR_APP_vSt_44_read_eeprom_values(&st_44_aux);
 102b122:	4668      	mov	r0, sp
 102b124:	4798      	blx	r3
 102b126:	4b18      	ldr	r3, [pc, #96]	; (102b188 <SECR_APP_vCopy_st_44_nvm+0x74>)
 102b128:	4669      	mov	r1, sp
 102b12a:	4630      	mov	r0, r6
 102b12c:	f44f 7280 	mov.w	r2, #256	; 0x100
 102b130:	4798      	blx	r3
	for ( uint16_t i = 0; i < st_41.nbr_perm_used; i++) {
 102b132:	f8df e058 	ldr.w	lr, [pc, #88]	; 102b18c <SECR_APP_vCopy_st_44_nvm+0x78>
 102b136:	f8be 3004 	ldrh.w	r3, [lr, #4]
 102b13a:	b1fb      	cbz	r3, 102b17c <SECR_APP_vCopy_st_44_nvm+0x68>
 102b13c:	2202      	movs	r2, #2
 102b13e:	2300      	movs	r3, #0
		table_buffer[k++] = (uint8_t)((st_44_source.access_control[i].access_table_def & 0x00FF) >> 0);
 102b140:	0099      	lsls	r1, r3, #2
		table_buffer[k++] = st_44_source.access_control[i].read;
 102b142:	1870      	adds	r0, r6, r1
		table_buffer[k++] = (uint8_t)((st_44_source.access_control[i].access_table_def & 0x00FF) >> 0);
 102b144:	f836 7023 	ldrh.w	r7, [r6, r3, lsl #2]
		table_buffer[k++] = st_44_source.access_control[i].read;
 102b148:	f890 c002 	ldrb.w	ip, [r0, #2]
		table_buffer[k++] = st_44_source.access_control[i].write;
 102b14c:	f890 8003 	ldrb.w	r8, [r0, #3]
		table_buffer[k++] = (uint8_t)((st_44_source.access_control[i].access_table_def & 0x00FF) >> 0);
 102b150:	1e55      	subs	r5, r2, #1
		table_buffer[k++] = st_44_source.access_control[i].read;
 102b152:	1c50      	adds	r0, r2, #1
		table_buffer[k++] = (uint8_t)((st_44_source.access_control[i].access_table_def & 0x00FF) >> 0);
 102b154:	b289      	uxth	r1, r1
		table_buffer[k++] = (uint8_t)((st_44_source.access_control[i].access_table_def & 0xFF00) >> 8);
 102b156:	b2ad      	uxth	r5, r5
		table_buffer[k++] = st_44_source.access_control[i].write;
 102b158:	b280      	uxth	r0, r0
		table_buffer[k++] = (uint8_t)((st_44_source.access_control[i].access_table_def & 0xFF00) >> 8);
 102b15a:	ea4f 2917 	mov.w	r9, r7, lsr #8
		table_buffer[k++] = (uint8_t)((st_44_source.access_control[i].access_table_def & 0x00FF) >> 0);
 102b15e:	5467      	strb	r7, [r4, r1]
		table_buffer[k++] = (uint8_t)((st_44_source.access_control[i].access_table_def & 0xFF00) >> 8);
 102b160:	f804 9005 	strb.w	r9, [r4, r5]
		table_buffer[k++] = st_44_source.access_control[i].read;
 102b164:	f804 c002 	strb.w	ip, [r4, r2]
		table_buffer[k++] = st_44_source.access_control[i].write;
 102b168:	f804 8000 	strb.w	r8, [r4, r0]
	for ( uint16_t i = 0; i < st_41.nbr_perm_used; i++) {
 102b16c:	3301      	adds	r3, #1
 102b16e:	f8be 1004 	ldrh.w	r1, [lr, #4]
 102b172:	b29b      	uxth	r3, r3
 102b174:	3204      	adds	r2, #4
 102b176:	4299      	cmp	r1, r3
 102b178:	b292      	uxth	r2, r2
 102b17a:	d8e1      	bhi.n	102b140 <SECR_APP_vCopy_st_44_nvm+0x2c>
}
 102b17c:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
 102b180:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 102b184:	0102a7dd 	.word	0x0102a7dd
 102b188:	01030a3d 	.word	0x01030a3d
 102b18c:	2001718c 	.word	0x2001718c

0102b190 <SECR_APP_vSt_44_recover_nvm>:
	SECR_APP_vSt_44_write_eeprom_values(&st_44);
 102b190:	4b00      	ldr	r3, [pc, #0]	; (102b194 <SECR_APP_vSt_44_recover_nvm+0x4>)
 102b192:	4718      	bx	r3
 102b194:	0102a839 	.word	0x0102a839

0102b198 <SECR_APP_vSt_44_recover_ram>:
	SECR_APP_vSt_44_read_eeprom_values(&st_44);
 102b198:	4801      	ldr	r0, [pc, #4]	; (102b1a0 <SECR_APP_vSt_44_recover_ram+0x8>)
 102b19a:	4b02      	ldr	r3, [pc, #8]	; (102b1a4 <SECR_APP_vSt_44_recover_ram+0xc>)
 102b19c:	4718      	bx	r3
 102b19e:	bf00      	nop
 102b1a0:	20007fd4 	.word	0x20007fd4
 102b1a4:	0102a7dd 	.word	0x0102a7dd

0102b1a8 <SECR_APP_bSt_44_execute_table_reading>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SECR_APP_bSt_44_execute_table_reading(uint8_t *table_buffer) {
 102b1a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for ( uint16_t i = 0; i < st_41.nbr_perm_used; i++) {
 102b1ac:	4e17      	ldr	r6, [pc, #92]	; (102b20c <SECR_APP_bSt_44_execute_table_reading+0x64>)
 102b1ae:	4b18      	ldr	r3, [pc, #96]	; (102b210 <SECR_APP_bSt_44_execute_table_reading+0x68>)
 102b1b0:	4918      	ldr	r1, [pc, #96]	; (102b214 <SECR_APP_bSt_44_execute_table_reading+0x6c>)
bool SECR_APP_bSt_44_execute_table_reading(uint8_t *table_buffer) {
 102b1b2:	b0c0      	sub	sp, #256	; 0x100
 102b1b4:	4604      	mov	r4, r0
 102b1b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 102b1ba:	4668      	mov	r0, sp
 102b1bc:	4798      	blx	r3
	for ( uint16_t i = 0; i < st_41.nbr_perm_used; i++) {
 102b1be:	88b3      	ldrh	r3, [r6, #4]
 102b1c0:	b1fb      	cbz	r3, 102b202 <SECR_APP_bSt_44_execute_table_reading+0x5a>
 102b1c2:	2702      	movs	r7, #2
 102b1c4:	2300      	movs	r3, #0
		table_buffer[k++] = (uint8_t)((st_44_source.access_control[i].access_table_def & 0x00FF) >> 0);
 102b1c6:	009a      	lsls	r2, r3, #2
		table_buffer[k++] = st_44_source.access_control[i].read;
 102b1c8:	eb0d 0102 	add.w	r1, sp, r2
		table_buffer[k++] = (uint8_t)((st_44_source.access_control[i].access_table_def & 0x00FF) >> 0);
 102b1cc:	f83d 5023 	ldrh.w	r5, [sp, r3, lsl #2]
		table_buffer[k++] = st_44_source.access_control[i].read;
 102b1d0:	f891 c002 	ldrb.w	ip, [r1, #2]
		table_buffer[k++] = st_44_source.access_control[i].write;
 102b1d4:	f891 e003 	ldrb.w	lr, [r1, #3]
		table_buffer[k++] = (uint8_t)((st_44_source.access_control[i].access_table_def & 0x00FF) >> 0);
 102b1d8:	1e78      	subs	r0, r7, #1
		table_buffer[k++] = st_44_source.access_control[i].read;
 102b1da:	1c79      	adds	r1, r7, #1
		table_buffer[k++] = (uint8_t)((st_44_source.access_control[i].access_table_def & 0x00FF) >> 0);
 102b1dc:	b292      	uxth	r2, r2
		table_buffer[k++] = st_44_source.access_control[i].write;
 102b1de:	b289      	uxth	r1, r1
		table_buffer[k++] = (uint8_t)((st_44_source.access_control[i].access_table_def & 0xFF00) >> 8);
 102b1e0:	b280      	uxth	r0, r0
 102b1e2:	ea4f 2815 	mov.w	r8, r5, lsr #8
		table_buffer[k++] = (uint8_t)((st_44_source.access_control[i].access_table_def & 0x00FF) >> 0);
 102b1e6:	54a5      	strb	r5, [r4, r2]
		table_buffer[k++] = (uint8_t)((st_44_source.access_control[i].access_table_def & 0xFF00) >> 8);
 102b1e8:	f804 8000 	strb.w	r8, [r4, r0]
		table_buffer[k++] = st_44_source.access_control[i].read;
 102b1ec:	f804 c007 	strb.w	ip, [r4, r7]
		table_buffer[k++] = st_44_source.access_control[i].write;
 102b1f0:	f804 e001 	strb.w	lr, [r4, r1]
	for ( uint16_t i = 0; i < st_41.nbr_perm_used; i++) {
 102b1f4:	3301      	adds	r3, #1
 102b1f6:	88b2      	ldrh	r2, [r6, #4]
 102b1f8:	b29b      	uxth	r3, r3
 102b1fa:	1d39      	adds	r1, r7, #4
 102b1fc:	429a      	cmp	r2, r3
 102b1fe:	b28f      	uxth	r7, r1
 102b200:	d8e1      	bhi.n	102b1c6 <SECR_APP_bSt_44_execute_table_reading+0x1e>
	
	SECR_APP_vSt_44_to_array(st_44, &table_buffer[0]);
	
	return true;
}
 102b202:	2001      	movs	r0, #1
 102b204:	b040      	add	sp, #256	; 0x100
 102b206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 102b20a:	bf00      	nop
 102b20c:	2001718c 	.word	0x2001718c
 102b210:	01030a3d 	.word	0x01030a3d
 102b214:	20007fd4 	.word	0x20007fd4

0102b218 <SECR_APP_bSt_44_execute_table_writing>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SECR_APP_bSt_44_execute_table_writing(uint8_t *table_buffer) {
 102b218:	b5f0      	push	{r4, r5, r6, r7, lr}
	
	bool is_ok = false;
	uint16_t k = 0;
	ST_44_TYPE st_44_temp;
	
	for ( uint16_t i = 0; i < st_41.nbr_perm_used; i++) {
 102b21a:	4b14      	ldr	r3, [pc, #80]	; (102b26c <SECR_APP_bSt_44_execute_table_writing+0x54>)
 102b21c:	889f      	ldrh	r7, [r3, #4]
bool SECR_APP_bSt_44_execute_table_writing(uint8_t *table_buffer) {
 102b21e:	b0c1      	sub	sp, #260	; 0x104
 102b220:	4669      	mov	r1, sp
	for ( uint16_t i = 0; i < st_41.nbr_perm_used; i++) {
 102b222:	b1a7      	cbz	r7, 102b24e <SECR_APP_bSt_44_execute_table_writing+0x36>
 102b224:	3f01      	subs	r7, #1
 102b226:	b2bf      	uxth	r7, r7
 102b228:	3701      	adds	r7, #1
 102b22a:	4669      	mov	r1, sp
 102b22c:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 102b230:	466b      	mov	r3, sp
		
		st_44_temp.access_control[i].access_table_def = table_buffer[k++];
		st_44_temp.access_control[i].access_table_def |= (table_buffer[k++] << 8);
 102b232:	7845      	ldrb	r5, [r0, #1]
 102b234:	7802      	ldrb	r2, [r0, #0]
		st_44_temp.access_control[i].read = table_buffer[k++];
 102b236:	7886      	ldrb	r6, [r0, #2]
		st_44_temp.access_control[i].write = table_buffer[k++];
 102b238:	78c4      	ldrb	r4, [r0, #3]
		st_44_temp.access_control[i].read = table_buffer[k++];
 102b23a:	709e      	strb	r6, [r3, #2]
 102b23c:	3004      	adds	r0, #4
		st_44_temp.access_control[i].access_table_def |= (table_buffer[k++] << 8);
 102b23e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
	for ( uint16_t i = 0; i < st_41.nbr_perm_used; i++) {
 102b242:	4287      	cmp	r7, r0
		st_44_temp.access_control[i].access_table_def |= (table_buffer[k++] << 8);
 102b244:	801a      	strh	r2, [r3, #0]
		st_44_temp.access_control[i].write = table_buffer[k++];
 102b246:	70dc      	strb	r4, [r3, #3]
 102b248:	f103 0304 	add.w	r3, r3, #4
	for ( uint16_t i = 0; i < st_41.nbr_perm_used; i++) {
 102b24c:	d1f1      	bne.n	102b232 <SECR_APP_bSt_44_execute_table_writing+0x1a>
	
	is_ok = SECR_APP_bSt_44_validate_data(&st_44_temp);
	
	if ( is_ok ) {
		
		st_44 = st_44_temp;
 102b24e:	f44f 7280 	mov.w	r2, #256	; 0x100
 102b252:	4b07      	ldr	r3, [pc, #28]	; (102b270 <SECR_APP_bSt_44_execute_table_writing+0x58>)
 102b254:	4807      	ldr	r0, [pc, #28]	; (102b274 <SECR_APP_bSt_44_execute_table_writing+0x5c>)
 102b256:	4798      	blx	r3
		SECR_APP_vSt_44_write_eeprom_values(&st_44);
 102b258:	4b07      	ldr	r3, [pc, #28]	; (102b278 <SECR_APP_bSt_44_execute_table_writing+0x60>)
 102b25a:	4798      	blx	r3
		uint16_t crc = SM_APP_usSt_44_ram_calculate_crc();
 102b25c:	4b07      	ldr	r3, [pc, #28]	; (102b27c <SECR_APP_bSt_44_execute_table_writing+0x64>)
 102b25e:	4798      	blx	r3
		SM_APP_vSt_44_write_crc(crc);
 102b260:	4b07      	ldr	r3, [pc, #28]	; (102b280 <SECR_APP_bSt_44_execute_table_writing+0x68>)
 102b262:	4798      	blx	r3
	}
	
	return is_ok;	
}
 102b264:	2001      	movs	r0, #1
 102b266:	b041      	add	sp, #260	; 0x104
 102b268:	bdf0      	pop	{r4, r5, r6, r7, pc}
 102b26a:	bf00      	nop
 102b26c:	2001718c 	.word	0x2001718c
 102b270:	01030a3d 	.word	0x01030a3d
 102b274:	20007fd4 	.word	0x20007fd4
 102b278:	0102a839 	.word	0x0102a839
 102b27c:	0101fb35 	.word	0x0101fb35
 102b280:	0101fbf5 	.word	0x0101fbf5

0102b284 <SECR_APP_usSt_44_get_size>:
 * \retval void
 ******************************************************************************
 */
uint16_t SECR_APP_usSt_44_get_size(void) {

	return (uint16_t)(4 * st_41.nbr_perm_used);
 102b284:	4b02      	ldr	r3, [pc, #8]	; (102b290 <SECR_APP_usSt_44_get_size+0xc>)
 102b286:	8898      	ldrh	r0, [r3, #4]
 102b288:	0080      	lsls	r0, r0, #2
 102b28a:	b280      	uxth	r0, r0
}
 102b28c:	4770      	bx	lr
 102b28e:	bf00      	nop
 102b290:	2001718c 	.word	0x2001718c

0102b294 <SECR_APP_bCheck_access_to_read_table>:
 * 
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SECR_APP_bCheck_access_to_read_table(SECURITY_USER_INFO_TYPE user_info) {
 102b294:	b084      	sub	sp, #16
 102b296:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
			permissions_ok = true;
		}
		else {
			
			/* Read default access permissions for all tables */
			EEPROM_reader(ST_43_ACCESS_TABLE_DEFAULT_ADDR, &access_control.access_table_def, 2);								
 102b29a:	4d32      	ldr	r5, [pc, #200]	; (102b364 <SECR_APP_bCheck_access_to_read_table+0xd0>)
 102b29c:	4e32      	ldr	r6, [pc, #200]	; (102b368 <SECR_APP_bCheck_access_to_read_table+0xd4>)
 102b29e:	4f33      	ldr	r7, [pc, #204]	; (102b36c <SECR_APP_bCheck_access_to_read_table+0xd8>)
bool SECR_APP_bCheck_access_to_read_table(SECURITY_USER_INFO_TYPE user_info) {
 102b2a0:	b087      	sub	sp, #28
 102b2a2:	ac0e      	add	r4, sp, #56	; 0x38
 102b2a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			EEPROM_reader(ST_43_TABLE_ACCESS_PERM_BFLD_READ_ADDR, &access_control.read, 1);
 102b2a8:	f105 0802 	add.w	r8, r5, #2
 102b2ac:	2403      	movs	r4, #3
		strcpy((char*)master_password, MASTER_PASSWORD);
 102b2ae:	f8df c0c4 	ldr.w	ip, [pc, #196]	; 102b374 <SECR_APP_bCheck_access_to_read_table+0xe0>
 102b2b2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 102b2b6:	f10d 0e04 	add.w	lr, sp, #4
 102b2ba:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 102b2be:	e89c 0003 	ldmia.w	ip, {r0, r1}
 102b2c2:	f84e 0b04 	str.w	r0, [lr], #4
		if ( memcmp( (const char*)master_password, (const char*)user_info.password, MAX_PASSWORD_LEN) == 0 ) {
 102b2c6:	2214      	movs	r2, #20
		strcpy((char*)master_password, MASTER_PASSWORD);
 102b2c8:	f88e 1000 	strb.w	r1, [lr]
		if ( memcmp( (const char*)master_password, (const char*)user_info.password, MAX_PASSWORD_LEN) == 0 ) {
 102b2cc:	a801      	add	r0, sp, #4
 102b2ce:	f10d 013b 	add.w	r1, sp, #59	; 0x3b
 102b2d2:	47b0      	blx	r6
 102b2d4:	b928      	cbnz	r0, 102b2e2 <SECR_APP_bCheck_access_to_read_table+0x4e>
			permissions_ok = true;
 102b2d6:	2001      	movs	r0, #1
		
		nbr_retries++;
	}
	
	return permissions_ok;
}
 102b2d8:	b007      	add	sp, #28
 102b2da:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 102b2de:	b004      	add	sp, #16
 102b2e0:	4770      	bx	lr
			EEPROM_reader(ST_43_ACCESS_TABLE_DEFAULT_ADDR, &access_control.access_table_def, 2);								
 102b2e2:	2202      	movs	r2, #2
 102b2e4:	491f      	ldr	r1, [pc, #124]	; (102b364 <SECR_APP_bCheck_access_to_read_table+0xd0>)
 102b2e6:	f640 00da 	movw	r0, #2266	; 0x8da
 102b2ea:	47b8      	blx	r7
			EEPROM_reader(ST_43_TABLE_ACCESS_PERM_BFLD_READ_ADDR, &access_control.read, 1);
 102b2ec:	2201      	movs	r2, #1
 102b2ee:	4641      	mov	r1, r8
 102b2f0:	f640 00dc 	movw	r0, #2268	; 0x8dc
 102b2f4:	47b8      	blx	r7
			for ( uint16_t i = 0; i < st_41.nbr_perm_used; i++) {																
 102b2f6:	4b1e      	ldr	r3, [pc, #120]	; (102b370 <SECR_APP_bCheck_access_to_read_table+0xdc>)
			access_control.read |= DEFAULT_TABLE_ACCESS_CTRL_READ;
 102b2f8:	78aa      	ldrb	r2, [r5, #2]
			for ( uint16_t i = 0; i < st_41.nbr_perm_used; i++) {																
 102b2fa:	8898      	ldrh	r0, [r3, #4]
			access_control.read |= DEFAULT_TABLE_ACCESS_CTRL_READ;
 102b2fc:	f042 0201 	orr.w	r2, r2, #1
 102b300:	70aa      	strb	r2, [r5, #2]
			for ( uint16_t i = 0; i < st_41.nbr_perm_used; i++) {																
 102b302:	b1c8      	cbz	r0, 102b338 <SECR_APP_bCheck_access_to_read_table+0xa4>
 102b304:	3801      	subs	r0, #1
 102b306:	b280      	uxth	r0, r0
					 ( (st_44.access_control[i].access_table_def & TBL_PROC_NBR_bm) == (user_info.tbl_proc_id & TBL_PROC_NBR_bm) )			&&
 102b308:	f8bd c038 	ldrh.w	ip, [sp, #56]	; 0x38
					 ( (bool)(st_44.access_control[i].access_table_def & STD_VS_MFG_FLAG_bm) >> STD_VS_MFG_FLAG_bp) == user_info.mfg_flag   ){
 102b30c:	f89d 903a 	ldrb.w	r9, [sp, #58]	; 0x3a
 102b310:	f8df e064 	ldr.w	lr, [pc, #100]	; 102b378 <SECR_APP_bCheck_access_to_read_table+0xe4>
 102b314:	3001      	adds	r0, #1
 102b316:	2300      	movs	r3, #0
				if ( ( (st_44.access_control[i].access_table_def & PROC_FLAG_bm) == 0 )														&&
 102b318:	f83e 1023 	ldrh.w	r1, [lr, r3, lsl #2]
					 ( (st_44.access_control[i].access_table_def & TBL_PROC_NBR_bm) == (user_info.tbl_proc_id & TBL_PROC_NBR_bm) )			&&
 102b31c:	ea81 020c 	eor.w	r2, r1, ip
				if ( ( (st_44.access_control[i].access_table_def & PROC_FLAG_bm) == 0 )														&&
 102b320:	f411 5f80 	tst.w	r1, #4096	; 0x1000
 102b324:	f3c2 020a 	ubfx	r2, r2, #0, #11
 102b328:	d103      	bne.n	102b332 <SECR_APP_bCheck_access_to_read_table+0x9e>
 102b32a:	b912      	cbnz	r2, 102b332 <SECR_APP_bCheck_access_to_read_table+0x9e>
					 ( (st_44.access_control[i].access_table_def & TBL_PROC_NBR_bm) == (user_info.tbl_proc_id & TBL_PROC_NBR_bm) )			&&
 102b32c:	f1b9 0f00 	cmp.w	r9, #0
 102b330:	d010      	beq.n	102b354 <SECR_APP_bCheck_access_to_read_table+0xc0>
 102b332:	3301      	adds	r3, #1
			for ( uint16_t i = 0; i < st_41.nbr_perm_used; i++) {																
 102b334:	4283      	cmp	r3, r0
 102b336:	d1ef      	bne.n	102b318 <SECR_APP_bCheck_access_to_read_table+0x84>
			if ( (access_control.access_table_def & UNRESTRICTED_READ_bm) == UNRESTRICTED_READ_bm ) {					
 102b338:	882b      	ldrh	r3, [r5, #0]
 102b33a:	049b      	lsls	r3, r3, #18
 102b33c:	d4cb      	bmi.n	102b2d6 <SECR_APP_bCheck_access_to_read_table+0x42>
				if ( (user_info.access_permissions & access_control.read) > 0 ) {												
 102b33e:	f89d 204f 	ldrb.w	r2, [sp, #79]	; 0x4f
 102b342:	78ab      	ldrb	r3, [r5, #2]
 102b344:	421a      	tst	r2, r3
 102b346:	d1c6      	bne.n	102b2d6 <SECR_APP_bCheck_access_to_read_table+0x42>
 102b348:	3c01      	subs	r4, #1
	while( (nbr_retries < 3) && (permissions_ok == false) ) {
 102b34a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 102b34e:	d1ae      	bne.n	102b2ae <SECR_APP_bCheck_access_to_read_table+0x1a>
 102b350:	4620      	mov	r0, r4
 102b352:	e7c1      	b.n	102b2d8 <SECR_APP_bCheck_access_to_read_table+0x44>
					access_control = st_44.access_control[i];
 102b354:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 102b358:	602b      	str	r3, [r5, #0]
			if ( (access_control.access_table_def & UNRESTRICTED_READ_bm) == UNRESTRICTED_READ_bm ) {					
 102b35a:	882b      	ldrh	r3, [r5, #0]
 102b35c:	049b      	lsls	r3, r3, #18
 102b35e:	d4ba      	bmi.n	102b2d6 <SECR_APP_bCheck_access_to_read_table+0x42>
 102b360:	e7ed      	b.n	102b33e <SECR_APP_bCheck_access_to_read_table+0xaa>
 102b362:	bf00      	nop
 102b364:	20007fc8 	.word	0x20007fc8
 102b368:	010309dd 	.word	0x010309dd
 102b36c:	01017511 	.word	0x01017511
 102b370:	2001718c 	.word	0x2001718c
 102b374:	01031648 	.word	0x01031648
 102b378:	20007fd4 	.word	0x20007fd4

0102b37c <SECR_APP_bCheck_access_to_write_table>:
 * 
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SECR_APP_bCheck_access_to_write_table(SECURITY_USER_INFO_TYPE user_info) {
 102b37c:	b084      	sub	sp, #16
 102b37e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
			permissions_ok = true;
		}
		else {
			
			/* Read default access permissions for all tables */
			EEPROM_reader(ST_43_ACCESS_TABLE_DEFAULT_ADDR, &access_control.access_table_def, 2);
 102b382:	4d32      	ldr	r5, [pc, #200]	; (102b44c <SECR_APP_bCheck_access_to_write_table+0xd0>)
 102b384:	4e32      	ldr	r6, [pc, #200]	; (102b450 <SECR_APP_bCheck_access_to_write_table+0xd4>)
 102b386:	4f33      	ldr	r7, [pc, #204]	; (102b454 <SECR_APP_bCheck_access_to_write_table+0xd8>)
bool SECR_APP_bCheck_access_to_write_table(SECURITY_USER_INFO_TYPE user_info) {
 102b388:	b087      	sub	sp, #28
 102b38a:	ac0e      	add	r4, sp, #56	; 0x38
 102b38c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			EEPROM_reader(ST_43_TABLE_ACCESS_PERM_BFLD_WRITE_ADDR, &access_control.write, 1);
 102b390:	f105 0803 	add.w	r8, r5, #3
 102b394:	2403      	movs	r4, #3
		strcpy((char*)master_password, MASTER_PASSWORD);
 102b396:	f8df c0c4 	ldr.w	ip, [pc, #196]	; 102b45c <SECR_APP_bCheck_access_to_write_table+0xe0>
 102b39a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 102b39e:	f10d 0e04 	add.w	lr, sp, #4
 102b3a2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 102b3a6:	e89c 0003 	ldmia.w	ip, {r0, r1}
 102b3aa:	f84e 0b04 	str.w	r0, [lr], #4
		if ( memcmp( (const char*)master_password, (const char*)user_info.password, MAX_PASSWORD_LEN) == 0 ) {
 102b3ae:	2214      	movs	r2, #20
		strcpy((char*)master_password, MASTER_PASSWORD);
 102b3b0:	f88e 1000 	strb.w	r1, [lr]
		if ( memcmp( (const char*)master_password, (const char*)user_info.password, MAX_PASSWORD_LEN) == 0 ) {
 102b3b4:	a801      	add	r0, sp, #4
 102b3b6:	f10d 013b 	add.w	r1, sp, #59	; 0x3b
 102b3ba:	47b0      	blx	r6
 102b3bc:	b928      	cbnz	r0, 102b3ca <SECR_APP_bCheck_access_to_write_table+0x4e>
			permissions_ok = true;
 102b3be:	2001      	movs	r0, #1
		
		nbr_retries++;
	}
	
	return permissions_ok; 
}
 102b3c0:	b007      	add	sp, #28
 102b3c2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 102b3c6:	b004      	add	sp, #16
 102b3c8:	4770      	bx	lr
			EEPROM_reader(ST_43_ACCESS_TABLE_DEFAULT_ADDR, &access_control.access_table_def, 2);
 102b3ca:	2202      	movs	r2, #2
 102b3cc:	491f      	ldr	r1, [pc, #124]	; (102b44c <SECR_APP_bCheck_access_to_write_table+0xd0>)
 102b3ce:	f640 00da 	movw	r0, #2266	; 0x8da
 102b3d2:	47b8      	blx	r7
			EEPROM_reader(ST_43_TABLE_ACCESS_PERM_BFLD_WRITE_ADDR, &access_control.write, 1);
 102b3d4:	2201      	movs	r2, #1
 102b3d6:	4641      	mov	r1, r8
 102b3d8:	f640 00dd 	movw	r0, #2269	; 0x8dd
 102b3dc:	47b8      	blx	r7
			for ( uint16_t i = 0; i < st_41.nbr_perm_used; i++) {
 102b3de:	4b1e      	ldr	r3, [pc, #120]	; (102b458 <SECR_APP_bCheck_access_to_write_table+0xdc>)
			access_control.write |= DEFAULT_PROCEDURE_ACCESS_CTRL_WRITE;
 102b3e0:	78ea      	ldrb	r2, [r5, #3]
			for ( uint16_t i = 0; i < st_41.nbr_perm_used; i++) {
 102b3e2:	8898      	ldrh	r0, [r3, #4]
			access_control.write |= DEFAULT_PROCEDURE_ACCESS_CTRL_WRITE;
 102b3e4:	f042 0201 	orr.w	r2, r2, #1
 102b3e8:	70ea      	strb	r2, [r5, #3]
			for ( uint16_t i = 0; i < st_41.nbr_perm_used; i++) {
 102b3ea:	b1c8      	cbz	r0, 102b420 <SECR_APP_bCheck_access_to_write_table+0xa4>
 102b3ec:	3801      	subs	r0, #1
 102b3ee:	b280      	uxth	r0, r0
					 ( (st_44.access_control[i].access_table_def & TBL_PROC_NBR_bm) == (user_info.tbl_proc_id & TBL_PROC_NBR_bm) )				&&
 102b3f0:	f8bd c038 	ldrh.w	ip, [sp, #56]	; 0x38
					 ( (bool)(st_44.access_control[i].access_table_def & STD_VS_MFG_FLAG_bm) >> STD_VS_MFG_FLAG_bp) == user_info.mfg_flag		){
 102b3f4:	f89d 903a 	ldrb.w	r9, [sp, #58]	; 0x3a
 102b3f8:	f8df e064 	ldr.w	lr, [pc, #100]	; 102b460 <SECR_APP_bCheck_access_to_write_table+0xe4>
 102b3fc:	3001      	adds	r0, #1
 102b3fe:	2300      	movs	r3, #0
				if ( ( (st_44.access_control[i].access_table_def & PROC_FLAG_bm) == 0 )															&&
 102b400:	f83e 1023 	ldrh.w	r1, [lr, r3, lsl #2]
					 ( (st_44.access_control[i].access_table_def & TBL_PROC_NBR_bm) == (user_info.tbl_proc_id & TBL_PROC_NBR_bm) )				&&
 102b404:	ea81 020c 	eor.w	r2, r1, ip
				if ( ( (st_44.access_control[i].access_table_def & PROC_FLAG_bm) == 0 )															&&
 102b408:	f411 5f80 	tst.w	r1, #4096	; 0x1000
 102b40c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 102b410:	d103      	bne.n	102b41a <SECR_APP_bCheck_access_to_write_table+0x9e>
 102b412:	b912      	cbnz	r2, 102b41a <SECR_APP_bCheck_access_to_write_table+0x9e>
					 ( (st_44.access_control[i].access_table_def & TBL_PROC_NBR_bm) == (user_info.tbl_proc_id & TBL_PROC_NBR_bm) )				&&
 102b414:	f1b9 0f00 	cmp.w	r9, #0
 102b418:	d010      	beq.n	102b43c <SECR_APP_bCheck_access_to_write_table+0xc0>
 102b41a:	3301      	adds	r3, #1
			for ( uint16_t i = 0; i < st_41.nbr_perm_used; i++) {
 102b41c:	4283      	cmp	r3, r0
 102b41e:	d1ef      	bne.n	102b400 <SECR_APP_bCheck_access_to_write_table+0x84>
			if ( (access_control.access_table_def & UNRESTRICTED_WRITE_bm) == UNRESTRICTED_WRITE_bm ) {
 102b420:	882b      	ldrh	r3, [r5, #0]
 102b422:	045b      	lsls	r3, r3, #17
 102b424:	d4cb      	bmi.n	102b3be <SECR_APP_bCheck_access_to_write_table+0x42>
				if ( (user_info.access_permissions & access_control.write) > 0 ) {
 102b426:	f89d 204f 	ldrb.w	r2, [sp, #79]	; 0x4f
 102b42a:	78eb      	ldrb	r3, [r5, #3]
 102b42c:	421a      	tst	r2, r3
 102b42e:	d1c6      	bne.n	102b3be <SECR_APP_bCheck_access_to_write_table+0x42>
 102b430:	3c01      	subs	r4, #1
	while( (nbr_retries < 3) && (permissions_ok == false) ) {
 102b432:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 102b436:	d1ae      	bne.n	102b396 <SECR_APP_bCheck_access_to_write_table+0x1a>
 102b438:	4620      	mov	r0, r4
 102b43a:	e7c1      	b.n	102b3c0 <SECR_APP_bCheck_access_to_write_table+0x44>
					access_control = st_44.access_control[i];
 102b43c:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 102b440:	602b      	str	r3, [r5, #0]
			if ( (access_control.access_table_def & UNRESTRICTED_WRITE_bm) == UNRESTRICTED_WRITE_bm ) {
 102b442:	882b      	ldrh	r3, [r5, #0]
 102b444:	045b      	lsls	r3, r3, #17
 102b446:	d4ba      	bmi.n	102b3be <SECR_APP_bCheck_access_to_write_table+0x42>
 102b448:	e7ed      	b.n	102b426 <SECR_APP_bCheck_access_to_write_table+0xaa>
 102b44a:	bf00      	nop
 102b44c:	20007fc8 	.word	0x20007fc8
 102b450:	010309dd 	.word	0x010309dd
 102b454:	01017511 	.word	0x01017511
 102b458:	2001718c 	.word	0x2001718c
 102b45c:	01031648 	.word	0x01031648
 102b460:	20007fd4 	.word	0x20007fd4

0102b464 <SECR_APP_bCheck_access_to_execute_procedure>:
 * 
 * \param void
 * \retval void
 ******************************************************************************
 */
bool SECR_APP_bCheck_access_to_execute_procedure(SECURITY_USER_INFO_TYPE user_info) {
 102b464:	b084      	sub	sp, #16
 102b466:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
			 permissions_ok = true;
		 }
		 else {
			 
			 /* Read default access permissions for all tables */
			 EEPROM_reader(ST_43_ACCESS_PROCEDURE_DEFAULT_ADDR, &access_control.access_table_def, 2);
 102b46a:	4d30      	ldr	r5, [pc, #192]	; (102b52c <SECR_APP_bCheck_access_to_execute_procedure+0xc8>)
 102b46c:	4e30      	ldr	r6, [pc, #192]	; (102b530 <SECR_APP_bCheck_access_to_execute_procedure+0xcc>)
 102b46e:	4f31      	ldr	r7, [pc, #196]	; (102b534 <SECR_APP_bCheck_access_to_execute_procedure+0xd0>)
bool SECR_APP_bCheck_access_to_execute_procedure(SECURITY_USER_INFO_TYPE user_info) {
 102b470:	b087      	sub	sp, #28
 102b472:	ac0e      	add	r4, sp, #56	; 0x38
 102b474:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			 EEPROM_reader(ST_43_PROCEDURE_ACCESS_PERM_BFLD_WRITE_ADDR, &access_control.write, 1);
 102b478:	f105 0803 	add.w	r8, r5, #3
 102b47c:	2403      	movs	r4, #3
		 strcpy((char*)master_password, MASTER_PASSWORD);
 102b47e:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 102b53c <SECR_APP_bCheck_access_to_execute_procedure+0xd8>
 102b482:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 102b486:	f10d 0e04 	add.w	lr, sp, #4
 102b48a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 102b48e:	e89c 0003 	ldmia.w	ip, {r0, r1}
 102b492:	f84e 0b04 	str.w	r0, [lr], #4
		 if ( memcmp( (const char*)master_password, (const char*)user_info.password, MAX_PASSWORD_LEN) == 0 ) {
 102b496:	2214      	movs	r2, #20
		 strcpy((char*)master_password, MASTER_PASSWORD);
 102b498:	f88e 1000 	strb.w	r1, [lr]
		 if ( memcmp( (const char*)master_password, (const char*)user_info.password, MAX_PASSWORD_LEN) == 0 ) {
 102b49c:	a801      	add	r0, sp, #4
 102b49e:	f10d 013b 	add.w	r1, sp, #59	; 0x3b
 102b4a2:	47b0      	blx	r6
 102b4a4:	b928      	cbnz	r0, 102b4b2 <SECR_APP_bCheck_access_to_execute_procedure+0x4e>
			 permissions_ok = true;
 102b4a6:	2001      	movs	r0, #1
		 
		 nbr_retries++;
	 }
	 
	 return permissions_ok;
}
 102b4a8:	b007      	add	sp, #28
 102b4aa:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 102b4ae:	b004      	add	sp, #16
 102b4b0:	4770      	bx	lr
			 EEPROM_reader(ST_43_ACCESS_PROCEDURE_DEFAULT_ADDR, &access_control.access_table_def, 2);
 102b4b2:	2202      	movs	r2, #2
 102b4b4:	4629      	mov	r1, r5
 102b4b6:	f640 00de 	movw	r0, #2270	; 0x8de
 102b4ba:	47b8      	blx	r7
			 EEPROM_reader(ST_43_PROCEDURE_ACCESS_PERM_BFLD_WRITE_ADDR, &access_control.write, 1);
 102b4bc:	2201      	movs	r2, #1
 102b4be:	4641      	mov	r1, r8
 102b4c0:	f640 00e1 	movw	r0, #2273	; 0x8e1
 102b4c4:	47b8      	blx	r7
			 for ( i = 0; i < st_41.nbr_perm_used; i++ ) {
 102b4c6:	4b1c      	ldr	r3, [pc, #112]	; (102b538 <SECR_APP_bCheck_access_to_execute_procedure+0xd4>)
 102b4c8:	8898      	ldrh	r0, [r3, #4]
 102b4ca:	b1c8      	cbz	r0, 102b500 <SECR_APP_bCheck_access_to_execute_procedure+0x9c>
 102b4cc:	3801      	subs	r0, #1
 102b4ce:	b280      	uxth	r0, r0
					  ( (st_44.access_control[i].access_table_def & TBL_PROC_NBR_bm) == (user_info.tbl_proc_id & TBL_PROC_NBR_bm) )				&&
 102b4d0:	f8bd c038 	ldrh.w	ip, [sp, #56]	; 0x38
					  ( (bool)(st_44.access_control[i].access_table_def & STD_VS_MFG_FLAG_bm) >> STD_VS_MFG_FLAG_bp) == user_info.mfg_flag		){
 102b4d4:	f89d 903a 	ldrb.w	r9, [sp, #58]	; 0x3a
 102b4d8:	f8df e064 	ldr.w	lr, [pc, #100]	; 102b540 <SECR_APP_bCheck_access_to_execute_procedure+0xdc>
 102b4dc:	3001      	adds	r0, #1
 102b4de:	2300      	movs	r3, #0
				 if ( ( (st_44.access_control[i].access_table_def & PROC_FLAG_bm) == PROC_FLAG_bm )												&&
 102b4e0:	f83e 1023 	ldrh.w	r1, [lr, r3, lsl #2]
					  ( (st_44.access_control[i].access_table_def & TBL_PROC_NBR_bm) == (user_info.tbl_proc_id & TBL_PROC_NBR_bm) )				&&
 102b4e4:	ea81 020c 	eor.w	r2, r1, ip
				 if ( ( (st_44.access_control[i].access_table_def & PROC_FLAG_bm) == PROC_FLAG_bm )												&&
 102b4e8:	f411 5f80 	tst.w	r1, #4096	; 0x1000
 102b4ec:	f3c2 020a 	ubfx	r2, r2, #0, #11
 102b4f0:	d003      	beq.n	102b4fa <SECR_APP_bCheck_access_to_execute_procedure+0x96>
 102b4f2:	b912      	cbnz	r2, 102b4fa <SECR_APP_bCheck_access_to_execute_procedure+0x96>
					  ( (st_44.access_control[i].access_table_def & TBL_PROC_NBR_bm) == (user_info.tbl_proc_id & TBL_PROC_NBR_bm) )				&&
 102b4f4:	f1b9 0f00 	cmp.w	r9, #0
 102b4f8:	d010      	beq.n	102b51c <SECR_APP_bCheck_access_to_execute_procedure+0xb8>
 102b4fa:	3301      	adds	r3, #1
			 for ( i = 0; i < st_41.nbr_perm_used; i++ ) {
 102b4fc:	4283      	cmp	r3, r0
 102b4fe:	d1ef      	bne.n	102b4e0 <SECR_APP_bCheck_access_to_execute_procedure+0x7c>
			 if ( (access_control.access_table_def & UNRESTRICTED_WRITE_bm) == UNRESTRICTED_WRITE_bm ) {
 102b500:	882b      	ldrh	r3, [r5, #0]
 102b502:	045b      	lsls	r3, r3, #17
 102b504:	d4cf      	bmi.n	102b4a6 <SECR_APP_bCheck_access_to_execute_procedure+0x42>
				 if ( (user_info.access_permissions & access_control.write) > 0 ) {
 102b506:	f89d 204f 	ldrb.w	r2, [sp, #79]	; 0x4f
 102b50a:	78eb      	ldrb	r3, [r5, #3]
 102b50c:	421a      	tst	r2, r3
 102b50e:	d1ca      	bne.n	102b4a6 <SECR_APP_bCheck_access_to_execute_procedure+0x42>
 102b510:	3c01      	subs	r4, #1
	 while( (nbr_retries < 3) && (permissions_ok == false) ) {
 102b512:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 102b516:	d1b2      	bne.n	102b47e <SECR_APP_bCheck_access_to_execute_procedure+0x1a>
 102b518:	4620      	mov	r0, r4
 102b51a:	e7c5      	b.n	102b4a8 <SECR_APP_bCheck_access_to_execute_procedure+0x44>
					 access_control = st_44.access_control[i];
 102b51c:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 102b520:	602b      	str	r3, [r5, #0]
			 if ( (access_control.access_table_def & UNRESTRICTED_WRITE_bm) == UNRESTRICTED_WRITE_bm ) {
 102b522:	882b      	ldrh	r3, [r5, #0]
 102b524:	045b      	lsls	r3, r3, #17
 102b526:	d4be      	bmi.n	102b4a6 <SECR_APP_bCheck_access_to_execute_procedure+0x42>
 102b528:	e7ed      	b.n	102b506 <SECR_APP_bCheck_access_to_execute_procedure+0xa2>
 102b52a:	bf00      	nop
 102b52c:	20007fc8 	.word	0x20007fc8
 102b530:	010309dd 	.word	0x010309dd
 102b534:	01017511 	.word	0x01017511
 102b538:	2001718c 	.word	0x2001718c
 102b53c:	01031648 	.word	0x01031648
 102b540:	20007fd4 	.word	0x20007fd4

0102b544 <IPC0_Handler>:
//output		::	none
//call			::	ipc_get_status,ipc_clear_interrupt
//effect		::	VMetrology
//===================================================================
void IPC0_Handler( void )
{
 102b544:	b570      	push	{r4, r5, r6, lr}
    uint32_t i = 0;

    if ( ipc_get_status( IPC_CORE0, IPC_INIT_IRQ ) )
 102b546:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 102b54a:	482e      	ldr	r0, [pc, #184]	; (102b604 <IPC0_Handler+0xc0>)
 102b54c:	4c2e      	ldr	r4, [pc, #184]	; (102b608 <IPC0_Handler+0xc4>)
 102b54e:	47a0      	blx	r4
 102b550:	2800      	cmp	r0, #0
 102b552:	d13c      	bne.n	102b5ce <IPC0_Handler+0x8a>
    {
        ipc_clear_interrupt( IPC_CORE0, IPC_INIT_IRQ );
    }

    if ( ipc_get_status( IPC_CORE0, IPC_STATUS_IRQ ) )
 102b554:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 102b558:	482a      	ldr	r0, [pc, #168]	; (102b604 <IPC0_Handler+0xc0>)
 102b55a:	47a0      	blx	r4
 102b55c:	2800      	cmp	r0, #0
 102b55e:	d130      	bne.n	102b5c2 <IPC0_Handler+0x7e>
    {
        ipc_clear_interrupt( IPC_CORE0, IPC_STATUS_IRQ );
    }

    if ( ipc_get_status( IPC_CORE0, IPC_HALF_CYCLE_IRQ ) )
 102b560:	2120      	movs	r1, #32
 102b562:	4828      	ldr	r0, [pc, #160]	; (102b604 <IPC0_Handler+0xc0>)
 102b564:	47a0      	blx	r4
 102b566:	bb38      	cbnz	r0, 102b5b8 <IPC0_Handler+0x74>
    {
        ipc_clear_interrupt( IPC_CORE0, IPC_HALF_CYCLE_IRQ );
    }

    if ( ipc_get_status( IPC_CORE0, IPC_FULL_CYCLE_IRQ ) )
 102b568:	2110      	movs	r1, #16
 102b56a:	4826      	ldr	r0, [pc, #152]	; (102b604 <IPC0_Handler+0xc0>)
 102b56c:	47a0      	blx	r4
 102b56e:	b9f0      	cbnz	r0, 102b5ae <IPC0_Handler+0x6a>
    {
        ipc_clear_interrupt( IPC_CORE0, IPC_FULL_CYCLE_IRQ );
    }

    if ( ipc_get_status( IPC_CORE0, IPC_INTEGRATION_IRQ ) )
 102b570:	2101      	movs	r1, #1
 102b572:	4824      	ldr	r0, [pc, #144]	; (102b604 <IPC0_Handler+0xc0>)
 102b574:	47a0      	blx	r4
 102b576:	b900      	cbnz	r0, 102b57a <IPC0_Handler+0x36>
 102b578:	bd70      	pop	{r4, r5, r6, pc}
    {
        ipc_clear_interrupt( IPC_CORE0, IPC_INTEGRATION_IRQ );
 102b57a:	2101      	movs	r1, #1
 102b57c:	4821      	ldr	r0, [pc, #132]	; (102b604 <IPC0_Handler+0xc0>)
 102b57e:	4b23      	ldr	r3, [pc, #140]	; (102b60c <IPC0_Handler+0xc8>)
 102b580:	4798      	blx	r3
		
		meter.metrology_over_timer = 0;
 102b582:	4923      	ldr	r1, [pc, #140]	; (102b610 <IPC0_Handler+0xcc>)
 102b584:	4a23      	ldr	r2, [pc, #140]	; (102b614 <IPC0_Handler+0xd0>)
 102b586:	4b24      	ldr	r3, [pc, #144]	; (102b618 <IPC0_Handler+0xd4>)

        for ( i = 0; i < DSP_ST_SIZE; i++ )
 102b588:	4824      	ldr	r0, [pc, #144]	; (102b61c <IPC0_Handler+0xd8>)
		meter.metrology_over_timer = 0;
 102b58a:	2400      	movs	r4, #0
 102b58c:	700c      	strb	r4, [r1, #0]
        {
            *( ( uint32_t * )( &VMetrology.DSP_ST.VERSION.WORD ) + i ) = *( ( uint32_t * )( mem_reg_out ) + i );
 102b58e:	f853 1f04 	ldr.w	r1, [r3, #4]!
 102b592:	f842 1f04 	str.w	r1, [r2, #4]!
        for ( i = 0; i < DSP_ST_SIZE; i++ )
 102b596:	4283      	cmp	r3, r0
 102b598:	d1f9      	bne.n	102b58e <IPC0_Handler+0x4a>
        }
        if ( ( ( volatile DSP_ST_TYPE * ) ( mem_reg_out ) )->STATUS.BIT.ST == DSP_ST_STATUS_DSP_RUNNING )
 102b59a:	4b21      	ldr	r3, [pc, #132]	; (102b620 <IPC0_Handler+0xdc>)
 102b59c:	685b      	ldr	r3, [r3, #4]
 102b59e:	f003 030f 	and.w	r3, r3, #15
 102b5a2:	2b08      	cmp	r3, #8
 102b5a4:	d019      	beq.n	102b5da <IPC0_Handler+0x96>
                *( ( uint32_t * )( &VMetrology.DSP_ACC.I_A ) + i ) = *( ( uint32_t * )( mem_acc_out ) + i );
                *( ( uint32_t * )( &VMetrology.DSP_ACC.I_A ) + i + 1 ) = *( ( uint32_t * )( mem_acc_out ) + i + 1 );
            }
        }

		meter_os.metrology_ready = true;
 102b5a6:	4b1f      	ldr	r3, [pc, #124]	; (102b624 <IPC0_Handler+0xe0>)
 102b5a8:	2201      	movs	r2, #1
 102b5aa:	701a      	strb	r2, [r3, #0]
 102b5ac:	bd70      	pop	{r4, r5, r6, pc}
        ipc_clear_interrupt( IPC_CORE0, IPC_FULL_CYCLE_IRQ );
 102b5ae:	2110      	movs	r1, #16
 102b5b0:	4814      	ldr	r0, [pc, #80]	; (102b604 <IPC0_Handler+0xc0>)
 102b5b2:	4b16      	ldr	r3, [pc, #88]	; (102b60c <IPC0_Handler+0xc8>)
 102b5b4:	4798      	blx	r3
 102b5b6:	e7db      	b.n	102b570 <IPC0_Handler+0x2c>
        ipc_clear_interrupt( IPC_CORE0, IPC_HALF_CYCLE_IRQ );
 102b5b8:	2120      	movs	r1, #32
 102b5ba:	4812      	ldr	r0, [pc, #72]	; (102b604 <IPC0_Handler+0xc0>)
 102b5bc:	4b13      	ldr	r3, [pc, #76]	; (102b60c <IPC0_Handler+0xc8>)
 102b5be:	4798      	blx	r3
 102b5c0:	e7d2      	b.n	102b568 <IPC0_Handler+0x24>
        ipc_clear_interrupt( IPC_CORE0, IPC_STATUS_IRQ );
 102b5c2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 102b5c6:	480f      	ldr	r0, [pc, #60]	; (102b604 <IPC0_Handler+0xc0>)
 102b5c8:	4b10      	ldr	r3, [pc, #64]	; (102b60c <IPC0_Handler+0xc8>)
 102b5ca:	4798      	blx	r3
 102b5cc:	e7c8      	b.n	102b560 <IPC0_Handler+0x1c>
        ipc_clear_interrupt( IPC_CORE0, IPC_INIT_IRQ );
 102b5ce:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 102b5d2:	480c      	ldr	r0, [pc, #48]	; (102b604 <IPC0_Handler+0xc0>)
 102b5d4:	4b0d      	ldr	r3, [pc, #52]	; (102b60c <IPC0_Handler+0xc8>)
 102b5d6:	4798      	blx	r3
 102b5d8:	e7bc      	b.n	102b554 <IPC0_Handler+0x10>
 102b5da:	4b13      	ldr	r3, [pc, #76]	; (102b628 <IPC0_Handler+0xe4>)
 102b5dc:	4e13      	ldr	r6, [pc, #76]	; (102b62c <IPC0_Handler+0xe8>)
                *( ( uint32_t * )( &VMetrology.DSP_ACC.I_A ) + i + 1 ) = *( ( uint32_t * )( mem_acc_out ) + i + 1 );
 102b5de:	4d14      	ldr	r5, [pc, #80]	; (102b630 <IPC0_Handler+0xec>)
            for ( i = 0; i < ( DSP_ACC_SIZE * 2 ); i = i + 2 )
 102b5e0:	4c14      	ldr	r4, [pc, #80]	; (102b634 <IPC0_Handler+0xf0>)
                *( ( uint32_t * )( &VMetrology.DSP_ACC.I_A ) + i ) = *( ( uint32_t * )( mem_acc_out ) + i );
 102b5e2:	6818      	ldr	r0, [r3, #0]
 102b5e4:	18f1      	adds	r1, r6, r3
 102b5e6:	f101 425f 	add.w	r2, r1, #3741319168	; 0xdf000000
 102b5ea:	f502 0270 	add.w	r2, r2, #15728640	; 0xf00000
 102b5ee:	3308      	adds	r3, #8
 102b5f0:	6010      	str	r0, [r2, #0]
                *( ( uint32_t * )( &VMetrology.DSP_ACC.I_A ) + i + 1 ) = *( ( uint32_t * )( mem_acc_out ) + i + 1 );
 102b5f2:	f853 2c04 	ldr.w	r2, [r3, #-4]
 102b5f6:	514a      	str	r2, [r1, r5]
            for ( i = 0; i < ( DSP_ACC_SIZE * 2 ); i = i + 2 )
 102b5f8:	42a3      	cmp	r3, r4
 102b5fa:	d1f2      	bne.n	102b5e2 <IPC0_Handler+0x9e>
		meter_os.metrology_ready = true;
 102b5fc:	4b09      	ldr	r3, [pc, #36]	; (102b624 <IPC0_Handler+0xe0>)
 102b5fe:	2201      	movs	r2, #1
 102b600:	701a      	strb	r2, [r3, #0]
 102b602:	bd70      	pop	{r4, r5, r6, pc}
 102b604:	4004c000 	.word	0x4004c000
 102b608:	01010159 	.word	0x01010159
 102b60c:	01010155 	.word	0x01010155
 102b610:	20016c2c 	.word	0x20016c2c
 102b614:	20016848 	.word	0x20016848
 102b618:	201000d8 	.word	0x201000d8
 102b61c:	20100164 	.word	0x20100164
 102b620:	201000dc 	.word	0x201000dc
 102b624:	20016c28 	.word	0x20016c28
 102b628:	20100168 	.word	0x20100168
 102b62c:	20016770 	.word	0x20016770
 102b630:	dff00004 	.word	0xdff00004
 102b634:	20100320 	.word	0x20100320

0102b638 <shared_mem_init>:
//output		::	none
//call			::	pmc_enable_periph_clk,ipc_enable_interrupt
//effect		::	Reg_In_CONTROL,Reg_Out_MODE,Acc_Out_I_T
//===================================================================
void	shared_mem_init( void )
{
 102b638:	b510      	push	{r4, lr}
    //Enable IPC0, IPC1 clock
    pmc_enable_periph_clk( ID_IPC_CORE0 );
 102b63a:	201f      	movs	r0, #31
 102b63c:	4c08      	ldr	r4, [pc, #32]	; (102b660 <shared_mem_init+0x28>)
 102b63e:	47a0      	blx	r4
    pmc_enable_periph_clk( ID_IPC_CORE1 );
 102b640:	2027      	movs	r0, #39	; 0x27
 102b642:	47a0      	blx	r4

    //ipc_enable_interrupt(IPC_CORE0, IPC_IRQ);
    ipc_enable_interrupt( IPC_CORE0, IPC_INIT_IRQ | IPC_STATUS_IRQ | IPC_HALF_CYCLE_IRQ | IPC_FULL_CYCLE_IRQ | IPC_INTEGRATION_IRQ );
 102b644:	4b07      	ldr	r3, [pc, #28]	; (102b664 <shared_mem_init+0x2c>)
 102b646:	4908      	ldr	r1, [pc, #32]	; (102b668 <shared_mem_init+0x30>)
 102b648:	4808      	ldr	r0, [pc, #32]	; (102b66c <shared_mem_init+0x34>)
 102b64a:	4798      	blx	r3
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 102b64c:	4b08      	ldr	r3, [pc, #32]	; (102b670 <shared_mem_init+0x38>)
 102b64e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 102b652:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 102b656:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 102b65a:	601a      	str	r2, [r3, #0]
 102b65c:	bd10      	pop	{r4, pc}
 102b65e:	bf00      	nop
 102b660:	0102d841 	.word	0x0102d841
 102b664:	01010165 	.word	0x01010165
 102b668:	00110031 	.word	0x00110031
 102b66c:	4004c000 	.word	0x4004c000
 102b670:	e000e100 	.word	0xe000e100

0102b674 <configure_coprocessor>:
//output        ::  none
//call          ::  none
//effect        ::
//===================================================================
void	configure_coprocessor( void )
{
 102b674:	b430      	push	{r4, r5}
    unsigned int  read_reg = 0;

    /* Enables Coprocessor Bus Master Clock */
    PMC->PMC_SCER = PMC_SCER_CPBMCK | PMC_SCER_CPKEY_PASSWD;
 102b676:	4b0f      	ldr	r3, [pc, #60]	; (102b6b4 <configure_coprocessor+0x40>)

    /* Enables the Co-processor Clocks */
    PMC->PMC_SCER = PMC_SCER_CPCK | PMC_SCER_CPKEY_PASSWD;

    /* Set co-processor clock pre-scaler and source */
    read_reg = REG_PMC_MCKR;
 102b678:	4a0f      	ldr	r2, [pc, #60]	; (102b6b8 <configure_coprocessor+0x44>)
    read_reg &= ~PMC_MCKR_CPCSS_Msk;
    read_reg |= ( CONFIG_CPCLK_SOURCE << PMC_MCKR_CPCSS_Pos );
    REG_PMC_MCKR = read_reg;

    /* Release co-processor peripheral reset */
    RSTC->RSTC_CPMR |= ( RSTC_CPMR_CPKEY( 0x5Au ) | RSTC_CPMR_CPEREN );
 102b67a:	4910      	ldr	r1, [pc, #64]	; (102b6bc <configure_coprocessor+0x48>)

    /* Enable Core 1 SRAM1 and SRAM2 memories */
    pmc_enable_periph_clk( 42 ); /* ID_SRAM1_2 */
 102b67c:	4c10      	ldr	r4, [pc, #64]	; (102b6c0 <configure_coprocessor+0x4c>)
    PMC->PMC_SCER = PMC_SCER_CPBMCK | PMC_SCER_CPKEY_PASSWD;
 102b67e:	f44f 0522 	mov.w	r5, #10616832	; 0xa20000
    PMC->PMC_SCER = PMC_SCER_CPCK | PMC_SCER_CPKEY_PASSWD;
 102b682:	f44f 0021 	mov.w	r0, #10551296	; 0xa10000
    PMC->PMC_SCER = PMC_SCER_CPBMCK | PMC_SCER_CPKEY_PASSWD;
 102b686:	601d      	str	r5, [r3, #0]
    PMC->PMC_SCER = PMC_SCER_CPCK | PMC_SCER_CPKEY_PASSWD;
 102b688:	6018      	str	r0, [r3, #0]
    read_reg = REG_PMC_MCKR;
 102b68a:	6813      	ldr	r3, [r2, #0]
    read_reg &= ~PMC_MCKR_CPPRES_Msk;
 102b68c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    REG_PMC_MCKR = read_reg;
 102b690:	6013      	str	r3, [r2, #0]
    read_reg = REG_PMC_MCKR;
 102b692:	6813      	ldr	r3, [r2, #0]
    read_reg &= ~PMC_MCKR_CPCSS_Msk;
 102b694:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
    read_reg |= ( CONFIG_CPCLK_SOURCE << PMC_MCKR_CPCSS_Pos );
 102b698:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    REG_PMC_MCKR = read_reg;
 102b69c:	6013      	str	r3, [r2, #0]
    RSTC->RSTC_CPMR |= ( RSTC_CPMR_CPKEY( 0x5Au ) | RSTC_CPMR_CPEREN );
 102b69e:	68cb      	ldr	r3, [r1, #12]
 102b6a0:	f043 43b4 	orr.w	r3, r3, #1509949440	; 0x5a000000
 102b6a4:	f043 0310 	orr.w	r3, r3, #16
 102b6a8:	60cb      	str	r3, [r1, #12]
    pmc_enable_periph_clk( 42 ); /* ID_SRAM1_2 */
 102b6aa:	202a      	movs	r0, #42	; 0x2a
 102b6ac:	4623      	mov	r3, r4
}
 102b6ae:	bc30      	pop	{r4, r5}
    pmc_enable_periph_clk( 42 ); /* ID_SRAM1_2 */
 102b6b0:	4718      	bx	r3
 102b6b2:	bf00      	nop
 102b6b4:	400e0400 	.word	0x400e0400
 102b6b8:	400e0430 	.word	0x400e0430
 102b6bc:	400e1400 	.word	0x400e1400
 102b6c0:	0102d841 	.word	0x0102d841

0102b6c4 <Init_Core1>:
        RSTC->RSTC_CPMR = RSTC_CPMR_CPKEY(0x5AU);
 102b6c4:	4b21      	ldr	r3, [pc, #132]	; (102b74c <Init_Core1+0x88>)
 102b6c6:	f04f 42b4 	mov.w	r2, #1509949440	; 0x5a000000
{
 102b6ca:	b570      	push	{r4, r5, r6, lr}
        RSTC->RSTC_CPMR = RSTC_CPMR_CPKEY(0x5AU);
 102b6cc:	60da      	str	r2, [r3, #12]
 102b6ce:	bf00      	nop
        delay_ms( 200 );
 102b6d0:	481f      	ldr	r0, [pc, #124]	; (102b750 <Init_Core1+0x8c>)
 102b6d2:	4b20      	ldr	r3, [pc, #128]	; (102b754 <Init_Core1+0x90>)
    MATRIX0->MATRIX_SCFG[2] = MATRIX_SCFG_DEFMSTR_TYPE( 2 ) | MATRIX_SCFG_FIXED_DEFMSTR( 6 );
 102b6d4:	4d20      	ldr	r5, [pc, #128]	; (102b758 <Init_Core1+0x94>)
    CMCC0->CMCC_CTRL = CMCC_CTRL_CEN;
 102b6d6:	4c21      	ldr	r4, [pc, #132]	; (102b75c <Init_Core1+0x98>)
        delay_ms( 200 );
 102b6d8:	4798      	blx	r3
    shared_mem_init();
 102b6da:	4b21      	ldr	r3, [pc, #132]	; (102b760 <Init_Core1+0x9c>)
 102b6dc:	4798      	blx	r3
    configure_coprocessor();
 102b6de:	4b21      	ldr	r3, [pc, #132]	; (102b764 <Init_Core1+0xa0>)
 102b6e0:	4798      	blx	r3
	    memcpy( ( char * )IRAM1_ADDR, ( char * )&core1_image_start_p, ( int )&core1_image_end_p - ( int )&core1_image_start_p );
 102b6e2:	4921      	ldr	r1, [pc, #132]	; (102b768 <Init_Core1+0xa4>)
 102b6e4:	4a21      	ldr	r2, [pc, #132]	; (102b76c <Init_Core1+0xa8>)
 102b6e6:	4b22      	ldr	r3, [pc, #136]	; (102b770 <Init_Core1+0xac>)
 102b6e8:	4822      	ldr	r0, [pc, #136]	; (102b774 <Init_Core1+0xb0>)
 102b6ea:	1a52      	subs	r2, r2, r1
 102b6ec:	4798      	blx	r3
    REG_RSTC_CPMR |= RSTC_CPMR_CPROCEN | RSTC_CPMR_CPKEY(0x5AU);
 102b6ee:	4822      	ldr	r0, [pc, #136]	; (102b778 <Init_Core1+0xb4>)
		base->PIO_PUDR = mask;
 102b6f0:	4b22      	ldr	r3, [pc, #136]	; (102b77c <Init_Core1+0xb8>)
 102b6f2:	6801      	ldr	r1, [r0, #0]
 102b6f4:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
 102b6f8:	2201      	movs	r2, #1
 102b6fa:	f041 0101 	orr.w	r1, r1, #1
 102b6fe:	6001      	str	r1, [r0, #0]
 102b700:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
 102b702:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
 102b706:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
 102b708:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
 102b70a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
 102b70e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 102b710:	f021 0101 	bic.w	r1, r1, #1
 102b714:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
 102b716:	6f58      	ldr	r0, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
 102b718:	2102      	movs	r1, #2
		base->PIO_ABCDSR[1] &= ~mask;
 102b71a:	f020 0001 	bic.w	r0, r0, #1
 102b71e:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
 102b720:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
 102b722:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
 102b724:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
 102b728:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
 102b72a:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
 102b72c:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
 102b730:	6f18      	ldr	r0, [r3, #112]	; 0x70
 102b732:	f020 0002 	bic.w	r0, r0, #2
 102b736:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
 102b738:	6f58      	ldr	r0, [r3, #116]	; 0x74
    MATRIX0->MATRIX_SCFG[2] = MATRIX_SCFG_DEFMSTR_TYPE( 2 ) | MATRIX_SCFG_FIXED_DEFMSTR( 6 );
 102b73a:	f44f 16d0 	mov.w	r6, #1703936	; 0x1a0000
 102b73e:	f020 0002 	bic.w	r0, r0, #2
 102b742:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
 102b744:	6059      	str	r1, [r3, #4]
 102b746:	64ae      	str	r6, [r5, #72]	; 0x48
    CMCC0->CMCC_CTRL = CMCC_CTRL_CEN;
 102b748:	60a2      	str	r2, [r4, #8]
 102b74a:	bd70      	pop	{r4, r5, r6, pc}
 102b74c:	400e1400 	.word	0x400e1400
 102b750:	0016524a 	.word	0x0016524a
 102b754:	20000001 	.word	0x20000001
 102b758:	400e0200 	.word	0x400e0200
 102b75c:	4007c000 	.word	0x4007c000
 102b760:	0102b639 	.word	0x0102b639
 102b764:	0102b675 	.word	0x0102b675
 102b768:	01031a00 	.word	0x01031a00
 102b76c:	01035600 	.word	0x01035600
 102b770:	01030a3d 	.word	0x01030a3d
 102b774:	20080000 	.word	0x20080000
 102b778:	400e140c 	.word	0x400e140c
 102b77c:	4800c000 	.word	0x4800c000

0102b780 <SYSTEM_initialize>:
 *
 * \param void
 * \retval 
 ******************************************************************************
 */
void SYSTEM_initialize(void) {
 102b780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	SM_APP_vInitialize_system_state();
 102b784:	4b36      	ldr	r3, [pc, #216]	; (102b860 <SYSTEM_initialize+0xe0>)
 102b786:	4798      	blx	r3
  __ASM volatile ("cpsid i");
 102b788:	b672      	cpsid	i
  __ASM volatile ("dmb");
 102b78a:	f3bf 8f5f 	dmb	sy
		
	/* Disable global interrupts */
	Disable_global_interrupt();
 102b78e:	4c35      	ldr	r4, [pc, #212]	; (102b864 <SYSTEM_initialize+0xe4>)
	
	/* Initialize Watch Dog */
	WATCHDOG_HAL_vInitialize();	
 102b790:	4b35      	ldr	r3, [pc, #212]	; (102b868 <SYSTEM_initialize+0xe8>)
	Disable_global_interrupt();
 102b792:	2200      	movs	r2, #0

	/* Enable global interrupts */
	Enable_global_interrupt();
 102b794:	2701      	movs	r7, #1
	Disable_global_interrupt();
 102b796:	7022      	strb	r2, [r4, #0]
	WATCHDOG_HAL_vInitialize();	
 102b798:	4798      	blx	r3
	Enable_global_interrupt();
 102b79a:	7027      	strb	r7, [r4, #0]
 102b79c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
 102b7a0:	b662      	cpsie	i

	/* Initialize Power Fail */
	PFAIL_APP_vInitialize();
	WATCHDOG_APP_vRestart();
 102b7a2:	4c32      	ldr	r4, [pc, #200]	; (102b86c <SYSTEM_initialize+0xec>)
	PFAIL_APP_vInitialize();
 102b7a4:	4b32      	ldr	r3, [pc, #200]	; (102b870 <SYSTEM_initialize+0xf0>)
 * \retval 
 ******************************************************************************
 */
void SYSTEM_set_PCK_output(void)
{
	pmc_enable_periph_clk(ID_PIOA);
 102b7a6:	4e33      	ldr	r6, [pc, #204]	; (102b874 <SYSTEM_initialize+0xf4>)
	PFAIL_APP_vTask();
 102b7a8:	4d33      	ldr	r5, [pc, #204]	; (102b878 <SYSTEM_initialize+0xf8>)
	PFAIL_APP_vInitialize();
 102b7aa:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 102b7ac:	47a0      	blx	r4
    MATRIX0->MATRIX_SCFG[2] = MATRIX_SCFG_DEFMSTR_TYPE( 2 ) | MATRIX_SCFG_FIXED_DEFMSTR( 6 );
 102b7ae:	4a33      	ldr	r2, [pc, #204]	; (102b87c <SYSTEM_initialize+0xfc>)
    CMCC0->CMCC_CTRL = CMCC_CTRL_CEN;
 102b7b0:	4b33      	ldr	r3, [pc, #204]	; (102b880 <SYSTEM_initialize+0x100>)
    MATRIX0->MATRIX_SCFG[2] = MATRIX_SCFG_DEFMSTR_TYPE( 2 ) | MATRIX_SCFG_FIXED_DEFMSTR( 6 );
 102b7b2:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 102b7b6:	6491      	str	r1, [r2, #72]	; 0x48
	pmc_enable_periph_clk(ID_PIOA);
 102b7b8:	200b      	movs	r0, #11
    CMCC0->CMCC_CTRL = CMCC_CTRL_CEN;
 102b7ba:	609f      	str	r7, [r3, #8]
	pmc_enable_periph_clk(ID_PIOA);
 102b7bc:	47b0      	blx	r6
	pio_set_peripheral(PIOA, PIO_PERIPH_A, (uint32_t)(PIO_PA29A_PCK1));
 102b7be:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 102b7c2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 102b7c6:	482f      	ldr	r0, [pc, #188]	; (102b884 <SYSTEM_initialize+0x104>)
 102b7c8:	4b2f      	ldr	r3, [pc, #188]	; (102b888 <SYSTEM_initialize+0x108>)
 102b7ca:	4798      	blx	r3
	pmc_switch_pck_to_pllack(1, PMC_PCK_PRES_CLK_2);
 102b7cc:	2110      	movs	r1, #16
 102b7ce:	4638      	mov	r0, r7
 102b7d0:	4b2e      	ldr	r3, [pc, #184]	; (102b88c <SYSTEM_initialize+0x10c>)
 102b7d2:	4798      	blx	r3
	pmc_enable_pck(PMC_PCK_1);
 102b7d4:	4b2e      	ldr	r3, [pc, #184]	; (102b890 <SYSTEM_initialize+0x110>)
 102b7d6:	4638      	mov	r0, r7
 102b7d8:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 102b7da:	47a0      	blx	r4
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
 102b7dc:	200b      	movs	r0, #11
 102b7de:	47b0      	blx	r6
 102b7e0:	200c      	movs	r0, #12
 102b7e2:	47b0      	blx	r6
 102b7e4:	2025      	movs	r0, #37	; 0x25
 102b7e6:	47b0      	blx	r6
	WATCHDOG_APP_vRestart();
 102b7e8:	47a0      	blx	r4
	Init_Core1();
 102b7ea:	4b2a      	ldr	r3, [pc, #168]	; (102b894 <SYSTEM_initialize+0x114>)
 102b7ec:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 102b7ee:	47a0      	blx	r4
	FLASH_initialize();
 102b7f0:	4b29      	ldr	r3, [pc, #164]	; (102b898 <SYSTEM_initialize+0x118>)
 102b7f2:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 102b7f4:	47a0      	blx	r4
	I2C_HAL_vInitialize();
 102b7f6:	4b29      	ldr	r3, [pc, #164]	; (102b89c <SYSTEM_initialize+0x11c>)
 102b7f8:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 102b7fa:	47a0      	blx	r4
	SM_APP_vLoad_c1219_tables();
 102b7fc:	4b28      	ldr	r3, [pc, #160]	; (102b8a0 <SYSTEM_initialize+0x120>)
 102b7fe:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 102b800:	47a0      	blx	r4
	PFAIL_APP_vTask();
 102b802:	47a8      	blx	r5
	SM_APP_vInitialize();
 102b804:	4b27      	ldr	r3, [pc, #156]	; (102b8a4 <SYSTEM_initialize+0x124>)
 102b806:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 102b808:	47a0      	blx	r4
	PFAIL_APP_vTask();
 102b80a:	47a8      	blx	r5
	REGS_APP_vInitialize();
 102b80c:	4b26      	ldr	r3, [pc, #152]	; (102b8a8 <SYSTEM_initialize+0x128>)
 102b80e:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 102b810:	47a0      	blx	r4
	PFAIL_APP_vTask();
 102b812:	47a8      	blx	r5
	RTC_APP_vInitialize();
 102b814:	4b25      	ldr	r3, [pc, #148]	; (102b8ac <SYSTEM_initialize+0x12c>)
 102b816:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 102b818:	47a0      	blx	r4
	PFAIL_APP_vTask();
 102b81a:	47a8      	blx	r5
	TOU_APP_vInitialize();
 102b81c:	4b24      	ldr	r3, [pc, #144]	; (102b8b0 <SYSTEM_initialize+0x130>)
 102b81e:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 102b820:	47a0      	blx	r4
	PFAIL_APP_vTask();
 102b822:	47a8      	blx	r5
	TIMER_initialize();
 102b824:	4b23      	ldr	r3, [pc, #140]	; (102b8b4 <SYSTEM_initialize+0x134>)
 102b826:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 102b828:	47a0      	blx	r4
	LED_initialize();
 102b82a:	4b23      	ldr	r3, [pc, #140]	; (102b8b8 <SYSTEM_initialize+0x138>)
 102b82c:	4798      	blx	r3
	LED_test_rgb();
 102b82e:	4b23      	ldr	r3, [pc, #140]	; (102b8bc <SYSTEM_initialize+0x13c>)
 102b830:	4798      	blx	r3
	LED_diagnosis_led_task();
 102b832:	4b23      	ldr	r3, [pc, #140]	; (102b8c0 <SYSTEM_initialize+0x140>)
 102b834:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 102b836:	47a0      	blx	r4
	PFAIL_APP_vTask();
 102b838:	47a8      	blx	r5
	OP_initialize();
 102b83a:	4b22      	ldr	r3, [pc, #136]	; (102b8c4 <SYSTEM_initialize+0x144>)
 102b83c:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 102b83e:	47a0      	blx	r4
	PFAIL_APP_vTask();
 102b840:	47a8      	blx	r5
	NIC_initialize();
 102b842:	4b21      	ldr	r3, [pc, #132]	; (102b8c8 <SYSTEM_initialize+0x148>)
 102b844:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 102b846:	47a0      	blx	r4
	PFAIL_APP_vTask();
 102b848:	47a8      	blx	r5
	PFAIL_APP_vRegister_power_up();
 102b84a:	4b20      	ldr	r3, [pc, #128]	; (102b8cc <SYSTEM_initialize+0x14c>)
 102b84c:	4798      	blx	r3
	WATCHDOG_APP_vRestart(); 
 102b84e:	47a0      	blx	r4
	PFAIL_APP_vTask();
 102b850:	47a8      	blx	r5
	SM_APP_vTrigger_timers();
 102b852:	4b1f      	ldr	r3, [pc, #124]	; (102b8d0 <SYSTEM_initialize+0x150>)
 102b854:	4798      	blx	r3
	WATCHDOG_APP_vRestart(); 
 102b856:	47a0      	blx	r4
	PFAIL_APP_vTask();
 102b858:	462b      	mov	r3, r5
}
 102b85a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	PFAIL_APP_vTask();
 102b85e:	4718      	bx	r3
 102b860:	0101f395 	.word	0x0101f395
 102b864:	2000008d 	.word	0x2000008d
 102b868:	01015fed 	.word	0x01015fed
 102b86c:	0101603d 	.word	0x0101603d
 102b870:	010254a5 	.word	0x010254a5
 102b874:	0102d841 	.word	0x0102d841
 102b878:	01025bf1 	.word	0x01025bf1
 102b87c:	400e0200 	.word	0x400e0200
 102b880:	4007c000 	.word	0x4007c000
 102b884:	400e0e00 	.word	0x400e0e00
 102b888:	0102d615 	.word	0x0102d615
 102b88c:	0102d885 	.word	0x0102d885
 102b890:	0102d8c1 	.word	0x0102d8c1
 102b894:	0102b6c5 	.word	0x0102b6c5
 102b898:	010199d9 	.word	0x010199d9
 102b89c:	01015519 	.word	0x01015519
 102b8a0:	01020be9 	.word	0x01020be9
 102b8a4:	0101f341 	.word	0x0101f341
 102b8a8:	0102642d 	.word	0x0102642d
 102b8ac:	0102a5a5 	.word	0x0102a5a5
 102b8b0:	0102bde1 	.word	0x0102bde1
 102b8b4:	0102ba51 	.word	0x0102ba51
 102b8b8:	0101ac8d 	.word	0x0101ac8d
 102b8bc:	0101ae5d 	.word	0x0101ae5d
 102b8c0:	0101ad79 	.word	0x0101ad79
 102b8c4:	01024371 	.word	0x01024371
 102b8c8:	01024b5d 	.word	0x01024b5d
 102b8cc:	0102564d 	.word	0x0102564d
 102b8d0:	0101f3ad 	.word	0x0101f3ad

0102b8d4 <SYSTEM_initialize_io>:
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
 102b8d4:	4b5b      	ldr	r3, [pc, #364]	; (102ba44 <SYSTEM_initialize_io+0x170>)
 102b8d6:	4a5c      	ldr	r2, [pc, #368]	; (102ba48 <SYSTEM_initialize_io+0x174>)
 * \param
 * \retval
 ******************************************************************************
 */
void SYSTEM_initialize_io(void)
{
 102b8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 102b8dc:	2080      	movs	r0, #128	; 0x80
 102b8de:	2140      	movs	r1, #64	; 0x40
 102b8e0:	f04f 7b80 	mov.w	fp, #16777216	; 0x1000000
 102b8e4:	f04f 7a00 	mov.w	sl, #33554432	; 0x2000000
 102b8e8:	f44f 4980 	mov.w	r9, #16384	; 0x4000
 102b8ec:	f44f 6800 	mov.w	r8, #2048	; 0x800
 102b8f0:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 102b8f4:	f44f 7e00 	mov.w	lr, #512	; 0x200
 102b8f8:	2708      	movs	r7, #8
 102b8fa:	f44f 7480 	mov.w	r4, #256	; 0x100
 102b8fe:	f8c2 b034 	str.w	fp, [r2, #52]	; 0x34
 102b902:	f8c2 a034 	str.w	sl, [r2, #52]	; 0x34
 102b906:	f8c2 9034 	str.w	r9, [r2, #52]	; 0x34
 102b90a:	6350      	str	r0, [r2, #52]	; 0x34
 102b90c:	f8c3 8034 	str.w	r8, [r3, #52]	; 0x34
 102b910:	f8c3 c034 	str.w	ip, [r3, #52]	; 0x34
 102b914:	f8c3 e034 	str.w	lr, [r3, #52]	; 0x34
 102b918:	635f      	str	r7, [r3, #52]	; 0x34
 102b91a:	6359      	str	r1, [r3, #52]	; 0x34
 102b91c:	6358      	str	r0, [r3, #52]	; 0x34
 102b91e:	635c      	str	r4, [r3, #52]	; 0x34
 102b920:	f44f 5400 	mov.w	r4, #8192	; 0x2000
 102b924:	635c      	str	r4, [r3, #52]	; 0x34
 102b926:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 102b92a:	635c      	str	r4, [r3, #52]	; 0x34
 102b92c:	f44f 0480 	mov.w	r4, #4194304	; 0x400000
 102b930:	635c      	str	r4, [r3, #52]	; 0x34
 102b932:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 102b936:	6354      	str	r4, [r2, #52]	; 0x34
 102b938:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 102b93c:	635c      	str	r4, [r3, #52]	; 0x34
 102b93e:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
 102b942:	635c      	str	r4, [r3, #52]	; 0x34
 102b944:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
 102b948:	635c      	str	r4, [r3, #52]	; 0x34
 102b94a:	f44f 3400 	mov.w	r4, #131072	; 0x20000
 102b94e:	635c      	str	r4, [r3, #52]	; 0x34
 102b950:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
 102b954:	635c      	str	r4, [r3, #52]	; 0x34
 102b956:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 102b95a:	635c      	str	r4, [r3, #52]	; 0x34
 102b95c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 102b960:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 102b964:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
 102b968:	635e      	str	r6, [r3, #52]	; 0x34
 102b96a:	6355      	str	r5, [r2, #52]	; 0x34
 102b96c:	635c      	str	r4, [r3, #52]	; 0x34
 102b96e:	6351      	str	r1, [r2, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 102b970:	f8c2 b010 	str.w	fp, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 102b974:	f8c2 b0a0 	str.w	fp, [r2, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 102b978:	f8c2 a010 	str.w	sl, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 102b97c:	f8c2 a0a0 	str.w	sl, [r2, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 102b980:	f8c2 9010 	str.w	r9, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 102b984:	f8c2 90a0 	str.w	r9, [r2, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 102b988:	6110      	str	r0, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 102b98a:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 102b98e:	f8c3 8010 	str.w	r8, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 102b992:	f8c3 80a0 	str.w	r8, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 102b996:	f8c3 c010 	str.w	ip, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 102b99a:	f8c3 c0a0 	str.w	ip, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 102b99e:	f8c3 e010 	str.w	lr, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 102b9a2:	f8c3 e0a0 	str.w	lr, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 102b9a6:	611f      	str	r7, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 102b9a8:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 102b9ac:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 102b9ae:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 102b9b2:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 102b9b4:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 102b9b8:	f44f 7080 	mov.w	r0, #256	; 0x100
 102b9bc:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 102b9be:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 102b9c2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 102b9c6:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 102b9c8:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 102b9cc:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 102b9d0:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 102b9d2:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 102b9d6:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 102b9da:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 102b9dc:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
 102b9e0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 102b9e4:	6150      	str	r0, [r2, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 102b9e6:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
 102b9ea:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 102b9ee:	6158      	str	r0, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 102b9f0:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 102b9f4:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 102b9f8:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 102b9fa:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 102b9fe:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 102ba02:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 102ba04:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 102ba08:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 102ba0c:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 102ba0e:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 102ba12:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 102ba16:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 102ba18:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 102ba1c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 102ba20:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 102ba22:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 102ba26:	611e      	str	r6, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 102ba28:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
 102ba2c:	6155      	str	r5, [r2, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 102ba2e:	f8c2 50a0 	str.w	r5, [r2, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
 102ba32:	615c      	str	r4, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 102ba34:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 102ba38:	6111      	str	r1, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 102ba3a:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
 102ba3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 102ba42:	bf00      	nop
 102ba44:	400e0e00 	.word	0x400e0e00
 102ba48:	400e1000 	.word	0x400e1000

0102ba4c <null_action>:
 * \retval	None
 *
 ******************************************************************************
 */
void null_action (void)
{}
 102ba4c:	4770      	bx	lr
 102ba4e:	bf00      	nop

0102ba50 <TIMER_initialize>:
{
 102ba50:	b430      	push	{r4, r5}
	TIMER_tick_ms_timer = 0;
 102ba52:	4a0b      	ldr	r2, [pc, #44]	; (102ba80 <TIMER_initialize+0x30>)
 102ba54:	4c0b      	ldr	r4, [pc, #44]	; (102ba84 <TIMER_initialize+0x34>)
 102ba56:	4d0c      	ldr	r5, [pc, #48]	; (102ba88 <TIMER_initialize+0x38>)
 102ba58:	2300      	movs	r3, #0
 102ba5a:	6013      	str	r3, [r2, #0]
		TIMER_ms_timers[i].running = false;
 102ba5c:	4618      	mov	r0, r3
 102ba5e:	4622      	mov	r2, r4
		TIMER_ms_timers[i].timer = 0;
 102ba60:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 102ba64:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 102ba68:	3301      	adds	r3, #1
	for (uint8_t i=0; i < NUMBER_OF_MS_TIMERS; i++)
 102ba6a:	2b16      	cmp	r3, #22
		TIMER_ms_timers[i].running = false;
 102ba6c:	7010      	strb	r0, [r2, #0]
		TIMER_ms_timers[i].expired = false;
 102ba6e:	7050      	strb	r0, [r2, #1]
		TIMER_ms_timers[i].timer = 0;
 102ba70:	6048      	str	r0, [r1, #4]
 102ba72:	f102 020c 	add.w	r2, r2, #12
		TIMER_ms_timers[i].fptr = null_action;
 102ba76:	f842 5c04 	str.w	r5, [r2, #-4]
	for (uint8_t i=0; i < NUMBER_OF_MS_TIMERS; i++)
 102ba7a:	d1f1      	bne.n	102ba60 <TIMER_initialize+0x10>
} 
 102ba7c:	bc30      	pop	{r4, r5}
 102ba7e:	4770      	bx	lr
 102ba80:	200081dc 	.word	0x200081dc
 102ba84:	200080d4 	.word	0x200080d4
 102ba88:	0102ba4d 	.word	0x0102ba4d

0102ba8c <TIMER_start_ms_timer>:
	if (NUMBER_OF_MS_TIMERS > timer_id)
 102ba8c:	2815      	cmp	r0, #21
 102ba8e:	d81c      	bhi.n	102baca <TIMER_start_ms_timer+0x3e>
{
 102ba90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("cpsid i");
 102ba92:	b672      	cpsid	i
 102ba94:	f3bf 8f5f 	dmb	sy
		TIMER_ms_timers[timer_id].timer = TIMER_tick_ms_timer + period;
 102ba98:	4b0f      	ldr	r3, [pc, #60]	; (102bad8 <TIMER_start_ms_timer+0x4c>)
		TIMER_ms_timers[timer_id].running = true;
 102ba9a:	4d10      	ldr	r5, [pc, #64]	; (102badc <TIMER_start_ms_timer+0x50>)
		TIMER_ms_timers[timer_id].timer = TIMER_tick_ms_timer + period;
 102ba9c:	681c      	ldr	r4, [r3, #0]
		Disable_global_interrupt();
 102ba9e:	4e10      	ldr	r6, [pc, #64]	; (102bae0 <TIMER_start_ms_timer+0x54>)
		TIMER_ms_timers[timer_id].running = true;
 102baa0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 102baa4:	0080      	lsls	r0, r0, #2
 102baa6:	182b      	adds	r3, r5, r0
		Disable_global_interrupt();
 102baa8:	2700      	movs	r7, #0
		TIMER_ms_timers[timer_id].timer = TIMER_tick_ms_timer + period;
 102baaa:	440c      	add	r4, r1
		TIMER_ms_timers[timer_id].running = true;
 102baac:	f04f 0e01 	mov.w	lr, #1
		Disable_global_interrupt();
 102bab0:	7037      	strb	r7, [r6, #0]
		TIMER_ms_timers[timer_id].fptr = function_ptr;
 102bab2:	609a      	str	r2, [r3, #8]
		TIMER_ms_timers[timer_id].expired = false;
 102bab4:	705f      	strb	r7, [r3, #1]
		TIMER_ms_timers[timer_id].timer = TIMER_tick_ms_timer + period;
 102bab6:	605c      	str	r4, [r3, #4]
		TIMER_ms_timers[timer_id].running = true;
 102bab8:	f805 e000 	strb.w	lr, [r5, r0]
		if ( period == 0x0000 )
 102babc:	b131      	cbz	r1, 102bacc <TIMER_start_ms_timer+0x40>
		Enable_global_interrupt();
 102babe:	2301      	movs	r3, #1
 102bac0:	7033      	strb	r3, [r6, #0]
 102bac2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
 102bac6:	b662      	cpsie	i
 102bac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 102baca:	4770      	bx	lr
			TIMER_ms_timers[timer_id].running = false;
 102bacc:	5429      	strb	r1, [r5, r0]
			TIMER_ms_timers[timer_id].expired = true;
 102bace:	f883 e001 	strb.w	lr, [r3, #1]
			(*TIMER_ms_timers[timer_id].fptr)();		//execute the desired call back function
 102bad2:	4790      	blx	r2
 102bad4:	e7f3      	b.n	102babe <TIMER_start_ms_timer+0x32>
 102bad6:	bf00      	nop
 102bad8:	200081dc 	.word	0x200081dc
 102badc:	200080d4 	.word	0x200080d4
 102bae0:	2000008d 	.word	0x2000008d

0102bae4 <TIMER_is_ms_timer_running>:
	return TIMER_ms_timers[timer_id].running;
 102bae4:	4b02      	ldr	r3, [pc, #8]	; (102baf0 <TIMER_is_ms_timer_running+0xc>)
 102bae6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
}
 102baea:	f813 0020 	ldrb.w	r0, [r3, r0, lsl #2]
 102baee:	4770      	bx	lr
 102baf0:	200080d4 	.word	0x200080d4

0102baf4 <TIMER_is_ms_timer_expired>:
	return TIMER_ms_timers[timer_id].expired;
 102baf4:	4b03      	ldr	r3, [pc, #12]	; (102bb04 <TIMER_is_ms_timer_expired+0x10>)
 102baf6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 102bafa:	eb03 0380 	add.w	r3, r3, r0, lsl #2
}
 102bafe:	7858      	ldrb	r0, [r3, #1]
 102bb00:	4770      	bx	lr
 102bb02:	bf00      	nop
 102bb04:	200080d4 	.word	0x200080d4

0102bb08 <TIMER_reset_ms_timer>:
{
 102bb08:	b470      	push	{r4, r5, r6}
  __ASM volatile ("cpsid i");
 102bb0a:	b672      	cpsid	i
 102bb0c:	f3bf 8f5f 	dmb	sy
	TIMER_ms_timers[timer_id].running = false;
 102bb10:	4c09      	ldr	r4, [pc, #36]	; (102bb38 <TIMER_reset_ms_timer+0x30>)
	Disable_global_interrupt();
 102bb12:	490a      	ldr	r1, [pc, #40]	; (102bb3c <TIMER_reset_ms_timer+0x34>)
	TIMER_ms_timers[timer_id].fptr = null_action;
 102bb14:	4e0a      	ldr	r6, [pc, #40]	; (102bb40 <TIMER_reset_ms_timer+0x38>)
	TIMER_ms_timers[timer_id].running = false;
 102bb16:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 102bb1a:	0080      	lsls	r0, r0, #2
 102bb1c:	1822      	adds	r2, r4, r0
	Disable_global_interrupt();
 102bb1e:	2300      	movs	r3, #0
	Enable_global_interrupt();
 102bb20:	2501      	movs	r5, #1
	Disable_global_interrupt();
 102bb22:	700b      	strb	r3, [r1, #0]
	TIMER_ms_timers[timer_id].fptr = null_action;
 102bb24:	6096      	str	r6, [r2, #8]
	TIMER_ms_timers[timer_id].timer = 0;
 102bb26:	6053      	str	r3, [r2, #4]
	TIMER_ms_timers[timer_id].running = false;
 102bb28:	5423      	strb	r3, [r4, r0]
	TIMER_ms_timers[timer_id].expired = false;
 102bb2a:	7053      	strb	r3, [r2, #1]
	Enable_global_interrupt();
 102bb2c:	700d      	strb	r5, [r1, #0]
 102bb2e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
 102bb32:	b662      	cpsie	i
}
 102bb34:	bc70      	pop	{r4, r5, r6}
 102bb36:	4770      	bx	lr
 102bb38:	200080d4 	.word	0x200080d4
 102bb3c:	2000008d 	.word	0x2000008d
 102bb40:	0102ba4d 	.word	0x0102ba4d

0102bb44 <TIMER_ms_tick_handler>:
 * \retval	None
 *
 ******************************************************************************
 */
void TIMER_ms_tick_handler(void)
{
 102bb44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t i;
	
	TIMER_tick_ms_timer++;
 102bb48:	f8df 9054 	ldr.w	r9, [pc, #84]	; 102bba0 <TIMER_ms_tick_handler+0x5c>
 102bb4c:	4e13      	ldr	r6, [pc, #76]	; (102bb9c <TIMER_ms_tick_handler+0x58>)
 102bb4e:	f8d9 3000 	ldr.w	r3, [r9]
 102bb52:	2400      	movs	r4, #0
 102bb54:	3301      	adds	r3, #1
 102bb56:	f8c9 3000 	str.w	r3, [r9]
 102bb5a:	4635      	mov	r5, r6
	{
		if ( TIMER_ms_timers[i].running == true )
		{
			if ( TIMER_tick_ms_timer == TIMER_ms_timers[i].timer )
			{
				TIMER_ms_timers[i].running = false;
 102bb5c:	46a0      	mov	r8, r4
				TIMER_ms_timers[i].expired = true;
 102bb5e:	2701      	movs	r7, #1
 102bb60:	e003      	b.n	102bb6a <TIMER_ms_tick_handler+0x26>
	for (i = 0; i < NUMBER_OF_MS_TIMERS; i++)
 102bb62:	2c16      	cmp	r4, #22
 102bb64:	f105 050c 	add.w	r5, r5, #12
 102bb68:	d015      	beq.n	102bb96 <TIMER_ms_tick_handler+0x52>
		if ( TIMER_ms_timers[i].running == true )
 102bb6a:	782a      	ldrb	r2, [r5, #0]
			if ( TIMER_tick_ms_timer == TIMER_ms_timers[i].timer )
 102bb6c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 102bb70:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 102bb74:	3401      	adds	r4, #1
		if ( TIMER_ms_timers[i].running == true )
 102bb76:	2a00      	cmp	r2, #0
 102bb78:	d0f3      	beq.n	102bb62 <TIMER_ms_tick_handler+0x1e>
			if ( TIMER_tick_ms_timer == TIMER_ms_timers[i].timer )
 102bb7a:	685a      	ldr	r2, [r3, #4]
 102bb7c:	f8d9 3000 	ldr.w	r3, [r9]
 102bb80:	429a      	cmp	r2, r3
 102bb82:	d1ee      	bne.n	102bb62 <TIMER_ms_tick_handler+0x1e>
				TIMER_ms_timers[i].running = false;
 102bb84:	f885 8000 	strb.w	r8, [r5]
				TIMER_ms_timers[i].expired = true;
 102bb88:	706f      	strb	r7, [r5, #1]
				(*TIMER_ms_timers[i].fptr)();		//execute the desired call back function
 102bb8a:	68ab      	ldr	r3, [r5, #8]
 102bb8c:	4798      	blx	r3
	for (i = 0; i < NUMBER_OF_MS_TIMERS; i++)
 102bb8e:	2c16      	cmp	r4, #22
 102bb90:	f105 050c 	add.w	r5, r5, #12
 102bb94:	d1e9      	bne.n	102bb6a <TIMER_ms_tick_handler+0x26>
			}	
		}
	}
}
 102bb96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 102bb9a:	bf00      	nop
 102bb9c:	200080d4 	.word	0x200080d4
 102bba0:	200081dc 	.word	0x200081dc

0102bba4 <TOU_APP_bSt_51_validate_data>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
bool TOU_APP_bSt_51_validate_data(ST_50_TYPE *st_51_structure) {
 102bba4:	b430      	push	{r4, r5}
 102bba6:	2301      	movs	r3, #1
 102bba8:	7804      	ldrb	r4, [r0, #0]
	
	bool is_ok = true;
 102bbaa:	461a      	mov	r2, r3
	uint8_t i;
	
	for ( i = 0; i < 8; i++) {
		if ( ( ( (PERM_TIME_FUNC_FLAG1 >> i) & 0x01 ) == 0 ) && ( ( (st_51_structure->time_func_flag1 >> i) & 0x01 ) == 1 ) ) {
 102bbac:	2531      	movs	r5, #49	; 0x31
 102bbae:	fa45 f103 	asr.w	r1, r5, r3
 102bbb2:	07c9      	lsls	r1, r1, #31
 102bbb4:	d405      	bmi.n	102bbc2 <TOU_APP_bSt_51_validate_data+0x1e>
 102bbb6:	fa44 f103 	asr.w	r1, r4, r3
			is_ok = false;	
 102bbba:	f011 0f01 	tst.w	r1, #1
 102bbbe:	bf18      	it	ne
 102bbc0:	2200      	movne	r2, #0
 102bbc2:	3301      	adds	r3, #1
	for ( i = 0; i < 8; i++) {
 102bbc4:	2b08      	cmp	r3, #8
 102bbc6:	d1f2      	bne.n	102bbae <TOU_APP_bSt_51_validate_data+0xa>
		}
	}
	st_51_structure->time_func_flag1 &= PERM_TIME_FUNC_FLAG1;
 102bbc8:	f004 0431 	and.w	r4, r4, #49	; 0x31
 102bbcc:	7845      	ldrb	r5, [r0, #1]
 102bbce:	7004      	strb	r4, [r0, #0]
 102bbd0:	2300      	movs	r3, #0
	
	for ( i = 0; i < 8; i++) {
		if ( ( ( (PERM_TIME_FUNC_FLAG2 >> i) & 0x01 ) == 0 ) && ( ( (st_51_structure->time_func_flag2 >> i) & 0x01 ) == 1 ) ) {
 102bbd2:	241a      	movs	r4, #26
 102bbd4:	fa44 f103 	asr.w	r1, r4, r3
 102bbd8:	07c9      	lsls	r1, r1, #31
 102bbda:	d405      	bmi.n	102bbe8 <TOU_APP_bSt_51_validate_data+0x44>
 102bbdc:	fa45 f103 	asr.w	r1, r5, r3
			is_ok = false;
 102bbe0:	f011 0f01 	tst.w	r1, #1
 102bbe4:	bf18      	it	ne
 102bbe6:	2200      	movne	r2, #0
 102bbe8:	3301      	adds	r3, #1
	for ( i = 0; i < 8; i++) {
 102bbea:	2b08      	cmp	r3, #8
 102bbec:	d1f2      	bne.n	102bbd4 <TOU_APP_bSt_51_validate_data+0x30>
		}
	}
	st_51_structure->time_func_flag2 &= PERM_TIME_FUNC_FLAG2;
	
	if ( ( (st_51_structure->calendar_func & 0x0F) >> 0 ) > MAX_NBR_SEASONS ) {
 102bbee:	7883      	ldrb	r3, [r0, #2]
 102bbf0:	f003 010f 	and.w	r1, r3, #15
	st_51_structure->time_func_flag2 &= PERM_TIME_FUNC_FLAG2;
 102bbf4:	f005 051a 	and.w	r5, r5, #26
	if ( ( (st_51_structure->calendar_func & 0x0F) >> 0 ) > MAX_NBR_SEASONS ) {
 102bbf8:	290c      	cmp	r1, #12
	st_51_structure->time_func_flag2 &= PERM_TIME_FUNC_FLAG2;
 102bbfa:	7045      	strb	r5, [r0, #1]
	if ( ( (st_51_structure->calendar_func & 0x0F) >> 0 ) > MAX_NBR_SEASONS ) {
 102bbfc:	d903      	bls.n	102bc06 <TOU_APP_bSt_51_validate_data+0x62>
		st_51_structure->calendar_func |= (MAX_NBR_SEASONS << 0);
 102bbfe:	f043 030c 	orr.w	r3, r3, #12
 102bc02:	7083      	strb	r3, [r0, #2]
		is_ok = false;
 102bc04:	2200      	movs	r2, #0
	}
	
	if ( ( (st_51_structure->calendar_func & 0xF0) >> 4 ) > MAX_NBR_SPECIAL_SCHED ) {
 102bc06:	2b2f      	cmp	r3, #47	; 0x2f
 102bc08:	d903      	bls.n	102bc12 <TOU_APP_bSt_51_validate_data+0x6e>
		st_51_structure->calendar_func |= (MAX_NBR_SPECIAL_SCHED << 4);
 102bc0a:	f043 0320 	orr.w	r3, r3, #32
 102bc0e:	7083      	strb	r3, [r0, #2]
		is_ok = false;
 102bc10:	2200      	movs	r2, #0
	}
	
	if ( st_51_structure->nbr_non_recurr_dates > MAX_NBR_NON_RECURR_DATES ) {
 102bc12:	78c3      	ldrb	r3, [r0, #3]
 102bc14:	2b32      	cmp	r3, #50	; 0x32
 102bc16:	d902      	bls.n	102bc1e <TOU_APP_bSt_51_validate_data+0x7a>
		st_51_structure->nbr_non_recurr_dates = MAX_NBR_NON_RECURR_DATES;
 102bc18:	2332      	movs	r3, #50	; 0x32
 102bc1a:	70c3      	strb	r3, [r0, #3]
		is_ok = false;
 102bc1c:	2200      	movs	r2, #0
	}
	
	if ( st_51_structure->nbr_recurr_dates > MAX_NBR_RECURR_DATES ) {
 102bc1e:	7903      	ldrb	r3, [r0, #4]
 102bc20:	2b28      	cmp	r3, #40	; 0x28
 102bc22:	d902      	bls.n	102bc2a <TOU_APP_bSt_51_validate_data+0x86>
		st_51_structure->nbr_recurr_dates = MAX_NBR_RECURR_DATES;
 102bc24:	2328      	movs	r3, #40	; 0x28
 102bc26:	7103      	strb	r3, [r0, #4]
		is_ok = false;
 102bc28:	2200      	movs	r2, #0
	}
	
	if ( st_51_structure->nbr_tier_switches > MAX_NBR_TIER_SWITCHES ) {
 102bc2a:	88c3      	ldrh	r3, [r0, #6]
 102bc2c:	2b50      	cmp	r3, #80	; 0x50
 102bc2e:	d902      	bls.n	102bc36 <TOU_APP_bSt_51_validate_data+0x92>
		st_51_structure->nbr_tier_switches = MAX_NBR_TIER_SWITCHES;
 102bc30:	2350      	movs	r3, #80	; 0x50
 102bc32:	80c3      	strh	r3, [r0, #6]
		is_ok = false;
 102bc34:	2200      	movs	r2, #0
	}
	
	if ( st_51_structure->calendar_tbl_size > MAX_CALENDAR_TBL_SIZE ) {
 102bc36:	8903      	ldrh	r3, [r0, #8]
 102bc38:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 102bc3c:	d903      	bls.n	102bc46 <TOU_APP_bSt_51_validate_data+0xa2>
		st_51_structure->calendar_tbl_size = MAX_CALENDAR_TBL_SIZE;
 102bc3e:	f44f 731b 	mov.w	r3, #620	; 0x26c
 102bc42:	8103      	strh	r3, [r0, #8]
		is_ok = false;
 102bc44:	2200      	movs	r2, #0
	}
	
	return is_ok;
}
 102bc46:	4610      	mov	r0, r2
 102bc48:	bc30      	pop	{r4, r5}
 102bc4a:	4770      	bx	lr

0102bc4c <TOU_APP_vSt_51_read_eeprom_values>:
 *
 * \param void
 * \retval void
 ******************************************************************************
 */
void TOU_APP_vSt_51_read_eeprom_values(ST_50_TYPE *st_51_structure) {	
 102bc4c:	b570      	push	{r4, r5, r6, lr}
	
	EEPROM_reader( ST_51_TIME_FUNC_FLAG1_ADDR, &st_51_structure->time_func_flag1, 1 );
 102bc4e:	4601      	mov	r1, r0
void TOU_APP_vSt_51_read_eeprom_values(ST_50_TYPE *st_51_structure) {	
 102bc50:	4605      	mov	r5, r0
	EEPROM_reader( ST_51_TIME_FUNC_FLAG1_ADDR, &st_51_structure->time_func_flag1, 1 );
 102bc52:	4c13      	ldr	r4, [pc, #76]	; (102bca0 <TOU_APP_vSt_51_read_eeprom_values+0x54>)
 102bc54:	2201      	movs	r2, #1
 102bc56:	f640 206c 	movw	r0, #2668	; 0xa6c
 102bc5a:	47a0      	blx	r4
	EEPROM_reader( ST_51_TIME_FUNC_FLAG2_ADDR, &st_51_structure->time_func_flag2, 1 );
 102bc5c:	1c69      	adds	r1, r5, #1
 102bc5e:	2201      	movs	r2, #1
 102bc60:	f640 206d 	movw	r0, #2669	; 0xa6d
 102bc64:	47a0      	blx	r4
	EEPROM_reader( ST_51_CALENDAR_FUNC_ADDR, &st_51_structure->calendar_func, 1 );
 102bc66:	1ca9      	adds	r1, r5, #2
 102bc68:	2201      	movs	r2, #1
 102bc6a:	f640 206e 	movw	r0, #2670	; 0xa6e
 102bc6e:	47a0      	blx	r4
	EEPROM_reader( ST_51_NBR_NON_RECURR_DATES_ADDR, &st_51_structure->nbr_non_recurr_dates, 1 );
 102bc70:	1ce9      	adds	r1, r5, #3
 102bc72:	2201      	movs	r2, #1
 102bc74:	f640 206f 	movw	r0, #2671	; 0xa6f
 102bc78:	47a0      	blx	r4
	EEPROM_reader( ST_51_NBR_RECURR_DATES_ADDR, &st_51_structure->nbr_recurr_dates, 1 );
 102bc7a:	1d29      	adds	r1, r5, #4
 102bc7c:	2201      	movs	r2, #1
 102bc7e:	f44f 6027 	mov.w	r0, #2672	; 0xa70
 102bc82:	47a0      	blx	r4
	EEPROM_reader( ST_51_NBR_TIER_SWITCHES_ADDR, &st_51_structure->nbr_tier_switches, 2 );
 102bc84:	1da9      	adds	r1, r5, #6
 102bc86:	2202      	movs	r2, #2
 102bc88:	f640 2071 	movw	r0, #2673	; 0xa71
 102bc8c:	47a0      	blx	r4
	EEPROM_reader( ST_51_CALENDAR_TBL_SIZE_ADDR, &st_51_structure->calendar_tbl_size, 2);
 102bc8e:	f105 0108 	add.w	r1, r5, #8
 102bc92:	4623      	mov	r3, r4
 102bc94:	2202      	movs	r2, #2
 102bc96:	f640 2073 	movw	r0, #2675	; 0xa73
}
 102bc9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	EEPROM_reader( ST_51_CALENDAR_TBL_SIZE_ADDR, &st_51_structure->calendar_tbl_size, 2);
 102bc9e:	4718      	bx	r3
 102bca0:	01017511 	.word	0x01017511

0102bca4 <TOU_APP_xGet_postponed_date.isra.3>:
 * 
 * \param void
 * \retval void
 ******************************************************************************
 */
HUMAN_TIME_TYPE TOU_APP_xGet_postponed_date(uint8_t nbr_weekday_after, uint8_t weekday, HUMAN_TIME_TYPE date) {
 102bca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 102bca8:	b087      	sub	sp, #28
 102bcaa:	461f      	mov	r7, r3
 102bcac:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 102bcb0:	9303      	str	r3, [sp, #12]
 102bcb2:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 102bcb6:	9002      	str	r0, [sp, #8]
	HUMAN_TIME_TYPE postponedDate;
	bool leap_year;
	uint8_t days_in_month;
	
	postponedDate = date;
	leap_year = RTC_APP_bIs_leap_year(postponedDate.year);
 102bcb8:	4d29      	ldr	r5, [pc, #164]	; (102bd60 <TOU_APP_xGet_postponed_date.isra.3+0xbc>)
HUMAN_TIME_TYPE TOU_APP_xGet_postponed_date(uint8_t nbr_weekday_after, uint8_t weekday, HUMAN_TIME_TYPE date) {
 102bcba:	9304      	str	r3, [sp, #16]
	leap_year = RTC_APP_bIs_leap_year(postponedDate.year);
 102bcbc:	4638      	mov	r0, r7
HUMAN_TIME_TYPE TOU_APP_xGet_postponed_date(uint8_t nbr_weekday_after, uint8_t weekday, HUMAN_TIME_TYPE date) {
 102bcbe:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 102bcc2:	9101      	str	r1, [sp, #4]
 102bcc4:	4692      	mov	sl, r2
 102bcc6:	f89d b040 	ldrb.w	fp, [sp, #64]	; 0x40
 102bcca:	f89d 4044 	ldrb.w	r4, [sp, #68]	; 0x44
 102bcce:	9305      	str	r3, [sp, #20]
	leap_year = RTC_APP_bIs_leap_year(postponedDate.year);
 102bcd0:	47a8      	blx	r5
 102bcd2:	4924      	ldr	r1, [pc, #144]	; (102bd64 <TOU_APP_xGet_postponed_date.isra.3+0xc0>)
	
	for ( i = 0; i < 31; i++ ) {
		
		days_in_month = month_days[leap_year][postponedDate.month];
 102bcd4:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 102bcd8:	eb00 0082 	add.w	r0, r0, r2, lsl #2
	leap_year = RTC_APP_bIs_leap_year(postponedDate.year);
 102bcdc:	251f      	movs	r5, #31
		days_in_month = month_days[leap_year][postponedDate.month];
 102bcde:	eb01 0900 	add.w	r9, r1, r0
	uint8_t weekday_count = 0;
 102bce2:	f04f 0800 	mov.w	r8, #0
 102bce6:	462e      	mov	r6, r5
 102bce8:	e014      	b.n	102bd14 <TOU_APP_xGet_postponed_date.isra.3+0x70>
			else {
				postponedDate.day++;
			}
		}
		else {
			postponedDate.day++;
 102bcea:	3401      	adds	r4, #1
 102bcec:	b2e4      	uxtb	r4, r4
		}
		
		if (postponedDate.day > days_in_month) {
 102bcee:	42a5      	cmp	r5, r4
			postponedDate.day = 0;
			postponedDate.month++;
 102bcf0:	f10b 0201 	add.w	r2, fp, #1
		if (postponedDate.day > days_in_month) {
 102bcf4:	d20a      	bcs.n	102bd0c <TOU_APP_xGet_postponed_date.isra.3+0x68>
			postponedDate.month++;
 102bcf6:	fa5f fb82 	uxtb.w	fp, r2
			
			if (postponedDate.month > 12){
 102bcfa:	f1bb 0f0c 	cmp.w	fp, #12
				postponedDate.month = 1;
				postponedDate.year++;
 102bcfe:	f107 0201 	add.w	r2, r7, #1
 102bd02:	bf84      	itt	hi
 102bd04:	b297      	uxthhi	r7, r2
				postponedDate.month = 1;
 102bd06:	f04f 0b01 	movhi.w	fp, #1
			postponedDate.day = 0;
 102bd0a:	2400      	movs	r4, #0
 102bd0c:	1e75      	subs	r5, r6, #1
	for ( i = 0; i < 31; i++ ) {
 102bd0e:	f015 06ff 	ands.w	r6, r5, #255	; 0xff
 102bd12:	d013      	beq.n	102bd3c <TOU_APP_xGet_postponed_date.isra.3+0x98>
		day_of_week = RTC_APP_ucDay_of_week(postponedDate.year, postponedDate.month, postponedDate.day);
 102bd14:	4622      	mov	r2, r4
 102bd16:	4659      	mov	r1, fp
 102bd18:	4638      	mov	r0, r7
 102bd1a:	4b13      	ldr	r3, [pc, #76]	; (102bd68 <TOU_APP_xGet_postponed_date.isra.3+0xc4>)
		days_in_month = month_days[leap_year][postponedDate.month];
 102bd1c:	f819 500b 	ldrb.w	r5, [r9, fp]
		day_of_week = RTC_APP_ucDay_of_week(postponedDate.year, postponedDate.month, postponedDate.day);
 102bd20:	4798      	blx	r3
		if ( day_of_week == weekday ) {
 102bd22:	4550      	cmp	r0, sl
 102bd24:	d1e1      	bne.n	102bcea <TOU_APP_xGet_postponed_date.isra.3+0x46>
			weekday_count++;
 102bd26:	f108 0801 	add.w	r8, r8, #1
			if ( weekday_count == nbr_weekday_after ) {
 102bd2a:	9b01      	ldr	r3, [sp, #4]
			weekday_count++;
 102bd2c:	fa5f f888 	uxtb.w	r8, r8
			if ( weekday_count == nbr_weekday_after ) {
 102bd30:	4598      	cmp	r8, r3
				postponedDate.day++;
 102bd32:	f104 0201 	add.w	r2, r4, #1
			if ( weekday_count == nbr_weekday_after ) {
 102bd36:	d001      	beq.n	102bd3c <TOU_APP_xGet_postponed_date.isra.3+0x98>
				postponedDate.day++;
 102bd38:	b2d4      	uxtb	r4, r2
 102bd3a:	e7d8      	b.n	102bcee <TOU_APP_xGet_postponed_date.isra.3+0x4a>
			}
		}
	}
	
	return postponedDate;
 102bd3c:	9802      	ldr	r0, [sp, #8]
 102bd3e:	f89d 1010 	ldrb.w	r1, [sp, #16]
 102bd42:	f89d 200c 	ldrb.w	r2, [sp, #12]
 102bd46:	7141      	strb	r1, [r0, #5]
 102bd48:	f89d 1014 	ldrb.w	r1, [sp, #20]
 102bd4c:	8007      	strh	r7, [r0, #0]
 102bd4e:	f880 b002 	strb.w	fp, [r0, #2]
 102bd52:	70c4      	strb	r4, [r0, #3]
 102bd54:	7102      	strb	r2, [r0, #4]
 102bd56:	7181      	strb	r1, [r0, #6]
}
 102bd58:	b007      	add	sp, #28
 102bd5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 102bd5e:	bf00      	nop
 102bd60:	01029e01 	.word	0x01029e01
 102bd64:	01031920 	.word	0x01031920
 102bd68:	01029e39 	.word	0x01029e39

0102bd6c <TOU_APP_vSt_51_write_eeprom_values.constprop.6>:
void TOU_APP_vSt_51_write_eeprom_values(ST_50_TYPE *st_51_structure) {
 102bd6c:	b570      	push	{r4, r5, r6, lr}
	EEPROM_writer( ST_51_TIME_FUNC_FLAG1_ADDR, &st_51_structure->time_func_flag1, 1 );
 102bd6e:	4d19      	ldr	r5, [pc, #100]	; (102bdd4 <TOU_APP_vSt_51_write_eeprom_values.constprop.6+0x68>)
	SM_APP_vChange_table_state(ST_51_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
 102bd70:	4e19      	ldr	r6, [pc, #100]	; (102bdd8 <TOU_APP_vSt_51_write_eeprom_values.constprop.6+0x6c>)
	EEPROM_writer( ST_51_TIME_FUNC_FLAG1_ADDR, &st_51_structure->time_func_flag1, 1 );
 102bd72:	4c1a      	ldr	r4, [pc, #104]	; (102bddc <TOU_APP_vSt_51_write_eeprom_values.constprop.6+0x70>)
	SM_APP_vChange_table_state(ST_51_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
 102bd74:	21ff      	movs	r1, #255	; 0xff
 102bd76:	f640 2069 	movw	r0, #2665	; 0xa69
 102bd7a:	47b0      	blx	r6
	EEPROM_writer( ST_51_TIME_FUNC_FLAG1_ADDR, &st_51_structure->time_func_flag1, 1 );
 102bd7c:	4629      	mov	r1, r5
 102bd7e:	2201      	movs	r2, #1
 102bd80:	f640 206c 	movw	r0, #2668	; 0xa6c
 102bd84:	47a0      	blx	r4
	EEPROM_writer( ST_51_TIME_FUNC_FLAG2_ADDR, &st_51_structure->time_func_flag2, 1 );
 102bd86:	1c69      	adds	r1, r5, #1
 102bd88:	2201      	movs	r2, #1
 102bd8a:	f640 206d 	movw	r0, #2669	; 0xa6d
 102bd8e:	47a0      	blx	r4
	EEPROM_writer( ST_51_CALENDAR_FUNC_ADDR, &st_51_structure->calendar_func, 1 );
 102bd90:	1ca9      	adds	r1, r5, #2
 102bd92:	2201      	movs	r2, #1
 102bd94:	f640 206e 	movw	r0, #2670	; 0xa6e
 102bd98:	47a0      	blx	r4
	EEPROM_writer( ST_51_NBR_NON_RECURR_DATES_ADDR, &st_51_structure->nbr_non_recurr_dates, 1 );
 102bd9a:	1ce9      	adds	r1, r5, #3
 102bd9c:	2201      	movs	r2, #1
 102bd9e:	f640 206f 	movw	r0, #2671	; 0xa6f
 102bda2:	47a0      	blx	r4
	EEPROM_writer( ST_51_NBR_RECURR_DATES_ADDR, &st_51_structure->nbr_recurr_dates, 1 );
 102bda4:	1d29      	adds	r1, r5, #4
 102bda6:	2201      	movs	r2, #1
 102bda8:	f44f 6027 	mov.w	r0, #2672	; 0xa70
 102bdac:	47a0      	blx	r4
	EEPROM_writer( ST_51_NBR_TIER_SWITCHES_ADDR, &st_51_structure->nbr_tier_switches, 2 );
 102bdae:	1da9      	adds	r1, r5, #6
 102bdb0:	2202      	movs	r2, #2
 102bdb2:	f640 2071 	movw	r0, #2673	; 0xa71
 102bdb6:	47a0      	blx	r4
	EEPROM_writer( ST_51_CALENDAR_TBL_SIZE_ADDR, &st_51_structure->calendar_tbl_size, 2);
 102bdb8:	f105 0108 	add.w	r1, r5, #8
 102bdbc:	2202      	movs	r2, #2
 102bdbe:	f640 2073 	movw	r0, #2675	; 0xa73
 102bdc2:	47a0      	blx	r4
	SM_APP_vChange_table_state(ST_51_PROG_STATE_ADDR, C1219_TABLE_FULL);
 102bdc4:	4633      	mov	r3, r6
 102bdc6:	2145      	movs	r1, #69	; 0x45
 102bdc8:	f640 2069 	movw	r0, #2665	; 0xa69
}
 102bdcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	SM_APP_vChange_table_state(ST_51_PROG_STATE_ADDR, C1219_TABLE_FULL);
 102bdd0:	4718      	bx	r3
 102bdd2:	bf00      	nop
 102bdd4:	200081f8 	.word	0x200081f8
 102bdd8:	010203e9 	.word	0x010203e9
 102bddc:	01017509 	.word	0x01017509

0102bde0 <TOU_APP_vInitialize>:
void TOU_APP_vInitialize(void) {
 102bde0:	b510      	push	{r4, lr}
	memset(&tou, 0, sizeof(tou));
 102bde2:	4c08      	ldr	r4, [pc, #32]	; (102be04 <TOU_APP_vInitialize+0x24>)
 102bde4:	4b08      	ldr	r3, [pc, #32]	; (102be08 <TOU_APP_vInitialize+0x28>)
 102bde6:	22c4      	movs	r2, #196	; 0xc4
 102bde8:	2100      	movs	r1, #0
 102bdea:	4620      	mov	r0, r4
 102bdec:	4798      	blx	r3
	EEPROM_reader(TOU_LAST_SEASON_ADDR, &tou.curr_season, 1);
 102bdee:	4b07      	ldr	r3, [pc, #28]	; (102be0c <TOU_APP_vInitialize+0x2c>)
 102bdf0:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
 102bdf4:	2201      	movs	r2, #1
 102bdf6:	f249 20bb 	movw	r0, #37563	; 0x92bb
 102bdfa:	4798      	blx	r3
	tou.curr_special_sched_active = (uint8_t)NO_SPECIAL_SCHED_ACTIVE;
 102bdfc:	230f      	movs	r3, #15
 102bdfe:	f884 30bd 	strb.w	r3, [r4, #189]	; 0xbd
 102be02:	bd10      	pop	{r4, pc}
 102be04:	20008208 	.word	0x20008208
 102be08:	01030b71 	.word	0x01030b71
 102be0c:	01017511 	.word	0x01017511

0102be10 <TOU_APP_st_50_execute_table_reading>:
bool TOU_APP_st_50_execute_table_reading(uint8_t *table_buffer) {
 102be10:	b4f0      	push	{r4, r5, r6, r7}
	table_buffer[k++] = PERM_TIME_FUNC_FLAG1;
 102be12:	2231      	movs	r2, #49	; 0x31
	table_buffer[k++] = PERM_TIME_FUNC_FLAG2;
 102be14:	231a      	movs	r3, #26
	table_buffer[k++] = PERM_TIME_FUNC_FLAG1;
 102be16:	7002      	strb	r2, [r0, #0]
	table_buffer[k++] = PERM_TIME_FUNC_FLAG2;
 102be18:	7043      	strb	r3, [r0, #1]
	table_buffer[k++] = MAX_CALENDAR_FUNC_VALUES;
 102be1a:	272c      	movs	r7, #44	; 0x2c
	table_buffer[k++] = MAX_NBR_NON_RECURR_DATES;
 102be1c:	2632      	movs	r6, #50	; 0x32
	table_buffer[k++] = MAX_NBR_RECURR_DATES;
 102be1e:	2528      	movs	r5, #40	; 0x28
	table_buffer[k++] = (uint8_t)((MAX_NBR_TIER_SWITCHES & 0x00FF) >> 0);
 102be20:	2450      	movs	r4, #80	; 0x50
	table_buffer[k++] = (uint8_t)((MAX_NBR_TIER_SWITCHES & 0xFF00) >> 8);
 102be22:	2100      	movs	r1, #0
	table_buffer[k++] = (uint8_t)((MAX_CALENDAR_TBL_SIZE & 0x00FF) >> 0);
 102be24:	226c      	movs	r2, #108	; 0x6c
	table_buffer[k++] = (uint8_t)((MAX_CALENDAR_TBL_SIZE & 0xFF00) >> 8);
 102be26:	2302      	movs	r3, #2
	table_buffer[k++] = MAX_CALENDAR_FUNC_VALUES;
 102be28:	7087      	strb	r7, [r0, #2]
	table_buffer[k++] = MAX_NBR_NON_RECURR_DATES;
 102be2a:	70c6      	strb	r6, [r0, #3]
	table_buffer[k++] = MAX_NBR_RECURR_DATES;
 102be2c:	7105      	strb	r5, [r0, #4]
	table_buffer[k++] = (uint8_t)((MAX_NBR_TIER_SWITCHES & 0x00FF) >> 0);
 102be2e:	7144      	strb	r4, [r0, #5]
	table_buffer[k++] = (uint8_t)((MAX_NBR_TIER_SWITCHES & 0xFF00) >> 8);
 102be30:	7181      	strb	r1, [r0, #6]
	table_buffer[k++] = (uint8_t)((MAX_CALENDAR_TBL_SIZE & 0x00FF) >> 0);
 102be32:	71c2      	strb	r2, [r0, #7]
	table_buffer[k++] = (uint8_t)((MAX_CALENDAR_TBL_SIZE & 0xFF00) >> 8);
 102be34:	7203      	strb	r3, [r0, #8]
}
 102be36:	bcf0      	pop	{r4, r5, r6, r7}
 102be38:	2001      	movs	r0, #1
 102be3a:	4770      	bx	lr

0102be3c <TOU_APP_sSt_50_get_size>:
 102be3c:	2009      	movs	r0, #9
 102be3e:	4770      	bx	lr

0102be40 <TOU_APP_bSt_51_refresh_ram>:
bool TOU_APP_bSt_51_refresh_ram(void) {
 102be40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 102be44:	f8df 8050 	ldr.w	r8, [pc, #80]	; 102be98 <TOU_APP_bSt_51_refresh_ram+0x58>
 102be48:	4f10      	ldr	r7, [pc, #64]	; (102be8c <TOU_APP_bSt_51_refresh_ram+0x4c>)
 102be4a:	b084      	sub	sp, #16
 102be4c:	2403      	movs	r4, #3
 102be4e:	ad01      	add	r5, sp, #4
		TOU_APP_vSt_51_read_eeprom_values(&st_51_temp);
 102be50:	4628      	mov	r0, r5
 102be52:	47c0      	blx	r8
		is_ok = TOU_APP_bSt_51_validate_data(&st_51_temp);
 102be54:	4628      	mov	r0, r5
 102be56:	47b8      	blx	r7
 102be58:	1e63      	subs	r3, r4, #1
		if ( is_ok == true ) {
 102be5a:	4606      	mov	r6, r0
 102be5c:	b968      	cbnz	r0, 102be7a <TOU_APP_bSt_51_refresh_ram+0x3a>
	for (uint8_t i = 0; i < 3; i++) {
 102be5e:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 102be62:	d1f5      	bne.n	102be50 <TOU_APP_bSt_51_refresh_ram+0x10>
		st_51 = st_51_temp;
 102be64:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 102be68:	4b09      	ldr	r3, [pc, #36]	; (102be90 <TOU_APP_bSt_51_refresh_ram+0x50>)
		TOU_APP_vSt_51_write_eeprom_values(&st_51);
 102be6a:	4c0a      	ldr	r4, [pc, #40]	; (102be94 <TOU_APP_bSt_51_refresh_ram+0x54>)
		st_51 = st_51_temp;
 102be6c:	c303      	stmia	r3!, {r0, r1}
 102be6e:	801a      	strh	r2, [r3, #0]
		TOU_APP_vSt_51_write_eeprom_values(&st_51);
 102be70:	47a0      	blx	r4
}
 102be72:	4630      	mov	r0, r6
 102be74:	b004      	add	sp, #16
 102be76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			st_51 = st_51_temp;
 102be7a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 102be7e:	4b04      	ldr	r3, [pc, #16]	; (102be90 <TOU_APP_bSt_51_refresh_ram+0x50>)
 102be80:	c303      	stmia	r3!, {r0, r1}
}
 102be82:	4630      	mov	r0, r6
			st_51 = st_51_temp;
 102be84:	801a      	strh	r2, [r3, #0]
}
 102be86:	b004      	add	sp, #16
 102be88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 102be8c:	0102bba5 	.word	0x0102bba5
 102be90:	200081f8 	.word	0x200081f8
 102be94:	0102bd6d 	.word	0x0102bd6d
 102be98:	0102bc4d 	.word	0x0102bc4d

0102be9c <TOU_APP_vSt_51_recover_nvm>:
	TOU_APP_vSt_51_write_eeprom_values(&st_51);
 102be9c:	4b00      	ldr	r3, [pc, #0]	; (102bea0 <TOU_APP_vSt_51_recover_nvm+0x4>)
 102be9e:	4718      	bx	r3
 102bea0:	0102bd6d 	.word	0x0102bd6d

0102bea4 <TOU_APP_vSt_51_recover_ram>:
	TOU_APP_vSt_51_read_eeprom_values(&st_51);
 102bea4:	4801      	ldr	r0, [pc, #4]	; (102beac <TOU_APP_vSt_51_recover_ram+0x8>)
 102bea6:	4b02      	ldr	r3, [pc, #8]	; (102beb0 <TOU_APP_vSt_51_recover_ram+0xc>)
 102bea8:	4718      	bx	r3
 102beaa:	bf00      	nop
 102beac:	200081f8 	.word	0x200081f8
 102beb0:	0102bc4d 	.word	0x0102bc4d

0102beb4 <TOU_APP_bSt_51_execute_table_writing>:
bool TOU_APP_bSt_51_execute_table_writing(uint8_t *table_buffer) {
 102beb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 102beb6:	b085      	sub	sp, #20
	st_51_temp.time_func_flag2 = table_buffer[k++];
 102beb8:	7843      	ldrb	r3, [r0, #1]
	st_51_temp.nbr_recurr_dates = table_buffer[k++];
 102beba:	7905      	ldrb	r5, [r0, #4]
	st_51_temp.time_func_flag1 = table_buffer[k++];
 102bebc:	f890 e000 	ldrb.w	lr, [r0]
	st_51_temp.calendar_func = table_buffer[k++];
 102bec0:	7887      	ldrb	r7, [r0, #2]
	st_51_temp.nbr_non_recurr_dates = table_buffer[k++];
 102bec2:	78c6      	ldrb	r6, [r0, #3]
	st_51_temp.nbr_tier_switches |= (uint16_t)(table_buffer[k++] << 8);
 102bec4:	f8b0 1005 	ldrh.w	r1, [r0, #5]
	st_51_temp.calendar_tbl_size |= (uint16_t)(table_buffer[k++] << 8);
 102bec8:	f8b0 2007 	ldrh.w	r2, [r0, #7]
	st_51_temp.time_func_flag2 = table_buffer[k++];
 102becc:	f88d 3005 	strb.w	r3, [sp, #5]
	is_ok = TOU_APP_bSt_51_validate_data(&st_51_temp);
 102bed0:	ac01      	add	r4, sp, #4
 102bed2:	4620      	mov	r0, r4
 102bed4:	4b0e      	ldr	r3, [pc, #56]	; (102bf10 <TOU_APP_bSt_51_execute_table_writing+0x5c>)
	st_51_temp.nbr_recurr_dates = table_buffer[k++];
 102bed6:	f88d 5008 	strb.w	r5, [sp, #8]
	st_51_temp.time_func_flag1 = table_buffer[k++];
 102beda:	f88d e004 	strb.w	lr, [sp, #4]
	st_51_temp.calendar_func = table_buffer[k++];
 102bede:	f88d 7006 	strb.w	r7, [sp, #6]
	st_51_temp.nbr_non_recurr_dates = table_buffer[k++];
 102bee2:	f88d 6007 	strb.w	r6, [sp, #7]
	st_51_temp.nbr_tier_switches |= (uint16_t)(table_buffer[k++] << 8);
 102bee6:	f8ad 100a 	strh.w	r1, [sp, #10]
	st_51_temp.calendar_tbl_size |= (uint16_t)(table_buffer[k++] << 8);
 102beea:	f8ad 200c 	strh.w	r2, [sp, #12]
	is_ok = TOU_APP_bSt_51_validate_data(&st_51_temp);
 102beee:	4798      	blx	r3
	if ( is_ok ) {
 102bef0:	4605      	mov	r5, r0
 102bef2:	b150      	cbz	r0, 102bf0a <TOU_APP_bSt_51_execute_table_writing+0x56>
		st_51 = st_51_temp;
 102bef4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 102bef8:	4b06      	ldr	r3, [pc, #24]	; (102bf14 <TOU_APP_bSt_51_execute_table_writing+0x60>)
		TOU_APP_vSt_51_write_eeprom_values(&st_51);
 102befa:	4c07      	ldr	r4, [pc, #28]	; (102bf18 <TOU_APP_bSt_51_execute_table_writing+0x64>)
		st_51 = st_51_temp;
 102befc:	c303      	stmia	r3!, {r0, r1}
 102befe:	801a      	strh	r2, [r3, #0]
		TOU_APP_vSt_51_write_eeprom_values(&st_51);
 102bf00:	47a0      	blx	r4
		uint16_t crc = SM_APP_usSt_51_ram_calculate_crc();
 102bf02:	4b06      	ldr	r3, [pc, #24]	; (102bf1c <TOU_APP_bSt_51_execute_table_writing+0x68>)
 102bf04:	4798      	blx	r3
		SM_APP_vSt_51_write_crc(crc);
 102bf06:	4b06      	ldr	r3, [pc, #24]	; (102bf20 <TOU_APP_bSt_51_execute_table_writing+0x6c>)
 102bf08:	4798      	blx	r3
}
 102bf0a:	4628      	mov	r0, r5
 102bf0c:	b005      	add	sp, #20
 102bf0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 102bf10:	0102bba5 	.word	0x0102bba5
 102bf14:	200081f8 	.word	0x200081f8
 102bf18:	0102bd6d 	.word	0x0102bd6d
 102bf1c:	0101fc41 	.word	0x0101fc41
 102bf20:	0101fcf1 	.word	0x0101fcf1

0102bf24 <TOU_APP_usSt_51_get_size>:
}
 102bf24:	2009      	movs	r0, #9
 102bf26:	4770      	bx	lr

0102bf28 <TOU_APP_bSt_52_execute_table_reading>:
bool TOU_APP_bSt_52_execute_table_reading(uint8_t *table_buffer) {
 102bf28:	b530      	push	{r4, r5, lr}
	RTC_APP_vBreak_timestamp( &rtc_temp, rtc.utc_timestamp);
 102bf2a:	4c10      	ldr	r4, [pc, #64]	; (102bf6c <TOU_APP_bSt_52_execute_table_reading+0x44>)
 102bf2c:	4b10      	ldr	r3, [pc, #64]	; (102bf70 <TOU_APP_bSt_52_execute_table_reading+0x48>)
 102bf2e:	6861      	ldr	r1, [r4, #4]
bool TOU_APP_bSt_52_execute_table_reading(uint8_t *table_buffer) {
 102bf30:	b08d      	sub	sp, #52	; 0x34
 102bf32:	4605      	mov	r5, r0
	RTC_APP_vBreak_timestamp( &rtc_temp, rtc.utc_timestamp);
 102bf34:	a801      	add	r0, sp, #4
 102bf36:	4798      	blx	r3
	table_buffer[k++] = (uint8_t)(rtc.utc_timestamp);
 102bf38:	6863      	ldr	r3, [r4, #4]
	time_date_qual |= rtc.is_dst << DST_FLAG_bp;
 102bf3a:	7d60      	ldrb	r0, [r4, #21]
	time_date_qual |= rtc.dst_applied_flag << DST_APPLIED_FLAG_bp;
 102bf3c:	7d21      	ldrb	r1, [r4, #20]
	table_buffer[k++] = (uint8_t)(rtc.utc_timestamp);
 102bf3e:	702b      	strb	r3, [r5, #0]
	table_buffer[k++] = (uint8_t)(rtc.utc_timestamp >> 8);
 102bf40:	6862      	ldr	r2, [r4, #4]
	time_date_qual |= rtc.is_dst << DST_FLAG_bp;
 102bf42:	f89d 301b 	ldrb.w	r3, [sp, #27]
	table_buffer[k++] = (uint8_t)(rtc.utc_timestamp >> 8);
 102bf46:	0a12      	lsrs	r2, r2, #8
 102bf48:	706a      	strb	r2, [r5, #1]
	time_date_qual |= rtc.is_dst << DST_FLAG_bp;
 102bf4a:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
	table_buffer[k++] = (uint8_t)(rtc.utc_timestamp >> 16);
 102bf4e:	88e2      	ldrh	r2, [r4, #6]
 102bf50:	70aa      	strb	r2, [r5, #2]
	time_date_qual |= rtc.is_dst << DST_FLAG_bp;
 102bf52:	b2db      	uxtb	r3, r3
	time_date_qual |= 1 << TM_ZN_APPLIED_FLAG_bp;
 102bf54:	f043 0330 	orr.w	r3, r3, #48	; 0x30
	table_buffer[k++] = (uint8_t)(rtc.utc_timestamp >> 24);
 102bf58:	79e2      	ldrb	r2, [r4, #7]
 102bf5a:	70ea      	strb	r2, [r5, #3]
	time_date_qual |= rtc.dst_applied_flag << DST_APPLIED_FLAG_bp;
 102bf5c:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
	time_date_qual |= 1 << DST_SUPPORTED_FLAG_bp;
 102bf60:	f063 037f 	orn	r3, r3, #127	; 0x7f
}
 102bf64:	2001      	movs	r0, #1
	table_buffer[k++] = time_date_qual;
 102bf66:	712b      	strb	r3, [r5, #4]
}
 102bf68:	b00d      	add	sp, #52	; 0x34
 102bf6a:	bd30      	pop	{r4, r5, pc}
 102bf6c:	20017160 	.word	0x20017160
 102bf70:	01029ebd 	.word	0x01029ebd

0102bf74 <TOU_APP_usSt_52_get_size>:
}
 102bf74:	2005      	movs	r0, #5
 102bf76:	4770      	bx	lr

0102bf78 <TOU_APP_bSt_53_restore_default_values>:
bool TOU_APP_bSt_53_restore_default_values(void) {
 102bf78:	b5f0      	push	{r4, r5, r6, r7, lr}
 102bf7a:	b085      	sub	sp, #20
	uint8_t null_data = 0;
 102bf7c:	2300      	movs	r3, #0
	data[0] = (uint8_t)(DEFAULT_DST_TIME_EFF);
 102bf7e:	2420      	movs	r4, #32
	data[1] = (uint8_t)(DEFAULT_DST_TIME_EFF >> 8);
 102bf80:	221c      	movs	r2, #28
	data[4] = DEFAULT_DST_TIME_AMT;
 102bf82:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
	data[5] = (uint8_t)(DEFAULT_TIME_ZONE_OFFSET);
 102bf86:	2698      	movs	r6, #152	; 0x98
	data[6] = (uint8_t)(DEFAULT_TIME_ZONE_OFFSET >> 8);
 102bf88:	25fe      	movs	r5, #254	; 0xfe
	SM_APP_vChange_table_state(ST_53_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
 102bf8a:	21ff      	movs	r1, #255	; 0xff
 102bf8c:	f640 2079 	movw	r0, #2681	; 0xa79
 102bf90:	4f1f      	ldr	r7, [pc, #124]	; (102c010 <TOU_APP_bSt_53_restore_default_values+0x98>)
	data[0] = (uint8_t)(DEFAULT_DST_TIME_EFF);
 102bf92:	f88d 4004 	strb.w	r4, [sp, #4]
	data[7] = (uint8_t)(DEFAULT_STD_TIME_EFF);
 102bf96:	f88d 400b 	strb.w	r4, [sp, #11]
	data[5] = (uint8_t)(DEFAULT_TIME_ZONE_OFFSET);
 102bf9a:	f88d 6009 	strb.w	r6, [sp, #9]
	data[6] = (uint8_t)(DEFAULT_TIME_ZONE_OFFSET >> 8);
 102bf9e:	f88d 500a 	strb.w	r5, [sp, #10]
	uint8_t null_data = 0;
 102bfa2:	f88d 3003 	strb.w	r3, [sp, #3]
	data[2] = (uint8_t)(DEFAULT_DST_TIME_EFF >> 16);
 102bfa6:	f88d 3006 	strb.w	r3, [sp, #6]
	data[3] = (uint8_t)(DEFAULT_DST_TIME_EFF >> 24);
 102bfaa:	f88d 3007 	strb.w	r3, [sp, #7]
	data[9] = (uint8_t)(DEFAULT_STD_TIME_EFF >> 16);
 102bfae:	f88d 300d 	strb.w	r3, [sp, #13]
	data[10] = (uint8_t)(DEFAULT_STD_TIME_EFF >> 24);
 102bfb2:	f88d 300e 	strb.w	r3, [sp, #14]
	data[1] = (uint8_t)(DEFAULT_DST_TIME_EFF >> 8);
 102bfb6:	f88d 2005 	strb.w	r2, [sp, #5]
	data[8] = (uint8_t)(DEFAULT_STD_TIME_EFF >> 8);
 102bfba:	f88d 200c 	strb.w	r2, [sp, #12]
	data[4] = DEFAULT_DST_TIME_AMT;
 102bfbe:	f88d e008 	strb.w	lr, [sp, #8]
	SM_APP_vChange_table_state(ST_53_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
 102bfc2:	47b8      	blx	r7
 102bfc4:	4d13      	ldr	r5, [pc, #76]	; (102c014 <TOU_APP_bSt_53_restore_default_values+0x9c>)
 102bfc6:	f640 247c 	movw	r4, #2684	; 0xa7c
	for ( i = 0; i < ST_53_MAX_SIZE; i++) {
 102bfca:	f640 2687 	movw	r6, #2695	; 0xa87
		EEPROM_writer( ST_53_START_ADDR + i, &null_data, 1 );
 102bfce:	2201      	movs	r2, #1
 102bfd0:	4620      	mov	r0, r4
 102bfd2:	f10d 0103 	add.w	r1, sp, #3
 102bfd6:	4414      	add	r4, r2
 102bfd8:	47a8      	blx	r5
	for ( i = 0; i < ST_53_MAX_SIZE; i++) {
 102bfda:	42b4      	cmp	r4, r6
 102bfdc:	d1f7      	bne.n	102bfce <TOU_APP_bSt_53_restore_default_values+0x56>
	EEPROM_writer( ST_53_DST_TIME_EFF_ADDR, &data[0], 4 );
 102bfde:	2204      	movs	r2, #4
 102bfe0:	eb0d 0102 	add.w	r1, sp, r2
 102bfe4:	f640 207c 	movw	r0, #2684	; 0xa7c
 102bfe8:	47a8      	blx	r5
	EEPROM_writer( ST_53_DST_TIME_AMT_ADDR, &data[4], 1 );
 102bfea:	a902      	add	r1, sp, #8
 102bfec:	2201      	movs	r2, #1
 102bfee:	f44f 6028 	mov.w	r0, #2688	; 0xa80
 102bff2:	47a8      	blx	r5
		EEPROM_writer( ST_53_TIME_ZONE_OFFSET_ADDR, &data[5], 2 );
 102bff4:	2202      	movs	r2, #2
 102bff6:	f10d 0109 	add.w	r1, sp, #9
 102bffa:	f640 2081 	movw	r0, #2689	; 0xa81
 102bffe:	47a8      	blx	r5
	SM_APP_vChange_table_state(ST_53_PROG_STATE_ADDR, C1219_TABLE_FULL);
 102c000:	2145      	movs	r1, #69	; 0x45
 102c002:	f640 2079 	movw	r0, #2681	; 0xa79
 102c006:	47b8      	blx	r7
}
 102c008:	2001      	movs	r0, #1
 102c00a:	b005      	add	sp, #20
 102c00c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 102c00e:	bf00      	nop
 102c010:	010203e9 	.word	0x010203e9
 102c014:	01017509 	.word	0x01017509

0102c018 <TOU_APP_bLoad_st_53>:
bool TOU_APP_bLoad_st_53(void) {
 102c018:	b508      	push	{r3, lr}
	if ( SM_APP_ucGet_table_state(ST_53_PROG_STATE_ADDR) != C1219_TABLE_FULL ) {
 102c01a:	f640 2079 	movw	r0, #2681	; 0xa79
 102c01e:	4b04      	ldr	r3, [pc, #16]	; (102c030 <TOU_APP_bLoad_st_53+0x18>)
 102c020:	4798      	blx	r3
 102c022:	2845      	cmp	r0, #69	; 0x45
 102c024:	d001      	beq.n	102c02a <TOU_APP_bLoad_st_53+0x12>
		TOU_APP_bSt_53_restore_default_values();
 102c026:	4b03      	ldr	r3, [pc, #12]	; (102c034 <TOU_APP_bLoad_st_53+0x1c>)
 102c028:	4798      	blx	r3
}
 102c02a:	2001      	movs	r0, #1
 102c02c:	bd08      	pop	{r3, pc}
 102c02e:	bf00      	nop
 102c030:	010203cd 	.word	0x010203cd
 102c034:	0102bf79 	.word	0x0102bf79

0102c038 <TOU_APP_bSt_53_execute_table_reading>:
bool TOU_APP_bSt_53_execute_table_reading(uint8_t *table_buffer) {
 102c038:	b538      	push	{r3, r4, r5, lr}
	delay_ms(10);
 102c03a:	4b0d      	ldr	r3, [pc, #52]	; (102c070 <TOU_APP_bSt_53_execute_table_reading+0x38>)
	EEPROM_reader( ST_53_DST_TIME_EFF_ADDR, &table_buffer[k], 4 );
 102c03c:	4c0d      	ldr	r4, [pc, #52]	; (102c074 <TOU_APP_bSt_53_execute_table_reading+0x3c>)
bool TOU_APP_bSt_53_execute_table_reading(uint8_t *table_buffer) {
 102c03e:	4605      	mov	r5, r0
	delay_ms(10);
 102c040:	480d      	ldr	r0, [pc, #52]	; (102c078 <TOU_APP_bSt_53_execute_table_reading+0x40>)
 102c042:	4798      	blx	r3
	EEPROM_reader( ST_53_DST_TIME_EFF_ADDR, &table_buffer[k], 4 );
 102c044:	4629      	mov	r1, r5
 102c046:	2204      	movs	r2, #4
 102c048:	f640 207c 	movw	r0, #2684	; 0xa7c
 102c04c:	47a0      	blx	r4
	EEPROM_reader( ST_53_DST_TIME_AMT_ADDR, &table_buffer[k++], 1 );
 102c04e:	1d29      	adds	r1, r5, #4
 102c050:	2201      	movs	r2, #1
 102c052:	f44f 6028 	mov.w	r0, #2688	; 0xa80
 102c056:	47a0      	blx	r4
	if ( ((st_51.time_func_flag2 & CAP_TM_ZN_OFFSET_FLAG_bm) == CAP_TM_ZN_OFFSET_FLAG_bm) || ( std_version_no > 1 ) ) {
 102c058:	4b08      	ldr	r3, [pc, #32]	; (102c07c <TOU_APP_bSt_53_execute_table_reading+0x44>)
 102c05a:	785b      	ldrb	r3, [r3, #1]
 102c05c:	06db      	lsls	r3, r3, #27
 102c05e:	d504      	bpl.n	102c06a <TOU_APP_bSt_53_execute_table_reading+0x32>
		EEPROM_reader( ST_53_TIME_ZONE_OFFSET_ADDR, &table_buffer[k], 2 );
 102c060:	1d69      	adds	r1, r5, #5
 102c062:	2202      	movs	r2, #2
 102c064:	f640 2081 	movw	r0, #2689	; 0xa81
 102c068:	47a0      	blx	r4
}
 102c06a:	2001      	movs	r0, #1
 102c06c:	bd38      	pop	{r3, r4, r5, pc}
 102c06e:	bf00      	nop
 102c070:	20000001 	.word	0x20000001
 102c074:	01017511 	.word	0x01017511
 102c078:	00011db7 	.word	0x00011db7
 102c07c:	200081f8 	.word	0x200081f8

0102c080 <TOU_APP_bSt_53_execute_table_writing>:
bool TOU_APP_bSt_53_execute_table_writing(uint8_t *table_buffer) {
 102c080:	b538      	push	{r3, r4, r5, lr}
	EEPROM_writer( ST_53_DST_TIME_EFF_ADDR, &table_buffer[k], 4 );
 102c082:	4601      	mov	r1, r0
bool TOU_APP_bSt_53_execute_table_writing(uint8_t *table_buffer) {
 102c084:	4605      	mov	r5, r0
	EEPROM_writer( ST_53_DST_TIME_EFF_ADDR, &table_buffer[k], 4 );
 102c086:	2204      	movs	r2, #4
 102c088:	4c09      	ldr	r4, [pc, #36]	; (102c0b0 <TOU_APP_bSt_53_execute_table_writing+0x30>)
 102c08a:	f640 207c 	movw	r0, #2684	; 0xa7c
 102c08e:	47a0      	blx	r4
	EEPROM_writer( ST_53_DST_TIME_AMT_ADDR, &table_buffer[k++], 1 );
 102c090:	1d29      	adds	r1, r5, #4
 102c092:	2201      	movs	r2, #1
 102c094:	f44f 6028 	mov.w	r0, #2688	; 0xa80
 102c098:	47a0      	blx	r4
	if ( ((st_51.time_func_flag2 & CAP_TM_ZN_OFFSET_FLAG_bm) == CAP_TM_ZN_OFFSET_FLAG_bm) || ( std_version_no > 1 ) ) {
 102c09a:	4b06      	ldr	r3, [pc, #24]	; (102c0b4 <TOU_APP_bSt_53_execute_table_writing+0x34>)
 102c09c:	785b      	ldrb	r3, [r3, #1]
 102c09e:	06db      	lsls	r3, r3, #27
 102c0a0:	d504      	bpl.n	102c0ac <TOU_APP_bSt_53_execute_table_writing+0x2c>
		EEPROM_writer( ST_53_TIME_ZONE_OFFSET_ADDR, &table_buffer[k], 2 );
 102c0a2:	1d69      	adds	r1, r5, #5
 102c0a4:	2202      	movs	r2, #2
 102c0a6:	f640 2081 	movw	r0, #2689	; 0xa81
 102c0aa:	47a0      	blx	r4
}
 102c0ac:	2001      	movs	r0, #1
 102c0ae:	bd38      	pop	{r3, r4, r5, pc}
 102c0b0:	01017509 	.word	0x01017509
 102c0b4:	200081f8 	.word	0x200081f8

0102c0b8 <TOU_APP_usSt_53_get_size>:
	if ( ((st_51.time_func_flag2 & CAP_TM_ZN_OFFSET_FLAG_bm) == CAP_TM_ZN_OFFSET_FLAG_bm) || ( std_version_no > 1 ) ) {
 102c0b8:	4b03      	ldr	r3, [pc, #12]	; (102c0c8 <TOU_APP_usSt_53_get_size+0x10>)
 102c0ba:	785b      	ldrb	r3, [r3, #1]
 102c0bc:	f013 0f10 	tst.w	r3, #16
}
 102c0c0:	bf0c      	ite	eq
 102c0c2:	2005      	moveq	r0, #5
 102c0c4:	2007      	movne	r0, #7
 102c0c6:	4770      	bx	lr
 102c0c8:	200081f8 	.word	0x200081f8

0102c0cc <TOU_APP_bSt_54_execute_table_reading>:
bool TOU_APP_bSt_54_execute_table_reading(uint8_t *table_buffer) {
 102c0cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if ( (st_51.time_func_flag1 & ANCHOR_DATE_FLAG_bm) == ANCHOR_DATE_FLAG_bm ) {
 102c0d0:	4e3e      	ldr	r6, [pc, #248]	; (102c1cc <TOU_APP_bSt_54_execute_table_reading+0x100>)
	delay_ms(10);
 102c0d2:	4b3f      	ldr	r3, [pc, #252]	; (102c1d0 <TOU_APP_bSt_54_execute_table_reading+0x104>)
bool TOU_APP_bSt_54_execute_table_reading(uint8_t *table_buffer) {
 102c0d4:	4680      	mov	r8, r0
	delay_ms(10);
 102c0d6:	483f      	ldr	r0, [pc, #252]	; (102c1d4 <TOU_APP_bSt_54_execute_table_reading+0x108>)
 102c0d8:	4798      	blx	r3
	if ( (st_51.time_func_flag1 & ANCHOR_DATE_FLAG_bm) == ANCHOR_DATE_FLAG_bm ) {
 102c0da:	7833      	ldrb	r3, [r6, #0]
 102c0dc:	f013 0420 	ands.w	r4, r3, #32
 102c0e0:	d16c      	bne.n	102c1bc <TOU_APP_bSt_54_execute_table_reading+0xf0>
	for ( i = 0; i < st_51.nbr_non_recurr_dates; i++ ) {
 102c0e2:	78f3      	ldrb	r3, [r6, #3]
 102c0e4:	b183      	cbz	r3, 102c108 <TOU_APP_bSt_54_execute_table_reading+0x3c>
 102c0e6:	4f3c      	ldr	r7, [pc, #240]	; (102c1d8 <TOU_APP_bSt_54_execute_table_reading+0x10c>)
 102c0e8:	2500      	movs	r5, #0
		EEPROM_reader( ST_54_NON_RECURR_DATES_ADDR + 3*i, &table_buffer[k], 3 );
 102c0ea:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 102c0ee:	eb08 0104 	add.w	r1, r8, r4
 102c0f2:	f600 2091 	addw	r0, r0, #2705	; 0xa91
 102c0f6:	2203      	movs	r2, #3
 102c0f8:	47b8      	blx	r7
	for ( i = 0; i < st_51.nbr_non_recurr_dates; i++ ) {
 102c0fa:	3501      	adds	r5, #1
 102c0fc:	78f3      	ldrb	r3, [r6, #3]
 102c0fe:	b2ad      	uxth	r5, r5
		k += 3;
 102c100:	3403      	adds	r4, #3
	for ( i = 0; i < st_51.nbr_non_recurr_dates; i++ ) {
 102c102:	42ab      	cmp	r3, r5
		k += 3;
 102c104:	b2a4      	uxth	r4, r4
	for ( i = 0; i < st_51.nbr_non_recurr_dates; i++ ) {
 102c106:	d8f0      	bhi.n	102c0ea <TOU_APP_bSt_54_execute_table_reading+0x1e>
	for ( i = 0; i < st_51.nbr_recurr_dates; i++ ) {
 102c108:	7933      	ldrb	r3, [r6, #4]
 102c10a:	b183      	cbz	r3, 102c12e <TOU_APP_bSt_54_execute_table_reading+0x62>
 102c10c:	4f32      	ldr	r7, [pc, #200]	; (102c1d8 <TOU_APP_bSt_54_execute_table_reading+0x10c>)
 102c10e:	2500      	movs	r5, #0
		EEPROM_reader( ST_54_RECURR_DATES_ADDR + 3*i, &table_buffer[k], 3 );
 102c110:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 102c114:	eb08 0104 	add.w	r1, r8, r4
 102c118:	f600 3027 	addw	r0, r0, #2855	; 0xb27
 102c11c:	2203      	movs	r2, #3
 102c11e:	47b8      	blx	r7
	for ( i = 0; i < st_51.nbr_recurr_dates; i++ ) {
 102c120:	3501      	adds	r5, #1
 102c122:	7933      	ldrb	r3, [r6, #4]
 102c124:	b2ad      	uxth	r5, r5
		k += 3;
 102c126:	3403      	adds	r4, #3
	for ( i = 0; i < st_51.nbr_recurr_dates; i++ ) {
 102c128:	42ab      	cmp	r3, r5
		k += 3;
 102c12a:	b2a4      	uxth	r4, r4
	for ( i = 0; i < st_51.nbr_recurr_dates; i++ ) {
 102c12c:	d8f0      	bhi.n	102c110 <TOU_APP_bSt_54_execute_table_reading+0x44>
	for ( i = 0; i < st_51.nbr_tier_switches; i++ ) {
 102c12e:	88f3      	ldrh	r3, [r6, #6]
 102c130:	b183      	cbz	r3, 102c154 <TOU_APP_bSt_54_execute_table_reading+0x88>
 102c132:	4f29      	ldr	r7, [pc, #164]	; (102c1d8 <TOU_APP_bSt_54_execute_table_reading+0x10c>)
 102c134:	2500      	movs	r5, #0
		EEPROM_reader( ST_54_TIER_SWITCHES_ADDR + 3*i, &table_buffer[k], 3 );
 102c136:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 102c13a:	eb08 0104 	add.w	r1, r8, r4
 102c13e:	f600 309f 	addw	r0, r0, #2975	; 0xb9f
 102c142:	2203      	movs	r2, #3
 102c144:	47b8      	blx	r7
	for ( i = 0; i < st_51.nbr_tier_switches; i++ ) {
 102c146:	3501      	adds	r5, #1
 102c148:	88f3      	ldrh	r3, [r6, #6]
 102c14a:	b2ad      	uxth	r5, r5
		k += 3;
 102c14c:	3403      	adds	r4, #3
	for ( i = 0; i < st_51.nbr_tier_switches; i++ ) {
 102c14e:	42ab      	cmp	r3, r5
		k += 3;
 102c150:	b2a4      	uxth	r4, r4
	for ( i = 0; i < st_51.nbr_tier_switches; i++ ) {
 102c152:	d8f0      	bhi.n	102c136 <TOU_APP_bSt_54_execute_table_reading+0x6a>
	if ( (st_51.time_func_flag2 & SEPARATE_WEEKDAYS_FLAG_bm) == SEPARATE_WEEKDAYS_FLAG_bm ) {
 102c154:	7873      	ldrb	r3, [r6, #1]
 102c156:	f013 0a02 	ands.w	sl, r3, #2
 102c15a:	d12c      	bne.n	102c1b6 <TOU_APP_bSt_54_execute_table_reading+0xea>
		for ( i = 0; i < ( (st_51.calendar_func & NBR_SEASONS_bm) >> NBR_SEASONS_bp ); i++ ) {
 102c15c:	78b3      	ldrb	r3, [r6, #2]
 102c15e:	071b      	lsls	r3, r3, #28
 102c160:	d029      	beq.n	102c1b6 <TOU_APP_bSt_54_execute_table_reading+0xea>
 102c162:	4f1d      	ldr	r7, [pc, #116]	; (102c1d8 <TOU_APP_bSt_54_execute_table_reading+0x10c>)
 102c164:	46d1      	mov	r9, sl
			EEPROM_reader( ST_54_DAILY_SCHEDULE_ID_MATRIX_ADDR + 5*i, &table_buffer[k], 3 );
 102c166:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
 102c16a:	2203      	movs	r2, #3
 102c16c:	eb08 0104 	add.w	r1, r8, r4
 102c170:	f60a 408f 	addw	r0, sl, #3215	; 0xc8f
 102c174:	47b8      	blx	r7
			for ( j = 0; j < ( (st_51.calendar_func & NBR_SPECIAL_SCHED_bm) >> NBR_SPECIAL_SCHED_bp ); j++ ) {
 102c176:	78b3      	ldrb	r3, [r6, #2]
			k += 3;
 102c178:	3403      	adds	r4, #3
			for ( j = 0; j < ( (st_51.calendar_func & NBR_SPECIAL_SCHED_bm) >> NBR_SPECIAL_SCHED_bp ); j++ ) {
 102c17a:	091a      	lsrs	r2, r3, #4
			k += 3;
 102c17c:	b2a4      	uxth	r4, r4
			for ( j = 0; j < ( (st_51.calendar_func & NBR_SPECIAL_SCHED_bm) >> NBR_SPECIAL_SCHED_bp ); j++ ) {
 102c17e:	d011      	beq.n	102c1a4 <TOU_APP_bSt_54_execute_table_reading+0xd8>
 102c180:	2000      	movs	r0, #0
 102c182:	f60a 4a92 	addw	sl, sl, #3218	; 0xc92
 102c186:	4605      	mov	r5, r0
				EEPROM_reader( ST_54_DAILY_SCHEDULE_ID_MATRIX_ADDR + 5*i + 3 + j, &table_buffer[k], 1 );
 102c188:	eb08 0104 	add.w	r1, r8, r4
 102c18c:	4450      	add	r0, sl
 102c18e:	2201      	movs	r2, #1
 102c190:	47b8      	blx	r7
			for ( j = 0; j < ( (st_51.calendar_func & NBR_SPECIAL_SCHED_bm) >> NBR_SPECIAL_SCHED_bp ); j++ ) {
 102c192:	3501      	adds	r5, #1
 102c194:	78b3      	ldrb	r3, [r6, #2]
 102c196:	b2ad      	uxth	r5, r5
				k += 1;
 102c198:	3401      	adds	r4, #1
			for ( j = 0; j < ( (st_51.calendar_func & NBR_SPECIAL_SCHED_bm) >> NBR_SPECIAL_SCHED_bp ); j++ ) {
 102c19a:	ebb5 1f13 	cmp.w	r5, r3, lsr #4
				k += 1;
 102c19e:	b2a4      	uxth	r4, r4
			for ( j = 0; j < ( (st_51.calendar_func & NBR_SPECIAL_SCHED_bm) >> NBR_SPECIAL_SCHED_bp ); j++ ) {
 102c1a0:	4628      	mov	r0, r5
 102c1a2:	dbf1      	blt.n	102c188 <TOU_APP_bSt_54_execute_table_reading+0xbc>
		for ( i = 0; i < ( (st_51.calendar_func & NBR_SEASONS_bm) >> NBR_SEASONS_bp ); i++ ) {
 102c1a4:	f109 0901 	add.w	r9, r9, #1
 102c1a8:	fa1f f989 	uxth.w	r9, r9
 102c1ac:	f003 030f 	and.w	r3, r3, #15
 102c1b0:	4599      	cmp	r9, r3
 102c1b2:	46ca      	mov	sl, r9
 102c1b4:	dbd7      	blt.n	102c166 <TOU_APP_bSt_54_execute_table_reading+0x9a>
}
 102c1b6:	2001      	movs	r0, #1
 102c1b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		EEPROM_reader( ST_54_ANCHOR_DATE_ADDR, &table_buffer[k], 2 );
 102c1bc:	2202      	movs	r2, #2
 102c1be:	4641      	mov	r1, r8
 102c1c0:	f640 208f 	movw	r0, #2703	; 0xa8f
 102c1c4:	4f04      	ldr	r7, [pc, #16]	; (102c1d8 <TOU_APP_bSt_54_execute_table_reading+0x10c>)
 102c1c6:	47b8      	blx	r7
		k += 2;
 102c1c8:	2402      	movs	r4, #2
 102c1ca:	e78a      	b.n	102c0e2 <TOU_APP_bSt_54_execute_table_reading+0x16>
 102c1cc:	200081f8 	.word	0x200081f8
 102c1d0:	20000001 	.word	0x20000001
 102c1d4:	00011db7 	.word	0x00011db7
 102c1d8:	01017511 	.word	0x01017511

0102c1dc <TOU_APP_bSt_54_execute_table_writing>:
bool TOU_APP_bSt_54_execute_table_writing(uint8_t *table_buffer) {
 102c1dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if ( (st_51.time_func_flag1 & ANCHOR_DATE_FLAG_bm) == ANCHOR_DATE_FLAG_bm ) {
 102c1e0:	4f44      	ldr	r7, [pc, #272]	; (102c2f4 <TOU_APP_bSt_54_execute_table_writing+0x118>)
	SM_APP_vChange_table_state(ST_54_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
 102c1e2:	f8df b114 	ldr.w	fp, [pc, #276]	; 102c2f8 <TOU_APP_bSt_54_execute_table_writing+0x11c>
bool TOU_APP_bSt_54_execute_table_writing(uint8_t *table_buffer) {
 102c1e6:	4681      	mov	r9, r0
	SM_APP_vChange_table_state(ST_54_PROG_STATE_ADDR, C1219_TABLE_EMPTY);
 102c1e8:	21ff      	movs	r1, #255	; 0xff
 102c1ea:	f640 208c 	movw	r0, #2700	; 0xa8c
 102c1ee:	47d8      	blx	fp
	if ( (st_51.time_func_flag1 & ANCHOR_DATE_FLAG_bm) == ANCHOR_DATE_FLAG_bm ) {
 102c1f0:	783b      	ldrb	r3, [r7, #0]
 102c1f2:	f013 0420 	ands.w	r4, r3, #32
 102c1f6:	d174      	bne.n	102c2e2 <TOU_APP_bSt_54_execute_table_writing+0x106>
	for ( i = 0; i < st_51.nbr_non_recurr_dates; i++ ) {
 102c1f8:	78fb      	ldrb	r3, [r7, #3]
 102c1fa:	b18b      	cbz	r3, 102c220 <TOU_APP_bSt_54_execute_table_writing+0x44>
 102c1fc:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 102c2fc <TOU_APP_bSt_54_execute_table_writing+0x120>
 102c200:	2500      	movs	r5, #0
		EEPROM_writer( ST_54_NON_RECURR_DATES_ADDR + 3*i, &table_buffer[k], 3 );
 102c202:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 102c206:	eb09 0104 	add.w	r1, r9, r4
 102c20a:	f600 2091 	addw	r0, r0, #2705	; 0xa91
 102c20e:	2203      	movs	r2, #3
 102c210:	47c0      	blx	r8
	for ( i = 0; i < st_51.nbr_non_recurr_dates; i++ ) {
 102c212:	3501      	adds	r5, #1
 102c214:	78fb      	ldrb	r3, [r7, #3]
 102c216:	b2ad      	uxth	r5, r5
		k += 3;
 102c218:	3403      	adds	r4, #3
	for ( i = 0; i < st_51.nbr_non_recurr_dates; i++ ) {
 102c21a:	42ab      	cmp	r3, r5
		k += 3;
 102c21c:	b2a4      	uxth	r4, r4
	for ( i = 0; i < st_51.nbr_non_recurr_dates; i++ ) {
 102c21e:	d8f0      	bhi.n	102c202 <TOU_APP_bSt_54_execute_table_writing+0x26>
	for ( i = 0; i < st_51.nbr_recurr_dates; i++ ) {
 102c220:	793b      	ldrb	r3, [r7, #4]
 102c222:	b18b      	cbz	r3, 102c248 <TOU_APP_bSt_54_execute_table_writing+0x6c>
 102c224:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 102c2fc <TOU_APP_bSt_54_execute_table_writing+0x120>
 102c228:	2500      	movs	r5, #0
		EEPROM_writer( ST_54_RECURR_DATES_ADDR + 3*i, &table_buffer[k], 3 );
 102c22a:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 102c22e:	eb09 0104 	add.w	r1, r9, r4
 102c232:	f600 3027 	addw	r0, r0, #2855	; 0xb27
 102c236:	2203      	movs	r2, #3
 102c238:	47c0      	blx	r8
	for ( i = 0; i < st_51.nbr_recurr_dates; i++ ) {
 102c23a:	3501      	adds	r5, #1
 102c23c:	793b      	ldrb	r3, [r7, #4]
 102c23e:	b2ad      	uxth	r5, r5
		k += 3;
 102c240:	3403      	adds	r4, #3
	for ( i = 0; i < st_51.nbr_recurr_dates; i++ ) {
 102c242:	42ab      	cmp	r3, r5
		k += 3;
 102c244:	b2a4      	uxth	r4, r4
	for ( i = 0; i < st_51.nbr_recurr_dates; i++ ) {
 102c246:	d8f0      	bhi.n	102c22a <TOU_APP_bSt_54_execute_table_writing+0x4e>
	for ( i = 0; i < st_51.nbr_tier_switches; i++ ) {
 102c248:	88fb      	ldrh	r3, [r7, #6]
 102c24a:	b18b      	cbz	r3, 102c270 <TOU_APP_bSt_54_execute_table_writing+0x94>
 102c24c:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 102c2fc <TOU_APP_bSt_54_execute_table_writing+0x120>
 102c250:	2500      	movs	r5, #0
		EEPROM_writer( ST_54_TIER_SWITCHES_ADDR + 3*i, &table_buffer[k], 3 );
 102c252:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 102c256:	eb09 0104 	add.w	r1, r9, r4
 102c25a:	f600 309f 	addw	r0, r0, #2975	; 0xb9f
 102c25e:	2203      	movs	r2, #3
 102c260:	47c0      	blx	r8
	for ( i = 0; i < st_51.nbr_tier_switches; i++ ) {
 102c262:	3501      	adds	r5, #1
 102c264:	88fb      	ldrh	r3, [r7, #6]
 102c266:	b2ad      	uxth	r5, r5
		k += 3;
 102c268:	3403      	adds	r4, #3
	for ( i = 0; i < st_51.nbr_tier_switches; i++ ) {
 102c26a:	42ab      	cmp	r3, r5
		k += 3;
 102c26c:	b2a4      	uxth	r4, r4
	for ( i = 0; i < st_51.nbr_tier_switches; i++ ) {
 102c26e:	d8f0      	bhi.n	102c252 <TOU_APP_bSt_54_execute_table_writing+0x76>
	if ( (st_51.time_func_flag2 & SEPARATE_WEEKDAYS_FLAG_bm) == SEPARATE_WEEKDAYS_FLAG_bm ) {
 102c270:	787b      	ldrb	r3, [r7, #1]
 102c272:	f013 0602 	ands.w	r6, r3, #2
 102c276:	d12d      	bne.n	102c2d4 <TOU_APP_bSt_54_execute_table_writing+0xf8>
		for ( i = 0; i < ( (st_51.calendar_func & NBR_SEASONS_bm) >> NBR_SEASONS_bp ); i++ ) {
 102c278:	78bb      	ldrb	r3, [r7, #2]
 102c27a:	071b      	lsls	r3, r3, #28
 102c27c:	d02a      	beq.n	102c2d4 <TOU_APP_bSt_54_execute_table_writing+0xf8>
 102c27e:	f8df 807c 	ldr.w	r8, [pc, #124]	; 102c2fc <TOU_APP_bSt_54_execute_table_writing+0x120>
 102c282:	46b2      	mov	sl, r6
			EEPROM_writer( ST_54_DAILY_SCHEDULE_ID_MATRIX_ADDR + 5*i, &table_buffer[k], 3 );
 102c284:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 102c288:	2203      	movs	r2, #3
 102c28a:	eb09 0104 	add.w	r1, r9, r4
 102c28e:	f606 408f 	addw	r0, r6, #3215	; 0xc8f
 102c292:	47c0      	blx	r8
			for ( j = 0; j < ( (st_51.calendar_func & NBR_SPECIAL_SCHED_bm) >> NBR_SPECIAL_SCHED_bp ); j++ ) {
 102c294:	78bb      	ldrb	r3, [r7, #2]
			k += 3;
 102c296:	3403      	adds	r4, #3
			for ( j = 0; j < ( (st_51.calendar_func & NBR_SPECIAL_SCHED_bm) >> NBR_SPECIAL_SCHED_bp ); j++ ) {
 102c298:	091a      	lsrs	r2, r3, #4
			k += 3;
 102c29a:	b2a4      	uxth	r4, r4
			for ( j = 0; j < ( (st_51.calendar_func & NBR_SPECIAL_SCHED_bm) >> NBR_SPECIAL_SCHED_bp ); j++ ) {
 102c29c:	d011      	beq.n	102c2c2 <TOU_APP_bSt_54_execute_table_writing+0xe6>
 102c29e:	2000      	movs	r0, #0
 102c2a0:	f606 4692 	addw	r6, r6, #3218	; 0xc92
 102c2a4:	4605      	mov	r5, r0
				EEPROM_writer( ST_54_DAILY_SCHEDULE_ID_MATRIX_ADDR + 5*i + 3 + j, &table_buffer[k], 1 );
 102c2a6:	eb09 0104 	add.w	r1, r9, r4
 102c2aa:	4430      	add	r0, r6
 102c2ac:	2201      	movs	r2, #1
 102c2ae:	47c0      	blx	r8
			for ( j = 0; j < ( (st_51.calendar_func & NBR_SPECIAL_SCHED_bm) >> NBR_SPECIAL_SCHED_bp ); j++ ) {
 102c2b0:	3501      	adds	r5, #1
 102c2b2:	78bb      	ldrb	r3, [r7, #2]
 102c2b4:	b2ad      	uxth	r5, r5
				k += 1;
 102c2b6:	3401      	adds	r4, #1
			for ( j = 0; j < ( (st_51.calendar_func & NBR_SPECIAL_SCHED_bm) >> NBR_SPECIAL_SCHED_bp ); j++ ) {
 102c2b8:	ebb5 1f13 	cmp.w	r5, r3, lsr #4
				k += 1;
 102c2bc:	b2a4      	uxth	r4, r4
			for ( j = 0; j < ( (st_51.calendar_func & NBR_SPECIAL_SCHED_bm) >> NBR_SPECIAL_SCHED_bp ); j++ ) {
 102c2be:	4628      	mov	r0, r5
 102c2c0:	dbf1      	blt.n	102c2a6 <TOU_APP_bSt_54_execute_table_writing+0xca>
		for ( i = 0; i < ( (st_51.calendar_func & NBR_SEASONS_bm) >> NBR_SEASONS_bp ); i++ ) {
 102c2c2:	f10a 0a01 	add.w	sl, sl, #1
 102c2c6:	fa1f fa8a 	uxth.w	sl, sl
 102c2ca:	f003 030f 	and.w	r3, r3, #15
 102c2ce:	459a      	cmp	sl, r3
 102c2d0:	4656      	mov	r6, sl
 102c2d2:	dbd7      	blt.n	102c284 <TOU_APP_bSt_54_execute_table_writing+0xa8>
	SM_APP_vChange_table_state(ST_54_PROG_STATE_ADDR, C1219_TABLE_FULL);
 102c2d4:	2145      	movs	r1, #69	; 0x45
 102c2d6:	f640 208c 	movw	r0, #2700	; 0xa8c
 102c2da:	47d8      	blx	fp
}
 102c2dc:	2001      	movs	r0, #1
 102c2de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		EEPROM_writer( ST_54_ANCHOR_DATE_ADDR, &table_buffer[k], 2 );
 102c2e2:	2202      	movs	r2, #2
 102c2e4:	4649      	mov	r1, r9
 102c2e6:	f640 208f 	movw	r0, #2703	; 0xa8f
 102c2ea:	f8df 8010 	ldr.w	r8, [pc, #16]	; 102c2fc <TOU_APP_bSt_54_execute_table_writing+0x120>
 102c2ee:	47c0      	blx	r8
		k += 2;
 102c2f0:	2402      	movs	r4, #2
 102c2f2:	e781      	b.n	102c1f8 <TOU_APP_bSt_54_execute_table_writing+0x1c>
 102c2f4:	200081f8 	.word	0x200081f8
 102c2f8:	010203e9 	.word	0x010203e9
 102c2fc:	01017509 	.word	0x01017509

0102c300 <TOU_APP_usSt_54_get_size>:
uint16_t TOU_APP_usSt_54_get_size(void) {
 102c300:	b430      	push	{r4, r5}
	if ( (st_51.time_func_flag1 & ANCHOR_DATE_FLAG_bm) == ANCHOR_DATE_FLAG_bm ) {
 102c302:	4a13      	ldr	r2, [pc, #76]	; (102c350 <TOU_APP_usSt_54_get_size+0x50>)
	table_size += (3 * st_51.nbr_non_recurr_dates);
 102c304:	78d3      	ldrb	r3, [r2, #3]
	table_size += (3 * st_51.nbr_recurr_dates);
 102c306:	7915      	ldrb	r5, [r2, #4]
	if ( (st_51.time_func_flag1 & ANCHOR_DATE_FLAG_bm) == ANCHOR_DATE_FLAG_bm ) {
 102c308:	7810      	ldrb	r0, [r2, #0]
	table_size += (3 * st_51.nbr_tier_switches);
 102c30a:	88d4      	ldrh	r4, [r2, #6]
	if ( (st_51.time_func_flag2 & SEPARATE_WEEKDAYS_FLAG_bm) == SEPARATE_WEEKDAYS_FLAG_bm ) {
 102c30c:	7851      	ldrb	r1, [r2, #1]
	table_size += (3 * st_51.nbr_tier_switches);
 102c30e:	442b      	add	r3, r5
	if ( (st_51.time_func_flag1 & ANCHOR_DATE_FLAG_bm) == ANCHOR_DATE_FLAG_bm ) {
 102c310:	f010 0f20 	tst.w	r0, #32
	table_size += (3 * st_51.nbr_tier_switches);
 102c314:	4423      	add	r3, r4
		table_size += 2;
 102c316:	bf0c      	ite	eq
 102c318:	2000      	moveq	r0, #0
 102c31a:	2002      	movne	r0, #2
	table_size += (3 * st_51.nbr_tier_switches);
 102c31c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 102c320:	4403      	add	r3, r0
	if ( (st_51.time_func_flag2 & SEPARATE_WEEKDAYS_FLAG_bm) == SEPARATE_WEEKDAYS_FLAG_bm ) {
 102c322:	0789      	lsls	r1, r1, #30
	table_size += (3 * st_51.nbr_tier_switches);
 102c324:	b29b      	uxth	r3, r3
	if ( (st_51.time_func_flag2 & SEPARATE_WEEKDAYS_FLAG_bm) == SEPARATE_WEEKDAYS_FLAG_bm ) {
 102c326:	d409      	bmi.n	102c33c <TOU_APP_usSt_54_get_size+0x3c>
						( (st_51.calendar_func & NBR_SEASONS_bm) >> NBR_SEASONS_bp ) *						\
 102c328:	7892      	ldrb	r2, [r2, #2]
					    ( 3 + ( (st_51.calendar_func & NBR_SPECIAL_SCHED_bm) >> NBR_SPECIAL_SCHED_bp ) )
 102c32a:	0910      	lsrs	r0, r2, #4
 102c32c:	3003      	adds	r0, #3
		table_size += ( 
 102c32e:	f002 020f 	and.w	r2, r2, #15
 102c332:	fb02 3300 	mla	r3, r2, r0, r3
 102c336:	b298      	uxth	r0, r3
}
 102c338:	bc30      	pop	{r4, r5}
 102c33a:	4770      	bx	lr
		table_size += ( 7 * ( (st_51.calendar_func & NBR_SEASONS_bm) >> NBR_SEASONS_bp ) );
 102c33c:	7890      	ldrb	r0, [r2, #2]
 102c33e:	f000 000f 	and.w	r0, r0, #15
 102c342:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 102c346:	4403      	add	r3, r0
 102c348:	b298      	uxth	r0, r3
}
 102c34a:	bc30      	pop	{r4, r5}
 102c34c:	4770      	bx	lr
 102c34e:	bf00      	nop
 102c350:	200081f8 	.word	0x200081f8

0102c354 <TOU_APP_bSt_51_restore_default_values>:
bool TOU_APP_bSt_51_restore_default_values(void) {
 102c354:	b530      	push	{r4, r5, lr}
 102c356:	b085      	sub	sp, #20
	st_51_temp.calendar_func = DEFAULT_CALENDAR_FUNC_VALUES;
 102c358:	2300      	movs	r3, #0
	st_51_temp.time_func_flag2 = DEFAULT_TIME_FUNC_FLAG2;
 102c35a:	2118      	movs	r1, #24
	st_51_temp.calendar_tbl_size = TOU_APP_usSt_54_get_size();
 102c35c:	4a11      	ldr	r2, [pc, #68]	; (102c3a4 <TOU_APP_bSt_51_restore_default_values+0x50>)
	st_51_temp.time_func_flag2 = DEFAULT_TIME_FUNC_FLAG2;
 102c35e:	f88d 1005 	strb.w	r1, [sp, #5]
	st_51_temp.time_func_flag1 = DEFAULT_TIME_FUNC_FLAG1;
 102c362:	2011      	movs	r0, #17
	st_51_temp.calendar_func = DEFAULT_CALENDAR_FUNC_VALUES;
 102c364:	f88d 3006 	strb.w	r3, [sp, #6]
	st_51_temp.nbr_non_recurr_dates = DEFAULT_NBR_NON_RECURR_DATES;
 102c368:	f88d 3007 	strb.w	r3, [sp, #7]
	st_51_temp.nbr_recurr_dates = DEFAULT_NBR_RECURR_DATES;
 102c36c:	f88d 3008 	strb.w	r3, [sp, #8]
	st_51_temp.nbr_tier_switches = DEFAULT_NBR_TIER_SWITCHES;
 102c370:	f8ad 300a 	strh.w	r3, [sp, #10]
	st_51_temp.time_func_flag1 = DEFAULT_TIME_FUNC_FLAG1;
 102c374:	f88d 0004 	strb.w	r0, [sp, #4]
	st_51_temp.calendar_tbl_size = TOU_APP_usSt_54_get_size();
 102c378:	4790      	blx	r2
	is_ok = TOU_APP_bSt_51_validate_data(&st_51_temp);
 102c37a:	ac01      	add	r4, sp, #4
	st_51_temp.calendar_tbl_size = TOU_APP_usSt_54_get_size();
 102c37c:	f8ad 000c 	strh.w	r0, [sp, #12]
	is_ok = TOU_APP_bSt_51_validate_data(&st_51_temp);
 102c380:	4b09      	ldr	r3, [pc, #36]	; (102c3a8 <TOU_APP_bSt_51_restore_default_values+0x54>)
 102c382:	4620      	mov	r0, r4
 102c384:	4798      	blx	r3
 102c386:	4605      	mov	r5, r0
	st_51 = st_51_temp;
 102c388:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 102c38c:	4b07      	ldr	r3, [pc, #28]	; (102c3ac <TOU_APP_bSt_51_restore_default_values+0x58>)
	TOU_APP_vSt_51_write_eeprom_values(&st_51);
 102c38e:	4c08      	ldr	r4, [pc, #32]	; (102c3b0 <TOU_APP_bSt_51_restore_default_values+0x5c>)
	st_51 = st_51_temp;
 102c390:	c303      	stmia	r3!, {r0, r1}
 102c392:	801a      	strh	r2, [r3, #0]
	TOU_APP_vSt_51_write_eeprom_values(&st_51);
 102c394:	47a0      	blx	r4
	uint16_t crc = SM_APP_usSt_51_ram_calculate_crc();
 102c396:	4b07      	ldr	r3, [pc, #28]	; (102c3b4 <TOU_APP_bSt_51_restore_default_values+0x60>)
 102c398:	4798      	blx	r3
	SM_APP_vSt_51_write_crc(crc);
 102c39a:	4b07      	ldr	r3, [pc, #28]	; (102c3b8 <TOU_APP_bSt_51_restore_default_values+0x64>)
 102c39c:	4798      	blx	r3
}
 102c39e:	4628      	mov	r0, r5
 102c3a0:	b005      	add	sp, #20
 102c3a2:	bd30      	pop	{r4, r5, pc}
 102c3a4:	0102c301 	.word	0x0102c301
 102c3a8:	0102bba5 	.word	0x0102bba5
 102c3ac:	200081f8 	.word	0x200081f8
 102c3b0:	0102bd6d 	.word	0x0102bd6d
 102c3b4:	0101fc41 	.word	0x0101fc41
 102c3b8:	0101fcf1 	.word	0x0101fcf1

0102c3bc <TOU_APP_bLoad_st_51>:
bool TOU_APP_bLoad_st_51(void) {
 102c3bc:	b510      	push	{r4, lr}
	if ( SM_APP_ucGet_table_state(ST_51_PROG_STATE_ADDR) != C1219_TABLE_FULL ) {
 102c3be:	f640 2069 	movw	r0, #2665	; 0xa69
 102c3c2:	4b06      	ldr	r3, [pc, #24]	; (102c3dc <TOU_APP_bLoad_st_51+0x20>)
 102c3c4:	4798      	blx	r3
 102c3c6:	2845      	cmp	r0, #69	; 0x45
 102c3c8:	d003      	beq.n	102c3d2 <TOU_APP_bLoad_st_51+0x16>
		is_ok = TOU_APP_bSt_51_restore_default_values();
 102c3ca:	4b05      	ldr	r3, [pc, #20]	; (102c3e0 <TOU_APP_bLoad_st_51+0x24>)
}
 102c3cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		is_ok = TOU_APP_bSt_51_restore_default_values();
 102c3d0:	4718      	bx	r3
		is_ok = TOU_APP_bSt_51_refresh_ram();
 102c3d2:	4b04      	ldr	r3, [pc, #16]	; (102c3e4 <TOU_APP_bLoad_st_51+0x28>)
}
 102c3d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		is_ok = TOU_APP_bSt_51_refresh_ram();
 102c3d8:	4718      	bx	r3
 102c3da:	bf00      	nop
 102c3dc:	010203cd 	.word	0x010203cd
 102c3e0:	0102c355 	.word	0x0102c355
 102c3e4:	0102be41 	.word	0x0102be41

0102c3e8 <TOU_APP_vCopy_st_51_ram>:
void TOU_APP_vCopy_st_51_ram(uint8_t* destination) {
 102c3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 102c3ea:	4b0c      	ldr	r3, [pc, #48]	; (102c41c <TOU_APP_vCopy_st_51_ram+0x34>)
	st_51_source.calendar_tbl_size = TOU_APP_usSt_54_get_size();
 102c3ec:	490c      	ldr	r1, [pc, #48]	; (102c420 <TOU_APP_vCopy_st_51_ram+0x38>)
 102c3ee:	88da      	ldrh	r2, [r3, #6]
 102c3f0:	78dd      	ldrb	r5, [r3, #3]
 102c3f2:	789e      	ldrb	r6, [r3, #2]
 102c3f4:	f893 e000 	ldrb.w	lr, [r3]
 102c3f8:	785f      	ldrb	r7, [r3, #1]
 102c3fa:	791b      	ldrb	r3, [r3, #4]
void TOU_APP_vCopy_st_51_ram(uint8_t* destination) {
 102c3fc:	4604      	mov	r4, r0
	table_buffer[6] = (uint8_t)((st_51_source.nbr_tier_switches & 0xFF00) >> 8);
 102c3fe:	0a10      	lsrs	r0, r2, #8
	table_buffer[4] = st_51_source.nbr_recurr_dates;
 102c400:	7123      	strb	r3, [r4, #4]
	table_buffer[5] = (uint8_t)((st_51_source.nbr_tier_switches & 0x00FF) >> 0);
 102c402:	7162      	strb	r2, [r4, #5]
	table_buffer[6] = (uint8_t)((st_51_source.nbr_tier_switches & 0xFF00) >> 8);
 102c404:	71a0      	strb	r0, [r4, #6]
	table_buffer[0] = st_51_source.time_func_flag1;
 102c406:	f884 e000 	strb.w	lr, [r4]
	table_buffer[1] = st_51_source.time_func_flag2;
 102c40a:	7067      	strb	r7, [r4, #1]
	table_buffer[2] = st_51_source.calendar_func;
 102c40c:	70a6      	strb	r6, [r4, #2]
	table_buffer[3] = st_51_source.nbr_non_recurr_dates;
 102c40e:	70e5      	strb	r5, [r4, #3]
	st_51_source.calendar_tbl_size = TOU_APP_usSt_54_get_size();
 102c410:	4788      	blx	r1
	table_buffer[8] = (uint8_t)((st_51_source.calendar_tbl_size & 0xFF00) >> 8);
 102c412:	0a03      	lsrs	r3, r0, #8
	table_buffer[7] = (uint8_t)((st_51_source.calendar_tbl_size & 0x00FF) >> 0);
 102c414:	71e0      	strb	r0, [r4, #7]
	table_buffer[8] = (uint8_t)((st_51_source.calendar_tbl_size & 0xFF00) >> 8);
 102c416:	7223      	strb	r3, [r4, #8]
 102c418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 102c41a:	bf00      	nop
 102c41c:	200081f8 	.word	0x200081f8
 102c420:	0102c301 	.word	0x0102c301

0102c424 <TOU_APP_vCopy_st_51_nvm>:
void TOU_APP_vCopy_st_51_nvm(uint8_t* destination) {
 102c424:	b570      	push	{r4, r5, r6, lr}
 102c426:	b084      	sub	sp, #16
 102c428:	4604      	mov	r4, r0
	TOU_APP_vSt_51_read_eeprom_values(&st_51_aux);
 102c42a:	4b0f      	ldr	r3, [pc, #60]	; (102c468 <TOU_APP_vCopy_st_51_nvm+0x44>)
 102c42c:	a801      	add	r0, sp, #4
 102c42e:	4798      	blx	r3
 102c430:	f8bd 300a 	ldrh.w	r3, [sp, #10]
	table_buffer[0] = st_51_source.time_func_flag1;
 102c434:	f89d 2004 	ldrb.w	r2, [sp, #4]
 102c438:	f89d 0007 	ldrb.w	r0, [sp, #7]
 102c43c:	f89d 1008 	ldrb.w	r1, [sp, #8]
 102c440:	7022      	strb	r2, [r4, #0]
 102c442:	f89d 6005 	ldrb.w	r6, [sp, #5]
 102c446:	f89d 5006 	ldrb.w	r5, [sp, #6]
	table_buffer[5] = (uint8_t)((st_51_source.nbr_tier_switches & 0x00FF) >> 0);
 102c44a:	7163      	strb	r3, [r4, #5]
	table_buffer[6] = (uint8_t)((st_51_source.nbr_tier_switches & 0xFF00) >> 8);
 102c44c:	0a1a      	lsrs	r2, r3, #8
	table_buffer[1] = st_51_source.time_func_flag2;
 102c44e:	7066      	strb	r6, [r4, #1]
	table_buffer[2] = st_51_source.calendar_func;
 102c450:	70a5      	strb	r5, [r4, #2]
	table_buffer[3] = st_51_source.nbr_non_recurr_dates;
 102c452:	70e0      	strb	r0, [r4, #3]
	table_buffer[4] = st_51_source.nbr_recurr_dates;
 102c454:	7121      	strb	r1, [r4, #4]
	table_buffer[6] = (uint8_t)((st_51_source.nbr_tier_switches & 0xFF00) >> 8);
 102c456:	71a2      	strb	r2, [r4, #6]
	st_51_source.calendar_tbl_size = TOU_APP_usSt_54_get_size();
 102c458:	4b04      	ldr	r3, [pc, #16]	; (102c46c <TOU_APP_vCopy_st_51_nvm+0x48>)
 102c45a:	4798      	blx	r3
	table_buffer[8] = (uint8_t)((st_51_source.calendar_tbl_size & 0xFF00) >> 8);
 102c45c:	0a03      	lsrs	r3, r0, #8
	table_buffer[7] = (uint8_t)((st_51_source.calendar_tbl_size & 0x00FF) >> 0);
 102c45e:	71e0      	strb	r0, [r4, #7]
	table_buffer[8] = (uint8_t)((st_51_source.calendar_tbl_size & 0xFF00) >> 8);
 102c460:	7223      	strb	r3, [r4, #8]
}
 102c462:	b004      	add	sp, #16
 102c464:	bd70      	pop	{r4, r5, r6, pc}
 102c466:	bf00      	nop
 102c468:	0102bc4d 	.word	0x0102bc4d
 102c46c:	0102c301 	.word	0x0102c301

0102c470 <TOU_APP_bSt_51_execute_table_reading>:
bool TOU_APP_bSt_51_execute_table_reading(uint8_t *table_buffer) {
 102c470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 102c472:	4b0c      	ldr	r3, [pc, #48]	; (102c4a4 <TOU_APP_bSt_51_execute_table_reading+0x34>)
	st_51_source.calendar_tbl_size = TOU_APP_usSt_54_get_size();
 102c474:	490c      	ldr	r1, [pc, #48]	; (102c4a8 <TOU_APP_bSt_51_execute_table_reading+0x38>)
 102c476:	88da      	ldrh	r2, [r3, #6]
 102c478:	78dd      	ldrb	r5, [r3, #3]
 102c47a:	789e      	ldrb	r6, [r3, #2]
 102c47c:	f893 e000 	ldrb.w	lr, [r3]
 102c480:	785f      	ldrb	r7, [r3, #1]
 102c482:	791b      	ldrb	r3, [r3, #4]
bool TOU_APP_bSt_51_execute_table_reading(uint8_t *table_buffer) {
 102c484:	4604      	mov	r4, r0
	table_buffer[6] = (uint8_t)((st_51_source.nbr_tier_switches & 0xFF00) >> 8);
 102c486:	0a10      	lsrs	r0, r2, #8
	table_buffer[4] = st_51_source.nbr_recurr_dates;
 102c488:	7123      	strb	r3, [r4, #4]
	table_buffer[5] = (uint8_t)((st_51_source.nbr_tier_switches & 0x00FF) >> 0);
 102c48a:	7162      	strb	r2, [r4, #5]
	table_buffer[6] = (uint8_t)((st_51_source.nbr_tier_switches & 0xFF00) >> 8);
 102c48c:	71a0      	strb	r0, [r4, #6]
	table_buffer[0] = st_51_source.time_func_flag1;
 102c48e:	f884 e000 	strb.w	lr, [r4]
	table_buffer[1] = st_51_source.time_func_flag2;
 102c492:	7067      	strb	r7, [r4, #1]
	table_buffer[2] = st_51_source.calendar_func;
 102c494:	70a6      	strb	r6, [r4, #2]
	table_buffer[3] = st_51_source.nbr_non_recurr_dates;
 102c496:	70e5      	strb	r5, [r4, #3]
	st_51_source.calendar_tbl_size = TOU_APP_usSt_54_get_size();
 102c498:	4788      	blx	r1
	table_buffer[8] = (uint8_t)((st_51_source.calendar_tbl_size & 0xFF00) >> 8);
 102c49a:	0a03      	lsrs	r3, r0, #8
	table_buffer[7] = (uint8_t)((st_51_source.calendar_tbl_size & 0x00FF) >> 0);
 102c49c:	71e0      	strb	r0, [r4, #7]
	table_buffer[8] = (uint8_t)((st_51_source.calendar_tbl_size & 0xFF00) >> 8);
 102c49e:	7223      	strb	r3, [r4, #8]
}
 102c4a0:	2001      	movs	r0, #1
 102c4a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 102c4a4:	200081f8 	.word	0x200081f8
 102c4a8:	0102c301 	.word	0x0102c301

0102c4ac <TOU_APP_bSt_55_execute_table_reading>:
bool TOU_APP_bSt_55_execute_table_reading(uint8_t *table_buffer) {
 102c4ac:	b530      	push	{r4, r5, lr}
	table_buffer[k++] = (uint8_t)(rtc.utc_timestamp);
 102c4ae:	4d1e      	ldr	r5, [pc, #120]	; (102c528 <TOU_APP_bSt_55_execute_table_reading+0x7c>)
	RTC_APP_vBreak_timestamp( &rtc_temp, rtc.utc_timestamp);
 102c4b0:	4a1e      	ldr	r2, [pc, #120]	; (102c52c <TOU_APP_bSt_55_execute_table_reading+0x80>)
	table_buffer[k++] = (uint8_t)(rtc.utc_timestamp);
 102c4b2:	686b      	ldr	r3, [r5, #4]
bool TOU_APP_bSt_55_execute_table_reading(uint8_t *table_buffer) {
 102c4b4:	4604      	mov	r4, r0
 102c4b6:	b08d      	sub	sp, #52	; 0x34
	table_buffer[k++] = (uint8_t)(rtc.utc_timestamp);
 102c4b8:	7023      	strb	r3, [r4, #0]
	table_buffer[k++] = (uint8_t)(rtc.utc_timestamp >> 8);
 102c4ba:	686b      	ldr	r3, [r5, #4]
 102c4bc:	0a1b      	lsrs	r3, r3, #8
 102c4be:	7063      	strb	r3, [r4, #1]
	table_buffer[k++] = (uint8_t)(rtc.utc_timestamp >> 16);
 102c4c0:	88eb      	ldrh	r3, [r5, #6]
 102c4c2:	70a3      	strb	r3, [r4, #2]
	table_buffer[k++] = (uint8_t)(rtc.utc_timestamp >> 24);
 102c4c4:	79eb      	ldrb	r3, [r5, #7]
 102c4c6:	70e3      	strb	r3, [r4, #3]
	RTC_APP_vBreak_timestamp( &rtc_temp, rtc.utc_timestamp);
 102c4c8:	a801      	add	r0, sp, #4
 102c4ca:	6869      	ldr	r1, [r5, #4]
 102c4cc:	4790      	blx	r2
	time_date_qual |= rtc.is_dst << DST_FLAG_bp;
 102c4ce:	7d68      	ldrb	r0, [r5, #21]
 102c4d0:	f89d 301b 	ldrb.w	r3, [sp, #27]
	if ( (st_51.time_func_flag2 & SEPARATE_SUM_DEMANDS_FLAG_bm) == SEPARATE_SUM_DEMANDS_FLAG_bm ) {
 102c4d4:	4a16      	ldr	r2, [pc, #88]	; (102c530 <TOU_APP_bSt_55_execute_table_reading+0x84>)
	time_date_qual |= rtc.dst_applied_flag << DST_APPLIED_FLAG_bp;
 102c4d6:	7d29      	ldrb	r1, [r5, #20]
	if ( (st_51.time_func_flag2 & SEPARATE_SUM_DEMANDS_FLAG_bm) == SEPARATE_SUM_DEMANDS_FLAG_bm ) {
 102c4d8:	7852      	ldrb	r2, [r2, #1]
	time_date_qual |= rtc.is_dst << DST_FLAG_bp;
 102c4da:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 102c4de:	b2db      	uxtb	r3, r3
	time_date_qual |= 1 << TM_ZN_APPLIED_FLAG_bp;
 102c4e0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
	time_date_qual |= rtc.dst_applied_flag << DST_APPLIED_FLAG_bp;
 102c4e4:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
	if ( (st_51.time_func_flag2 & SEPARATE_SUM_DEMANDS_FLAG_bm) == SEPARATE_SUM_DEMANDS_FLAG_bm ) {
 102c4e8:	f012 0f04 	tst.w	r2, #4
	time_date_qual |= 1 << DST_SUPPORTED_FLAG_bp;
 102c4ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
		status |= tou.curr_tier_dem << CURR_DEMAND_TIER_bp;
 102c4f0:	4a10      	ldr	r2, [pc, #64]	; (102c534 <TOU_APP_bSt_55_execute_table_reading+0x88>)
	table_buffer[k++] = time_date_qual;
 102c4f2:	7123      	strb	r3, [r4, #4]
		status |= tou.curr_tier_dem << CURR_DEMAND_TIER_bp;
 102c4f4:	bf1b      	ittet	ne
 102c4f6:	f892 10bc 	ldrbne.w	r1, [r2, #188]	; 0xbc
 102c4fa:	f892 30bb 	ldrbne.w	r3, [r2, #187]	; 0xbb
		status = tou.curr_tier << CURR_TIER_bp;
 102c4fe:	f892 10ba 	ldrbeq.w	r1, [r2, #186]	; 0xba
		status |= tou.curr_tier_dem << CURR_DEMAND_TIER_bp;
 102c502:	ea43 01c1 	orrne.w	r1, r3, r1, lsl #3
	status |= tou.curr_season << SEASON_bp;
 102c506:	f892 30b8 	ldrb.w	r3, [r2, #184]	; 0xb8
	status |= tou.curr_special_sched_active << SPECIAL_SCHD_ACTIVE_bp;
 102c50a:	f892 20bd 	ldrb.w	r2, [r2, #189]	; 0xbd
	status |= tou.curr_season << SEASON_bp;
 102c50e:	031b      	lsls	r3, r3, #12
 102c510:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 102c514:	430b      	orrs	r3, r1
 102c516:	b21b      	sxth	r3, r3
	table_buffer[k++] = (uint8_t)(status >> 8);
 102c518:	f3c3 2207 	ubfx	r2, r3, #8, #8
}
 102c51c:	2001      	movs	r0, #1
	table_buffer[k++] = (uint8_t)(status);
 102c51e:	7163      	strb	r3, [r4, #5]
	table_buffer[k++] = (uint8_t)(status >> 8);
 102c520:	71a2      	strb	r2, [r4, #6]
}
 102c522:	b00d      	add	sp, #52	; 0x34
 102c524:	bd30      	pop	{r4, r5, pc}
 102c526:	bf00      	nop
 102c528:	20017160 	.word	0x20017160
 102c52c:	01029ebd 	.word	0x01029ebd
 102c530:	200081f8 	.word	0x200081f8
 102c534:	20008208 	.word	0x20008208

0102c538 <TOU_APP_usSt_55_get_size>:
}
 102c538:	2007      	movs	r0, #7
 102c53a:	4770      	bx	lr

0102c53c <TOU_APP_vCreate_task>:
void TOU_APP_vCreate_task(void) {
 102c53c:	b570      	push	{r4, r5, r6, lr}
 102c53e:	b084      	sub	sp, #16
	tou_os.rtos_task_active = false;
 102c540:	2400      	movs	r4, #0
 102c542:	4d09      	ldr	r5, [pc, #36]	; (102c568 <TOU_APP_vCreate_task+0x2c>)
	xTaskCreate( TOU_APP_vRtos_task, (const signed char * const ) "TOU_APP_vTask", TOU_STACK_SIZE, NULL, TOU_APP_vTask_PRIO, &tou_os.task_id );
 102c544:	9501      	str	r5, [sp, #4]
 102c546:	2203      	movs	r2, #3
 102c548:	4623      	mov	r3, r4
 102c54a:	9200      	str	r2, [sp, #0]
 102c54c:	9403      	str	r4, [sp, #12]
 102c54e:	9402      	str	r4, [sp, #8]
 102c550:	f44f 7282 	mov.w	r2, #260	; 0x104
 102c554:	4905      	ldr	r1, [pc, #20]	; (102c56c <TOU_APP_vCreate_task+0x30>)
 102c556:	4e06      	ldr	r6, [pc, #24]	; (102c570 <TOU_APP_vCreate_task+0x34>)
 102c558:	4806      	ldr	r0, [pc, #24]	; (102c574 <TOU_APP_vCreate_task+0x38>)
	tou_os.rtos_task_active = false;
 102c55a:	712c      	strb	r4, [r5, #4]
	xTaskCreate( TOU_APP_vRtos_task, (const signed char * const ) "TOU_APP_vTask", TOU_STACK_SIZE, NULL, TOU_APP_vTask_PRIO, &tou_os.task_id );
 102c55c:	47b0      	blx	r6
	tou_os.rtos_task_active = true;
 102c55e:	2301      	movs	r3, #1
 102c560:	712b      	strb	r3, [r5, #4]
}
 102c562:	b004      	add	sp, #16
 102c564:	bd70      	pop	{r4, r5, r6, pc}
 102c566:	bf00      	nop
 102c568:	200172b4 	.word	0x200172b4
 102c56c:	01031910 	.word	0x01031910
 102c570:	0102e7f9 	.word	0x0102e7f9
 102c574:	0102d0d5 	.word	0x0102d0d5

0102c578 <TOU_APP_vSuspend_rtos_task>:
void TOU_APP_vSuspend_rtos_task(void) {
 102c578:	b510      	push	{r4, lr}
	tou_os.rtos_task_active = false;
 102c57a:	4c06      	ldr	r4, [pc, #24]	; (102c594 <TOU_APP_vSuspend_rtos_task+0x1c>)
	if ( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING ) {
 102c57c:	4b06      	ldr	r3, [pc, #24]	; (102c598 <TOU_APP_vSuspend_rtos_task+0x20>)
	tou_os.rtos_task_active = false;
 102c57e:	2200      	movs	r2, #0
 102c580:	7122      	strb	r2, [r4, #4]
	if ( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING ) {
 102c582:	4798      	blx	r3
 102c584:	2801      	cmp	r0, #1
 102c586:	d000      	beq.n	102c58a <TOU_APP_vSuspend_rtos_task+0x12>
 102c588:	bd10      	pop	{r4, pc}
		vTaskSuspend(tou_os.task_id);
 102c58a:	6820      	ldr	r0, [r4, #0]
 102c58c:	4b03      	ldr	r3, [pc, #12]	; (102c59c <TOU_APP_vSuspend_rtos_task+0x24>)
}
 102c58e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		vTaskSuspend(tou_os.task_id);
 102c592:	4718      	bx	r3
 102c594:	200172b4 	.word	0x200172b4
 102c598:	0102f149 	.word	0x0102f149
 102c59c:	0102ea59 	.word	0x0102ea59

0102c5a0 <TOU_APP_vResume_rtos_task>:
	tou_os.rtos_task_active = true;
 102c5a0:	4b01      	ldr	r3, [pc, #4]	; (102c5a8 <TOU_APP_vResume_rtos_task+0x8>)
 102c5a2:	2201      	movs	r2, #1
 102c5a4:	711a      	strb	r2, [r3, #4]
 102c5a6:	4770      	bx	lr
 102c5a8:	200172b4 	.word	0x200172b4

0102c5ac <TOU_APP_vWrite_eeprom_current_season>:
	EEPROM_writer(TOU_LAST_SEASON_ADDR, &tou.curr_season, 1);
 102c5ac:	2201      	movs	r2, #1
 102c5ae:	4902      	ldr	r1, [pc, #8]	; (102c5b8 <TOU_APP_vWrite_eeprom_current_season+0xc>)
 102c5b0:	4b02      	ldr	r3, [pc, #8]	; (102c5bc <TOU_APP_vWrite_eeprom_current_season+0x10>)
 102c5b2:	f249 20bb 	movw	r0, #37563	; 0x92bb
 102c5b6:	4718      	bx	r3
 102c5b8:	200082c0 	.word	0x200082c0
 102c5bc:	01017509 	.word	0x01017509

0102c5c0 <TOU_APP_vSeason_change>:
	REGS_APP_vTake_snapshot_st_23((uint8_t)SEASON_CHANGE, season, timestamp);
 102c5c0:	2000      	movs	r0, #0
 102c5c2:	4b01      	ldr	r3, [pc, #4]	; (102c5c8 <TOU_APP_vSeason_change+0x8>)
 102c5c4:	4718      	bx	r3
 102c5c6:	bf00      	nop
 102c5c8:	01029a39 	.word	0x01029a39

0102c5cc <TOU_APP_vLoad_st_54_date_to_human_date>:
void TOU_APP_vLoad_st_54_date_to_human_date(HUMAN_TIME_TYPE *pHuman_date, RTC_TYPE *rtc, uint16_t st_54_date, bool is_recurrent) {
 102c5cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 102c5d0:	4604      	mov	r4, r0
 102c5d2:	b089      	sub	sp, #36	; 0x24
 102c5d4:	4616      	mov	r6, r2
	if (is_recurrent == true) {
 102c5d6:	b363      	cbz	r3, 102c632 <TOU_APP_vLoad_st_54_date_to_human_date+0x66>
		leap_year = RTC_APP_bIs_leap_year(rtc->htime.year);
 102c5d8:	4b5d      	ldr	r3, [pc, #372]	; (102c750 <TOU_APP_vLoad_st_54_date_to_human_date+0x184>)
 102c5da:	8988      	ldrh	r0, [r1, #12]
		month = (st_54_date & RDATE_MONTH_bm) >> RDATE_MONTH_bp;
 102c5dc:	f002 090f 	and.w	r9, r2, #15
 102c5e0:	460f      	mov	r7, r1
		leap_year = RTC_APP_bIs_leap_year(rtc->htime.year);
 102c5e2:	4798      	blx	r3
		switch (month) {
 102c5e4:	f109 33ff 	add.w	r3, r9, #4294967295
 102c5e8:	2b0c      	cmp	r3, #12
 102c5ea:	d84e      	bhi.n	102c68a <TOU_APP_vLoad_st_54_date_to_human_date+0xbe>
			if (month == 13) {
 102c5ec:	f1b9 0f0d 	cmp.w	r9, #13
			offset = (st_54_date & RDATE_OFFSET_bm) >> RDATE_OFFSET_bp;
 102c5f0:	f3c6 1303 	ubfx	r3, r6, #4, #4
			human_date_temp.year = rtc->htime.year;
 102c5f4:	f8b7 800c 	ldrh.w	r8, [r7, #12]
				human_date_temp.month = rtc->htime.month;
 102c5f8:	bf08      	it	eq
 102c5fa:	7bbf      	ldrbeq	r7, [r7, #14]
			human_date_temp.month = month;
 102c5fc:	f88d 901a 	strb.w	r9, [sp, #26]
			human_date_temp.day = (st_54_date & RDATE_DAY_bm) >> RDATE_DAY_bp;
 102c600:	ea4f 25d6 	mov.w	r5, r6, lsr #11
			switch (offset) {
 102c604:	f1a3 0302 	sub.w	r3, r3, #2
			human_date_temp.year = rtc->htime.year;
 102c608:	f8ad 8018 	strh.w	r8, [sp, #24]
			human_date_temp.day = (st_54_date & RDATE_DAY_bm) >> RDATE_DAY_bp;
 102c60c:	f88d 501b 	strb.w	r5, [sp, #27]
			weekday = (st_54_date & RDATE_WEEKDAY_bm) >> RDATE_WEEKDAY_bp;
 102c610:	f3c6 2202 	ubfx	r2, r6, #8, #3
				human_date_temp.month = rtc->htime.month;
 102c614:	bf0c      	ite	eq
 102c616:	f88d 701a 	strbeq.w	r7, [sp, #26]
 102c61a:	464f      	movne	r7, r9
			switch (offset) {
 102c61c:	2b0d      	cmp	r3, #13
 102c61e:	d819      	bhi.n	102c654 <TOU_APP_vLoad_st_54_date_to_human_date+0x88>
 102c620:	e8df f003 	tbb	[pc, r3]
 102c624:	23786a86 	.word	0x23786a86
 102c628:	18541818 	.word	0x18541818
 102c62c:	18181818 	.word	0x18181818
 102c630:	3d18      	.short	0x3d18
		human_date_temp.year = (st_54_date & DATE_YEAR_bm) >> DATE_YEAR_bp;
 102c632:	f002 087f 	and.w	r8, r2, #127	; 0x7f
		if ( (human_date_temp.year >= 0) && (human_date_temp.year <= 99) ) {
 102c636:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
 102c63a:	d82d      	bhi.n	102c698 <TOU_APP_vLoad_st_54_date_to_human_date+0xcc>
			if ( (human_date_temp.year >= 0) && (human_date_temp.year <= 89) ) {
 102c63c:	f1b8 0f59 	cmp.w	r8, #89	; 0x59
				human_date_temp.year += 1900;
 102c640:	bf8a      	itet	hi
 102c642:	f208 786c 	addwhi	r8, r8, #1900	; 0x76c
				human_date_temp.year += 2000;
 102c646:	f508 68fa 	addls.w	r8, r8, #2000	; 0x7d0
				human_date_temp.year += 1900;
 102c64a:	fa1f f888 	uxthhi.w	r8, r8
			human_date_temp.month = (st_54_date & DATE_MONTH_bm) >> DATE_MONTH_bp;
 102c64e:	f3c2 17c3 	ubfx	r7, r2, #7, #4
			human_date_temp.day = (st_54_date & DATE_DAY_bm) >> DATE_DAY_bp;
 102c652:	0ad5      	lsrs	r5, r2, #11
	pHuman_date->hour = human_date_temp.hour;
 102c654:	2200      	movs	r2, #0
	pHuman_date->year = human_date_temp.year;
 102c656:	f8a4 8000 	strh.w	r8, [r4]
	pHuman_date->month = human_date_temp.month;
 102c65a:	70a7      	strb	r7, [r4, #2]
	pHuman_date->day = human_date_temp.day;
 102c65c:	70e5      	strb	r5, [r4, #3]
	pHuman_date->hour = human_date_temp.hour;
 102c65e:	7122      	strb	r2, [r4, #4]
	pHuman_date->minute = human_date_temp.minute;
 102c660:	7162      	strb	r2, [r4, #5]
	pHuman_date->second = human_date_temp.second;
 102c662:	71a2      	strb	r2, [r4, #6]
}
 102c664:	b009      	add	sp, #36	; 0x24
 102c666:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					human_date_temp = TOU_APP_xGet_postponed_date( 4, weekday, human_date_temp );
 102c66a:	f89d 101c 	ldrb.w	r1, [sp, #28]
 102c66e:	f89d 601e 	ldrb.w	r6, [sp, #30]
 102c672:	f89d 001d 	ldrb.w	r0, [sp, #29]
 102c676:	9102      	str	r1, [sp, #8]
 102c678:	9501      	str	r5, [sp, #4]
 102c67a:	9700      	str	r7, [sp, #0]
 102c67c:	4643      	mov	r3, r8
 102c67e:	9604      	str	r6, [sp, #16]
 102c680:	9003      	str	r0, [sp, #12]
 102c682:	2104      	movs	r1, #4
						human_date_temp = TOU_APP_xGet_postponed_date( 1, MONDAY, human_date_temp );
 102c684:	a806      	add	r0, sp, #24
 102c686:	4d33      	ldr	r5, [pc, #204]	; (102c754 <TOU_APP_vLoad_st_54_date_to_human_date+0x188>)
 102c688:	47a8      	blx	r5
 102c68a:	f8bd 8018 	ldrh.w	r8, [sp, #24]
 102c68e:	f89d 701a 	ldrb.w	r7, [sp, #26]
 102c692:	f89d 501b 	ldrb.w	r5, [sp, #27]
 102c696:	e7dd      	b.n	102c654 <TOU_APP_vLoad_st_54_date_to_human_date+0x88>
 102c698:	461d      	mov	r5, r3
 102c69a:	461f      	mov	r7, r3
 102c69c:	e7da      	b.n	102c654 <TOU_APP_vLoad_st_54_date_to_human_date+0x88>
					if (human_date_temp.day > month_days[leap_year][month]) {
 102c69e:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 102c6a2:	4b2d      	ldr	r3, [pc, #180]	; (102c758 <TOU_APP_vLoad_st_54_date_to_human_date+0x18c>)
 102c6a4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 102c6a8:	4418      	add	r0, r3
					human_date_temp.day++;
 102c6aa:	3501      	adds	r5, #1
					if (human_date_temp.day > month_days[leap_year][month]) {
 102c6ac:	f810 2009 	ldrb.w	r2, [r0, r9]
					human_date_temp.day++;
 102c6b0:	b2ed      	uxtb	r5, r5
					if (human_date_temp.day > month_days[leap_year][month]) {
 102c6b2:	42aa      	cmp	r2, r5
 102c6b4:	d2ce      	bcs.n	102c654 <TOU_APP_vLoad_st_54_date_to_human_date+0x88>
						human_date_temp.month++;
 102c6b6:	3701      	adds	r7, #1
 102c6b8:	b2ff      	uxtb	r7, r7
						if ( human_date_temp.month > 12 ) {
 102c6ba:	2f0c      	cmp	r7, #12
 102c6bc:	d946      	bls.n	102c74c <TOU_APP_vLoad_st_54_date_to_human_date+0x180>
							human_date_temp.year++;
 102c6be:	f108 0801 	add.w	r8, r8, #1
 102c6c2:	2500      	movs	r5, #0
 102c6c4:	fa1f f888 	uxth.w	r8, r8
 102c6c8:	462f      	mov	r7, r5
 102c6ca:	e7c3      	b.n	102c654 <TOU_APP_vLoad_st_54_date_to_human_date+0x88>
					day_of_week = RTC_APP_ucDay_of_week(human_date_temp.year, human_date_temp.month, human_date_temp.day);
 102c6cc:	462a      	mov	r2, r5
 102c6ce:	4639      	mov	r1, r7
 102c6d0:	4640      	mov	r0, r8
 102c6d2:	4b22      	ldr	r3, [pc, #136]	; (102c75c <TOU_APP_vLoad_st_54_date_to_human_date+0x190>)
 102c6d4:	4798      	blx	r3
					if ( day_of_week == SUNDAY ) {
 102c6d6:	2800      	cmp	r0, #0
 102c6d8:	d1bc      	bne.n	102c654 <TOU_APP_vLoad_st_54_date_to_human_date+0x88>
						human_date_temp = TOU_APP_xGet_postponed_date( 1, MONDAY, human_date_temp );
 102c6da:	f89d 101c 	ldrb.w	r1, [sp, #28]
 102c6de:	f89d 601e 	ldrb.w	r6, [sp, #30]
 102c6e2:	f89d 001d 	ldrb.w	r0, [sp, #29]
 102c6e6:	9102      	str	r1, [sp, #8]
 102c6e8:	2201      	movs	r2, #1
 102c6ea:	9501      	str	r5, [sp, #4]
 102c6ec:	9700      	str	r7, [sp, #0]
 102c6ee:	4643      	mov	r3, r8
 102c6f0:	9604      	str	r6, [sp, #16]
 102c6f2:	9003      	str	r0, [sp, #12]
 102c6f4:	4611      	mov	r1, r2
 102c6f6:	e7c5      	b.n	102c684 <TOU_APP_vLoad_st_54_date_to_human_date+0xb8>
					human_date_temp = TOU_APP_xGet_postponed_date( 2, weekday, human_date_temp );
 102c6f8:	f89d 101c 	ldrb.w	r1, [sp, #28]
 102c6fc:	f89d 601e 	ldrb.w	r6, [sp, #30]
 102c700:	f89d 001d 	ldrb.w	r0, [sp, #29]
 102c704:	9102      	str	r1, [sp, #8]
 102c706:	9501      	str	r5, [sp, #4]
 102c708:	9700      	str	r7, [sp, #0]
 102c70a:	4643      	mov	r3, r8
 102c70c:	9604      	str	r6, [sp, #16]
 102c70e:	9003      	str	r0, [sp, #12]
 102c710:	2102      	movs	r1, #2
 102c712:	e7b7      	b.n	102c684 <TOU_APP_vLoad_st_54_date_to_human_date+0xb8>
					human_date_temp = TOU_APP_xGet_postponed_date( 3, weekday, human_date_temp );
 102c714:	f89d 101c 	ldrb.w	r1, [sp, #28]
 102c718:	f89d 601e 	ldrb.w	r6, [sp, #30]
 102c71c:	f89d 001d 	ldrb.w	r0, [sp, #29]
 102c720:	9102      	str	r1, [sp, #8]
 102c722:	9501      	str	r5, [sp, #4]
 102c724:	9700      	str	r7, [sp, #0]
 102c726:	4643      	mov	r3, r8
 102c728:	9604      	str	r6, [sp, #16]
 102c72a:	9003      	str	r0, [sp, #12]
 102c72c:	2103      	movs	r1, #3
 102c72e:	e7a9      	b.n	102c684 <TOU_APP_vLoad_st_54_date_to_human_date+0xb8>
					human_date_temp = TOU_APP_xGet_postponed_date( 1, weekday, human_date_temp );
 102c730:	f89d 101c 	ldrb.w	r1, [sp, #28]
 102c734:	f89d 601e 	ldrb.w	r6, [sp, #30]
 102c738:	f89d 001d 	ldrb.w	r0, [sp, #29]
 102c73c:	9102      	str	r1, [sp, #8]
 102c73e:	9501      	str	r5, [sp, #4]
 102c740:	9700      	str	r7, [sp, #0]
 102c742:	4643      	mov	r3, r8
 102c744:	9604      	str	r6, [sp, #16]
 102c746:	9003      	str	r0, [sp, #12]
 102c748:	2101      	movs	r1, #1
 102c74a:	e79b      	b.n	102c684 <TOU_APP_vLoad_st_54_date_to_human_date+0xb8>
 102c74c:	2500      	movs	r5, #0
 102c74e:	e781      	b.n	102c654 <TOU_APP_vLoad_st_54_date_to_human_date+0x88>
 102c750:	01029e01 	.word	0x01029e01
 102c754:	0102bca5 	.word	0x0102bca5
 102c758:	01031920 	.word	0x01031920
 102c75c:	01029e39 	.word	0x01029e39

0102c760 <TOU_APP_vTask>:
	if ( !meter.system_state.changing_configuration ) {
 102c760:	4bb4      	ldr	r3, [pc, #720]	; (102ca34 <TOU_APP_vTask+0x2d4>)
 102c762:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 102c766:	2b00      	cmp	r3, #0
 102c768:	d13b      	bne.n	102c7e2 <TOU_APP_vTask+0x82>
void TOU_APP_vTask(void) {
 102c76a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if ( (rtc.is_time_relative == 0) && (TOU_APP_usSt_54_get_size() > 0) ) {
 102c76e:	f8df a2f0 	ldr.w	sl, [pc, #752]	; 102ca60 <TOU_APP_vTask+0x300>
 102c772:	f89a 6002 	ldrb.w	r6, [sl, #2]
void TOU_APP_vTask(void) {
 102c776:	b09f      	sub	sp, #124	; 0x7c
		if ( (rtc.is_time_relative == 0) && (TOU_APP_usSt_54_get_size() > 0) ) {
 102c778:	2e00      	cmp	r6, #0
 102c77a:	d12f      	bne.n	102c7dc <TOU_APP_vTask+0x7c>
 102c77c:	4bae      	ldr	r3, [pc, #696]	; (102ca38 <TOU_APP_vTask+0x2d8>)
 102c77e:	4798      	blx	r3
 102c780:	b360      	cbz	r0, 102c7dc <TOU_APP_vTask+0x7c>
			RTC_TYPE tou_rtc = rtc;
 102c782:	4655      	mov	r5, sl
 102c784:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 102c786:	ac08      	add	r4, sp, #32
 102c788:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 102c78a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 102c78c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 102c78e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
			if (tou_os.register_dst_on) {
 102c792:	4baa      	ldr	r3, [pc, #680]	; (102ca3c <TOU_APP_vTask+0x2dc>)
 102c794:	799b      	ldrb	r3, [r3, #6]
			RTC_TYPE tou_rtc = rtc;
 102c796:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			if (tou_os.register_dst_on) {
 102c79a:	2b00      	cmp	r3, #0
 102c79c:	f040 813d 	bne.w	102ca1a <TOU_APP_vTask+0x2ba>
			if (tou_os.register_dst_off) {
 102c7a0:	4ba6      	ldr	r3, [pc, #664]	; (102ca3c <TOU_APP_vTask+0x2dc>)
 102c7a2:	79db      	ldrb	r3, [r3, #7]
 102c7a4:	2b00      	cmp	r3, #0
 102c7a6:	f040 812a 	bne.w	102c9fe <TOU_APP_vTask+0x29e>
			if (tou_os.rtc_change_mask & YEAR_CHANGE_bm) {
 102c7aa:	4ba4      	ldr	r3, [pc, #656]	; (102ca3c <TOU_APP_vTask+0x2dc>)
	tou.nbr_year_seasons = 0;
 102c7ac:	f8df 9290 	ldr.w	r9, [pc, #656]	; 102ca40 <TOU_APP_vTask+0x2e0>
			if (tou_os.rtc_change_mask & YEAR_CHANGE_bm) {
 102c7b0:	795b      	ldrb	r3, [r3, #5]
 102c7b2:	069c      	lsls	r4, r3, #26
 102c7b4:	f100 80d7 	bmi.w	102c966 <TOU_APP_vTask+0x206>
			if (tou_os.rtc_change_mask & DAY_CHANGE_bm) {
 102c7b8:	0718      	lsls	r0, r3, #28
 102c7ba:	d449      	bmi.n	102c850 <TOU_APP_vTask+0xf0>
			if (tou_os.rtc_change_mask & MINUTE_CHANGE_bm) {
 102c7bc:	079a      	lsls	r2, r3, #30
 102c7be:	d411      	bmi.n	102c7e4 <TOU_APP_vTask+0x84>
			if ( (tou.pending_season_change | tou.pending_demand_reset | tou.pending_self_read) == 1) {
 102c7c0:	f899 30be 	ldrb.w	r3, [r9, #190]	; 0xbe
 102c7c4:	f899 10bf 	ldrb.w	r1, [r9, #191]	; 0xbf
 102c7c8:	f899 20c0 	ldrb.w	r2, [r9, #192]	; 0xc0
 102c7cc:	430b      	orrs	r3, r1
 102c7ce:	4313      	orrs	r3, r2
 102c7d0:	2b01      	cmp	r3, #1
 102c7d2:	f000 814d 	beq.w	102ca70 <TOU_APP_vTask+0x310>
			tou_os.rtc_change_mask = 0;
 102c7d6:	4a99      	ldr	r2, [pc, #612]	; (102ca3c <TOU_APP_vTask+0x2dc>)
 102c7d8:	2300      	movs	r3, #0
 102c7da:	7153      	strb	r3, [r2, #5]
}
 102c7dc:	b01f      	add	sp, #124	; 0x7c
 102c7de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 102c7e2:	4770      	bx	lr
	if (rtc->is_time_relative == 0) {
 102c7e4:	f89d 4022 	ldrb.w	r4, [sp, #34]	; 0x22
 102c7e8:	2c00      	cmp	r4, #0
 102c7ea:	d1e9      	bne.n	102c7c0 <TOU_APP_vTask+0x60>
		for ( i = 0; i < tou.nbr_day_tiers; i++ ) {
 102c7ec:	f899 5000 	ldrb.w	r5, [r9]
 102c7f0:	f8df 8274 	ldr.w	r8, [pc, #628]	; 102ca68 <TOU_APP_vTask+0x308>
 102c7f4:	2d00      	cmp	r5, #0
 102c7f6:	f000 816f 	beq.w	102cad8 <TOU_APP_vTask+0x378>
 102c7fa:	1e69      	subs	r1, r5, #1
 102c7fc:	f898 7001 	ldrb.w	r7, [r8, #1]
 102c800:	980a      	ldr	r0, [sp, #40]	; 0x28
 102c802:	4b8f      	ldr	r3, [pc, #572]	; (102ca40 <TOU_APP_vTask+0x2e0>)
 102c804:	b2c9      	uxtb	r1, r1
 102c806:	3101      	adds	r1, #1
 102c808:	eb09 01c1 	add.w	r1, r9, r1, lsl #3
 102c80c:	f007 0704 	and.w	r7, r7, #4
 102c810:	4625      	mov	r5, r4
 102c812:	4626      	mov	r6, r4
 102c814:	e009      	b.n	102c82a <TOU_APP_vTask+0xca>
				if ( tou.day_tier_switches[i].demand_switch_flag == 1 ) {
 102c816:	f893 e006 	ldrb.w	lr, [r3, #6]
 102c81a:	f1be 0f01 	cmp.w	lr, #1
 102c81e:	f000 81fe 	beq.w	102cc1e <TOU_APP_vTask+0x4be>
 102c822:	3308      	adds	r3, #8
		for ( i = 0; i < tou.nbr_day_tiers; i++ ) {
 102c824:	428b      	cmp	r3, r1
 102c826:	f000 8159 	beq.w	102cadc <TOU_APP_vTask+0x37c>
			if (rtc->timestamp >= tou.day_tier_switches[i].tier_switch) {
 102c82a:	689a      	ldr	r2, [r3, #8]
 102c82c:	4282      	cmp	r2, r0
				tier_temp = tou.day_tier_switches[i].tier_id;
 102c82e:	bf98      	it	ls
 102c830:	791c      	ldrbls	r4, [r3, #4]
			if ( (st_51.time_func_flag2 & SEPARATE_SUM_DEMANDS_FLAG_bm) == SEPARATE_SUM_DEMANDS_FLAG_bm ) {
 102c832:	2f00      	cmp	r7, #0
 102c834:	d0f5      	beq.n	102c822 <TOU_APP_vTask+0xc2>
				if ( tou.day_tier_switches[i].summ_switch_flag == 1 ) {
 102c836:	f893 e005 	ldrb.w	lr, [r3, #5]
 102c83a:	f1be 0f01 	cmp.w	lr, #1
 102c83e:	d1ea      	bne.n	102c816 <TOU_APP_vTask+0xb6>
					if ( rtc->timestamp >= tou.day_tier_switches[i].tier_switch ) {
 102c840:	4282      	cmp	r2, r0
 102c842:	d8ee      	bhi.n	102c822 <TOU_APP_vTask+0xc2>
						tier_sum = tou.day_tier_switches[i].tier_id;
 102c844:	791d      	ldrb	r5, [r3, #4]
				if ( tou.day_tier_switches[i].demand_switch_flag == 1 ) {
 102c846:	799a      	ldrb	r2, [r3, #6]
 102c848:	2a01      	cmp	r2, #1
 102c84a:	bf08      	it	eq
 102c84c:	462e      	moveq	r6, r5
 102c84e:	e7e8      	b.n	102c822 <TOU_APP_vTask+0xc2>
	if (rtc->is_time_relative == 0) {
 102c850:	f89d 4022 	ldrb.w	r4, [sp, #34]	; 0x22
 102c854:	2c00      	cmp	r4, #0
 102c856:	f040 8126 	bne.w	102caa6 <TOU_APP_vTask+0x346>
		if ( (rtc->timestamp < tou.year_season_switches[0].season_switch) || (rtc->timestamp >= tou.year_season_switches[tou.nbr_year_seasons - 1].season_switch) ) {
 102c85a:	980a      	ldr	r0, [sp, #40]	; 0x28
 102c85c:	f8d9 2044 	ldr.w	r2, [r9, #68]	; 0x44
 102c860:	4290      	cmp	r0, r2
 102c862:	f0c0 81d4 	bcc.w	102cc0e <TOU_APP_vTask+0x4ae>
 102c866:	f899 103c 	ldrb.w	r1, [r9, #60]	; 0x3c
 102c86a:	eb09 05c1 	add.w	r5, r9, r1, lsl #3
 102c86e:	1e4b      	subs	r3, r1, #1
 102c870:	6bed      	ldr	r5, [r5, #60]	; 0x3c
 102c872:	42a8      	cmp	r0, r5
 102c874:	f080 81ce 	bcs.w	102cc14 <TOU_APP_vTask+0x4b4>
			for ( i = 0; i < tou.nbr_year_seasons; i++ ) {
 102c878:	b179      	cbz	r1, 102c89a <TOU_APP_vTask+0x13a>
 102c87a:	b2d9      	uxtb	r1, r3
 102c87c:	3101      	adds	r1, #1
 102c87e:	eb09 01c1 	add.w	r1, r9, r1, lsl #3
 102c882:	4b6f      	ldr	r3, [pc, #444]	; (102ca40 <TOU_APP_vTask+0x2e0>)
 102c884:	9d04      	ldr	r5, [sp, #16]
 102c886:	e000      	b.n	102c88a <TOU_APP_vTask+0x12a>
 102c888:	6c5a      	ldr	r2, [r3, #68]	; 0x44
				if ( rtc->timestamp >= tou.year_season_switches[i].season_switch ) {
 102c88a:	4290      	cmp	r0, r2
					season = tou.year_season_switches[i].season_id;
 102c88c:	bf28      	it	cs
 102c88e:	f893 5040 	ldrbcs.w	r5, [r3, #64]	; 0x40
 102c892:	3308      	adds	r3, #8
			for ( i = 0; i < tou.nbr_year_seasons; i++ ) {
 102c894:	4299      	cmp	r1, r3
 102c896:	d1f7      	bne.n	102c888 <TOU_APP_vTask+0x128>
 102c898:	9504      	str	r5, [sp, #16]
		if ( (uint8_t)season != tou.curr_season ) {
 102c89a:	f899 30b8 	ldrb.w	r3, [r9, #184]	; 0xb8
 102c89e:	9e04      	ldr	r6, [sp, #16]
 102c8a0:	42b3      	cmp	r3, r6
 102c8a2:	f000 8359 	beq.w	102cf58 <TOU_APP_vTask+0x7f8>
			tou.pending_season_change = 1;
 102c8a6:	2501      	movs	r5, #1
	EEPROM_writer(TOU_LAST_SEASON_ADDR, &tou.curr_season, 1);
 102c8a8:	462a      	mov	r2, r5
 102c8aa:	4966      	ldr	r1, [pc, #408]	; (102ca44 <TOU_APP_vTask+0x2e4>)
 102c8ac:	4b66      	ldr	r3, [pc, #408]	; (102ca48 <TOU_APP_vTask+0x2e8>)
			tou.pending_season_change = 1;
 102c8ae:	f889 50be 	strb.w	r5, [r9, #190]	; 0xbe
	EEPROM_writer(TOU_LAST_SEASON_ADDR, &tou.curr_season, 1);
 102c8b2:	f249 20bb 	movw	r0, #37563	; 0x92bb
 102c8b6:	4798      	blx	r3
			EVNT_APP_vRegister_event(SEASON_CHANGES, season, true, END_DEVICE, rtc->utc_timestamp);
 102c8b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 102c8ba:	9300      	str	r3, [sp, #0]
 102c8bc:	462a      	mov	r2, r5
 102c8be:	2300      	movs	r3, #0
 102c8c0:	b2b1      	uxth	r1, r6
 102c8c2:	2018      	movs	r0, #24
 102c8c4:	4d61      	ldr	r5, [pc, #388]	; (102ca4c <TOU_APP_vTask+0x2ec>)
			tou.curr_season = (uint8_t)season;
 102c8c6:	f889 60b8 	strb.w	r6, [r9, #184]	; 0xb8
			EVNT_APP_vRegister_event(SEASON_CHANGES, season, true, END_DEVICE, rtc->utc_timestamp);
 102c8ca:	47a8      	blx	r5
 102c8cc:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
	uint8_t calendar_action = 0;
 102c8d0:	2200      	movs	r2, #0
 102c8d2:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
	if (rtc->is_time_relative == 0) {	
 102c8d6:	2b00      	cmp	r3, #0
 102c8d8:	f040 83df 	bne.w	102d09a <TOU_APP_vTask+0x93a>
		if ( (rtc->htime.year >= 1990) && ( rtc->htime.year <= 2089) ) {
 102c8dc:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 102c8e0:	f2a3 72c6 	subw	r2, r3, #1990	; 0x7c6
 102c8e4:	b292      	uxth	r2, r2
 102c8e6:	2a63      	cmp	r2, #99	; 0x63
 102c8e8:	f200 82e2 	bhi.w	102ceb0 <TOU_APP_vTask+0x750>
			for ( i = 0; i < st_51.nbr_non_recurr_dates; i++) {
 102c8ec:	f8df 8178 	ldr.w	r8, [pc, #376]	; 102ca68 <TOU_APP_vTask+0x308>
 102c8f0:	4d57      	ldr	r5, [pc, #348]	; (102ca50 <TOU_APP_vTask+0x2f0>)
 102c8f2:	f898 2003 	ldrb.w	r2, [r8, #3]
 102c8f6:	2300      	movs	r3, #0
 102c8f8:	702b      	strb	r3, [r5, #0]
 102c8fa:	2a00      	cmp	r2, #0
 102c8fc:	f000 8290 	beq.w	102ce20 <TOU_APP_vTask+0x6c0>
 102c900:	f8df b168 	ldr.w	fp, [pc, #360]	; 102ca6c <TOU_APP_vTask+0x30c>
 102c904:	4a53      	ldr	r2, [pc, #332]	; (102ca54 <TOU_APP_vTask+0x2f4>)
				EEPROM_reader( ST_54_NON_RECURR_DATES_ADDR + 3*i, &st_54_date, 2 );
 102c906:	9403      	str	r4, [sp, #12]
 102c908:	4f53      	ldr	r7, [pc, #332]	; (102ca58 <TOU_APP_vTask+0x2f8>)
 102c90a:	4e54      	ldr	r6, [pc, #336]	; (102ca5c <TOU_APP_vTask+0x2fc>)
 102c90c:	465c      	mov	r4, fp
 102c90e:	4693      	mov	fp, r2
 102c910:	e008      	b.n	102c924 <TOU_APP_vTask+0x1c4>
			for ( i = 0; i < st_51.nbr_non_recurr_dates; i++) {
 102c912:	782b      	ldrb	r3, [r5, #0]
 102c914:	f898 2003 	ldrb.w	r2, [r8, #3]
 102c918:	3301      	adds	r3, #1
 102c91a:	b2db      	uxtb	r3, r3
 102c91c:	429a      	cmp	r2, r3
 102c91e:	702b      	strb	r3, [r5, #0]
 102c920:	f240 827d 	bls.w	102ce1e <TOU_APP_vTask+0x6be>
				EEPROM_reader( ST_54_NON_RECURR_DATES_ADDR + 3*i, &st_54_date, 2 );
 102c924:	2203      	movs	r2, #3
 102c926:	f640 2091 	movw	r0, #2705	; 0xa91
 102c92a:	fb02 0003 	mla	r0, r2, r3, r0
 102c92e:	494a      	ldr	r1, [pc, #296]	; (102ca58 <TOU_APP_vTask+0x2f8>)
 102c930:	2202      	movs	r2, #2
 102c932:	47a0      	blx	r4
				TOU_APP_vLoad_st_54_date_to_human_date(&date_found, rtc, st_54_date, false);
 102c934:	2300      	movs	r3, #0
 102c936:	883a      	ldrh	r2, [r7, #0]
 102c938:	4848      	ldr	r0, [pc, #288]	; (102ca5c <TOU_APP_vTask+0x2fc>)
 102c93a:	a908      	add	r1, sp, #32
 102c93c:	47d8      	blx	fp
				if ( (date_found.year == rtc->htime.year) && (date_found.month == rtc->htime.month) && (date_found.day == rtc->htime.day) ) {
 102c93e:	8832      	ldrh	r2, [r6, #0]
 102c940:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 102c944:	429a      	cmp	r2, r3
 102c946:	d1e4      	bne.n	102c912 <TOU_APP_vTask+0x1b2>
 102c948:	8872      	ldrh	r2, [r6, #2]
 102c94a:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 102c94e:	429a      	cmp	r2, r3
 102c950:	d1df      	bne.n	102c912 <TOU_APP_vTask+0x1b2>
					EEPROM_reader( ST_54_NON_RECURR_DATES_ADDR + 3*i + 2, &calendar_action, 1 );
 102c952:	7828      	ldrb	r0, [r5, #0]
 102c954:	f640 2393 	movw	r3, #2707	; 0xa93
 102c958:	2203      	movs	r2, #3
 102c95a:	fb02 3000 	mla	r0, r2, r0, r3
 102c95e:	a913      	add	r1, sp, #76	; 0x4c
 102c960:	2201      	movs	r2, #1
 102c962:	47a0      	blx	r4
 102c964:	e7d5      	b.n	102c912 <TOU_APP_vTask+0x1b2>
	if (rtc.is_time_relative == 0) {
 102c966:	f89a 5002 	ldrb.w	r5, [sl, #2]
	tou.nbr_year_seasons = 0;
 102c96a:	2200      	movs	r2, #0
 102c96c:	f889 203c 	strb.w	r2, [r9, #60]	; 0x3c
	if (rtc.is_time_relative == 0) {
 102c970:	2d00      	cmp	r5, #0
 102c972:	f47f af21 	bne.w	102c7b8 <TOU_APP_vTask+0x58>
		for ( i = 0; i < st_51.nbr_recurr_dates; i++) {
 102c976:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 102ca68 <TOU_APP_vTask+0x308>
 102c97a:	f898 2004 	ldrb.w	r2, [r8, #4]
 102c97e:	2a00      	cmp	r2, #0
 102c980:	f000 8379 	beq.w	102d076 <TOU_APP_vTask+0x916>
 102c984:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 102ca6c <TOU_APP_vTask+0x30c>
 102c988:	f10d 061d 	add.w	r6, sp, #29
 102c98c:	465f      	mov	r7, fp
 102c98e:	9603      	str	r6, [sp, #12]
 102c990:	e006      	b.n	102c9a0 <TOU_APP_vTask+0x240>
 102c992:	3501      	adds	r5, #1
 102c994:	f898 3004 	ldrb.w	r3, [r8, #4]
 102c998:	b2ed      	uxtb	r5, r5
 102c99a:	42ab      	cmp	r3, r5
 102c99c:	f240 80cd 	bls.w	102cb3a <TOU_APP_vTask+0x3da>
			EEPROM_reader( ST_54_RECURR_DATES_ADDR + 3*i + 2, &calendar_action, 1 );
 102c9a0:	eb05 0b45 	add.w	fp, r5, r5, lsl #1
 102c9a4:	f60b 3029 	addw	r0, fp, #2857	; 0xb29
 102c9a8:	2201      	movs	r2, #1
 102c9aa:	9903      	ldr	r1, [sp, #12]
 102c9ac:	47b8      	blx	r7
			calendar_ctrl = (calendar_action & CALENDAR_CTRL_bm) >> CALENDAR_CTRL_bp;
 102c9ae:	f89d 401d 	ldrb.w	r4, [sp, #29]
 102c9b2:	f004 041f 	and.w	r4, r4, #31
			if ( (calendar_ctrl >= SELECT_SEASON_0) && (calendar_ctrl <= SELECT_SEASON_15) ) {
 102c9b6:	3c03      	subs	r4, #3
 102c9b8:	b2e4      	uxtb	r4, r4
 102c9ba:	2c0f      	cmp	r4, #15
 102c9bc:	d8e9      	bhi.n	102c992 <TOU_APP_vTask+0x232>
				EEPROM_reader( ST_54_RECURR_DATES_ADDR + 3*i, &season_date, 2 );
 102c9be:	f60b 3027 	addw	r0, fp, #2855	; 0xb27
 102c9c2:	2202      	movs	r2, #2
 102c9c4:	f10d 011e 	add.w	r1, sp, #30
 102c9c8:	47b8      	blx	r7
				TOU_APP_vLoad_st_54_date_to_human_date(&date, &rtc, season_date, true);
 102c9ca:	4e22      	ldr	r6, [pc, #136]	; (102ca54 <TOU_APP_vTask+0x2f4>)
 102c9cc:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 102c9d0:	4923      	ldr	r1, [pc, #140]	; (102ca60 <TOU_APP_vTask+0x300>)
 102c9d2:	a813      	add	r0, sp, #76	; 0x4c
 102c9d4:	2301      	movs	r3, #1
 102c9d6:	47b0      	blx	r6
				tou.year_season_switches[tou.nbr_year_seasons].season_id = calendar_ctrl - 3; 
 102c9d8:	f899 b03c 	ldrb.w	fp, [r9, #60]	; 0x3c
				tou.year_season_switches[tou.nbr_year_seasons].season_switch = RTC_APP_ulMake_timestamp(&date);
 102c9dc:	4b21      	ldr	r3, [pc, #132]	; (102ca64 <TOU_APP_vTask+0x304>)
				tou.year_season_switches[tou.nbr_year_seasons].season_id = calendar_ctrl - 3; 
 102c9de:	f10b 0b08 	add.w	fp, fp, #8
				tou.year_season_switches[tou.nbr_year_seasons].season_switch = RTC_APP_ulMake_timestamp(&date);
 102c9e2:	a813      	add	r0, sp, #76	; 0x4c
				tou.year_season_switches[tou.nbr_year_seasons].season_id = calendar_ctrl - 3; 
 102c9e4:	f809 403b 	strb.w	r4, [r9, fp, lsl #3]
				tou.year_season_switches[tou.nbr_year_seasons].season_switch = RTC_APP_ulMake_timestamp(&date);
 102c9e8:	4798      	blx	r3
				tou.nbr_year_seasons++;
 102c9ea:	f899 303c 	ldrb.w	r3, [r9, #60]	; 0x3c
				tou.year_season_switches[tou.nbr_year_seasons].season_switch = RTC_APP_ulMake_timestamp(&date);
 102c9ee:	eb09 0bcb 	add.w	fp, r9, fp, lsl #3
				tou.nbr_year_seasons++;
 102c9f2:	3301      	adds	r3, #1
				tou.year_season_switches[tou.nbr_year_seasons].season_switch = RTC_APP_ulMake_timestamp(&date);
 102c9f4:	f8cb 0004 	str.w	r0, [fp, #4]
				tou.nbr_year_seasons++;
 102c9f8:	f889 303c 	strb.w	r3, [r9, #60]	; 0x3c
 102c9fc:	e7c9      	b.n	102c992 <TOU_APP_vTask+0x232>
				EVNT_APP_vRegister_event(DAYLIGHT_SAVINGS_TIME_OFF, 0, true, tou_os.user, tou_os.event_timestamp);
 102c9fe:	4a0f      	ldr	r2, [pc, #60]	; (102ca3c <TOU_APP_vTask+0x2dc>)
				tou_os.register_dst_off = false;
 102ca00:	4e0e      	ldr	r6, [pc, #56]	; (102ca3c <TOU_APP_vTask+0x2dc>)
				EVNT_APP_vRegister_event(DAYLIGHT_SAVINGS_TIME_OFF, 0, true, tou_os.user, tou_os.event_timestamp);
 102ca02:	4b0e      	ldr	r3, [pc, #56]	; (102ca3c <TOU_APP_vTask+0x2dc>)
 102ca04:	6892      	ldr	r2, [r2, #8]
 102ca06:	7b1b      	ldrb	r3, [r3, #12]
 102ca08:	4d10      	ldr	r5, [pc, #64]	; (102ca4c <TOU_APP_vTask+0x2ec>)
 102ca0a:	9200      	str	r2, [sp, #0]
				tou_os.register_dst_off = false;
 102ca0c:	2400      	movs	r4, #0
				EVNT_APP_vRegister_event(DAYLIGHT_SAVINGS_TIME_OFF, 0, true, tou_os.user, tou_os.event_timestamp);
 102ca0e:	4621      	mov	r1, r4
 102ca10:	2201      	movs	r2, #1
 102ca12:	2017      	movs	r0, #23
				tou_os.register_dst_off = false;
 102ca14:	71f4      	strb	r4, [r6, #7]
				EVNT_APP_vRegister_event(DAYLIGHT_SAVINGS_TIME_OFF, 0, true, tou_os.user, tou_os.event_timestamp);
 102ca16:	47a8      	blx	r5
 102ca18:	e6c7      	b.n	102c7aa <TOU_APP_vTask+0x4a>
				EVNT_APP_vRegister_event(DAYLIGHT_SAVINGS_TIME_ON, 0, true, tou_os.user, tou_os.event_timestamp);
 102ca1a:	4a08      	ldr	r2, [pc, #32]	; (102ca3c <TOU_APP_vTask+0x2dc>)
				tou_os.register_dst_on = false;
 102ca1c:	4d07      	ldr	r5, [pc, #28]	; (102ca3c <TOU_APP_vTask+0x2dc>)
				EVNT_APP_vRegister_event(DAYLIGHT_SAVINGS_TIME_ON, 0, true, tou_os.user, tou_os.event_timestamp);
 102ca1e:	4b07      	ldr	r3, [pc, #28]	; (102ca3c <TOU_APP_vTask+0x2dc>)
 102ca20:	6892      	ldr	r2, [r2, #8]
 102ca22:	7b1b      	ldrb	r3, [r3, #12]
 102ca24:	4c09      	ldr	r4, [pc, #36]	; (102ca4c <TOU_APP_vTask+0x2ec>)
 102ca26:	9200      	str	r2, [sp, #0]
 102ca28:	4631      	mov	r1, r6
 102ca2a:	2201      	movs	r2, #1
 102ca2c:	2016      	movs	r0, #22
				tou_os.register_dst_on = false;
 102ca2e:	71ae      	strb	r6, [r5, #6]
				EVNT_APP_vRegister_event(DAYLIGHT_SAVINGS_TIME_ON, 0, true, tou_os.user, tou_os.event_timestamp);
 102ca30:	47a0      	blx	r4
 102ca32:	e6b5      	b.n	102c7a0 <TOU_APP_vTask+0x40>
 102ca34:	20016c2c 	.word	0x20016c2c
 102ca38:	0102c301 	.word	0x0102c301
 102ca3c:	200172b4 	.word	0x200172b4
 102ca40:	20008208 	.word	0x20008208
 102ca44:	200082c0 	.word	0x200082c0
 102ca48:	01017509 	.word	0x01017509
 102ca4c:	01019961 	.word	0x01019961
 102ca50:	200081f4 	.word	0x200081f4
 102ca54:	0102c5cd 	.word	0x0102c5cd
 102ca58:	20008202 	.word	0x20008202
 102ca5c:	200081e4 	.word	0x200081e4
 102ca60:	20017160 	.word	0x20017160
 102ca64:	0102a26d 	.word	0x0102a26d
 102ca68:	200081f8 	.word	0x200081f8
 102ca6c:	01017511 	.word	0x01017511
				REGS_APP_vCopy_st_23();
 102ca70:	4bbc      	ldr	r3, [pc, #752]	; (102cd64 <TOU_APP_vTask+0x604>)
 102ca72:	4798      	blx	r3
				if (tou.pending_season_change == 1) {
 102ca74:	f899 20be 	ldrb.w	r2, [r9, #190]	; 0xbe
 102ca78:	2a01      	cmp	r2, #1
 102ca7a:	f000 82ed 	beq.w	102d058 <TOU_APP_vTask+0x8f8>
				if (tou.pending_demand_reset == 1) {
 102ca7e:	f899 30bf 	ldrb.w	r3, [r9, #191]	; 0xbf
 102ca82:	2b01      	cmp	r3, #1
 102ca84:	f000 82de 	beq.w	102d044 <TOU_APP_vTask+0x8e4>
				if (tou.pending_self_read == 1) {
 102ca88:	f899 30c0 	ldrb.w	r3, [r9, #192]	; 0xc0
 102ca8c:	2b01      	cmp	r3, #1
 102ca8e:	f47f aea2 	bne.w	102c7d6 <TOU_APP_vTask+0x76>
					tou.pending_self_read = 0;					
 102ca92:	2300      	movs	r3, #0
					REGS_APP_vSelf_read(END_DEVICE, tou.curr_season, tou_rtc.utc_timestamp);
 102ca94:	4618      	mov	r0, r3
 102ca96:	f899 10b8 	ldrb.w	r1, [r9, #184]	; 0xb8
 102ca9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 102ca9c:	4cb2      	ldr	r4, [pc, #712]	; (102cd68 <TOU_APP_vTask+0x608>)
					tou.pending_self_read = 0;					
 102ca9e:	f889 30c0 	strb.w	r3, [r9, #192]	; 0xc0
					REGS_APP_vSelf_read(END_DEVICE, tou.curr_season, tou_rtc.utc_timestamp);
 102caa2:	47a0      	blx	r4
 102caa4:	e697      	b.n	102c7d6 <TOU_APP_vTask+0x76>
	uint8_t special_sched_active = NO_SPECIAL_SCHED_ACTIVE;
 102caa6:	230f      	movs	r3, #15
 102caa8:	9303      	str	r3, [sp, #12]
	if ( (uint8_t)sched_id != tou.curr_special_sched_active ) {
 102caaa:	f899 30bd 	ldrb.w	r3, [r9, #189]	; 0xbd
 102caae:	9d03      	ldr	r5, [sp, #12]
 102cab0:	42ab      	cmp	r3, r5
 102cab2:	d009      	beq.n	102cac8 <TOU_APP_vTask+0x368>
		EVNT_APP_vRegister_event(SPECIAL_SCHEDULE_ACTIVATION, (uint16_t)sched_id, true, user, rtc->utc_timestamp);
 102cab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 102cab6:	9300      	str	r3, [sp, #0]
 102cab8:	b2a9      	uxth	r1, r5
 102caba:	2300      	movs	r3, #0
 102cabc:	2201      	movs	r2, #1
 102cabe:	201a      	movs	r0, #26
 102cac0:	4caa      	ldr	r4, [pc, #680]	; (102cd6c <TOU_APP_vTask+0x60c>)
		tou.curr_special_sched_active = (uint8_t)sched_id;
 102cac2:	f889 50bd 	strb.w	r5, [r9, #189]	; 0xbd
		EVNT_APP_vRegister_event(SPECIAL_SCHEDULE_ACTIVATION, (uint16_t)sched_id, true, user, rtc->utc_timestamp);
 102cac6:	47a0      	blx	r4
	if (rtc.is_time_relative == 0) {
 102cac8:	f89a 4002 	ldrb.w	r4, [sl, #2]
 102cacc:	2c00      	cmp	r4, #0
 102cace:	f000 80aa 	beq.w	102cc26 <TOU_APP_vTask+0x4c6>
 102cad2:	4ba7      	ldr	r3, [pc, #668]	; (102cd70 <TOU_APP_vTask+0x610>)
 102cad4:	795b      	ldrb	r3, [r3, #5]
 102cad6:	e671      	b.n	102c7bc <TOU_APP_vTask+0x5c>
		for ( i = 0; i < tou.nbr_day_tiers; i++ ) {
 102cad8:	462e      	mov	r6, r5
 102cada:	462c      	mov	r4, r5
	if ( (uint8_t)tier != tou.curr_tier ) {
 102cadc:	f899 30ba 	ldrb.w	r3, [r9, #186]	; 0xba
 102cae0:	42a3      	cmp	r3, r4
 102cae2:	d00b      	beq.n	102cafc <TOU_APP_vTask+0x39c>
		REGS_APP_vReset_present_demand();		
 102cae4:	4ba3      	ldr	r3, [pc, #652]	; (102cd74 <TOU_APP_vTask+0x614>)
		EVNT_APP_vRegister_event(RATE_CHANGE, (uint16_t)tier, true, user_attempt, rtc->utc_timestamp);
 102cae6:	4fa1      	ldr	r7, [pc, #644]	; (102cd6c <TOU_APP_vTask+0x60c>)
		REGS_APP_vReset_present_demand();		
 102cae8:	4798      	blx	r3
		EVNT_APP_vRegister_event(RATE_CHANGE, (uint16_t)tier, true, user_attempt, rtc->utc_timestamp);
 102caea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 102caec:	9300      	str	r3, [sp, #0]
 102caee:	4621      	mov	r1, r4
 102caf0:	2300      	movs	r3, #0
 102caf2:	2201      	movs	r2, #1
 102caf4:	2019      	movs	r0, #25
		tou.curr_tier = (uint8_t)tier;
 102caf6:	f889 40ba 	strb.w	r4, [r9, #186]	; 0xba
		EVNT_APP_vRegister_event(RATE_CHANGE, (uint16_t)tier, true, user_attempt, rtc->utc_timestamp);
 102cafa:	47b8      	blx	r7
	if ( (st_51.time_func_flag2 & SEPARATE_SUM_DEMANDS_FLAG_bm) == SEPARATE_SUM_DEMANDS_FLAG_bm ) {
 102cafc:	f898 3001 	ldrb.w	r3, [r8, #1]
 102cb00:	075b      	lsls	r3, r3, #29
 102cb02:	f57f ae5d 	bpl.w	102c7c0 <TOU_APP_vTask+0x60>
		if ( ( (uint8_t)tier_sum != tou.curr_tier_sum ) || ( (uint8_t)tier_dem != tou.curr_tier_dem ) ) {
 102cb06:	f899 30bb 	ldrb.w	r3, [r9, #187]	; 0xbb
 102cb0a:	42ab      	cmp	r3, r5
 102cb0c:	f899 30bc 	ldrb.w	r3, [r9, #188]	; 0xbc
 102cb10:	f000 8233 	beq.w	102cf7a <TOU_APP_vTask+0x81a>
			if ((uint8_t)tier_sum != tou.curr_tier_dem) {
 102cb14:	429d      	cmp	r5, r3
 102cb16:	d001      	beq.n	102cb1c <TOU_APP_vTask+0x3bc>
				REGS_APP_vReset_present_demand();
 102cb18:	4b96      	ldr	r3, [pc, #600]	; (102cd74 <TOU_APP_vTask+0x614>)
 102cb1a:	4798      	blx	r3
			EVNT_APP_vRegister_event(TIER_SWITCH_CHANGE, (uint16_t)( (tou.curr_tier_sum << 0)|(tou.curr_tier_dem << 8) ), true, user_attempt, rtc->utc_timestamp);
 102cb1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 102cb1e:	9300      	str	r3, [sp, #0]
 102cb20:	ea45 2106 	orr.w	r1, r5, r6, lsl #8
 102cb24:	b289      	uxth	r1, r1
 102cb26:	2300      	movs	r3, #0
 102cb28:	2201      	movs	r2, #1
 102cb2a:	201b      	movs	r0, #27
			tou.curr_tier_sum = (uint8_t)tier_sum;
 102cb2c:	f889 50bb 	strb.w	r5, [r9, #187]	; 0xbb
			EVNT_APP_vRegister_event(TIER_SWITCH_CHANGE, (uint16_t)( (tou.curr_tier_sum << 0)|(tou.curr_tier_dem << 8) ), true, user_attempt, rtc->utc_timestamp);
 102cb30:	4c8e      	ldr	r4, [pc, #568]	; (102cd6c <TOU_APP_vTask+0x60c>)
			tou.curr_tier_dem = (uint8_t)tier_dem;
 102cb32:	f889 60bc 	strb.w	r6, [r9, #188]	; 0xbc
			EVNT_APP_vRegister_event(TIER_SWITCH_CHANGE, (uint16_t)( (tou.curr_tier_sum << 0)|(tou.curr_tier_dem << 8) ), true, user_attempt, rtc->utc_timestamp);
 102cb36:	47a0      	blx	r4
 102cb38:	e642      	b.n	102c7c0 <TOU_APP_vTask+0x60>
		for ( i = 0; i < st_51.nbr_non_recurr_dates; i++) {
 102cb3a:	f898 3003 	ldrb.w	r3, [r8, #3]
 102cb3e:	9e03      	ldr	r6, [sp, #12]
 102cb40:	46bb      	mov	fp, r7
 102cb42:	2b00      	cmp	r3, #0
 102cb44:	d038      	beq.n	102cbb8 <TOU_APP_vTask+0x458>
		for ( i = 0; i < st_51.nbr_recurr_dates; i++) {
 102cb46:	2500      	movs	r5, #0
 102cb48:	465f      	mov	r7, fp
 102cb4a:	9603      	str	r6, [sp, #12]
 102cb4c:	e005      	b.n	102cb5a <TOU_APP_vTask+0x3fa>
		for ( i = 0; i < st_51.nbr_non_recurr_dates; i++) {
 102cb4e:	3501      	adds	r5, #1
 102cb50:	f898 3003 	ldrb.w	r3, [r8, #3]
 102cb54:	b2ed      	uxtb	r5, r5
 102cb56:	42ab      	cmp	r3, r5
 102cb58:	d92e      	bls.n	102cbb8 <TOU_APP_vTask+0x458>
			EEPROM_reader( ST_54_NON_RECURR_DATES_ADDR + 3*i + 2, &calendar_action, 1 );
 102cb5a:	eb05 0b45 	add.w	fp, r5, r5, lsl #1
 102cb5e:	f60b 2093 	addw	r0, fp, #2707	; 0xa93
 102cb62:	2201      	movs	r2, #1
 102cb64:	9903      	ldr	r1, [sp, #12]
 102cb66:	47b8      	blx	r7
			calendar_ctrl = (calendar_action & CALENDAR_CTRL_bm) >> CALENDAR_CTRL_bp;
 102cb68:	f89d 401d 	ldrb.w	r4, [sp, #29]
 102cb6c:	f004 041f 	and.w	r4, r4, #31
			if ( (calendar_ctrl >= SELECT_SEASON_0) && (calendar_ctrl <= SELECT_SEASON_15) ) {
 102cb70:	3c03      	subs	r4, #3
 102cb72:	b2e4      	uxtb	r4, r4
 102cb74:	2c0f      	cmp	r4, #15
 102cb76:	d8ea      	bhi.n	102cb4e <TOU_APP_vTask+0x3ee>
				EEPROM_reader( ST_54_NON_RECURR_DATES_ADDR + 3*i, &season_date, 2 );
 102cb78:	f60b 2091 	addw	r0, fp, #2705	; 0xa91
 102cb7c:	2202      	movs	r2, #2
 102cb7e:	f10d 011e 	add.w	r1, sp, #30
 102cb82:	47b8      	blx	r7
				TOU_APP_vLoad_st_54_date_to_human_date(&date, &rtc, season_date, false);
 102cb84:	4e7c      	ldr	r6, [pc, #496]	; (102cd78 <TOU_APP_vTask+0x618>)
 102cb86:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 102cb8a:	497c      	ldr	r1, [pc, #496]	; (102cd7c <TOU_APP_vTask+0x61c>)
 102cb8c:	a813      	add	r0, sp, #76	; 0x4c
 102cb8e:	2300      	movs	r3, #0
 102cb90:	47b0      	blx	r6
				tou.year_season_switches[tou.nbr_year_seasons].season_id = calendar_ctrl - 3; 
 102cb92:	f899 b03c 	ldrb.w	fp, [r9, #60]	; 0x3c
				tou.year_season_switches[tou.nbr_year_seasons].season_switch = RTC_APP_ulMake_timestamp(&date);
 102cb96:	4b7a      	ldr	r3, [pc, #488]	; (102cd80 <TOU_APP_vTask+0x620>)
				tou.year_season_switches[tou.nbr_year_seasons].season_id = calendar_ctrl - 3; 
 102cb98:	f10b 0b08 	add.w	fp, fp, #8
				tou.year_season_switches[tou.nbr_year_seasons].season_switch = RTC_APP_ulMake_timestamp(&date);
 102cb9c:	a813      	add	r0, sp, #76	; 0x4c
				tou.year_season_switches[tou.nbr_year_seasons].season_id = calendar_ctrl - 3; 
 102cb9e:	f809 403b 	strb.w	r4, [r9, fp, lsl #3]
				tou.year_season_switches[tou.nbr_year_seasons].season_switch = RTC_APP_ulMake_timestamp(&date);
 102cba2:	4798      	blx	r3
				tou.nbr_year_seasons++;
 102cba4:	f899 303c 	ldrb.w	r3, [r9, #60]	; 0x3c
				tou.year_season_switches[tou.nbr_year_seasons].season_switch = RTC_APP_ulMake_timestamp(&date);
 102cba8:	eb09 0bcb 	add.w	fp, r9, fp, lsl #3
				tou.nbr_year_seasons++;
 102cbac:	3301      	adds	r3, #1
				tou.year_season_switches[tou.nbr_year_seasons].season_switch = RTC_APP_ulMake_timestamp(&date);
 102cbae:	f8cb 0004 	str.w	r0, [fp, #4]
				tou.nbr_year_seasons++;
 102cbb2:	f889 303c 	strb.w	r3, [r9, #60]	; 0x3c
 102cbb6:	e7ca      	b.n	102cb4e <TOU_APP_vTask+0x3ee>
		for (i = 0; i < tou.nbr_year_seasons; i++) {
 102cbb8:	f899 303c 	ldrb.w	r3, [r9, #60]	; 0x3c
 102cbbc:	2700      	movs	r7, #0
 102cbbe:	b31b      	cbz	r3, 102cc08 <TOU_APP_vTask+0x4a8>
					aux = tou.year_season_switches[i];
 102cbc0:	f107 0608 	add.w	r6, r7, #8
 102cbc4:	eb09 06c6 	add.w	r6, r9, r6, lsl #3
				if (tou.year_season_switches[i].season_switch < tou.year_season_switches[j].season_switch) {
 102cbc8:	4635      	mov	r5, r6
					aux = tou.year_season_switches[i];
 102cbca:	2300      	movs	r3, #0
				if (tou.year_season_switches[i].season_switch < tou.year_season_switches[j].season_switch) {
 102cbcc:	f103 0408 	add.w	r4, r3, #8
 102cbd0:	eb09 02c4 	add.w	r2, r9, r4, lsl #3
 102cbd4:	6868      	ldr	r0, [r5, #4]
 102cbd6:	6851      	ldr	r1, [r2, #4]
			for (j = 0; j < tou.nbr_year_seasons; j++) {
 102cbd8:	3301      	adds	r3, #1
				if (tou.year_season_switches[i].season_switch < tou.year_season_switches[j].season_switch) {
 102cbda:	4288      	cmp	r0, r1
			for (j = 0; j < tou.nbr_year_seasons; j++) {
 102cbdc:	b2db      	uxtb	r3, r3
				if (tou.year_season_switches[i].season_switch < tou.year_season_switches[j].season_switch) {
 102cbde:	d20b      	bcs.n	102cbf8 <TOU_APP_vTask+0x498>
					tou.year_season_switches[i] = tou.year_season_switches[j];
 102cbe0:	e892 0003 	ldmia.w	r2, {r0, r1}
					aux = tou.year_season_switches[i];
 102cbe4:	f896 c000 	ldrb.w	ip, [r6]
 102cbe8:	f8d6 e004 	ldr.w	lr, [r6, #4]
					tou.year_season_switches[i] = tou.year_season_switches[j];
 102cbec:	e885 0003 	stmia.w	r5, {r0, r1}
					tou.year_season_switches[j] = aux;
 102cbf0:	f809 c034 	strb.w	ip, [r9, r4, lsl #3]
 102cbf4:	f8c2 e004 	str.w	lr, [r2, #4]
			for (j = 0; j < tou.nbr_year_seasons; j++) {
 102cbf8:	f899 203c 	ldrb.w	r2, [r9, #60]	; 0x3c
 102cbfc:	4293      	cmp	r3, r2
 102cbfe:	d3e5      	bcc.n	102cbcc <TOU_APP_vTask+0x46c>
		for (i = 0; i < tou.nbr_year_seasons; i++) {
 102cc00:	3701      	adds	r7, #1
 102cc02:	b2ff      	uxtb	r7, r7
 102cc04:	42ba      	cmp	r2, r7
 102cc06:	d8db      	bhi.n	102cbc0 <TOU_APP_vTask+0x460>
 102cc08:	4b59      	ldr	r3, [pc, #356]	; (102cd70 <TOU_APP_vTask+0x610>)
 102cc0a:	795b      	ldrb	r3, [r3, #5]
 102cc0c:	e5d4      	b.n	102c7b8 <TOU_APP_vTask+0x58>
 102cc0e:	f899 303c 	ldrb.w	r3, [r9, #60]	; 0x3c
 102cc12:	3b01      	subs	r3, #1
			season = tou.year_season_switches[tou.nbr_year_seasons - 1].season_id;
 102cc14:	3308      	adds	r3, #8
 102cc16:	f819 3033 	ldrb.w	r3, [r9, r3, lsl #3]
 102cc1a:	9304      	str	r3, [sp, #16]
 102cc1c:	e63d      	b.n	102c89a <TOU_APP_vTask+0x13a>
					if ( rtc->timestamp >= tou.day_tier_switches[i].tier_switch ) {
 102cc1e:	4282      	cmp	r2, r0
 102cc20:	bf98      	it	ls
 102cc22:	791e      	ldrbls	r6, [r3, #4]
 102cc24:	e5fd      	b.n	102c822 <TOU_APP_vTask+0xc2>
		memset( &rtc_temp, 0, sizeof(rtc_temp) );
 102cc26:	222c      	movs	r2, #44	; 0x2c
 102cc28:	4621      	mov	r1, r4
 102cc2a:	4e56      	ldr	r6, [pc, #344]	; (102cd84 <TOU_APP_vTask+0x624>)
 102cc2c:	a813      	add	r0, sp, #76	; 0x4c
 102cc2e:	47b0      	blx	r6
		RTC_APP_vBreak_timestamp(&rtc_temp, rtc.timestamp);		
 102cc30:	f8da 1008 	ldr.w	r1, [sl, #8]
 102cc34:	4b54      	ldr	r3, [pc, #336]	; (102cd88 <TOU_APP_vTask+0x628>)
 102cc36:	a813      	add	r0, sp, #76	; 0x4c
 102cc38:	4798      	blx	r3
		timestamp = RTC_APP_ulMake_timestamp( &rtc_temp.htime );	
 102cc3a:	4b51      	ldr	r3, [pc, #324]	; (102cd80 <TOU_APP_vTask+0x620>)
		rtc_temp.htime.hour = 0;							
 102cc3c:	f88d 405c 	strb.w	r4, [sp, #92]	; 0x5c
		timestamp = RTC_APP_ulMake_timestamp( &rtc_temp.htime );	
 102cc40:	a816      	add	r0, sp, #88	; 0x58
		rtc_temp.htime.minute = 0;							
 102cc42:	f88d 405d 	strb.w	r4, [sp, #93]	; 0x5d
		rtc_temp.htime.second = 0;							
 102cc46:	f88d 405e 	strb.w	r4, [sp, #94]	; 0x5e
		timestamp = RTC_APP_ulMake_timestamp( &rtc_temp.htime );	
 102cc4a:	4798      	blx	r3
		memset( tou.day_tier_switches, 0, sizeof(tou.day_tier_switches) );
 102cc4c:	4621      	mov	r1, r4
		timestamp = RTC_APP_ulMake_timestamp( &rtc_temp.htime );	
 102cc4e:	4605      	mov	r5, r0
		memset( tou.day_tier_switches, 0, sizeof(tou.day_tier_switches) );
 102cc50:	2238      	movs	r2, #56	; 0x38
 102cc52:	484e      	ldr	r0, [pc, #312]	; (102cd8c <TOU_APP_vTask+0x62c>)
		tou.nbr_day_tiers = 0;
 102cc54:	f889 4000 	strb.w	r4, [r9]
		memset( tou.day_tier_switches, 0, sizeof(tou.day_tier_switches) );
 102cc58:	47b0      	blx	r6
		if ( tou.curr_special_sched_active == (uint8_t)(NO_SPECIAL_SCHED_ACTIVE) ) {
 102cc5a:	f899 30bd 	ldrb.w	r3, [r9, #189]	; 0xbd
 102cc5e:	2b0f      	cmp	r3, #15
 102cc60:	f040 817e 	bne.w	102cf60 <TOU_APP_vTask+0x800>
			switch ( rtc.day_of_week ) {
 102cc64:	f89a 3017 	ldrb.w	r3, [sl, #23]
 102cc68:	2b06      	cmp	r3, #6
 102cc6a:	d811      	bhi.n	102cc90 <TOU_APP_vTask+0x530>
 102cc6c:	e8df f003 	tbb	[pc, r3]
 102cc70:	6d6d6d60 	.word	0x6d6d6d60
 102cc74:	6d6d      	.short	0x6d6d
 102cc76:	04          	.byte	0x04
 102cc77:	00          	.byte	0x00
					EEPROM_reader( ST_54_DAILY_SCHEDULE_ID_MATRIX_ADDR + 5*(tou.curr_season) + 0, &tou.curr_day_sched, 1 );
 102cc78:	f899 20b8 	ldrb.w	r2, [r9, #184]	; 0xb8
 102cc7c:	4944      	ldr	r1, [pc, #272]	; (102cd90 <TOU_APP_vTask+0x630>)
 102cc7e:	f8df b114 	ldr.w	fp, [pc, #276]	; 102cd94 <TOU_APP_vTask+0x634>
 102cc82:	2005      	movs	r0, #5
 102cc84:	f640 438f 	movw	r3, #3215	; 0xc8f
 102cc88:	fb00 3002 	mla	r0, r0, r2, r3
 102cc8c:	2201      	movs	r2, #1
 102cc8e:	47d8      	blx	fp
		for ( i = 0; i < st_51.nbr_tier_switches; i++ ) {
 102cc90:	f8df 8104 	ldr.w	r8, [pc, #260]	; 102cd98 <TOU_APP_vTask+0x638>
 102cc94:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 102cc98:	2b00      	cmp	r3, #0
 102cc9a:	d07f      	beq.n	102cd9c <TOU_APP_vTask+0x63c>
 102cc9c:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 102cd94 <TOU_APP_vTask+0x634>
				EEPROM_reader( ST_54_TIER_SWITCHES_ADDR + 3*i + 0, &tier_switch, 2 );
 102cca0:	46aa      	mov	sl, r5
		for ( i = 0; i < st_51.nbr_tier_switches; i++ ) {
 102cca2:	2400      	movs	r4, #0
 102cca4:	f10d 061d 	add.w	r6, sp, #29
				EEPROM_reader( ST_54_TIER_SWITCHES_ADDR + 3*i + 0, &tier_switch, 2 );
 102cca8:	465d      	mov	r5, fp
 102ccaa:	e005      	b.n	102ccb8 <TOU_APP_vTask+0x558>
		for ( i = 0; i < st_51.nbr_tier_switches; i++ ) {
 102ccac:	3401      	adds	r4, #1
 102ccae:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 102ccb2:	b2a4      	uxth	r4, r4
 102ccb4:	42a3      	cmp	r3, r4
 102ccb6:	d971      	bls.n	102cd9c <TOU_APP_vTask+0x63c>
			EEPROM_reader( ST_54_TIER_SWITCHES_ADDR + 3*i + 2, &day_sch_num, 1 );
 102ccb8:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 102ccbc:	2201      	movs	r2, #1
 102ccbe:	f607 30a1 	addw	r0, r7, #2977	; 0xba1
 102ccc2:	4631      	mov	r1, r6
 102ccc4:	47a8      	blx	r5
			if ( tou.curr_day_sched == day_sch_num ) {
 102ccc6:	f899 20b9 	ldrb.w	r2, [r9, #185]	; 0xb9
 102ccca:	f89d 301d 	ldrb.w	r3, [sp, #29]
 102ccce:	429a      	cmp	r2, r3
 102ccd0:	d1ec      	bne.n	102ccac <TOU_APP_vTask+0x54c>
				EEPROM_reader( ST_54_TIER_SWITCHES_ADDR + 3*i + 0, &tier_switch, 2 );
 102ccd2:	f607 309f 	addw	r0, r7, #2975	; 0xb9f
 102ccd6:	2202      	movs	r2, #2
 102ccd8:	f10d 011e 	add.w	r1, sp, #30
 102ccdc:	47a8      	blx	r5
				tou.day_tier_switches[tou.nbr_day_tiers].tier_id = (tier_switch & NEW_TIER_bm) >> NEW_TIER_bp;
 102ccde:	f899 2000 	ldrb.w	r2, [r9]
 102cce2:	f8bd 101e 	ldrh.w	r1, [sp, #30]
				if ( (st_51.time_func_flag2 & SEPARATE_SUM_DEMANDS_FLAG_bm) == SEPARATE_SUM_DEMANDS_FLAG_bm ) {
 102cce6:	f898 7001 	ldrb.w	r7, [r8, #1]
				tou.day_tier_switches[tou.nbr_day_tiers].tier_id = (tier_switch & NEW_TIER_bm) >> NEW_TIER_bp;
 102ccea:	00d3      	lsls	r3, r2, #3
 102ccec:	eb09 0003 	add.w	r0, r9, r3
 102ccf0:	f001 0e07 	and.w	lr, r1, #7
				if ( (st_51.time_func_flag2 & SEPARATE_SUM_DEMANDS_FLAG_bm) == SEPARATE_SUM_DEMANDS_FLAG_bm ) {
 102ccf4:	f017 0f04 	tst.w	r7, #4
				tou.day_tier_switches[tou.nbr_day_tiers].tier_id = (tier_switch & NEW_TIER_bm) >> NEW_TIER_bp;
 102ccf8:	f880 e004 	strb.w	lr, [r0, #4]
				switchpoint_sec = switch_hour * SECONDS_PER_HOUR;
 102ccfc:	ea4f 27d1 	mov.w	r7, r1, lsr #11
 102cd00:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
				if ( (st_51.time_func_flag2 & SEPARATE_SUM_DEMANDS_FLAG_bm) == SEPARATE_SUM_DEMANDS_FLAG_bm ) {
 102cd04:	d007      	beq.n	102cd16 <TOU_APP_vTask+0x5b6>
					tou.day_tier_switches[tou.nbr_day_tiers].summ_switch_flag = (tier_switch & SUMMATION_SWITCH_FLAG_bm) >> SUMMATION_SWITCH_FLAG_bp;
 102cd06:	f3c1 0bc0 	ubfx	fp, r1, #3, #1
					tou.day_tier_switches[tou.nbr_day_tiers].demand_switch_flag = (tier_switch & DEMANDS_SWITCH_FLAG_bm) >> DEMANDS_SWITCH_FLAG_bp;
 102cd0a:	f3c1 1c00 	ubfx	ip, r1, #4, #1
					tou.day_tier_switches[tou.nbr_day_tiers].summ_switch_flag = (tier_switch & SUMMATION_SWITCH_FLAG_bm) >> SUMMATION_SWITCH_FLAG_bp;
 102cd0e:	f880 b005 	strb.w	fp, [r0, #5]
					tou.day_tier_switches[tou.nbr_day_tiers].demand_switch_flag = (tier_switch & DEMANDS_SWITCH_FLAG_bm) >> DEMANDS_SWITCH_FLAG_bp;
 102cd12:	f880 c006 	strb.w	ip, [r0, #6]
				tou.day_tier_switches[tou.nbr_day_tiers].tier_switch = timestamp + switchpoint_sec;
 102cd16:	f3c1 1145 	ubfx	r1, r1, #5, #6
 102cd1a:	fb0e a707 	mla	r7, lr, r7, sl
 102cd1e:	444b      	add	r3, r9
 102cd20:	203c      	movs	r0, #60	; 0x3c
				tou.nbr_day_tiers++;
 102cd22:	3201      	adds	r2, #1
				tou.day_tier_switches[tou.nbr_day_tiers].tier_switch = timestamp + switchpoint_sec;
 102cd24:	fb10 7101 	smlabb	r1, r0, r1, r7
				tou.nbr_day_tiers++;
 102cd28:	f889 2000 	strb.w	r2, [r9]
				tou.day_tier_switches[tou.nbr_day_tiers].tier_switch = timestamp + switchpoint_sec;
 102cd2c:	6099      	str	r1, [r3, #8]
 102cd2e:	e7bd      	b.n	102ccac <TOU_APP_vTask+0x54c>
					EEPROM_reader( ST_54_DAILY_SCHEDULE_ID_MATRIX_ADDR + 5*(tou.curr_season) + 1, &tou.curr_day_sched, 1 );
 102cd30:	f899 20b8 	ldrb.w	r2, [r9, #184]	; 0xb8
 102cd34:	4916      	ldr	r1, [pc, #88]	; (102cd90 <TOU_APP_vTask+0x630>)
 102cd36:	f8df b05c 	ldr.w	fp, [pc, #92]	; 102cd94 <TOU_APP_vTask+0x634>
 102cd3a:	f44f 6349 	mov.w	r3, #3216	; 0xc90
 102cd3e:	2005      	movs	r0, #5
 102cd40:	fb00 3002 	mla	r0, r0, r2, r3
 102cd44:	2201      	movs	r2, #1
 102cd46:	47d8      	blx	fp
 102cd48:	e7a2      	b.n	102cc90 <TOU_APP_vTask+0x530>
					EEPROM_reader( ST_54_DAILY_SCHEDULE_ID_MATRIX_ADDR + 5*(tou.curr_season) + 2, &tou.curr_day_sched, 1 );
 102cd4a:	f899 20b8 	ldrb.w	r2, [r9, #184]	; 0xb8
 102cd4e:	4910      	ldr	r1, [pc, #64]	; (102cd90 <TOU_APP_vTask+0x630>)
 102cd50:	f8df b040 	ldr.w	fp, [pc, #64]	; 102cd94 <TOU_APP_vTask+0x634>
 102cd54:	f640 4391 	movw	r3, #3217	; 0xc91
 102cd58:	2005      	movs	r0, #5
 102cd5a:	fb00 3002 	mla	r0, r0, r2, r3
 102cd5e:	2201      	movs	r2, #1
 102cd60:	47d8      	blx	fp
 102cd62:	e795      	b.n	102cc90 <TOU_APP_vTask+0x530>
 102cd64:	01029db5 	.word	0x01029db5
 102cd68:	01029ccd 	.word	0x01029ccd
 102cd6c:	01019961 	.word	0x01019961
 102cd70:	200172b4 	.word	0x200172b4
 102cd74:	01029a1d 	.word	0x01029a1d
 102cd78:	0102c5cd 	.word	0x0102c5cd
 102cd7c:	20017160 	.word	0x20017160
 102cd80:	0102a26d 	.word	0x0102a26d
 102cd84:	01030b71 	.word	0x01030b71
 102cd88:	01029ebd 	.word	0x01029ebd
 102cd8c:	2000820c 	.word	0x2000820c
 102cd90:	200082c1 	.word	0x200082c1
 102cd94:	01017511 	.word	0x01017511
 102cd98:	200081f8 	.word	0x200081f8
		for (i = 0; i < tou.nbr_day_tiers; i++) {
 102cd9c:	f899 7000 	ldrb.w	r7, [r9]
 102cda0:	2f00      	cmp	r7, #0
 102cda2:	f43f ae96 	beq.w	102cad2 <TOU_APP_vTask+0x372>
 102cda6:	2300      	movs	r3, #0
 102cda8:	469b      	mov	fp, r3
 102cdaa:	f8cd 9010 	str.w	r9, [sp, #16]
					aux = tou.day_tier_switches[i];
 102cdae:	ea4f 06cb 	mov.w	r6, fp, lsl #3
				if (tou.day_tier_switches[i].tier_switch < tou.day_tier_switches[j].tier_switch) {
 102cdb2:	4bbb      	ldr	r3, [pc, #748]	; (102d0a0 <TOU_APP_vTask+0x940>)
					aux = tou.day_tier_switches[i];
 102cdb4:	9a04      	ldr	r2, [sp, #16]
 102cdb6:	9304      	str	r3, [sp, #16]
 102cdb8:	1d34      	adds	r4, r6, #4
 102cdba:	4422      	add	r2, r4
				if (tou.day_tier_switches[i].tier_switch < tou.day_tier_switches[j].tier_switch) {
 102cdbc:	441e      	add	r6, r3
					aux = tou.day_tier_switches[i];
 102cdbe:	4614      	mov	r4, r2
					tou.day_tier_switches[i] = tou.day_tier_switches[j];
 102cdc0:	f106 0e04 	add.w	lr, r6, #4
					aux = tou.day_tier_switches[i];
 102cdc4:	2200      	movs	r2, #0
 102cdc6:	9603      	str	r6, [sp, #12]
				if (tou.day_tier_switches[i].tier_switch < tou.day_tier_switches[j].tier_switch) {
 102cdc8:	9803      	ldr	r0, [sp, #12]
 102cdca:	689e      	ldr	r6, [r3, #8]
 102cdcc:	6880      	ldr	r0, [r0, #8]
 102cdce:	3201      	adds	r2, #1
 102cdd0:	42b0      	cmp	r0, r6
			for (j = 0; j < tou.nbr_day_tiers; j++) {
 102cdd2:	b295      	uxth	r5, r2
					tou.day_tier_switches[i] = tou.day_tier_switches[j];
 102cdd4:	f103 0104 	add.w	r1, r3, #4
				if (tou.day_tier_switches[i].tier_switch < tou.day_tier_switches[j].tier_switch) {
 102cdd8:	d212      	bcs.n	102ce00 <TOU_APP_vTask+0x6a0>
					tou.day_tier_switches[i] = tou.day_tier_switches[j];
 102cdda:	c903      	ldmia	r1, {r0, r1}
					aux = tou.day_tier_switches[i];
 102cddc:	f894 a000 	ldrb.w	sl, [r4]
 102cde0:	f894 9001 	ldrb.w	r9, [r4, #1]
 102cde4:	f894 8002 	ldrb.w	r8, [r4, #2]
 102cde8:	f8d4 c004 	ldr.w	ip, [r4, #4]
					tou.day_tier_switches[i] = tou.day_tier_switches[j];
 102cdec:	e88e 0003 	stmia.w	lr, {r0, r1}
					tou.day_tier_switches[j] = aux;
 102cdf0:	f883 a004 	strb.w	sl, [r3, #4]
 102cdf4:	f883 9005 	strb.w	r9, [r3, #5]
 102cdf8:	f883 8006 	strb.w	r8, [r3, #6]
 102cdfc:	f8c3 c008 	str.w	ip, [r3, #8]
			for (j = 0; j < tou.nbr_day_tiers; j++) {
 102ce00:	42bd      	cmp	r5, r7
 102ce02:	f103 0308 	add.w	r3, r3, #8
 102ce06:	d3df      	bcc.n	102cdc8 <TOU_APP_vTask+0x668>
		for (i = 0; i < tou.nbr_day_tiers; i++) {
 102ce08:	4ba5      	ldr	r3, [pc, #660]	; (102d0a0 <TOU_APP_vTask+0x940>)
 102ce0a:	f10b 0b01 	add.w	fp, fp, #1
 102ce0e:	781f      	ldrb	r7, [r3, #0]
 102ce10:	fa1f fb8b 	uxth.w	fp, fp
 102ce14:	455f      	cmp	r7, fp
 102ce16:	d8ca      	bhi.n	102cdae <TOU_APP_vTask+0x64e>
 102ce18:	f8dd 9010 	ldr.w	r9, [sp, #16]
 102ce1c:	e659      	b.n	102cad2 <TOU_APP_vTask+0x372>
 102ce1e:	9c03      	ldr	r4, [sp, #12]
			for ( i = 0; i < st_51.nbr_recurr_dates; i++) {
 102ce20:	f898 3004 	ldrb.w	r3, [r8, #4]
 102ce24:	2200      	movs	r2, #0
 102ce26:	702a      	strb	r2, [r5, #0]
 102ce28:	2b00      	cmp	r3, #0
 102ce2a:	d032      	beq.n	102ce92 <TOU_APP_vTask+0x732>
 102ce2c:	4b9d      	ldr	r3, [pc, #628]	; (102d0a4 <TOU_APP_vTask+0x944>)
 102ce2e:	f8df b298 	ldr.w	fp, [pc, #664]	; 102d0c8 <TOU_APP_vTask+0x968>
 102ce32:	4f9d      	ldr	r7, [pc, #628]	; (102d0a8 <TOU_APP_vTask+0x948>)
 102ce34:	4e9d      	ldr	r6, [pc, #628]	; (102d0ac <TOU_APP_vTask+0x94c>)
 102ce36:	461a      	mov	r2, r3
				EEPROM_reader( ST_54_RECURR_DATES_ADDR + 3*i, &st_54_date, 2 );
 102ce38:	4623      	mov	r3, r4
 102ce3a:	465c      	mov	r4, fp
 102ce3c:	4693      	mov	fp, r2
 102ce3e:	e007      	b.n	102ce50 <TOU_APP_vTask+0x6f0>
			for ( i = 0; i < st_51.nbr_recurr_dates; i++) {
 102ce40:	782b      	ldrb	r3, [r5, #0]
 102ce42:	f898 2004 	ldrb.w	r2, [r8, #4]
 102ce46:	3301      	adds	r3, #1
 102ce48:	b2db      	uxtb	r3, r3
 102ce4a:	429a      	cmp	r2, r3
 102ce4c:	702b      	strb	r3, [r5, #0]
 102ce4e:	d920      	bls.n	102ce92 <TOU_APP_vTask+0x732>
				EEPROM_reader( ST_54_RECURR_DATES_ADDR + 3*i, &st_54_date, 2 );
 102ce50:	2203      	movs	r2, #3
 102ce52:	f640 3027 	movw	r0, #2855	; 0xb27
 102ce56:	fb02 0003 	mla	r0, r2, r3, r0
 102ce5a:	4993      	ldr	r1, [pc, #588]	; (102d0a8 <TOU_APP_vTask+0x948>)
 102ce5c:	2202      	movs	r2, #2
 102ce5e:	47a0      	blx	r4
				TOU_APP_vLoad_st_54_date_to_human_date(&date_found, rtc, st_54_date, true);
 102ce60:	2301      	movs	r3, #1
 102ce62:	883a      	ldrh	r2, [r7, #0]
 102ce64:	4891      	ldr	r0, [pc, #580]	; (102d0ac <TOU_APP_vTask+0x94c>)
 102ce66:	a908      	add	r1, sp, #32
 102ce68:	47d8      	blx	fp
				if ( (date_found.year == rtc->htime.year) && (date_found.month == rtc->htime.month) && (date_found.day == rtc->htime.day) ) {
 102ce6a:	8832      	ldrh	r2, [r6, #0]
 102ce6c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 102ce70:	429a      	cmp	r2, r3
 102ce72:	d1e5      	bne.n	102ce40 <TOU_APP_vTask+0x6e0>
 102ce74:	8872      	ldrh	r2, [r6, #2]
 102ce76:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 102ce7a:	429a      	cmp	r2, r3
 102ce7c:	d1e0      	bne.n	102ce40 <TOU_APP_vTask+0x6e0>
					EEPROM_reader( ST_54_RECURR_DATES_ADDR + 3*i + 2, &calendar_action, 1 );
 102ce7e:	7828      	ldrb	r0, [r5, #0]
 102ce80:	f640 3329 	movw	r3, #2857	; 0xb29
 102ce84:	2203      	movs	r2, #3
 102ce86:	fb02 3000 	mla	r0, r2, r0, r3
 102ce8a:	a913      	add	r1, sp, #76	; 0x4c
 102ce8c:	2201      	movs	r2, #1
 102ce8e:	47a0      	blx	r4
 102ce90:	e7d6      	b.n	102ce40 <TOU_APP_vTask+0x6e0>
			if ( (rtc->htime.hour != 0) || (rtc->htime.minute != 0) || (rtc->htime.second != 0) ) {
 102ce92:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 102ce96:	b923      	cbnz	r3, 102cea2 <TOU_APP_vTask+0x742>
 102ce98:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 102ce9c:	2b00      	cmp	r3, #0
 102ce9e:	f000 80bf 	beq.w	102d020 <TOU_APP_vTask+0x8c0>
 102cea2:	f89d 4022 	ldrb.w	r4, [sp, #34]	; 0x22
	if (rtc->is_time_relative == 0) {
 102cea6:	2c00      	cmp	r4, #0
 102cea8:	f47f adfd 	bne.w	102caa6 <TOU_APP_vTask+0x346>
 102ceac:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
		if ( (rtc->htime.year >= 1990) && ( rtc->htime.year <= 2089) ) {
 102ceb0:	f2a3 73c6 	subw	r3, r3, #1990	; 0x7c6
 102ceb4:	b29b      	uxth	r3, r3
 102ceb6:	2b63      	cmp	r3, #99	; 0x63
 102ceb8:	f63f adf5 	bhi.w	102caa6 <TOU_APP_vTask+0x346>
			for ( i = 0; i < st_51.nbr_non_recurr_dates; i++) {
 102cebc:	f8df 8210 	ldr.w	r8, [pc, #528]	; 102d0d0 <TOU_APP_vTask+0x970>
 102cec0:	4e7b      	ldr	r6, [pc, #492]	; (102d0b0 <TOU_APP_vTask+0x950>)
 102cec2:	f898 3003 	ldrb.w	r3, [r8, #3]
 102cec6:	7034      	strb	r4, [r6, #0]
 102cec8:	2b00      	cmp	r3, #0
 102ceca:	f000 80de 	beq.w	102d08a <TOU_APP_vTask+0x92a>
 102cece:	4b79      	ldr	r3, [pc, #484]	; (102d0b4 <TOU_APP_vTask+0x954>)
 102ced0:	f8df b1f4 	ldr.w	fp, [pc, #500]	; 102d0c8 <TOU_APP_vTask+0x968>
 102ced4:	f8cd 9014 	str.w	r9, [sp, #20]
 102ced8:	461a      	mov	r2, r3
 102ceda:	4b72      	ldr	r3, [pc, #456]	; (102d0a4 <TOU_APP_vTask+0x944>)
 102cedc:	4f76      	ldr	r7, [pc, #472]	; (102d0b8 <TOU_APP_vTask+0x958>)
 102cede:	9404      	str	r4, [sp, #16]
 102cee0:	4619      	mov	r1, r3
 102cee2:	200f      	movs	r0, #15
 102cee4:	465d      	mov	r5, fp
 102cee6:	2300      	movs	r3, #0
 102cee8:	9003      	str	r0, [sp, #12]
 102ceea:	4689      	mov	r9, r1
 102ceec:	4693      	mov	fp, r2
 102ceee:	e007      	b.n	102cf00 <TOU_APP_vTask+0x7a0>
 102cef0:	7833      	ldrb	r3, [r6, #0]
 102cef2:	f898 2003 	ldrb.w	r2, [r8, #3]
 102cef6:	3301      	adds	r3, #1
 102cef8:	b2db      	uxtb	r3, r3
 102cefa:	429a      	cmp	r2, r3
 102cefc:	7033      	strb	r3, [r6, #0]
 102cefe:	d940      	bls.n	102cf82 <TOU_APP_vTask+0x822>
				EEPROM_reader( ST_54_NON_RECURR_DATES_ADDR + 3*i, &st_54_date, 2 );
 102cf00:	2403      	movs	r4, #3
 102cf02:	f640 2091 	movw	r0, #2705	; 0xa91
 102cf06:	fb04 0003 	mla	r0, r4, r3, r0
 102cf0a:	2202      	movs	r2, #2
 102cf0c:	4969      	ldr	r1, [pc, #420]	; (102d0b4 <TOU_APP_vTask+0x954>)
 102cf0e:	47a8      	blx	r5
				TOU_APP_vLoad_st_54_date_to_human_date(&date_found, rtc, st_54_date, false);
 102cf10:	2300      	movs	r3, #0
 102cf12:	f8bb 2000 	ldrh.w	r2, [fp]
 102cf16:	4868      	ldr	r0, [pc, #416]	; (102d0b8 <TOU_APP_vTask+0x958>)
 102cf18:	a908      	add	r1, sp, #32
 102cf1a:	47c8      	blx	r9
				if ( (date_found.year == rtc->htime.year) && (date_found.month == rtc->htime.month) && (date_found.day == rtc->htime.day) ) {
 102cf1c:	883a      	ldrh	r2, [r7, #0]
 102cf1e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 102cf22:	429a      	cmp	r2, r3
 102cf24:	d1e4      	bne.n	102cef0 <TOU_APP_vTask+0x790>
 102cf26:	887a      	ldrh	r2, [r7, #2]
 102cf28:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 102cf2c:	429a      	cmp	r2, r3
 102cf2e:	d1df      	bne.n	102cef0 <TOU_APP_vTask+0x790>
					EEPROM_reader( ST_54_NON_RECURR_DATES_ADDR + 3*i + 2, &calendar_action, 1 );
 102cf30:	7830      	ldrb	r0, [r6, #0]
 102cf32:	4962      	ldr	r1, [pc, #392]	; (102d0bc <TOU_APP_vTask+0x95c>)
 102cf34:	f640 2393 	movw	r3, #2707	; 0xa93
 102cf38:	fb04 3000 	mla	r0, r4, r0, r3
 102cf3c:	2201      	movs	r2, #1
 102cf3e:	47a8      	blx	r5
					calendar_ctrl = (calendar_action & CALENDAR_CTRL_bm) >> CALENDAR_CTRL_bp;
 102cf40:	4b5e      	ldr	r3, [pc, #376]	; (102d0bc <TOU_APP_vTask+0x95c>)
					if ( (calendar_ctrl >= SPECIAL_SCHEDULE_0) && (calendar_ctrl <= SPECIAL_SCHEDULE_11) ) {
 102cf42:	9a03      	ldr	r2, [sp, #12]
					calendar_ctrl = (calendar_action & CALENDAR_CTRL_bm) >> CALENDAR_CTRL_bp;
 102cf44:	781b      	ldrb	r3, [r3, #0]
 102cf46:	f003 031f 	and.w	r3, r3, #31
					if ( (calendar_ctrl >= SPECIAL_SCHEDULE_0) && (calendar_ctrl <= SPECIAL_SCHEDULE_11) ) {
 102cf4a:	3b13      	subs	r3, #19
 102cf4c:	b2db      	uxtb	r3, r3
 102cf4e:	2b0b      	cmp	r3, #11
 102cf50:	bf98      	it	ls
 102cf52:	461a      	movls	r2, r3
 102cf54:	9203      	str	r2, [sp, #12]
 102cf56:	e7cb      	b.n	102cef0 <TOU_APP_vTask+0x790>
	uint8_t calendar_action = 0;
 102cf58:	2300      	movs	r3, #0
 102cf5a:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 102cf5e:	e4bd      	b.n	102c8dc <TOU_APP_vTask+0x17c>
			EEPROM_reader( ST_54_DAILY_SCHEDULE_ID_MATRIX_ADDR + 5*(tou.curr_season) + 3 + (tou.curr_special_sched_active), &tou.curr_day_sched, 1 );
 102cf60:	f899 20b8 	ldrb.w	r2, [r9, #184]	; 0xb8
 102cf64:	4956      	ldr	r1, [pc, #344]	; (102d0c0 <TOU_APP_vTask+0x960>)
 102cf66:	f8df b160 	ldr.w	fp, [pc, #352]	; 102d0c8 <TOU_APP_vTask+0x968>
 102cf6a:	2005      	movs	r0, #5
 102cf6c:	fb00 3002 	mla	r0, r0, r2, r3
 102cf70:	f600 4092 	addw	r0, r0, #3218	; 0xc92
 102cf74:	2201      	movs	r2, #1
 102cf76:	47d8      	blx	fp
 102cf78:	e68a      	b.n	102cc90 <TOU_APP_vTask+0x530>
		if ( ( (uint8_t)tier_sum != tou.curr_tier_sum ) || ( (uint8_t)tier_dem != tou.curr_tier_dem ) ) {
 102cf7a:	42b3      	cmp	r3, r6
 102cf7c:	f47f adca 	bne.w	102cb14 <TOU_APP_vTask+0x3b4>
 102cf80:	e41e      	b.n	102c7c0 <TOU_APP_vTask+0x60>
 102cf82:	9c04      	ldr	r4, [sp, #16]
 102cf84:	f8dd 9014 	ldr.w	r9, [sp, #20]
			for ( i = 0; i < st_51.nbr_recurr_dates; i++) {
 102cf88:	f898 3004 	ldrb.w	r3, [r8, #4]
 102cf8c:	2200      	movs	r2, #0
 102cf8e:	7032      	strb	r2, [r6, #0]
 102cf90:	2b00      	cmp	r3, #0
 102cf92:	f43f ad8a 	beq.w	102caaa <TOU_APP_vTask+0x34a>
 102cf96:	4b47      	ldr	r3, [pc, #284]	; (102d0b4 <TOU_APP_vTask+0x954>)
 102cf98:	f8df b12c 	ldr.w	fp, [pc, #300]	; 102d0c8 <TOU_APP_vTask+0x968>
				TOU_APP_vLoad_st_54_date_to_human_date(&date_found, rtc, st_54_date, true);
 102cf9c:	f8cd 9010 	str.w	r9, [sp, #16]
 102cfa0:	461a      	mov	r2, r3
 102cfa2:	4b40      	ldr	r3, [pc, #256]	; (102d0a4 <TOU_APP_vTask+0x944>)
 102cfa4:	4f44      	ldr	r7, [pc, #272]	; (102d0b8 <TOU_APP_vTask+0x958>)
 102cfa6:	4619      	mov	r1, r3
 102cfa8:	4689      	mov	r9, r1
 102cfaa:	4623      	mov	r3, r4
 102cfac:	465c      	mov	r4, fp
 102cfae:	4693      	mov	fp, r2
 102cfb0:	e007      	b.n	102cfc2 <TOU_APP_vTask+0x862>
			for ( i = 0; i < st_51.nbr_recurr_dates; i++) {
 102cfb2:	7833      	ldrb	r3, [r6, #0]
 102cfb4:	f898 2004 	ldrb.w	r2, [r8, #4]
 102cfb8:	3301      	adds	r3, #1
 102cfba:	b2db      	uxtb	r3, r3
 102cfbc:	429a      	cmp	r2, r3
 102cfbe:	7033      	strb	r3, [r6, #0]
 102cfc0:	d92b      	bls.n	102d01a <TOU_APP_vTask+0x8ba>
				EEPROM_reader( ST_54_RECURR_DATES_ADDR + 3*i, &st_54_date, 2 );
 102cfc2:	2503      	movs	r5, #3
 102cfc4:	f640 3027 	movw	r0, #2855	; 0xb27
 102cfc8:	fb05 0003 	mla	r0, r5, r3, r0
 102cfcc:	2202      	movs	r2, #2
 102cfce:	4939      	ldr	r1, [pc, #228]	; (102d0b4 <TOU_APP_vTask+0x954>)
 102cfd0:	47a0      	blx	r4
				TOU_APP_vLoad_st_54_date_to_human_date(&date_found, rtc, st_54_date, true);
 102cfd2:	2301      	movs	r3, #1
 102cfd4:	f8bb 2000 	ldrh.w	r2, [fp]
 102cfd8:	4837      	ldr	r0, [pc, #220]	; (102d0b8 <TOU_APP_vTask+0x958>)
 102cfda:	a908      	add	r1, sp, #32
 102cfdc:	47c8      	blx	r9
				if ( (date_found.year == rtc->htime.year) && (date_found.month == rtc->htime.month) && (date_found.day == rtc->htime.day) ) {
 102cfde:	883a      	ldrh	r2, [r7, #0]
 102cfe0:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 102cfe4:	429a      	cmp	r2, r3
 102cfe6:	d1e4      	bne.n	102cfb2 <TOU_APP_vTask+0x852>
 102cfe8:	887a      	ldrh	r2, [r7, #2]
 102cfea:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 102cfee:	429a      	cmp	r2, r3
 102cff0:	d1df      	bne.n	102cfb2 <TOU_APP_vTask+0x852>
					EEPROM_reader( ST_54_RECURR_DATES_ADDR + 3*i + 2, &calendar_action, 1 );
 102cff2:	7830      	ldrb	r0, [r6, #0]
 102cff4:	4931      	ldr	r1, [pc, #196]	; (102d0bc <TOU_APP_vTask+0x95c>)
 102cff6:	f640 3329 	movw	r3, #2857	; 0xb29
 102cffa:	fb05 3000 	mla	r0, r5, r0, r3
 102cffe:	2201      	movs	r2, #1
 102d000:	47a0      	blx	r4
					calendar_ctrl = (calendar_action & CALENDAR_CTRL_bm) >> CALENDAR_CTRL_bp;
 102d002:	4b2e      	ldr	r3, [pc, #184]	; (102d0bc <TOU_APP_vTask+0x95c>)
					if ( (calendar_ctrl >= SPECIAL_SCHEDULE_0) && (calendar_ctrl <= SPECIAL_SCHEDULE_11) ) {
 102d004:	9a03      	ldr	r2, [sp, #12]
					calendar_ctrl = (calendar_action & CALENDAR_CTRL_bm) >> CALENDAR_CTRL_bp;
 102d006:	781b      	ldrb	r3, [r3, #0]
 102d008:	f003 031f 	and.w	r3, r3, #31
					if ( (calendar_ctrl >= SPECIAL_SCHEDULE_0) && (calendar_ctrl <= SPECIAL_SCHEDULE_11) ) {
 102d00c:	3b13      	subs	r3, #19
 102d00e:	b2db      	uxtb	r3, r3
 102d010:	2b0b      	cmp	r3, #11
 102d012:	bf98      	it	ls
 102d014:	461a      	movls	r2, r3
 102d016:	9203      	str	r2, [sp, #12]
 102d018:	e7cb      	b.n	102cfb2 <TOU_APP_vTask+0x852>
 102d01a:	f8dd 9010 	ldr.w	r9, [sp, #16]
 102d01e:	e544      	b.n	102caaa <TOU_APP_vTask+0x34a>
	return calendar_action;
 102d020:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
				if ( calendar_flags & DEMAND_RESET_FLAG_bm ) {
 102d024:	0699      	lsls	r1, r3, #26
 102d026:	d533      	bpl.n	102d090 <TOU_APP_vTask+0x930>
					tou.pending_demand_reset = 1;
 102d028:	2201      	movs	r2, #1
 102d02a:	f89d 4022 	ldrb.w	r4, [sp, #34]	; 0x22
 102d02e:	f889 20bf 	strb.w	r2, [r9, #191]	; 0xbf
 102d032:	f003 0340 	and.w	r3, r3, #64	; 0x40
				if ( calendar_flags & SELF_READ_FLAG_bm ) {
 102d036:	2b00      	cmp	r3, #0
 102d038:	f43f af35 	beq.w	102cea6 <TOU_APP_vTask+0x746>
					tou.pending_self_read = 1;
 102d03c:	2301      	movs	r3, #1
 102d03e:	f889 30c0 	strb.w	r3, [r9, #192]	; 0xc0
 102d042:	e730      	b.n	102cea6 <TOU_APP_vTask+0x746>
					tou.pending_demand_reset = 0;
 102d044:	2300      	movs	r3, #0
					REGS_APP_vDemand_reset(END_DEVICE, tou.curr_season, tou_rtc.utc_timestamp);
 102d046:	4618      	mov	r0, r3
 102d048:	9a09      	ldr	r2, [sp, #36]	; 0x24
 102d04a:	f899 10b8 	ldrb.w	r1, [r9, #184]	; 0xb8
 102d04e:	4c1d      	ldr	r4, [pc, #116]	; (102d0c4 <TOU_APP_vTask+0x964>)
					tou.pending_demand_reset = 0;
 102d050:	f889 30bf 	strb.w	r3, [r9, #191]	; 0xbf
					REGS_APP_vDemand_reset(END_DEVICE, tou.curr_season, tou_rtc.utc_timestamp);
 102d054:	47a0      	blx	r4
 102d056:	e517      	b.n	102ca88 <TOU_APP_vTask+0x328>
					EEPROM_reader(TOU_LAST_SEASON_ADDR, &season, 1);
 102d058:	a913      	add	r1, sp, #76	; 0x4c
 102d05a:	4b1b      	ldr	r3, [pc, #108]	; (102d0c8 <TOU_APP_vTask+0x968>)
	REGS_APP_vTake_snapshot_st_23((uint8_t)SEASON_CHANGE, season, timestamp);
 102d05c:	4c1b      	ldr	r4, [pc, #108]	; (102d0cc <TOU_APP_vTask+0x96c>)
					EEPROM_reader(TOU_LAST_SEASON_ADDR, &season, 1);
 102d05e:	f249 20bb 	movw	r0, #37563	; 0x92bb
 102d062:	4798      	blx	r3
					tou.pending_season_change = 0;
 102d064:	2300      	movs	r3, #0
	REGS_APP_vTake_snapshot_st_23((uint8_t)SEASON_CHANGE, season, timestamp);
 102d066:	4618      	mov	r0, r3
 102d068:	9a09      	ldr	r2, [sp, #36]	; 0x24
 102d06a:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
					tou.pending_season_change = 0;
 102d06e:	f889 30be 	strb.w	r3, [r9, #190]	; 0xbe
	REGS_APP_vTake_snapshot_st_23((uint8_t)SEASON_CHANGE, season, timestamp);
 102d072:	47a0      	blx	r4
 102d074:	e503      	b.n	102ca7e <TOU_APP_vTask+0x31e>
		for ( i = 0; i < st_51.nbr_non_recurr_dates; i++) {
 102d076:	f898 2003 	ldrb.w	r2, [r8, #3]
 102d07a:	2a00      	cmp	r2, #0
 102d07c:	f43f ab9c 	beq.w	102c7b8 <TOU_APP_vTask+0x58>
 102d080:	f10d 061d 	add.w	r6, sp, #29
 102d084:	f8df b040 	ldr.w	fp, [pc, #64]	; 102d0c8 <TOU_APP_vTask+0x968>
 102d088:	e55d      	b.n	102cb46 <TOU_APP_vTask+0x3e6>
	uint8_t special_sched_active = NO_SPECIAL_SCHED_ACTIVE;
 102d08a:	230f      	movs	r3, #15
 102d08c:	9303      	str	r3, [sp, #12]
 102d08e:	e77b      	b.n	102cf88 <TOU_APP_vTask+0x828>
 102d090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 102d094:	f89d 4022 	ldrb.w	r4, [sp, #34]	; 0x22
 102d098:	e7cd      	b.n	102d036 <TOU_APP_vTask+0x8d6>
	if (rtc->is_time_relative == 0) {	
 102d09a:	461c      	mov	r4, r3
 102d09c:	e703      	b.n	102cea6 <TOU_APP_vTask+0x746>
 102d09e:	bf00      	nop
 102d0a0:	20008208 	.word	0x20008208
 102d0a4:	0102c5cd 	.word	0x0102c5cd
 102d0a8:	20008202 	.word	0x20008202
 102d0ac:	200081e4 	.word	0x200081e4
 102d0b0:	200081f5 	.word	0x200081f5
 102d0b4:	20008204 	.word	0x20008204
 102d0b8:	200081ec 	.word	0x200081ec
 102d0bc:	200081e0 	.word	0x200081e0
 102d0c0:	200082c1 	.word	0x200082c1
 102d0c4:	01029ad9 	.word	0x01029ad9
 102d0c8:	01017511 	.word	0x01017511
 102d0cc:	01029a39 	.word	0x01029a39
 102d0d0:	200081f8 	.word	0x200081f8

0102d0d4 <TOU_APP_vRtos_task>:
void TOU_APP_vRtos_task(void *pvParameters) {
 102d0d4:	b580      	push	{r7, lr}
 102d0d6:	4c06      	ldr	r4, [pc, #24]	; (102d0f0 <TOU_APP_vRtos_task+0x1c>)
 102d0d8:	4f06      	ldr	r7, [pc, #24]	; (102d0f4 <TOU_APP_vRtos_task+0x20>)
 102d0da:	4e07      	ldr	r6, [pc, #28]	; (102d0f8 <TOU_APP_vRtos_task+0x24>)
 102d0dc:	4d07      	ldr	r5, [pc, #28]	; (102d0fc <TOU_APP_vRtos_task+0x28>)
 102d0de:	e001      	b.n	102d0e4 <TOU_APP_vRtos_task+0x10>
		vTaskSuspend(tou_os.task_id);
 102d0e0:	6820      	ldr	r0, [r4, #0]
 102d0e2:	47a8      	blx	r5
		if ( tou_os.rtos_task_active ) {
 102d0e4:	7923      	ldrb	r3, [r4, #4]
 102d0e6:	2b00      	cmp	r3, #0
 102d0e8:	d0fa      	beq.n	102d0e0 <TOU_APP_vRtos_task+0xc>
			TOU_APP_vTask();
 102d0ea:	47b8      	blx	r7
			WATCHDOG_APP_vRestart();
 102d0ec:	47b0      	blx	r6
 102d0ee:	e7f7      	b.n	102d0e0 <TOU_APP_vRtos_task+0xc>
 102d0f0:	200172b4 	.word	0x200172b4
 102d0f4:	0102c761 	.word	0x0102c761
 102d0f8:	0101603d 	.word	0x0101603d
 102d0fc:	0102ea59 	.word	0x0102ea59

0102d100 <TOU_APP_ucLoad_dst_dates>:
 * \param
 * \retval
 *
 ******************************************************************************
 */
uint8_t TOU_APP_ucLoad_dst_dates(RTC_TYPE* rtc) {
 102d100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t calendar_action, calendar_ctrl;
	uint16_t st_54_dst;
	HUMAN_TIME_TYPE dst_date;
	uint8_t dst_ok;

	rtc->is_dst = 0;
 102d104:	f04f 0900 	mov.w	r9, #0
	EEPROM_reader( ST_53_DST_TIME_EFF_ADDR, &rtc->dst_to_effective, TM_FMAT_SIZE );
	rtc->dst_from_effective = rtc->dst_to_effective;
	//EEPROM_reader( ST_53_STD_TIME_EFF_ADDR, &rtc->dst_from_effective, TM_FMAT_SIZE );
	
	// Search dst dates in all recurrent dates 
	for ( i = 0; i < st_51.nbr_recurr_dates; i++) {
 102d108:	4f6b      	ldr	r7, [pc, #428]	; (102d2b8 <TOU_APP_ucLoad_dst_dates+0x1b8>)
	rtc->is_dst = 0;
 102d10a:	f880 9015 	strb.w	r9, [r0, #21]
uint8_t TOU_APP_ucLoad_dst_dates(RTC_TYPE* rtc) {
 102d10e:	4682      	mov	sl, r0
	EEPROM_reader( ST_53_DST_TIME_EFF_ADDR, &rtc->dst_to_effective, TM_FMAT_SIZE );
 102d110:	f100 011c 	add.w	r1, r0, #28
 102d114:	2204      	movs	r2, #4
uint8_t TOU_APP_ucLoad_dst_dates(RTC_TYPE* rtc) {
 102d116:	b087      	sub	sp, #28
	EEPROM_reader( ST_53_DST_TIME_EFF_ADDR, &rtc->dst_to_effective, TM_FMAT_SIZE );
 102d118:	f640 207c 	movw	r0, #2684	; 0xa7c
 102d11c:	4e67      	ldr	r6, [pc, #412]	; (102d2bc <TOU_APP_ucLoad_dst_dates+0x1bc>)
 102d11e:	47b0      	blx	r6
	for ( i = 0; i < st_51.nbr_recurr_dates; i++) {
 102d120:	793b      	ldrb	r3, [r7, #4]
	rtc->dst_from_effective = rtc->dst_to_effective;
 102d122:	f8da 201c 	ldr.w	r2, [sl, #28]
 102d126:	f8ca 2020 	str.w	r2, [sl, #32]
	for ( i = 0; i < st_51.nbr_recurr_dates; i++) {
 102d12a:	2b00      	cmp	r3, #0
 102d12c:	d041      	beq.n	102d1b2 <TOU_APP_ucLoad_dst_dates+0xb2>
 102d12e:	464c      	mov	r4, r9
 102d130:	f10d 080d 	add.w	r8, sp, #13
 102d134:	e006      	b.n	102d144 <TOU_APP_ucLoad_dst_dates+0x44>
			TOU_APP_vLoad_st_54_date_to_human_date(&dst_date, rtc, st_54_dst, true);		
			rtc->dst_to_effective += RTC_APP_ulMake_timestamp(&dst_date);
			dst_found |= 0x01;
		}
		
		if ( (calendar_ctrl == DAYLIGHT_SAVING_TIME_OFF) && ((dst_found & (uint8_t)0x02) == 0) ) {
 102d136:	2d02      	cmp	r5, #2
 102d138:	d032      	beq.n	102d1a0 <TOU_APP_ucLoad_dst_dates+0xa0>
	for ( i = 0; i < st_51.nbr_recurr_dates; i++) {
 102d13a:	3401      	adds	r4, #1
 102d13c:	793b      	ldrb	r3, [r7, #4]
 102d13e:	b2e4      	uxtb	r4, r4
 102d140:	42a3      	cmp	r3, r4
 102d142:	d936      	bls.n	102d1b2 <TOU_APP_ucLoad_dst_dates+0xb2>
		EEPROM_reader( ST_54_RECURR_DATES_ADDR + 3*i + 2, &calendar_action, 1 );
 102d144:	eb04 0b44 	add.w	fp, r4, r4, lsl #1
 102d148:	f60b 3029 	addw	r0, fp, #2857	; 0xb29
 102d14c:	2201      	movs	r2, #1
 102d14e:	4641      	mov	r1, r8
 102d150:	47b0      	blx	r6
		calendar_ctrl = (calendar_action & CALENDAR_CTRL_bm) >> CALENDAR_CTRL_bp;
 102d152:	f89d 500d 	ldrb.w	r5, [sp, #13]
 102d156:	f005 051f 	and.w	r5, r5, #31
		if ( (calendar_ctrl == DAYLIGHT_SAVING_TIME_ON) && ((dst_found & (uint8_t)0x01) == 0) ) {
 102d15a:	2d01      	cmp	r5, #1
 102d15c:	d1eb      	bne.n	102d136 <TOU_APP_ucLoad_dst_dates+0x36>
 102d15e:	f019 0f01 	tst.w	r9, #1
 102d162:	d1ea      	bne.n	102d13a <TOU_APP_ucLoad_dst_dates+0x3a>
			EEPROM_reader( ST_54_RECURR_DATES_ADDR + 3*i, &st_54_dst, 2 );
 102d164:	2202      	movs	r2, #2
 102d166:	f10d 010e 	add.w	r1, sp, #14
 102d16a:	f60b 3027 	addw	r0, fp, #2855	; 0xb27
 102d16e:	47b0      	blx	r6
			TOU_APP_vLoad_st_54_date_to_human_date(&dst_date, rtc, st_54_dst, true);		
 102d170:	462b      	mov	r3, r5
 102d172:	a804      	add	r0, sp, #16
 102d174:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 102d178:	4d51      	ldr	r5, [pc, #324]	; (102d2c0 <TOU_APP_ucLoad_dst_dates+0x1c0>)
 102d17a:	4651      	mov	r1, sl
 102d17c:	47a8      	blx	r5
			rtc->dst_to_effective += RTC_APP_ulMake_timestamp(&dst_date);
 102d17e:	4b51      	ldr	r3, [pc, #324]	; (102d2c4 <TOU_APP_ucLoad_dst_dates+0x1c4>)
 102d180:	a804      	add	r0, sp, #16
 102d182:	4798      	blx	r3
 102d184:	f8da 301c 	ldr.w	r3, [sl, #28]
 102d188:	4418      	add	r0, r3
			dst_found |= 0x01;
 102d18a:	f049 0901 	orr.w	r9, r9, #1
			rtc->dst_to_effective += RTC_APP_ulMake_timestamp(&dst_date);
 102d18e:	f8ca 001c 	str.w	r0, [sl, #28]
			TOU_APP_vLoad_st_54_date_to_human_date(&dst_date, rtc, st_54_dst, true);	
			rtc->dst_from_effective += RTC_APP_ulMake_timestamp(&dst_date);
			dst_found |= 0x02;
		}
		
		if (dst_found == 0x03) {
 102d192:	f1b9 0f03 	cmp.w	r9, #3
 102d196:	d1d0      	bne.n	102d13a <TOU_APP_ucLoad_dst_dates+0x3a>
 102d198:	2001      	movs	r0, #1
			}
		}
	}
	
	return dst_ok;
}
 102d19a:	b007      	add	sp, #28
 102d19c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ( (calendar_ctrl == DAYLIGHT_SAVING_TIME_OFF) && ((dst_found & (uint8_t)0x02) == 0) ) {
 102d1a0:	f019 0f02 	tst.w	r9, #2
 102d1a4:	d045      	beq.n	102d232 <TOU_APP_ucLoad_dst_dates+0x132>
	for ( i = 0; i < st_51.nbr_recurr_dates; i++) {
 102d1a6:	3401      	adds	r4, #1
 102d1a8:	793b      	ldrb	r3, [r7, #4]
 102d1aa:	b2e4      	uxtb	r4, r4
 102d1ac:	42a3      	cmp	r3, r4
 102d1ae:	46a9      	mov	r9, r5
 102d1b0:	d8c8      	bhi.n	102d144 <TOU_APP_ucLoad_dst_dates+0x44>
		for ( i = 0; i < st_51.nbr_non_recurr_dates; i++) {
 102d1b2:	78fb      	ldrb	r3, [r7, #3]
 102d1b4:	2b00      	cmp	r3, #0
 102d1b6:	d054      	beq.n	102d262 <TOU_APP_ucLoad_dst_dates+0x162>
 102d1b8:	f04f 0900 	mov.w	r9, #0
				TOU_APP_vLoad_st_54_date_to_human_date(&dst_date, rtc, st_54_dst, false);
 102d1bc:	f8df b100 	ldr.w	fp, [pc, #256]	; 102d2c0 <TOU_APP_ucLoad_dst_dates+0x1c0>
		for ( i = 0; i < st_51.nbr_non_recurr_dates; i++) {
 102d1c0:	464c      	mov	r4, r9
 102d1c2:	f10d 080d 	add.w	r8, sp, #13
 102d1c6:	e006      	b.n	102d1d6 <TOU_APP_ucLoad_dst_dates+0xd6>
			if ( (calendar_ctrl == DAYLIGHT_SAVING_TIME_OFF) && ((dst_found & (uint8_t)0x02) == 0) ) {
 102d1c8:	2a02      	cmp	r2, #2
 102d1ca:	d04e      	beq.n	102d26a <TOU_APP_ucLoad_dst_dates+0x16a>
		for ( i = 0; i < st_51.nbr_non_recurr_dates; i++) {
 102d1cc:	3401      	adds	r4, #1
 102d1ce:	78fb      	ldrb	r3, [r7, #3]
 102d1d0:	b2e4      	uxtb	r4, r4
 102d1d2:	42a3      	cmp	r3, r4
 102d1d4:	d945      	bls.n	102d262 <TOU_APP_ucLoad_dst_dates+0x162>
			EEPROM_reader( ST_54_NON_RECURR_DATES_ADDR + 3*i + 2, &calendar_action, 1 );
 102d1d6:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 102d1da:	2201      	movs	r2, #1
 102d1dc:	f605 2093 	addw	r0, r5, #2707	; 0xa93
 102d1e0:	4641      	mov	r1, r8
 102d1e2:	47b0      	blx	r6
			calendar_ctrl = (calendar_action & CALENDAR_CTRL_bm) >> CALENDAR_CTRL_bp;
 102d1e4:	f89d 200d 	ldrb.w	r2, [sp, #13]
 102d1e8:	f002 021f 	and.w	r2, r2, #31
			if ( (calendar_ctrl == DAYLIGHT_SAVING_TIME_ON) && ((dst_found & (uint8_t)0x01) == 0) ) {
 102d1ec:	2a01      	cmp	r2, #1
 102d1ee:	d1eb      	bne.n	102d1c8 <TOU_APP_ucLoad_dst_dates+0xc8>
 102d1f0:	f019 0301 	ands.w	r3, r9, #1
 102d1f4:	d1ea      	bne.n	102d1cc <TOU_APP_ucLoad_dst_dates+0xcc>
				EEPROM_reader( ST_54_NON_RECURR_DATES_ADDR + 3*i, &st_54_dst, 2 );
 102d1f6:	2202      	movs	r2, #2
 102d1f8:	f10d 010e 	add.w	r1, sp, #14
 102d1fc:	f605 2091 	addw	r0, r5, #2705	; 0xa91
 102d200:	9301      	str	r3, [sp, #4]
 102d202:	47b0      	blx	r6
				TOU_APP_vLoad_st_54_date_to_human_date(&dst_date, rtc, st_54_dst, false);
 102d204:	9b01      	ldr	r3, [sp, #4]
 102d206:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 102d20a:	a804      	add	r0, sp, #16
 102d20c:	4651      	mov	r1, sl
 102d20e:	47d8      	blx	fp
				if (dst_date.year == rtc->htime.year) {
 102d210:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 102d214:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 102d218:	429a      	cmp	r2, r3
 102d21a:	d1d7      	bne.n	102d1cc <TOU_APP_ucLoad_dst_dates+0xcc>
					rtc->dst_to_effective += RTC_APP_ulMake_timestamp(&dst_date);
 102d21c:	4b29      	ldr	r3, [pc, #164]	; (102d2c4 <TOU_APP_ucLoad_dst_dates+0x1c4>)
 102d21e:	a804      	add	r0, sp, #16
 102d220:	4798      	blx	r3
 102d222:	f8da 301c 	ldr.w	r3, [sl, #28]
 102d226:	4403      	add	r3, r0
					dst_found |= 0x01;
 102d228:	f049 0901 	orr.w	r9, r9, #1
					rtc->dst_to_effective += RTC_APP_ulMake_timestamp(&dst_date);
 102d22c:	f8ca 301c 	str.w	r3, [sl, #28]
 102d230:	e03c      	b.n	102d2ac <TOU_APP_ucLoad_dst_dates+0x1ac>
			EEPROM_reader( ST_54_RECURR_DATES_ADDR + 3*i, &st_54_dst, 2 );
 102d232:	462a      	mov	r2, r5
 102d234:	f10d 010e 	add.w	r1, sp, #14
 102d238:	f60b 3027 	addw	r0, fp, #2855	; 0xb27
 102d23c:	47b0      	blx	r6
			TOU_APP_vLoad_st_54_date_to_human_date(&dst_date, rtc, st_54_dst, true);	
 102d23e:	4d20      	ldr	r5, [pc, #128]	; (102d2c0 <TOU_APP_ucLoad_dst_dates+0x1c0>)
 102d240:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 102d244:	a804      	add	r0, sp, #16
 102d246:	2301      	movs	r3, #1
 102d248:	4651      	mov	r1, sl
 102d24a:	47a8      	blx	r5
			rtc->dst_from_effective += RTC_APP_ulMake_timestamp(&dst_date);
 102d24c:	4b1d      	ldr	r3, [pc, #116]	; (102d2c4 <TOU_APP_ucLoad_dst_dates+0x1c4>)
 102d24e:	a804      	add	r0, sp, #16
 102d250:	4798      	blx	r3
 102d252:	f8da 3020 	ldr.w	r3, [sl, #32]
 102d256:	4418      	add	r0, r3
			dst_found |= 0x02;
 102d258:	f049 0902 	orr.w	r9, r9, #2
			rtc->dst_from_effective += RTC_APP_ulMake_timestamp(&dst_date);
 102d25c:	f8ca 0020 	str.w	r0, [sl, #32]
 102d260:	e797      	b.n	102d192 <TOU_APP_ucLoad_dst_dates+0x92>
 102d262:	2000      	movs	r0, #0
}
 102d264:	b007      	add	sp, #28
 102d266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if ( (calendar_ctrl == DAYLIGHT_SAVING_TIME_OFF) && ((dst_found & (uint8_t)0x02) == 0) ) {
 102d26a:	f019 0302 	ands.w	r3, r9, #2
 102d26e:	d001      	beq.n	102d274 <TOU_APP_ucLoad_dst_dates+0x174>
 102d270:	4691      	mov	r9, r2
 102d272:	e7ab      	b.n	102d1cc <TOU_APP_ucLoad_dst_dates+0xcc>
				EEPROM_reader( ST_54_NON_RECURR_DATES_ADDR + 3*i, &st_54_dst, 2 );
 102d274:	f10d 010e 	add.w	r1, sp, #14
 102d278:	f605 2091 	addw	r0, r5, #2705	; 0xa91
 102d27c:	9301      	str	r3, [sp, #4]
 102d27e:	47b0      	blx	r6
				TOU_APP_vLoad_st_54_date_to_human_date(&dst_date, rtc, st_54_dst, false);
 102d280:	9b01      	ldr	r3, [sp, #4]
 102d282:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 102d286:	a804      	add	r0, sp, #16
 102d288:	4651      	mov	r1, sl
 102d28a:	47d8      	blx	fp
				if (dst_date.year == rtc->htime.year) {
 102d28c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 102d290:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 102d294:	429a      	cmp	r2, r3
 102d296:	d199      	bne.n	102d1cc <TOU_APP_ucLoad_dst_dates+0xcc>
					rtc->dst_from_effective += RTC_APP_ulMake_timestamp(&dst_date);
 102d298:	4b0a      	ldr	r3, [pc, #40]	; (102d2c4 <TOU_APP_ucLoad_dst_dates+0x1c4>)
 102d29a:	a804      	add	r0, sp, #16
 102d29c:	4798      	blx	r3
 102d29e:	f8da 3020 	ldr.w	r3, [sl, #32]
 102d2a2:	4403      	add	r3, r0
					dst_found |= 0x02;
 102d2a4:	f049 0902 	orr.w	r9, r9, #2
					rtc->dst_from_effective += RTC_APP_ulMake_timestamp(&dst_date);
 102d2a8:	f8ca 3020 	str.w	r3, [sl, #32]
			if (dst_found == 0x03) {
 102d2ac:	f1b9 0f03 	cmp.w	r9, #3
 102d2b0:	f43f af72 	beq.w	102d198 <TOU_APP_ucLoad_dst_dates+0x98>
 102d2b4:	e78a      	b.n	102d1cc <TOU_APP_ucLoad_dst_dates+0xcc>
 102d2b6:	bf00      	nop
 102d2b8:	200081f8 	.word	0x200081f8
 102d2bc:	01017511 	.word	0x01017511
 102d2c0:	0102c5cd 	.word	0x0102c5cd
 102d2c4:	0102a26d 	.word	0x0102a26d

0102d2c8 <TOU_APP_ucGet_current_season>:
 * \retval
 ******************************************************************************
 */
uint8_t TOU_APP_ucGet_current_season(void) {
	
	return tou.curr_season;
 102d2c8:	4b01      	ldr	r3, [pc, #4]	; (102d2d0 <TOU_APP_ucGet_current_season+0x8>)
}
 102d2ca:	f893 00b8 	ldrb.w	r0, [r3, #184]	; 0xb8
 102d2ce:	4770      	bx	lr
 102d2d0:	20008208 	.word	0x20008208

0102d2d4 <TOU_APP_ucGet_current_tier>:
 * \retval
 ******************************************************************************
 */
uint8_t TOU_APP_ucGet_current_tier(void) {
	
	return tou.curr_tier;
 102d2d4:	4b01      	ldr	r3, [pc, #4]	; (102d2dc <TOU_APP_ucGet_current_tier+0x8>)
}
 102d2d6:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
 102d2da:	4770      	bx	lr
 102d2dc:	20008208 	.word	0x20008208

0102d2e0 <UTIL_hex_to_bcd>:
 * \param 	
 * \retval 	
 ******************************************************************************
 */
bool UTIL_hex_to_bcd(uint64_t hex_value, uint8_t *bcd_outputBuffer)
{	
 102d2e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t i;
	uint8_t bcd_value[8];
	
	memset( &bcd_value, 0, sizeof(bcd_value) );
	
	while( hex_value > (uint64_t)(99999999999999) )
 102d2e4:	a584      	add	r5, pc, #528	; (adr r5, 102d4f8 <UTIL_hex_to_bcd+0x218>)
 102d2e6:	e9d5 4500 	ldrd	r4, r5, [r5]
{	
 102d2ea:	b083      	sub	sp, #12
	while( hex_value > (uint64_t)(99999999999999) )
 102d2ec:	428d      	cmp	r5, r1
	memset( &bcd_value, 0, sizeof(bcd_value) );
 102d2ee:	f04f 0300 	mov.w	r3, #0
	while( hex_value > (uint64_t)(99999999999999) )
 102d2f2:	bf08      	it	eq
 102d2f4:	4284      	cmpeq	r4, r0
	memset( &bcd_value, 0, sizeof(bcd_value) );
 102d2f6:	9301      	str	r3, [sp, #4]
 102d2f8:	9300      	str	r3, [sp, #0]
	while( hex_value > (uint64_t)(99999999999999) )
 102d2fa:	d216      	bcs.n	102d32a <UTIL_hex_to_bcd+0x4a>
	{
		bcd_value[0] += 1;
		hex_value -= 100000000000000;
 102d2fc:	a780      	add	r7, pc, #512	; (adr r7, 102d500 <UTIL_hex_to_bcd+0x220>)
 102d2fe:	e9d7 6700 	ldrd	r6, r7, [r7]
		bcd_value[0] += 1;
 102d302:	f103 0e01 	add.w	lr, r3, #1
 102d306:	fa5f fe8e 	uxtb.w	lr, lr
		hex_value -= 100000000000000;
 102d30a:	1980      	adds	r0, r0, r6
		if ( (bcd_value[0] & 0xF) > 9 )
 102d30c:	f00e 0c0f 	and.w	ip, lr, #15
		hex_value -= 100000000000000;
 102d310:	4179      	adcs	r1, r7
		{
			bcd_value[0] += 6;
 102d312:	3307      	adds	r3, #7
		if ( (bcd_value[0] & 0xF) > 9 )
 102d314:	f1bc 0f09 	cmp.w	ip, #9
			bcd_value[0] += 6;
 102d318:	bf8c      	ite	hi
 102d31a:	b2db      	uxtbhi	r3, r3
 102d31c:	4673      	movls	r3, lr
	while( hex_value > (uint64_t)(99999999999999) )
 102d31e:	428d      	cmp	r5, r1
 102d320:	bf08      	it	eq
 102d322:	4284      	cmpeq	r4, r0
 102d324:	d3ed      	bcc.n	102d302 <UTIL_hex_to_bcd+0x22>
 102d326:	f88d 3000 	strb.w	r3, [sp]
		}
	}

	while( hex_value > (uint64_t)(999999999999) )
 102d32a:	a577      	add	r5, pc, #476	; (adr r5, 102d508 <UTIL_hex_to_bcd+0x228>)
 102d32c:	e9d5 4500 	ldrd	r4, r5, [r5]
 102d330:	428d      	cmp	r5, r1
 102d332:	bf08      	it	eq
 102d334:	4284      	cmpeq	r4, r0
 102d336:	d21a      	bcs.n	102d36e <UTIL_hex_to_bcd+0x8e>
	{
		bcd_value[1] += 1;
		hex_value -= 1000000000000;
 102d338:	a775      	add	r7, pc, #468	; (adr r7, 102d510 <UTIL_hex_to_bcd+0x230>)
 102d33a:	e9d7 6700 	ldrd	r6, r7, [r7]
	while( hex_value > (uint64_t)(999999999999) )
 102d33e:	f04f 0e00 	mov.w	lr, #0
		bcd_value[1] += 1;
 102d342:	f10e 0c01 	add.w	ip, lr, #1
 102d346:	fa5f fc8c 	uxtb.w	ip, ip
		hex_value -= 1000000000000;
 102d34a:	1980      	adds	r0, r0, r6
		if ( (bcd_value[1] & 0xF) > 9 )
 102d34c:	f00c 080f 	and.w	r8, ip, #15
		hex_value -= 1000000000000;
 102d350:	4179      	adcs	r1, r7
		{
			bcd_value[1] += 6;
 102d352:	f10e 0e07 	add.w	lr, lr, #7
		if ( (bcd_value[1] & 0xF) > 9 )
 102d356:	f1b8 0f09 	cmp.w	r8, #9
			bcd_value[1] += 6;
 102d35a:	bf8c      	ite	hi
 102d35c:	fa5f fe8e 	uxtbhi.w	lr, lr
 102d360:	46e6      	movls	lr, ip
	while( hex_value > (uint64_t)(999999999999) )
 102d362:	428d      	cmp	r5, r1
 102d364:	bf08      	it	eq
 102d366:	4284      	cmpeq	r4, r0
 102d368:	d3eb      	bcc.n	102d342 <UTIL_hex_to_bcd+0x62>
 102d36a:	f88d e001 	strb.w	lr, [sp, #1]
		}
	}

	while( hex_value > (uint64_t)(9999999999) )
 102d36e:	a56a      	add	r5, pc, #424	; (adr r5, 102d518 <UTIL_hex_to_bcd+0x238>)
 102d370:	e9d5 4500 	ldrd	r4, r5, [r5]
 102d374:	428d      	cmp	r5, r1
 102d376:	bf08      	it	eq
 102d378:	4284      	cmpeq	r4, r0
 102d37a:	d21a      	bcs.n	102d3b2 <UTIL_hex_to_bcd+0xd2>
	{
		bcd_value[2] += 1;
		hex_value -= 10000000000;
 102d37c:	a768      	add	r7, pc, #416	; (adr r7, 102d520 <UTIL_hex_to_bcd+0x240>)
 102d37e:	e9d7 6700 	ldrd	r6, r7, [r7]
	while( hex_value > (uint64_t)(9999999999) )
 102d382:	f04f 0e00 	mov.w	lr, #0
		bcd_value[2] += 1;
 102d386:	f10e 0c01 	add.w	ip, lr, #1
 102d38a:	fa5f fc8c 	uxtb.w	ip, ip
		hex_value -= 10000000000;
 102d38e:	1980      	adds	r0, r0, r6
		if ( (bcd_value[2] & 0xF) > 9 )
 102d390:	f00c 080f 	and.w	r8, ip, #15
		hex_value -= 10000000000;
 102d394:	4179      	adcs	r1, r7
		{
			bcd_value[2] += 6;
 102d396:	f10e 0e07 	add.w	lr, lr, #7
		if ( (bcd_value[2] & 0xF) > 9 )
 102d39a:	f1b8 0f09 	cmp.w	r8, #9
			bcd_value[2] += 6;
 102d39e:	bf8c      	ite	hi
 102d3a0:	fa5f fe8e 	uxtbhi.w	lr, lr
 102d3a4:	46e6      	movls	lr, ip
	while( hex_value > (uint64_t)(9999999999) )
 102d3a6:	428d      	cmp	r5, r1
 102d3a8:	bf08      	it	eq
 102d3aa:	4284      	cmpeq	r4, r0
 102d3ac:	d3eb      	bcc.n	102d386 <UTIL_hex_to_bcd+0xa6>
 102d3ae:	f88d e002 	strb.w	lr, [sp, #2]
		}
	}

	while( hex_value > (uint64_t)(99999999) )
 102d3b2:	a55d      	add	r5, pc, #372	; (adr r5, 102d528 <UTIL_hex_to_bcd+0x248>)
 102d3b4:	e9d5 4500 	ldrd	r4, r5, [r5]
 102d3b8:	428d      	cmp	r5, r1
 102d3ba:	bf08      	it	eq
 102d3bc:	4284      	cmpeq	r4, r0
 102d3be:	d21a      	bcs.n	102d3f6 <UTIL_hex_to_bcd+0x116>
	{
		bcd_value[3] += 1;
		hex_value -= 100000000;
 102d3c0:	a75b      	add	r7, pc, #364	; (adr r7, 102d530 <UTIL_hex_to_bcd+0x250>)
 102d3c2:	e9d7 6700 	ldrd	r6, r7, [r7]
	while( hex_value > (uint64_t)(99999999) )
 102d3c6:	f04f 0e00 	mov.w	lr, #0
		bcd_value[3] += 1;
 102d3ca:	f10e 0c01 	add.w	ip, lr, #1
 102d3ce:	fa5f fc8c 	uxtb.w	ip, ip
		hex_value -= 100000000;
 102d3d2:	1980      	adds	r0, r0, r6
		if ( (bcd_value[3] & 0xF) > 9 )
 102d3d4:	f00c 080f 	and.w	r8, ip, #15
		hex_value -= 100000000;
 102d3d8:	4179      	adcs	r1, r7
		{
			bcd_value[3] += 6;
 102d3da:	f10e 0e07 	add.w	lr, lr, #7
		if ( (bcd_value[3] & 0xF) > 9 )
 102d3de:	f1b8 0f09 	cmp.w	r8, #9
			bcd_value[3] += 6;
 102d3e2:	bf8c      	ite	hi
 102d3e4:	fa5f fe8e 	uxtbhi.w	lr, lr
 102d3e8:	46e6      	movls	lr, ip
	while( hex_value > (uint64_t)(99999999) )
 102d3ea:	428d      	cmp	r5, r1
 102d3ec:	bf08      	it	eq
 102d3ee:	4284      	cmpeq	r4, r0
 102d3f0:	d3eb      	bcc.n	102d3ca <UTIL_hex_to_bcd+0xea>
 102d3f2:	f88d e003 	strb.w	lr, [sp, #3]
		}
	}

	while( hex_value > (uint64_t)(999999) )
 102d3f6:	4c3e      	ldr	r4, [pc, #248]	; (102d4f0 <UTIL_hex_to_bcd+0x210>)
 102d3f8:	2500      	movs	r5, #0
 102d3fa:	428d      	cmp	r5, r1
 102d3fc:	bf08      	it	eq
 102d3fe:	4284      	cmpeq	r4, r0
 102d400:	d21a      	bcs.n	102d438 <UTIL_hex_to_bcd+0x158>
	{
		bcd_value[4] += 1;
		hex_value -= 1000000;
 102d402:	4e3c      	ldr	r6, [pc, #240]	; (102d4f4 <UTIL_hex_to_bcd+0x214>)
	while( hex_value > (uint64_t)(999999) )
 102d404:	f04f 0e00 	mov.w	lr, #0
		hex_value -= 1000000;
 102d408:	f04f 37ff 	mov.w	r7, #4294967295
		bcd_value[4] += 1;
 102d40c:	f10e 0c01 	add.w	ip, lr, #1
 102d410:	fa5f fc8c 	uxtb.w	ip, ip
		hex_value -= 1000000;
 102d414:	1980      	adds	r0, r0, r6
		if ( (bcd_value[4] & 0xF) > 9 )
 102d416:	f00c 080f 	and.w	r8, ip, #15
		hex_value -= 1000000;
 102d41a:	4179      	adcs	r1, r7
		{
			bcd_value[4] += 6;
 102d41c:	f10e 0e07 	add.w	lr, lr, #7
		if ( (bcd_value[4] & 0xF) > 9 )
 102d420:	f1b8 0f09 	cmp.w	r8, #9
			bcd_value[4] += 6;
 102d424:	bf8c      	ite	hi
 102d426:	fa5f fe8e 	uxtbhi.w	lr, lr
 102d42a:	46e6      	movls	lr, ip
	while( hex_value > (uint64_t)(999999) )
 102d42c:	428d      	cmp	r5, r1
 102d42e:	bf08      	it	eq
 102d430:	4284      	cmpeq	r4, r0
 102d432:	d3eb      	bcc.n	102d40c <UTIL_hex_to_bcd+0x12c>
 102d434:	f88d e004 	strb.w	lr, [sp, #4]
		}
	}

	while (hex_value > 9999)
 102d438:	2700      	movs	r7, #0
 102d43a:	f242 760f 	movw	r6, #9999	; 0x270f
 102d43e:	428f      	cmp	r7, r1
 102d440:	bf08      	it	eq
 102d442:	4286      	cmpeq	r6, r0
 102d444:	d218      	bcs.n	102d478 <UTIL_hex_to_bcd+0x198>
	{
		bcd_value[5] += 1;
		hex_value -= 10000;
 102d446:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 102d538 <UTIL_hex_to_bcd+0x258>
	while (hex_value > 9999)
 102d44a:	2400      	movs	r4, #0
		hex_value -= 10000;
 102d44c:	f04f 39ff 	mov.w	r9, #4294967295
		bcd_value[5] += 1;
 102d450:	1c65      	adds	r5, r4, #1
 102d452:	b2ed      	uxtb	r5, r5
		hex_value -= 10000;
 102d454:	eb10 0008 	adds.w	r0, r0, r8
		if ( (bcd_value[5] & 0xF) > 9 )
 102d458:	f005 0e0f 	and.w	lr, r5, #15
		hex_value -= 10000;
 102d45c:	eb41 0109 	adc.w	r1, r1, r9
		{
			bcd_value[5] += 6;
 102d460:	3407      	adds	r4, #7
		if ( (bcd_value[5] & 0xF) > 9 )
 102d462:	f1be 0f09 	cmp.w	lr, #9
			bcd_value[5] += 6;
 102d466:	bf8c      	ite	hi
 102d468:	b2e4      	uxtbhi	r4, r4
 102d46a:	462c      	movls	r4, r5
	while (hex_value > 9999)
 102d46c:	428f      	cmp	r7, r1
 102d46e:	bf08      	it	eq
 102d470:	4286      	cmpeq	r6, r0
 102d472:	d3ed      	bcc.n	102d450 <UTIL_hex_to_bcd+0x170>
 102d474:	f88d 4005 	strb.w	r4, [sp, #5]
		}
	}

	while (hex_value > 99)
 102d478:	2900      	cmp	r1, #0
 102d47a:	bf08      	it	eq
 102d47c:	2864      	cmpeq	r0, #100	; 0x64
 102d47e:	d312      	bcc.n	102d4a6 <UTIL_hex_to_bcd+0x1c6>
 102d480:	2400      	movs	r4, #0
	{
		bcd_value[6] += 1;
 102d482:	1c65      	adds	r5, r4, #1
 102d484:	b2ed      	uxtb	r5, r5
		hex_value -= 100;
 102d486:	3864      	subs	r0, #100	; 0x64
		if ( (bcd_value[6] & 0xF) > 9 )
 102d488:	f005 060f 	and.w	r6, r5, #15
		hex_value -= 100;
 102d48c:	f141 31ff 	adc.w	r1, r1, #4294967295
		{
			bcd_value[6] += 6;
 102d490:	3407      	adds	r4, #7
		if ( (bcd_value[6] & 0xF) > 9 )
 102d492:	2e09      	cmp	r6, #9
			bcd_value[6] += 6;
 102d494:	bf8c      	ite	hi
 102d496:	b2e4      	uxtbhi	r4, r4
 102d498:	462c      	movls	r4, r5
	while (hex_value > 99)
 102d49a:	2900      	cmp	r1, #0
 102d49c:	bf08      	it	eq
 102d49e:	2864      	cmpeq	r0, #100	; 0x64
 102d4a0:	d2ef      	bcs.n	102d482 <UTIL_hex_to_bcd+0x1a2>
 102d4a2:	f88d 4006 	strb.w	r4, [sp, #6]
		}
	}

	while (hex_value > 9)
 102d4a6:	2900      	cmp	r1, #0
 102d4a8:	bf08      	it	eq
 102d4aa:	280a      	cmpeq	r0, #10
 102d4ac:	d31d      	bcc.n	102d4ea <UTIL_hex_to_bcd+0x20a>
 102d4ae:	2510      	movs	r5, #16
 102d4b0:	e000      	b.n	102d4b4 <UTIL_hex_to_bcd+0x1d4>
 102d4b2:	4625      	mov	r5, r4
	{
		bcd_value[7] += 0x10;
		hex_value -= 10;
 102d4b4:	380a      	subs	r0, #10
 102d4b6:	f141 31ff 	adc.w	r1, r1, #4294967295
	while (hex_value > 9)
 102d4ba:	2900      	cmp	r1, #0
 102d4bc:	f105 0410 	add.w	r4, r5, #16
 102d4c0:	bf08      	it	eq
 102d4c2:	280a      	cmpeq	r0, #10
 102d4c4:	b2e4      	uxtb	r4, r4
 102d4c6:	d2f4      	bcs.n	102d4b2 <UTIL_hex_to_bcd+0x1d2>
	}
	
	bcd_value[7] += hex_value;
 102d4c8:	4428      	add	r0, r5
 102d4ca:	f88d 0007 	strb.w	r0, [sp, #7]
 102d4ce:	f10d 0101 	add.w	r1, sp, #1
 102d4d2:	f102 0008 	add.w	r0, r2, #8
 102d4d6:	e001      	b.n	102d4dc <UTIL_hex_to_bcd+0x1fc>
 102d4d8:	f811 3b01 	ldrb.w	r3, [r1], #1
	
	for ( i = 0; i < 8; i++)
	{
		*bcd_outputBuffer++ = bcd_value[i];
 102d4dc:	f802 3b01 	strb.w	r3, [r2], #1
	for ( i = 0; i < 8; i++)
 102d4e0:	4282      	cmp	r2, r0
 102d4e2:	d1f9      	bne.n	102d4d8 <UTIL_hex_to_bcd+0x1f8>
	}
}
 102d4e4:	b003      	add	sp, #12
 102d4e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	while (hex_value > 9)
 102d4ea:	2500      	movs	r5, #0
 102d4ec:	e7ec      	b.n	102d4c8 <UTIL_hex_to_bcd+0x1e8>
 102d4ee:	bf00      	nop
 102d4f0:	000f423f 	.word	0x000f423f
 102d4f4:	fff0bdc0 	.word	0xfff0bdc0
 102d4f8:	107a3fff 	.word	0x107a3fff
 102d4fc:	00005af3 	.word	0x00005af3
 102d500:	ef85c000 	.word	0xef85c000
 102d504:	ffffa50c 	.word	0xffffa50c
 102d508:	d4a50fff 	.word	0xd4a50fff
 102d50c:	000000e8 	.word	0x000000e8
 102d510:	2b5af000 	.word	0x2b5af000
 102d514:	ffffff17 	.word	0xffffff17
 102d518:	540be3ff 	.word	0x540be3ff
 102d51c:	00000002 	.word	0x00000002
 102d520:	abf41c00 	.word	0xabf41c00
 102d524:	fffffffd 	.word	0xfffffffd
 102d528:	05f5e0ff 	.word	0x05f5e0ff
 102d52c:	00000000 	.word	0x00000000
 102d530:	fa0a1f00 	.word	0xfa0a1f00
 102d534:	ffffffff 	.word	0xffffffff
 102d538:	ffffd8f0 	.word	0xffffd8f0

0102d53c <efc_init>:
 * \param ul_fws The number of wait states in cycle (no shift).
 *
 * \return 0 if successful.
 */
uint32_t efc_init(Efc *p_efc, uint32_t ul_access_mode, uint32_t ul_fws)
{
 102d53c:	b508      	push	{r3, lr}
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	efc_write_fmr(p_efc, ul_access_mode | EEFC_FMR_FWS(ul_fws) | EEFC_FMR_CLOE);
 102d53e:	0212      	lsls	r2, r2, #8
 102d540:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 102d544:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 102d548:	4311      	orrs	r1, r2
 102d54a:	4b02      	ldr	r3, [pc, #8]	; (102d554 <efc_init+0x18>)
 102d54c:	4798      	blx	r3
#else
	efc_write_fmr(p_efc, ul_access_mode | EEFC_FMR_FWS(ul_fws));
#endif	
	return EFC_RC_OK;
}
 102d54e:	2000      	movs	r0, #0
 102d550:	bd08      	pop	{r3, pc}
 102d552:	bf00      	nop
 102d554:	20000071 	.word	0x20000071

0102d558 <efc_perform_command>:
{
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
 102d558:	f1a1 030e 	sub.w	r3, r1, #14
 102d55c:	2b01      	cmp	r3, #1
 102d55e:	d802      	bhi.n	102d566 <efc_perform_command+0xe>
		return EFC_RC_NOT_SUPPORT;
 102d560:	f04f 30ff 	mov.w	r0, #4294967295
 102d564:	4770      	bx	lr
{
 102d566:	b570      	push	{r4, r5, r6, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 102d568:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
 102d56c:	b672      	cpsid	i
 102d56e:	f3bf 8f5f 	dmb	sy
	}

	flags = cpu_irq_save();
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
 102d572:	4b0a      	ldr	r3, [pc, #40]	; (102d59c <efc_perform_command+0x44>)
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
 102d574:	4d0a      	ldr	r5, [pc, #40]	; (102d5a0 <efc_perform_command+0x48>)
	result = efc_perform_fcr(p_efc,
 102d576:	4e0b      	ldr	r6, [pc, #44]	; (102d5a4 <efc_perform_command+0x4c>)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
 102d578:	ea03 2202 	and.w	r2, r3, r2, lsl #8
			EEFC_FCR_FCMD(ul_command));
 102d57c:	b2c9      	uxtb	r1, r1
	result = efc_perform_fcr(p_efc,
 102d57e:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
 102d582:	2300      	movs	r3, #0
 102d584:	4311      	orrs	r1, r2
 102d586:	702b      	strb	r3, [r5, #0]
 102d588:	47b0      	blx	r6
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
 102d58a:	b92c      	cbnz	r4, 102d598 <efc_perform_command+0x40>
		cpu_irq_enable();
 102d58c:	2301      	movs	r3, #1
 102d58e:	702b      	strb	r3, [r5, #0]
 102d590:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
 102d594:	b662      	cpsie	i
 102d596:	bd70      	pop	{r4, r5, r6, pc}
	cpu_irq_restore(flags);
	return result;
}
 102d598:	bd70      	pop	{r4, r5, r6, pc}
 102d59a:	bf00      	nop
 102d59c:	00ffff00 	.word	0x00ffff00
 102d5a0:	2000008d 	.word	0x2000008d
 102d5a4:	20000075 	.word	0x20000075

0102d5a8 <ICM_Handler>:

/**
 * \brief Interrupt handler for ICM.
 */
void ICM_Handler(void)
{
 102d5a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * \return The interrupt status value.
 */
static inline uint32_t icm_get_interrupt_status(Icm *p_icm)
{
	return p_icm->ICM_ISR;
 102d5ac:	4a14      	ldr	r2, [pc, #80]	; (102d600 <ICM_Handler+0x58>)
	if (icm_callback_pointer[source]) {
 102d5ae:	4e15      	ldr	r6, [pc, #84]	; (102d604 <ICM_Handler+0x5c>)
 102d5b0:	69d1      	ldr	r1, [r2, #28]
	return p_icm->ICM_IMR;
 102d5b2:	6993      	ldr	r3, [r2, #24]
{
 102d5b4:	b082      	sub	sp, #8
	volatile uint32_t status;
	uint8_t i, j;

	status = (icm_get_interrupt_status(ICM) & icm_get_interrupt_mask(ICM));
 102d5b6:	400b      	ands	r3, r1
 102d5b8:	9301      	str	r3, [sp, #4]
 102d5ba:	2500      	movs	r5, #0
			if (status & (1 << (_ICM_NUM_OF_REGION * i))) {
				icm_interrupt((enum icm_interrupt_source)i, (enum icm_region_num)0);
			}
		} else {
			for (j = 0; j < _ICM_NUM_OF_REGION; j++) {
				if (status & (1 << (_ICM_NUM_OF_REGION * i + j))) {
 102d5bc:	2701      	movs	r7, #1
	status = (icm_get_interrupt_status(ICM) & icm_get_interrupt_mask(ICM));
 102d5be:	2400      	movs	r4, #0
	if (icm_callback_pointer[source]) {
 102d5c0:	eb05 0806 	add.w	r8, r5, r6
				if (status & (1 << (_ICM_NUM_OF_REGION * i + j))) {
 102d5c4:	192b      	adds	r3, r5, r4
 102d5c6:	9a01      	ldr	r2, [sp, #4]
 102d5c8:	fa07 f303 	lsl.w	r3, r7, r3
 102d5cc:	4213      	tst	r3, r2
 102d5ce:	b2e0      	uxtb	r0, r4
 102d5d0:	f104 0401 	add.w	r4, r4, #1
 102d5d4:	d003      	beq.n	102d5de <ICM_Handler+0x36>
	if (icm_callback_pointer[source]) {
 102d5d6:	f8d8 3000 	ldr.w	r3, [r8]
 102d5da:	b103      	cbz	r3, 102d5de <ICM_Handler+0x36>
		icm_callback_pointer[source](reg_num);
 102d5dc:	4798      	blx	r3
			for (j = 0; j < _ICM_NUM_OF_REGION; j++) {
 102d5de:	2c04      	cmp	r4, #4
 102d5e0:	d1f0      	bne.n	102d5c4 <ICM_Handler+0x1c>
 102d5e2:	3504      	adds	r5, #4
		if(i == ICM_INTERRUPT_URAD) {
 102d5e4:	2d18      	cmp	r5, #24
 102d5e6:	d1ea      	bne.n	102d5be <ICM_Handler+0x16>
			if (status & (1 << (_ICM_NUM_OF_REGION * i))) {
 102d5e8:	9b01      	ldr	r3, [sp, #4]
 102d5ea:	01db      	lsls	r3, r3, #7
 102d5ec:	d504      	bpl.n	102d5f8 <ICM_Handler+0x50>
	if (icm_callback_pointer[source]) {
 102d5ee:	4b05      	ldr	r3, [pc, #20]	; (102d604 <ICM_Handler+0x5c>)
 102d5f0:	699b      	ldr	r3, [r3, #24]
 102d5f2:	b10b      	cbz	r3, 102d5f8 <ICM_Handler+0x50>
		icm_callback_pointer[source](reg_num);
 102d5f4:	2000      	movs	r0, #0
 102d5f6:	4798      	blx	r3
					icm_interrupt((enum icm_interrupt_source)i, (enum icm_region_num)j);
				}
			}
		}
	}
}
 102d5f8:	b002      	add	sp, #8
 102d5fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 102d5fe:	bf00      	nop
 102d600:	40044000 	.word	0x40044000
 102d604:	200172c4 	.word	0x200172c4

0102d608 <pdc_enable_transfer>:
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
 102d608:	f240 1301 	movw	r3, #257	; 0x101
 102d60c:	4019      	ands	r1, r3
	p_pdc->PERIPH_PTCR =
 102d60e:	6201      	str	r1, [r0, #32]
 102d610:	4770      	bx	lr
 102d612:	bf00      	nop

0102d614 <pio_set_peripheral>:

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	switch (ul_type) {
 102d614:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
	p_pio->PIO_IDR = ul_mask;
 102d618:	6442      	str	r2, [r0, #68]	; 0x44
	switch (ul_type) {
 102d61a:	d033      	beq.n	102d684 <pio_set_peripheral+0x70>
 102d61c:	d810      	bhi.n	102d640 <pio_set_peripheral+0x2c>
 102d61e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 102d622:	d01c      	beq.n	102d65e <pio_set_peripheral+0x4a>
 102d624:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 102d628:	d129      	bne.n	102d67e <pio_set_peripheral+0x6a>
		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
 102d62a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
 102d62c:	4313      	orrs	r3, r2
 102d62e:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
 102d630:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
 102d632:	6f41      	ldr	r1, [r0, #116]	; 0x74
 102d634:	400b      	ands	r3, r1
 102d636:	ea23 0302 	bic.w	r3, r3, r2
 102d63a:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
 102d63c:	6042      	str	r2, [r0, #4]
 102d63e:	4770      	bx	lr
	switch (ul_type) {
 102d640:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
 102d644:	d01a      	beq.n	102d67c <pio_set_peripheral+0x68>
 102d646:	d828      	bhi.n	102d69a <pio_set_peripheral+0x86>
 102d648:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 102d64c:	d1f6      	bne.n	102d63c <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
 102d64e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
 102d650:	4313      	orrs	r3, r2
 102d652:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
 102d654:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
 102d656:	4313      	orrs	r3, r2
 102d658:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
 102d65a:	6042      	str	r2, [r0, #4]
 102d65c:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
 102d65e:	6f01      	ldr	r1, [r0, #112]	; 0x70
{
 102d660:	b410      	push	{r4}
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
 102d662:	6f04      	ldr	r4, [r0, #112]	; 0x70
 102d664:	43d3      	mvns	r3, r2
 102d666:	4021      	ands	r1, r4
 102d668:	4019      	ands	r1, r3
 102d66a:	6701      	str	r1, [r0, #112]	; 0x70
 102d66c:	461c      	mov	r4, r3
		ul_sr = p_pio->PIO_ABCDSR[1];
 102d66e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
 102d670:	6f41      	ldr	r1, [r0, #116]	; 0x74
 102d672:	400b      	ands	r3, r1
 102d674:	4023      	ands	r3, r4
}
 102d676:	bc10      	pop	{r4}
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
 102d678:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
 102d67a:	6042      	str	r2, [r0, #4]
}
 102d67c:	4770      	bx	lr
	switch (ul_type) {
 102d67e:	2900      	cmp	r1, #0
 102d680:	d1dc      	bne.n	102d63c <pio_set_peripheral+0x28>
 102d682:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
 102d684:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
 102d686:	6f01      	ldr	r1, [r0, #112]	; 0x70
 102d688:	400b      	ands	r3, r1
 102d68a:	ea23 0302 	bic.w	r3, r3, r2
 102d68e:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
 102d690:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
 102d692:	4313      	orrs	r3, r2
 102d694:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
 102d696:	6042      	str	r2, [r0, #4]
 102d698:	4770      	bx	lr
	switch (ul_type) {
 102d69a:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 102d69e:	d0ed      	beq.n	102d67c <pio_set_peripheral+0x68>
 102d6a0:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
 102d6a4:	d0ea      	beq.n	102d67c <pio_set_peripheral+0x68>
 102d6a6:	e7c9      	b.n	102d63c <pio_set_peripheral+0x28>

0102d6a8 <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_ISR;
 102d6a8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
 102d6aa:	6401      	str	r1, [r0, #64]	; 0x40
 102d6ac:	4770      	bx	lr
 102d6ae:	bf00      	nop

0102d6b0 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
 102d6b0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
 102d6b2:	4770      	bx	lr

0102d6b4 <pio_set_additional_interrupt_mode>:
 */
void pio_set_additional_interrupt_mode(Pio *p_pio,
		const uint32_t ul_mask, const uint32_t ul_attribute)
{
	/* Enables additional interrupt mode if needed */
	if (ul_attribute & PIO_IT_AIME) {
 102d6b4:	06d3      	lsls	r3, r2, #27
 102d6b6:	d50e      	bpl.n	102d6d6 <pio_set_additional_interrupt_mode+0x22>
		/* Enables additional interrupt mode */
		p_pio->PIO_AIMER = ul_mask;

		/* Configures the Polarity of the event detection */
		/* (Rising/Falling Edge or High/Low Level) */
		if (ul_attribute & PIO_IT_RE_OR_HL) {
 102d6b8:	0693      	lsls	r3, r2, #26
		p_pio->PIO_AIMER = ul_mask;
 102d6ba:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
 102d6be:	bf4c      	ite	mi
 102d6c0:	f8c0 10d4 	strmi.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
 102d6c4:	f8c0 10d0 	strpl.w	r1, [r0, #208]	; 0xd0
		}

		/* Configures the type of event detection (Edge or Level) */
		if (ul_attribute & PIO_IT_EDGE) {
 102d6c8:	0653      	lsls	r3, r2, #25
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
 102d6ca:	bf4c      	ite	mi
 102d6cc:	f8c0 10c0 	strmi.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
 102d6d0:	f8c0 10c4 	strpl.w	r1, [r0, #196]	; 0xc4
 102d6d4:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode */
		p_pio->PIO_AIMDR = ul_mask;
 102d6d6:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
 102d6da:	4770      	bx	lr

0102d6dc <pio_configure_interrupt>:
 102d6dc:	4b00      	ldr	r3, [pc, #0]	; (102d6e0 <pio_configure_interrupt+0x4>)
 102d6de:	4718      	bx	r3
 102d6e0:	0102d6b5 	.word	0x0102d6b5

0102d6e4 <pio_configure_pin>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#elif (SAM4CM)
	if (ul_pin > PIO_PB21_IDX) {
 102d6e4:	2835      	cmp	r0, #53	; 0x35
{
 102d6e6:	b470      	push	{r4, r5, r6}
	if (ul_pin > PIO_PB21_IDX) {
 102d6e8:	d818      	bhi.n	102d71c <pio_configure_pin+0x38>
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
 102d6ea:	0943      	lsrs	r3, r0, #5
 102d6ec:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
	switch (ul_flags & PIO_TYPE_Msk) {
 102d6f0:	f001 42f0 	and.w	r2, r1, #2013265920	; 0x78000000
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
 102d6f4:	f203 7307 	addw	r3, r3, #1799	; 0x707
	switch (ul_flags & PIO_TYPE_Msk) {
 102d6f8:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
 102d6fc:	ea4f 2343 	mov.w	r3, r3, lsl #9
	switch (ul_flags & PIO_TYPE_Msk) {
 102d700:	d012      	beq.n	102d728 <pio_configure_pin+0x44>
 102d702:	d81a      	bhi.n	102d73a <pio_configure_pin+0x56>
 102d704:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 102d708:	d037      	beq.n	102d77a <pio_configure_pin+0x96>
 102d70a:	f1b2 5fc0 	cmp.w	r2, #402653184	; 0x18000000
 102d70e:	d079      	beq.n	102d804 <pio_configure_pin+0x120>
 102d710:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 102d714:	d046      	beq.n	102d7a4 <pio_configure_pin+0xc0>
		return 0;
 102d716:	2000      	movs	r0, #0
}
 102d718:	bc70      	pop	{r4, r5, r6}
 102d71a:	4770      	bx	lr
	switch (ul_flags & PIO_TYPE_Msk) {
 102d71c:	f001 42f0 	and.w	r2, r1, #2013265920	; 0x78000000
 102d720:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
	if (ul_pin > PIO_PB21_IDX) {
 102d724:	4b45      	ldr	r3, [pc, #276]	; (102d83c <pio_configure_pin+0x158>)
	switch (ul_flags & PIO_TYPE_Msk) {
 102d726:	d1ec      	bne.n	102d702 <pio_configure_pin+0x1e>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
 102d728:	f000 021f 	and.w	r2, r0, #31
 102d72c:	2001      	movs	r0, #1
 102d72e:	fa00 f202 	lsl.w	r2, r0, r2
	p_pio->PIO_IDR = ul_mask;
 102d732:	645a      	str	r2, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABCDSR[0];
 102d734:	6f1c      	ldr	r4, [r3, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
 102d736:	4314      	orrs	r4, r2
 102d738:	e06f      	b.n	102d81a <pio_configure_pin+0x136>
	switch (ul_flags & PIO_TYPE_Msk) {
 102d73a:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 102d73e:	d048      	beq.n	102d7d2 <pio_configure_pin+0xee>
 102d740:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
 102d744:	d045      	beq.n	102d7d2 <pio_configure_pin+0xee>
 102d746:	f1b2 5f20 	cmp.w	r2, #671088640	; 0x28000000
 102d74a:	d1e4      	bne.n	102d716 <pio_configure_pin+0x32>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
 102d74c:	f000 001f 	and.w	r0, r0, #31
 102d750:	2201      	movs	r2, #1
 102d752:	4082      	lsls	r2, r0
	if (ul_pull_up_enable) {
 102d754:	07cd      	lsls	r5, r1, #31
	p_pio->PIO_IDR = ul_mask;
 102d756:	645a      	str	r2, [r3, #68]	; 0x44
		p_pio->PIO_PUER = ul_mask;
 102d758:	bf4c      	ite	mi
 102d75a:	665a      	strmi	r2, [r3, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
 102d75c:	661a      	strpl	r2, [r3, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
 102d75e:	f011 0f0a 	tst.w	r1, #10
		p_pio->PIO_IFER = ul_mask;
 102d762:	bf14      	ite	ne
 102d764:	621a      	strne	r2, [r3, #32]
		p_pio->PIO_IFDR = ul_mask;
 102d766:	625a      	streq	r2, [r3, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
 102d768:	078c      	lsls	r4, r1, #30
 102d76a:	d55f      	bpl.n	102d82c <pio_configure_pin+0x148>
		p_pio->PIO_IFSCDR = ul_mask;
 102d76c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
 102d770:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
 102d772:	601a      	str	r2, [r3, #0]
	return 1;
 102d774:	2001      	movs	r0, #1
}
 102d776:	bc70      	pop	{r4, r5, r6}
 102d778:	4770      	bx	lr
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
 102d77a:	f000 021f 	and.w	r2, r0, #31
 102d77e:	2001      	movs	r0, #1
 102d780:	fa00 f202 	lsl.w	r2, r0, r2
	p_pio->PIO_IDR = ul_mask;
 102d784:	645a      	str	r2, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABCDSR[0];
 102d786:	6f1c      	ldr	r4, [r3, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
 102d788:	4314      	orrs	r4, r2
 102d78a:	671c      	str	r4, [r3, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
 102d78c:	6f5c      	ldr	r4, [r3, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
 102d78e:	6f5d      	ldr	r5, [r3, #116]	; 0x74
 102d790:	402c      	ands	r4, r5
 102d792:	ea24 0402 	bic.w	r4, r4, r2
	if (ul_pull_up_enable) {
 102d796:	07c9      	lsls	r1, r1, #31
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
 102d798:	675c      	str	r4, [r3, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
 102d79a:	605a      	str	r2, [r3, #4]
	if (ul_pull_up_enable) {
 102d79c:	d516      	bpl.n	102d7cc <pio_configure_pin+0xe8>
		p_pio->PIO_PUER = ul_mask;
 102d79e:	665a      	str	r2, [r3, #100]	; 0x64
}
 102d7a0:	bc70      	pop	{r4, r5, r6}
 102d7a2:	4770      	bx	lr
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
 102d7a4:	f000 021f 	and.w	r2, r0, #31
 102d7a8:	2001      	movs	r0, #1
 102d7aa:	fa00 f202 	lsl.w	r2, r0, r2
	p_pio->PIO_IDR = ul_mask;
 102d7ae:	645a      	str	r2, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABCDSR[0];
 102d7b0:	6f1d      	ldr	r5, [r3, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
 102d7b2:	6f1c      	ldr	r4, [r3, #112]	; 0x70
 102d7b4:	43d6      	mvns	r6, r2
 102d7b6:	4025      	ands	r5, r4
 102d7b8:	4035      	ands	r5, r6
 102d7ba:	671d      	str	r5, [r3, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
 102d7bc:	6f5c      	ldr	r4, [r3, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
 102d7be:	6f5d      	ldr	r5, [r3, #116]	; 0x74
 102d7c0:	402c      	ands	r4, r5
 102d7c2:	4034      	ands	r4, r6
 102d7c4:	675c      	str	r4, [r3, #116]	; 0x74
	if (ul_pull_up_enable) {
 102d7c6:	07cc      	lsls	r4, r1, #31
	p_pio->PIO_PDR = ul_mask;
 102d7c8:	605a      	str	r2, [r3, #4]
	if (ul_pull_up_enable) {
 102d7ca:	d4e8      	bmi.n	102d79e <pio_configure_pin+0xba>
		p_pio->PIO_PUDR = ul_mask;
 102d7cc:	661a      	str	r2, [r3, #96]	; 0x60
}
 102d7ce:	bc70      	pop	{r4, r5, r6}
 102d7d0:	4770      	bx	lr
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
 102d7d2:	f000 001f 	and.w	r0, r0, #31
 102d7d6:	2201      	movs	r2, #1
 102d7d8:	4082      	lsls	r2, r0
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
 102d7da:	f001 0404 	and.w	r4, r1, #4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
 102d7de:	f001 5060 	and.w	r0, r1, #939524096	; 0x38000000
	if (ul_pull_up_enable) {
 102d7e2:	07c9      	lsls	r1, r1, #31
	p_pio->PIO_IDR = ul_mask;
 102d7e4:	645a      	str	r2, [r3, #68]	; 0x44
		p_pio->PIO_PUER = ul_mask;
 102d7e6:	bf4c      	ite	mi
 102d7e8:	665a      	strmi	r2, [r3, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
 102d7ea:	661a      	strpl	r2, [r3, #96]	; 0x60
	if (ul_multidrive_enable) {
 102d7ec:	b31c      	cbz	r4, 102d836 <pio_configure_pin+0x152>
		p_pio->PIO_MDER = ul_mask;
 102d7ee:	651a      	str	r2, [r3, #80]	; 0x50
	if (ul_default_level) {
 102d7f0:	f1b0 5f60 	cmp.w	r0, #939524096	; 0x38000000
		p_pio->PIO_SODR = ul_mask;
 102d7f4:	bf0c      	ite	eq
 102d7f6:	631a      	streq	r2, [r3, #48]	; 0x30
		p_pio->PIO_CODR = ul_mask;
 102d7f8:	635a      	strne	r2, [r3, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
 102d7fa:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
 102d7fc:	601a      	str	r2, [r3, #0]
	return 1;
 102d7fe:	2001      	movs	r0, #1
}
 102d800:	bc70      	pop	{r4, r5, r6}
 102d802:	4770      	bx	lr
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
 102d804:	f000 021f 	and.w	r2, r0, #31
 102d808:	2001      	movs	r0, #1
 102d80a:	fa00 f202 	lsl.w	r2, r0, r2
	p_pio->PIO_IDR = ul_mask;
 102d80e:	645a      	str	r2, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABCDSR[0];
 102d810:	6f1c      	ldr	r4, [r3, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
 102d812:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 102d814:	402c      	ands	r4, r5
 102d816:	ea24 0402 	bic.w	r4, r4, r2
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
 102d81a:	671c      	str	r4, [r3, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
 102d81c:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	if (ul_pull_up_enable) {
 102d81e:	07ce      	lsls	r6, r1, #31
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
 102d820:	ea44 0402 	orr.w	r4, r4, r2
 102d824:	675c      	str	r4, [r3, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
 102d826:	605a      	str	r2, [r3, #4]
	if (ul_pull_up_enable) {
 102d828:	d5d0      	bpl.n	102d7cc <pio_configure_pin+0xe8>
 102d82a:	e7b8      	b.n	102d79e <pio_configure_pin+0xba>
		if (ul_attribute & PIO_DEBOUNCE) {
 102d82c:	0708      	lsls	r0, r1, #28
			p_pio->PIO_IFSCER = ul_mask;
 102d82e:	bf48      	it	mi
 102d830:	f8c3 2084 	strmi.w	r2, [r3, #132]	; 0x84
 102d834:	e79c      	b.n	102d770 <pio_configure_pin+0x8c>
		p_pio->PIO_MDDR = ul_mask;
 102d836:	655a      	str	r2, [r3, #84]	; 0x54
 102d838:	e7da      	b.n	102d7f0 <pio_configure_pin+0x10c>
 102d83a:	bf00      	nop
 102d83c:	4800c000 	.word	0x4800c000

0102d840 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
 102d840:	282b      	cmp	r0, #43	; 0x2b
 102d842:	d819      	bhi.n	102d878 <pmc_enable_periph_clk+0x38>
		return 1;
	}

	if (ul_id < 32) {
 102d844:	281f      	cmp	r0, #31
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
 102d846:	4a0e      	ldr	r2, [pc, #56]	; (102d880 <pmc_enable_periph_clk+0x40>)
	if (ul_id < 32) {
 102d848:	d809      	bhi.n	102d85e <pmc_enable_periph_clk+0x1e>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
 102d84a:	2301      	movs	r3, #1
 102d84c:	6991      	ldr	r1, [r2, #24]
 102d84e:	fa03 f000 	lsl.w	r0, r3, r0
 102d852:	ea30 0301 	bics.w	r3, r0, r1
 102d856:	d011      	beq.n	102d87c <pmc_enable_periph_clk+0x3c>
			PMC->PMC_PCER0 = 1 << ul_id;
 102d858:	6110      	str	r0, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
 102d85a:	2000      	movs	r0, #0
 102d85c:	4770      	bx	lr
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
 102d85e:	2301      	movs	r3, #1
		ul_id -= 32;
 102d860:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
 102d862:	f8d2 1108 	ldr.w	r1, [r2, #264]	; 0x108
 102d866:	fa03 f000 	lsl.w	r0, r3, r0
 102d86a:	ea30 0301 	bics.w	r3, r0, r1
 102d86e:	d005      	beq.n	102d87c <pmc_enable_periph_clk+0x3c>
			PMC->PMC_PCER1 = 1 << ul_id;
 102d870:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
	return 0;
 102d874:	2000      	movs	r0, #0
 102d876:	4770      	bx	lr
		return 1;
 102d878:	2001      	movs	r0, #1
 102d87a:	4770      	bx	lr
	return 0;
 102d87c:	2000      	movs	r0, #0
}
 102d87e:	4770      	bx	lr
 102d880:	400e0400 	.word	0x400e0400

0102d884 <pmc_switch_pck_to_pllack>:
 */
uint32_t pmc_switch_pck_to_pllack(uint32_t ul_id, uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_PLLA_CLK | ul_pres;
 102d884:	f100 0210 	add.w	r2, r0, #16
 102d888:	4b0c      	ldr	r3, [pc, #48]	; (102d8bc <pmc_switch_pck_to_pllack+0x38>)
 102d88a:	f041 0102 	orr.w	r1, r1, #2
 102d88e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (ul_timeout = PMC_TIMEOUT;
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 102d892:	f44f 7280 	mov.w	r2, #256	; 0x100
 102d896:	6e99      	ldr	r1, [r3, #104]	; 0x68
 102d898:	fa02 f000 	lsl.w	r0, r2, r0
	for (ul_timeout = PMC_TIMEOUT;
 102d89c:	4201      	tst	r1, r0
 102d89e:	d108      	bne.n	102d8b2 <pmc_switch_pck_to_pllack+0x2e>
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 102d8a0:	4619      	mov	r1, r3
	for (ul_timeout = PMC_TIMEOUT;
 102d8a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 102d8a6:	e001      	b.n	102d8ac <pmc_switch_pck_to_pllack+0x28>
		if (ul_timeout == 0) {
 102d8a8:	3b01      	subs	r3, #1
 102d8aa:	d004      	beq.n	102d8b6 <pmc_switch_pck_to_pllack+0x32>
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 102d8ac:	6e8a      	ldr	r2, [r1, #104]	; 0x68
	for (ul_timeout = PMC_TIMEOUT;
 102d8ae:	4202      	tst	r2, r0
 102d8b0:	d0fa      	beq.n	102d8a8 <pmc_switch_pck_to_pllack+0x24>
			return 1;
		}
	}

	return 0;
 102d8b2:	2000      	movs	r0, #0
 102d8b4:	4770      	bx	lr
			return 1;
 102d8b6:	2001      	movs	r0, #1
}
 102d8b8:	4770      	bx	lr
 102d8ba:	bf00      	nop
 102d8bc:	400e0400 	.word	0x400e0400

0102d8c0 <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
 102d8c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 102d8c4:	4a02      	ldr	r2, [pc, #8]	; (102d8d0 <pmc_enable_pck+0x10>)
 102d8c6:	fa03 f000 	lsl.w	r0, r3, r0
 102d8ca:	6010      	str	r0, [r2, #0]
 102d8cc:	4770      	bx	lr
 102d8ce:	bf00      	nop
 102d8d0:	400e0400 	.word	0x400e0400

0102d8d4 <rstc_start_software_reset>:
 * \param[out] p_rstc Module hardware register base address pointer
 */
void rstc_start_software_reset(
		Rstc *p_rstc)
{
	p_rstc->RSTC_CR = RSTC_KEY | RSTC_CR_PROCRST | RSTC_CR_PERRST;
 102d8d4:	4b01      	ldr	r3, [pc, #4]	; (102d8dc <rstc_start_software_reset+0x8>)
 102d8d6:	6003      	str	r3, [r0, #0]
 102d8d8:	4770      	bx	lr
 102d8da:	bf00      	nop
 102d8dc:	a5000005 	.word	0xa5000005

0102d8e0 <rstc_get_reset_cause>:
 * \return The last reset cause.
 */
uint32_t rstc_get_reset_cause(
		Rstc *p_rstc)
{
	return (p_rstc->RSTC_SR & RSTC_SR_RSTTYP_Msk);
 102d8e0:	6840      	ldr	r0, [r0, #4]
}
 102d8e2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 102d8e6:	4770      	bx	lr

0102d8e8 <rtt_enable_interrupt>:
	uint32_t temp;

	temp = p_rtt->RTT_MR;
	temp |= ul_sources;
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM)
	temp |= g_wobits_in_rtt_mr;
 102d8e8:	4b03      	ldr	r3, [pc, #12]	; (102d8f8 <rtt_enable_interrupt+0x10>)
	temp = p_rtt->RTT_MR;
 102d8ea:	6802      	ldr	r2, [r0, #0]
	temp |= g_wobits_in_rtt_mr;
 102d8ec:	681b      	ldr	r3, [r3, #0]
 102d8ee:	4319      	orrs	r1, r3
 102d8f0:	4311      	orrs	r1, r2
#endif
	p_rtt->RTT_MR = temp;
 102d8f2:	6001      	str	r1, [r0, #0]
 102d8f4:	4770      	bx	lr
 102d8f6:	bf00      	nop
 102d8f8:	200082cc 	.word	0x200082cc

0102d8fc <rtt_read_timer_value>:
 *
 * \return The current Real-time Timer value.
 */
uint32_t rtt_read_timer_value(Rtt *p_rtt)
{
	return p_rtt->RTT_VR;
 102d8fc:	6880      	ldr	r0, [r0, #8]
}
 102d8fe:	4770      	bx	lr

0102d900 <rtt_get_status>:
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
	return p_rtt->RTT_SR;
 102d900:	68c0      	ldr	r0, [r0, #12]
}
 102d902:	4770      	bx	lr

0102d904 <supc_enable_brownout_reset>:
 *
 * \param p_supc Pointer to a SUPC instance.
 */
void supc_enable_brownout_reset(Supc *p_supc)
{
	uint32_t ul_mr = p_supc->SUPC_MR & (~(SUPC_MR_KEY_Msk | SUPC_MR_BODRSTEN));
 102d904:	6883      	ldr	r3, [r0, #8]
 102d906:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 102d90a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
	p_supc->SUPC_MR = SUPC_MR_KEY_PASSWD | ul_mr | SUPC_MR_BODRSTEN;
 102d90e:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
 102d912:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 102d916:	6083      	str	r3, [r0, #8]
 102d918:	4770      	bx	lr
 102d91a:	bf00      	nop

0102d91c <supc_set_monitor_threshold>:
 * \param ul_threshold Supply monitor threshold (between 1.9V and 3.4V).
 */
void supc_set_monitor_threshold(Supc *p_supc, uint32_t ul_threshold)
{
	uint32_t ul_smmr = p_supc->SUPC_SMMR & (~SUPC_SMMR_SMTH_Msk);
	p_supc->SUPC_SMMR = ul_smmr | (SUPC_SMMR_SMTH_Msk & ul_threshold);
 102d91c:	f001 030f 	and.w	r3, r1, #15
	uint32_t ul_smmr = p_supc->SUPC_SMMR & (~SUPC_SMMR_SMTH_Msk);
 102d920:	6841      	ldr	r1, [r0, #4]
 102d922:	f021 010f 	bic.w	r1, r1, #15
	p_supc->SUPC_SMMR = ul_smmr | (SUPC_SMMR_SMTH_Msk & ul_threshold);
 102d926:	4319      	orrs	r1, r3
 102d928:	6041      	str	r1, [r0, #4]
 102d92a:	4770      	bx	lr

0102d92c <supc_set_monitor_sampling_period>:
 * \param ul_period Supply monitor sampling period.
 */
void supc_set_monitor_sampling_period(Supc *p_supc, uint32_t ul_period)
{
	uint32_t ul_smmr = p_supc->SUPC_SMMR & (~SUPC_SMMR_SMSMPL_Msk);
	p_supc->SUPC_SMMR = ul_smmr | (SUPC_SMMR_SMSMPL_Msk & ul_period);
 102d92c:	f401 63e0 	and.w	r3, r1, #1792	; 0x700
	uint32_t ul_smmr = p_supc->SUPC_SMMR & (~SUPC_SMMR_SMSMPL_Msk);
 102d930:	6841      	ldr	r1, [r0, #4]
 102d932:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
	p_supc->SUPC_SMMR = ul_smmr | (SUPC_SMMR_SMSMPL_Msk & ul_period);
 102d936:	4319      	orrs	r1, r3
 102d938:	6041      	str	r1, [r0, #4]
 102d93a:	4770      	bx	lr

0102d93c <supc_enable_monitor_reset>:
 *
 * \param p_supc Pointer to a SUPC instance.
 */
void supc_enable_monitor_reset(Supc *p_supc)
{
	p_supc->SUPC_SMMR |= SUPC_SMMR_SMRSTEN;
 102d93c:	6843      	ldr	r3, [r0, #4]
 102d93e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 102d942:	6043      	str	r3, [r0, #4]
 102d944:	4770      	bx	lr
 102d946:	bf00      	nop

0102d948 <wdt_get_timeout_value>:
 */
uint32_t wdt_get_timeout_value(uint32_t ul_us, uint32_t ul_sclk)
{
	uint32_t max, min;

	min = WDT_SLCK_DIV * 1000000 / ul_sclk;
 102d948:	4b08      	ldr	r3, [pc, #32]	; (102d96c <wdt_get_timeout_value+0x24>)
 102d94a:	fbb3 f1f1 	udiv	r1, r3, r1
	max = min * WDT_MAX_VALUE;

	if ((ul_us < min) || (ul_us > max)) {
 102d94e:	4281      	cmp	r1, r0
 102d950:	d902      	bls.n	102d958 <wdt_get_timeout_value+0x10>
		return WDT_INVALID_ARGUMENT;
 102d952:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}

	return WDT_MR_WDV(ul_us / min);
}
 102d956:	4770      	bx	lr
	max = min * WDT_MAX_VALUE;
 102d958:	ebc1 3301 	rsb	r3, r1, r1, lsl #12
	if ((ul_us < min) || (ul_us > max)) {
 102d95c:	4283      	cmp	r3, r0
 102d95e:	d3f8      	bcc.n	102d952 <wdt_get_timeout_value+0xa>
	return WDT_MR_WDV(ul_us / min);
 102d960:	fbb0 f0f1 	udiv	r0, r0, r1
 102d964:	f3c0 000b 	ubfx	r0, r0, #0, #12
 102d968:	4770      	bx	lr
 102d96a:	bf00      	nop
 102d96c:	07a12000 	.word	0x07a12000

0102d970 <wdt_init>:
 * \param us_counter The value loaded in the 12-bit Watchdog Counter.
 * \param us_delta The permitted range for reloading the Watchdog Timer.
 */
void wdt_init(Wdt *p_wdt, uint32_t ul_mode, uint16_t us_counter,
		uint16_t us_delta)
{
 102d970:	b410      	push	{r4}
	p_wdt->WDT_MR = ul_mode |
			WDT_MR_WDV(us_counter) | WDT_MR_WDD(us_delta);
 102d972:	4c05      	ldr	r4, [pc, #20]	; (102d988 <wdt_init+0x18>)
 102d974:	f3c2 020b 	ubfx	r2, r2, #0, #12
 102d978:	ea04 4303 	and.w	r3, r4, r3, lsl #16
 102d97c:	4313      	orrs	r3, r2
 102d97e:	430b      	orrs	r3, r1
	p_wdt->WDT_MR = ul_mode |
 102d980:	6043      	str	r3, [r0, #4]
}
 102d982:	bc10      	pop	{r4}
 102d984:	4770      	bx	lr
 102d986:	bf00      	nop
 102d988:	0fff0000 	.word	0x0fff0000

0102d98c <wdt_restart>:
/**
 * \brief Restart the watchdog timer.
 */
void wdt_restart(Wdt *p_wdt)
{
	if (p_wdt == WDT) {
 102d98c:	4b03      	ldr	r3, [pc, #12]	; (102d99c <wdt_restart+0x10>)
 102d98e:	4298      	cmp	r0, r3
		p_wdt->WDT_CR = WDT_KEY_PASSWORD | WDT_CR_WDRSTT;
 102d990:	bf0c      	ite	eq
 102d992:	4b03      	ldreq	r3, [pc, #12]	; (102d9a0 <wdt_restart+0x14>)
	}
#if (SAM4C || SAM4CM || SAM4CP)
	else {
		p_wdt->WDT_CR = RSWDT_CR_KEY(0xC4u) | RSWDT_CR_WDRSTT;
 102d994:	4b03      	ldrne	r3, [pc, #12]	; (102d9a4 <wdt_restart+0x18>)
 102d996:	6003      	str	r3, [r0, #0]
 102d998:	4770      	bx	lr
 102d99a:	bf00      	nop
 102d99c:	400e1450 	.word	0x400e1450
 102d9a0:	a5000001 	.word	0xa5000001
 102d9a4:	c4000001 	.word	0xc4000001

0102d9a8 <wdt_get_status>:
 *
 * \return Bitmask of watchdog timer status.
 */
uint32_t wdt_get_status(Wdt *p_wdt)
{
	return p_wdt->WDT_SR;
 102d9a8:	6880      	ldr	r0, [r0, #8]
}
 102d9aa:	4770      	bx	lr

0102d9ac <flash_init>:
 * \param ul_fws The number of wait states in cycle (no shift).
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_init(uint32_t ul_mode, uint32_t ul_fws)
{
 102d9ac:	b508      	push	{r3, lr}
	efc_init(EFC, ul_mode, ul_fws);
 102d9ae:	460a      	mov	r2, r1
 102d9b0:	4b02      	ldr	r3, [pc, #8]	; (102d9bc <flash_init+0x10>)
 102d9b2:	4601      	mov	r1, r0
 102d9b4:	4802      	ldr	r0, [pc, #8]	; (102d9c0 <flash_init+0x14>)
 102d9b6:	4798      	blx	r3
#ifdef EFC1
	efc_init(EFC1, ul_mode, ul_fws);
#endif

	return FLASH_RC_OK;
}
 102d9b8:	2000      	movs	r0, #0
 102d9ba:	bd08      	pop	{r3, pc}
 102d9bc:	0102d53d 	.word	0x0102d53d
 102d9c0:	400e0a00 	.word	0x400e0a00

0102d9c4 <flash_erase_page>:
uint32_t flash_erase_page(uint32_t ul_address, uint8_t uc_page_num)
{
	Efc *p_efc;
	uint16_t us_page;

	if (uc_page_num >= IFLASH_ERASE_PAGES_INVALID) {
 102d9c4:	2903      	cmp	r1, #3
 102d9c6:	d901      	bls.n	102d9cc <flash_erase_page+0x8>
		return FLASH_RC_INVALID;
 102d9c8:	2011      	movs	r0, #17
 102d9ca:	4770      	bx	lr
{
 102d9cc:	b508      	push	{r3, lr}
	}

	if (ul_address & (IFLASH_PAGE_SIZE - 1)) {
 102d9ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 102d9d2:	b10b      	cbz	r3, 102d9d8 <flash_erase_page+0x14>
		return FLASH_RC_INVALID;
 102d9d4:	2011      	movs	r0, #17
					(us_page | uc_page_num))) {
		return FLASH_RC_ERROR;
	}

	return FLASH_RC_OK;
}
 102d9d6:	bd08      	pop	{r3, pc}
	us_page = (ul_addr - IFLASH_ADDR) / IFLASH_PAGE_SIZE;
 102d9d8:	f100 427f 	add.w	r2, r0, #4278190080	; 0xff000000
					(us_page | uc_page_num))) {
 102d9dc:	f3c2 224f 	ubfx	r2, r2, #9, #16
	if (EFC_RC_OK != efc_perform_command(p_efc, EFC_FCMD_EPA,
 102d9e0:	430a      	orrs	r2, r1
 102d9e2:	4b04      	ldr	r3, [pc, #16]	; (102d9f4 <flash_erase_page+0x30>)
 102d9e4:	4804      	ldr	r0, [pc, #16]	; (102d9f8 <flash_erase_page+0x34>)
 102d9e6:	2107      	movs	r1, #7
 102d9e8:	4798      	blx	r3
		return FLASH_RC_ERROR;
 102d9ea:	2800      	cmp	r0, #0
 102d9ec:	bf14      	ite	ne
 102d9ee:	2010      	movne	r0, #16
 102d9f0:	2000      	moveq	r0, #0
 102d9f2:	bd08      	pop	{r3, pc}
 102d9f4:	0102d559 	.word	0x0102d559
 102d9f8:	400e0a00 	.word	0x400e0a00

0102d9fc <flash_erase_sector>:
 * \param ul_address Flash sector start address.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_erase_sector(uint32_t ul_address)
{
 102d9fc:	b508      	push	{r3, lr}
	us_page = (ul_addr - IFLASH_ADDR) / IFLASH_PAGE_SIZE;
 102d9fe:	f100 427f 	add.w	r2, r0, #4278190080	; 0xff000000
	Efc *p_efc;
	uint16_t us_page;

	translate_address(&p_efc, ul_address, &us_page, NULL);

	if (EFC_RC_OK != efc_perform_command(p_efc, EFC_FCMD_ES, us_page)) {
 102da02:	f3c2 224f 	ubfx	r2, r2, #9, #16
 102da06:	2111      	movs	r1, #17
 102da08:	4b03      	ldr	r3, [pc, #12]	; (102da18 <flash_erase_sector+0x1c>)
 102da0a:	4804      	ldr	r0, [pc, #16]	; (102da1c <flash_erase_sector+0x20>)
 102da0c:	4798      	blx	r3
		return FLASH_RC_ERROR;
	}

	return FLASH_RC_OK;
}
 102da0e:	2800      	cmp	r0, #0
 102da10:	bf14      	ite	ne
 102da12:	2010      	movne	r0, #16
 102da14:	2000      	moveq	r0, #0
 102da16:	bd08      	pop	{r3, pc}
 102da18:	0102d559 	.word	0x0102d559
 102da1c:	400e0a00 	.word	0x400e0a00

0102da20 <flash_write>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_write(uint32_t ul_address, const void *p_buffer,
		uint32_t ul_size, uint32_t ul_erase_flag)
{
 102da20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 102da24:	b083      	sub	sp, #12
	us_page = (ul_addr - IFLASH_ADDR) / IFLASH_PAGE_SIZE;
 102da26:	f100 487f 	add.w	r8, r0, #4278190080	; 0xff000000
{
 102da2a:	9301      	str	r3, [sp, #4]
	us_page = (ul_addr - IFLASH_ADDR) / IFLASH_PAGE_SIZE;
 102da2c:	f3c8 284f 	ubfx	r8, r8, #9, #16
	us_offset = (ul_addr - IFLASH_ADDR) % IFLASH_PAGE_SIZE;
 102da30:	f3c0 0608 	ubfx	r6, r0, #0, #9
#else
	UNUSED(ul_fws_temp);
#endif

	/* Write all pages */
	while (ul_size > 0) {
 102da34:	2a00      	cmp	r2, #0
 102da36:	d03b      	beq.n	102dab0 <flash_write+0x90>
 102da38:	4b22      	ldr	r3, [pc, #136]	; (102dac4 <flash_write+0xa4>)
 102da3a:	f8df a098 	ldr.w	sl, [pc, #152]	; 102dad4 <flash_write+0xb4>
 102da3e:	468b      	mov	fp, r1
 102da40:	4691      	mov	r9, r2
 102da42:	f503 75fe 	add.w	r5, r3, #508	; 0x1fc
	ul_addr = IFLASH_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
 102da46:	f508 4400 	add.w	r4, r8, #32768	; 0x8000
		/* Copy data in temporary buffer to avoid alignment problems. */
		writeSize = Min((uint32_t) IFLASH_PAGE_SIZE - us_offset,
 102da4a:	f5c6 7300 	rsb	r3, r6, #512	; 0x200
	ul_addr = IFLASH_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
 102da4e:	0264      	lsls	r4, r4, #9
		writeSize = Min((uint32_t) IFLASH_PAGE_SIZE - us_offset,
 102da50:	454b      	cmp	r3, r9
				ul_size);
		compute_address(p_efc, us_page, 0, &ul_page_addr);
		us_padding = IFLASH_PAGE_SIZE - us_offset - writeSize;

		/* Pre-buffer data */
		memcpy(puc_page_buffer, (void *)ul_page_addr, us_offset);
 102da52:	4621      	mov	r1, r4
 102da54:	4632      	mov	r2, r6
 102da56:	481b      	ldr	r0, [pc, #108]	; (102dac4 <flash_write+0xa4>)
		writeSize = Min((uint32_t) IFLASH_PAGE_SIZE - us_offset,
 102da58:	9300      	str	r3, [sp, #0]
 102da5a:	461f      	mov	r7, r3
 102da5c:	bf28      	it	cs
 102da5e:	464f      	movcs	r7, r9
		memcpy(puc_page_buffer, (void *)ul_page_addr, us_offset);
 102da60:	47d0      	blx	sl

		/* Buffer data */
		memcpy(puc_page_buffer + us_offset, p_buffer, writeSize);
 102da62:	4b18      	ldr	r3, [pc, #96]	; (102dac4 <flash_write+0xa4>)
 102da64:	463a      	mov	r2, r7
 102da66:	4659      	mov	r1, fp
 102da68:	1998      	adds	r0, r3, r6
 102da6a:	47d0      	blx	sl
		us_padding = IFLASH_PAGE_SIZE - us_offset - writeSize;
 102da6c:	9b00      	ldr	r3, [sp, #0]
 102da6e:	1bdb      	subs	r3, r3, r7

		/* Post-buffer data */
		memcpy(puc_page_buffer + us_offset + writeSize,
 102da70:	b29a      	uxth	r2, r3
 102da72:	4b14      	ldr	r3, [pc, #80]	; (102dac4 <flash_write+0xa4>)
				(void *)(ul_page_addr + us_offset + writeSize),
 102da74:	1939      	adds	r1, r7, r4
		memcpy(puc_page_buffer + us_offset + writeSize,
 102da76:	19f0      	adds	r0, r6, r7
 102da78:	4418      	add	r0, r3
 102da7a:	4431      	add	r1, r6
 102da7c:	47d0      	blx	sl
 102da7e:	4b12      	ldr	r3, [pc, #72]	; (102dac8 <flash_write+0xa8>)
 102da80:	3c04      	subs	r4, #4
		 * unpredictable data corruption.
		 */
		p_aligned_dest = (uint32_t *) ul_page_addr;
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
				++ul_idx) {
			*p_aligned_dest++ = gs_ul_page_buffer[ul_idx];
 102da82:	f853 2f04 	ldr.w	r2, [r3, #4]!
 102da86:	f844 2f04 	str.w	r2, [r4, #4]!
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
 102da8a:	429d      	cmp	r5, r3
 102da8c:	d1f9      	bne.n	102da82 <flash_write+0x62>
		}

		if (ul_erase_flag) {
 102da8e:	9b01      	ldr	r3, [sp, #4]
			ul_error = efc_perform_command(p_efc, EFC_FCMD_EWP,
 102da90:	4642      	mov	r2, r8
		if (ul_erase_flag) {
 102da92:	b18b      	cbz	r3, 102dab8 <flash_write+0x98>
			ul_error = efc_perform_command(p_efc, EFC_FCMD_EWP,
 102da94:	2103      	movs	r1, #3
 102da96:	480d      	ldr	r0, [pc, #52]	; (102dacc <flash_write+0xac>)
 102da98:	4b0d      	ldr	r3, [pc, #52]	; (102dad0 <flash_write+0xb0>)
 102da9a:	4798      	blx	r3
		} else {
			ul_error = efc_perform_command(p_efc, EFC_FCMD_WP,
					us_page);
		}

		if (ul_error) {
 102da9c:	b948      	cbnz	r0, 102dab2 <flash_write+0x92>
		}

		/* Progression */
		p_buffer = (void *)((uint32_t) p_buffer + writeSize);
		ul_size -= writeSize;
		us_page++;
 102da9e:	f108 0801 	add.w	r8, r8, #1
	while (ul_size > 0) {
 102daa2:	ebb9 0907 	subs.w	r9, r9, r7
		us_page++;
 102daa6:	fa1f f888 	uxth.w	r8, r8
		p_buffer = (void *)((uint32_t) p_buffer + writeSize);
 102daaa:	44bb      	add	fp, r7
		us_offset = 0;
 102daac:	4606      	mov	r6, r0
	while (ul_size > 0) {
 102daae:	d1ca      	bne.n	102da46 <flash_write+0x26>
#if SAM3S || SAM3N || SAM3XA || SAM3U
	/* According to the errata, restore the wait state value. */
	efc_set_wait_state(p_efc, ul_fws_temp);
#endif

	return FLASH_RC_OK;
 102dab0:	2000      	movs	r0, #0
}
 102dab2:	b003      	add	sp, #12
 102dab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ul_error = efc_perform_command(p_efc, EFC_FCMD_WP,
 102dab8:	2101      	movs	r1, #1
 102daba:	4b05      	ldr	r3, [pc, #20]	; (102dad0 <flash_write+0xb0>)
 102dabc:	4803      	ldr	r0, [pc, #12]	; (102dacc <flash_write+0xac>)
 102dabe:	4798      	blx	r3
 102dac0:	e7ec      	b.n	102da9c <flash_write+0x7c>
 102dac2:	bf00      	nop
 102dac4:	200082d0 	.word	0x200082d0
 102dac8:	200082cc 	.word	0x200082cc
 102dacc:	400e0a00 	.word	0x400e0a00
 102dad0:	0102d559 	.word	0x0102d559
 102dad4:	01030a3d 	.word	0x01030a3d

0102dad8 <flash_lock>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_lock(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
 102dad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ul_actual_start = ul_start - (ul_start % IFLASH_LOCK_REGION_SIZE);
 102dada:	4c12      	ldr	r4, [pc, #72]	; (102db24 <flash_lock+0x4c>)
	ul_actual_end = ul_end - (ul_end % IFLASH_LOCK_REGION_SIZE) +
 102dadc:	4021      	ands	r1, r4
 102dade:	f501 55ff 	add.w	r5, r1, #8160	; 0x1fe0
	ul_actual_start = ul_start - (ul_start % IFLASH_LOCK_REGION_SIZE);
 102dae2:	4004      	ands	r4, r0
	ul_actual_end = ul_end - (ul_end % IFLASH_LOCK_REGION_SIZE) +
 102dae4:	351f      	adds	r5, #31
			IFLASH_LOCK_REGION_SIZE / IFLASH_PAGE_SIZE;

	/* Compute actual lock range and store it */
	compute_lock_range(ul_start, ul_end, &ul_actual_start, &ul_actual_end);

	if (pul_actual_start != NULL) {
 102dae6:	b102      	cbz	r2, 102daea <flash_lock+0x12>
		*pul_actual_start = ul_actual_start;
 102dae8:	6014      	str	r4, [r2, #0]
	}

	if (pul_actual_end != NULL) {
 102daea:	b103      	cbz	r3, 102daee <flash_lock+0x16>
		*pul_actual_end = ul_actual_end;
 102daec:	601d      	str	r5, [r3, #0]
	us_page = (ul_addr - IFLASH_ADDR) / IFLASH_PAGE_SIZE;
 102daee:	4d0e      	ldr	r5, [pc, #56]	; (102db28 <flash_lock+0x50>)
 102daf0:	f104 447f 	add.w	r4, r4, #4278190080	; 0xff000000
 102daf4:	0a64      	lsrs	r4, r4, #9
 102daf6:	440d      	add	r5, r1
 102daf8:	b2a4      	uxth	r4, r4
 102dafa:	f3c5 254f 	ubfx	r5, r5, #9, #16
	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
	translate_address(0, ul_actual_end, &us_end_page, 0);

	/* Lock all pages */
	while (us_start_page < us_end_page) {
 102dafe:	42a5      	cmp	r5, r4
 102db00:	d90d      	bls.n	102db1e <flash_lock+0x46>
 102db02:	4f0a      	ldr	r7, [pc, #40]	; (102db2c <flash_lock+0x54>)
		ul_error = efc_perform_command(p_efc, EFC_FCMD_SLB, us_start_page);
 102db04:	4e0a      	ldr	r6, [pc, #40]	; (102db30 <flash_lock+0x58>)
 102db06:	e001      	b.n	102db0c <flash_lock+0x34>
	while (us_start_page < us_end_page) {
 102db08:	42ac      	cmp	r4, r5
 102db0a:	d208      	bcs.n	102db1e <flash_lock+0x46>
		ul_error = efc_perform_command(p_efc, EFC_FCMD_SLB, us_start_page);
 102db0c:	4622      	mov	r2, r4
 102db0e:	2108      	movs	r1, #8
 102db10:	4630      	mov	r0, r6
 102db12:	47b8      	blx	r7

		if (ul_error) {
			return ul_error;
		}
		us_start_page += us_num_pages_in_region;
 102db14:	3410      	adds	r4, #16
 102db16:	b2a4      	uxth	r4, r4
		if (ul_error) {
 102db18:	2800      	cmp	r0, #0
 102db1a:	d0f5      	beq.n	102db08 <flash_lock+0x30>
	}

	return FLASH_RC_OK;
}
 102db1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return FLASH_RC_OK;
 102db1e:	2000      	movs	r0, #0
 102db20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 102db22:	bf00      	nop
 102db24:	ffffe000 	.word	0xffffe000
 102db28:	ff001fff 	.word	0xff001fff
 102db2c:	0102d559 	.word	0x0102d559
 102db30:	400e0a00 	.word	0x400e0a00

0102db34 <flash_unlock>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_unlock(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
 102db34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ul_actual_start = ul_start - (ul_start % IFLASH_LOCK_REGION_SIZE);
 102db36:	4c12      	ldr	r4, [pc, #72]	; (102db80 <flash_unlock+0x4c>)
	ul_actual_end = ul_end - (ul_end % IFLASH_LOCK_REGION_SIZE) +
 102db38:	4021      	ands	r1, r4
 102db3a:	f501 55ff 	add.w	r5, r1, #8160	; 0x1fe0
	ul_actual_start = ul_start - (ul_start % IFLASH_LOCK_REGION_SIZE);
 102db3e:	4004      	ands	r4, r0
	ul_actual_end = ul_end - (ul_end % IFLASH_LOCK_REGION_SIZE) +
 102db40:	351f      	adds	r5, #31
	uint16_t us_num_pages_in_region =
			IFLASH_LOCK_REGION_SIZE / IFLASH_PAGE_SIZE;

	/* Compute actual unlock range and store it */
	compute_lock_range(ul_start, ul_end, &ul_actual_start, &ul_actual_end);
	if (pul_actual_start != NULL) {
 102db42:	b102      	cbz	r2, 102db46 <flash_unlock+0x12>
		*pul_actual_start = ul_actual_start;
 102db44:	6014      	str	r4, [r2, #0]
	}
	if (pul_actual_end != NULL) {
 102db46:	b103      	cbz	r3, 102db4a <flash_unlock+0x16>
		*pul_actual_end = ul_actual_end;
 102db48:	601d      	str	r5, [r3, #0]
	us_page = (ul_addr - IFLASH_ADDR) / IFLASH_PAGE_SIZE;
 102db4a:	4d0e      	ldr	r5, [pc, #56]	; (102db84 <flash_unlock+0x50>)
 102db4c:	f104 447f 	add.w	r4, r4, #4278190080	; 0xff000000
 102db50:	0a64      	lsrs	r4, r4, #9
 102db52:	440d      	add	r5, r1
 102db54:	b2a4      	uxth	r4, r4
 102db56:	f3c5 254f 	ubfx	r5, r5, #9, #16
	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
	translate_address(0, ul_actual_end, &us_end_page, 0);

	/* Unlock all pages */
	while (us_start_page < us_end_page) {
 102db5a:	42a5      	cmp	r5, r4
 102db5c:	d90d      	bls.n	102db7a <flash_unlock+0x46>
 102db5e:	4f0a      	ldr	r7, [pc, #40]	; (102db88 <flash_unlock+0x54>)
		ul_error = efc_perform_command(p_efc, EFC_FCMD_CLB,
 102db60:	4e0a      	ldr	r6, [pc, #40]	; (102db8c <flash_unlock+0x58>)
 102db62:	e001      	b.n	102db68 <flash_unlock+0x34>
	while (us_start_page < us_end_page) {
 102db64:	42ac      	cmp	r4, r5
 102db66:	d208      	bcs.n	102db7a <flash_unlock+0x46>
		ul_error = efc_perform_command(p_efc, EFC_FCMD_CLB,
 102db68:	4622      	mov	r2, r4
 102db6a:	2109      	movs	r1, #9
 102db6c:	4630      	mov	r0, r6
 102db6e:	47b8      	blx	r7
				us_start_page);
		if (ul_error) {
			return ul_error;
		}
		us_start_page += us_num_pages_in_region;
 102db70:	3410      	adds	r4, #16
 102db72:	b2a4      	uxth	r4, r4
		if (ul_error) {
 102db74:	2800      	cmp	r0, #0
 102db76:	d0f5      	beq.n	102db64 <flash_unlock+0x30>
	}

	return FLASH_RC_OK;
}
 102db78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return FLASH_RC_OK;
 102db7a:	2000      	movs	r0, #0
 102db7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 102db7e:	bf00      	nop
 102db80:	ffffe000 	.word	0xffffe000
 102db84:	ff001fff 	.word	0xff001fff
 102db88:	0102d559 	.word	0x0102d559
 102db8c:	400e0a00 	.word	0x400e0a00

0102db90 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
 102db90:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
 102db92:	4a1d      	ldr	r2, [pc, #116]	; (102dc08 <Reset_Handler+0x78>)
 102db94:	4b1d      	ldr	r3, [pc, #116]	; (102dc0c <Reset_Handler+0x7c>)
 102db96:	429a      	cmp	r2, r3
 102db98:	d825      	bhi.n	102dbe6 <Reset_Handler+0x56>
		/* Copy segment block from beginning to end */
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
 102db9a:	d20d      	bcs.n	102dbb8 <Reset_Handler+0x28>
		/* Copy segment block from end to beginning */
		uint32_t bytes_relocate = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
 102db9c:	491c      	ldr	r1, [pc, #112]	; (102dc10 <Reset_Handler+0x80>)
		pSrc = (uint32_t*)((uint32_t)pSrc + bytes_relocate) - 1;
 102db9e:	1f10      	subs	r0, r2, #4
		uint32_t bytes_relocate = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
 102dba0:	1acb      	subs	r3, r1, r3
		pSrc = (uint32_t*)((uint32_t)pSrc + bytes_relocate) - 1;
 102dba2:	4418      	add	r0, r3
		pDest = (uint32_t*)((uint32_t)pDest + bytes_relocate) - 1;

		for (; bytes_relocate; bytes_relocate -= 4) {
 102dba4:	b143      	cbz	r3, 102dbb8 <Reset_Handler+0x28>
 102dba6:	460b      	mov	r3, r1
 102dba8:	f1c2 0204 	rsb	r2, r2, #4
			*pDest-- = *pSrc--;
 102dbac:	f850 1904 	ldr.w	r1, [r0], #-4
 102dbb0:	f843 1d04 	str.w	r1, [r3, #-4]!
		for (; bytes_relocate; bytes_relocate -= 4) {
 102dbb4:	42d0      	cmn	r0, r2
 102dbb6:	d1f9      	bne.n	102dbac <Reset_Handler+0x1c>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
 102dbb8:	4a16      	ldr	r2, [pc, #88]	; (102dc14 <Reset_Handler+0x84>)
 102dbba:	4917      	ldr	r1, [pc, #92]	; (102dc18 <Reset_Handler+0x88>)
 102dbbc:	428a      	cmp	r2, r1
 102dbbe:	d20a      	bcs.n	102dbd6 <Reset_Handler+0x46>
 102dbc0:	43d3      	mvns	r3, r2
 102dbc2:	440b      	add	r3, r1
 102dbc4:	f023 0303 	bic.w	r3, r3, #3
 102dbc8:	3304      	adds	r3, #4
 102dbca:	4413      	add	r3, r2
		*pDest++ = 0;
 102dbcc:	2100      	movs	r1, #0
 102dbce:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
 102dbd2:	429a      	cmp	r2, r3
 102dbd4:	d1fb      	bne.n	102dbce <Reset_Handler+0x3e>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = (uint32_t)pSrc;
 102dbd6:	4b11      	ldr	r3, [pc, #68]	; (102dc1c <Reset_Handler+0x8c>)
 102dbd8:	4a11      	ldr	r2, [pc, #68]	; (102dc20 <Reset_Handler+0x90>)
 102dbda:	609a      	str	r2, [r3, #8]
	/* Enable FPU */
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
 102dbdc:	4b11      	ldr	r3, [pc, #68]	; (102dc24 <Reset_Handler+0x94>)
 102dbde:	4798      	blx	r3

	/* Branch to main function */
	main();
 102dbe0:	4b11      	ldr	r3, [pc, #68]	; (102dc28 <Reset_Handler+0x98>)
 102dbe2:	4798      	blx	r3
 102dbe4:	e7fe      	b.n	102dbe4 <Reset_Handler+0x54>
		for (; pDest < &_erelocate;) {
 102dbe6:	480a      	ldr	r0, [pc, #40]	; (102dc10 <Reset_Handler+0x80>)
 102dbe8:	4283      	cmp	r3, r0
 102dbea:	d2e5      	bcs.n	102dbb8 <Reset_Handler+0x28>
 102dbec:	43d9      	mvns	r1, r3
 102dbee:	4401      	add	r1, r0
 102dbf0:	f021 0103 	bic.w	r1, r1, #3
 102dbf4:	3104      	adds	r1, #4
 102dbf6:	4419      	add	r1, r3
			*pDest++ = *pSrc++;
 102dbf8:	f852 0b04 	ldr.w	r0, [r2], #4
 102dbfc:	f843 0b04 	str.w	r0, [r3], #4
		for (; pDest < &_erelocate;) {
 102dc00:	428b      	cmp	r3, r1
 102dc02:	d1f9      	bne.n	102dbf8 <Reset_Handler+0x68>
 102dc04:	e7d8      	b.n	102dbb8 <Reset_Handler+0x28>
 102dc06:	bf00      	nop
 102dc08:	01038d48 	.word	0x01038d48
 102dc0c:	20000000 	.word	0x20000000
 102dc10:	200008e0 	.word	0x200008e0
 102dc14:	200008f0 	.word	0x200008f0
 102dc18:	200172e4 	.word	0x200172e4
 102dc1c:	e000ed00 	.word	0xe000ed00
 102dc20:	01010000 	.word	0x01010000
 102dc24:	0103098d 	.word	0x0103098d
 102dc28:	0102f631 	.word	0x0102f631

0102dc2c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 102dc2c:	b510      	push	{r4, lr}
	LED_turn_on(LED_MAGENTA);
 102dc2e:	4b03      	ldr	r3, [pc, #12]	; (102dc3c <Dummy_Handler+0x10>)
 102dc30:	2005      	movs	r0, #5
 102dc32:	4798      	blx	r3
	RST_HAL_vExecute_software_reset();
 102dc34:	4b02      	ldr	r3, [pc, #8]	; (102dc40 <Dummy_Handler+0x14>)
	//SYSTEM_RESTART_TYPE mcu;
	//mcu.restart_cause = SYSTEM_FAULT;
	//mcu.fault = DUMMY_HANDLER;
	//mcu.save_information = true;
	//RST_APP_vExecute_mcu_reset(mcu);
}
 102dc36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	RST_HAL_vExecute_software_reset();
 102dc3a:	4718      	bx	r3
 102dc3c:	0101acc1 	.word	0x0101acc1
 102dc40:	010159a1 	.word	0x010159a1

0102dc44 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
 102dc44:	4a07      	ldr	r2, [pc, #28]	; (102dc64 <_sbrk+0x20>)
	int ramend = (int)&__ram_end__;
 102dc46:	4908      	ldr	r1, [pc, #32]	; (102dc68 <_sbrk+0x24>)
	if (heap == NULL) {
 102dc48:	6813      	ldr	r3, [r2, #0]
 102dc4a:	b13b      	cbz	r3, 102dc5c <_sbrk+0x18>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
 102dc4c:	4418      	add	r0, r3
 102dc4e:	4281      	cmp	r1, r0
		return (caddr_t) -1;	
	}

	heap += incr;
 102dc50:	bfa6      	itte	ge
 102dc52:	6010      	strge	r0, [r2, #0]

	return (caddr_t) prev_heap;
 102dc54:	4618      	movge	r0, r3
		return (caddr_t) -1;	
 102dc56:	f04f 30ff 	movlt.w	r0, #4294967295
}
 102dc5a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
 102dc5c:	4b03      	ldr	r3, [pc, #12]	; (102dc6c <_sbrk+0x28>)
 102dc5e:	6013      	str	r3, [r2, #0]
 102dc60:	e7f4      	b.n	102dc4c <_sbrk+0x8>
 102dc62:	bf00      	nop
 102dc64:	200084d0 	.word	0x200084d0
 102dc68:	2001fffc 	.word	0x2001fffc
 102dc6c:	2001a2e8 	.word	0x2001a2e8

0102dc70 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 102dc70:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 102dc74:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 102dc78:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 102dc7a:	6081      	str	r1, [r0, #8]
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 102dc7c:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 102dc7e:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 102dc80:	6103      	str	r3, [r0, #16]
	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 102dc82:	6002      	str	r2, [r0, #0]
 102dc84:	4770      	bx	lr
 102dc86:	bf00      	nop

0102dc88 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 102dc88:	2300      	movs	r3, #0
 102dc8a:	6103      	str	r3, [r0, #16]
 102dc8c:	4770      	bx	lr
 102dc8e:	bf00      	nop

0102dc90 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 102dc90:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
 102dc92:	685a      	ldr	r2, [r3, #4]
 102dc94:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
 102dc96:	6842      	ldr	r2, [r0, #4]
 102dc98:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 102dc9a:	685a      	ldr	r2, [r3, #4]
 102dc9c:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 102dc9e:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 102dca0:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 102dca2:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 102dca4:	6803      	ldr	r3, [r0, #0]
 102dca6:	3301      	adds	r3, #1
 102dca8:	6003      	str	r3, [r0, #0]
 102dcaa:	4770      	bx	lr

0102dcac <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
 102dcac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 102dcb0:	680d      	ldr	r5, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 102dcb2:	1c6b      	adds	r3, r5, #1
{
 102dcb4:	460e      	mov	r6, r1
 102dcb6:	4680      	mov	r8, r0
	if( xValueOfInsertion == portMAX_DELAY )
 102dcb8:	d032      	beq.n	102dd20 <vListInsert+0x74>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		TIMER_start_ms_timer(MCU_FREEZIG_TIMER, TIMER_ms_to_tic(2000), null_action);
 102dcba:	4b1a      	ldr	r3, [pc, #104]	; (102dd24 <vListInsert+0x78>)
 102dcbc:	4a1a      	ldr	r2, [pc, #104]	; (102dd28 <vListInsert+0x7c>)
 102dcbe:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 102dcc2:	2014      	movs	r0, #20
 102dcc4:	4798      	blx	r3
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 102dcc6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 102dcca:	681b      	ldr	r3, [r3, #0]
 102dccc:	429d      	cmp	r5, r3
 102dcce:	f108 0408 	add.w	r4, r8, #8
 102dcd2:	d314      	bcc.n	102dcfe <vListInsert+0x52>
 102dcd4:	4f15      	ldr	r7, [pc, #84]	; (102dd2c <vListInsert+0x80>)
		{
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
			
			if ( (TIMER_is_ms_timer_expired(MCU_FREEZIG_TIMER) == true) || (TIMER_is_ms_timer_running(MCU_FREEZIG_TIMER) == false) )
 102dcd6:	f8df b05c 	ldr.w	fp, [pc, #92]	; 102dd34 <vListInsert+0x88>
			{
				LED_turn_on(LED_YELLOW);
 102dcda:	f8df a05c 	ldr.w	sl, [pc, #92]	; 102dd38 <vListInsert+0x8c>
				RST_HAL_vExecute_software_reset();
 102dcde:	f8df 905c 	ldr.w	r9, [pc, #92]	; 102dd3c <vListInsert+0x90>
			if ( (TIMER_is_ms_timer_expired(MCU_FREEZIG_TIMER) == true) || (TIMER_is_ms_timer_running(MCU_FREEZIG_TIMER) == false) )
 102dce2:	2014      	movs	r0, #20
 102dce4:	47b8      	blx	r7
 102dce6:	b910      	cbnz	r0, 102dcee <vListInsert+0x42>
 102dce8:	2014      	movs	r0, #20
 102dcea:	47d8      	blx	fp
 102dcec:	b910      	cbnz	r0, 102dcf4 <vListInsert+0x48>
				LED_turn_on(LED_YELLOW);
 102dcee:	2003      	movs	r0, #3
 102dcf0:	47d0      	blx	sl
				RST_HAL_vExecute_software_reset();
 102dcf2:	47c8      	blx	r9
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 102dcf4:	6864      	ldr	r4, [r4, #4]
 102dcf6:	6863      	ldr	r3, [r4, #4]
 102dcf8:	681b      	ldr	r3, [r3, #0]
 102dcfa:	429d      	cmp	r5, r3
 102dcfc:	d2f1      	bcs.n	102dce2 <vListInsert+0x36>
				//mcu.save_information = true;
				//RST_APP_vExecute_mcu_reset(mcu);
			}
		}
		
		TIMER_reset_ms_timer(MCU_FREEZIG_TIMER);
 102dcfe:	2014      	movs	r0, #20
 102dd00:	4b0b      	ldr	r3, [pc, #44]	; (102dd30 <vListInsert+0x84>)
 102dd02:	4798      	blx	r3
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 102dd04:	6863      	ldr	r3, [r4, #4]
 102dd06:	6073      	str	r3, [r6, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 102dd08:	609e      	str	r6, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 102dd0a:	60b4      	str	r4, [r6, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 102dd0c:	6066      	str	r6, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 102dd0e:	f8c6 8010 	str.w	r8, [r6, #16]

	( pxList->uxNumberOfItems )++;
 102dd12:	f8d8 3000 	ldr.w	r3, [r8]
 102dd16:	3301      	adds	r3, #1
 102dd18:	f8c8 3000 	str.w	r3, [r8]
 102dd1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pxIterator = pxList->xListEnd.pxPrevious;
 102dd20:	6904      	ldr	r4, [r0, #16]
 102dd22:	e7ef      	b.n	102dd04 <vListInsert+0x58>
 102dd24:	0102ba8d 	.word	0x0102ba8d
 102dd28:	0102ba4d 	.word	0x0102ba4d
 102dd2c:	0102baf5 	.word	0x0102baf5
 102dd30:	0102bb09 	.word	0x0102bb09
 102dd34:	0102bae5 	.word	0x0102bae5
 102dd38:	0101acc1 	.word	0x0101acc1
 102dd3c:	010159a1 	.word	0x010159a1

0102dd40 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 102dd40:	6843      	ldr	r3, [r0, #4]
 102dd42:	6882      	ldr	r2, [r0, #8]
 102dd44:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 102dd46:	6883      	ldr	r3, [r0, #8]
 102dd48:	6842      	ldr	r2, [r0, #4]
 102dd4a:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 102dd4c:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 102dd4e:	685a      	ldr	r2, [r3, #4]
 102dd50:	4290      	cmp	r0, r2
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 102dd52:	bf04      	itt	eq
 102dd54:	6882      	ldreq	r2, [r0, #8]
 102dd56:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
 102dd58:	2200      	movs	r2, #0
 102dd5a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 102dd5c:	681a      	ldr	r2, [r3, #0]
 102dd5e:	3a01      	subs	r2, #1
 102dd60:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 102dd62:	6818      	ldr	r0, [r3, #0]
}
 102dd64:	4770      	bx	lr
 102dd66:	bf00      	nop

0102dd68 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 102dd68:	4803      	ldr	r0, [pc, #12]	; (102dd78 <prvPortStartFirstTask+0x10>)
 102dd6a:	6800      	ldr	r0, [r0, #0]
 102dd6c:	6800      	ldr	r0, [r0, #0]
 102dd6e:	f380 8808 	msr	MSP, r0
 102dd72:	b662      	cpsie	i
 102dd74:	df00      	svc	0
 102dd76:	bf00      	nop
 102dd78:	e000ed08 	.word	0xe000ed08

0102dd7c <pxPortInitialiseStack>:
{
 102dd7c:	b410      	push	{r4}
	*pxTopOfStack = 0;	/* LR */
 102dd7e:	2300      	movs	r3, #0
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 102dd80:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
 102dd84:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
 102dd88:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 102dd8c:	f840 4c04 	str.w	r4, [r0, #-4]
	*pxTopOfStack = 0;	/* LR */
 102dd90:	f840 3c0c 	str.w	r3, [r0, #-12]
}
 102dd94:	bc10      	pop	{r4}
 102dd96:	3840      	subs	r0, #64	; 0x40
 102dd98:	4770      	bx	lr
 102dd9a:	bf00      	nop

0102dd9c <SVC_Handler>:
	__asm volatile (
 102dd9c:	4b06      	ldr	r3, [pc, #24]	; (102ddb8 <pxCurrentTCBConst2>)
 102dd9e:	6819      	ldr	r1, [r3, #0]
 102dda0:	6808      	ldr	r0, [r1, #0]
 102dda2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 102dda6:	f380 8809 	msr	PSP, r0
 102ddaa:	f04f 0000 	mov.w	r0, #0
 102ddae:	f380 8811 	msr	BASEPRI, r0
 102ddb2:	f04e 0e0d 	orr.w	lr, lr, #13
 102ddb6:	4770      	bx	lr

0102ddb8 <pxCurrentTCBConst2>:
 102ddb8:	200104e0 	.word	0x200104e0

0102ddbc <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 102ddbc:	4b02      	ldr	r3, [pc, #8]	; (102ddc8 <vPortYieldFromISR+0xc>)
 102ddbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 102ddc2:	601a      	str	r2, [r3, #0]
 102ddc4:	4770      	bx	lr
 102ddc6:	bf00      	nop
 102ddc8:	e000ed04 	.word	0xe000ed04

0102ddcc <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
 102ddcc:	f3ef 8011 	mrs	r0, BASEPRI
 102ddd0:	f04f 01a0 	mov.w	r1, #160	; 0xa0
 102ddd4:	f381 8811 	msr	BASEPRI, r1
 102ddd8:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
 102ddda:	2000      	movs	r0, #0

0102dddc <vPortEnterCritical>:
{
 102dddc:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
 102ddde:	4b03      	ldr	r3, [pc, #12]	; (102ddec <vPortEnterCritical+0x10>)
 102dde0:	4798      	blx	r3
	uxCriticalNesting++;
 102dde2:	4a03      	ldr	r2, [pc, #12]	; (102ddf0 <vPortEnterCritical+0x14>)
 102dde4:	6813      	ldr	r3, [r2, #0]
 102dde6:	3301      	adds	r3, #1
 102dde8:	6013      	str	r3, [r2, #0]
 102ddea:	bd08      	pop	{r3, pc}
 102ddec:	0102ddcd 	.word	0x0102ddcd
 102ddf0:	20000090 	.word	0x20000090

0102ddf4 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
 102ddf4:	f380 8811 	msr	BASEPRI, r0
 102ddf8:	4770      	bx	lr
 102ddfa:	bf00      	nop

0102ddfc <vPortExitCritical>:
	uxCriticalNesting--;
 102ddfc:	4b03      	ldr	r3, [pc, #12]	; (102de0c <vPortExitCritical+0x10>)
 102ddfe:	6818      	ldr	r0, [r3, #0]
 102de00:	3801      	subs	r0, #1
 102de02:	6018      	str	r0, [r3, #0]
	if( uxCriticalNesting == 0 )
 102de04:	b100      	cbz	r0, 102de08 <vPortExitCritical+0xc>
 102de06:	4770      	bx	lr
		portENABLE_INTERRUPTS();
 102de08:	4b01      	ldr	r3, [pc, #4]	; (102de10 <vPortExitCritical+0x14>)
 102de0a:	4718      	bx	r3
 102de0c:	20000090 	.word	0x20000090
 102de10:	0102ddf5 	.word	0x0102ddf5

0102de14 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
 102de14:	f3ef 8009 	mrs	r0, PSP
 102de18:	4b0c      	ldr	r3, [pc, #48]	; (102de4c <pxCurrentTCBConst>)
 102de1a:	681a      	ldr	r2, [r3, #0]
 102de1c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 102de20:	6010      	str	r0, [r2, #0]
 102de22:	e92d 4008 	stmdb	sp!, {r3, lr}
 102de26:	f04f 00a0 	mov.w	r0, #160	; 0xa0
 102de2a:	f380 8811 	msr	BASEPRI, r0
 102de2e:	f001 f849 	bl	102eec4 <vTaskSwitchContext>
 102de32:	f04f 0000 	mov.w	r0, #0
 102de36:	f380 8811 	msr	BASEPRI, r0
 102de3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 102de3e:	6819      	ldr	r1, [r3, #0]
 102de40:	6808      	ldr	r0, [r1, #0]
 102de42:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 102de46:	f380 8809 	msr	PSP, r0
 102de4a:	4770      	bx	lr

0102de4c <pxCurrentTCBConst>:
 102de4c:	200104e0 	.word	0x200104e0

0102de50 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
 102de50:	b510      	push	{r4, lr}
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif
	
	TIMER_ms_tick_handler();
 102de52:	4b05      	ldr	r3, [pc, #20]	; (102de68 <SysTick_Handler+0x18>)
 102de54:	4798      	blx	r3

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
 102de56:	4b05      	ldr	r3, [pc, #20]	; (102de6c <SysTick_Handler+0x1c>)
 102de58:	4798      	blx	r3
	{
		vTaskIncrementTick();
 102de5a:	4b05      	ldr	r3, [pc, #20]	; (102de70 <SysTick_Handler+0x20>)
 102de5c:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 102de5e:	2000      	movs	r0, #0
 102de60:	4b04      	ldr	r3, [pc, #16]	; (102de74 <SysTick_Handler+0x24>)
}
 102de62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 102de66:	4718      	bx	r3
 102de68:	0102bb45 	.word	0x0102bb45
 102de6c:	0102ddcd 	.word	0x0102ddcd
 102de70:	0102eea5 	.word	0x0102eea5
 102de74:	0102ddf5 	.word	0x0102ddf5

0102de78 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
 102de78:	4a03      	ldr	r2, [pc, #12]	; (102de88 <vPortSetupTimerInterrupt+0x10>)
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 102de7a:	4b04      	ldr	r3, [pc, #16]	; (102de8c <vPortSetupTimerInterrupt+0x14>)
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
 102de7c:	4904      	ldr	r1, [pc, #16]	; (102de90 <vPortSetupTimerInterrupt+0x18>)
 102de7e:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 102de80:	2207      	movs	r2, #7
 102de82:	601a      	str	r2, [r3, #0]
 102de84:	4770      	bx	lr
 102de86:	bf00      	nop
 102de88:	e000e014 	.word	0xe000e014
 102de8c:	e000e010 	.word	0xe000e010
 102de90:	00018fff 	.word	0x00018fff

0102de94 <xPortStartScheduler>:
{
 102de94:	b508      	push	{r3, lr}
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 102de96:	4b08      	ldr	r3, [pc, #32]	; (102deb8 <xPortStartScheduler+0x24>)
	vPortSetupTimerInterrupt();
 102de98:	4908      	ldr	r1, [pc, #32]	; (102debc <xPortStartScheduler+0x28>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 102de9a:	681a      	ldr	r2, [r3, #0]
 102de9c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 102dea0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 102dea2:	681a      	ldr	r2, [r3, #0]
 102dea4:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 102dea8:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 102deaa:	4788      	blx	r1
	uxCriticalNesting = 0;
 102deac:	4a04      	ldr	r2, [pc, #16]	; (102dec0 <xPortStartScheduler+0x2c>)
	prvPortStartFirstTask();
 102deae:	4b05      	ldr	r3, [pc, #20]	; (102dec4 <xPortStartScheduler+0x30>)
	uxCriticalNesting = 0;
 102deb0:	2000      	movs	r0, #0
 102deb2:	6010      	str	r0, [r2, #0]
	prvPortStartFirstTask();
 102deb4:	4798      	blx	r3
}
 102deb6:	bd08      	pop	{r3, pc}
 102deb8:	e000ed20 	.word	0xe000ed20
 102debc:	0102de79 	.word	0x0102de79
 102dec0:	20000090 	.word	0x20000090
 102dec4:	0102dd69 	.word	0x0102dd69

0102dec8 <prvInsertBlockIntoFreeList>:
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
 102dec8:	b410      	push	{r4}
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 102deca:	4a15      	ldr	r2, [pc, #84]	; (102df20 <prvInsertBlockIntoFreeList+0x58>)
 102decc:	e000      	b.n	102ded0 <prvInsertBlockIntoFreeList+0x8>
 102dece:	461a      	mov	r2, r3
 102ded0:	6813      	ldr	r3, [r2, #0]
 102ded2:	4283      	cmp	r3, r0
 102ded4:	d3fb      	bcc.n	102dece <prvInsertBlockIntoFreeList+0x6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
 102ded6:	6851      	ldr	r1, [r2, #4]
 102ded8:	1854      	adds	r4, r2, r1
 102deda:	42a0      	cmp	r0, r4
 102dedc:	d009      	beq.n	102def2 <prvInsertBlockIntoFreeList+0x2a>
 102dede:	6841      	ldr	r1, [r0, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
 102dee0:	1844      	adds	r4, r0, r1
 102dee2:	42a3      	cmp	r3, r4
 102dee4:	d00c      	beq.n	102df00 <prvInsertBlockIntoFreeList+0x38>

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 102dee6:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
 102dee8:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 102deea:	bf18      	it	ne
 102deec:	6010      	strne	r0, [r2, #0]
	}
}
 102deee:	bc10      	pop	{r4}
 102def0:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 102def2:	6840      	ldr	r0, [r0, #4]
 102def4:	4401      	add	r1, r0
 102def6:	4610      	mov	r0, r2
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
 102def8:	1844      	adds	r4, r0, r1
 102defa:	42a3      	cmp	r3, r4
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 102defc:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
 102defe:	d1f2      	bne.n	102dee6 <prvInsertBlockIntoFreeList+0x1e>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 102df00:	4c08      	ldr	r4, [pc, #32]	; (102df24 <prvInsertBlockIntoFreeList+0x5c>)
 102df02:	6824      	ldr	r4, [r4, #0]
 102df04:	42a3      	cmp	r3, r4
 102df06:	d0ee      	beq.n	102dee6 <prvInsertBlockIntoFreeList+0x1e>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 102df08:	685b      	ldr	r3, [r3, #4]
 102df0a:	4419      	add	r1, r3
 102df0c:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 102df0e:	6813      	ldr	r3, [r2, #0]
	if( pxIterator != pxBlockToInsert )
 102df10:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 102df12:	681b      	ldr	r3, [r3, #0]
 102df14:	6003      	str	r3, [r0, #0]
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 102df16:	bf18      	it	ne
 102df18:	6010      	strne	r0, [r2, #0]
}
 102df1a:	bc10      	pop	{r4}
 102df1c:	4770      	bx	lr
 102df1e:	bf00      	nop
 102df20:	200104d8 	.word	0x200104d8
 102df24:	200084d4 	.word	0x200084d4

0102df28 <pvPortMalloc>:
{
 102df28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxEnd == NULL )
 102df2a:	4d2a      	ldr	r5, [pc, #168]	; (102dfd4 <pvPortMalloc+0xac>)
	vTaskSuspendAll();
 102df2c:	4b2a      	ldr	r3, [pc, #168]	; (102dfd8 <pvPortMalloc+0xb0>)
{
 102df2e:	4604      	mov	r4, r0
	vTaskSuspendAll();
 102df30:	4798      	blx	r3
		if( pxEnd == NULL )
 102df32:	682b      	ldr	r3, [r5, #0]
 102df34:	2b00      	cmp	r3, #0
 102df36:	d037      	beq.n	102dfa8 <pvPortMalloc+0x80>
		if( xWantedSize > 0 )
 102df38:	b34c      	cbz	r4, 102df8e <pvPortMalloc+0x66>
			xWantedSize += heapSTRUCT_SIZE;
 102df3a:	f104 0210 	add.w	r2, r4, #16
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 102df3e:	0753      	lsls	r3, r2, #29
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 102df40:	bf1c      	itt	ne
 102df42:	f022 0207 	bicne.w	r2, r2, #7
 102df46:	3208      	addne	r2, #8
		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
 102df48:	1e51      	subs	r1, r2, #1
 102df4a:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 102df4e:	4299      	cmp	r1, r3
 102df50:	d81d      	bhi.n	102df8e <pvPortMalloc+0x66>
			pxBlock = xStart.pxNextFreeBlock;
 102df52:	4922      	ldr	r1, [pc, #136]	; (102dfdc <pvPortMalloc+0xb4>)
 102df54:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 102df56:	e003      	b.n	102df60 <pvPortMalloc+0x38>
 102df58:	6823      	ldr	r3, [r4, #0]
 102df5a:	b123      	cbz	r3, 102df66 <pvPortMalloc+0x3e>
 102df5c:	4621      	mov	r1, r4
 102df5e:	461c      	mov	r4, r3
 102df60:	6863      	ldr	r3, [r4, #4]
 102df62:	429a      	cmp	r2, r3
 102df64:	d8f8      	bhi.n	102df58 <pvPortMalloc+0x30>
			if( pxBlock != pxEnd )
 102df66:	682b      	ldr	r3, [r5, #0]
 102df68:	429c      	cmp	r4, r3
 102df6a:	d010      	beq.n	102df8e <pvPortMalloc+0x66>
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 102df6c:	6823      	ldr	r3, [r4, #0]
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 102df6e:	680d      	ldr	r5, [r1, #0]
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 102df70:	600b      	str	r3, [r1, #0]
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 102df72:	6861      	ldr	r1, [r4, #4]
 102df74:	1a8b      	subs	r3, r1, r2
 102df76:	2b20      	cmp	r3, #32
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 102df78:	f105 0510 	add.w	r5, r5, #16
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 102df7c:	d80c      	bhi.n	102df98 <pvPortMalloc+0x70>
				xFreeBytesRemaining -= pxBlock->xBlockSize;
 102df7e:	4a18      	ldr	r2, [pc, #96]	; (102dfe0 <pvPortMalloc+0xb8>)
 102df80:	6813      	ldr	r3, [r2, #0]
 102df82:	1a5b      	subs	r3, r3, r1
 102df84:	6013      	str	r3, [r2, #0]
	xTaskResumeAll();
 102df86:	4b17      	ldr	r3, [pc, #92]	; (102dfe4 <pvPortMalloc+0xbc>)
 102df88:	4798      	blx	r3
}
 102df8a:	4628      	mov	r0, r5
 102df8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
void *pvReturn = NULL;
 102df8e:	2500      	movs	r5, #0
	xTaskResumeAll();
 102df90:	4b14      	ldr	r3, [pc, #80]	; (102dfe4 <pvPortMalloc+0xbc>)
 102df92:	4798      	blx	r3
}
 102df94:	4628      	mov	r0, r5
 102df96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
 102df98:	18a1      	adds	r1, r4, r2
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 102df9a:	4608      	mov	r0, r1
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 102df9c:	604b      	str	r3, [r1, #4]
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 102df9e:	4b12      	ldr	r3, [pc, #72]	; (102dfe8 <pvPortMalloc+0xc0>)
					pxBlock->xBlockSize = xWantedSize;
 102dfa0:	6062      	str	r2, [r4, #4]
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 102dfa2:	4798      	blx	r3
 102dfa4:	6861      	ldr	r1, [r4, #4]
 102dfa6:	e7ea      	b.n	102df7e <pvPortMalloc+0x56>
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
 102dfa8:	f8df e034 	ldr.w	lr, [pc, #52]	; 102dfe0 <pvPortMalloc+0xb8>
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
 102dfac:	4a0f      	ldr	r2, [pc, #60]	; (102dfec <pvPortMalloc+0xc4>)
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
 102dfae:	f8de 1000 	ldr.w	r1, [lr]
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
 102dfb2:	4e0a      	ldr	r6, [pc, #40]	; (102dfdc <pvPortMalloc+0xb4>)
	pxEnd = ( void * ) pucHeapEnd;
 102dfb4:	480e      	ldr	r0, [pc, #56]	; (102dff0 <pvPortMalloc+0xc8>)
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
 102dfb6:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 102dfb8:	f647 77f4 	movw	r7, #32756	; 0x7ff4
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
 102dfbc:	3910      	subs	r1, #16
	pxEnd->xBlockSize = 0;
 102dfbe:	51d3      	str	r3, [r2, r7]
	pxEnd = ( void * ) pucHeapEnd;
 102dfc0:	f647 77f0 	movw	r7, #32752	; 0x7ff0
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
 102dfc4:	f8ce 1000 	str.w	r1, [lr]
	pxEnd->pxNextFreeBlock = NULL;
 102dfc8:	51d3      	str	r3, [r2, r7]
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
 102dfca:	6057      	str	r7, [r2, #4]
	xStart.xBlockSize = ( size_t ) 0;
 102dfcc:	6073      	str	r3, [r6, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 102dfce:	6010      	str	r0, [r2, #0]
	pxEnd = ( void * ) pucHeapEnd;
 102dfd0:	6028      	str	r0, [r5, #0]
 102dfd2:	e7b1      	b.n	102df38 <pvPortMalloc+0x10>
 102dfd4:	200084d4 	.word	0x200084d4
 102dfd8:	0102ecbd 	.word	0x0102ecbd
 102dfdc:	200104d8 	.word	0x200104d8
 102dfe0:	20000094 	.word	0x20000094
 102dfe4:	0102eccd 	.word	0x0102eccd
 102dfe8:	0102dec9 	.word	0x0102dec9
 102dfec:	200084d8 	.word	0x200084d8
 102dff0:	200104c8 	.word	0x200104c8

0102dff4 <vPortFree>:
	if( pv != NULL )
 102dff4:	b188      	cbz	r0, 102e01a <vPortFree+0x26>
{
 102dff6:	b510      	push	{r4, lr}
		vTaskSuspendAll();
 102dff8:	4b08      	ldr	r3, [pc, #32]	; (102e01c <vPortFree+0x28>)
 102dffa:	4604      	mov	r4, r0
 102dffc:	4798      	blx	r3
			xFreeBytesRemaining += pxLink->xBlockSize;
 102dffe:	4a08      	ldr	r2, [pc, #32]	; (102e020 <vPortFree+0x2c>)
 102e000:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 102e004:	6810      	ldr	r0, [r2, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
 102e006:	4907      	ldr	r1, [pc, #28]	; (102e024 <vPortFree+0x30>)
			xFreeBytesRemaining += pxLink->xBlockSize;
 102e008:	4403      	add	r3, r0
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
 102e00a:	f1a4 0010 	sub.w	r0, r4, #16
			xFreeBytesRemaining += pxLink->xBlockSize;
 102e00e:	6013      	str	r3, [r2, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
 102e010:	4788      	blx	r1
		xTaskResumeAll();
 102e012:	4b05      	ldr	r3, [pc, #20]	; (102e028 <vPortFree+0x34>)
}
 102e014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		xTaskResumeAll();
 102e018:	4718      	bx	r3
 102e01a:	4770      	bx	lr
 102e01c:	0102ecbd 	.word	0x0102ecbd
 102e020:	20000094 	.word	0x20000094
 102e024:	0102dec9 	.word	0x0102dec9
 102e028:	0102eccd 	.word	0x0102eccd

0102e02c <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
 102e02c:	b538      	push	{r3, r4, r5, lr}
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
 102e02e:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
 102e030:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
 102e032:	b933      	cbnz	r3, 102e042 <prvCopyDataToQueue+0x16>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 102e034:	6805      	ldr	r5, [r0, #0]
 102e036:	2d00      	cmp	r5, #0
 102e038:	d028      	beq.n	102e08c <prvCopyDataToQueue+0x60>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
		}
	}

	++( pxQueue->uxMessagesWaiting );
 102e03a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 102e03c:	3301      	adds	r3, #1
 102e03e:	63a3      	str	r3, [r4, #56]	; 0x38
 102e040:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
 102e042:	b982      	cbnz	r2, 102e066 <prvCopyDataToQueue+0x3a>
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 102e044:	461a      	mov	r2, r3
 102e046:	6880      	ldr	r0, [r0, #8]
 102e048:	4b13      	ldr	r3, [pc, #76]	; (102e098 <prvCopyDataToQueue+0x6c>)
 102e04a:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 102e04c:	68a3      	ldr	r3, [r4, #8]
 102e04e:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
 102e050:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 102e052:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
 102e054:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 102e056:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
 102e058:	d3ef      	bcc.n	102e03a <prvCopyDataToQueue+0xe>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 102e05a:	6823      	ldr	r3, [r4, #0]
 102e05c:	60a3      	str	r3, [r4, #8]
	++( pxQueue->uxMessagesWaiting );
 102e05e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 102e060:	3301      	adds	r3, #1
 102e062:	63a3      	str	r3, [r4, #56]	; 0x38
 102e064:	bd38      	pop	{r3, r4, r5, pc}
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 102e066:	461a      	mov	r2, r3
 102e068:	68c0      	ldr	r0, [r0, #12]
 102e06a:	4b0b      	ldr	r3, [pc, #44]	; (102e098 <prvCopyDataToQueue+0x6c>)
 102e06c:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
 102e06e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 102e070:	68e3      	ldr	r3, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
 102e072:	6821      	ldr	r1, [r4, #0]
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
 102e074:	4252      	negs	r2, r2
 102e076:	4413      	add	r3, r2
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
 102e078:	428b      	cmp	r3, r1
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
 102e07a:	60e3      	str	r3, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
 102e07c:	d2dd      	bcs.n	102e03a <prvCopyDataToQueue+0xe>
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 102e07e:	6863      	ldr	r3, [r4, #4]
 102e080:	441a      	add	r2, r3
	++( pxQueue->uxMessagesWaiting );
 102e082:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 102e084:	60e2      	str	r2, [r4, #12]
	++( pxQueue->uxMessagesWaiting );
 102e086:	3301      	adds	r3, #1
 102e088:	63a3      	str	r3, [r4, #56]	; 0x38
 102e08a:	bd38      	pop	{r3, r4, r5, pc}
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 102e08c:	6840      	ldr	r0, [r0, #4]
 102e08e:	4b03      	ldr	r3, [pc, #12]	; (102e09c <prvCopyDataToQueue+0x70>)
 102e090:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
 102e092:	6065      	str	r5, [r4, #4]
 102e094:	e7d1      	b.n	102e03a <prvCopyDataToQueue+0xe>
 102e096:	bf00      	nop
 102e098:	01030a3d 	.word	0x01030a3d
 102e09c:	0102f201 	.word	0x0102f201

0102e0a0 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 102e0a0:	6803      	ldr	r3, [r0, #0]
 102e0a2:	b173      	cbz	r3, 102e0c2 <prvCopyDataFromQueue+0x22>
{
 102e0a4:	b430      	push	{r4, r5}
 102e0a6:	460c      	mov	r4, r1
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
 102e0a8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 102e0aa:	68c1      	ldr	r1, [r0, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
 102e0ac:	6845      	ldr	r5, [r0, #4]
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
 102e0ae:	4411      	add	r1, r2
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
 102e0b0:	42a9      	cmp	r1, r5
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
 102e0b2:	60c1      	str	r1, [r0, #12]
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
 102e0b4:	bf24      	itt	cs
 102e0b6:	60c3      	strcs	r3, [r0, #12]
 102e0b8:	4619      	movcs	r1, r3
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
 102e0ba:	4620      	mov	r0, r4
 102e0bc:	4b01      	ldr	r3, [pc, #4]	; (102e0c4 <prvCopyDataFromQueue+0x24>)
	}
}
 102e0be:	bc30      	pop	{r4, r5}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
 102e0c0:	4718      	bx	r3
 102e0c2:	4770      	bx	lr
 102e0c4:	01030a3d 	.word	0x01030a3d

0102e0c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
 102e0c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 102e0cc:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 102e0ce:	4f20      	ldr	r7, [pc, #128]	; (102e150 <prvUnlockQueue+0x88>)
 102e0d0:	47b8      	blx	r7
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 102e0d2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 102e0d4:	2b00      	cmp	r3, #0
 102e0d6:	dd15      	ble.n	102e104 <prvUnlockQueue+0x3c>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 102e0d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 102e0da:	b19b      	cbz	r3, 102e104 <prvUnlockQueue+0x3c>
 102e0dc:	f104 0624 	add.w	r6, r4, #36	; 0x24
 102e0e0:	4d1c      	ldr	r5, [pc, #112]	; (102e154 <prvUnlockQueue+0x8c>)
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
 102e0e2:	f8df 8074 	ldr.w	r8, [pc, #116]	; 102e158 <prvUnlockQueue+0x90>
 102e0e6:	e007      	b.n	102e0f8 <prvUnlockQueue+0x30>
				}

				--( pxQueue->xTxLock );
 102e0e8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 102e0ea:	3b01      	subs	r3, #1
 102e0ec:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 102e0ee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 102e0f0:	2b00      	cmp	r3, #0
 102e0f2:	dd07      	ble.n	102e104 <prvUnlockQueue+0x3c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 102e0f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 102e0f6:	b12b      	cbz	r3, 102e104 <prvUnlockQueue+0x3c>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 102e0f8:	4630      	mov	r0, r6
 102e0fa:	47a8      	blx	r5
 102e0fc:	2800      	cmp	r0, #0
 102e0fe:	d0f3      	beq.n	102e0e8 <prvUnlockQueue+0x20>
					vTaskMissedYield();
 102e100:	47c0      	blx	r8
 102e102:	e7f1      	b.n	102e0e8 <prvUnlockQueue+0x20>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
 102e104:	f04f 33ff 	mov.w	r3, #4294967295
 102e108:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 102e10a:	f8df 8050 	ldr.w	r8, [pc, #80]	; 102e15c <prvUnlockQueue+0x94>
 102e10e:	47c0      	blx	r8

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 102e110:	47b8      	blx	r7
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 102e112:	6c63      	ldr	r3, [r4, #68]	; 0x44
 102e114:	2b00      	cmp	r3, #0
 102e116:	dd14      	ble.n	102e142 <prvUnlockQueue+0x7a>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 102e118:	6923      	ldr	r3, [r4, #16]
 102e11a:	b193      	cbz	r3, 102e142 <prvUnlockQueue+0x7a>
 102e11c:	f104 0610 	add.w	r6, r4, #16
 102e120:	4d0c      	ldr	r5, [pc, #48]	; (102e154 <prvUnlockQueue+0x8c>)
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
				{
					vTaskMissedYield();
 102e122:	4f0d      	ldr	r7, [pc, #52]	; (102e158 <prvUnlockQueue+0x90>)
 102e124:	e007      	b.n	102e136 <prvUnlockQueue+0x6e>
				}

				--( pxQueue->xRxLock );
 102e126:	6c63      	ldr	r3, [r4, #68]	; 0x44
 102e128:	3b01      	subs	r3, #1
 102e12a:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 102e12c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 102e12e:	2b00      	cmp	r3, #0
 102e130:	dd07      	ble.n	102e142 <prvUnlockQueue+0x7a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 102e132:	6923      	ldr	r3, [r4, #16]
 102e134:	b12b      	cbz	r3, 102e142 <prvUnlockQueue+0x7a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 102e136:	4630      	mov	r0, r6
 102e138:	47a8      	blx	r5
 102e13a:	2800      	cmp	r0, #0
 102e13c:	d0f3      	beq.n	102e126 <prvUnlockQueue+0x5e>
					vTaskMissedYield();
 102e13e:	47b8      	blx	r7
 102e140:	e7f1      	b.n	102e126 <prvUnlockQueue+0x5e>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 102e142:	f04f 33ff 	mov.w	r3, #4294967295
 102e146:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 102e148:	4643      	mov	r3, r8
}
 102e14a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	taskEXIT_CRITICAL();
 102e14e:	4718      	bx	r3
 102e150:	0102dddd 	.word	0x0102dddd
 102e154:	0102efd5 	.word	0x0102efd5
 102e158:	0102f131 	.word	0x0102f131
 102e15c:	0102ddfd 	.word	0x0102ddfd

0102e160 <xQueueGenericReset>:
{
 102e160:	b538      	push	{r3, r4, r5, lr}
 102e162:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 102e164:	4604      	mov	r4, r0
 102e166:	2800      	cmp	r0, #0
 102e168:	d02d      	beq.n	102e1c6 <xQueueGenericReset+0x66>
	taskENTER_CRITICAL();
 102e16a:	4b1a      	ldr	r3, [pc, #104]	; (102e1d4 <xQueueGenericReset+0x74>)
 102e16c:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 102e16e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 102e170:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 102e172:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 102e174:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 102e176:	fb01 f103 	mul.w	r1, r1, r3
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
 102e17a:	1acb      	subs	r3, r1, r3
 102e17c:	4413      	add	r3, r2
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 102e17e:	2000      	movs	r0, #0
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 102e180:	440a      	add	r2, r1
		pxQueue->xRxLock = queueUNLOCKED;
 102e182:	f04f 31ff 	mov.w	r1, #4294967295
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 102e186:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
 102e188:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 102e18a:	6461      	str	r1, [r4, #68]	; 0x44
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 102e18c:	6062      	str	r2, [r4, #4]
		pxQueue->xTxLock = queueUNLOCKED;
 102e18e:	64a1      	str	r1, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
 102e190:	b975      	cbnz	r5, 102e1b0 <xQueueGenericReset+0x50>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 102e192:	6923      	ldr	r3, [r4, #16]
 102e194:	b91b      	cbnz	r3, 102e19e <xQueueGenericReset+0x3e>
	taskEXIT_CRITICAL();
 102e196:	4b10      	ldr	r3, [pc, #64]	; (102e1d8 <xQueueGenericReset+0x78>)
 102e198:	4798      	blx	r3
}
 102e19a:	2001      	movs	r0, #1
 102e19c:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 102e19e:	f104 0010 	add.w	r0, r4, #16
 102e1a2:	4b0e      	ldr	r3, [pc, #56]	; (102e1dc <xQueueGenericReset+0x7c>)
 102e1a4:	4798      	blx	r3
 102e1a6:	2801      	cmp	r0, #1
 102e1a8:	d1f5      	bne.n	102e196 <xQueueGenericReset+0x36>
					portYIELD_WITHIN_API();
 102e1aa:	4b0d      	ldr	r3, [pc, #52]	; (102e1e0 <xQueueGenericReset+0x80>)
 102e1ac:	4798      	blx	r3
 102e1ae:	e7f2      	b.n	102e196 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 102e1b0:	f104 0010 	add.w	r0, r4, #16
 102e1b4:	4d0b      	ldr	r5, [pc, #44]	; (102e1e4 <xQueueGenericReset+0x84>)
 102e1b6:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 102e1b8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 102e1bc:	47a8      	blx	r5
	taskEXIT_CRITICAL();
 102e1be:	4b06      	ldr	r3, [pc, #24]	; (102e1d8 <xQueueGenericReset+0x78>)
 102e1c0:	4798      	blx	r3
}
 102e1c2:	2001      	movs	r0, #1
 102e1c4:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxQueue );
 102e1c6:	f240 111b 	movw	r1, #283	; 0x11b
 102e1ca:	4807      	ldr	r0, [pc, #28]	; (102e1e8 <xQueueGenericReset+0x88>)
 102e1cc:	4b07      	ldr	r3, [pc, #28]	; (102e1ec <xQueueGenericReset+0x8c>)
 102e1ce:	4798      	blx	r3
 102e1d0:	e7cb      	b.n	102e16a <xQueueGenericReset+0xa>
 102e1d2:	bf00      	nop
 102e1d4:	0102dddd 	.word	0x0102dddd
 102e1d8:	0102ddfd 	.word	0x0102ddfd
 102e1dc:	0102efd5 	.word	0x0102efd5
 102e1e0:	0102ddbd 	.word	0x0102ddbd
 102e1e4:	0102dc71 	.word	0x0102dc71
 102e1e8:	01038c00 	.word	0x01038c00
 102e1ec:	0102f6cd 	.word	0x0102f6cd

0102e1f0 <xQueueGenericCreate>:
{
 102e1f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
 102e1f4:	b1d8      	cbz	r0, 102e22e <xQueueGenericCreate+0x3e>
 102e1f6:	4605      	mov	r5, r0
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 102e1f8:	4f11      	ldr	r7, [pc, #68]	; (102e240 <xQueueGenericCreate+0x50>)
 102e1fa:	2050      	movs	r0, #80	; 0x50
 102e1fc:	460e      	mov	r6, r1
 102e1fe:	4690      	mov	r8, r2
 102e200:	47b8      	blx	r7
		if( pxNewQueue != NULL )
 102e202:	4604      	mov	r4, r0
 102e204:	b198      	cbz	r0, 102e22e <xQueueGenericCreate+0x3e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
 102e206:	fb06 f005 	mul.w	r0, r6, r5
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
 102e20a:	3001      	adds	r0, #1
 102e20c:	47b8      	blx	r7
 102e20e:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
 102e210:	b150      	cbz	r0, 102e228 <xQueueGenericCreate+0x38>
				pxNewQueue->uxLength = uxQueueLength;
 102e212:	63e5      	str	r5, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
 102e214:	6426      	str	r6, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
 102e216:	2101      	movs	r1, #1
 102e218:	4620      	mov	r0, r4
 102e21a:	4b0a      	ldr	r3, [pc, #40]	; (102e244 <xQueueGenericCreate+0x54>)
 102e21c:	4798      	blx	r3
					pxNewQueue->ucQueueType = ucQueueType;
 102e21e:	f884 804d 	strb.w	r8, [r4, #77]	; 0x4d
}
 102e222:	4620      	mov	r0, r4
 102e224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				vPortFree( pxNewQueue );
 102e228:	4620      	mov	r0, r4
 102e22a:	4b07      	ldr	r3, [pc, #28]	; (102e248 <xQueueGenericCreate+0x58>)
 102e22c:	4798      	blx	r3
	configASSERT( xReturn );
 102e22e:	f240 1171 	movw	r1, #369	; 0x171
 102e232:	4806      	ldr	r0, [pc, #24]	; (102e24c <xQueueGenericCreate+0x5c>)
 102e234:	4b06      	ldr	r3, [pc, #24]	; (102e250 <xQueueGenericCreate+0x60>)
 102e236:	2400      	movs	r4, #0
 102e238:	4798      	blx	r3
}
 102e23a:	4620      	mov	r0, r4
 102e23c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 102e240:	0102df29 	.word	0x0102df29
 102e244:	0102e161 	.word	0x0102e161
 102e248:	0102dff5 	.word	0x0102dff5
 102e24c:	01038c00 	.word	0x01038c00
 102e250:	0102f6cd 	.word	0x0102f6cd

0102e254 <xQueueGenericSend>:
{
 102e254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 102e258:	b087      	sub	sp, #28
	configASSERT( pxQueue );
 102e25a:	4604      	mov	r4, r0
{
 102e25c:	9101      	str	r1, [sp, #4]
 102e25e:	9203      	str	r2, [sp, #12]
 102e260:	9302      	str	r3, [sp, #8]
	configASSERT( pxQueue );
 102e262:	2800      	cmp	r0, #0
 102e264:	d076      	beq.n	102e354 <xQueueGenericSend+0x100>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 102e266:	9b01      	ldr	r3, [sp, #4]
 102e268:	2b00      	cmp	r3, #0
 102e26a:	d061      	beq.n	102e330 <xQueueGenericSend+0xdc>
{
 102e26c:	2700      	movs	r7, #0
 102e26e:	4d3c      	ldr	r5, [pc, #240]	; (102e360 <xQueueGenericSend+0x10c>)
 102e270:	4e3c      	ldr	r6, [pc, #240]	; (102e364 <xQueueGenericSend+0x110>)
					vTaskSetTimeOutState( &xTimeOut );
 102e272:	f8df a114 	ldr.w	sl, [pc, #276]	; 102e388 <xQueueGenericSend+0x134>
		vTaskSuspendAll();
 102e276:	f8df 9114 	ldr.w	r9, [pc, #276]	; 102e38c <xQueueGenericSend+0x138>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 102e27a:	f8df 8114 	ldr.w	r8, [pc, #276]	; 102e390 <xQueueGenericSend+0x13c>
 102e27e:	e020      	b.n	102e2c2 <xQueueGenericSend+0x6e>
 102e280:	af04      	add	r7, sp, #16
		taskEXIT_CRITICAL();
 102e282:	47b0      	blx	r6
		vTaskSuspendAll();
 102e284:	47c8      	blx	r9
		prvLockQueue( pxQueue );
 102e286:	47a8      	blx	r5
 102e288:	6c63      	ldr	r3, [r4, #68]	; 0x44
 102e28a:	3301      	adds	r3, #1
 102e28c:	bf04      	itt	eq
 102e28e:	2300      	moveq	r3, #0
 102e290:	6463      	streq	r3, [r4, #68]	; 0x44
 102e292:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 102e294:	3301      	adds	r3, #1
 102e296:	bf04      	itt	eq
 102e298:	2300      	moveq	r3, #0
 102e29a:	64a3      	streq	r3, [r4, #72]	; 0x48
 102e29c:	47b0      	blx	r6
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 102e29e:	4638      	mov	r0, r7
 102e2a0:	a903      	add	r1, sp, #12
 102e2a2:	47c0      	blx	r8
 102e2a4:	2800      	cmp	r0, #0
 102e2a6:	d13a      	bne.n	102e31e <xQueueGenericSend+0xca>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 102e2a8:	47a8      	blx	r5
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
 102e2aa:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
 102e2ae:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
 102e2b0:	47b0      	blx	r6
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 102e2b2:	45bb      	cmp	fp, r7
 102e2b4:	d012      	beq.n	102e2dc <xQueueGenericSend+0x88>
				prvUnlockQueue( pxQueue );
 102e2b6:	4b2c      	ldr	r3, [pc, #176]	; (102e368 <xQueueGenericSend+0x114>)
 102e2b8:	4620      	mov	r0, r4
 102e2ba:	4798      	blx	r3
				( void ) xTaskResumeAll();
 102e2bc:	4b2b      	ldr	r3, [pc, #172]	; (102e36c <xQueueGenericSend+0x118>)
 102e2be:	4798      	blx	r3
 102e2c0:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 102e2c2:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 102e2c4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 102e2c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 102e2c8:	429a      	cmp	r2, r3
 102e2ca:	d316      	bcc.n	102e2fa <xQueueGenericSend+0xa6>
				if( xTicksToWait == ( portTickType ) 0 )
 102e2cc:	9803      	ldr	r0, [sp, #12]
 102e2ce:	b300      	cbz	r0, 102e312 <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
 102e2d0:	2f00      	cmp	r7, #0
 102e2d2:	d1d5      	bne.n	102e280 <xQueueGenericSend+0x2c>
					vTaskSetTimeOutState( &xTimeOut );
 102e2d4:	af04      	add	r7, sp, #16
 102e2d6:	4638      	mov	r0, r7
 102e2d8:	47d0      	blx	sl
 102e2da:	e7d2      	b.n	102e282 <xQueueGenericSend+0x2e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 102e2dc:	9903      	ldr	r1, [sp, #12]
 102e2de:	4b24      	ldr	r3, [pc, #144]	; (102e370 <xQueueGenericSend+0x11c>)
 102e2e0:	f104 0010 	add.w	r0, r4, #16
 102e2e4:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
 102e2e6:	4b20      	ldr	r3, [pc, #128]	; (102e368 <xQueueGenericSend+0x114>)
 102e2e8:	4620      	mov	r0, r4
 102e2ea:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
 102e2ec:	4b1f      	ldr	r3, [pc, #124]	; (102e36c <xQueueGenericSend+0x118>)
 102e2ee:	4798      	blx	r3
 102e2f0:	2800      	cmp	r0, #0
 102e2f2:	d1e5      	bne.n	102e2c0 <xQueueGenericSend+0x6c>
					portYIELD_WITHIN_API();
 102e2f4:	4b1f      	ldr	r3, [pc, #124]	; (102e374 <xQueueGenericSend+0x120>)
 102e2f6:	4798      	blx	r3
 102e2f8:	e7e2      	b.n	102e2c0 <xQueueGenericSend+0x6c>
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 102e2fa:	4b1f      	ldr	r3, [pc, #124]	; (102e378 <xQueueGenericSend+0x124>)
 102e2fc:	9a02      	ldr	r2, [sp, #8]
 102e2fe:	9901      	ldr	r1, [sp, #4]
 102e300:	4620      	mov	r0, r4
 102e302:	4798      	blx	r3
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 102e304:	6a63      	ldr	r3, [r4, #36]	; 0x24
 102e306:	b9e3      	cbnz	r3, 102e342 <xQueueGenericSend+0xee>
				taskEXIT_CRITICAL();
 102e308:	47b0      	blx	r6
				return pdPASS;
 102e30a:	2001      	movs	r0, #1
}
 102e30c:	b007      	add	sp, #28
 102e30e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 102e312:	9001      	str	r0, [sp, #4]
					taskEXIT_CRITICAL();
 102e314:	47b0      	blx	r6
					return errQUEUE_FULL;
 102e316:	9801      	ldr	r0, [sp, #4]
}
 102e318:	b007      	add	sp, #28
 102e31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			prvUnlockQueue( pxQueue );
 102e31e:	4620      	mov	r0, r4
 102e320:	4b11      	ldr	r3, [pc, #68]	; (102e368 <xQueueGenericSend+0x114>)
 102e322:	4798      	blx	r3
			( void ) xTaskResumeAll();
 102e324:	4b11      	ldr	r3, [pc, #68]	; (102e36c <xQueueGenericSend+0x118>)
 102e326:	4798      	blx	r3
			return errQUEUE_FULL;
 102e328:	2000      	movs	r0, #0
}
 102e32a:	b007      	add	sp, #28
 102e32c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 102e330:	6c23      	ldr	r3, [r4, #64]	; 0x40
 102e332:	2b00      	cmp	r3, #0
 102e334:	d09a      	beq.n	102e26c <xQueueGenericSend+0x18>
 102e336:	f240 2149 	movw	r1, #585	; 0x249
 102e33a:	4810      	ldr	r0, [pc, #64]	; (102e37c <xQueueGenericSend+0x128>)
 102e33c:	4b10      	ldr	r3, [pc, #64]	; (102e380 <xQueueGenericSend+0x12c>)
 102e33e:	4798      	blx	r3
 102e340:	e794      	b.n	102e26c <xQueueGenericSend+0x18>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 102e342:	f104 0024 	add.w	r0, r4, #36	; 0x24
 102e346:	4b0f      	ldr	r3, [pc, #60]	; (102e384 <xQueueGenericSend+0x130>)
 102e348:	4798      	blx	r3
 102e34a:	2801      	cmp	r0, #1
 102e34c:	d1dc      	bne.n	102e308 <xQueueGenericSend+0xb4>
						portYIELD_WITHIN_API();
 102e34e:	4b09      	ldr	r3, [pc, #36]	; (102e374 <xQueueGenericSend+0x120>)
 102e350:	4798      	blx	r3
 102e352:	e7d9      	b.n	102e308 <xQueueGenericSend+0xb4>
	configASSERT( pxQueue );
 102e354:	f44f 7112 	mov.w	r1, #584	; 0x248
 102e358:	4808      	ldr	r0, [pc, #32]	; (102e37c <xQueueGenericSend+0x128>)
 102e35a:	4b09      	ldr	r3, [pc, #36]	; (102e380 <xQueueGenericSend+0x12c>)
 102e35c:	4798      	blx	r3
 102e35e:	e782      	b.n	102e266 <xQueueGenericSend+0x12>
 102e360:	0102dddd 	.word	0x0102dddd
 102e364:	0102ddfd 	.word	0x0102ddfd
 102e368:	0102e0c9 	.word	0x0102e0c9
 102e36c:	0102eccd 	.word	0x0102eccd
 102e370:	0102eee5 	.word	0x0102eee5
 102e374:	0102ddbd 	.word	0x0102ddbd
 102e378:	0102e02d 	.word	0x0102e02d
 102e37c:	01038c00 	.word	0x01038c00
 102e380:	0102f6cd 	.word	0x0102f6cd
 102e384:	0102efd5 	.word	0x0102efd5
 102e388:	0102f061 	.word	0x0102f061
 102e38c:	0102ecbd 	.word	0x0102ecbd
 102e390:	0102f091 	.word	0x0102f091

0102e394 <xQueueGenericSendFromISR>:
{
 102e394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 102e398:	460d      	mov	r5, r1
 102e39a:	4617      	mov	r7, r2
 102e39c:	4698      	mov	r8, r3
	configASSERT( pxQueue );
 102e39e:	4604      	mov	r4, r0
 102e3a0:	b300      	cbz	r0, 102e3e4 <xQueueGenericSendFromISR+0x50>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 102e3a2:	b335      	cbz	r5, 102e3f2 <xQueueGenericSendFromISR+0x5e>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 102e3a4:	4b1e      	ldr	r3, [pc, #120]	; (102e420 <xQueueGenericSendFromISR+0x8c>)
 102e3a6:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 102e3a8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 102e3aa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 102e3ac:	429a      	cmp	r2, r3
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 102e3ae:	4606      	mov	r6, r0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 102e3b0:	d306      	bcc.n	102e3c0 <xQueueGenericSendFromISR+0x2c>
			xReturn = errQUEUE_FULL;
 102e3b2:	2400      	movs	r4, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 102e3b4:	4630      	mov	r0, r6
 102e3b6:	4b1b      	ldr	r3, [pc, #108]	; (102e424 <xQueueGenericSendFromISR+0x90>)
 102e3b8:	4798      	blx	r3
}
 102e3ba:	4620      	mov	r0, r4
 102e3bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 102e3c0:	4b19      	ldr	r3, [pc, #100]	; (102e428 <xQueueGenericSendFromISR+0x94>)
 102e3c2:	4642      	mov	r2, r8
 102e3c4:	4629      	mov	r1, r5
 102e3c6:	4620      	mov	r0, r4
 102e3c8:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
 102e3ca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 102e3cc:	3301      	adds	r3, #1
 102e3ce:	d019      	beq.n	102e404 <xQueueGenericSendFromISR+0x70>
				++( pxQueue->xTxLock );
 102e3d0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 102e3d2:	3301      	adds	r3, #1
 102e3d4:	64a3      	str	r3, [r4, #72]	; 0x48
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 102e3d6:	4630      	mov	r0, r6
			xReturn = pdPASS;
 102e3d8:	2401      	movs	r4, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 102e3da:	4b12      	ldr	r3, [pc, #72]	; (102e424 <xQueueGenericSendFromISR+0x90>)
 102e3dc:	4798      	blx	r3
}
 102e3de:	4620      	mov	r0, r4
 102e3e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( pxQueue );
 102e3e4:	f240 318f 	movw	r1, #911	; 0x38f
 102e3e8:	4810      	ldr	r0, [pc, #64]	; (102e42c <xQueueGenericSendFromISR+0x98>)
 102e3ea:	4b11      	ldr	r3, [pc, #68]	; (102e430 <xQueueGenericSendFromISR+0x9c>)
 102e3ec:	4798      	blx	r3
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 102e3ee:	2d00      	cmp	r5, #0
 102e3f0:	d1d8      	bne.n	102e3a4 <xQueueGenericSendFromISR+0x10>
 102e3f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 102e3f4:	2b00      	cmp	r3, #0
 102e3f6:	d0d5      	beq.n	102e3a4 <xQueueGenericSendFromISR+0x10>
 102e3f8:	f44f 7164 	mov.w	r1, #912	; 0x390
 102e3fc:	480b      	ldr	r0, [pc, #44]	; (102e42c <xQueueGenericSendFromISR+0x98>)
 102e3fe:	4b0c      	ldr	r3, [pc, #48]	; (102e430 <xQueueGenericSendFromISR+0x9c>)
 102e400:	4798      	blx	r3
 102e402:	e7cf      	b.n	102e3a4 <xQueueGenericSendFromISR+0x10>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 102e404:	6a63      	ldr	r3, [r4, #36]	; 0x24
 102e406:	2b00      	cmp	r3, #0
 102e408:	d0e5      	beq.n	102e3d6 <xQueueGenericSendFromISR+0x42>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 102e40a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 102e40e:	4b09      	ldr	r3, [pc, #36]	; (102e434 <xQueueGenericSendFromISR+0xa0>)
 102e410:	4798      	blx	r3
 102e412:	2800      	cmp	r0, #0
 102e414:	d0df      	beq.n	102e3d6 <xQueueGenericSendFromISR+0x42>
						if( pxHigherPriorityTaskWoken != NULL )
 102e416:	2f00      	cmp	r7, #0
 102e418:	d0dd      	beq.n	102e3d6 <xQueueGenericSendFromISR+0x42>
							*pxHigherPriorityTaskWoken = pdTRUE;
 102e41a:	2401      	movs	r4, #1
 102e41c:	603c      	str	r4, [r7, #0]
 102e41e:	e7c9      	b.n	102e3b4 <xQueueGenericSendFromISR+0x20>
 102e420:	0102ddcd 	.word	0x0102ddcd
 102e424:	0102ddf5 	.word	0x0102ddf5
 102e428:	0102e02d 	.word	0x0102e02d
 102e42c:	01038c00 	.word	0x01038c00
 102e430:	0102f6cd 	.word	0x0102f6cd
 102e434:	0102efd5 	.word	0x0102efd5

0102e438 <xQueueGenericReceive>:
{
 102e438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 102e43c:	b085      	sub	sp, #20
 102e43e:	468b      	mov	fp, r1
 102e440:	9201      	str	r2, [sp, #4]
 102e442:	9300      	str	r3, [sp, #0]
	configASSERT( pxQueue );
 102e444:	4604      	mov	r4, r0
 102e446:	2800      	cmp	r0, #0
 102e448:	d07d      	beq.n	102e546 <xQueueGenericReceive+0x10e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 102e44a:	f1bb 0f00 	cmp.w	fp, #0
 102e44e:	f000 8083 	beq.w	102e558 <xQueueGenericReceive+0x120>
{
 102e452:	2700      	movs	r7, #0
 102e454:	4d4b      	ldr	r5, [pc, #300]	; (102e584 <xQueueGenericReceive+0x14c>)
 102e456:	4e4c      	ldr	r6, [pc, #304]	; (102e588 <xQueueGenericReceive+0x150>)
					vTaskSetTimeOutState( &xTimeOut );
 102e458:	f8df a158 	ldr.w	sl, [pc, #344]	; 102e5b4 <xQueueGenericReceive+0x17c>
		vTaskSuspendAll();
 102e45c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 102e5b8 <xQueueGenericReceive+0x180>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 102e460:	f8df 8158 	ldr.w	r8, [pc, #344]	; 102e5bc <xQueueGenericReceive+0x184>
 102e464:	e025      	b.n	102e4b2 <xQueueGenericReceive+0x7a>
 102e466:	af02      	add	r7, sp, #8
		taskEXIT_CRITICAL();
 102e468:	47b0      	blx	r6
		vTaskSuspendAll();
 102e46a:	47c8      	blx	r9
		prvLockQueue( pxQueue );
 102e46c:	47a8      	blx	r5
 102e46e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 102e470:	3301      	adds	r3, #1
 102e472:	bf04      	itt	eq
 102e474:	2300      	moveq	r3, #0
 102e476:	6463      	streq	r3, [r4, #68]	; 0x44
 102e478:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 102e47a:	3301      	adds	r3, #1
 102e47c:	bf04      	itt	eq
 102e47e:	2300      	moveq	r3, #0
 102e480:	64a3      	streq	r3, [r4, #72]	; 0x48
 102e482:	47b0      	blx	r6
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 102e484:	4638      	mov	r0, r7
 102e486:	a901      	add	r1, sp, #4
 102e488:	47c0      	blx	r8
 102e48a:	2800      	cmp	r0, #0
 102e48c:	d14a      	bne.n	102e524 <xQueueGenericReceive+0xec>
	taskENTER_CRITICAL();
 102e48e:	47a8      	blx	r5
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
 102e490:	6ba7      	ldr	r7, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 102e492:	47b0      	blx	r6
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 102e494:	b9cf      	cbnz	r7, 102e4ca <xQueueGenericReceive+0x92>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 102e496:	6823      	ldr	r3, [r4, #0]
 102e498:	b303      	cbz	r3, 102e4dc <xQueueGenericReceive+0xa4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 102e49a:	9901      	ldr	r1, [sp, #4]
 102e49c:	4b3b      	ldr	r3, [pc, #236]	; (102e58c <xQueueGenericReceive+0x154>)
 102e49e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 102e4a2:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
 102e4a4:	4b3a      	ldr	r3, [pc, #232]	; (102e590 <xQueueGenericReceive+0x158>)
 102e4a6:	4620      	mov	r0, r4
 102e4a8:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
 102e4aa:	4b3a      	ldr	r3, [pc, #232]	; (102e594 <xQueueGenericReceive+0x15c>)
 102e4ac:	4798      	blx	r3
 102e4ae:	b190      	cbz	r0, 102e4d6 <xQueueGenericReceive+0x9e>
 102e4b0:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 102e4b2:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 102e4b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 102e4b6:	b9bb      	cbnz	r3, 102e4e8 <xQueueGenericReceive+0xb0>
				if( xTicksToWait == ( portTickType ) 0 )
 102e4b8:	9801      	ldr	r0, [sp, #4]
 102e4ba:	2800      	cmp	r0, #0
 102e4bc:	d02c      	beq.n	102e518 <xQueueGenericReceive+0xe0>
				else if( xEntryTimeSet == pdFALSE )
 102e4be:	2f00      	cmp	r7, #0
 102e4c0:	d1d1      	bne.n	102e466 <xQueueGenericReceive+0x2e>
					vTaskSetTimeOutState( &xTimeOut );
 102e4c2:	af02      	add	r7, sp, #8
 102e4c4:	4638      	mov	r0, r7
 102e4c6:	47d0      	blx	sl
 102e4c8:	e7ce      	b.n	102e468 <xQueueGenericReceive+0x30>
				prvUnlockQueue( pxQueue );
 102e4ca:	4620      	mov	r0, r4
 102e4cc:	4b30      	ldr	r3, [pc, #192]	; (102e590 <xQueueGenericReceive+0x158>)
 102e4ce:	4798      	blx	r3
				( void ) xTaskResumeAll();
 102e4d0:	4b30      	ldr	r3, [pc, #192]	; (102e594 <xQueueGenericReceive+0x15c>)
 102e4d2:	4798      	blx	r3
 102e4d4:	e7ec      	b.n	102e4b0 <xQueueGenericReceive+0x78>
					portYIELD_WITHIN_API();
 102e4d6:	4b30      	ldr	r3, [pc, #192]	; (102e598 <xQueueGenericReceive+0x160>)
 102e4d8:	4798      	blx	r3
 102e4da:	e7e9      	b.n	102e4b0 <xQueueGenericReceive+0x78>
						portENTER_CRITICAL();
 102e4dc:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 102e4de:	6860      	ldr	r0, [r4, #4]
 102e4e0:	4b2e      	ldr	r3, [pc, #184]	; (102e59c <xQueueGenericReceive+0x164>)
 102e4e2:	4798      	blx	r3
						portEXIT_CRITICAL();
 102e4e4:	47b0      	blx	r6
 102e4e6:	e7d8      	b.n	102e49a <xQueueGenericReceive+0x62>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 102e4e8:	4b2d      	ldr	r3, [pc, #180]	; (102e5a0 <xQueueGenericReceive+0x168>)
				pcOriginalReadPosition = pxQueue->pcReadFrom;
 102e4ea:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 102e4ec:	4659      	mov	r1, fp
 102e4ee:	4620      	mov	r0, r4
 102e4f0:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
 102e4f2:	9b00      	ldr	r3, [sp, #0]
 102e4f4:	b9fb      	cbnz	r3, 102e536 <xQueueGenericReceive+0xfe>
					--( pxQueue->uxMessagesWaiting );
 102e4f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 102e4f8:	6822      	ldr	r2, [r4, #0]
					--( pxQueue->uxMessagesWaiting );
 102e4fa:	3b01      	subs	r3, #1
 102e4fc:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 102e4fe:	2a00      	cmp	r2, #0
 102e500:	d03b      	beq.n	102e57a <xQueueGenericReceive+0x142>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 102e502:	6923      	ldr	r3, [r4, #16]
 102e504:	b1d3      	cbz	r3, 102e53c <xQueueGenericReceive+0x104>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 102e506:	f104 0010 	add.w	r0, r4, #16
 102e50a:	4b26      	ldr	r3, [pc, #152]	; (102e5a4 <xQueueGenericReceive+0x16c>)
 102e50c:	4798      	blx	r3
 102e50e:	2801      	cmp	r0, #1
 102e510:	d114      	bne.n	102e53c <xQueueGenericReceive+0x104>
							portYIELD_WITHIN_API();
 102e512:	4b21      	ldr	r3, [pc, #132]	; (102e598 <xQueueGenericReceive+0x160>)
 102e514:	4798      	blx	r3
 102e516:	e011      	b.n	102e53c <xQueueGenericReceive+0x104>
 102e518:	9000      	str	r0, [sp, #0]
					taskEXIT_CRITICAL();
 102e51a:	47b0      	blx	r6
					return errQUEUE_EMPTY;
 102e51c:	9800      	ldr	r0, [sp, #0]
}
 102e51e:	b005      	add	sp, #20
 102e520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			prvUnlockQueue( pxQueue );
 102e524:	4620      	mov	r0, r4
 102e526:	4b1a      	ldr	r3, [pc, #104]	; (102e590 <xQueueGenericReceive+0x158>)
 102e528:	4798      	blx	r3
			( void ) xTaskResumeAll();
 102e52a:	4b1a      	ldr	r3, [pc, #104]	; (102e594 <xQueueGenericReceive+0x15c>)
 102e52c:	4798      	blx	r3
			return errQUEUE_EMPTY;
 102e52e:	2000      	movs	r0, #0
}
 102e530:	b005      	add	sp, #20
 102e532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 102e536:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->pcReadFrom = pcOriginalReadPosition;
 102e538:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 102e53a:	b9bb      	cbnz	r3, 102e56c <xQueueGenericReceive+0x134>
				taskEXIT_CRITICAL();
 102e53c:	47b0      	blx	r6
				return pdPASS;
 102e53e:	2001      	movs	r0, #1
}
 102e540:	b005      	add	sp, #20
 102e542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	configASSERT( pxQueue );
 102e546:	f240 31cb 	movw	r1, #971	; 0x3cb
 102e54a:	4817      	ldr	r0, [pc, #92]	; (102e5a8 <xQueueGenericReceive+0x170>)
 102e54c:	4b17      	ldr	r3, [pc, #92]	; (102e5ac <xQueueGenericReceive+0x174>)
 102e54e:	4798      	blx	r3
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 102e550:	f1bb 0f00 	cmp.w	fp, #0
 102e554:	f47f af7d 	bne.w	102e452 <xQueueGenericReceive+0x1a>
 102e558:	6c23      	ldr	r3, [r4, #64]	; 0x40
 102e55a:	2b00      	cmp	r3, #0
 102e55c:	f43f af79 	beq.w	102e452 <xQueueGenericReceive+0x1a>
 102e560:	f44f 7173 	mov.w	r1, #972	; 0x3cc
 102e564:	4810      	ldr	r0, [pc, #64]	; (102e5a8 <xQueueGenericReceive+0x170>)
 102e566:	4b11      	ldr	r3, [pc, #68]	; (102e5ac <xQueueGenericReceive+0x174>)
 102e568:	4798      	blx	r3
 102e56a:	e772      	b.n	102e452 <xQueueGenericReceive+0x1a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 102e56c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 102e570:	4b0c      	ldr	r3, [pc, #48]	; (102e5a4 <xQueueGenericReceive+0x16c>)
 102e572:	4798      	blx	r3
 102e574:	2800      	cmp	r0, #0
 102e576:	d0e1      	beq.n	102e53c <xQueueGenericReceive+0x104>
 102e578:	e7cb      	b.n	102e512 <xQueueGenericReceive+0xda>
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
 102e57a:	4b0d      	ldr	r3, [pc, #52]	; (102e5b0 <xQueueGenericReceive+0x178>)
 102e57c:	4798      	blx	r3
 102e57e:	6060      	str	r0, [r4, #4]
 102e580:	e7bf      	b.n	102e502 <xQueueGenericReceive+0xca>
 102e582:	bf00      	nop
 102e584:	0102dddd 	.word	0x0102dddd
 102e588:	0102ddfd 	.word	0x0102ddfd
 102e58c:	0102eee5 	.word	0x0102eee5
 102e590:	0102e0c9 	.word	0x0102e0c9
 102e594:	0102eccd 	.word	0x0102eccd
 102e598:	0102ddbd 	.word	0x0102ddbd
 102e59c:	0102f165 	.word	0x0102f165
 102e5a0:	0102e0a1 	.word	0x0102e0a1
 102e5a4:	0102efd5 	.word	0x0102efd5
 102e5a8:	01038c00 	.word	0x01038c00
 102e5ac:	0102f6cd 	.word	0x0102f6cd
 102e5b0:	0102f13d 	.word	0x0102f13d
 102e5b4:	0102f061 	.word	0x0102f061
 102e5b8:	0102ecbd 	.word	0x0102ecbd
 102e5bc:	0102f091 	.word	0x0102f091

0102e5c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
 102e5c0:	b570      	push	{r4, r5, r6, lr}
 102e5c2:	4604      	mov	r4, r0
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 102e5c4:	4b0d      	ldr	r3, [pc, #52]	; (102e5fc <vQueueWaitForMessageRestricted+0x3c>)
	{
 102e5c6:	460d      	mov	r5, r1
		prvLockQueue( pxQueue );
 102e5c8:	4798      	blx	r3
 102e5ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 102e5cc:	3301      	adds	r3, #1
 102e5ce:	bf04      	itt	eq
 102e5d0:	2300      	moveq	r3, #0
 102e5d2:	6463      	streq	r3, [r4, #68]	; 0x44
 102e5d4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 102e5d6:	3301      	adds	r3, #1
 102e5d8:	bf04      	itt	eq
 102e5da:	2300      	moveq	r3, #0
 102e5dc:	64a3      	streq	r3, [r4, #72]	; 0x48
 102e5de:	4b08      	ldr	r3, [pc, #32]	; (102e600 <vQueueWaitForMessageRestricted+0x40>)
 102e5e0:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
 102e5e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 102e5e4:	b923      	cbnz	r3, 102e5f0 <vQueueWaitForMessageRestricted+0x30>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 102e5e6:	4629      	mov	r1, r5
 102e5e8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 102e5ec:	4b05      	ldr	r3, [pc, #20]	; (102e604 <vQueueWaitForMessageRestricted+0x44>)
 102e5ee:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
 102e5f0:	4620      	mov	r0, r4
 102e5f2:	4b05      	ldr	r3, [pc, #20]	; (102e608 <vQueueWaitForMessageRestricted+0x48>)
	}
 102e5f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 102e5f8:	4718      	bx	r3
 102e5fa:	bf00      	nop
 102e5fc:	0102dddd 	.word	0x0102dddd
 102e600:	0102ddfd 	.word	0x0102ddfd
 102e604:	0102ef69 	.word	0x0102ef69
 102e608:	0102e0c9 	.word	0x0102e0c9

0102e60c <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 102e60c:	4b0d      	ldr	r3, [pc, #52]	; (102e644 <prvAddCurrentTaskToDelayedList+0x38>)

	if( xTimeToWake < xTickCount )
 102e60e:	4a0e      	ldr	r2, [pc, #56]	; (102e648 <prvAddCurrentTaskToDelayedList+0x3c>)
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 102e610:	6819      	ldr	r1, [r3, #0]
	if( xTimeToWake < xTickCount )
 102e612:	6812      	ldr	r2, [r2, #0]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 102e614:	6048      	str	r0, [r1, #4]
	if( xTimeToWake < xTickCount )
 102e616:	4290      	cmp	r0, r2
 102e618:	d30d      	bcc.n	102e636 <prvAddCurrentTaskToDelayedList+0x2a>
{
 102e61a:	b510      	push	{r4, lr}
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 102e61c:	490b      	ldr	r1, [pc, #44]	; (102e64c <prvAddCurrentTaskToDelayedList+0x40>)
 102e61e:	4a0c      	ldr	r2, [pc, #48]	; (102e650 <prvAddCurrentTaskToDelayedList+0x44>)
 102e620:	4604      	mov	r4, r0
 102e622:	6808      	ldr	r0, [r1, #0]
 102e624:	6819      	ldr	r1, [r3, #0]
 102e626:	3104      	adds	r1, #4
 102e628:	4790      	blx	r2

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 102e62a:	4b0a      	ldr	r3, [pc, #40]	; (102e654 <prvAddCurrentTaskToDelayedList+0x48>)
 102e62c:	681a      	ldr	r2, [r3, #0]
 102e62e:	4294      	cmp	r4, r2
		{
			xNextTaskUnblockTime = xTimeToWake;
 102e630:	bf38      	it	cc
 102e632:	601c      	strcc	r4, [r3, #0]
 102e634:	bd10      	pop	{r4, pc}
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 102e636:	4908      	ldr	r1, [pc, #32]	; (102e658 <prvAddCurrentTaskToDelayedList+0x4c>)
 102e638:	4a05      	ldr	r2, [pc, #20]	; (102e650 <prvAddCurrentTaskToDelayedList+0x44>)
 102e63a:	6808      	ldr	r0, [r1, #0]
 102e63c:	6819      	ldr	r1, [r3, #0]
 102e63e:	3104      	adds	r1, #4
 102e640:	4710      	bx	r2
 102e642:	bf00      	nop
 102e644:	200104e0 	.word	0x200104e0
 102e648:	200105dc 	.word	0x200105dc
 102e64c:	200104e4 	.word	0x200104e4
 102e650:	0102dcad 	.word	0x0102dcad
 102e654:	20000098 	.word	0x20000098
 102e658:	200104e8 	.word	0x200104e8

0102e65c <vTaskIncrementTick.part.3>:
void vTaskIncrementTick( void )
 102e65c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		++xTickCount;
 102e660:	4e3c      	ldr	r6, [pc, #240]	; (102e754 <vTaskIncrementTick.part.3+0xf8>)
 102e662:	6833      	ldr	r3, [r6, #0]
 102e664:	3301      	adds	r3, #1
 102e666:	6033      	str	r3, [r6, #0]
		if( xTickCount == ( portTickType ) 0U )
 102e668:	6833      	ldr	r3, [r6, #0]
void vTaskIncrementTick( void )
 102e66a:	b083      	sub	sp, #12
		if( xTickCount == ( portTickType ) 0U )
 102e66c:	2b00      	cmp	r3, #0
 102e66e:	d047      	beq.n	102e700 <vTaskIncrementTick.part.3+0xa4>
 102e670:	4b39      	ldr	r3, [pc, #228]	; (102e758 <vTaskIncrementTick.part.3+0xfc>)
 102e672:	9301      	str	r3, [sp, #4]
		prvCheckDelayedTasks();
 102e674:	9b01      	ldr	r3, [sp, #4]
 102e676:	6832      	ldr	r2, [r6, #0]
 102e678:	681b      	ldr	r3, [r3, #0]
 102e67a:	429a      	cmp	r2, r3
 102e67c:	d33d      	bcc.n	102e6fa <vTaskIncrementTick.part.3+0x9e>
 102e67e:	4c37      	ldr	r4, [pc, #220]	; (102e75c <vTaskIncrementTick.part.3+0x100>)
 102e680:	6823      	ldr	r3, [r4, #0]
 102e682:	681b      	ldr	r3, [r3, #0]
 102e684:	2b00      	cmp	r3, #0
 102e686:	d034      	beq.n	102e6f2 <vTaskIncrementTick.part.3+0x96>
 102e688:	6823      	ldr	r3, [r4, #0]
 102e68a:	68db      	ldr	r3, [r3, #12]
 102e68c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 102e690:	6831      	ldr	r1, [r6, #0]
 102e692:	f8db 2004 	ldr.w	r2, [fp, #4]
 102e696:	428a      	cmp	r2, r1
 102e698:	d851      	bhi.n	102e73e <vTaskIncrementTick.part.3+0xe2>
 102e69a:	4f31      	ldr	r7, [pc, #196]	; (102e760 <vTaskIncrementTick.part.3+0x104>)
 102e69c:	4d31      	ldr	r5, [pc, #196]	; (102e764 <vTaskIncrementTick.part.3+0x108>)
 102e69e:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 102e77c <vTaskIncrementTick.part.3+0x120>
 102e6a2:	f04f 0801 	mov.w	r8, #1
 102e6a6:	e008      	b.n	102e6ba <vTaskIncrementTick.part.3+0x5e>
 102e6a8:	6823      	ldr	r3, [r4, #0]
 102e6aa:	68db      	ldr	r3, [r3, #12]
 102e6ac:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 102e6b0:	6831      	ldr	r1, [r6, #0]
 102e6b2:	f8db 2004 	ldr.w	r2, [fp, #4]
 102e6b6:	428a      	cmp	r2, r1
 102e6b8:	d841      	bhi.n	102e73e <vTaskIncrementTick.part.3+0xe2>
 102e6ba:	f10b 0904 	add.w	r9, fp, #4
 102e6be:	4648      	mov	r0, r9
 102e6c0:	47b8      	blx	r7
 102e6c2:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 102e6c6:	f10b 0018 	add.w	r0, fp, #24
 102e6ca:	b102      	cbz	r2, 102e6ce <vTaskIncrementTick.part.3+0x72>
 102e6cc:	47b8      	blx	r7
 102e6ce:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 102e6d2:	682a      	ldr	r2, [r5, #0]
 102e6d4:	fa08 f300 	lsl.w	r3, r8, r0
 102e6d8:	4313      	orrs	r3, r2
 102e6da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 102e6de:	602b      	str	r3, [r5, #0]
 102e6e0:	4649      	mov	r1, r9
 102e6e2:	4b21      	ldr	r3, [pc, #132]	; (102e768 <vTaskIncrementTick.part.3+0x10c>)
 102e6e4:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 102e6e8:	4798      	blx	r3
 102e6ea:	6823      	ldr	r3, [r4, #0]
 102e6ec:	681b      	ldr	r3, [r3, #0]
 102e6ee:	2b00      	cmp	r3, #0
 102e6f0:	d1da      	bne.n	102e6a8 <vTaskIncrementTick.part.3+0x4c>
 102e6f2:	9a01      	ldr	r2, [sp, #4]
 102e6f4:	f04f 33ff 	mov.w	r3, #4294967295
 102e6f8:	6013      	str	r3, [r2, #0]
}
 102e6fa:	b003      	add	sp, #12
 102e6fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
 102e700:	4c16      	ldr	r4, [pc, #88]	; (102e75c <vTaskIncrementTick.part.3+0x100>)
 102e702:	6823      	ldr	r3, [r4, #0]
 102e704:	681b      	ldr	r3, [r3, #0]
 102e706:	b9fb      	cbnz	r3, 102e748 <vTaskIncrementTick.part.3+0xec>
			pxDelayedTaskList = pxOverflowDelayedTaskList;
 102e708:	4b18      	ldr	r3, [pc, #96]	; (102e76c <vTaskIncrementTick.part.3+0x110>)
			pxTemp = pxDelayedTaskList;
 102e70a:	6821      	ldr	r1, [r4, #0]
			xNumOfOverflows++;
 102e70c:	4a18      	ldr	r2, [pc, #96]	; (102e770 <vTaskIncrementTick.part.3+0x114>)
			pxDelayedTaskList = pxOverflowDelayedTaskList;
 102e70e:	6818      	ldr	r0, [r3, #0]
 102e710:	6020      	str	r0, [r4, #0]
			pxOverflowDelayedTaskList = pxTemp;
 102e712:	6019      	str	r1, [r3, #0]
			xNumOfOverflows++;
 102e714:	6813      	ldr	r3, [r2, #0]
 102e716:	3301      	adds	r3, #1
 102e718:	6013      	str	r3, [r2, #0]
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 102e71a:	6823      	ldr	r3, [r4, #0]
 102e71c:	681b      	ldr	r3, [r3, #0]
 102e71e:	b933      	cbnz	r3, 102e72e <vTaskIncrementTick.part.3+0xd2>
				xNextTaskUnblockTime = portMAX_DELAY;
 102e720:	4b0d      	ldr	r3, [pc, #52]	; (102e758 <vTaskIncrementTick.part.3+0xfc>)
 102e722:	9301      	str	r3, [sp, #4]
 102e724:	461a      	mov	r2, r3
 102e726:	f04f 33ff 	mov.w	r3, #4294967295
 102e72a:	6013      	str	r3, [r2, #0]
 102e72c:	e7a2      	b.n	102e674 <vTaskIncrementTick.part.3+0x18>
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 102e72e:	6823      	ldr	r3, [r4, #0]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 102e730:	4a09      	ldr	r2, [pc, #36]	; (102e758 <vTaskIncrementTick.part.3+0xfc>)
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 102e732:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 102e734:	9201      	str	r2, [sp, #4]
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 102e736:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 102e738:	685b      	ldr	r3, [r3, #4]
 102e73a:	6013      	str	r3, [r2, #0]
 102e73c:	e79a      	b.n	102e674 <vTaskIncrementTick.part.3+0x18>
		prvCheckDelayedTasks();
 102e73e:	9b01      	ldr	r3, [sp, #4]
 102e740:	601a      	str	r2, [r3, #0]
}
 102e742:	b003      	add	sp, #12
 102e744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
 102e748:	f240 618c 	movw	r1, #1676	; 0x68c
 102e74c:	4809      	ldr	r0, [pc, #36]	; (102e774 <vTaskIncrementTick.part.3+0x118>)
 102e74e:	4b0a      	ldr	r3, [pc, #40]	; (102e778 <vTaskIncrementTick.part.3+0x11c>)
 102e750:	4798      	blx	r3
 102e752:	e7d9      	b.n	102e708 <vTaskIncrementTick.part.3+0xac>
 102e754:	200105dc 	.word	0x200105dc
 102e758:	20000098 	.word	0x20000098
 102e75c:	200104e4 	.word	0x200104e4
 102e760:	0102dd41 	.word	0x0102dd41
 102e764:	20010564 	.word	0x20010564
 102e768:	0102dc91 	.word	0x0102dc91
 102e76c:	200104e8 	.word	0x200104e8
 102e770:	20010598 	.word	0x20010598
 102e774:	01038c40 	.word	0x01038c40
 102e778:	0102f6cd 	.word	0x0102f6cd
 102e77c:	200104ec 	.word	0x200104ec

0102e780 <vTaskSwitchContext.part.4>:
void vTaskSwitchContext( void )
 102e780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 102e782:	4f17      	ldr	r7, [pc, #92]	; (102e7e0 <vTaskSwitchContext.part.4+0x60>)
 102e784:	683a      	ldr	r2, [r7, #0]
 102e786:	683b      	ldr	r3, [r7, #0]
 102e788:	6812      	ldr	r2, [r2, #0]
 102e78a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 102e78c:	429a      	cmp	r2, r3
 102e78e:	d91b      	bls.n	102e7c8 <vTaskSwitchContext.part.4+0x48>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 102e790:	4b14      	ldr	r3, [pc, #80]	; (102e7e4 <vTaskSwitchContext.part.4+0x64>)
 102e792:	681c      	ldr	r4, [r3, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline unsigned char ucPortCountLeadingZeros( unsigned long ulBitmap )
	{
	unsigned char ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 102e794:	fab4 f484 	clz	r4, r4
 102e798:	b2e4      	uxtb	r4, r4
 102e79a:	f1c4 051f 	rsb	r5, r4, #31
 102e79e:	00ac      	lsls	r4, r5, #2
 102e7a0:	1963      	adds	r3, r4, r5
 102e7a2:	009b      	lsls	r3, r3, #2
 102e7a4:	4e10      	ldr	r6, [pc, #64]	; (102e7e8 <vTaskSwitchContext.part.4+0x68>)
 102e7a6:	58f3      	ldr	r3, [r6, r3]
 102e7a8:	b1a3      	cbz	r3, 102e7d4 <vTaskSwitchContext.part.4+0x54>
 102e7aa:	442c      	add	r4, r5
 102e7ac:	00a4      	lsls	r4, r4, #2
 102e7ae:	1932      	adds	r2, r6, r4
 102e7b0:	3408      	adds	r4, #8
 102e7b2:	6853      	ldr	r3, [r2, #4]
 102e7b4:	685b      	ldr	r3, [r3, #4]
 102e7b6:	6053      	str	r3, [r2, #4]
 102e7b8:	4434      	add	r4, r6
 102e7ba:	42a3      	cmp	r3, r4
 102e7bc:	bf04      	itt	eq
 102e7be:	685b      	ldreq	r3, [r3, #4]
 102e7c0:	6053      	streq	r3, [r2, #4]
 102e7c2:	68db      	ldr	r3, [r3, #12]
 102e7c4:	603b      	str	r3, [r7, #0]
 102e7c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 102e7c8:	6838      	ldr	r0, [r7, #0]
 102e7ca:	6839      	ldr	r1, [r7, #0]
 102e7cc:	4b07      	ldr	r3, [pc, #28]	; (102e7ec <vTaskSwitchContext.part.4+0x6c>)
 102e7ce:	3134      	adds	r1, #52	; 0x34
 102e7d0:	4798      	blx	r3
 102e7d2:	e7dd      	b.n	102e790 <vTaskSwitchContext.part.4+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 102e7d4:	f240 713e 	movw	r1, #1854	; 0x73e
 102e7d8:	4805      	ldr	r0, [pc, #20]	; (102e7f0 <vTaskSwitchContext.part.4+0x70>)
 102e7da:	4b06      	ldr	r3, [pc, #24]	; (102e7f4 <vTaskSwitchContext.part.4+0x74>)
 102e7dc:	4798      	blx	r3
 102e7de:	e7e4      	b.n	102e7aa <vTaskSwitchContext.part.4+0x2a>
 102e7e0:	200104e0 	.word	0x200104e0
 102e7e4:	20010564 	.word	0x20010564
 102e7e8:	200104ec 	.word	0x200104ec
 102e7ec:	0102f6b5 	.word	0x0102f6b5
 102e7f0:	01038c40 	.word	0x01038c40
 102e7f4:	0102f6cd 	.word	0x0102f6cd

0102e7f8 <xTaskGenericCreate>:
{
 102e7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 102e7fc:	b083      	sub	sp, #12
 102e7fe:	460d      	mov	r5, r1
 102e800:	4690      	mov	r8, r2
 102e802:	469b      	mov	fp, r3
 102e804:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 102e806:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
 102e80a:	4607      	mov	r7, r0
 102e80c:	2800      	cmp	r0, #0
 102e80e:	f000 80ab 	beq.w	102e968 <xTaskGenericCreate+0x170>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
 102e812:	2e04      	cmp	r6, #4
 102e814:	f200 8086 	bhi.w	102e924 <xTaskGenericCreate+0x12c>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 102e818:	204c      	movs	r0, #76	; 0x4c
 102e81a:	f8df a21c 	ldr.w	sl, [pc, #540]	; 102ea38 <xTaskGenericCreate+0x240>
 102e81e:	47d0      	blx	sl

	if( pxNewTCB != NULL )
 102e820:	4604      	mov	r4, r0
 102e822:	2800      	cmp	r0, #0
 102e824:	f000 808b 	beq.w	102e93e <xTaskGenericCreate+0x146>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
 102e828:	f1b9 0f00 	cmp.w	r9, #0
 102e82c:	f000 80a2 	beq.w	102e974 <xTaskGenericCreate+0x17c>
 102e830:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
 102e834:	ea4f 0288 	mov.w	r2, r8, lsl #2
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
 102e838:	4648      	mov	r0, r9
 102e83a:	21a5      	movs	r1, #165	; 0xa5
 102e83c:	4b67      	ldr	r3, [pc, #412]	; (102e9dc <xTaskGenericCreate+0x1e4>)
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 102e83e:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 102ea3c <xTaskGenericCreate+0x244>
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
 102e842:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 102e844:	f108 4280 	add.w	r2, r8, #1073741824	; 0x40000000
 102e848:	6b23      	ldr	r3, [r4, #48]	; 0x30
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
 102e84a:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 102ea40 <xTaskGenericCreate+0x248>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 102e84e:	3a01      	subs	r2, #1
 102e850:	eb03 0382 	add.w	r3, r3, r2, lsl #2
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
 102e854:	4629      	mov	r1, r5
 102e856:	220a      	movs	r2, #10
 102e858:	f104 0034 	add.w	r0, r4, #52	; 0x34
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
 102e85c:	f023 0a07 	bic.w	sl, r3, #7
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
 102e860:	47c0      	blx	r8
 102e862:	2e04      	cmp	r6, #4
 102e864:	4635      	mov	r5, r6
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
 102e866:	f04f 0200 	mov.w	r2, #0
 102e86a:	bf28      	it	cs
 102e86c:	2504      	movcs	r5, #4
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 102e86e:	f104 0804 	add.w	r8, r4, #4
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
 102e872:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
 102e876:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
 102e878:	64a5      	str	r5, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 102e87a:	4640      	mov	r0, r8
 102e87c:	47c8      	blx	r9
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
 102e87e:	f1c5 0505 	rsb	r5, r5, #5
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 102e882:	f104 0018 	add.w	r0, r4, #24
 102e886:	47c8      	blx	r9
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 102e888:	4b55      	ldr	r3, [pc, #340]	; (102e9e0 <xTaskGenericCreate+0x1e8>)
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
 102e88a:	61a5      	str	r5, [r4, #24]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 102e88c:	4650      	mov	r0, sl
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 102e88e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 102e890:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 102e892:	465a      	mov	r2, fp
 102e894:	4639      	mov	r1, r7
 102e896:	4798      	blx	r3
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 102e898:	0743      	lsls	r3, r0, #29
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 102e89a:	6020      	str	r0, [r4, #0]
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 102e89c:	d154      	bne.n	102e948 <xTaskGenericCreate+0x150>
		if( ( void * ) pxCreatedTask != NULL )
 102e89e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 102e8a0:	b103      	cbz	r3, 102e8a4 <xTaskGenericCreate+0xac>
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 102e8a2:	601c      	str	r4, [r3, #0]
		taskENTER_CRITICAL();
 102e8a4:	4b4f      	ldr	r3, [pc, #316]	; (102e9e4 <xTaskGenericCreate+0x1ec>)
			if( pxCurrentTCB == NULL )
 102e8a6:	4d50      	ldr	r5, [pc, #320]	; (102e9e8 <xTaskGenericCreate+0x1f0>)
		taskENTER_CRITICAL();
 102e8a8:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
 102e8aa:	4a50      	ldr	r2, [pc, #320]	; (102e9ec <xTaskGenericCreate+0x1f4>)
 102e8ac:	6813      	ldr	r3, [r2, #0]
 102e8ae:	3301      	adds	r3, #1
 102e8b0:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 102e8b2:	682b      	ldr	r3, [r5, #0]
 102e8b4:	2b00      	cmp	r3, #0
 102e8b6:	d051      	beq.n	102e95c <xTaskGenericCreate+0x164>
				if( xSchedulerRunning == pdFALSE )
 102e8b8:	4f4d      	ldr	r7, [pc, #308]	; (102e9f0 <xTaskGenericCreate+0x1f8>)
 102e8ba:	683b      	ldr	r3, [r7, #0]
 102e8bc:	b363      	cbz	r3, 102e918 <xTaskGenericCreate+0x120>
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
 102e8be:	4a4d      	ldr	r2, [pc, #308]	; (102e9f4 <xTaskGenericCreate+0x1fc>)
 102e8c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 102e8c2:	6811      	ldr	r1, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 102e8c4:	f8df 917c 	ldr.w	r9, [pc, #380]	; 102ea44 <xTaskGenericCreate+0x24c>
			prvAddTaskToReadyQueue( pxNewTCB );
 102e8c8:	f8df e17c 	ldr.w	lr, [pc, #380]	; 102ea48 <xTaskGenericCreate+0x250>
 102e8cc:	484a      	ldr	r0, [pc, #296]	; (102e9f8 <xTaskGenericCreate+0x200>)
 102e8ce:	f8de c000 	ldr.w	ip, [lr]
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
 102e8d2:	428b      	cmp	r3, r1
				uxTopUsedPriority = pxNewTCB->uxPriority;
 102e8d4:	bf88      	it	hi
 102e8d6:	6013      	strhi	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 102e8d8:	f8d9 2000 	ldr.w	r2, [r9]
 102e8dc:	6422      	str	r2, [r4, #64]	; 0x40
			prvAddTaskToReadyQueue( pxNewTCB );
 102e8de:	2401      	movs	r4, #1
			uxTaskNumber++;
 102e8e0:	4422      	add	r2, r4
 102e8e2:	f8c9 2000 	str.w	r2, [r9]
			prvAddTaskToReadyQueue( pxNewTCB );
 102e8e6:	fa04 f203 	lsl.w	r2, r4, r3
 102e8ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 102e8ee:	ea42 020c 	orr.w	r2, r2, ip
 102e8f2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 102e8f6:	4641      	mov	r1, r8
 102e8f8:	4b40      	ldr	r3, [pc, #256]	; (102e9fc <xTaskGenericCreate+0x204>)
 102e8fa:	f8ce 2000 	str.w	r2, [lr]
 102e8fe:	4798      	blx	r3
		taskEXIT_CRITICAL();
 102e900:	4b3f      	ldr	r3, [pc, #252]	; (102ea00 <xTaskGenericCreate+0x208>)
 102e902:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
 102e904:	683b      	ldr	r3, [r7, #0]
 102e906:	b11b      	cbz	r3, 102e910 <xTaskGenericCreate+0x118>
			if( pxCurrentTCB->uxPriority < uxPriority )
 102e908:	682b      	ldr	r3, [r5, #0]
 102e90a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 102e90c:	429e      	cmp	r6, r3
 102e90e:	d821      	bhi.n	102e954 <xTaskGenericCreate+0x15c>
 102e910:	4620      	mov	r0, r4
}
 102e912:	b003      	add	sp, #12
 102e914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if( pxCurrentTCB->uxPriority <= uxPriority )
 102e918:	682b      	ldr	r3, [r5, #0]
 102e91a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 102e91c:	429e      	cmp	r6, r3
						pxCurrentTCB = pxNewTCB;
 102e91e:	bf28      	it	cs
 102e920:	602c      	strcs	r4, [r5, #0]
 102e922:	e7cc      	b.n	102e8be <xTaskGenericCreate+0xc6>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
 102e924:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 102e928:	4836      	ldr	r0, [pc, #216]	; (102ea04 <xTaskGenericCreate+0x20c>)
 102e92a:	4b37      	ldr	r3, [pc, #220]	; (102ea08 <xTaskGenericCreate+0x210>)
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 102e92c:	f8df a108 	ldr.w	sl, [pc, #264]	; 102ea38 <xTaskGenericCreate+0x240>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
 102e930:	4798      	blx	r3
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 102e932:	204c      	movs	r0, #76	; 0x4c
 102e934:	47d0      	blx	sl
	if( pxNewTCB != NULL )
 102e936:	4604      	mov	r4, r0
 102e938:	2800      	cmp	r0, #0
 102e93a:	f47f af75 	bne.w	102e828 <xTaskGenericCreate+0x30>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 102e93e:	f04f 30ff 	mov.w	r0, #4294967295
}
 102e942:	b003      	add	sp, #12
 102e944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 102e948:	f44f 710c 	mov.w	r1, #560	; 0x230
 102e94c:	482d      	ldr	r0, [pc, #180]	; (102ea04 <xTaskGenericCreate+0x20c>)
 102e94e:	4b2e      	ldr	r3, [pc, #184]	; (102ea08 <xTaskGenericCreate+0x210>)
 102e950:	4798      	blx	r3
 102e952:	e7a4      	b.n	102e89e <xTaskGenericCreate+0xa6>
				portYIELD_WITHIN_API();
 102e954:	4b2d      	ldr	r3, [pc, #180]	; (102ea0c <xTaskGenericCreate+0x214>)
 102e956:	4798      	blx	r3
 102e958:	4620      	mov	r0, r4
 102e95a:	e7da      	b.n	102e912 <xTaskGenericCreate+0x11a>
				pxCurrentTCB =  pxNewTCB;
 102e95c:	602c      	str	r4, [r5, #0]
				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 102e95e:	6813      	ldr	r3, [r2, #0]
 102e960:	2b01      	cmp	r3, #1
 102e962:	d018      	beq.n	102e996 <xTaskGenericCreate+0x19e>
 102e964:	4f22      	ldr	r7, [pc, #136]	; (102e9f0 <xTaskGenericCreate+0x1f8>)
 102e966:	e7aa      	b.n	102e8be <xTaskGenericCreate+0xc6>
	configASSERT( pxTaskCode );
 102e968:	f240 11eb 	movw	r1, #491	; 0x1eb
 102e96c:	4825      	ldr	r0, [pc, #148]	; (102ea04 <xTaskGenericCreate+0x20c>)
 102e96e:	4b26      	ldr	r3, [pc, #152]	; (102ea08 <xTaskGenericCreate+0x210>)
 102e970:	4798      	blx	r3
 102e972:	e74e      	b.n	102e812 <xTaskGenericCreate+0x1a>
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
 102e974:	ea4f 0288 	mov.w	r2, r8, lsl #2
 102e978:	4610      	mov	r0, r2
 102e97a:	9201      	str	r2, [sp, #4]
 102e97c:	47d0      	blx	sl
		if( pxNewTCB->pxStack == NULL )
 102e97e:	9a01      	ldr	r2, [sp, #4]
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
 102e980:	6320      	str	r0, [r4, #48]	; 0x30
 102e982:	4681      	mov	r9, r0
		if( pxNewTCB->pxStack == NULL )
 102e984:	2800      	cmp	r0, #0
 102e986:	f47f af57 	bne.w	102e838 <xTaskGenericCreate+0x40>
			vPortFree( pxNewTCB );
 102e98a:	4620      	mov	r0, r4
 102e98c:	4b20      	ldr	r3, [pc, #128]	; (102ea10 <xTaskGenericCreate+0x218>)
 102e98e:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 102e990:	f04f 30ff 	mov.w	r0, #4294967295
 102e994:	e7bd      	b.n	102e912 <xTaskGenericCreate+0x11a>
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
 102e996:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 102ea4c <xTaskGenericCreate+0x254>
 102e99a:	4817      	ldr	r0, [pc, #92]	; (102e9f8 <xTaskGenericCreate+0x200>)
	vListInitialise( ( xList * ) &xDelayedTaskList1 );
 102e99c:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 102ea50 <xTaskGenericCreate+0x258>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
 102e9a0:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 102ea54 <xTaskGenericCreate+0x25c>
 102e9a4:	4f12      	ldr	r7, [pc, #72]	; (102e9f0 <xTaskGenericCreate+0x1f8>)
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
 102e9a6:	47c8      	blx	r9
 102e9a8:	481a      	ldr	r0, [pc, #104]	; (102ea14 <xTaskGenericCreate+0x21c>)
 102e9aa:	47c8      	blx	r9
 102e9ac:	481a      	ldr	r0, [pc, #104]	; (102ea18 <xTaskGenericCreate+0x220>)
 102e9ae:	47c8      	blx	r9
 102e9b0:	481a      	ldr	r0, [pc, #104]	; (102ea1c <xTaskGenericCreate+0x224>)
 102e9b2:	47c8      	blx	r9
 102e9b4:	481a      	ldr	r0, [pc, #104]	; (102ea20 <xTaskGenericCreate+0x228>)
 102e9b6:	47c8      	blx	r9
	vListInitialise( ( xList * ) &xDelayedTaskList1 );
 102e9b8:	4658      	mov	r0, fp
 102e9ba:	47c8      	blx	r9
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
 102e9bc:	4650      	mov	r0, sl
 102e9be:	47c8      	blx	r9
	vListInitialise( ( xList * ) &xPendingReadyList );
 102e9c0:	4818      	ldr	r0, [pc, #96]	; (102ea24 <xTaskGenericCreate+0x22c>)
 102e9c2:	47c8      	blx	r9
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
 102e9c4:	4818      	ldr	r0, [pc, #96]	; (102ea28 <xTaskGenericCreate+0x230>)
 102e9c6:	47c8      	blx	r9
		vListInitialise( ( xList * ) &xSuspendedTaskList );
 102e9c8:	4818      	ldr	r0, [pc, #96]	; (102ea2c <xTaskGenericCreate+0x234>)
 102e9ca:	47c8      	blx	r9
	pxDelayedTaskList = &xDelayedTaskList1;
 102e9cc:	4a18      	ldr	r2, [pc, #96]	; (102ea30 <xTaskGenericCreate+0x238>)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 102e9ce:	4b19      	ldr	r3, [pc, #100]	; (102ea34 <xTaskGenericCreate+0x23c>)
	pxDelayedTaskList = &xDelayedTaskList1;
 102e9d0:	f8c2 b000 	str.w	fp, [r2]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 102e9d4:	f8c3 a000 	str.w	sl, [r3]
 102e9d8:	e771      	b.n	102e8be <xTaskGenericCreate+0xc6>
 102e9da:	bf00      	nop
 102e9dc:	01030b71 	.word	0x01030b71
 102e9e0:	0102dd7d 	.word	0x0102dd7d
 102e9e4:	0102dddd 	.word	0x0102dddd
 102e9e8:	200104e0 	.word	0x200104e0
 102e9ec:	20010550 	.word	0x20010550
 102e9f0:	200105b0 	.word	0x200105b0
 102e9f4:	20010568 	.word	0x20010568
 102e9f8:	200104ec 	.word	0x200104ec
 102e9fc:	0102dc91 	.word	0x0102dc91
 102ea00:	0102ddfd 	.word	0x0102ddfd
 102ea04:	01038c40 	.word	0x01038c40
 102ea08:	0102f6cd 	.word	0x0102f6cd
 102ea0c:	0102ddbd 	.word	0x0102ddbd
 102ea10:	0102dff5 	.word	0x0102dff5
 102ea14:	20010500 	.word	0x20010500
 102ea18:	20010514 	.word	0x20010514
 102ea1c:	20010528 	.word	0x20010528
 102ea20:	2001053c 	.word	0x2001053c
 102ea24:	2001059c 	.word	0x2001059c
 102ea28:	200105c8 	.word	0x200105c8
 102ea2c:	200105b4 	.word	0x200105b4
 102ea30:	200104e4 	.word	0x200104e4
 102ea34:	200104e8 	.word	0x200104e8
 102ea38:	0102df29 	.word	0x0102df29
 102ea3c:	0102dc89 	.word	0x0102dc89
 102ea40:	01030c0d 	.word	0x01030c0d
 102ea44:	2001055c 	.word	0x2001055c
 102ea48:	20010564 	.word	0x20010564
 102ea4c:	0102dc71 	.word	0x0102dc71
 102ea50:	2001056c 	.word	0x2001056c
 102ea54:	20010580 	.word	0x20010580

0102ea58 <vTaskSuspend>:
	{
 102ea58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			if( pxTaskToSuspend == pxCurrentTCB )
 102ea5c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 102eb30 <vTaskSuspend+0xd8>
		taskENTER_CRITICAL();
 102ea60:	4b26      	ldr	r3, [pc, #152]	; (102eafc <vTaskSuspend+0xa4>)
	{
 102ea62:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
 102ea64:	4798      	blx	r3
			if( pxTaskToSuspend == pxCurrentTCB )
 102ea66:	f8d8 3000 	ldr.w	r3, [r8]
 102ea6a:	42a3      	cmp	r3, r4
 102ea6c:	d036      	beq.n	102eadc <vTaskSuspend+0x84>
 102ea6e:	4625      	mov	r5, r4
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
 102ea70:	2c00      	cmp	r4, #0
 102ea72:	d033      	beq.n	102eadc <vTaskSuspend+0x84>
			if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
 102ea74:	1d2e      	adds	r6, r5, #4
 102ea76:	4630      	mov	r0, r6
 102ea78:	4f21      	ldr	r7, [pc, #132]	; (102eb00 <vTaskSuspend+0xa8>)
 102ea7a:	47b8      	blx	r7
 102ea7c:	b930      	cbnz	r0, 102ea8c <vTaskSuspend+0x34>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 102ea7e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 102ea80:	4920      	ldr	r1, [pc, #128]	; (102eb04 <vTaskSuspend+0xac>)
 102ea82:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 102ea86:	009b      	lsls	r3, r3, #2
 102ea88:	58cb      	ldr	r3, [r1, r3]
 102ea8a:	b173      	cbz	r3, 102eaaa <vTaskSuspend+0x52>
			if( pxTCB->xEventListItem.pvContainer != NULL )
 102ea8c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 102ea8e:	b113      	cbz	r3, 102ea96 <vTaskSuspend+0x3e>
				uxListRemove( &( pxTCB->xEventListItem ) );
 102ea90:	f105 0018 	add.w	r0, r5, #24
 102ea94:	47b8      	blx	r7
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
 102ea96:	4d1c      	ldr	r5, [pc, #112]	; (102eb08 <vTaskSuspend+0xb0>)
 102ea98:	4b1c      	ldr	r3, [pc, #112]	; (102eb0c <vTaskSuspend+0xb4>)
 102ea9a:	4631      	mov	r1, r6
 102ea9c:	4628      	mov	r0, r5
 102ea9e:	4798      	blx	r3
		taskEXIT_CRITICAL();
 102eaa0:	4b1b      	ldr	r3, [pc, #108]	; (102eb10 <vTaskSuspend+0xb8>)
 102eaa2:	4798      	blx	r3
		if( ( void * ) pxTaskToSuspend == NULL )
 102eaa4:	b154      	cbz	r4, 102eabc <vTaskSuspend+0x64>
 102eaa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 102eaaa:	481a      	ldr	r0, [pc, #104]	; (102eb14 <vTaskSuspend+0xbc>)
 102eaac:	2101      	movs	r1, #1
 102eaae:	6803      	ldr	r3, [r0, #0]
 102eab0:	fa01 f202 	lsl.w	r2, r1, r2
 102eab4:	ea23 0202 	bic.w	r2, r3, r2
 102eab8:	6002      	str	r2, [r0, #0]
 102eaba:	e7e7      	b.n	102ea8c <vTaskSuspend+0x34>
			if( xSchedulerRunning != pdFALSE )
 102eabc:	4b16      	ldr	r3, [pc, #88]	; (102eb18 <vTaskSuspend+0xc0>)
 102eabe:	681b      	ldr	r3, [r3, #0]
 102eac0:	b9a3      	cbnz	r3, 102eaec <vTaskSuspend+0x94>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 102eac2:	4b16      	ldr	r3, [pc, #88]	; (102eb1c <vTaskSuspend+0xc4>)
 102eac4:	682a      	ldr	r2, [r5, #0]
 102eac6:	681b      	ldr	r3, [r3, #0]
 102eac8:	429a      	cmp	r2, r3
 102eaca:	d013      	beq.n	102eaf4 <vTaskSuspend+0x9c>
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 102eacc:	4b14      	ldr	r3, [pc, #80]	; (102eb20 <vTaskSuspend+0xc8>)
 102eace:	681b      	ldr	r3, [r3, #0]
 102ead0:	b143      	cbz	r3, 102eae4 <vTaskSuspend+0x8c>
		xMissedYield = pdTRUE;
 102ead2:	4b14      	ldr	r3, [pc, #80]	; (102eb24 <vTaskSuspend+0xcc>)
 102ead4:	2201      	movs	r2, #1
 102ead6:	601a      	str	r2, [r3, #0]
 102ead8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
 102eadc:	f8d8 5000 	ldr.w	r5, [r8]
 102eae0:	2400      	movs	r4, #0
 102eae2:	e7c7      	b.n	102ea74 <vTaskSuspend+0x1c>
 102eae4:	4b10      	ldr	r3, [pc, #64]	; (102eb28 <vTaskSuspend+0xd0>)
	}
 102eae6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 102eaea:	4718      	bx	r3
				portYIELD_WITHIN_API();
 102eaec:	4b0f      	ldr	r3, [pc, #60]	; (102eb2c <vTaskSuspend+0xd4>)
	}
 102eaee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				portYIELD_WITHIN_API();
 102eaf2:	4718      	bx	r3
					pxCurrentTCB = NULL;
 102eaf4:	f8c8 4000 	str.w	r4, [r8]
 102eaf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 102eafc:	0102dddd 	.word	0x0102dddd
 102eb00:	0102dd41 	.word	0x0102dd41
 102eb04:	200104ec 	.word	0x200104ec
 102eb08:	200105b4 	.word	0x200105b4
 102eb0c:	0102dc91 	.word	0x0102dc91
 102eb10:	0102ddfd 	.word	0x0102ddfd
 102eb14:	20010564 	.word	0x20010564
 102eb18:	200105b0 	.word	0x200105b0
 102eb1c:	20010550 	.word	0x20010550
 102eb20:	20010558 	.word	0x20010558
 102eb24:	20010594 	.word	0x20010594
 102eb28:	0102e781 	.word	0x0102e781
 102eb2c:	0102ddbd 	.word	0x0102ddbd
 102eb30:	200104e0 	.word	0x200104e0

0102eb34 <xTaskIsTaskSuspended>:
	{
 102eb34:	b510      	push	{r4, lr}
		configASSERT( xTask );
 102eb36:	4604      	mov	r4, r0
 102eb38:	b168      	cbz	r0, 102eb56 <xTaskIsTaskSuspended+0x22>
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
 102eb3a:	4b0a      	ldr	r3, [pc, #40]	; (102eb64 <xTaskIsTaskSuspended+0x30>)
 102eb3c:	6962      	ldr	r2, [r4, #20]
 102eb3e:	429a      	cmp	r2, r3
 102eb40:	d001      	beq.n	102eb46 <xTaskIsTaskSuspended+0x12>
	portBASE_TYPE xReturn = pdFALSE;
 102eb42:	2000      	movs	r0, #0
	}
 102eb44:	bd10      	pop	{r4, pc}
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
 102eb46:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 102eb48:	4b07      	ldr	r3, [pc, #28]	; (102eb68 <xTaskIsTaskSuspended+0x34>)
 102eb4a:	4298      	cmp	r0, r3
 102eb4c:	d0f9      	beq.n	102eb42 <xTaskIsTaskSuspended+0xe>
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
 102eb4e:	fab0 f080 	clz	r0, r0
 102eb52:	0940      	lsrs	r0, r0, #5
 102eb54:	bd10      	pop	{r4, pc}
		configASSERT( xTask );
 102eb56:	f240 415f 	movw	r1, #1119	; 0x45f
 102eb5a:	4804      	ldr	r0, [pc, #16]	; (102eb6c <xTaskIsTaskSuspended+0x38>)
 102eb5c:	4b04      	ldr	r3, [pc, #16]	; (102eb70 <xTaskIsTaskSuspended+0x3c>)
 102eb5e:	4798      	blx	r3
 102eb60:	e7eb      	b.n	102eb3a <xTaskIsTaskSuspended+0x6>
 102eb62:	bf00      	nop
 102eb64:	200105b4 	.word	0x200105b4
 102eb68:	2001059c 	.word	0x2001059c
 102eb6c:	01038c40 	.word	0x01038c40
 102eb70:	0102f6cd 	.word	0x0102f6cd

0102eb74 <xTaskResumeFromISR>:
	{
 102eb74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		configASSERT( pxTaskToResume );
 102eb78:	4604      	mov	r4, r0
 102eb7a:	2800      	cmp	r0, #0
 102eb7c:	d03f      	beq.n	102ebfe <xTaskResumeFromISR+0x8a>
		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 102eb7e:	4b23      	ldr	r3, [pc, #140]	; (102ec0c <xTaskResumeFromISR+0x98>)
 102eb80:	4798      	blx	r3
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 102eb82:	4b23      	ldr	r3, [pc, #140]	; (102ec10 <xTaskResumeFromISR+0x9c>)
		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 102eb84:	4607      	mov	r7, r0
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 102eb86:	4620      	mov	r0, r4
 102eb88:	4798      	blx	r3
 102eb8a:	2801      	cmp	r0, #1
 102eb8c:	4605      	mov	r5, r0
 102eb8e:	d006      	beq.n	102eb9e <xTaskResumeFromISR+0x2a>
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 102eb90:	4638      	mov	r0, r7
	portBASE_TYPE xYieldRequired = pdFALSE;
 102eb92:	2600      	movs	r6, #0
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 102eb94:	4b1f      	ldr	r3, [pc, #124]	; (102ec14 <xTaskResumeFromISR+0xa0>)
 102eb96:	4798      	blx	r3
	}
 102eb98:	4630      	mov	r0, r6
 102eb9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 102eb9e:	4b1e      	ldr	r3, [pc, #120]	; (102ec18 <xTaskResumeFromISR+0xa4>)
 102eba0:	681b      	ldr	r3, [r3, #0]
 102eba2:	b15b      	cbz	r3, 102ebbc <xTaskResumeFromISR+0x48>
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 102eba4:	f104 0118 	add.w	r1, r4, #24
 102eba8:	481c      	ldr	r0, [pc, #112]	; (102ec1c <xTaskResumeFromISR+0xa8>)
 102ebaa:	4b1d      	ldr	r3, [pc, #116]	; (102ec20 <xTaskResumeFromISR+0xac>)
 102ebac:	4798      	blx	r3
	portBASE_TYPE xYieldRequired = pdFALSE;
 102ebae:	2600      	movs	r6, #0
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 102ebb0:	4638      	mov	r0, r7
 102ebb2:	4b18      	ldr	r3, [pc, #96]	; (102ec14 <xTaskResumeFromISR+0xa0>)
 102ebb4:	4798      	blx	r3
	}
 102ebb6:	4630      	mov	r0, r6
 102ebb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
 102ebbc:	4b19      	ldr	r3, [pc, #100]	; (102ec24 <xTaskResumeFromISR+0xb0>)
 102ebbe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 102ebc0:	681a      	ldr	r2, [r3, #0]
					uxListRemove(  &( pxTCB->xGenericListItem ) );
 102ebc2:	4b19      	ldr	r3, [pc, #100]	; (102ec28 <xTaskResumeFromISR+0xb4>)
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
 102ebc4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
					uxListRemove(  &( pxTCB->xGenericListItem ) );
 102ebc6:	f104 0804 	add.w	r8, r4, #4
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
 102ebca:	4296      	cmp	r6, r2
					uxListRemove(  &( pxTCB->xGenericListItem ) );
 102ebcc:	4640      	mov	r0, r8
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
 102ebce:	bf34      	ite	cc
 102ebd0:	2600      	movcc	r6, #0
 102ebd2:	2601      	movcs	r6, #1
					uxListRemove(  &( pxTCB->xGenericListItem ) );
 102ebd4:	4798      	blx	r3
					prvAddTaskToReadyQueue( pxTCB );
 102ebd6:	4a15      	ldr	r2, [pc, #84]	; (102ec2c <xTaskResumeFromISR+0xb8>)
 102ebd8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 102ebda:	4815      	ldr	r0, [pc, #84]	; (102ec30 <xTaskResumeFromISR+0xbc>)
 102ebdc:	6814      	ldr	r4, [r2, #0]
 102ebde:	409d      	lsls	r5, r3
 102ebe0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 102ebe4:	4641      	mov	r1, r8
 102ebe6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 102ebea:	4325      	orrs	r5, r4
 102ebec:	4b0c      	ldr	r3, [pc, #48]	; (102ec20 <xTaskResumeFromISR+0xac>)
 102ebee:	6015      	str	r5, [r2, #0]
 102ebf0:	4798      	blx	r3
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 102ebf2:	4638      	mov	r0, r7
 102ebf4:	4b07      	ldr	r3, [pc, #28]	; (102ec14 <xTaskResumeFromISR+0xa0>)
 102ebf6:	4798      	blx	r3
	}
 102ebf8:	4630      	mov	r0, r6
 102ebfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( pxTaskToResume );
 102ebfe:	f240 41ae 	movw	r1, #1198	; 0x4ae
 102ec02:	480c      	ldr	r0, [pc, #48]	; (102ec34 <xTaskResumeFromISR+0xc0>)
 102ec04:	4b0c      	ldr	r3, [pc, #48]	; (102ec38 <xTaskResumeFromISR+0xc4>)
 102ec06:	4798      	blx	r3
 102ec08:	e7b9      	b.n	102eb7e <xTaskResumeFromISR+0xa>
 102ec0a:	bf00      	nop
 102ec0c:	0102ddcd 	.word	0x0102ddcd
 102ec10:	0102eb35 	.word	0x0102eb35
 102ec14:	0102ddf5 	.word	0x0102ddf5
 102ec18:	20010558 	.word	0x20010558
 102ec1c:	2001059c 	.word	0x2001059c
 102ec20:	0102dc91 	.word	0x0102dc91
 102ec24:	200104e0 	.word	0x200104e0
 102ec28:	0102dd41 	.word	0x0102dd41
 102ec2c:	20010564 	.word	0x20010564
 102ec30:	200104ec 	.word	0x200104ec
 102ec34:	01038c40 	.word	0x01038c40
 102ec38:	0102f6cd 	.word	0x0102f6cd

0102ec3c <vTaskStartScheduler>:
{
 102ec3c:	b530      	push	{r4, r5, lr}
 102ec3e:	b085      	sub	sp, #20
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
 102ec40:	2400      	movs	r4, #0
 102ec42:	9403      	str	r4, [sp, #12]
 102ec44:	9402      	str	r4, [sp, #8]
 102ec46:	9401      	str	r4, [sp, #4]
 102ec48:	9400      	str	r4, [sp, #0]
 102ec4a:	4623      	mov	r3, r4
 102ec4c:	2282      	movs	r2, #130	; 0x82
 102ec4e:	4911      	ldr	r1, [pc, #68]	; (102ec94 <vTaskStartScheduler+0x58>)
 102ec50:	4811      	ldr	r0, [pc, #68]	; (102ec98 <vTaskStartScheduler+0x5c>)
 102ec52:	4d12      	ldr	r5, [pc, #72]	; (102ec9c <vTaskStartScheduler+0x60>)
 102ec54:	47a8      	blx	r5
		if( xReturn == pdPASS )
 102ec56:	2801      	cmp	r0, #1
 102ec58:	d00b      	beq.n	102ec72 <vTaskStartScheduler+0x36>
 102ec5a:	4605      	mov	r5, r0
	configASSERT( xReturn );
 102ec5c:	b10d      	cbz	r5, 102ec62 <vTaskStartScheduler+0x26>
}
 102ec5e:	b005      	add	sp, #20
 102ec60:	bd30      	pop	{r4, r5, pc}
	configASSERT( xReturn );
 102ec62:	480f      	ldr	r0, [pc, #60]	; (102eca0 <vTaskStartScheduler+0x64>)
 102ec64:	4b0f      	ldr	r3, [pc, #60]	; (102eca4 <vTaskStartScheduler+0x68>)
 102ec66:	f240 5113 	movw	r1, #1299	; 0x513
}
 102ec6a:	b005      	add	sp, #20
 102ec6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	configASSERT( xReturn );
 102ec70:	4718      	bx	r3
			xReturn = xTimerCreateTimerTask();
 102ec72:	4b0d      	ldr	r3, [pc, #52]	; (102eca8 <vTaskStartScheduler+0x6c>)
 102ec74:	4798      	blx	r3
	if( xReturn == pdPASS )
 102ec76:	2801      	cmp	r0, #1
			xReturn = xTimerCreateTimerTask();
 102ec78:	4605      	mov	r5, r0
	if( xReturn == pdPASS )
 102ec7a:	d1ef      	bne.n	102ec5c <vTaskStartScheduler+0x20>
		portDISABLE_INTERRUPTS();
 102ec7c:	4b0b      	ldr	r3, [pc, #44]	; (102ecac <vTaskStartScheduler+0x70>)
 102ec7e:	4798      	blx	r3
		xSchedulerRunning = pdTRUE;
 102ec80:	490b      	ldr	r1, [pc, #44]	; (102ecb0 <vTaskStartScheduler+0x74>)
		xTickCount = ( portTickType ) 0U;
 102ec82:	4a0c      	ldr	r2, [pc, #48]	; (102ecb4 <vTaskStartScheduler+0x78>)
		if( xPortStartScheduler() != pdFALSE )
 102ec84:	4b0c      	ldr	r3, [pc, #48]	; (102ecb8 <vTaskStartScheduler+0x7c>)
		xSchedulerRunning = pdTRUE;
 102ec86:	600d      	str	r5, [r1, #0]
		xTickCount = ( portTickType ) 0U;
 102ec88:	6014      	str	r4, [r2, #0]
}
 102ec8a:	b005      	add	sp, #20
 102ec8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		if( xPortStartScheduler() != pdFALSE )
 102ec90:	4718      	bx	r3
 102ec92:	bf00      	nop
 102ec94:	01038c80 	.word	0x01038c80
 102ec98:	0102edf5 	.word	0x0102edf5
 102ec9c:	0102e7f9 	.word	0x0102e7f9
 102eca0:	01038c40 	.word	0x01038c40
 102eca4:	0102f6cd 	.word	0x0102f6cd
 102eca8:	0102f32d 	.word	0x0102f32d
 102ecac:	0102ddcd 	.word	0x0102ddcd
 102ecb0:	200105b0 	.word	0x200105b0
 102ecb4:	200105dc 	.word	0x200105dc
 102ecb8:	0102de95 	.word	0x0102de95

0102ecbc <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 102ecbc:	4a02      	ldr	r2, [pc, #8]	; (102ecc8 <vTaskSuspendAll+0xc>)
 102ecbe:	6813      	ldr	r3, [r2, #0]
 102ecc0:	3301      	adds	r3, #1
 102ecc2:	6013      	str	r3, [r2, #0]
 102ecc4:	4770      	bx	lr
 102ecc6:	bf00      	nop
 102ecc8:	20010558 	.word	0x20010558

0102eccc <xTaskResumeAll>:
{
 102eccc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	configASSERT( uxSchedulerSuspended );
 102ecd0:	f8df 9110 	ldr.w	r9, [pc, #272]	; 102ede4 <xTaskResumeAll+0x118>
 102ecd4:	f8d9 3000 	ldr.w	r3, [r9]
 102ecd8:	2b00      	cmp	r3, #0
 102ecda:	d05a      	beq.n	102ed92 <xTaskResumeAll+0xc6>
	taskENTER_CRITICAL();
 102ecdc:	4b35      	ldr	r3, [pc, #212]	; (102edb4 <xTaskResumeAll+0xe8>)
 102ecde:	4798      	blx	r3
		--uxSchedulerSuspended;
 102ece0:	f8d9 3000 	ldr.w	r3, [r9]
 102ece4:	3b01      	subs	r3, #1
 102ece6:	f8c9 3000 	str.w	r3, [r9]
		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 102ecea:	f8d9 6000 	ldr.w	r6, [r9]
 102ecee:	2e00      	cmp	r6, #0
 102ecf0:	d149      	bne.n	102ed86 <xTaskResumeAll+0xba>
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
 102ecf2:	4b31      	ldr	r3, [pc, #196]	; (102edb8 <xTaskResumeAll+0xec>)
 102ecf4:	681b      	ldr	r3, [r3, #0]
 102ecf6:	2b00      	cmp	r3, #0
 102ecf8:	d045      	beq.n	102ed86 <xTaskResumeAll+0xba>
 102ecfa:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 102ede8 <xTaskResumeAll+0x11c>
					uxListRemove( &( pxTCB->xEventListItem ) );
 102ecfe:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 102edec <xTaskResumeAll+0x120>
					prvAddTaskToReadyQueue( pxTCB );
 102ed02:	4f2e      	ldr	r7, [pc, #184]	; (102edbc <xTaskResumeAll+0xf0>)
 102ed04:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 102edf0 <xTaskResumeAll+0x124>
 102ed08:	e01e      	b.n	102ed48 <xTaskResumeAll+0x7c>
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
 102ed0a:	f8db 300c 	ldr.w	r3, [fp, #12]
 102ed0e:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
 102ed10:	1d25      	adds	r5, r4, #4
					uxListRemove( &( pxTCB->xEventListItem ) );
 102ed12:	f104 0018 	add.w	r0, r4, #24
 102ed16:	47c0      	blx	r8
					uxListRemove( &( pxTCB->xGenericListItem ) );
 102ed18:	4628      	mov	r0, r5
 102ed1a:	47c0      	blx	r8
					prvAddTaskToReadyQueue( pxTCB );
 102ed1c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 102ed1e:	f8d7 e000 	ldr.w	lr, [r7]
 102ed22:	4a27      	ldr	r2, [pc, #156]	; (102edc0 <xTaskResumeAll+0xf4>)
 102ed24:	2301      	movs	r3, #1
 102ed26:	4083      	lsls	r3, r0
 102ed28:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 102ed2c:	ea43 030e 	orr.w	r3, r3, lr
 102ed30:	4629      	mov	r1, r5
 102ed32:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 102ed36:	603b      	str	r3, [r7, #0]
 102ed38:	4790      	blx	r2
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 102ed3a:	4b22      	ldr	r3, [pc, #136]	; (102edc4 <xTaskResumeAll+0xf8>)
 102ed3c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 102ed3e:	681b      	ldr	r3, [r3, #0]
 102ed40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						xYieldRequired = pdTRUE;
 102ed42:	429a      	cmp	r2, r3
 102ed44:	bf28      	it	cs
 102ed46:	2601      	movcs	r6, #1
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 102ed48:	f8db 3000 	ldr.w	r3, [fp]
 102ed4c:	2b00      	cmp	r3, #0
 102ed4e:	d1dc      	bne.n	102ed0a <xTaskResumeAll+0x3e>
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 102ed50:	4c1d      	ldr	r4, [pc, #116]	; (102edc8 <xTaskResumeAll+0xfc>)
 102ed52:	6823      	ldr	r3, [r4, #0]
 102ed54:	b18b      	cbz	r3, 102ed7a <xTaskResumeAll+0xae>
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 102ed56:	6823      	ldr	r3, [r4, #0]
 102ed58:	b17b      	cbz	r3, 102ed7a <xTaskResumeAll+0xae>
 102ed5a:	4d1c      	ldr	r5, [pc, #112]	; (102edcc <xTaskResumeAll+0x100>)
 102ed5c:	e007      	b.n	102ed6e <xTaskResumeAll+0xa2>
		++uxMissedTicks;
 102ed5e:	6823      	ldr	r3, [r4, #0]
 102ed60:	3301      	adds	r3, #1
 102ed62:	6023      	str	r3, [r4, #0]
						--uxMissedTicks;
 102ed64:	6823      	ldr	r3, [r4, #0]
 102ed66:	3b01      	subs	r3, #1
 102ed68:	6023      	str	r3, [r4, #0]
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 102ed6a:	6823      	ldr	r3, [r4, #0]
 102ed6c:	b12b      	cbz	r3, 102ed7a <xTaskResumeAll+0xae>
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 102ed6e:	f8d9 3000 	ldr.w	r3, [r9]
 102ed72:	2b00      	cmp	r3, #0
 102ed74:	d1f3      	bne.n	102ed5e <xTaskResumeAll+0x92>
 102ed76:	47a8      	blx	r5
 102ed78:	e7f4      	b.n	102ed64 <xTaskResumeAll+0x98>
				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
 102ed7a:	2e01      	cmp	r6, #1
 102ed7c:	4b14      	ldr	r3, [pc, #80]	; (102edd0 <xTaskResumeAll+0x104>)
 102ed7e:	d00e      	beq.n	102ed9e <xTaskResumeAll+0xd2>
 102ed80:	681a      	ldr	r2, [r3, #0]
 102ed82:	2a01      	cmp	r2, #1
 102ed84:	d00b      	beq.n	102ed9e <xTaskResumeAll+0xd2>
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 102ed86:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 102ed88:	4b12      	ldr	r3, [pc, #72]	; (102edd4 <xTaskResumeAll+0x108>)
 102ed8a:	4798      	blx	r3
}
 102ed8c:	4620      	mov	r0, r4
 102ed8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	configASSERT( uxSchedulerSuspended );
 102ed92:	f240 514d 	movw	r1, #1357	; 0x54d
 102ed96:	4810      	ldr	r0, [pc, #64]	; (102edd8 <xTaskResumeAll+0x10c>)
 102ed98:	4b10      	ldr	r3, [pc, #64]	; (102eddc <xTaskResumeAll+0x110>)
 102ed9a:	4798      	blx	r3
 102ed9c:	e79e      	b.n	102ecdc <xTaskResumeAll+0x10>
					xMissedYield = pdFALSE;
 102ed9e:	2100      	movs	r1, #0
					portYIELD_WITHIN_API();
 102eda0:	4a0f      	ldr	r2, [pc, #60]	; (102ede0 <xTaskResumeAll+0x114>)
					xMissedYield = pdFALSE;
 102eda2:	6019      	str	r1, [r3, #0]
					xAlreadyYielded = pdTRUE;
 102eda4:	2401      	movs	r4, #1
					portYIELD_WITHIN_API();
 102eda6:	4790      	blx	r2
	taskEXIT_CRITICAL();
 102eda8:	4b0a      	ldr	r3, [pc, #40]	; (102edd4 <xTaskResumeAll+0x108>)
 102edaa:	4798      	blx	r3
}
 102edac:	4620      	mov	r0, r4
 102edae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 102edb2:	bf00      	nop
 102edb4:	0102dddd 	.word	0x0102dddd
 102edb8:	20010550 	.word	0x20010550
 102edbc:	20010564 	.word	0x20010564
 102edc0:	0102dc91 	.word	0x0102dc91
 102edc4:	200104e0 	.word	0x200104e0
 102edc8:	20010554 	.word	0x20010554
 102edcc:	0102e65d 	.word	0x0102e65d
 102edd0:	20010594 	.word	0x20010594
 102edd4:	0102ddfd 	.word	0x0102ddfd
 102edd8:	01038c40 	.word	0x01038c40
 102eddc:	0102f6cd 	.word	0x0102f6cd
 102ede0:	0102ddbd 	.word	0x0102ddbd
 102ede4:	20010558 	.word	0x20010558
 102ede8:	2001059c 	.word	0x2001059c
 102edec:	0102dd41 	.word	0x0102dd41
 102edf0:	200104ec 	.word	0x200104ec

0102edf4 <prvIdleTask>:
{
 102edf4:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
 102edf8:	4c18      	ldr	r4, [pc, #96]	; (102ee5c <prvIdleTask+0x68>)
 102edfa:	4e19      	ldr	r6, [pc, #100]	; (102ee60 <prvIdleTask+0x6c>)
 102edfc:	4f19      	ldr	r7, [pc, #100]	; (102ee64 <prvIdleTask+0x70>)
 102edfe:	f8df 9078 	ldr.w	r9, [pc, #120]	; 102ee78 <prvIdleTask+0x84>
 102ee02:	f8df 8078 	ldr.w	r8, [pc, #120]	; 102ee7c <prvIdleTask+0x88>
 102ee06:	4d18      	ldr	r5, [pc, #96]	; (102ee68 <prvIdleTask+0x74>)
 102ee08:	f8df a074 	ldr.w	sl, [pc, #116]	; 102ee80 <prvIdleTask+0x8c>
 102ee0c:	e008      	b.n	102ee20 <prvIdleTask+0x2c>
	++uxSchedulerSuspended;
 102ee0e:	6823      	ldr	r3, [r4, #0]
 102ee10:	3301      	adds	r3, #1
 102ee12:	6023      	str	r3, [r4, #0]
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 102ee14:	f8d6 b000 	ldr.w	fp, [r6]
			xTaskResumeAll();
 102ee18:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
 102ee1a:	f1bb 0f00 	cmp.w	fp, #0
 102ee1e:	d104      	bne.n	102ee2a <prvIdleTask+0x36>
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 102ee20:	682b      	ldr	r3, [r5, #0]
 102ee22:	2b00      	cmp	r3, #0
 102ee24:	d1f3      	bne.n	102ee0e <prvIdleTask+0x1a>
			taskYIELD();
 102ee26:	47d0      	blx	sl
 102ee28:	e7fa      	b.n	102ee20 <prvIdleTask+0x2c>
				taskENTER_CRITICAL();
 102ee2a:	4b10      	ldr	r3, [pc, #64]	; (102ee6c <prvIdleTask+0x78>)
 102ee2c:	4798      	blx	r3
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 102ee2e:	68f3      	ldr	r3, [r6, #12]
 102ee30:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
 102ee34:	4b0e      	ldr	r3, [pc, #56]	; (102ee70 <prvIdleTask+0x7c>)
 102ee36:	f10b 0004 	add.w	r0, fp, #4
 102ee3a:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
 102ee3c:	f8d9 2000 	ldr.w	r2, [r9]
				taskEXIT_CRITICAL();
 102ee40:	4b0c      	ldr	r3, [pc, #48]	; (102ee74 <prvIdleTask+0x80>)
					--uxCurrentNumberOfTasks;
 102ee42:	3a01      	subs	r2, #1
 102ee44:	f8c9 2000 	str.w	r2, [r9]
					--uxTasksDeleted;
 102ee48:	682a      	ldr	r2, [r5, #0]
 102ee4a:	3a01      	subs	r2, #1
 102ee4c:	602a      	str	r2, [r5, #0]
				taskEXIT_CRITICAL();
 102ee4e:	4798      	blx	r3
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 102ee50:	f8db 0030 	ldr.w	r0, [fp, #48]	; 0x30
 102ee54:	47c0      	blx	r8
		vPortFree( pxTCB );
 102ee56:	4658      	mov	r0, fp
 102ee58:	47c0      	blx	r8
 102ee5a:	e7e1      	b.n	102ee20 <prvIdleTask+0x2c>
 102ee5c:	20010558 	.word	0x20010558
 102ee60:	200105c8 	.word	0x200105c8
 102ee64:	0102eccd 	.word	0x0102eccd
 102ee68:	20010560 	.word	0x20010560
 102ee6c:	0102dddd 	.word	0x0102dddd
 102ee70:	0102dd41 	.word	0x0102dd41
 102ee74:	0102ddfd 	.word	0x0102ddfd
 102ee78:	20010550 	.word	0x20010550
 102ee7c:	0102dff5 	.word	0x0102dff5
 102ee80:	0102ddbd 	.word	0x0102ddbd

0102ee84 <xTaskGetTickCount>:
{
 102ee84:	b510      	push	{r4, lr}
	taskENTER_CRITICAL();
 102ee86:	4b04      	ldr	r3, [pc, #16]	; (102ee98 <xTaskGetTickCount+0x14>)
 102ee88:	4798      	blx	r3
		xTicks = xTickCount;
 102ee8a:	4a04      	ldr	r2, [pc, #16]	; (102ee9c <xTaskGetTickCount+0x18>)
	taskEXIT_CRITICAL();
 102ee8c:	4b04      	ldr	r3, [pc, #16]	; (102eea0 <xTaskGetTickCount+0x1c>)
		xTicks = xTickCount;
 102ee8e:	6814      	ldr	r4, [r2, #0]
	taskEXIT_CRITICAL();
 102ee90:	4798      	blx	r3
}
 102ee92:	4620      	mov	r0, r4
 102ee94:	bd10      	pop	{r4, pc}
 102ee96:	bf00      	nop
 102ee98:	0102dddd 	.word	0x0102dddd
 102ee9c:	200105dc 	.word	0x200105dc
 102eea0:	0102ddfd 	.word	0x0102ddfd

0102eea4 <vTaskIncrementTick>:
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 102eea4:	4b04      	ldr	r3, [pc, #16]	; (102eeb8 <vTaskIncrementTick+0x14>)
 102eea6:	681b      	ldr	r3, [r3, #0]
 102eea8:	b90b      	cbnz	r3, 102eeae <vTaskIncrementTick+0xa>
 102eeaa:	4b04      	ldr	r3, [pc, #16]	; (102eebc <vTaskIncrementTick+0x18>)
 102eeac:	4718      	bx	r3
		++uxMissedTicks;
 102eeae:	4a04      	ldr	r2, [pc, #16]	; (102eec0 <vTaskIncrementTick+0x1c>)
 102eeb0:	6813      	ldr	r3, [r2, #0]
 102eeb2:	3301      	adds	r3, #1
 102eeb4:	6013      	str	r3, [r2, #0]
 102eeb6:	4770      	bx	lr
 102eeb8:	20010558 	.word	0x20010558
 102eebc:	0102e65d 	.word	0x0102e65d
 102eec0:	20010554 	.word	0x20010554

0102eec4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 102eec4:	4b04      	ldr	r3, [pc, #16]	; (102eed8 <vTaskSwitchContext+0x14>)
 102eec6:	681b      	ldr	r3, [r3, #0]
 102eec8:	b90b      	cbnz	r3, 102eece <vTaskSwitchContext+0xa>
 102eeca:	4b04      	ldr	r3, [pc, #16]	; (102eedc <vTaskSwitchContext+0x18>)
 102eecc:	4718      	bx	r3
		xMissedYield = pdTRUE;
 102eece:	4b04      	ldr	r3, [pc, #16]	; (102eee0 <vTaskSwitchContext+0x1c>)
 102eed0:	2201      	movs	r2, #1
 102eed2:	601a      	str	r2, [r3, #0]
 102eed4:	4770      	bx	lr
 102eed6:	bf00      	nop
 102eed8:	20010558 	.word	0x20010558
 102eedc:	0102e781 	.word	0x0102e781
 102eee0:	20010594 	.word	0x20010594

0102eee4 <vTaskPlaceOnEventList>:
{
 102eee4:	b570      	push	{r4, r5, r6, lr}
 102eee6:	460e      	mov	r6, r1
	configASSERT( pxEventList );
 102eee8:	4605      	mov	r5, r0
 102eeea:	b318      	cbz	r0, 102ef34 <vTaskPlaceOnEventList+0x50>
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 102eeec:	4c14      	ldr	r4, [pc, #80]	; (102ef40 <vTaskPlaceOnEventList+0x5c>)
 102eeee:	4b15      	ldr	r3, [pc, #84]	; (102ef44 <vTaskPlaceOnEventList+0x60>)
 102eef0:	6821      	ldr	r1, [r4, #0]
 102eef2:	4628      	mov	r0, r5
 102eef4:	3118      	adds	r1, #24
 102eef6:	4798      	blx	r3
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
 102eef8:	6820      	ldr	r0, [r4, #0]
 102eefa:	4b13      	ldr	r3, [pc, #76]	; (102ef48 <vTaskPlaceOnEventList+0x64>)
 102eefc:	3004      	adds	r0, #4
 102eefe:	4798      	blx	r3
 102ef00:	b940      	cbnz	r0, 102ef14 <vTaskPlaceOnEventList+0x30>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 102ef02:	6823      	ldr	r3, [r4, #0]
 102ef04:	4911      	ldr	r1, [pc, #68]	; (102ef4c <vTaskPlaceOnEventList+0x68>)
 102ef06:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 102ef08:	680b      	ldr	r3, [r1, #0]
 102ef0a:	2201      	movs	r2, #1
 102ef0c:	4082      	lsls	r2, r0
 102ef0e:	ea23 0302 	bic.w	r3, r3, r2
 102ef12:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
 102ef14:	1c73      	adds	r3, r6, #1
 102ef16:	d006      	beq.n	102ef26 <vTaskPlaceOnEventList+0x42>
			xTimeToWake = xTickCount + xTicksToWait;
 102ef18:	4a0d      	ldr	r2, [pc, #52]	; (102ef50 <vTaskPlaceOnEventList+0x6c>)
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 102ef1a:	4b0e      	ldr	r3, [pc, #56]	; (102ef54 <vTaskPlaceOnEventList+0x70>)
			xTimeToWake = xTickCount + xTicksToWait;
 102ef1c:	6810      	ldr	r0, [r2, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 102ef1e:	4430      	add	r0, r6
}
 102ef20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 102ef24:	4718      	bx	r3
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 102ef26:	6821      	ldr	r1, [r4, #0]
 102ef28:	480b      	ldr	r0, [pc, #44]	; (102ef58 <vTaskPlaceOnEventList+0x74>)
 102ef2a:	4b0c      	ldr	r3, [pc, #48]	; (102ef5c <vTaskPlaceOnEventList+0x78>)
 102ef2c:	3104      	adds	r1, #4
}
 102ef2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 102ef32:	4718      	bx	r3
	configASSERT( pxEventList );
 102ef34:	f240 7149 	movw	r1, #1865	; 0x749
 102ef38:	4809      	ldr	r0, [pc, #36]	; (102ef60 <vTaskPlaceOnEventList+0x7c>)
 102ef3a:	4b0a      	ldr	r3, [pc, #40]	; (102ef64 <vTaskPlaceOnEventList+0x80>)
 102ef3c:	4798      	blx	r3
 102ef3e:	e7d5      	b.n	102eeec <vTaskPlaceOnEventList+0x8>
 102ef40:	200104e0 	.word	0x200104e0
 102ef44:	0102dcad 	.word	0x0102dcad
 102ef48:	0102dd41 	.word	0x0102dd41
 102ef4c:	20010564 	.word	0x20010564
 102ef50:	200105dc 	.word	0x200105dc
 102ef54:	0102e60d 	.word	0x0102e60d
 102ef58:	200105b4 	.word	0x200105b4
 102ef5c:	0102dc91 	.word	0x0102dc91
 102ef60:	01038c40 	.word	0x01038c40
 102ef64:	0102f6cd 	.word	0x0102f6cd

0102ef68 <vTaskPlaceOnEventListRestricted>:
	{
 102ef68:	b570      	push	{r4, r5, r6, lr}
 102ef6a:	460e      	mov	r6, r1
		configASSERT( pxEventList );
 102ef6c:	4605      	mov	r5, r0
 102ef6e:	b1d0      	cbz	r0, 102efa6 <vTaskPlaceOnEventListRestricted+0x3e>
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 102ef70:	4c10      	ldr	r4, [pc, #64]	; (102efb4 <vTaskPlaceOnEventListRestricted+0x4c>)
 102ef72:	4b11      	ldr	r3, [pc, #68]	; (102efb8 <vTaskPlaceOnEventListRestricted+0x50>)
 102ef74:	6821      	ldr	r1, [r4, #0]
 102ef76:	4628      	mov	r0, r5
 102ef78:	3118      	adds	r1, #24
 102ef7a:	4798      	blx	r3
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
 102ef7c:	6820      	ldr	r0, [r4, #0]
 102ef7e:	4b0f      	ldr	r3, [pc, #60]	; (102efbc <vTaskPlaceOnEventListRestricted+0x54>)
 102ef80:	3004      	adds	r0, #4
 102ef82:	4798      	blx	r3
 102ef84:	b940      	cbnz	r0, 102ef98 <vTaskPlaceOnEventListRestricted+0x30>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 102ef86:	6823      	ldr	r3, [r4, #0]
 102ef88:	490d      	ldr	r1, [pc, #52]	; (102efc0 <vTaskPlaceOnEventListRestricted+0x58>)
 102ef8a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 102ef8c:	680b      	ldr	r3, [r1, #0]
 102ef8e:	2201      	movs	r2, #1
 102ef90:	4082      	lsls	r2, r0
 102ef92:	ea23 0302 	bic.w	r3, r3, r2
 102ef96:	600b      	str	r3, [r1, #0]
		xTimeToWake = xTickCount + xTicksToWait;
 102ef98:	4a0a      	ldr	r2, [pc, #40]	; (102efc4 <vTaskPlaceOnEventListRestricted+0x5c>)
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 102ef9a:	4b0b      	ldr	r3, [pc, #44]	; (102efc8 <vTaskPlaceOnEventListRestricted+0x60>)
		xTimeToWake = xTickCount + xTicksToWait;
 102ef9c:	6810      	ldr	r0, [r2, #0]
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 102ef9e:	4430      	add	r0, r6
	}
 102efa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 102efa4:	4718      	bx	r3
		configASSERT( pxEventList );
 102efa6:	f240 717f 	movw	r1, #1919	; 0x77f
 102efaa:	4808      	ldr	r0, [pc, #32]	; (102efcc <vTaskPlaceOnEventListRestricted+0x64>)
 102efac:	4b08      	ldr	r3, [pc, #32]	; (102efd0 <vTaskPlaceOnEventListRestricted+0x68>)
 102efae:	4798      	blx	r3
 102efb0:	e7de      	b.n	102ef70 <vTaskPlaceOnEventListRestricted+0x8>
 102efb2:	bf00      	nop
 102efb4:	200104e0 	.word	0x200104e0
 102efb8:	0102dc91 	.word	0x0102dc91
 102efbc:	0102dd41 	.word	0x0102dd41
 102efc0:	20010564 	.word	0x20010564
 102efc4:	200105dc 	.word	0x200105dc
 102efc8:	0102e60d 	.word	0x0102e60d
 102efcc:	01038c40 	.word	0x01038c40
 102efd0:	0102f6cd 	.word	0x0102f6cd

0102efd4 <xTaskRemoveFromEventList>:
{
 102efd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 102efd6:	68c3      	ldr	r3, [r0, #12]
 102efd8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 102efda:	b34c      	cbz	r4, 102f030 <xTaskRemoveFromEventList+0x5c>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 102efdc:	f104 0518 	add.w	r5, r4, #24
 102efe0:	4628      	mov	r0, r5
 102efe2:	4e16      	ldr	r6, [pc, #88]	; (102f03c <xTaskRemoveFromEventList+0x68>)
 102efe4:	47b0      	blx	r6
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 102efe6:	4b16      	ldr	r3, [pc, #88]	; (102f040 <xTaskRemoveFromEventList+0x6c>)
 102efe8:	681b      	ldr	r3, [r3, #0]
 102efea:	b9e3      	cbnz	r3, 102f026 <xTaskRemoveFromEventList+0x52>
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 102efec:	1d27      	adds	r7, r4, #4
		prvAddTaskToReadyQueue( pxUnblockedTCB );
 102efee:	4d15      	ldr	r5, [pc, #84]	; (102f044 <xTaskRemoveFromEventList+0x70>)
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 102eff0:	4638      	mov	r0, r7
 102eff2:	47b0      	blx	r6
		prvAddTaskToReadyQueue( pxUnblockedTCB );
 102eff4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 102eff6:	f8d5 e000 	ldr.w	lr, [r5]
 102effa:	4813      	ldr	r0, [pc, #76]	; (102f048 <xTaskRemoveFromEventList+0x74>)
 102effc:	4e13      	ldr	r6, [pc, #76]	; (102f04c <xTaskRemoveFromEventList+0x78>)
 102effe:	2301      	movs	r3, #1
 102f000:	4093      	lsls	r3, r2
 102f002:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 102f006:	ea43 030e 	orr.w	r3, r3, lr
 102f00a:	4639      	mov	r1, r7
 102f00c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 102f010:	602b      	str	r3, [r5, #0]
 102f012:	47b0      	blx	r6
	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
 102f014:	4b0e      	ldr	r3, [pc, #56]	; (102f050 <xTaskRemoveFromEventList+0x7c>)
 102f016:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 102f018:	681b      	ldr	r3, [r3, #0]
 102f01a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 102f01c:	4298      	cmp	r0, r3
 102f01e:	bf34      	ite	cc
 102f020:	2000      	movcc	r0, #0
 102f022:	2001      	movcs	r0, #1
 102f024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 102f026:	4629      	mov	r1, r5
 102f028:	480a      	ldr	r0, [pc, #40]	; (102f054 <xTaskRemoveFromEventList+0x80>)
 102f02a:	4b08      	ldr	r3, [pc, #32]	; (102f04c <xTaskRemoveFromEventList+0x78>)
 102f02c:	4798      	blx	r3
 102f02e:	e7f1      	b.n	102f014 <xTaskRemoveFromEventList+0x40>
	configASSERT( pxUnblockedTCB );
 102f030:	f240 71b5 	movw	r1, #1973	; 0x7b5
 102f034:	4808      	ldr	r0, [pc, #32]	; (102f058 <xTaskRemoveFromEventList+0x84>)
 102f036:	4b09      	ldr	r3, [pc, #36]	; (102f05c <xTaskRemoveFromEventList+0x88>)
 102f038:	4798      	blx	r3
 102f03a:	e7cf      	b.n	102efdc <xTaskRemoveFromEventList+0x8>
 102f03c:	0102dd41 	.word	0x0102dd41
 102f040:	20010558 	.word	0x20010558
 102f044:	20010564 	.word	0x20010564
 102f048:	200104ec 	.word	0x200104ec
 102f04c:	0102dc91 	.word	0x0102dc91
 102f050:	200104e0 	.word	0x200104e0
 102f054:	2001059c 	.word	0x2001059c
 102f058:	01038c40 	.word	0x01038c40
 102f05c:	0102f6cd 	.word	0x0102f6cd

0102f060 <vTaskSetTimeOutState>:
{
 102f060:	b510      	push	{r4, lr}
	configASSERT( pxTimeOut );
 102f062:	4604      	mov	r4, r0
 102f064:	b130      	cbz	r0, 102f074 <vTaskSetTimeOutState+0x14>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 102f066:	4a06      	ldr	r2, [pc, #24]	; (102f080 <vTaskSetTimeOutState+0x20>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 102f068:	4b06      	ldr	r3, [pc, #24]	; (102f084 <vTaskSetTimeOutState+0x24>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 102f06a:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 102f06c:	681b      	ldr	r3, [r3, #0]
 102f06e:	e884 000c 	stmia.w	r4, {r2, r3}
 102f072:	bd10      	pop	{r4, pc}
	configASSERT( pxTimeOut );
 102f074:	f240 71d7 	movw	r1, #2007	; 0x7d7
 102f078:	4803      	ldr	r0, [pc, #12]	; (102f088 <vTaskSetTimeOutState+0x28>)
 102f07a:	4b04      	ldr	r3, [pc, #16]	; (102f08c <vTaskSetTimeOutState+0x2c>)
 102f07c:	4798      	blx	r3
 102f07e:	e7f2      	b.n	102f066 <vTaskSetTimeOutState+0x6>
 102f080:	20010598 	.word	0x20010598
 102f084:	200105dc 	.word	0x200105dc
 102f088:	01038c40 	.word	0x01038c40
 102f08c:	0102f6cd 	.word	0x0102f6cd

0102f090 <xTaskCheckForTimeOut>:
{
 102f090:	b570      	push	{r4, r5, r6, lr}
 102f092:	460d      	mov	r5, r1
	configASSERT( pxTimeOut );
 102f094:	4604      	mov	r4, r0
 102f096:	2800      	cmp	r0, #0
 102f098:	d02d      	beq.n	102f0f6 <xTaskCheckForTimeOut+0x66>
	configASSERT( pxTicksToWait );
 102f09a:	2d00      	cmp	r5, #0
 102f09c:	d036      	beq.n	102f10c <xTaskCheckForTimeOut+0x7c>
	taskENTER_CRITICAL();
 102f09e:	4b1e      	ldr	r3, [pc, #120]	; (102f118 <xTaskCheckForTimeOut+0x88>)
 102f0a0:	4798      	blx	r3
			if( *pxTicksToWait == portMAX_DELAY )
 102f0a2:	682b      	ldr	r3, [r5, #0]
 102f0a4:	1c5a      	adds	r2, r3, #1
 102f0a6:	d02c      	beq.n	102f102 <xTaskCheckForTimeOut+0x72>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
 102f0a8:	4e1c      	ldr	r6, [pc, #112]	; (102f11c <xTaskCheckForTimeOut+0x8c>)
 102f0aa:	6821      	ldr	r1, [r4, #0]
 102f0ac:	6832      	ldr	r2, [r6, #0]
 102f0ae:	4291      	cmp	r1, r2
 102f0b0:	d01a      	beq.n	102f0e8 <xTaskCheckForTimeOut+0x58>
 102f0b2:	4a1b      	ldr	r2, [pc, #108]	; (102f120 <xTaskCheckForTimeOut+0x90>)
 102f0b4:	6860      	ldr	r0, [r4, #4]
 102f0b6:	6811      	ldr	r1, [r2, #0]
 102f0b8:	4288      	cmp	r0, r1
 102f0ba:	d910      	bls.n	102f0de <xTaskCheckForTimeOut+0x4e>
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
 102f0bc:	6811      	ldr	r1, [r2, #0]
 102f0be:	1a09      	subs	r1, r1, r0
 102f0c0:	428b      	cmp	r3, r1
 102f0c2:	d90c      	bls.n	102f0de <xTaskCheckForTimeOut+0x4e>
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
 102f0c4:	6811      	ldr	r1, [r2, #0]
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 102f0c6:	6836      	ldr	r6, [r6, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 102f0c8:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
 102f0ca:	1a08      	subs	r0, r1, r0
 102f0cc:	1a1b      	subs	r3, r3, r0
 102f0ce:	602b      	str	r3, [r5, #0]
			xReturn = pdFALSE;
 102f0d0:	2500      	movs	r5, #0
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 102f0d2:	6026      	str	r6, [r4, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 102f0d4:	6062      	str	r2, [r4, #4]
	taskEXIT_CRITICAL();
 102f0d6:	4b13      	ldr	r3, [pc, #76]	; (102f124 <xTaskCheckForTimeOut+0x94>)
 102f0d8:	4798      	blx	r3
}
 102f0da:	4628      	mov	r0, r5
 102f0dc:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdTRUE;
 102f0de:	2501      	movs	r5, #1
	taskEXIT_CRITICAL();
 102f0e0:	4b10      	ldr	r3, [pc, #64]	; (102f124 <xTaskCheckForTimeOut+0x94>)
 102f0e2:	4798      	blx	r3
}
 102f0e4:	4628      	mov	r0, r5
 102f0e6:	bd70      	pop	{r4, r5, r6, pc}
 102f0e8:	4a0d      	ldr	r2, [pc, #52]	; (102f120 <xTaskCheckForTimeOut+0x90>)
 102f0ea:	6860      	ldr	r0, [r4, #4]
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
 102f0ec:	6811      	ldr	r1, [r2, #0]
 102f0ee:	1a09      	subs	r1, r1, r0
 102f0f0:	428b      	cmp	r3, r1
 102f0f2:	d8e7      	bhi.n	102f0c4 <xTaskCheckForTimeOut+0x34>
 102f0f4:	e7f3      	b.n	102f0de <xTaskCheckForTimeOut+0x4e>
	configASSERT( pxTimeOut );
 102f0f6:	f240 71e1 	movw	r1, #2017	; 0x7e1
 102f0fa:	480b      	ldr	r0, [pc, #44]	; (102f128 <xTaskCheckForTimeOut+0x98>)
 102f0fc:	4b0b      	ldr	r3, [pc, #44]	; (102f12c <xTaskCheckForTimeOut+0x9c>)
 102f0fe:	4798      	blx	r3
 102f100:	e7cb      	b.n	102f09a <xTaskCheckForTimeOut+0xa>
				xReturn = pdFALSE;
 102f102:	2500      	movs	r5, #0
	taskEXIT_CRITICAL();
 102f104:	4b07      	ldr	r3, [pc, #28]	; (102f124 <xTaskCheckForTimeOut+0x94>)
 102f106:	4798      	blx	r3
}
 102f108:	4628      	mov	r0, r5
 102f10a:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxTicksToWait );
 102f10c:	f240 71e2 	movw	r1, #2018	; 0x7e2
 102f110:	4805      	ldr	r0, [pc, #20]	; (102f128 <xTaskCheckForTimeOut+0x98>)
 102f112:	4b06      	ldr	r3, [pc, #24]	; (102f12c <xTaskCheckForTimeOut+0x9c>)
 102f114:	4798      	blx	r3
 102f116:	e7c2      	b.n	102f09e <xTaskCheckForTimeOut+0xe>
 102f118:	0102dddd 	.word	0x0102dddd
 102f11c:	20010598 	.word	0x20010598
 102f120:	200105dc 	.word	0x200105dc
 102f124:	0102ddfd 	.word	0x0102ddfd
 102f128:	01038c40 	.word	0x01038c40
 102f12c:	0102f6cd 	.word	0x0102f6cd

0102f130 <vTaskMissedYield>:
	xMissedYield = pdTRUE;
 102f130:	4b01      	ldr	r3, [pc, #4]	; (102f138 <vTaskMissedYield+0x8>)
 102f132:	2201      	movs	r2, #1
 102f134:	601a      	str	r2, [r3, #0]
 102f136:	4770      	bx	lr
 102f138:	20010594 	.word	0x20010594

0102f13c <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 102f13c:	4b01      	ldr	r3, [pc, #4]	; (102f144 <xTaskGetCurrentTaskHandle+0x8>)
 102f13e:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
 102f140:	4770      	bx	lr
 102f142:	bf00      	nop
 102f144:	200104e0 	.word	0x200104e0

0102f148 <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
 102f148:	4b04      	ldr	r3, [pc, #16]	; (102f15c <xTaskGetSchedulerState+0x14>)
 102f14a:	6818      	ldr	r0, [r3, #0]
 102f14c:	b128      	cbz	r0, 102f15a <xTaskGetSchedulerState+0x12>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 102f14e:	4b04      	ldr	r3, [pc, #16]	; (102f160 <xTaskGetSchedulerState+0x18>)
 102f150:	681b      	ldr	r3, [r3, #0]
 102f152:	2b00      	cmp	r3, #0
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 102f154:	bf0c      	ite	eq
 102f156:	2001      	moveq	r0, #1
 102f158:	2002      	movne	r0, #2
			}
		}

		return xReturn;
	}
 102f15a:	4770      	bx	lr
 102f15c:	200105b0 	.word	0x200105b0
 102f160:	20010558 	.word	0x20010558

0102f164 <vTaskPriorityInherit>:
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 102f164:	b1c8      	cbz	r0, 102f19a <vTaskPriorityInherit+0x36>
	{
 102f166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 102f16a:	4d20      	ldr	r5, [pc, #128]	; (102f1ec <vTaskPriorityInherit+0x88>)
 102f16c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 102f16e:	682a      	ldr	r2, [r5, #0]
 102f170:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 102f172:	4293      	cmp	r3, r2
 102f174:	d20f      	bcs.n	102f196 <vTaskPriorityInherit+0x32>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
 102f176:	682a      	ldr	r2, [r5, #0]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 102f178:	4e1d      	ldr	r6, [pc, #116]	; (102f1f0 <vTaskPriorityInherit+0x8c>)
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
 102f17a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 102f17c:	6941      	ldr	r1, [r0, #20]
 102f17e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 102f182:	eb06 0383 	add.w	r3, r6, r3, lsl #2
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
 102f186:	f1c2 0205 	rsb	r2, r2, #5
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 102f18a:	4299      	cmp	r1, r3
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
 102f18c:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 102f18e:	d005      	beq.n	102f19c <vTaskPriorityInherit+0x38>
					prvAddTaskToReadyQueue( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 102f190:	682b      	ldr	r3, [r5, #0]
 102f192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 102f194:	62c3      	str	r3, [r0, #44]	; 0x2c
 102f196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 102f19a:	4770      	bx	lr
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
 102f19c:	1d07      	adds	r7, r0, #4
 102f19e:	4604      	mov	r4, r0
 102f1a0:	4b14      	ldr	r3, [pc, #80]	; (102f1f4 <vTaskPriorityInherit+0x90>)
 102f1a2:	4638      	mov	r0, r7
 102f1a4:	4798      	blx	r3
 102f1a6:	b9f8      	cbnz	r0, 102f1e8 <vTaskPriorityInherit+0x84>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 102f1a8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 102f1aa:	4a13      	ldr	r2, [pc, #76]	; (102f1f8 <vTaskPriorityInherit+0x94>)
 102f1ac:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 102f1b0:	009b      	lsls	r3, r3, #2
 102f1b2:	58f3      	ldr	r3, [r6, r3]
 102f1b4:	b933      	cbnz	r3, 102f1c4 <vTaskPriorityInherit+0x60>
 102f1b6:	6813      	ldr	r3, [r2, #0]
 102f1b8:	2001      	movs	r0, #1
 102f1ba:	fa00 f101 	lsl.w	r1, r0, r1
 102f1be:	ea23 0301 	bic.w	r3, r3, r1
 102f1c2:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 102f1c4:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyQueue( pxTCB );
 102f1c6:	6815      	ldr	r5, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 102f1c8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 102f1ca:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
 102f1cc:	2301      	movs	r3, #1
 102f1ce:	4083      	lsls	r3, r0
 102f1d0:	432b      	orrs	r3, r5
 102f1d2:	4c0a      	ldr	r4, [pc, #40]	; (102f1fc <vTaskPriorityInherit+0x98>)
 102f1d4:	6013      	str	r3, [r2, #0]
 102f1d6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 102f1da:	4639      	mov	r1, r7
 102f1dc:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 102f1e0:	4623      	mov	r3, r4
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
			}
		}
	}
 102f1e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvAddTaskToReadyQueue( pxTCB );
 102f1e6:	4718      	bx	r3
 102f1e8:	4a03      	ldr	r2, [pc, #12]	; (102f1f8 <vTaskPriorityInherit+0x94>)
 102f1ea:	e7eb      	b.n	102f1c4 <vTaskPriorityInherit+0x60>
 102f1ec:	200104e0 	.word	0x200104e0
 102f1f0:	200104ec 	.word	0x200104ec
 102f1f4:	0102dd41 	.word	0x0102dd41
 102f1f8:	20010564 	.word	0x20010564
 102f1fc:	0102dc91 	.word	0x0102dc91

0102f200 <vTaskPriorityDisinherit>:

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
 102f200:	2800      	cmp	r0, #0
 102f202:	d033      	beq.n	102f26c <vTaskPriorityDisinherit+0x6c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 102f204:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 102f206:	6c83      	ldr	r3, [r0, #72]	; 0x48
 102f208:	429a      	cmp	r2, r3
 102f20a:	d02f      	beq.n	102f26c <vTaskPriorityDisinherit+0x6c>
	{
 102f20c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
 102f210:	1d06      	adds	r6, r0, #4
 102f212:	4604      	mov	r4, r0
 102f214:	4b16      	ldr	r3, [pc, #88]	; (102f270 <vTaskPriorityDisinherit+0x70>)
 102f216:	4630      	mov	r0, r6
 102f218:	4798      	blx	r3
 102f21a:	b1b0      	cbz	r0, 102f24a <vTaskPriorityDisinherit+0x4a>
 102f21c:	4815      	ldr	r0, [pc, #84]	; (102f274 <vTaskPriorityDisinherit+0x74>)
 102f21e:	4d16      	ldr	r5, [pc, #88]	; (102f278 <vTaskPriorityDisinherit+0x78>)
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 102f220:	6ca3      	ldr	r3, [r4, #72]	; 0x48
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
				prvAddTaskToReadyQueue( pxTCB );
 102f222:	f8d5 e000 	ldr.w	lr, [r5]
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 102f226:	62e3      	str	r3, [r4, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
 102f228:	2201      	movs	r2, #1
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
 102f22a:	f1c3 0705 	rsb	r7, r3, #5
				prvAddTaskToReadyQueue( pxTCB );
 102f22e:	409a      	lsls	r2, r3
 102f230:	ea42 020e 	orr.w	r2, r2, lr
 102f234:	eb03 0383 	add.w	r3, r3, r3, lsl #2
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
 102f238:	61a7      	str	r7, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
 102f23a:	4631      	mov	r1, r6
 102f23c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 102f240:	602a      	str	r2, [r5, #0]
 102f242:	4b0e      	ldr	r3, [pc, #56]	; (102f27c <vTaskPriorityDisinherit+0x7c>)
			}
		}
	}
 102f244:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				prvAddTaskToReadyQueue( pxTCB );
 102f248:	4718      	bx	r3
					taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 102f24a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 102f24c:	4809      	ldr	r0, [pc, #36]	; (102f274 <vTaskPriorityDisinherit+0x74>)
 102f24e:	4d0a      	ldr	r5, [pc, #40]	; (102f278 <vTaskPriorityDisinherit+0x78>)
 102f250:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 102f254:	009b      	lsls	r3, r3, #2
 102f256:	58c3      	ldr	r3, [r0, r3]
 102f258:	2b00      	cmp	r3, #0
 102f25a:	d1e1      	bne.n	102f220 <vTaskPriorityDisinherit+0x20>
 102f25c:	682b      	ldr	r3, [r5, #0]
 102f25e:	2101      	movs	r1, #1
 102f260:	fa01 f202 	lsl.w	r2, r1, r2
 102f264:	ea23 0202 	bic.w	r2, r3, r2
 102f268:	602a      	str	r2, [r5, #0]
 102f26a:	e7d9      	b.n	102f220 <vTaskPriorityDisinherit+0x20>
 102f26c:	4770      	bx	lr
 102f26e:	bf00      	nop
 102f270:	0102dd41 	.word	0x0102dd41
 102f274:	200104ec 	.word	0x200104ec
 102f278:	20010564 	.word	0x20010564
 102f27c:	0102dc91 	.word	0x0102dc91

0102f280 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 102f280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 102f284:	4c10      	ldr	r4, [pc, #64]	; (102f2c8 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 102f286:	4b11      	ldr	r3, [pc, #68]	; (102f2cc <prvCheckForValidListAndQueue+0x4c>)
 102f288:	4798      	blx	r3
		if( xTimerQueue == NULL )
 102f28a:	6825      	ldr	r5, [r4, #0]
 102f28c:	b11d      	cbz	r5, 102f296 <prvCheckForValidListAndQueue+0x16>
			pxCurrentTimerList = &xActiveTimerList1;
			pxOverflowTimerList = &xActiveTimerList2;
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
		}
	}
	taskEXIT_CRITICAL();
 102f28e:	4b10      	ldr	r3, [pc, #64]	; (102f2d0 <prvCheckForValidListAndQueue+0x50>)
}
 102f290:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	taskEXIT_CRITICAL();
 102f294:	4718      	bx	r3
			vListInitialise( &xActiveTimerList1 );
 102f296:	4f0f      	ldr	r7, [pc, #60]	; (102f2d4 <prvCheckForValidListAndQueue+0x54>)
			vListInitialise( &xActiveTimerList2 );
 102f298:	4e0f      	ldr	r6, [pc, #60]	; (102f2d8 <prvCheckForValidListAndQueue+0x58>)
			vListInitialise( &xActiveTimerList1 );
 102f29a:	f8df 8048 	ldr.w	r8, [pc, #72]	; 102f2e4 <prvCheckForValidListAndQueue+0x64>
 102f29e:	4638      	mov	r0, r7
 102f2a0:	47c0      	blx	r8
			vListInitialise( &xActiveTimerList2 );
 102f2a2:	4630      	mov	r0, r6
 102f2a4:	47c0      	blx	r8
			pxCurrentTimerList = &xActiveTimerList1;
 102f2a6:	4a0d      	ldr	r2, [pc, #52]	; (102f2dc <prvCheckForValidListAndQueue+0x5c>)
			pxOverflowTimerList = &xActiveTimerList2;
 102f2a8:	f8df e03c 	ldr.w	lr, [pc, #60]	; 102f2e8 <prvCheckForValidListAndQueue+0x68>
			pxCurrentTimerList = &xActiveTimerList1;
 102f2ac:	6017      	str	r7, [r2, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
 102f2ae:	4b0c      	ldr	r3, [pc, #48]	; (102f2e0 <prvCheckForValidListAndQueue+0x60>)
			pxOverflowTimerList = &xActiveTimerList2;
 102f2b0:	f8ce 6000 	str.w	r6, [lr]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
 102f2b4:	462a      	mov	r2, r5
 102f2b6:	210c      	movs	r1, #12
 102f2b8:	2005      	movs	r0, #5
 102f2ba:	4798      	blx	r3
	taskEXIT_CRITICAL();
 102f2bc:	4b04      	ldr	r3, [pc, #16]	; (102f2d0 <prvCheckForValidListAndQueue+0x50>)
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
 102f2be:	6020      	str	r0, [r4, #0]
}
 102f2c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	taskEXIT_CRITICAL();
 102f2c4:	4718      	bx	r3
 102f2c6:	bf00      	nop
 102f2c8:	20010614 	.word	0x20010614
 102f2cc:	0102dddd 	.word	0x0102dddd
 102f2d0:	0102ddfd 	.word	0x0102ddfd
 102f2d4:	200105e8 	.word	0x200105e8
 102f2d8:	200105fc 	.word	0x200105fc
 102f2dc:	200105e0 	.word	0x200105e0
 102f2e0:	0102e1f1 	.word	0x0102e1f1
 102f2e4:	0102dc71 	.word	0x0102dc71
 102f2e8:	200105e4 	.word	0x200105e4

0102f2ec <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 102f2ec:	4291      	cmp	r1, r2
{
 102f2ee:	b510      	push	{r4, lr}
 102f2f0:	4604      	mov	r4, r0
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 102f2f2:	6100      	str	r0, [r0, #16]
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 102f2f4:	6041      	str	r1, [r0, #4]
	if( xNextExpiryTime <= xTimeNow )
 102f2f6:	d805      	bhi.n	102f304 <prvInsertTimerInActiveList+0x18>
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 102f2f8:	6981      	ldr	r1, [r0, #24]
 102f2fa:	1ad2      	subs	r2, r2, r3
 102f2fc:	428a      	cmp	r2, r1
 102f2fe:	d30c      	bcc.n	102f31a <prvInsertTimerInActiveList+0x2e>
			xProcessTimerNow = pdTRUE;
 102f300:	2001      	movs	r0, #1
}
 102f302:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 102f304:	429a      	cmp	r2, r3
 102f306:	d201      	bcs.n	102f30c <prvInsertTimerInActiveList+0x20>
 102f308:	4299      	cmp	r1, r3
 102f30a:	d2f9      	bcs.n	102f300 <prvInsertTimerInActiveList+0x14>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 102f30c:	4a04      	ldr	r2, [pc, #16]	; (102f320 <prvInsertTimerInActiveList+0x34>)
 102f30e:	6810      	ldr	r0, [r2, #0]
 102f310:	4b04      	ldr	r3, [pc, #16]	; (102f324 <prvInsertTimerInActiveList+0x38>)
 102f312:	1d21      	adds	r1, r4, #4
 102f314:	4798      	blx	r3
portBASE_TYPE xProcessTimerNow = pdFALSE;
 102f316:	2000      	movs	r0, #0
 102f318:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 102f31a:	4a03      	ldr	r2, [pc, #12]	; (102f328 <prvInsertTimerInActiveList+0x3c>)
 102f31c:	e7f7      	b.n	102f30e <prvInsertTimerInActiveList+0x22>
 102f31e:	bf00      	nop
 102f320:	200105e0 	.word	0x200105e0
 102f324:	0102dcad 	.word	0x0102dcad
 102f328:	200105e4 	.word	0x200105e4

0102f32c <xTimerCreateTimerTask>:
{
 102f32c:	b510      	push	{r4, lr}
	prvCheckForValidListAndQueue();
 102f32e:	4b0e      	ldr	r3, [pc, #56]	; (102f368 <xTimerCreateTimerTask+0x3c>)
{
 102f330:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
 102f332:	4798      	blx	r3
	if( xTimerQueue != NULL )
 102f334:	4b0d      	ldr	r3, [pc, #52]	; (102f36c <xTimerCreateTimerTask+0x40>)
 102f336:	681b      	ldr	r3, [r3, #0]
 102f338:	b173      	cbz	r3, 102f358 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 102f33a:	2300      	movs	r3, #0
 102f33c:	2204      	movs	r2, #4
 102f33e:	e88d 000c 	stmia.w	sp, {r2, r3}
 102f342:	9303      	str	r3, [sp, #12]
 102f344:	9302      	str	r3, [sp, #8]
 102f346:	f44f 7282 	mov.w	r2, #260	; 0x104
 102f34a:	4909      	ldr	r1, [pc, #36]	; (102f370 <xTimerCreateTimerTask+0x44>)
 102f34c:	4809      	ldr	r0, [pc, #36]	; (102f374 <xTimerCreateTimerTask+0x48>)
 102f34e:	4c0a      	ldr	r4, [pc, #40]	; (102f378 <xTimerCreateTimerTask+0x4c>)
 102f350:	47a0      	blx	r4
	configASSERT( xReturn );
 102f352:	b108      	cbz	r0, 102f358 <xTimerCreateTimerTask+0x2c>
}
 102f354:	b004      	add	sp, #16
 102f356:	bd10      	pop	{r4, pc}
	configASSERT( xReturn );
 102f358:	21d7      	movs	r1, #215	; 0xd7
 102f35a:	4808      	ldr	r0, [pc, #32]	; (102f37c <xTimerCreateTimerTask+0x50>)
 102f35c:	4b08      	ldr	r3, [pc, #32]	; (102f380 <xTimerCreateTimerTask+0x54>)
 102f35e:	4798      	blx	r3
 102f360:	2000      	movs	r0, #0
}
 102f362:	b004      	add	sp, #16
 102f364:	bd10      	pop	{r4, pc}
 102f366:	bf00      	nop
 102f368:	0102f281 	.word	0x0102f281
 102f36c:	20010614 	.word	0x20010614
 102f370:	01038cc8 	.word	0x01038cc8
 102f374:	0102f485 	.word	0x0102f485
 102f378:	0102e7f9 	.word	0x0102e7f9
 102f37c:	01038c88 	.word	0x01038c88
 102f380:	0102f6cd 	.word	0x0102f6cd

0102f384 <xTimerGenericCommand>:
{
 102f384:	b570      	push	{r4, r5, r6, lr}
	if( xTimerQueue != NULL )
 102f386:	4e13      	ldr	r6, [pc, #76]	; (102f3d4 <xTimerGenericCommand+0x50>)
 102f388:	6834      	ldr	r4, [r6, #0]
{
 102f38a:	b084      	sub	sp, #16
	if( xTimerQueue != NULL )
 102f38c:	b1bc      	cbz	r4, 102f3be <xTimerGenericCommand+0x3a>
 102f38e:	461d      	mov	r5, r3
		xMessage.xMessageID = xCommandID;
 102f390:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
 102f392:	9202      	str	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
 102f394:	9003      	str	r0, [sp, #12]
		if( pxHigherPriorityTaskWoken == NULL )
 102f396:	b13b      	cbz	r3, 102f3a8 <xTimerGenericCommand+0x24>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 102f398:	461a      	mov	r2, r3
 102f39a:	4620      	mov	r0, r4
 102f39c:	2300      	movs	r3, #0
 102f39e:	a901      	add	r1, sp, #4
 102f3a0:	4c0d      	ldr	r4, [pc, #52]	; (102f3d8 <xTimerGenericCommand+0x54>)
 102f3a2:	47a0      	blx	r4
}
 102f3a4:	b004      	add	sp, #16
 102f3a6:	bd70      	pop	{r4, r5, r6, pc}
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 102f3a8:	4b0c      	ldr	r3, [pc, #48]	; (102f3dc <xTimerGenericCommand+0x58>)
 102f3aa:	4798      	blx	r3
 102f3ac:	2801      	cmp	r0, #1
 102f3ae:	d009      	beq.n	102f3c4 <xTimerGenericCommand+0x40>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 102f3b0:	6830      	ldr	r0, [r6, #0]
 102f3b2:	4c0b      	ldr	r4, [pc, #44]	; (102f3e0 <xTimerGenericCommand+0x5c>)
 102f3b4:	462b      	mov	r3, r5
 102f3b6:	462a      	mov	r2, r5
 102f3b8:	a901      	add	r1, sp, #4
 102f3ba:	47a0      	blx	r4
 102f3bc:	e7f2      	b.n	102f3a4 <xTimerGenericCommand+0x20>
portBASE_TYPE xReturn = pdFAIL;
 102f3be:	4620      	mov	r0, r4
}
 102f3c0:	b004      	add	sp, #16
 102f3c2:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
 102f3c4:	462b      	mov	r3, r5
 102f3c6:	6830      	ldr	r0, [r6, #0]
 102f3c8:	4c05      	ldr	r4, [pc, #20]	; (102f3e0 <xTimerGenericCommand+0x5c>)
 102f3ca:	9a08      	ldr	r2, [sp, #32]
 102f3cc:	a901      	add	r1, sp, #4
 102f3ce:	47a0      	blx	r4
 102f3d0:	e7e8      	b.n	102f3a4 <xTimerGenericCommand+0x20>
 102f3d2:	bf00      	nop
 102f3d4:	20010614 	.word	0x20010614
 102f3d8:	0102e395 	.word	0x0102e395
 102f3dc:	0102f149 	.word	0x0102f149
 102f3e0:	0102e255 	.word	0x0102e255

0102f3e4 <prvSwitchTimerLists.isra.1>:
static void prvSwitchTimerLists( portTickType xLastTime )
 102f3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 102f3e8:	4e1f      	ldr	r6, [pc, #124]	; (102f468 <prvSwitchTimerLists.isra.1+0x84>)
		uxListRemove( &( pxTimer->xTimerListItem ) );
 102f3ea:	f8df 808c 	ldr.w	r8, [pc, #140]	; 102f478 <prvSwitchTimerLists.isra.1+0x94>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 102f3ee:	f8df 908c 	ldr.w	r9, [pc, #140]	; 102f47c <prvSwitchTimerLists.isra.1+0x98>
static void prvSwitchTimerLists( portTickType xLastTime )
 102f3f2:	b083      	sub	sp, #12
 102f3f4:	e00d      	b.n	102f412 <prvSwitchTimerLists.isra.1+0x2e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 102f3f6:	68da      	ldr	r2, [r3, #12]
 102f3f8:	f8d2 a000 	ldr.w	sl, [r2]
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 102f3fc:	68db      	ldr	r3, [r3, #12]
 102f3fe:	68dc      	ldr	r4, [r3, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
 102f400:	1d25      	adds	r5, r4, #4
 102f402:	4628      	mov	r0, r5
 102f404:	47c0      	blx	r8
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 102f406:	6a63      	ldr	r3, [r4, #36]	; 0x24
 102f408:	4620      	mov	r0, r4
 102f40a:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 102f40c:	69e3      	ldr	r3, [r4, #28]
 102f40e:	2b01      	cmp	r3, #1
 102f410:	d00a      	beq.n	102f428 <prvSwitchTimerLists.isra.1+0x44>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 102f412:	6833      	ldr	r3, [r6, #0]
 102f414:	681a      	ldr	r2, [r3, #0]
 102f416:	2a00      	cmp	r2, #0
 102f418:	d1ed      	bne.n	102f3f6 <prvSwitchTimerLists.isra.1+0x12>
	pxCurrentTimerList = pxOverflowTimerList;
 102f41a:	4a14      	ldr	r2, [pc, #80]	; (102f46c <prvSwitchTimerLists.isra.1+0x88>)
 102f41c:	6811      	ldr	r1, [r2, #0]
 102f41e:	6031      	str	r1, [r6, #0]
	pxOverflowTimerList = pxTemp;
 102f420:	6013      	str	r3, [r2, #0]
}
 102f422:	b003      	add	sp, #12
 102f424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 102f428:	69a7      	ldr	r7, [r4, #24]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 102f42a:	f8df b054 	ldr.w	fp, [pc, #84]	; 102f480 <prvSwitchTimerLists.isra.1+0x9c>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 102f42e:	eb0a 0c07 	add.w	ip, sl, r7
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 102f432:	f04f 0e00 	mov.w	lr, #0
			if( xReloadTime > xNextExpireTime )
 102f436:	45e2      	cmp	sl, ip
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 102f438:	4673      	mov	r3, lr
 102f43a:	4652      	mov	r2, sl
 102f43c:	4671      	mov	r1, lr
 102f43e:	4620      	mov	r0, r4
			if( xReloadTime > xNextExpireTime )
 102f440:	d206      	bcs.n	102f450 <prvSwitchTimerLists.isra.1+0x6c>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 102f442:	f8c4 c004 	str.w	ip, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 102f446:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 102f448:	6830      	ldr	r0, [r6, #0]
 102f44a:	4629      	mov	r1, r5
 102f44c:	47d8      	blx	fp
 102f44e:	e7e0      	b.n	102f412 <prvSwitchTimerLists.isra.1+0x2e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 102f450:	f8cd e000 	str.w	lr, [sp]
 102f454:	47c8      	blx	r9
				configASSERT( xResult );
 102f456:	2800      	cmp	r0, #0
 102f458:	d1db      	bne.n	102f412 <prvSwitchTimerLists.isra.1+0x2e>
 102f45a:	f240 2172 	movw	r1, #626	; 0x272
 102f45e:	4804      	ldr	r0, [pc, #16]	; (102f470 <prvSwitchTimerLists.isra.1+0x8c>)
 102f460:	4b04      	ldr	r3, [pc, #16]	; (102f474 <prvSwitchTimerLists.isra.1+0x90>)
 102f462:	4798      	blx	r3
 102f464:	e7d5      	b.n	102f412 <prvSwitchTimerLists.isra.1+0x2e>
 102f466:	bf00      	nop
 102f468:	200105e0 	.word	0x200105e0
 102f46c:	200105e4 	.word	0x200105e4
 102f470:	01038c88 	.word	0x01038c88
 102f474:	0102f6cd 	.word	0x0102f6cd
 102f478:	0102dd41 	.word	0x0102dd41
 102f47c:	0102f385 	.word	0x0102f385
 102f480:	0102dcad 	.word	0x0102dcad

0102f484 <prvTimerTask>:
{
 102f484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 102f488:	f8df 9194 	ldr.w	r9, [pc, #404]	; 102f620 <prvTimerTask+0x19c>
 102f48c:	f8df a194 	ldr.w	sl, [pc, #404]	; 102f624 <prvTimerTask+0x1a0>
 102f490:	4f57      	ldr	r7, [pc, #348]	; (102f5f0 <prvTimerTask+0x16c>)
 102f492:	f8df b194 	ldr.w	fp, [pc, #404]	; 102f628 <prvTimerTask+0x1a4>
 102f496:	f8df 8194 	ldr.w	r8, [pc, #404]	; 102f62c <prvTimerTask+0x1a8>
 102f49a:	b087      	sub	sp, #28
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 102f49c:	4b55      	ldr	r3, [pc, #340]	; (102f5f4 <prvTimerTask+0x170>)
 102f49e:	681b      	ldr	r3, [r3, #0]
 102f4a0:	681c      	ldr	r4, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 102f4a2:	2c00      	cmp	r4, #0
 102f4a4:	d065      	beq.n	102f572 <prvTimerTask+0xee>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 102f4a6:	68db      	ldr	r3, [r3, #12]
 102f4a8:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
 102f4aa:	4b53      	ldr	r3, [pc, #332]	; (102f5f8 <prvTimerTask+0x174>)
 102f4ac:	4798      	blx	r3
	xTimeNow = xTaskGetTickCount();
 102f4ae:	4b53      	ldr	r3, [pc, #332]	; (102f5fc <prvTimerTask+0x178>)
 102f4b0:	4798      	blx	r3
	if( xTimeNow < xLastTime )
 102f4b2:	4b53      	ldr	r3, [pc, #332]	; (102f600 <prvTimerTask+0x17c>)
 102f4b4:	681b      	ldr	r3, [r3, #0]
 102f4b6:	4283      	cmp	r3, r0
	xTimeNow = xTaskGetTickCount();
 102f4b8:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 102f4ba:	d863      	bhi.n	102f584 <prvTimerTask+0x100>
	xLastTime = xTimeNow;
 102f4bc:	4b50      	ldr	r3, [pc, #320]	; (102f600 <prvTimerTask+0x17c>)
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 102f4be:	4284      	cmp	r4, r0
	xLastTime = xTimeNow;
 102f4c0:	6018      	str	r0, [r3, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 102f4c2:	d96f      	bls.n	102f5a4 <prvTimerTask+0x120>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 102f4c4:	4b4f      	ldr	r3, [pc, #316]	; (102f604 <prvTimerTask+0x180>)
 102f4c6:	6838      	ldr	r0, [r7, #0]
 102f4c8:	1b61      	subs	r1, r4, r5
 102f4ca:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
 102f4cc:	4b4e      	ldr	r3, [pc, #312]	; (102f608 <prvTimerTask+0x184>)
 102f4ce:	4798      	blx	r3
 102f4d0:	2800      	cmp	r0, #0
 102f4d2:	d064      	beq.n	102f59e <prvTimerTask+0x11a>
	xTimeNow = xTaskGetTickCount();
 102f4d4:	4b49      	ldr	r3, [pc, #292]	; (102f5fc <prvTimerTask+0x178>)
 102f4d6:	4798      	blx	r3
	if( xTimeNow < xLastTime )
 102f4d8:	4b49      	ldr	r3, [pc, #292]	; (102f600 <prvTimerTask+0x17c>)
 102f4da:	681b      	ldr	r3, [r3, #0]
 102f4dc:	4298      	cmp	r0, r3
	xTimeNow = xTaskGetTickCount();
 102f4de:	4606      	mov	r6, r0
	if( xTimeNow < xLastTime )
 102f4e0:	d35a      	bcc.n	102f598 <prvTimerTask+0x114>
	xLastTime = xTimeNow;
 102f4e2:	4b47      	ldr	r3, [pc, #284]	; (102f600 <prvTimerTask+0x17c>)
 102f4e4:	601e      	str	r6, [r3, #0]
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 102f4e6:	2300      	movs	r3, #0
 102f4e8:	461a      	mov	r2, r3
 102f4ea:	a903      	add	r1, sp, #12
 102f4ec:	6838      	ldr	r0, [r7, #0]
 102f4ee:	47c0      	blx	r8
 102f4f0:	2800      	cmp	r0, #0
 102f4f2:	d0d3      	beq.n	102f49c <prvTimerTask+0x18>
		pxTimer = xMessage.pxTimer;
 102f4f4:	9c05      	ldr	r4, [sp, #20]
		if( pxTimer != NULL )
 102f4f6:	b11c      	cbz	r4, 102f500 <prvTimerTask+0x7c>
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 102f4f8:	6963      	ldr	r3, [r4, #20]
 102f4fa:	b10b      	cbz	r3, 102f500 <prvTimerTask+0x7c>
				uxListRemove( &( pxTimer->xTimerListItem ) );
 102f4fc:	1d20      	adds	r0, r4, #4
 102f4fe:	47c8      	blx	r9
		switch( xMessage.xMessageID )
 102f500:	9d03      	ldr	r5, [sp, #12]
 102f502:	2d02      	cmp	r5, #2
 102f504:	d025      	beq.n	102f552 <prvTimerTask+0xce>
 102f506:	2d03      	cmp	r5, #3
 102f508:	d020      	beq.n	102f54c <prvTimerTask+0xc8>
 102f50a:	2d00      	cmp	r5, #0
 102f50c:	d1eb      	bne.n	102f4e6 <prvTimerTask+0x62>
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
 102f50e:	9b04      	ldr	r3, [sp, #16]
 102f510:	69a1      	ldr	r1, [r4, #24]
 102f512:	4632      	mov	r2, r6
 102f514:	4419      	add	r1, r3
 102f516:	4620      	mov	r0, r4
 102f518:	47d0      	blx	sl
 102f51a:	2801      	cmp	r0, #1
 102f51c:	d1e3      	bne.n	102f4e6 <prvTimerTask+0x62>
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 102f51e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 102f520:	4620      	mov	r0, r4
 102f522:	4798      	blx	r3
					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 102f524:	69e3      	ldr	r3, [r4, #28]
 102f526:	2b01      	cmp	r3, #1
 102f528:	d1dd      	bne.n	102f4e6 <prvTimerTask+0x62>
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 102f52a:	69a3      	ldr	r3, [r4, #24]
 102f52c:	9a04      	ldr	r2, [sp, #16]
 102f52e:	9500      	str	r5, [sp, #0]
 102f530:	441a      	add	r2, r3
 102f532:	4620      	mov	r0, r4
 102f534:	462b      	mov	r3, r5
 102f536:	4629      	mov	r1, r5
 102f538:	4c34      	ldr	r4, [pc, #208]	; (102f60c <prvTimerTask+0x188>)
 102f53a:	47a0      	blx	r4
						configASSERT( xResult );
 102f53c:	2800      	cmp	r0, #0
 102f53e:	d1d2      	bne.n	102f4e6 <prvTimerTask+0x62>
 102f540:	f240 2126 	movw	r1, #550	; 0x226
 102f544:	4832      	ldr	r0, [pc, #200]	; (102f610 <prvTimerTask+0x18c>)
 102f546:	4b33      	ldr	r3, [pc, #204]	; (102f614 <prvTimerTask+0x190>)
 102f548:	4798      	blx	r3
 102f54a:	e7cc      	b.n	102f4e6 <prvTimerTask+0x62>
				vPortFree( pxTimer );
 102f54c:	4620      	mov	r0, r4
 102f54e:	47d8      	blx	fp
 102f550:	e7c9      	b.n	102f4e6 <prvTimerTask+0x62>
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
 102f552:	9904      	ldr	r1, [sp, #16]
 102f554:	61a1      	str	r1, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 102f556:	b129      	cbz	r1, 102f564 <prvTimerTask+0xe0>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 102f558:	4431      	add	r1, r6
 102f55a:	4620      	mov	r0, r4
 102f55c:	4633      	mov	r3, r6
 102f55e:	4632      	mov	r2, r6
 102f560:	47d0      	blx	sl
 102f562:	e7c0      	b.n	102f4e6 <prvTimerTask+0x62>
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 102f564:	f240 2133 	movw	r1, #563	; 0x233
 102f568:	4829      	ldr	r0, [pc, #164]	; (102f610 <prvTimerTask+0x18c>)
 102f56a:	4b2a      	ldr	r3, [pc, #168]	; (102f614 <prvTimerTask+0x190>)
 102f56c:	4798      	blx	r3
 102f56e:	69a1      	ldr	r1, [r4, #24]
 102f570:	e7f2      	b.n	102f558 <prvTimerTask+0xd4>
	vTaskSuspendAll();
 102f572:	4b21      	ldr	r3, [pc, #132]	; (102f5f8 <prvTimerTask+0x174>)
 102f574:	4798      	blx	r3
	xTimeNow = xTaskGetTickCount();
 102f576:	4b21      	ldr	r3, [pc, #132]	; (102f5fc <prvTimerTask+0x178>)
 102f578:	4798      	blx	r3
	if( xTimeNow < xLastTime )
 102f57a:	4b21      	ldr	r3, [pc, #132]	; (102f600 <prvTimerTask+0x17c>)
 102f57c:	681b      	ldr	r3, [r3, #0]
 102f57e:	4283      	cmp	r3, r0
	xTimeNow = xTaskGetTickCount();
 102f580:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 102f582:	d906      	bls.n	102f592 <prvTimerTask+0x10e>
		prvSwitchTimerLists( xLastTime );
 102f584:	4b24      	ldr	r3, [pc, #144]	; (102f618 <prvTimerTask+0x194>)
 102f586:	4798      	blx	r3
	xLastTime = xTimeNow;
 102f588:	4b1d      	ldr	r3, [pc, #116]	; (102f600 <prvTimerTask+0x17c>)
 102f58a:	601d      	str	r5, [r3, #0]
			xTaskResumeAll();
 102f58c:	4b1e      	ldr	r3, [pc, #120]	; (102f608 <prvTimerTask+0x184>)
 102f58e:	4798      	blx	r3
 102f590:	e7a0      	b.n	102f4d4 <prvTimerTask+0x50>
	xLastTime = xTimeNow;
 102f592:	4b1b      	ldr	r3, [pc, #108]	; (102f600 <prvTimerTask+0x17c>)
 102f594:	601d      	str	r5, [r3, #0]
 102f596:	e795      	b.n	102f4c4 <prvTimerTask+0x40>
		prvSwitchTimerLists( xLastTime );
 102f598:	4b1f      	ldr	r3, [pc, #124]	; (102f618 <prvTimerTask+0x194>)
 102f59a:	4798      	blx	r3
 102f59c:	e7a1      	b.n	102f4e2 <prvTimerTask+0x5e>
					portYIELD_WITHIN_API();
 102f59e:	4b1f      	ldr	r3, [pc, #124]	; (102f61c <prvTimerTask+0x198>)
 102f5a0:	4798      	blx	r3
 102f5a2:	e797      	b.n	102f4d4 <prvTimerTask+0x50>
				xTaskResumeAll();
 102f5a4:	4b18      	ldr	r3, [pc, #96]	; (102f608 <prvTimerTask+0x184>)
 102f5a6:	4798      	blx	r3
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 102f5a8:	4b12      	ldr	r3, [pc, #72]	; (102f5f4 <prvTimerTask+0x170>)
 102f5aa:	681b      	ldr	r3, [r3, #0]
 102f5ac:	68db      	ldr	r3, [r3, #12]
 102f5ae:	68de      	ldr	r6, [r3, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
 102f5b0:	1d30      	adds	r0, r6, #4
 102f5b2:	47c8      	blx	r9
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 102f5b4:	69f3      	ldr	r3, [r6, #28]
 102f5b6:	2b01      	cmp	r3, #1
 102f5b8:	d003      	beq.n	102f5c2 <prvTimerTask+0x13e>
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 102f5ba:	6a73      	ldr	r3, [r6, #36]	; 0x24
 102f5bc:	4630      	mov	r0, r6
 102f5be:	4798      	blx	r3
 102f5c0:	e788      	b.n	102f4d4 <prvTimerTask+0x50>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 102f5c2:	69b1      	ldr	r1, [r6, #24]
 102f5c4:	462a      	mov	r2, r5
 102f5c6:	4421      	add	r1, r4
 102f5c8:	4623      	mov	r3, r4
 102f5ca:	4630      	mov	r0, r6
 102f5cc:	47d0      	blx	sl
 102f5ce:	2801      	cmp	r0, #1
 102f5d0:	d1f3      	bne.n	102f5ba <prvTimerTask+0x136>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 102f5d2:	2300      	movs	r3, #0
 102f5d4:	4622      	mov	r2, r4
 102f5d6:	9300      	str	r3, [sp, #0]
 102f5d8:	4619      	mov	r1, r3
 102f5da:	4630      	mov	r0, r6
 102f5dc:	4c0b      	ldr	r4, [pc, #44]	; (102f60c <prvTimerTask+0x188>)
 102f5de:	47a0      	blx	r4
			configASSERT( xResult );
 102f5e0:	2800      	cmp	r0, #0
 102f5e2:	d1ea      	bne.n	102f5ba <prvTimerTask+0x136>
 102f5e4:	f240 114f 	movw	r1, #335	; 0x14f
 102f5e8:	4809      	ldr	r0, [pc, #36]	; (102f610 <prvTimerTask+0x18c>)
 102f5ea:	4b0a      	ldr	r3, [pc, #40]	; (102f614 <prvTimerTask+0x190>)
 102f5ec:	4798      	blx	r3
 102f5ee:	e7e4      	b.n	102f5ba <prvTimerTask+0x136>
 102f5f0:	20010614 	.word	0x20010614
 102f5f4:	200105e0 	.word	0x200105e0
 102f5f8:	0102ecbd 	.word	0x0102ecbd
 102f5fc:	0102ee85 	.word	0x0102ee85
 102f600:	20010610 	.word	0x20010610
 102f604:	0102e5c1 	.word	0x0102e5c1
 102f608:	0102eccd 	.word	0x0102eccd
 102f60c:	0102f385 	.word	0x0102f385
 102f610:	01038c88 	.word	0x01038c88
 102f614:	0102f6cd 	.word	0x0102f6cd
 102f618:	0102f3e5 	.word	0x0102f3e5
 102f61c:	0102ddbd 	.word	0x0102ddbd
 102f620:	0102dd41 	.word	0x0102dd41
 102f624:	0102f2ed 	.word	0x0102f2ed
 102f628:	0102dff5 	.word	0x0102dff5
 102f62c:	0102e439 	.word	0x0102e439

0102f630 <main>:
 * \param void
 * \retval void
 ******************************************************************************
 */
int main (void)
{	
 102f630:	b508      	push	{r3, lr}
	/* System initialize */
	SYSTEM_initialize();
	WATCHDOG_APP_vRestart();
 102f632:	4d14      	ldr	r5, [pc, #80]	; (102f684 <main+0x54>)
	PFAIL_APP_vTask();
 102f634:	4c14      	ldr	r4, [pc, #80]	; (102f688 <main+0x58>)
	SYSTEM_initialize();
 102f636:	4b15      	ldr	r3, [pc, #84]	; (102f68c <main+0x5c>)
 102f638:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 102f63a:	47a8      	blx	r5
	PFAIL_APP_vTask();
 102f63c:	47a0      	blx	r4
	
	/* Metrology data refresh task */
	METROLOGY_APP_vInitialize();
 102f63e:	4b14      	ldr	r3, [pc, #80]	; (102f690 <main+0x60>)
 102f640:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 102f642:	47a8      	blx	r5
	PFAIL_APP_vTask();
 102f644:	47a0      	blx	r4
	
	/* OPF task */
	OP_create_task();
 102f646:	4b13      	ldr	r3, [pc, #76]	; (102f694 <main+0x64>)
 102f648:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 102f64a:	47a8      	blx	r5
	PFAIL_APP_vTask();
 102f64c:	47a0      	blx	r4
	
	/* OPR task */
	NIC_create_task();
 102f64e:	4b12      	ldr	r3, [pc, #72]	; (102f698 <main+0x68>)
 102f650:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 102f652:	47a8      	blx	r5
	PFAIL_APP_vTask();
 102f654:	47a0      	blx	r4
	
	/* MM task */
	SM_APP_vCreate_task();
 102f656:	4b11      	ldr	r3, [pc, #68]	; (102f69c <main+0x6c>)
 102f658:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 102f65a:	47a8      	blx	r5
	PFAIL_APP_vTask();
 102f65c:	47a0      	blx	r4
	
	/* Time of Use task */
	TOU_APP_vCreate_task();
 102f65e:	4b10      	ldr	r3, [pc, #64]	; (102f6a0 <main+0x70>)
 102f660:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 102f662:	47a8      	blx	r5
	PFAIL_APP_vTask();
 102f664:	47a0      	blx	r4
	
	/* Metering task */
	REGS_APP_vCreate_task();
 102f666:	4b0f      	ldr	r3, [pc, #60]	; (102f6a4 <main+0x74>)
 102f668:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 102f66a:	47a8      	blx	r5
	PFAIL_APP_vTask();
 102f66c:	47a0      	blx	r4
	
	/* Power Fail task */
	PFAIL_APP_vCreate_task();
 102f66e:	4b0e      	ldr	r3, [pc, #56]	; (102f6a8 <main+0x78>)
 102f670:	4798      	blx	r3
	WATCHDOG_APP_vRestart();
 102f672:	47a8      	blx	r5
	PFAIL_APP_vTask();
 102f674:	47a0      	blx	r4
	
	meter.system_state.initialiting = false;
 102f676:	4a0d      	ldr	r2, [pc, #52]	; (102f6ac <main+0x7c>)
	
    /* Start the RTOS scheduler */
    vTaskStartScheduler();
 102f678:	4b0d      	ldr	r3, [pc, #52]	; (102f6b0 <main+0x80>)
	meter.system_state.initialiting = false;
 102f67a:	2100      	movs	r1, #0
 102f67c:	f882 1020 	strb.w	r1, [r2, #32]
    vTaskStartScheduler();
 102f680:	4798      	blx	r3
 102f682:	e7fe      	b.n	102f682 <main+0x52>
 102f684:	0101603d 	.word	0x0101603d
 102f688:	01025bf1 	.word	0x01025bf1
 102f68c:	0102b781 	.word	0x0102b781
 102f690:	0101d815 	.word	0x0101d815
 102f694:	0102448d 	.word	0x0102448d
 102f698:	01024cd1 	.word	0x01024cd1
 102f69c:	0101f3e9 	.word	0x0101f3e9
 102f6a0:	0102c53d 	.word	0x0102c53d
 102f6a4:	01028c15 	.word	0x01028c15
 102f6a8:	01025619 	.word	0x01025619
 102f6ac:	20016c2c 	.word	0x20016c2c
 102f6b0:	0102ec3d 	.word	0x0102ec3d

0102f6b4 <vApplicationStackOverflowHook>:
 * \param pcTaskName: Task Name
 * \retval void
 ******************************************************************************
 */
void vApplicationStackOverflowHook( xTaskHandle *pxTask, signed char *pcTaskName )
{
 102f6b4:	b508      	push	{r3, lr}
 102f6b6:	4d03      	ldr	r5, [pc, #12]	; (102f6c4 <vApplicationStackOverflowHook+0x10>)
 102f6b8:	4c03      	ldr	r4, [pc, #12]	; (102f6c8 <vApplicationStackOverflowHook+0x14>)
    /* If the parameters have been corrupted then inspect pxCurrentTCB to
     * identify which task has overflowed its stack.
     */
    for ( ;; )
    {
		LED_turn_on(LED_CYAN);
 102f6ba:	2004      	movs	r0, #4
 102f6bc:	47a8      	blx	r5
		RST_HAL_vExecute_software_reset();
 102f6be:	47a0      	blx	r4
 102f6c0:	e7fb      	b.n	102f6ba <vApplicationStackOverflowHook+0x6>
 102f6c2:	bf00      	nop
 102f6c4:	0101acc1 	.word	0x0101acc1
 102f6c8:	010159a1 	.word	0x010159a1

0102f6cc <assert_triggered>:
 * \param line:
 * \retval void
 ******************************************************************************
*/
void assert_triggered( const char * file, uint32_t line )
{
 102f6cc:	b508      	push	{r3, lr}
 102f6ce:	4d03      	ldr	r5, [pc, #12]	; (102f6dc <assert_triggered+0x10>)
 102f6d0:	4c03      	ldr	r4, [pc, #12]	; (102f6e0 <assert_triggered+0x14>)
    UNUSED( file );
    UNUSED( line );

    for ( ;; )
    {
		LED_turn_on(LED_CYAN);
 102f6d2:	2004      	movs	r0, #4
 102f6d4:	47a8      	blx	r5
		RST_HAL_vExecute_software_reset();
 102f6d6:	47a0      	blx	r4
 102f6d8:	e7fb      	b.n	102f6d2 <assert_triggered+0x6>
 102f6da:	bf00      	nop
 102f6dc:	0101acc1 	.word	0x0101acc1
 102f6e0:	010159a1 	.word	0x010159a1

0102f6e4 <RSTC_Handler>:
 * \retval void
 *
 ******************************************************************************
 */
void RSTC_Handler( void )
{
 102f6e4:	b510      	push	{r4, lr}
	if ( RSTC_WATCHDOG_RESET <= rstc_get_reset_cause( RSTC ) )
 102f6e6:	4806      	ldr	r0, [pc, #24]	; (102f700 <RSTC_Handler+0x1c>)
 102f6e8:	4b06      	ldr	r3, [pc, #24]	; (102f704 <RSTC_Handler+0x20>)
 102f6ea:	4798      	blx	r3
 102f6ec:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 102f6f0:	d200      	bcs.n	102f6f4 <RSTC_Handler+0x10>
 102f6f2:	bd10      	pop	{r4, pc}
    rstc_start_software_reset( RSTC );
 102f6f4:	4802      	ldr	r0, [pc, #8]	; (102f700 <RSTC_Handler+0x1c>)
 102f6f6:	4b04      	ldr	r3, [pc, #16]	; (102f708 <RSTC_Handler+0x24>)
	{
		restart_mode();
	}
}
 102f6f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    rstc_start_software_reset( RSTC );
 102f6fc:	4718      	bx	r3
 102f6fe:	bf00      	nop
 102f700:	400e1400 	.word	0x400e1400
 102f704:	0102d8e1 	.word	0x0102d8e1
 102f708:	0102d8d5 	.word	0x0102d8d5
 102f70c:	00000000 	.word	0x00000000

0102f710 <atan>:
 102f710:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 102f714:	4bc2      	ldr	r3, [pc, #776]	; (102fa20 <atan+0x310>)
 102f716:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 102f71a:	429e      	cmp	r6, r3
 102f71c:	460d      	mov	r5, r1
 102f71e:	468a      	mov	sl, r1
 102f720:	4604      	mov	r4, r0
 102f722:	dd10      	ble.n	102f746 <atan+0x36>
 102f724:	4bbf      	ldr	r3, [pc, #764]	; (102fa24 <atan+0x314>)
 102f726:	429e      	cmp	r6, r3
 102f728:	f300 80b5 	bgt.w	102f896 <atan+0x186>
 102f72c:	f000 80b0 	beq.w	102f890 <atan+0x180>
 102f730:	4bbd      	ldr	r3, [pc, #756]	; (102fa28 <atan+0x318>)
 102f732:	49be      	ldr	r1, [pc, #760]	; (102fa2c <atan+0x31c>)
 102f734:	4cbe      	ldr	r4, [pc, #760]	; (102fa30 <atan+0x320>)
 102f736:	f1ba 0f00 	cmp.w	sl, #0
 102f73a:	bfd8      	it	le
 102f73c:	460b      	movle	r3, r1
 102f73e:	4620      	mov	r0, r4
 102f740:	4619      	mov	r1, r3
 102f742:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 102f746:	4bbb      	ldr	r3, [pc, #748]	; (102fa34 <atan+0x324>)
 102f748:	429e      	cmp	r6, r3
 102f74a:	f300 80c1 	bgt.w	102f8d0 <atan+0x1c0>
 102f74e:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 102f752:	429e      	cmp	r6, r3
 102f754:	f340 80ab 	ble.w	102f8ae <atan+0x19e>
 102f758:	f04f 3bff 	mov.w	fp, #4294967295
 102f75c:	4622      	mov	r2, r4
 102f75e:	462b      	mov	r3, r5
 102f760:	4620      	mov	r0, r4
 102f762:	4629      	mov	r1, r5
 102f764:	f000 fc4e 	bl	1030004 <__aeabi_dmul>
 102f768:	4602      	mov	r2, r0
 102f76a:	460b      	mov	r3, r1
 102f76c:	4680      	mov	r8, r0
 102f76e:	4689      	mov	r9, r1
 102f770:	f000 fc48 	bl	1030004 <__aeabi_dmul>
 102f774:	a392      	add	r3, pc, #584	; (adr r3, 102f9c0 <atan+0x2b0>)
 102f776:	e9d3 2300 	ldrd	r2, r3, [r3]
 102f77a:	4606      	mov	r6, r0
 102f77c:	460f      	mov	r7, r1
 102f77e:	f000 fc41 	bl	1030004 <__aeabi_dmul>
 102f782:	a391      	add	r3, pc, #580	; (adr r3, 102f9c8 <atan+0x2b8>)
 102f784:	e9d3 2300 	ldrd	r2, r3, [r3]
 102f788:	f000 fa8a 	bl	102fca0 <__adddf3>
 102f78c:	4632      	mov	r2, r6
 102f78e:	463b      	mov	r3, r7
 102f790:	f000 fc38 	bl	1030004 <__aeabi_dmul>
 102f794:	a38e      	add	r3, pc, #568	; (adr r3, 102f9d0 <atan+0x2c0>)
 102f796:	e9d3 2300 	ldrd	r2, r3, [r3]
 102f79a:	f000 fa81 	bl	102fca0 <__adddf3>
 102f79e:	4632      	mov	r2, r6
 102f7a0:	463b      	mov	r3, r7
 102f7a2:	f000 fc2f 	bl	1030004 <__aeabi_dmul>
 102f7a6:	a38c      	add	r3, pc, #560	; (adr r3, 102f9d8 <atan+0x2c8>)
 102f7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 102f7ac:	f000 fa78 	bl	102fca0 <__adddf3>
 102f7b0:	4632      	mov	r2, r6
 102f7b2:	463b      	mov	r3, r7
 102f7b4:	f000 fc26 	bl	1030004 <__aeabi_dmul>
 102f7b8:	a389      	add	r3, pc, #548	; (adr r3, 102f9e0 <atan+0x2d0>)
 102f7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 102f7be:	f000 fa6f 	bl	102fca0 <__adddf3>
 102f7c2:	4632      	mov	r2, r6
 102f7c4:	463b      	mov	r3, r7
 102f7c6:	f000 fc1d 	bl	1030004 <__aeabi_dmul>
 102f7ca:	a387      	add	r3, pc, #540	; (adr r3, 102f9e8 <atan+0x2d8>)
 102f7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 102f7d0:	f000 fa66 	bl	102fca0 <__adddf3>
 102f7d4:	4642      	mov	r2, r8
 102f7d6:	464b      	mov	r3, r9
 102f7d8:	f000 fc14 	bl	1030004 <__aeabi_dmul>
 102f7dc:	a384      	add	r3, pc, #528	; (adr r3, 102f9f0 <atan+0x2e0>)
 102f7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 102f7e2:	4680      	mov	r8, r0
 102f7e4:	4689      	mov	r9, r1
 102f7e6:	4630      	mov	r0, r6
 102f7e8:	4639      	mov	r1, r7
 102f7ea:	f000 fc0b 	bl	1030004 <__aeabi_dmul>
 102f7ee:	a382      	add	r3, pc, #520	; (adr r3, 102f9f8 <atan+0x2e8>)
 102f7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 102f7f4:	f000 fa52 	bl	102fc9c <__aeabi_dsub>
 102f7f8:	4632      	mov	r2, r6
 102f7fa:	463b      	mov	r3, r7
 102f7fc:	f000 fc02 	bl	1030004 <__aeabi_dmul>
 102f800:	a37f      	add	r3, pc, #508	; (adr r3, 102fa00 <atan+0x2f0>)
 102f802:	e9d3 2300 	ldrd	r2, r3, [r3]
 102f806:	f000 fa49 	bl	102fc9c <__aeabi_dsub>
 102f80a:	4632      	mov	r2, r6
 102f80c:	463b      	mov	r3, r7
 102f80e:	f000 fbf9 	bl	1030004 <__aeabi_dmul>
 102f812:	a37d      	add	r3, pc, #500	; (adr r3, 102fa08 <atan+0x2f8>)
 102f814:	e9d3 2300 	ldrd	r2, r3, [r3]
 102f818:	f000 fa40 	bl	102fc9c <__aeabi_dsub>
 102f81c:	4632      	mov	r2, r6
 102f81e:	463b      	mov	r3, r7
 102f820:	f000 fbf0 	bl	1030004 <__aeabi_dmul>
 102f824:	a37a      	add	r3, pc, #488	; (adr r3, 102fa10 <atan+0x300>)
 102f826:	e9d3 2300 	ldrd	r2, r3, [r3]
 102f82a:	f000 fa37 	bl	102fc9c <__aeabi_dsub>
 102f82e:	4632      	mov	r2, r6
 102f830:	463b      	mov	r3, r7
 102f832:	f000 fbe7 	bl	1030004 <__aeabi_dmul>
 102f836:	f1bb 3fff 	cmp.w	fp, #4294967295
 102f83a:	4602      	mov	r2, r0
 102f83c:	460b      	mov	r3, r1
 102f83e:	d06e      	beq.n	102f91e <atan+0x20e>
 102f840:	4640      	mov	r0, r8
 102f842:	4649      	mov	r1, r9
 102f844:	f000 fa2c 	bl	102fca0 <__adddf3>
 102f848:	4622      	mov	r2, r4
 102f84a:	462b      	mov	r3, r5
 102f84c:	f000 fbda 	bl	1030004 <__aeabi_dmul>
 102f850:	4e79      	ldr	r6, [pc, #484]	; (102fa38 <atan+0x328>)
 102f852:	4b7a      	ldr	r3, [pc, #488]	; (102fa3c <atan+0x32c>)
 102f854:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 102f858:	445e      	add	r6, fp
 102f85a:	449b      	add	fp, r3
 102f85c:	e9db 2300 	ldrd	r2, r3, [fp]
 102f860:	f000 fa1c 	bl	102fc9c <__aeabi_dsub>
 102f864:	4622      	mov	r2, r4
 102f866:	462b      	mov	r3, r5
 102f868:	f000 fa18 	bl	102fc9c <__aeabi_dsub>
 102f86c:	460b      	mov	r3, r1
 102f86e:	4602      	mov	r2, r0
 102f870:	e9d6 0100 	ldrd	r0, r1, [r6]
 102f874:	f000 fa12 	bl	102fc9c <__aeabi_dsub>
 102f878:	f1ba 0f00 	cmp.w	sl, #0
 102f87c:	4604      	mov	r4, r0
 102f87e:	460b      	mov	r3, r1
 102f880:	f6bf af5d 	bge.w	102f73e <atan+0x2e>
 102f884:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 102f888:	4620      	mov	r0, r4
 102f88a:	4619      	mov	r1, r3
 102f88c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 102f890:	2800      	cmp	r0, #0
 102f892:	f43f af4d 	beq.w	102f730 <atan+0x20>
 102f896:	4622      	mov	r2, r4
 102f898:	462b      	mov	r3, r5
 102f89a:	4620      	mov	r0, r4
 102f89c:	4629      	mov	r1, r5
 102f89e:	f000 f9ff 	bl	102fca0 <__adddf3>
 102f8a2:	4604      	mov	r4, r0
 102f8a4:	460b      	mov	r3, r1
 102f8a6:	4620      	mov	r0, r4
 102f8a8:	4619      	mov	r1, r3
 102f8aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 102f8ae:	a35a      	add	r3, pc, #360	; (adr r3, 102fa18 <atan+0x308>)
 102f8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 102f8b4:	f000 f9f4 	bl	102fca0 <__adddf3>
 102f8b8:	2200      	movs	r2, #0
 102f8ba:	4b61      	ldr	r3, [pc, #388]	; (102fa40 <atan+0x330>)
 102f8bc:	f000 fe32 	bl	1030524 <__aeabi_dcmpgt>
 102f8c0:	2800      	cmp	r0, #0
 102f8c2:	f43f af49 	beq.w	102f758 <atan+0x48>
 102f8c6:	462b      	mov	r3, r5
 102f8c8:	4620      	mov	r0, r4
 102f8ca:	4619      	mov	r1, r3
 102f8cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 102f8d0:	f000 f8c0 	bl	102fa54 <fabs>
 102f8d4:	4b5b      	ldr	r3, [pc, #364]	; (102fa44 <atan+0x334>)
 102f8d6:	429e      	cmp	r6, r3
 102f8d8:	4604      	mov	r4, r0
 102f8da:	460d      	mov	r5, r1
 102f8dc:	dc30      	bgt.n	102f940 <atan+0x230>
 102f8de:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 102f8e2:	429e      	cmp	r6, r3
 102f8e4:	dc55      	bgt.n	102f992 <atan+0x282>
 102f8e6:	4602      	mov	r2, r0
 102f8e8:	460b      	mov	r3, r1
 102f8ea:	f000 f9d9 	bl	102fca0 <__adddf3>
 102f8ee:	2200      	movs	r2, #0
 102f8f0:	4b53      	ldr	r3, [pc, #332]	; (102fa40 <atan+0x330>)
 102f8f2:	f000 f9d3 	bl	102fc9c <__aeabi_dsub>
 102f8f6:	2200      	movs	r2, #0
 102f8f8:	4606      	mov	r6, r0
 102f8fa:	460f      	mov	r7, r1
 102f8fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 102f900:	4620      	mov	r0, r4
 102f902:	4629      	mov	r1, r5
 102f904:	f000 f9cc 	bl	102fca0 <__adddf3>
 102f908:	4602      	mov	r2, r0
 102f90a:	460b      	mov	r3, r1
 102f90c:	4630      	mov	r0, r6
 102f90e:	4639      	mov	r1, r7
 102f910:	f000 fca2 	bl	1030258 <__aeabi_ddiv>
 102f914:	f04f 0b00 	mov.w	fp, #0
 102f918:	4604      	mov	r4, r0
 102f91a:	460d      	mov	r5, r1
 102f91c:	e71e      	b.n	102f75c <atan+0x4c>
 102f91e:	4640      	mov	r0, r8
 102f920:	4649      	mov	r1, r9
 102f922:	f000 f9bd 	bl	102fca0 <__adddf3>
 102f926:	4622      	mov	r2, r4
 102f928:	462b      	mov	r3, r5
 102f92a:	f000 fb6b 	bl	1030004 <__aeabi_dmul>
 102f92e:	460b      	mov	r3, r1
 102f930:	4602      	mov	r2, r0
 102f932:	4629      	mov	r1, r5
 102f934:	4620      	mov	r0, r4
 102f936:	f000 f9b1 	bl	102fc9c <__aeabi_dsub>
 102f93a:	4604      	mov	r4, r0
 102f93c:	460b      	mov	r3, r1
 102f93e:	e6fe      	b.n	102f73e <atan+0x2e>
 102f940:	4b41      	ldr	r3, [pc, #260]	; (102fa48 <atan+0x338>)
 102f942:	429e      	cmp	r6, r3
 102f944:	dc1a      	bgt.n	102f97c <atan+0x26c>
 102f946:	2200      	movs	r2, #0
 102f948:	4b40      	ldr	r3, [pc, #256]	; (102fa4c <atan+0x33c>)
 102f94a:	f000 f9a7 	bl	102fc9c <__aeabi_dsub>
 102f94e:	2200      	movs	r2, #0
 102f950:	4606      	mov	r6, r0
 102f952:	460f      	mov	r7, r1
 102f954:	4b3d      	ldr	r3, [pc, #244]	; (102fa4c <atan+0x33c>)
 102f956:	4620      	mov	r0, r4
 102f958:	4629      	mov	r1, r5
 102f95a:	f000 fb53 	bl	1030004 <__aeabi_dmul>
 102f95e:	2200      	movs	r2, #0
 102f960:	4b37      	ldr	r3, [pc, #220]	; (102fa40 <atan+0x330>)
 102f962:	f000 f99d 	bl	102fca0 <__adddf3>
 102f966:	4602      	mov	r2, r0
 102f968:	460b      	mov	r3, r1
 102f96a:	4630      	mov	r0, r6
 102f96c:	4639      	mov	r1, r7
 102f96e:	f000 fc73 	bl	1030258 <__aeabi_ddiv>
 102f972:	f04f 0b02 	mov.w	fp, #2
 102f976:	4604      	mov	r4, r0
 102f978:	460d      	mov	r5, r1
 102f97a:	e6ef      	b.n	102f75c <atan+0x4c>
 102f97c:	4602      	mov	r2, r0
 102f97e:	460b      	mov	r3, r1
 102f980:	2000      	movs	r0, #0
 102f982:	4933      	ldr	r1, [pc, #204]	; (102fa50 <atan+0x340>)
 102f984:	f000 fc68 	bl	1030258 <__aeabi_ddiv>
 102f988:	f04f 0b03 	mov.w	fp, #3
 102f98c:	4604      	mov	r4, r0
 102f98e:	460d      	mov	r5, r1
 102f990:	e6e4      	b.n	102f75c <atan+0x4c>
 102f992:	2200      	movs	r2, #0
 102f994:	4b2a      	ldr	r3, [pc, #168]	; (102fa40 <atan+0x330>)
 102f996:	f000 f981 	bl	102fc9c <__aeabi_dsub>
 102f99a:	2200      	movs	r2, #0
 102f99c:	4606      	mov	r6, r0
 102f99e:	460f      	mov	r7, r1
 102f9a0:	4b27      	ldr	r3, [pc, #156]	; (102fa40 <atan+0x330>)
 102f9a2:	4620      	mov	r0, r4
 102f9a4:	4629      	mov	r1, r5
 102f9a6:	f000 f97b 	bl	102fca0 <__adddf3>
 102f9aa:	4602      	mov	r2, r0
 102f9ac:	460b      	mov	r3, r1
 102f9ae:	4630      	mov	r0, r6
 102f9b0:	4639      	mov	r1, r7
 102f9b2:	f000 fc51 	bl	1030258 <__aeabi_ddiv>
 102f9b6:	f04f 0b01 	mov.w	fp, #1
 102f9ba:	4604      	mov	r4, r0
 102f9bc:	460d      	mov	r5, r1
 102f9be:	e6cd      	b.n	102f75c <atan+0x4c>
 102f9c0:	e322da11 	.word	0xe322da11
 102f9c4:	3f90ad3a 	.word	0x3f90ad3a
 102f9c8:	24760deb 	.word	0x24760deb
 102f9cc:	3fa97b4b 	.word	0x3fa97b4b
 102f9d0:	a0d03d51 	.word	0xa0d03d51
 102f9d4:	3fb10d66 	.word	0x3fb10d66
 102f9d8:	c54c206e 	.word	0xc54c206e
 102f9dc:	3fb745cd 	.word	0x3fb745cd
 102f9e0:	920083ff 	.word	0x920083ff
 102f9e4:	3fc24924 	.word	0x3fc24924
 102f9e8:	5555550d 	.word	0x5555550d
 102f9ec:	3fd55555 	.word	0x3fd55555
 102f9f0:	2c6a6c2f 	.word	0x2c6a6c2f
 102f9f4:	bfa2b444 	.word	0xbfa2b444
 102f9f8:	52defd9a 	.word	0x52defd9a
 102f9fc:	3fadde2d 	.word	0x3fadde2d
 102fa00:	af749a6d 	.word	0xaf749a6d
 102fa04:	3fb3b0f2 	.word	0x3fb3b0f2
 102fa08:	fe231671 	.word	0xfe231671
 102fa0c:	3fbc71c6 	.word	0x3fbc71c6
 102fa10:	9998ebc4 	.word	0x9998ebc4
 102fa14:	3fc99999 	.word	0x3fc99999
 102fa18:	8800759c 	.word	0x8800759c
 102fa1c:	7e37e43c 	.word	0x7e37e43c
 102fa20:	440fffff 	.word	0x440fffff
 102fa24:	7ff00000 	.word	0x7ff00000
 102fa28:	3ff921fb 	.word	0x3ff921fb
 102fa2c:	bff921fb 	.word	0xbff921fb
 102fa30:	54442d18 	.word	0x54442d18
 102fa34:	3fdbffff 	.word	0x3fdbffff
 102fa38:	01038cd0 	.word	0x01038cd0
 102fa3c:	01038cf0 	.word	0x01038cf0
 102fa40:	3ff00000 	.word	0x3ff00000
 102fa44:	3ff2ffff 	.word	0x3ff2ffff
 102fa48:	40037fff 	.word	0x40037fff
 102fa4c:	3ff80000 	.word	0x3ff80000
 102fa50:	bff00000 	.word	0xbff00000

0102fa54 <fabs>:
 102fa54:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 102fa58:	4770      	bx	lr
 102fa5a:	bf00      	nop

0102fa5c <sqrt>:
 102fa5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 102fa60:	b08b      	sub	sp, #44	; 0x2c
 102fa62:	4604      	mov	r4, r0
 102fa64:	460d      	mov	r5, r1
 102fa66:	f000 f857 	bl	102fb18 <__ieee754_sqrt>
 102fa6a:	4b29      	ldr	r3, [pc, #164]	; (102fb10 <sqrt+0xb4>)
 102fa6c:	f993 a000 	ldrsb.w	sl, [r3]
 102fa70:	f1ba 3fff 	cmp.w	sl, #4294967295
 102fa74:	4606      	mov	r6, r0
 102fa76:	460f      	mov	r7, r1
 102fa78:	d012      	beq.n	102faa0 <sqrt+0x44>
 102fa7a:	4622      	mov	r2, r4
 102fa7c:	462b      	mov	r3, r5
 102fa7e:	4620      	mov	r0, r4
 102fa80:	4629      	mov	r1, r5
 102fa82:	f000 fd59 	bl	1030538 <__aeabi_dcmpun>
 102fa86:	4683      	mov	fp, r0
 102fa88:	b950      	cbnz	r0, 102faa0 <sqrt+0x44>
 102fa8a:	f04f 0800 	mov.w	r8, #0
 102fa8e:	f04f 0900 	mov.w	r9, #0
 102fa92:	4642      	mov	r2, r8
 102fa94:	464b      	mov	r3, r9
 102fa96:	4620      	mov	r0, r4
 102fa98:	4629      	mov	r1, r5
 102fa9a:	f000 fd25 	bl	10304e8 <__aeabi_dcmplt>
 102fa9e:	b920      	cbnz	r0, 102faaa <sqrt+0x4e>
 102faa0:	4630      	mov	r0, r6
 102faa2:	4639      	mov	r1, r7
 102faa4:	b00b      	add	sp, #44	; 0x2c
 102faa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 102faaa:	4b1a      	ldr	r3, [pc, #104]	; (102fb14 <sqrt+0xb8>)
 102faac:	f8cd b020 	str.w	fp, [sp, #32]
 102fab0:	2201      	movs	r2, #1
 102fab2:	e9cd 4504 	strd	r4, r5, [sp, #16]
 102fab6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 102faba:	e88d 000c 	stmia.w	sp, {r2, r3}
 102fabe:	f1ba 0f00 	cmp.w	sl, #0
 102fac2:	d017      	beq.n	102faf4 <sqrt+0x98>
 102fac4:	4642      	mov	r2, r8
 102fac6:	464b      	mov	r3, r9
 102fac8:	4640      	mov	r0, r8
 102faca:	4649      	mov	r1, r9
 102facc:	f000 fbc4 	bl	1030258 <__aeabi_ddiv>
 102fad0:	f1ba 0f02 	cmp.w	sl, #2
 102fad4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 102fad8:	d10e      	bne.n	102faf8 <sqrt+0x9c>
 102fada:	f000 ff51 	bl	1030980 <__errno>
 102fade:	2321      	movs	r3, #33	; 0x21
 102fae0:	6003      	str	r3, [r0, #0]
 102fae2:	9b08      	ldr	r3, [sp, #32]
 102fae4:	b973      	cbnz	r3, 102fb04 <sqrt+0xa8>
 102fae6:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 102faea:	4630      	mov	r0, r6
 102faec:	4639      	mov	r1, r7
 102faee:	b00b      	add	sp, #44	; 0x2c
 102faf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 102faf4:	e9cd 8906 	strd	r8, r9, [sp, #24]
 102faf8:	4668      	mov	r0, sp
 102fafa:	f000 f8c9 	bl	102fc90 <matherr>
 102fafe:	2800      	cmp	r0, #0
 102fb00:	d1ef      	bne.n	102fae2 <sqrt+0x86>
 102fb02:	e7ea      	b.n	102fada <sqrt+0x7e>
 102fb04:	f000 ff3c 	bl	1030980 <__errno>
 102fb08:	9b08      	ldr	r3, [sp, #32]
 102fb0a:	6003      	str	r3, [r0, #0]
 102fb0c:	e7eb      	b.n	102fae6 <sqrt+0x8a>
 102fb0e:	bf00      	nop
 102fb10:	2000009c 	.word	0x2000009c
 102fb14:	01038d10 	.word	0x01038d10

0102fb18 <__ieee754_sqrt>:
 102fb18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 102fb1c:	4f5b      	ldr	r7, [pc, #364]	; (102fc8c <__ieee754_sqrt+0x174>)
 102fb1e:	438f      	bics	r7, r1
 102fb20:	4605      	mov	r5, r0
 102fb22:	460c      	mov	r4, r1
 102fb24:	f000 8092 	beq.w	102fc4c <__ieee754_sqrt+0x134>
 102fb28:	2900      	cmp	r1, #0
 102fb2a:	460b      	mov	r3, r1
 102fb2c:	4602      	mov	r2, r0
 102fb2e:	dd6f      	ble.n	102fc10 <__ieee754_sqrt+0xf8>
 102fb30:	150f      	asrs	r7, r1, #20
 102fb32:	d07b      	beq.n	102fc2c <__ieee754_sqrt+0x114>
 102fb34:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
 102fb38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 102fb3c:	07f8      	lsls	r0, r7, #31
 102fb3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 102fb42:	d45c      	bmi.n	102fbfe <__ieee754_sqrt+0xe6>
 102fb44:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
 102fb48:	2600      	movs	r6, #0
 102fb4a:	440b      	add	r3, r1
 102fb4c:	107f      	asrs	r7, r7, #1
 102fb4e:	0052      	lsls	r2, r2, #1
 102fb50:	46b6      	mov	lr, r6
 102fb52:	2016      	movs	r0, #22
 102fb54:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 102fb58:	eb0e 0401 	add.w	r4, lr, r1
 102fb5c:	429c      	cmp	r4, r3
 102fb5e:	ea4f 75d2 	mov.w	r5, r2, lsr #31
 102fb62:	ea4f 0242 	mov.w	r2, r2, lsl #1
 102fb66:	dc03      	bgt.n	102fb70 <__ieee754_sqrt+0x58>
 102fb68:	1b1b      	subs	r3, r3, r4
 102fb6a:	eb04 0e01 	add.w	lr, r4, r1
 102fb6e:	440e      	add	r6, r1
 102fb70:	3801      	subs	r0, #1
 102fb72:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 102fb76:	ea4f 0151 	mov.w	r1, r1, lsr #1
 102fb7a:	d1ed      	bne.n	102fb58 <__ieee754_sqrt+0x40>
 102fb7c:	4684      	mov	ip, r0
 102fb7e:	2420      	movs	r4, #32
 102fb80:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 102fb84:	e009      	b.n	102fb9a <__ieee754_sqrt+0x82>
 102fb86:	d020      	beq.n	102fbca <__ieee754_sqrt+0xb2>
 102fb88:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
 102fb8c:	3c01      	subs	r4, #1
 102fb8e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 102fb92:	442b      	add	r3, r5
 102fb94:	ea4f 0242 	mov.w	r2, r2, lsl #1
 102fb98:	d020      	beq.n	102fbdc <__ieee754_sqrt+0xc4>
 102fb9a:	4573      	cmp	r3, lr
 102fb9c:	eb01 050c 	add.w	r5, r1, ip
 102fba0:	ddf1      	ble.n	102fb86 <__ieee754_sqrt+0x6e>
 102fba2:	2d00      	cmp	r5, #0
 102fba4:	eb05 0c01 	add.w	ip, r5, r1
 102fba8:	db09      	blt.n	102fbbe <__ieee754_sqrt+0xa6>
 102fbaa:	46f0      	mov	r8, lr
 102fbac:	4295      	cmp	r5, r2
 102fbae:	eba3 030e 	sub.w	r3, r3, lr
 102fbb2:	d900      	bls.n	102fbb6 <__ieee754_sqrt+0x9e>
 102fbb4:	3b01      	subs	r3, #1
 102fbb6:	1b52      	subs	r2, r2, r5
 102fbb8:	4408      	add	r0, r1
 102fbba:	46c6      	mov	lr, r8
 102fbbc:	e7e4      	b.n	102fb88 <__ieee754_sqrt+0x70>
 102fbbe:	f1bc 0f00 	cmp.w	ip, #0
 102fbc2:	dbf2      	blt.n	102fbaa <__ieee754_sqrt+0x92>
 102fbc4:	f10e 0801 	add.w	r8, lr, #1
 102fbc8:	e7f0      	b.n	102fbac <__ieee754_sqrt+0x94>
 102fbca:	4295      	cmp	r5, r2
 102fbcc:	d8dc      	bhi.n	102fb88 <__ieee754_sqrt+0x70>
 102fbce:	2d00      	cmp	r5, #0
 102fbd0:	eb05 0c01 	add.w	ip, r5, r1
 102fbd4:	db44      	blt.n	102fc60 <__ieee754_sqrt+0x148>
 102fbd6:	4698      	mov	r8, r3
 102fbd8:	2300      	movs	r3, #0
 102fbda:	e7ec      	b.n	102fbb6 <__ieee754_sqrt+0x9e>
 102fbdc:	4313      	orrs	r3, r2
 102fbde:	d113      	bne.n	102fc08 <__ieee754_sqrt+0xf0>
 102fbe0:	0840      	lsrs	r0, r0, #1
 102fbe2:	1073      	asrs	r3, r6, #1
 102fbe4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 102fbe8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 102fbec:	07f2      	lsls	r2, r6, #31
 102fbee:	eb03 5907 	add.w	r9, r3, r7, lsl #20
 102fbf2:	bf48      	it	mi
 102fbf4:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
 102fbf8:	4649      	mov	r1, r9
 102fbfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 102fbfe:	005b      	lsls	r3, r3, #1
 102fc00:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 102fc04:	0052      	lsls	r2, r2, #1
 102fc06:	e79d      	b.n	102fb44 <__ieee754_sqrt+0x2c>
 102fc08:	1c41      	adds	r1, r0, #1
 102fc0a:	d02d      	beq.n	102fc68 <__ieee754_sqrt+0x150>
 102fc0c:	3001      	adds	r0, #1
 102fc0e:	e7e7      	b.n	102fbe0 <__ieee754_sqrt+0xc8>
 102fc10:	4606      	mov	r6, r0
 102fc12:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 102fc16:	433e      	orrs	r6, r7
 102fc18:	d0ef      	beq.n	102fbfa <__ieee754_sqrt+0xe2>
 102fc1a:	bb69      	cbnz	r1, 102fc78 <__ieee754_sqrt+0x160>
 102fc1c:	460f      	mov	r7, r1
 102fc1e:	0ad3      	lsrs	r3, r2, #11
 102fc20:	3f15      	subs	r7, #21
 102fc22:	0552      	lsls	r2, r2, #21
 102fc24:	2b00      	cmp	r3, #0
 102fc26:	d0fa      	beq.n	102fc1e <__ieee754_sqrt+0x106>
 102fc28:	02de      	lsls	r6, r3, #11
 102fc2a:	d420      	bmi.n	102fc6e <__ieee754_sqrt+0x156>
 102fc2c:	2400      	movs	r4, #0
 102fc2e:	e000      	b.n	102fc32 <__ieee754_sqrt+0x11a>
 102fc30:	4604      	mov	r4, r0
 102fc32:	005b      	lsls	r3, r3, #1
 102fc34:	02dd      	lsls	r5, r3, #11
 102fc36:	f104 0001 	add.w	r0, r4, #1
 102fc3a:	d5f9      	bpl.n	102fc30 <__ieee754_sqrt+0x118>
 102fc3c:	f1c0 0120 	rsb	r1, r0, #32
 102fc40:	fa22 f101 	lsr.w	r1, r2, r1
 102fc44:	430b      	orrs	r3, r1
 102fc46:	1b3f      	subs	r7, r7, r4
 102fc48:	4082      	lsls	r2, r0
 102fc4a:	e773      	b.n	102fb34 <__ieee754_sqrt+0x1c>
 102fc4c:	4602      	mov	r2, r0
 102fc4e:	460b      	mov	r3, r1
 102fc50:	f000 f9d8 	bl	1030004 <__aeabi_dmul>
 102fc54:	462a      	mov	r2, r5
 102fc56:	4623      	mov	r3, r4
 102fc58:	f000 f822 	bl	102fca0 <__adddf3>
 102fc5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 102fc60:	f1bc 0f00 	cmp.w	ip, #0
 102fc64:	daae      	bge.n	102fbc4 <__ieee754_sqrt+0xac>
 102fc66:	e7b6      	b.n	102fbd6 <__ieee754_sqrt+0xbe>
 102fc68:	3601      	adds	r6, #1
 102fc6a:	4620      	mov	r0, r4
 102fc6c:	e7b9      	b.n	102fbe2 <__ieee754_sqrt+0xca>
 102fc6e:	2000      	movs	r0, #0
 102fc70:	2120      	movs	r1, #32
 102fc72:	f04f 34ff 	mov.w	r4, #4294967295
 102fc76:	e7e3      	b.n	102fc40 <__ieee754_sqrt+0x128>
 102fc78:	4602      	mov	r2, r0
 102fc7a:	460b      	mov	r3, r1
 102fc7c:	f000 f80e 	bl	102fc9c <__aeabi_dsub>
 102fc80:	4602      	mov	r2, r0
 102fc82:	460b      	mov	r3, r1
 102fc84:	f000 fae8 	bl	1030258 <__aeabi_ddiv>
 102fc88:	e7b7      	b.n	102fbfa <__ieee754_sqrt+0xe2>
 102fc8a:	bf00      	nop
 102fc8c:	7ff00000 	.word	0x7ff00000

0102fc90 <matherr>:
 102fc90:	2000      	movs	r0, #0
 102fc92:	4770      	bx	lr

0102fc94 <__aeabi_drsub>:
 102fc94:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 102fc98:	e002      	b.n	102fca0 <__adddf3>
 102fc9a:	bf00      	nop

0102fc9c <__aeabi_dsub>:
 102fc9c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0102fca0 <__adddf3>:
 102fca0:	b530      	push	{r4, r5, lr}
 102fca2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 102fca6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 102fcaa:	ea94 0f05 	teq	r4, r5
 102fcae:	bf08      	it	eq
 102fcb0:	ea90 0f02 	teqeq	r0, r2
 102fcb4:	bf1f      	itttt	ne
 102fcb6:	ea54 0c00 	orrsne.w	ip, r4, r0
 102fcba:	ea55 0c02 	orrsne.w	ip, r5, r2
 102fcbe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 102fcc2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 102fcc6:	f000 80e2 	beq.w	102fe8e <__adddf3+0x1ee>
 102fcca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 102fcce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 102fcd2:	bfb8      	it	lt
 102fcd4:	426d      	neglt	r5, r5
 102fcd6:	dd0c      	ble.n	102fcf2 <__adddf3+0x52>
 102fcd8:	442c      	add	r4, r5
 102fcda:	ea80 0202 	eor.w	r2, r0, r2
 102fcde:	ea81 0303 	eor.w	r3, r1, r3
 102fce2:	ea82 0000 	eor.w	r0, r2, r0
 102fce6:	ea83 0101 	eor.w	r1, r3, r1
 102fcea:	ea80 0202 	eor.w	r2, r0, r2
 102fcee:	ea81 0303 	eor.w	r3, r1, r3
 102fcf2:	2d36      	cmp	r5, #54	; 0x36
 102fcf4:	bf88      	it	hi
 102fcf6:	bd30      	pophi	{r4, r5, pc}
 102fcf8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 102fcfc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 102fd00:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 102fd04:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 102fd08:	d002      	beq.n	102fd10 <__adddf3+0x70>
 102fd0a:	4240      	negs	r0, r0
 102fd0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 102fd10:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 102fd14:	ea4f 3303 	mov.w	r3, r3, lsl #12
 102fd18:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 102fd1c:	d002      	beq.n	102fd24 <__adddf3+0x84>
 102fd1e:	4252      	negs	r2, r2
 102fd20:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 102fd24:	ea94 0f05 	teq	r4, r5
 102fd28:	f000 80a7 	beq.w	102fe7a <__adddf3+0x1da>
 102fd2c:	f1a4 0401 	sub.w	r4, r4, #1
 102fd30:	f1d5 0e20 	rsbs	lr, r5, #32
 102fd34:	db0d      	blt.n	102fd52 <__adddf3+0xb2>
 102fd36:	fa02 fc0e 	lsl.w	ip, r2, lr
 102fd3a:	fa22 f205 	lsr.w	r2, r2, r5
 102fd3e:	1880      	adds	r0, r0, r2
 102fd40:	f141 0100 	adc.w	r1, r1, #0
 102fd44:	fa03 f20e 	lsl.w	r2, r3, lr
 102fd48:	1880      	adds	r0, r0, r2
 102fd4a:	fa43 f305 	asr.w	r3, r3, r5
 102fd4e:	4159      	adcs	r1, r3
 102fd50:	e00e      	b.n	102fd70 <__adddf3+0xd0>
 102fd52:	f1a5 0520 	sub.w	r5, r5, #32
 102fd56:	f10e 0e20 	add.w	lr, lr, #32
 102fd5a:	2a01      	cmp	r2, #1
 102fd5c:	fa03 fc0e 	lsl.w	ip, r3, lr
 102fd60:	bf28      	it	cs
 102fd62:	f04c 0c02 	orrcs.w	ip, ip, #2
 102fd66:	fa43 f305 	asr.w	r3, r3, r5
 102fd6a:	18c0      	adds	r0, r0, r3
 102fd6c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 102fd70:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 102fd74:	d507      	bpl.n	102fd86 <__adddf3+0xe6>
 102fd76:	f04f 0e00 	mov.w	lr, #0
 102fd7a:	f1dc 0c00 	rsbs	ip, ip, #0
 102fd7e:	eb7e 0000 	sbcs.w	r0, lr, r0
 102fd82:	eb6e 0101 	sbc.w	r1, lr, r1
 102fd86:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 102fd8a:	d31b      	bcc.n	102fdc4 <__adddf3+0x124>
 102fd8c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 102fd90:	d30c      	bcc.n	102fdac <__adddf3+0x10c>
 102fd92:	0849      	lsrs	r1, r1, #1
 102fd94:	ea5f 0030 	movs.w	r0, r0, rrx
 102fd98:	ea4f 0c3c 	mov.w	ip, ip, rrx
 102fd9c:	f104 0401 	add.w	r4, r4, #1
 102fda0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 102fda4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 102fda8:	f080 809a 	bcs.w	102fee0 <__adddf3+0x240>
 102fdac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 102fdb0:	bf08      	it	eq
 102fdb2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 102fdb6:	f150 0000 	adcs.w	r0, r0, #0
 102fdba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 102fdbe:	ea41 0105 	orr.w	r1, r1, r5
 102fdc2:	bd30      	pop	{r4, r5, pc}
 102fdc4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 102fdc8:	4140      	adcs	r0, r0
 102fdca:	eb41 0101 	adc.w	r1, r1, r1
 102fdce:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 102fdd2:	f1a4 0401 	sub.w	r4, r4, #1
 102fdd6:	d1e9      	bne.n	102fdac <__adddf3+0x10c>
 102fdd8:	f091 0f00 	teq	r1, #0
 102fddc:	bf04      	itt	eq
 102fdde:	4601      	moveq	r1, r0
 102fde0:	2000      	moveq	r0, #0
 102fde2:	fab1 f381 	clz	r3, r1
 102fde6:	bf08      	it	eq
 102fde8:	3320      	addeq	r3, #32
 102fdea:	f1a3 030b 	sub.w	r3, r3, #11
 102fdee:	f1b3 0220 	subs.w	r2, r3, #32
 102fdf2:	da0c      	bge.n	102fe0e <__adddf3+0x16e>
 102fdf4:	320c      	adds	r2, #12
 102fdf6:	dd08      	ble.n	102fe0a <__adddf3+0x16a>
 102fdf8:	f102 0c14 	add.w	ip, r2, #20
 102fdfc:	f1c2 020c 	rsb	r2, r2, #12
 102fe00:	fa01 f00c 	lsl.w	r0, r1, ip
 102fe04:	fa21 f102 	lsr.w	r1, r1, r2
 102fe08:	e00c      	b.n	102fe24 <__adddf3+0x184>
 102fe0a:	f102 0214 	add.w	r2, r2, #20
 102fe0e:	bfd8      	it	le
 102fe10:	f1c2 0c20 	rsble	ip, r2, #32
 102fe14:	fa01 f102 	lsl.w	r1, r1, r2
 102fe18:	fa20 fc0c 	lsr.w	ip, r0, ip
 102fe1c:	bfdc      	itt	le
 102fe1e:	ea41 010c 	orrle.w	r1, r1, ip
 102fe22:	4090      	lslle	r0, r2
 102fe24:	1ae4      	subs	r4, r4, r3
 102fe26:	bfa2      	ittt	ge
 102fe28:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 102fe2c:	4329      	orrge	r1, r5
 102fe2e:	bd30      	popge	{r4, r5, pc}
 102fe30:	ea6f 0404 	mvn.w	r4, r4
 102fe34:	3c1f      	subs	r4, #31
 102fe36:	da1c      	bge.n	102fe72 <__adddf3+0x1d2>
 102fe38:	340c      	adds	r4, #12
 102fe3a:	dc0e      	bgt.n	102fe5a <__adddf3+0x1ba>
 102fe3c:	f104 0414 	add.w	r4, r4, #20
 102fe40:	f1c4 0220 	rsb	r2, r4, #32
 102fe44:	fa20 f004 	lsr.w	r0, r0, r4
 102fe48:	fa01 f302 	lsl.w	r3, r1, r2
 102fe4c:	ea40 0003 	orr.w	r0, r0, r3
 102fe50:	fa21 f304 	lsr.w	r3, r1, r4
 102fe54:	ea45 0103 	orr.w	r1, r5, r3
 102fe58:	bd30      	pop	{r4, r5, pc}
 102fe5a:	f1c4 040c 	rsb	r4, r4, #12
 102fe5e:	f1c4 0220 	rsb	r2, r4, #32
 102fe62:	fa20 f002 	lsr.w	r0, r0, r2
 102fe66:	fa01 f304 	lsl.w	r3, r1, r4
 102fe6a:	ea40 0003 	orr.w	r0, r0, r3
 102fe6e:	4629      	mov	r1, r5
 102fe70:	bd30      	pop	{r4, r5, pc}
 102fe72:	fa21 f004 	lsr.w	r0, r1, r4
 102fe76:	4629      	mov	r1, r5
 102fe78:	bd30      	pop	{r4, r5, pc}
 102fe7a:	f094 0f00 	teq	r4, #0
 102fe7e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 102fe82:	bf06      	itte	eq
 102fe84:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 102fe88:	3401      	addeq	r4, #1
 102fe8a:	3d01      	subne	r5, #1
 102fe8c:	e74e      	b.n	102fd2c <__adddf3+0x8c>
 102fe8e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 102fe92:	bf18      	it	ne
 102fe94:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 102fe98:	d029      	beq.n	102feee <__adddf3+0x24e>
 102fe9a:	ea94 0f05 	teq	r4, r5
 102fe9e:	bf08      	it	eq
 102fea0:	ea90 0f02 	teqeq	r0, r2
 102fea4:	d005      	beq.n	102feb2 <__adddf3+0x212>
 102fea6:	ea54 0c00 	orrs.w	ip, r4, r0
 102feaa:	bf04      	itt	eq
 102feac:	4619      	moveq	r1, r3
 102feae:	4610      	moveq	r0, r2
 102feb0:	bd30      	pop	{r4, r5, pc}
 102feb2:	ea91 0f03 	teq	r1, r3
 102feb6:	bf1e      	ittt	ne
 102feb8:	2100      	movne	r1, #0
 102feba:	2000      	movne	r0, #0
 102febc:	bd30      	popne	{r4, r5, pc}
 102febe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 102fec2:	d105      	bne.n	102fed0 <__adddf3+0x230>
 102fec4:	0040      	lsls	r0, r0, #1
 102fec6:	4149      	adcs	r1, r1
 102fec8:	bf28      	it	cs
 102feca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 102fece:	bd30      	pop	{r4, r5, pc}
 102fed0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 102fed4:	bf3c      	itt	cc
 102fed6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 102feda:	bd30      	popcc	{r4, r5, pc}
 102fedc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 102fee0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 102fee4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 102fee8:	f04f 0000 	mov.w	r0, #0
 102feec:	bd30      	pop	{r4, r5, pc}
 102feee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 102fef2:	bf1a      	itte	ne
 102fef4:	4619      	movne	r1, r3
 102fef6:	4610      	movne	r0, r2
 102fef8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 102fefc:	bf1c      	itt	ne
 102fefe:	460b      	movne	r3, r1
 102ff00:	4602      	movne	r2, r0
 102ff02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 102ff06:	bf06      	itte	eq
 102ff08:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 102ff0c:	ea91 0f03 	teqeq	r1, r3
 102ff10:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 102ff14:	bd30      	pop	{r4, r5, pc}
 102ff16:	bf00      	nop

0102ff18 <__aeabi_ui2d>:
 102ff18:	f090 0f00 	teq	r0, #0
 102ff1c:	bf04      	itt	eq
 102ff1e:	2100      	moveq	r1, #0
 102ff20:	4770      	bxeq	lr
 102ff22:	b530      	push	{r4, r5, lr}
 102ff24:	f44f 6480 	mov.w	r4, #1024	; 0x400
 102ff28:	f104 0432 	add.w	r4, r4, #50	; 0x32
 102ff2c:	f04f 0500 	mov.w	r5, #0
 102ff30:	f04f 0100 	mov.w	r1, #0
 102ff34:	e750      	b.n	102fdd8 <__adddf3+0x138>
 102ff36:	bf00      	nop

0102ff38 <__aeabi_i2d>:
 102ff38:	f090 0f00 	teq	r0, #0
 102ff3c:	bf04      	itt	eq
 102ff3e:	2100      	moveq	r1, #0
 102ff40:	4770      	bxeq	lr
 102ff42:	b530      	push	{r4, r5, lr}
 102ff44:	f44f 6480 	mov.w	r4, #1024	; 0x400
 102ff48:	f104 0432 	add.w	r4, r4, #50	; 0x32
 102ff4c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 102ff50:	bf48      	it	mi
 102ff52:	4240      	negmi	r0, r0
 102ff54:	f04f 0100 	mov.w	r1, #0
 102ff58:	e73e      	b.n	102fdd8 <__adddf3+0x138>
 102ff5a:	bf00      	nop

0102ff5c <__aeabi_f2d>:
 102ff5c:	0042      	lsls	r2, r0, #1
 102ff5e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 102ff62:	ea4f 0131 	mov.w	r1, r1, rrx
 102ff66:	ea4f 7002 	mov.w	r0, r2, lsl #28
 102ff6a:	bf1f      	itttt	ne
 102ff6c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 102ff70:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 102ff74:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 102ff78:	4770      	bxne	lr
 102ff7a:	f092 0f00 	teq	r2, #0
 102ff7e:	bf14      	ite	ne
 102ff80:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 102ff84:	4770      	bxeq	lr
 102ff86:	b530      	push	{r4, r5, lr}
 102ff88:	f44f 7460 	mov.w	r4, #896	; 0x380
 102ff8c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 102ff90:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 102ff94:	e720      	b.n	102fdd8 <__adddf3+0x138>
 102ff96:	bf00      	nop

0102ff98 <__aeabi_ul2d>:
 102ff98:	ea50 0201 	orrs.w	r2, r0, r1
 102ff9c:	bf08      	it	eq
 102ff9e:	4770      	bxeq	lr
 102ffa0:	b530      	push	{r4, r5, lr}
 102ffa2:	f04f 0500 	mov.w	r5, #0
 102ffa6:	e00a      	b.n	102ffbe <__aeabi_l2d+0x16>

0102ffa8 <__aeabi_l2d>:
 102ffa8:	ea50 0201 	orrs.w	r2, r0, r1
 102ffac:	bf08      	it	eq
 102ffae:	4770      	bxeq	lr
 102ffb0:	b530      	push	{r4, r5, lr}
 102ffb2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 102ffb6:	d502      	bpl.n	102ffbe <__aeabi_l2d+0x16>
 102ffb8:	4240      	negs	r0, r0
 102ffba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 102ffbe:	f44f 6480 	mov.w	r4, #1024	; 0x400
 102ffc2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 102ffc6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 102ffca:	f43f aedc 	beq.w	102fd86 <__adddf3+0xe6>
 102ffce:	f04f 0203 	mov.w	r2, #3
 102ffd2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 102ffd6:	bf18      	it	ne
 102ffd8:	3203      	addne	r2, #3
 102ffda:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 102ffde:	bf18      	it	ne
 102ffe0:	3203      	addne	r2, #3
 102ffe2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 102ffe6:	f1c2 0320 	rsb	r3, r2, #32
 102ffea:	fa00 fc03 	lsl.w	ip, r0, r3
 102ffee:	fa20 f002 	lsr.w	r0, r0, r2
 102fff2:	fa01 fe03 	lsl.w	lr, r1, r3
 102fff6:	ea40 000e 	orr.w	r0, r0, lr
 102fffa:	fa21 f102 	lsr.w	r1, r1, r2
 102fffe:	4414      	add	r4, r2
 1030000:	e6c1      	b.n	102fd86 <__adddf3+0xe6>
 1030002:	bf00      	nop

01030004 <__aeabi_dmul>:
 1030004:	b570      	push	{r4, r5, r6, lr}
 1030006:	f04f 0cff 	mov.w	ip, #255	; 0xff
 103000a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 103000e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 1030012:	bf1d      	ittte	ne
 1030014:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 1030018:	ea94 0f0c 	teqne	r4, ip
 103001c:	ea95 0f0c 	teqne	r5, ip
 1030020:	f000 f8de 	bleq	10301e0 <__aeabi_dmul+0x1dc>
 1030024:	442c      	add	r4, r5
 1030026:	ea81 0603 	eor.w	r6, r1, r3
 103002a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 103002e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 1030032:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 1030036:	bf18      	it	ne
 1030038:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 103003c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 1030040:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 1030044:	d038      	beq.n	10300b8 <__aeabi_dmul+0xb4>
 1030046:	fba0 ce02 	umull	ip, lr, r0, r2
 103004a:	f04f 0500 	mov.w	r5, #0
 103004e:	fbe1 e502 	umlal	lr, r5, r1, r2
 1030052:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 1030056:	fbe0 e503 	umlal	lr, r5, r0, r3
 103005a:	f04f 0600 	mov.w	r6, #0
 103005e:	fbe1 5603 	umlal	r5, r6, r1, r3
 1030062:	f09c 0f00 	teq	ip, #0
 1030066:	bf18      	it	ne
 1030068:	f04e 0e01 	orrne.w	lr, lr, #1
 103006c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 1030070:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 1030074:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 1030078:	d204      	bcs.n	1030084 <__aeabi_dmul+0x80>
 103007a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 103007e:	416d      	adcs	r5, r5
 1030080:	eb46 0606 	adc.w	r6, r6, r6
 1030084:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 1030088:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 103008c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 1030090:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 1030094:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 1030098:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 103009c:	bf88      	it	hi
 103009e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 10300a2:	d81e      	bhi.n	10300e2 <__aeabi_dmul+0xde>
 10300a4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 10300a8:	bf08      	it	eq
 10300aa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 10300ae:	f150 0000 	adcs.w	r0, r0, #0
 10300b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 10300b6:	bd70      	pop	{r4, r5, r6, pc}
 10300b8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 10300bc:	ea46 0101 	orr.w	r1, r6, r1
 10300c0:	ea40 0002 	orr.w	r0, r0, r2
 10300c4:	ea81 0103 	eor.w	r1, r1, r3
 10300c8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 10300cc:	bfc2      	ittt	gt
 10300ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 10300d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 10300d6:	bd70      	popgt	{r4, r5, r6, pc}
 10300d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 10300dc:	f04f 0e00 	mov.w	lr, #0
 10300e0:	3c01      	subs	r4, #1
 10300e2:	f300 80ab 	bgt.w	103023c <__aeabi_dmul+0x238>
 10300e6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 10300ea:	bfde      	ittt	le
 10300ec:	2000      	movle	r0, #0
 10300ee:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 10300f2:	bd70      	pople	{r4, r5, r6, pc}
 10300f4:	f1c4 0400 	rsb	r4, r4, #0
 10300f8:	3c20      	subs	r4, #32
 10300fa:	da35      	bge.n	1030168 <__aeabi_dmul+0x164>
 10300fc:	340c      	adds	r4, #12
 10300fe:	dc1b      	bgt.n	1030138 <__aeabi_dmul+0x134>
 1030100:	f104 0414 	add.w	r4, r4, #20
 1030104:	f1c4 0520 	rsb	r5, r4, #32
 1030108:	fa00 f305 	lsl.w	r3, r0, r5
 103010c:	fa20 f004 	lsr.w	r0, r0, r4
 1030110:	fa01 f205 	lsl.w	r2, r1, r5
 1030114:	ea40 0002 	orr.w	r0, r0, r2
 1030118:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 103011c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 1030120:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 1030124:	fa21 f604 	lsr.w	r6, r1, r4
 1030128:	eb42 0106 	adc.w	r1, r2, r6
 103012c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 1030130:	bf08      	it	eq
 1030132:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 1030136:	bd70      	pop	{r4, r5, r6, pc}
 1030138:	f1c4 040c 	rsb	r4, r4, #12
 103013c:	f1c4 0520 	rsb	r5, r4, #32
 1030140:	fa00 f304 	lsl.w	r3, r0, r4
 1030144:	fa20 f005 	lsr.w	r0, r0, r5
 1030148:	fa01 f204 	lsl.w	r2, r1, r4
 103014c:	ea40 0002 	orr.w	r0, r0, r2
 1030150:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 1030154:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 1030158:	f141 0100 	adc.w	r1, r1, #0
 103015c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 1030160:	bf08      	it	eq
 1030162:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 1030166:	bd70      	pop	{r4, r5, r6, pc}
 1030168:	f1c4 0520 	rsb	r5, r4, #32
 103016c:	fa00 f205 	lsl.w	r2, r0, r5
 1030170:	ea4e 0e02 	orr.w	lr, lr, r2
 1030174:	fa20 f304 	lsr.w	r3, r0, r4
 1030178:	fa01 f205 	lsl.w	r2, r1, r5
 103017c:	ea43 0302 	orr.w	r3, r3, r2
 1030180:	fa21 f004 	lsr.w	r0, r1, r4
 1030184:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 1030188:	fa21 f204 	lsr.w	r2, r1, r4
 103018c:	ea20 0002 	bic.w	r0, r0, r2
 1030190:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 1030194:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 1030198:	bf08      	it	eq
 103019a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 103019e:	bd70      	pop	{r4, r5, r6, pc}
 10301a0:	f094 0f00 	teq	r4, #0
 10301a4:	d10f      	bne.n	10301c6 <__aeabi_dmul+0x1c2>
 10301a6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 10301aa:	0040      	lsls	r0, r0, #1
 10301ac:	eb41 0101 	adc.w	r1, r1, r1
 10301b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 10301b4:	bf08      	it	eq
 10301b6:	3c01      	subeq	r4, #1
 10301b8:	d0f7      	beq.n	10301aa <__aeabi_dmul+0x1a6>
 10301ba:	ea41 0106 	orr.w	r1, r1, r6
 10301be:	f095 0f00 	teq	r5, #0
 10301c2:	bf18      	it	ne
 10301c4:	4770      	bxne	lr
 10301c6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 10301ca:	0052      	lsls	r2, r2, #1
 10301cc:	eb43 0303 	adc.w	r3, r3, r3
 10301d0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 10301d4:	bf08      	it	eq
 10301d6:	3d01      	subeq	r5, #1
 10301d8:	d0f7      	beq.n	10301ca <__aeabi_dmul+0x1c6>
 10301da:	ea43 0306 	orr.w	r3, r3, r6
 10301de:	4770      	bx	lr
 10301e0:	ea94 0f0c 	teq	r4, ip
 10301e4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 10301e8:	bf18      	it	ne
 10301ea:	ea95 0f0c 	teqne	r5, ip
 10301ee:	d00c      	beq.n	103020a <__aeabi_dmul+0x206>
 10301f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 10301f4:	bf18      	it	ne
 10301f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 10301fa:	d1d1      	bne.n	10301a0 <__aeabi_dmul+0x19c>
 10301fc:	ea81 0103 	eor.w	r1, r1, r3
 1030200:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 1030204:	f04f 0000 	mov.w	r0, #0
 1030208:	bd70      	pop	{r4, r5, r6, pc}
 103020a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 103020e:	bf06      	itte	eq
 1030210:	4610      	moveq	r0, r2
 1030212:	4619      	moveq	r1, r3
 1030214:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 1030218:	d019      	beq.n	103024e <__aeabi_dmul+0x24a>
 103021a:	ea94 0f0c 	teq	r4, ip
 103021e:	d102      	bne.n	1030226 <__aeabi_dmul+0x222>
 1030220:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 1030224:	d113      	bne.n	103024e <__aeabi_dmul+0x24a>
 1030226:	ea95 0f0c 	teq	r5, ip
 103022a:	d105      	bne.n	1030238 <__aeabi_dmul+0x234>
 103022c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 1030230:	bf1c      	itt	ne
 1030232:	4610      	movne	r0, r2
 1030234:	4619      	movne	r1, r3
 1030236:	d10a      	bne.n	103024e <__aeabi_dmul+0x24a>
 1030238:	ea81 0103 	eor.w	r1, r1, r3
 103023c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 1030240:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 1030244:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 1030248:	f04f 0000 	mov.w	r0, #0
 103024c:	bd70      	pop	{r4, r5, r6, pc}
 103024e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 1030252:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 1030256:	bd70      	pop	{r4, r5, r6, pc}

01030258 <__aeabi_ddiv>:
 1030258:	b570      	push	{r4, r5, r6, lr}
 103025a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 103025e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 1030262:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 1030266:	bf1d      	ittte	ne
 1030268:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 103026c:	ea94 0f0c 	teqne	r4, ip
 1030270:	ea95 0f0c 	teqne	r5, ip
 1030274:	f000 f8a7 	bleq	10303c6 <__aeabi_ddiv+0x16e>
 1030278:	eba4 0405 	sub.w	r4, r4, r5
 103027c:	ea81 0e03 	eor.w	lr, r1, r3
 1030280:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 1030284:	ea4f 3101 	mov.w	r1, r1, lsl #12
 1030288:	f000 8088 	beq.w	103039c <__aeabi_ddiv+0x144>
 103028c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 1030290:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 1030294:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 1030298:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 103029c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 10302a0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 10302a4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 10302a8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 10302ac:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 10302b0:	429d      	cmp	r5, r3
 10302b2:	bf08      	it	eq
 10302b4:	4296      	cmpeq	r6, r2
 10302b6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 10302ba:	f504 7440 	add.w	r4, r4, #768	; 0x300
 10302be:	d202      	bcs.n	10302c6 <__aeabi_ddiv+0x6e>
 10302c0:	085b      	lsrs	r3, r3, #1
 10302c2:	ea4f 0232 	mov.w	r2, r2, rrx
 10302c6:	1ab6      	subs	r6, r6, r2
 10302c8:	eb65 0503 	sbc.w	r5, r5, r3
 10302cc:	085b      	lsrs	r3, r3, #1
 10302ce:	ea4f 0232 	mov.w	r2, r2, rrx
 10302d2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 10302d6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 10302da:	ebb6 0e02 	subs.w	lr, r6, r2
 10302de:	eb75 0e03 	sbcs.w	lr, r5, r3
 10302e2:	bf22      	ittt	cs
 10302e4:	1ab6      	subcs	r6, r6, r2
 10302e6:	4675      	movcs	r5, lr
 10302e8:	ea40 000c 	orrcs.w	r0, r0, ip
 10302ec:	085b      	lsrs	r3, r3, #1
 10302ee:	ea4f 0232 	mov.w	r2, r2, rrx
 10302f2:	ebb6 0e02 	subs.w	lr, r6, r2
 10302f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 10302fa:	bf22      	ittt	cs
 10302fc:	1ab6      	subcs	r6, r6, r2
 10302fe:	4675      	movcs	r5, lr
 1030300:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 1030304:	085b      	lsrs	r3, r3, #1
 1030306:	ea4f 0232 	mov.w	r2, r2, rrx
 103030a:	ebb6 0e02 	subs.w	lr, r6, r2
 103030e:	eb75 0e03 	sbcs.w	lr, r5, r3
 1030312:	bf22      	ittt	cs
 1030314:	1ab6      	subcs	r6, r6, r2
 1030316:	4675      	movcs	r5, lr
 1030318:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 103031c:	085b      	lsrs	r3, r3, #1
 103031e:	ea4f 0232 	mov.w	r2, r2, rrx
 1030322:	ebb6 0e02 	subs.w	lr, r6, r2
 1030326:	eb75 0e03 	sbcs.w	lr, r5, r3
 103032a:	bf22      	ittt	cs
 103032c:	1ab6      	subcs	r6, r6, r2
 103032e:	4675      	movcs	r5, lr
 1030330:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 1030334:	ea55 0e06 	orrs.w	lr, r5, r6
 1030338:	d018      	beq.n	103036c <__aeabi_ddiv+0x114>
 103033a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 103033e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 1030342:	ea4f 1606 	mov.w	r6, r6, lsl #4
 1030346:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 103034a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 103034e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 1030352:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 1030356:	d1c0      	bne.n	10302da <__aeabi_ddiv+0x82>
 1030358:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 103035c:	d10b      	bne.n	1030376 <__aeabi_ddiv+0x11e>
 103035e:	ea41 0100 	orr.w	r1, r1, r0
 1030362:	f04f 0000 	mov.w	r0, #0
 1030366:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 103036a:	e7b6      	b.n	10302da <__aeabi_ddiv+0x82>
 103036c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 1030370:	bf04      	itt	eq
 1030372:	4301      	orreq	r1, r0
 1030374:	2000      	moveq	r0, #0
 1030376:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 103037a:	bf88      	it	hi
 103037c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 1030380:	f63f aeaf 	bhi.w	10300e2 <__aeabi_dmul+0xde>
 1030384:	ebb5 0c03 	subs.w	ip, r5, r3
 1030388:	bf04      	itt	eq
 103038a:	ebb6 0c02 	subseq.w	ip, r6, r2
 103038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 1030392:	f150 0000 	adcs.w	r0, r0, #0
 1030396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 103039a:	bd70      	pop	{r4, r5, r6, pc}
 103039c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 10303a0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 10303a4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 10303a8:	bfc2      	ittt	gt
 10303aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 10303ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 10303b2:	bd70      	popgt	{r4, r5, r6, pc}
 10303b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 10303b8:	f04f 0e00 	mov.w	lr, #0
 10303bc:	3c01      	subs	r4, #1
 10303be:	e690      	b.n	10300e2 <__aeabi_dmul+0xde>
 10303c0:	ea45 0e06 	orr.w	lr, r5, r6
 10303c4:	e68d      	b.n	10300e2 <__aeabi_dmul+0xde>
 10303c6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 10303ca:	ea94 0f0c 	teq	r4, ip
 10303ce:	bf08      	it	eq
 10303d0:	ea95 0f0c 	teqeq	r5, ip
 10303d4:	f43f af3b 	beq.w	103024e <__aeabi_dmul+0x24a>
 10303d8:	ea94 0f0c 	teq	r4, ip
 10303dc:	d10a      	bne.n	10303f4 <__aeabi_ddiv+0x19c>
 10303de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 10303e2:	f47f af34 	bne.w	103024e <__aeabi_dmul+0x24a>
 10303e6:	ea95 0f0c 	teq	r5, ip
 10303ea:	f47f af25 	bne.w	1030238 <__aeabi_dmul+0x234>
 10303ee:	4610      	mov	r0, r2
 10303f0:	4619      	mov	r1, r3
 10303f2:	e72c      	b.n	103024e <__aeabi_dmul+0x24a>
 10303f4:	ea95 0f0c 	teq	r5, ip
 10303f8:	d106      	bne.n	1030408 <__aeabi_ddiv+0x1b0>
 10303fa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 10303fe:	f43f aefd 	beq.w	10301fc <__aeabi_dmul+0x1f8>
 1030402:	4610      	mov	r0, r2
 1030404:	4619      	mov	r1, r3
 1030406:	e722      	b.n	103024e <__aeabi_dmul+0x24a>
 1030408:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 103040c:	bf18      	it	ne
 103040e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 1030412:	f47f aec5 	bne.w	10301a0 <__aeabi_dmul+0x19c>
 1030416:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 103041a:	f47f af0d 	bne.w	1030238 <__aeabi_dmul+0x234>
 103041e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 1030422:	f47f aeeb 	bne.w	10301fc <__aeabi_dmul+0x1f8>
 1030426:	e712      	b.n	103024e <__aeabi_dmul+0x24a>

01030428 <__gedf2>:
 1030428:	f04f 3cff 	mov.w	ip, #4294967295
 103042c:	e006      	b.n	103043c <__cmpdf2+0x4>
 103042e:	bf00      	nop

01030430 <__ledf2>:
 1030430:	f04f 0c01 	mov.w	ip, #1
 1030434:	e002      	b.n	103043c <__cmpdf2+0x4>
 1030436:	bf00      	nop

01030438 <__cmpdf2>:
 1030438:	f04f 0c01 	mov.w	ip, #1
 103043c:	f84d cd04 	str.w	ip, [sp, #-4]!
 1030440:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 1030444:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 1030448:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 103044c:	bf18      	it	ne
 103044e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 1030452:	d01b      	beq.n	103048c <__cmpdf2+0x54>
 1030454:	b001      	add	sp, #4
 1030456:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 103045a:	bf0c      	ite	eq
 103045c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 1030460:	ea91 0f03 	teqne	r1, r3
 1030464:	bf02      	ittt	eq
 1030466:	ea90 0f02 	teqeq	r0, r2
 103046a:	2000      	moveq	r0, #0
 103046c:	4770      	bxeq	lr
 103046e:	f110 0f00 	cmn.w	r0, #0
 1030472:	ea91 0f03 	teq	r1, r3
 1030476:	bf58      	it	pl
 1030478:	4299      	cmppl	r1, r3
 103047a:	bf08      	it	eq
 103047c:	4290      	cmpeq	r0, r2
 103047e:	bf2c      	ite	cs
 1030480:	17d8      	asrcs	r0, r3, #31
 1030482:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 1030486:	f040 0001 	orr.w	r0, r0, #1
 103048a:	4770      	bx	lr
 103048c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 1030490:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 1030494:	d102      	bne.n	103049c <__cmpdf2+0x64>
 1030496:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 103049a:	d107      	bne.n	10304ac <__cmpdf2+0x74>
 103049c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 10304a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 10304a4:	d1d6      	bne.n	1030454 <__cmpdf2+0x1c>
 10304a6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 10304aa:	d0d3      	beq.n	1030454 <__cmpdf2+0x1c>
 10304ac:	f85d 0b04 	ldr.w	r0, [sp], #4
 10304b0:	4770      	bx	lr
 10304b2:	bf00      	nop

010304b4 <__aeabi_cdrcmple>:
 10304b4:	4684      	mov	ip, r0
 10304b6:	4610      	mov	r0, r2
 10304b8:	4662      	mov	r2, ip
 10304ba:	468c      	mov	ip, r1
 10304bc:	4619      	mov	r1, r3
 10304be:	4663      	mov	r3, ip
 10304c0:	e000      	b.n	10304c4 <__aeabi_cdcmpeq>
 10304c2:	bf00      	nop

010304c4 <__aeabi_cdcmpeq>:
 10304c4:	b501      	push	{r0, lr}
 10304c6:	f7ff ffb7 	bl	1030438 <__cmpdf2>
 10304ca:	2800      	cmp	r0, #0
 10304cc:	bf48      	it	mi
 10304ce:	f110 0f00 	cmnmi.w	r0, #0
 10304d2:	bd01      	pop	{r0, pc}

010304d4 <__aeabi_dcmpeq>:
 10304d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 10304d8:	f7ff fff4 	bl	10304c4 <__aeabi_cdcmpeq>
 10304dc:	bf0c      	ite	eq
 10304de:	2001      	moveq	r0, #1
 10304e0:	2000      	movne	r0, #0
 10304e2:	f85d fb08 	ldr.w	pc, [sp], #8
 10304e6:	bf00      	nop

010304e8 <__aeabi_dcmplt>:
 10304e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 10304ec:	f7ff ffea 	bl	10304c4 <__aeabi_cdcmpeq>
 10304f0:	bf34      	ite	cc
 10304f2:	2001      	movcc	r0, #1
 10304f4:	2000      	movcs	r0, #0
 10304f6:	f85d fb08 	ldr.w	pc, [sp], #8
 10304fa:	bf00      	nop

010304fc <__aeabi_dcmple>:
 10304fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 1030500:	f7ff ffe0 	bl	10304c4 <__aeabi_cdcmpeq>
 1030504:	bf94      	ite	ls
 1030506:	2001      	movls	r0, #1
 1030508:	2000      	movhi	r0, #0
 103050a:	f85d fb08 	ldr.w	pc, [sp], #8
 103050e:	bf00      	nop

01030510 <__aeabi_dcmpge>:
 1030510:	f84d ed08 	str.w	lr, [sp, #-8]!
 1030514:	f7ff ffce 	bl	10304b4 <__aeabi_cdrcmple>
 1030518:	bf94      	ite	ls
 103051a:	2001      	movls	r0, #1
 103051c:	2000      	movhi	r0, #0
 103051e:	f85d fb08 	ldr.w	pc, [sp], #8
 1030522:	bf00      	nop

01030524 <__aeabi_dcmpgt>:
 1030524:	f84d ed08 	str.w	lr, [sp, #-8]!
 1030528:	f7ff ffc4 	bl	10304b4 <__aeabi_cdrcmple>
 103052c:	bf34      	ite	cc
 103052e:	2001      	movcc	r0, #1
 1030530:	2000      	movcs	r0, #0
 1030532:	f85d fb08 	ldr.w	pc, [sp], #8
 1030536:	bf00      	nop

01030538 <__aeabi_dcmpun>:
 1030538:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 103053c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 1030540:	d102      	bne.n	1030548 <__aeabi_dcmpun+0x10>
 1030542:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 1030546:	d10a      	bne.n	103055e <__aeabi_dcmpun+0x26>
 1030548:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 103054c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 1030550:	d102      	bne.n	1030558 <__aeabi_dcmpun+0x20>
 1030552:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 1030556:	d102      	bne.n	103055e <__aeabi_dcmpun+0x26>
 1030558:	f04f 0000 	mov.w	r0, #0
 103055c:	4770      	bx	lr
 103055e:	f04f 0001 	mov.w	r0, #1
 1030562:	4770      	bx	lr

01030564 <__aeabi_d2iz>:
 1030564:	ea4f 0241 	mov.w	r2, r1, lsl #1
 1030568:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 103056c:	d215      	bcs.n	103059a <__aeabi_d2iz+0x36>
 103056e:	d511      	bpl.n	1030594 <__aeabi_d2iz+0x30>
 1030570:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 1030574:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 1030578:	d912      	bls.n	10305a0 <__aeabi_d2iz+0x3c>
 103057a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 103057e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 1030582:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 1030586:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 103058a:	fa23 f002 	lsr.w	r0, r3, r2
 103058e:	bf18      	it	ne
 1030590:	4240      	negne	r0, r0
 1030592:	4770      	bx	lr
 1030594:	f04f 0000 	mov.w	r0, #0
 1030598:	4770      	bx	lr
 103059a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 103059e:	d105      	bne.n	10305ac <__aeabi_d2iz+0x48>
 10305a0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 10305a4:	bf08      	it	eq
 10305a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 10305aa:	4770      	bx	lr
 10305ac:	f04f 0000 	mov.w	r0, #0
 10305b0:	4770      	bx	lr
 10305b2:	bf00      	nop

010305b4 <__aeabi_d2uiz>:
 10305b4:	004a      	lsls	r2, r1, #1
 10305b6:	d211      	bcs.n	10305dc <__aeabi_d2uiz+0x28>
 10305b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 10305bc:	d211      	bcs.n	10305e2 <__aeabi_d2uiz+0x2e>
 10305be:	d50d      	bpl.n	10305dc <__aeabi_d2uiz+0x28>
 10305c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 10305c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 10305c8:	d40e      	bmi.n	10305e8 <__aeabi_d2uiz+0x34>
 10305ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 10305ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 10305d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 10305d6:	fa23 f002 	lsr.w	r0, r3, r2
 10305da:	4770      	bx	lr
 10305dc:	f04f 0000 	mov.w	r0, #0
 10305e0:	4770      	bx	lr
 10305e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 10305e6:	d102      	bne.n	10305ee <__aeabi_d2uiz+0x3a>
 10305e8:	f04f 30ff 	mov.w	r0, #4294967295
 10305ec:	4770      	bx	lr
 10305ee:	f04f 0000 	mov.w	r0, #0
 10305f2:	4770      	bx	lr

010305f4 <__aeabi_uldivmod>:
 10305f4:	b953      	cbnz	r3, 103060c <__aeabi_uldivmod+0x18>
 10305f6:	b94a      	cbnz	r2, 103060c <__aeabi_uldivmod+0x18>
 10305f8:	2900      	cmp	r1, #0
 10305fa:	bf08      	it	eq
 10305fc:	2800      	cmpeq	r0, #0
 10305fe:	bf1c      	itt	ne
 1030600:	f04f 31ff 	movne.w	r1, #4294967295
 1030604:	f04f 30ff 	movne.w	r0, #4294967295
 1030608:	f000 b9b8 	b.w	103097c <__aeabi_idiv0>
 103060c:	f1ad 0c08 	sub.w	ip, sp, #8
 1030610:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 1030614:	f000 f844 	bl	10306a0 <__udivmoddi4>
 1030618:	f8dd e004 	ldr.w	lr, [sp, #4]
 103061c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 1030620:	b004      	add	sp, #16
 1030622:	4770      	bx	lr

01030624 <__aeabi_d2lz>:
 1030624:	b538      	push	{r3, r4, r5, lr}
 1030626:	4605      	mov	r5, r0
 1030628:	460c      	mov	r4, r1
 103062a:	4628      	mov	r0, r5
 103062c:	4621      	mov	r1, r4
 103062e:	2200      	movs	r2, #0
 1030630:	2300      	movs	r3, #0
 1030632:	f7ff ff59 	bl	10304e8 <__aeabi_dcmplt>
 1030636:	b928      	cbnz	r0, 1030644 <__aeabi_d2lz+0x20>
 1030638:	4628      	mov	r0, r5
 103063a:	4621      	mov	r1, r4
 103063c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 1030640:	f000 b80a 	b.w	1030658 <__aeabi_d2ulz>
 1030644:	4628      	mov	r0, r5
 1030646:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 103064a:	f000 f805 	bl	1030658 <__aeabi_d2ulz>
 103064e:	4240      	negs	r0, r0
 1030650:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 1030654:	bd38      	pop	{r3, r4, r5, pc}
 1030656:	bf00      	nop

01030658 <__aeabi_d2ulz>:
 1030658:	b5d0      	push	{r4, r6, r7, lr}
 103065a:	2200      	movs	r2, #0
 103065c:	4b0e      	ldr	r3, [pc, #56]	; (1030698 <__aeabi_d2ulz+0x40>)
 103065e:	4606      	mov	r6, r0
 1030660:	460f      	mov	r7, r1
 1030662:	f7ff fccf 	bl	1030004 <__aeabi_dmul>
 1030666:	f7ff ffa5 	bl	10305b4 <__aeabi_d2uiz>
 103066a:	4604      	mov	r4, r0
 103066c:	f7ff fc54 	bl	102ff18 <__aeabi_ui2d>
 1030670:	2200      	movs	r2, #0
 1030672:	4b0a      	ldr	r3, [pc, #40]	; (103069c <__aeabi_d2ulz+0x44>)
 1030674:	f7ff fcc6 	bl	1030004 <__aeabi_dmul>
 1030678:	4602      	mov	r2, r0
 103067a:	460b      	mov	r3, r1
 103067c:	4630      	mov	r0, r6
 103067e:	4639      	mov	r1, r7
 1030680:	f7ff fb0c 	bl	102fc9c <__aeabi_dsub>
 1030684:	f7ff ff96 	bl	10305b4 <__aeabi_d2uiz>
 1030688:	4623      	mov	r3, r4
 103068a:	2200      	movs	r2, #0
 103068c:	ea42 0200 	orr.w	r2, r2, r0
 1030690:	4610      	mov	r0, r2
 1030692:	4619      	mov	r1, r3
 1030694:	bdd0      	pop	{r4, r6, r7, pc}
 1030696:	bf00      	nop
 1030698:	3df00000 	.word	0x3df00000
 103069c:	41f00000 	.word	0x41f00000

010306a0 <__udivmoddi4>:
 10306a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 10306a4:	468c      	mov	ip, r1
 10306a6:	460d      	mov	r5, r1
 10306a8:	4604      	mov	r4, r0
 10306aa:	9e08      	ldr	r6, [sp, #32]
 10306ac:	2b00      	cmp	r3, #0
 10306ae:	d151      	bne.n	1030754 <__udivmoddi4+0xb4>
 10306b0:	428a      	cmp	r2, r1
 10306b2:	4617      	mov	r7, r2
 10306b4:	d96d      	bls.n	1030792 <__udivmoddi4+0xf2>
 10306b6:	fab2 fe82 	clz	lr, r2
 10306ba:	f1be 0f00 	cmp.w	lr, #0
 10306be:	d00b      	beq.n	10306d8 <__udivmoddi4+0x38>
 10306c0:	f1ce 0c20 	rsb	ip, lr, #32
 10306c4:	fa01 f50e 	lsl.w	r5, r1, lr
 10306c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 10306cc:	fa02 f70e 	lsl.w	r7, r2, lr
 10306d0:	ea4c 0c05 	orr.w	ip, ip, r5
 10306d4:	fa00 f40e 	lsl.w	r4, r0, lr
 10306d8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 10306dc:	0c25      	lsrs	r5, r4, #16
 10306de:	fbbc f8fa 	udiv	r8, ip, sl
 10306e2:	fa1f f987 	uxth.w	r9, r7
 10306e6:	fb0a cc18 	mls	ip, sl, r8, ip
 10306ea:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 10306ee:	fb08 f309 	mul.w	r3, r8, r9
 10306f2:	42ab      	cmp	r3, r5
 10306f4:	d90a      	bls.n	103070c <__udivmoddi4+0x6c>
 10306f6:	19ed      	adds	r5, r5, r7
 10306f8:	f108 32ff 	add.w	r2, r8, #4294967295
 10306fc:	f080 8123 	bcs.w	1030946 <__udivmoddi4+0x2a6>
 1030700:	42ab      	cmp	r3, r5
 1030702:	f240 8120 	bls.w	1030946 <__udivmoddi4+0x2a6>
 1030706:	f1a8 0802 	sub.w	r8, r8, #2
 103070a:	443d      	add	r5, r7
 103070c:	1aed      	subs	r5, r5, r3
 103070e:	b2a4      	uxth	r4, r4
 1030710:	fbb5 f0fa 	udiv	r0, r5, sl
 1030714:	fb0a 5510 	mls	r5, sl, r0, r5
 1030718:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 103071c:	fb00 f909 	mul.w	r9, r0, r9
 1030720:	45a1      	cmp	r9, r4
 1030722:	d909      	bls.n	1030738 <__udivmoddi4+0x98>
 1030724:	19e4      	adds	r4, r4, r7
 1030726:	f100 33ff 	add.w	r3, r0, #4294967295
 103072a:	f080 810a 	bcs.w	1030942 <__udivmoddi4+0x2a2>
 103072e:	45a1      	cmp	r9, r4
 1030730:	f240 8107 	bls.w	1030942 <__udivmoddi4+0x2a2>
 1030734:	3802      	subs	r0, #2
 1030736:	443c      	add	r4, r7
 1030738:	eba4 0409 	sub.w	r4, r4, r9
 103073c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 1030740:	2100      	movs	r1, #0
 1030742:	2e00      	cmp	r6, #0
 1030744:	d061      	beq.n	103080a <__udivmoddi4+0x16a>
 1030746:	fa24 f40e 	lsr.w	r4, r4, lr
 103074a:	2300      	movs	r3, #0
 103074c:	6034      	str	r4, [r6, #0]
 103074e:	6073      	str	r3, [r6, #4]
 1030750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 1030754:	428b      	cmp	r3, r1
 1030756:	d907      	bls.n	1030768 <__udivmoddi4+0xc8>
 1030758:	2e00      	cmp	r6, #0
 103075a:	d054      	beq.n	1030806 <__udivmoddi4+0x166>
 103075c:	2100      	movs	r1, #0
 103075e:	e886 0021 	stmia.w	r6, {r0, r5}
 1030762:	4608      	mov	r0, r1
 1030764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 1030768:	fab3 f183 	clz	r1, r3
 103076c:	2900      	cmp	r1, #0
 103076e:	f040 808e 	bne.w	103088e <__udivmoddi4+0x1ee>
 1030772:	42ab      	cmp	r3, r5
 1030774:	d302      	bcc.n	103077c <__udivmoddi4+0xdc>
 1030776:	4282      	cmp	r2, r0
 1030778:	f200 80fa 	bhi.w	1030970 <__udivmoddi4+0x2d0>
 103077c:	1a84      	subs	r4, r0, r2
 103077e:	eb65 0503 	sbc.w	r5, r5, r3
 1030782:	2001      	movs	r0, #1
 1030784:	46ac      	mov	ip, r5
 1030786:	2e00      	cmp	r6, #0
 1030788:	d03f      	beq.n	103080a <__udivmoddi4+0x16a>
 103078a:	e886 1010 	stmia.w	r6, {r4, ip}
 103078e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 1030792:	b912      	cbnz	r2, 103079a <__udivmoddi4+0xfa>
 1030794:	2701      	movs	r7, #1
 1030796:	fbb7 f7f2 	udiv	r7, r7, r2
 103079a:	fab7 fe87 	clz	lr, r7
 103079e:	f1be 0f00 	cmp.w	lr, #0
 10307a2:	d134      	bne.n	103080e <__udivmoddi4+0x16e>
 10307a4:	1beb      	subs	r3, r5, r7
 10307a6:	0c3a      	lsrs	r2, r7, #16
 10307a8:	fa1f fc87 	uxth.w	ip, r7
 10307ac:	2101      	movs	r1, #1
 10307ae:	fbb3 f8f2 	udiv	r8, r3, r2
 10307b2:	0c25      	lsrs	r5, r4, #16
 10307b4:	fb02 3318 	mls	r3, r2, r8, r3
 10307b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 10307bc:	fb0c f308 	mul.w	r3, ip, r8
 10307c0:	42ab      	cmp	r3, r5
 10307c2:	d907      	bls.n	10307d4 <__udivmoddi4+0x134>
 10307c4:	19ed      	adds	r5, r5, r7
 10307c6:	f108 30ff 	add.w	r0, r8, #4294967295
 10307ca:	d202      	bcs.n	10307d2 <__udivmoddi4+0x132>
 10307cc:	42ab      	cmp	r3, r5
 10307ce:	f200 80d1 	bhi.w	1030974 <__udivmoddi4+0x2d4>
 10307d2:	4680      	mov	r8, r0
 10307d4:	1aed      	subs	r5, r5, r3
 10307d6:	b2a3      	uxth	r3, r4
 10307d8:	fbb5 f0f2 	udiv	r0, r5, r2
 10307dc:	fb02 5510 	mls	r5, r2, r0, r5
 10307e0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 10307e4:	fb0c fc00 	mul.w	ip, ip, r0
 10307e8:	45a4      	cmp	ip, r4
 10307ea:	d907      	bls.n	10307fc <__udivmoddi4+0x15c>
 10307ec:	19e4      	adds	r4, r4, r7
 10307ee:	f100 33ff 	add.w	r3, r0, #4294967295
 10307f2:	d202      	bcs.n	10307fa <__udivmoddi4+0x15a>
 10307f4:	45a4      	cmp	ip, r4
 10307f6:	f200 80b8 	bhi.w	103096a <__udivmoddi4+0x2ca>
 10307fa:	4618      	mov	r0, r3
 10307fc:	eba4 040c 	sub.w	r4, r4, ip
 1030800:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 1030804:	e79d      	b.n	1030742 <__udivmoddi4+0xa2>
 1030806:	4631      	mov	r1, r6
 1030808:	4630      	mov	r0, r6
 103080a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 103080e:	f1ce 0420 	rsb	r4, lr, #32
 1030812:	fa05 f30e 	lsl.w	r3, r5, lr
 1030816:	fa07 f70e 	lsl.w	r7, r7, lr
 103081a:	fa20 f804 	lsr.w	r8, r0, r4
 103081e:	0c3a      	lsrs	r2, r7, #16
 1030820:	fa25 f404 	lsr.w	r4, r5, r4
 1030824:	ea48 0803 	orr.w	r8, r8, r3
 1030828:	fbb4 f1f2 	udiv	r1, r4, r2
 103082c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 1030830:	fb02 4411 	mls	r4, r2, r1, r4
 1030834:	fa1f fc87 	uxth.w	ip, r7
 1030838:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 103083c:	fb01 f30c 	mul.w	r3, r1, ip
 1030840:	42ab      	cmp	r3, r5
 1030842:	fa00 f40e 	lsl.w	r4, r0, lr
 1030846:	d909      	bls.n	103085c <__udivmoddi4+0x1bc>
 1030848:	19ed      	adds	r5, r5, r7
 103084a:	f101 30ff 	add.w	r0, r1, #4294967295
 103084e:	f080 808a 	bcs.w	1030966 <__udivmoddi4+0x2c6>
 1030852:	42ab      	cmp	r3, r5
 1030854:	f240 8087 	bls.w	1030966 <__udivmoddi4+0x2c6>
 1030858:	3902      	subs	r1, #2
 103085a:	443d      	add	r5, r7
 103085c:	1aeb      	subs	r3, r5, r3
 103085e:	fa1f f588 	uxth.w	r5, r8
 1030862:	fbb3 f0f2 	udiv	r0, r3, r2
 1030866:	fb02 3310 	mls	r3, r2, r0, r3
 103086a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 103086e:	fb00 f30c 	mul.w	r3, r0, ip
 1030872:	42ab      	cmp	r3, r5
 1030874:	d907      	bls.n	1030886 <__udivmoddi4+0x1e6>
 1030876:	19ed      	adds	r5, r5, r7
 1030878:	f100 38ff 	add.w	r8, r0, #4294967295
 103087c:	d26f      	bcs.n	103095e <__udivmoddi4+0x2be>
 103087e:	42ab      	cmp	r3, r5
 1030880:	d96d      	bls.n	103095e <__udivmoddi4+0x2be>
 1030882:	3802      	subs	r0, #2
 1030884:	443d      	add	r5, r7
 1030886:	1aeb      	subs	r3, r5, r3
 1030888:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 103088c:	e78f      	b.n	10307ae <__udivmoddi4+0x10e>
 103088e:	f1c1 0720 	rsb	r7, r1, #32
 1030892:	fa22 f807 	lsr.w	r8, r2, r7
 1030896:	408b      	lsls	r3, r1
 1030898:	fa05 f401 	lsl.w	r4, r5, r1
 103089c:	ea48 0303 	orr.w	r3, r8, r3
 10308a0:	fa20 fe07 	lsr.w	lr, r0, r7
 10308a4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 10308a8:	40fd      	lsrs	r5, r7
 10308aa:	ea4e 0e04 	orr.w	lr, lr, r4
 10308ae:	fbb5 f9fc 	udiv	r9, r5, ip
 10308b2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 10308b6:	fb0c 5519 	mls	r5, ip, r9, r5
 10308ba:	fa1f f883 	uxth.w	r8, r3
 10308be:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 10308c2:	fb09 f408 	mul.w	r4, r9, r8
 10308c6:	42ac      	cmp	r4, r5
 10308c8:	fa02 f201 	lsl.w	r2, r2, r1
 10308cc:	fa00 fa01 	lsl.w	sl, r0, r1
 10308d0:	d908      	bls.n	10308e4 <__udivmoddi4+0x244>
 10308d2:	18ed      	adds	r5, r5, r3
 10308d4:	f109 30ff 	add.w	r0, r9, #4294967295
 10308d8:	d243      	bcs.n	1030962 <__udivmoddi4+0x2c2>
 10308da:	42ac      	cmp	r4, r5
 10308dc:	d941      	bls.n	1030962 <__udivmoddi4+0x2c2>
 10308de:	f1a9 0902 	sub.w	r9, r9, #2
 10308e2:	441d      	add	r5, r3
 10308e4:	1b2d      	subs	r5, r5, r4
 10308e6:	fa1f fe8e 	uxth.w	lr, lr
 10308ea:	fbb5 f0fc 	udiv	r0, r5, ip
 10308ee:	fb0c 5510 	mls	r5, ip, r0, r5
 10308f2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 10308f6:	fb00 f808 	mul.w	r8, r0, r8
 10308fa:	45a0      	cmp	r8, r4
 10308fc:	d907      	bls.n	103090e <__udivmoddi4+0x26e>
 10308fe:	18e4      	adds	r4, r4, r3
 1030900:	f100 35ff 	add.w	r5, r0, #4294967295
 1030904:	d229      	bcs.n	103095a <__udivmoddi4+0x2ba>
 1030906:	45a0      	cmp	r8, r4
 1030908:	d927      	bls.n	103095a <__udivmoddi4+0x2ba>
 103090a:	3802      	subs	r0, #2
 103090c:	441c      	add	r4, r3
 103090e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 1030912:	eba4 0408 	sub.w	r4, r4, r8
 1030916:	fba0 8902 	umull	r8, r9, r0, r2
 103091a:	454c      	cmp	r4, r9
 103091c:	46c6      	mov	lr, r8
 103091e:	464d      	mov	r5, r9
 1030920:	d315      	bcc.n	103094e <__udivmoddi4+0x2ae>
 1030922:	d012      	beq.n	103094a <__udivmoddi4+0x2aa>
 1030924:	b156      	cbz	r6, 103093c <__udivmoddi4+0x29c>
 1030926:	ebba 030e 	subs.w	r3, sl, lr
 103092a:	eb64 0405 	sbc.w	r4, r4, r5
 103092e:	fa04 f707 	lsl.w	r7, r4, r7
 1030932:	40cb      	lsrs	r3, r1
 1030934:	431f      	orrs	r7, r3
 1030936:	40cc      	lsrs	r4, r1
 1030938:	6037      	str	r7, [r6, #0]
 103093a:	6074      	str	r4, [r6, #4]
 103093c:	2100      	movs	r1, #0
 103093e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 1030942:	4618      	mov	r0, r3
 1030944:	e6f8      	b.n	1030738 <__udivmoddi4+0x98>
 1030946:	4690      	mov	r8, r2
 1030948:	e6e0      	b.n	103070c <__udivmoddi4+0x6c>
 103094a:	45c2      	cmp	sl, r8
 103094c:	d2ea      	bcs.n	1030924 <__udivmoddi4+0x284>
 103094e:	ebb8 0e02 	subs.w	lr, r8, r2
 1030952:	eb69 0503 	sbc.w	r5, r9, r3
 1030956:	3801      	subs	r0, #1
 1030958:	e7e4      	b.n	1030924 <__udivmoddi4+0x284>
 103095a:	4628      	mov	r0, r5
 103095c:	e7d7      	b.n	103090e <__udivmoddi4+0x26e>
 103095e:	4640      	mov	r0, r8
 1030960:	e791      	b.n	1030886 <__udivmoddi4+0x1e6>
 1030962:	4681      	mov	r9, r0
 1030964:	e7be      	b.n	10308e4 <__udivmoddi4+0x244>
 1030966:	4601      	mov	r1, r0
 1030968:	e778      	b.n	103085c <__udivmoddi4+0x1bc>
 103096a:	3802      	subs	r0, #2
 103096c:	443c      	add	r4, r7
 103096e:	e745      	b.n	10307fc <__udivmoddi4+0x15c>
 1030970:	4608      	mov	r0, r1
 1030972:	e708      	b.n	1030786 <__udivmoddi4+0xe6>
 1030974:	f1a8 0802 	sub.w	r8, r8, #2
 1030978:	443d      	add	r5, r7
 103097a:	e72b      	b.n	10307d4 <__udivmoddi4+0x134>

0103097c <__aeabi_idiv0>:
 103097c:	4770      	bx	lr
 103097e:	bf00      	nop

01030980 <__errno>:
 1030980:	4b01      	ldr	r3, [pc, #4]	; (1030988 <__errno+0x8>)
 1030982:	6818      	ldr	r0, [r3, #0]
 1030984:	4770      	bx	lr
 1030986:	bf00      	nop
 1030988:	200000a0 	.word	0x200000a0

0103098c <__libc_init_array>:
 103098c:	b570      	push	{r4, r5, r6, lr}
 103098e:	4e0f      	ldr	r6, [pc, #60]	; (10309cc <__libc_init_array+0x40>)
 1030990:	4d0f      	ldr	r5, [pc, #60]	; (10309d0 <__libc_init_array+0x44>)
 1030992:	1b76      	subs	r6, r6, r5
 1030994:	10b6      	asrs	r6, r6, #2
 1030996:	bf18      	it	ne
 1030998:	2400      	movne	r4, #0
 103099a:	d005      	beq.n	10309a8 <__libc_init_array+0x1c>
 103099c:	3401      	adds	r4, #1
 103099e:	f855 3b04 	ldr.w	r3, [r5], #4
 10309a2:	4798      	blx	r3
 10309a4:	42a6      	cmp	r6, r4
 10309a6:	d1f9      	bne.n	103099c <__libc_init_array+0x10>
 10309a8:	4e0a      	ldr	r6, [pc, #40]	; (10309d4 <__libc_init_array+0x48>)
 10309aa:	4d0b      	ldr	r5, [pc, #44]	; (10309d8 <__libc_init_array+0x4c>)
 10309ac:	1b76      	subs	r6, r6, r5
 10309ae:	f008 f9b5 	bl	1038d1c <_init>
 10309b2:	10b6      	asrs	r6, r6, #2
 10309b4:	bf18      	it	ne
 10309b6:	2400      	movne	r4, #0
 10309b8:	d006      	beq.n	10309c8 <__libc_init_array+0x3c>
 10309ba:	3401      	adds	r4, #1
 10309bc:	f855 3b04 	ldr.w	r3, [r5], #4
 10309c0:	4798      	blx	r3
 10309c2:	42a6      	cmp	r6, r4
 10309c4:	d1f9      	bne.n	10309ba <__libc_init_array+0x2e>
 10309c6:	bd70      	pop	{r4, r5, r6, pc}
 10309c8:	bd70      	pop	{r4, r5, r6, pc}
 10309ca:	bf00      	nop
 10309cc:	01038d28 	.word	0x01038d28
 10309d0:	01038d28 	.word	0x01038d28
 10309d4:	01038d30 	.word	0x01038d30
 10309d8:	01038d28 	.word	0x01038d28

010309dc <memcmp>:
 10309dc:	2a03      	cmp	r2, #3
 10309de:	b470      	push	{r4, r5, r6}
 10309e0:	d922      	bls.n	1030a28 <memcmp+0x4c>
 10309e2:	ea40 0301 	orr.w	r3, r0, r1
 10309e6:	079b      	lsls	r3, r3, #30
 10309e8:	d011      	beq.n	1030a0e <memcmp+0x32>
 10309ea:	7803      	ldrb	r3, [r0, #0]
 10309ec:	780c      	ldrb	r4, [r1, #0]
 10309ee:	42a3      	cmp	r3, r4
 10309f0:	d11d      	bne.n	1030a2e <memcmp+0x52>
 10309f2:	440a      	add	r2, r1
 10309f4:	3101      	adds	r1, #1
 10309f6:	e005      	b.n	1030a04 <memcmp+0x28>
 10309f8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 10309fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 1030a00:	42a3      	cmp	r3, r4
 1030a02:	d114      	bne.n	1030a2e <memcmp+0x52>
 1030a04:	4291      	cmp	r1, r2
 1030a06:	d1f7      	bne.n	10309f8 <memcmp+0x1c>
 1030a08:	2000      	movs	r0, #0
 1030a0a:	bc70      	pop	{r4, r5, r6}
 1030a0c:	4770      	bx	lr
 1030a0e:	680d      	ldr	r5, [r1, #0]
 1030a10:	6806      	ldr	r6, [r0, #0]
 1030a12:	42ae      	cmp	r6, r5
 1030a14:	460c      	mov	r4, r1
 1030a16:	4603      	mov	r3, r0
 1030a18:	f101 0104 	add.w	r1, r1, #4
 1030a1c:	f100 0004 	add.w	r0, r0, #4
 1030a20:	d108      	bne.n	1030a34 <memcmp+0x58>
 1030a22:	3a04      	subs	r2, #4
 1030a24:	2a03      	cmp	r2, #3
 1030a26:	d8f2      	bhi.n	1030a0e <memcmp+0x32>
 1030a28:	2a00      	cmp	r2, #0
 1030a2a:	d1de      	bne.n	10309ea <memcmp+0xe>
 1030a2c:	e7ec      	b.n	1030a08 <memcmp+0x2c>
 1030a2e:	1b18      	subs	r0, r3, r4
 1030a30:	bc70      	pop	{r4, r5, r6}
 1030a32:	4770      	bx	lr
 1030a34:	4621      	mov	r1, r4
 1030a36:	4618      	mov	r0, r3
 1030a38:	e7d7      	b.n	10309ea <memcmp+0xe>
 1030a3a:	bf00      	nop

01030a3c <memcpy>:
 1030a3c:	4684      	mov	ip, r0
 1030a3e:	ea41 0300 	orr.w	r3, r1, r0
 1030a42:	f013 0303 	ands.w	r3, r3, #3
 1030a46:	d16d      	bne.n	1030b24 <memcpy+0xe8>
 1030a48:	3a40      	subs	r2, #64	; 0x40
 1030a4a:	d341      	bcc.n	1030ad0 <memcpy+0x94>
 1030a4c:	f851 3b04 	ldr.w	r3, [r1], #4
 1030a50:	f840 3b04 	str.w	r3, [r0], #4
 1030a54:	f851 3b04 	ldr.w	r3, [r1], #4
 1030a58:	f840 3b04 	str.w	r3, [r0], #4
 1030a5c:	f851 3b04 	ldr.w	r3, [r1], #4
 1030a60:	f840 3b04 	str.w	r3, [r0], #4
 1030a64:	f851 3b04 	ldr.w	r3, [r1], #4
 1030a68:	f840 3b04 	str.w	r3, [r0], #4
 1030a6c:	f851 3b04 	ldr.w	r3, [r1], #4
 1030a70:	f840 3b04 	str.w	r3, [r0], #4
 1030a74:	f851 3b04 	ldr.w	r3, [r1], #4
 1030a78:	f840 3b04 	str.w	r3, [r0], #4
 1030a7c:	f851 3b04 	ldr.w	r3, [r1], #4
 1030a80:	f840 3b04 	str.w	r3, [r0], #4
 1030a84:	f851 3b04 	ldr.w	r3, [r1], #4
 1030a88:	f840 3b04 	str.w	r3, [r0], #4
 1030a8c:	f851 3b04 	ldr.w	r3, [r1], #4
 1030a90:	f840 3b04 	str.w	r3, [r0], #4
 1030a94:	f851 3b04 	ldr.w	r3, [r1], #4
 1030a98:	f840 3b04 	str.w	r3, [r0], #4
 1030a9c:	f851 3b04 	ldr.w	r3, [r1], #4
 1030aa0:	f840 3b04 	str.w	r3, [r0], #4
 1030aa4:	f851 3b04 	ldr.w	r3, [r1], #4
 1030aa8:	f840 3b04 	str.w	r3, [r0], #4
 1030aac:	f851 3b04 	ldr.w	r3, [r1], #4
 1030ab0:	f840 3b04 	str.w	r3, [r0], #4
 1030ab4:	f851 3b04 	ldr.w	r3, [r1], #4
 1030ab8:	f840 3b04 	str.w	r3, [r0], #4
 1030abc:	f851 3b04 	ldr.w	r3, [r1], #4
 1030ac0:	f840 3b04 	str.w	r3, [r0], #4
 1030ac4:	f851 3b04 	ldr.w	r3, [r1], #4
 1030ac8:	f840 3b04 	str.w	r3, [r0], #4
 1030acc:	3a40      	subs	r2, #64	; 0x40
 1030ace:	d2bd      	bcs.n	1030a4c <memcpy+0x10>
 1030ad0:	3230      	adds	r2, #48	; 0x30
 1030ad2:	d311      	bcc.n	1030af8 <memcpy+0xbc>
 1030ad4:	f851 3b04 	ldr.w	r3, [r1], #4
 1030ad8:	f840 3b04 	str.w	r3, [r0], #4
 1030adc:	f851 3b04 	ldr.w	r3, [r1], #4
 1030ae0:	f840 3b04 	str.w	r3, [r0], #4
 1030ae4:	f851 3b04 	ldr.w	r3, [r1], #4
 1030ae8:	f840 3b04 	str.w	r3, [r0], #4
 1030aec:	f851 3b04 	ldr.w	r3, [r1], #4
 1030af0:	f840 3b04 	str.w	r3, [r0], #4
 1030af4:	3a10      	subs	r2, #16
 1030af6:	d2ed      	bcs.n	1030ad4 <memcpy+0x98>
 1030af8:	320c      	adds	r2, #12
 1030afa:	d305      	bcc.n	1030b08 <memcpy+0xcc>
 1030afc:	f851 3b04 	ldr.w	r3, [r1], #4
 1030b00:	f840 3b04 	str.w	r3, [r0], #4
 1030b04:	3a04      	subs	r2, #4
 1030b06:	d2f9      	bcs.n	1030afc <memcpy+0xc0>
 1030b08:	3204      	adds	r2, #4
 1030b0a:	d008      	beq.n	1030b1e <memcpy+0xe2>
 1030b0c:	07d2      	lsls	r2, r2, #31
 1030b0e:	bf1c      	itt	ne
 1030b10:	f811 3b01 	ldrbne.w	r3, [r1], #1
 1030b14:	f800 3b01 	strbne.w	r3, [r0], #1
 1030b18:	d301      	bcc.n	1030b1e <memcpy+0xe2>
 1030b1a:	880b      	ldrh	r3, [r1, #0]
 1030b1c:	8003      	strh	r3, [r0, #0]
 1030b1e:	4660      	mov	r0, ip
 1030b20:	4770      	bx	lr
 1030b22:	bf00      	nop
 1030b24:	2a08      	cmp	r2, #8
 1030b26:	d313      	bcc.n	1030b50 <memcpy+0x114>
 1030b28:	078b      	lsls	r3, r1, #30
 1030b2a:	d08d      	beq.n	1030a48 <memcpy+0xc>
 1030b2c:	f010 0303 	ands.w	r3, r0, #3
 1030b30:	d08a      	beq.n	1030a48 <memcpy+0xc>
 1030b32:	f1c3 0304 	rsb	r3, r3, #4
 1030b36:	1ad2      	subs	r2, r2, r3
 1030b38:	07db      	lsls	r3, r3, #31
 1030b3a:	bf1c      	itt	ne
 1030b3c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 1030b40:	f800 3b01 	strbne.w	r3, [r0], #1
 1030b44:	d380      	bcc.n	1030a48 <memcpy+0xc>
 1030b46:	f831 3b02 	ldrh.w	r3, [r1], #2
 1030b4a:	f820 3b02 	strh.w	r3, [r0], #2
 1030b4e:	e77b      	b.n	1030a48 <memcpy+0xc>
 1030b50:	3a04      	subs	r2, #4
 1030b52:	d3d9      	bcc.n	1030b08 <memcpy+0xcc>
 1030b54:	3a01      	subs	r2, #1
 1030b56:	f811 3b01 	ldrb.w	r3, [r1], #1
 1030b5a:	f800 3b01 	strb.w	r3, [r0], #1
 1030b5e:	d2f9      	bcs.n	1030b54 <memcpy+0x118>
 1030b60:	780b      	ldrb	r3, [r1, #0]
 1030b62:	7003      	strb	r3, [r0, #0]
 1030b64:	784b      	ldrb	r3, [r1, #1]
 1030b66:	7043      	strb	r3, [r0, #1]
 1030b68:	788b      	ldrb	r3, [r1, #2]
 1030b6a:	7083      	strb	r3, [r0, #2]
 1030b6c:	4660      	mov	r0, ip
 1030b6e:	4770      	bx	lr

01030b70 <memset>:
 1030b70:	b470      	push	{r4, r5, r6}
 1030b72:	0786      	lsls	r6, r0, #30
 1030b74:	d046      	beq.n	1030c04 <memset+0x94>
 1030b76:	1e54      	subs	r4, r2, #1
 1030b78:	2a00      	cmp	r2, #0
 1030b7a:	d041      	beq.n	1030c00 <memset+0x90>
 1030b7c:	b2ca      	uxtb	r2, r1
 1030b7e:	4603      	mov	r3, r0
 1030b80:	e002      	b.n	1030b88 <memset+0x18>
 1030b82:	f114 34ff 	adds.w	r4, r4, #4294967295
 1030b86:	d33b      	bcc.n	1030c00 <memset+0x90>
 1030b88:	f803 2b01 	strb.w	r2, [r3], #1
 1030b8c:	079d      	lsls	r5, r3, #30
 1030b8e:	d1f8      	bne.n	1030b82 <memset+0x12>
 1030b90:	2c03      	cmp	r4, #3
 1030b92:	d92e      	bls.n	1030bf2 <memset+0x82>
 1030b94:	b2cd      	uxtb	r5, r1
 1030b96:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 1030b9a:	2c0f      	cmp	r4, #15
 1030b9c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 1030ba0:	d919      	bls.n	1030bd6 <memset+0x66>
 1030ba2:	f103 0210 	add.w	r2, r3, #16
 1030ba6:	4626      	mov	r6, r4
 1030ba8:	3e10      	subs	r6, #16
 1030baa:	2e0f      	cmp	r6, #15
 1030bac:	f842 5c10 	str.w	r5, [r2, #-16]
 1030bb0:	f842 5c0c 	str.w	r5, [r2, #-12]
 1030bb4:	f842 5c08 	str.w	r5, [r2, #-8]
 1030bb8:	f842 5c04 	str.w	r5, [r2, #-4]
 1030bbc:	f102 0210 	add.w	r2, r2, #16
 1030bc0:	d8f2      	bhi.n	1030ba8 <memset+0x38>
 1030bc2:	f1a4 0210 	sub.w	r2, r4, #16
 1030bc6:	f022 020f 	bic.w	r2, r2, #15
 1030bca:	f004 040f 	and.w	r4, r4, #15
 1030bce:	3210      	adds	r2, #16
 1030bd0:	2c03      	cmp	r4, #3
 1030bd2:	4413      	add	r3, r2
 1030bd4:	d90d      	bls.n	1030bf2 <memset+0x82>
 1030bd6:	461e      	mov	r6, r3
 1030bd8:	4622      	mov	r2, r4
 1030bda:	3a04      	subs	r2, #4
 1030bdc:	2a03      	cmp	r2, #3
 1030bde:	f846 5b04 	str.w	r5, [r6], #4
 1030be2:	d8fa      	bhi.n	1030bda <memset+0x6a>
 1030be4:	1f22      	subs	r2, r4, #4
 1030be6:	f022 0203 	bic.w	r2, r2, #3
 1030bea:	3204      	adds	r2, #4
 1030bec:	4413      	add	r3, r2
 1030bee:	f004 0403 	and.w	r4, r4, #3
 1030bf2:	b12c      	cbz	r4, 1030c00 <memset+0x90>
 1030bf4:	b2c9      	uxtb	r1, r1
 1030bf6:	441c      	add	r4, r3
 1030bf8:	f803 1b01 	strb.w	r1, [r3], #1
 1030bfc:	429c      	cmp	r4, r3
 1030bfe:	d1fb      	bne.n	1030bf8 <memset+0x88>
 1030c00:	bc70      	pop	{r4, r5, r6}
 1030c02:	4770      	bx	lr
 1030c04:	4614      	mov	r4, r2
 1030c06:	4603      	mov	r3, r0
 1030c08:	e7c2      	b.n	1030b90 <memset+0x20>
 1030c0a:	bf00      	nop

01030c0c <strncpy>:
 1030c0c:	ea40 0301 	orr.w	r3, r0, r1
 1030c10:	f013 0f03 	tst.w	r3, #3
 1030c14:	b470      	push	{r4, r5, r6}
 1030c16:	4603      	mov	r3, r0
 1030c18:	d024      	beq.n	1030c64 <strncpy+0x58>
 1030c1a:	b1a2      	cbz	r2, 1030c46 <strncpy+0x3a>
 1030c1c:	780c      	ldrb	r4, [r1, #0]
 1030c1e:	701c      	strb	r4, [r3, #0]
 1030c20:	3a01      	subs	r2, #1
 1030c22:	3301      	adds	r3, #1
 1030c24:	3101      	adds	r1, #1
 1030c26:	b13c      	cbz	r4, 1030c38 <strncpy+0x2c>
 1030c28:	b16a      	cbz	r2, 1030c46 <strncpy+0x3a>
 1030c2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 1030c2e:	f803 4b01 	strb.w	r4, [r3], #1
 1030c32:	3a01      	subs	r2, #1
 1030c34:	2c00      	cmp	r4, #0
 1030c36:	d1f7      	bne.n	1030c28 <strncpy+0x1c>
 1030c38:	b12a      	cbz	r2, 1030c46 <strncpy+0x3a>
 1030c3a:	441a      	add	r2, r3
 1030c3c:	2100      	movs	r1, #0
 1030c3e:	f803 1b01 	strb.w	r1, [r3], #1
 1030c42:	429a      	cmp	r2, r3
 1030c44:	d1fb      	bne.n	1030c3e <strncpy+0x32>
 1030c46:	bc70      	pop	{r4, r5, r6}
 1030c48:	4770      	bx	lr
 1030c4a:	460e      	mov	r6, r1
 1030c4c:	f851 5b04 	ldr.w	r5, [r1], #4
 1030c50:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
 1030c54:	ea24 0405 	bic.w	r4, r4, r5
 1030c58:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 1030c5c:	d105      	bne.n	1030c6a <strncpy+0x5e>
 1030c5e:	f843 5b04 	str.w	r5, [r3], #4
 1030c62:	3a04      	subs	r2, #4
 1030c64:	2a03      	cmp	r2, #3
 1030c66:	d8f0      	bhi.n	1030c4a <strncpy+0x3e>
 1030c68:	e7d7      	b.n	1030c1a <strncpy+0xe>
 1030c6a:	4631      	mov	r1, r6
 1030c6c:	e7d6      	b.n	1030c1c <strncpy+0x10>
 1030c6e:	bf00      	nop

01030c70 <register_fini>:
 1030c70:	4b02      	ldr	r3, [pc, #8]	; (1030c7c <register_fini+0xc>)
 1030c72:	b113      	cbz	r3, 1030c7a <register_fini+0xa>
 1030c74:	4802      	ldr	r0, [pc, #8]	; (1030c80 <register_fini+0x10>)
 1030c76:	f000 b805 	b.w	1030c84 <atexit>
 1030c7a:	4770      	bx	lr
 1030c7c:	00000000 	.word	0x00000000
 1030c80:	01030c91 	.word	0x01030c91

01030c84 <atexit>:
 1030c84:	2300      	movs	r3, #0
 1030c86:	4601      	mov	r1, r0
 1030c88:	461a      	mov	r2, r3
 1030c8a:	4618      	mov	r0, r3
 1030c8c:	f000 bc1e 	b.w	10314cc <__register_exitproc>

01030c90 <__libc_fini_array>:
 1030c90:	b538      	push	{r3, r4, r5, lr}
 1030c92:	4c0a      	ldr	r4, [pc, #40]	; (1030cbc <__libc_fini_array+0x2c>)
 1030c94:	4d0a      	ldr	r5, [pc, #40]	; (1030cc0 <__libc_fini_array+0x30>)
 1030c96:	1b64      	subs	r4, r4, r5
 1030c98:	10a4      	asrs	r4, r4, #2
 1030c9a:	d00a      	beq.n	1030cb2 <__libc_fini_array+0x22>
 1030c9c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 1030ca0:	3b01      	subs	r3, #1
 1030ca2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 1030ca6:	3c01      	subs	r4, #1
 1030ca8:	f855 3904 	ldr.w	r3, [r5], #-4
 1030cac:	4798      	blx	r3
 1030cae:	2c00      	cmp	r4, #0
 1030cb0:	d1f9      	bne.n	1030ca6 <__libc_fini_array+0x16>
 1030cb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 1030cb6:	f008 b83b 	b.w	1038d30 <_fini>
 1030cba:	bf00      	nop
 1030cbc:	01038d40 	.word	0x01038d40
 1030cc0:	01038d3c 	.word	0x01038d3c

01030cc4 <_malloc_trim_r>:
 1030cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 1030cc6:	4f24      	ldr	r7, [pc, #144]	; (1030d58 <_malloc_trim_r+0x94>)
 1030cc8:	460c      	mov	r4, r1
 1030cca:	4606      	mov	r6, r0
 1030ccc:	f000 fbe8 	bl	10314a0 <__malloc_lock>
 1030cd0:	68bb      	ldr	r3, [r7, #8]
 1030cd2:	685d      	ldr	r5, [r3, #4]
 1030cd4:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
 1030cd8:	310f      	adds	r1, #15
 1030cda:	f025 0503 	bic.w	r5, r5, #3
 1030cde:	4429      	add	r1, r5
 1030ce0:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 1030ce4:	f021 010f 	bic.w	r1, r1, #15
 1030ce8:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 1030cec:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 1030cf0:	db07      	blt.n	1030d02 <_malloc_trim_r+0x3e>
 1030cf2:	2100      	movs	r1, #0
 1030cf4:	4630      	mov	r0, r6
 1030cf6:	f000 fbd7 	bl	10314a8 <_sbrk_r>
 1030cfa:	68bb      	ldr	r3, [r7, #8]
 1030cfc:	442b      	add	r3, r5
 1030cfe:	4298      	cmp	r0, r3
 1030d00:	d004      	beq.n	1030d0c <_malloc_trim_r+0x48>
 1030d02:	4630      	mov	r0, r6
 1030d04:	f000 fbce 	bl	10314a4 <__malloc_unlock>
 1030d08:	2000      	movs	r0, #0
 1030d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 1030d0c:	4261      	negs	r1, r4
 1030d0e:	4630      	mov	r0, r6
 1030d10:	f000 fbca 	bl	10314a8 <_sbrk_r>
 1030d14:	3001      	adds	r0, #1
 1030d16:	d00d      	beq.n	1030d34 <_malloc_trim_r+0x70>
 1030d18:	4b10      	ldr	r3, [pc, #64]	; (1030d5c <_malloc_trim_r+0x98>)
 1030d1a:	68ba      	ldr	r2, [r7, #8]
 1030d1c:	6819      	ldr	r1, [r3, #0]
 1030d1e:	1b2d      	subs	r5, r5, r4
 1030d20:	f045 0501 	orr.w	r5, r5, #1
 1030d24:	4630      	mov	r0, r6
 1030d26:	1b09      	subs	r1, r1, r4
 1030d28:	6055      	str	r5, [r2, #4]
 1030d2a:	6019      	str	r1, [r3, #0]
 1030d2c:	f000 fbba 	bl	10314a4 <__malloc_unlock>
 1030d30:	2001      	movs	r0, #1
 1030d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 1030d34:	2100      	movs	r1, #0
 1030d36:	4630      	mov	r0, r6
 1030d38:	f000 fbb6 	bl	10314a8 <_sbrk_r>
 1030d3c:	68ba      	ldr	r2, [r7, #8]
 1030d3e:	1a83      	subs	r3, r0, r2
 1030d40:	2b0f      	cmp	r3, #15
 1030d42:	ddde      	ble.n	1030d02 <_malloc_trim_r+0x3e>
 1030d44:	4c06      	ldr	r4, [pc, #24]	; (1030d60 <_malloc_trim_r+0x9c>)
 1030d46:	4905      	ldr	r1, [pc, #20]	; (1030d5c <_malloc_trim_r+0x98>)
 1030d48:	6824      	ldr	r4, [r4, #0]
 1030d4a:	f043 0301 	orr.w	r3, r3, #1
 1030d4e:	1b00      	subs	r0, r0, r4
 1030d50:	6053      	str	r3, [r2, #4]
 1030d52:	6008      	str	r0, [r1, #0]
 1030d54:	e7d5      	b.n	1030d02 <_malloc_trim_r+0x3e>
 1030d56:	bf00      	nop
 1030d58:	200004d0 	.word	0x200004d0
 1030d5c:	20010618 	.word	0x20010618
 1030d60:	200008d8 	.word	0x200008d8

01030d64 <_free_r>:
 1030d64:	2900      	cmp	r1, #0
 1030d66:	d044      	beq.n	1030df2 <_free_r+0x8e>
 1030d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1030d6c:	460d      	mov	r5, r1
 1030d6e:	4680      	mov	r8, r0
 1030d70:	f000 fb96 	bl	10314a0 <__malloc_lock>
 1030d74:	f855 7c04 	ldr.w	r7, [r5, #-4]
 1030d78:	4969      	ldr	r1, [pc, #420]	; (1030f20 <_free_r+0x1bc>)
 1030d7a:	f027 0301 	bic.w	r3, r7, #1
 1030d7e:	f1a5 0408 	sub.w	r4, r5, #8
 1030d82:	18e2      	adds	r2, r4, r3
 1030d84:	688e      	ldr	r6, [r1, #8]
 1030d86:	6850      	ldr	r0, [r2, #4]
 1030d88:	42b2      	cmp	r2, r6
 1030d8a:	f020 0003 	bic.w	r0, r0, #3
 1030d8e:	d05e      	beq.n	1030e4e <_free_r+0xea>
 1030d90:	07fe      	lsls	r6, r7, #31
 1030d92:	6050      	str	r0, [r2, #4]
 1030d94:	d40b      	bmi.n	1030dae <_free_r+0x4a>
 1030d96:	f855 7c08 	ldr.w	r7, [r5, #-8]
 1030d9a:	1be4      	subs	r4, r4, r7
 1030d9c:	f101 0e08 	add.w	lr, r1, #8
 1030da0:	68a5      	ldr	r5, [r4, #8]
 1030da2:	4575      	cmp	r5, lr
 1030da4:	443b      	add	r3, r7
 1030da6:	d06d      	beq.n	1030e84 <_free_r+0x120>
 1030da8:	68e7      	ldr	r7, [r4, #12]
 1030daa:	60ef      	str	r7, [r5, #12]
 1030dac:	60bd      	str	r5, [r7, #8]
 1030dae:	1815      	adds	r5, r2, r0
 1030db0:	686d      	ldr	r5, [r5, #4]
 1030db2:	07ed      	lsls	r5, r5, #31
 1030db4:	d53e      	bpl.n	1030e34 <_free_r+0xd0>
 1030db6:	f043 0201 	orr.w	r2, r3, #1
 1030dba:	6062      	str	r2, [r4, #4]
 1030dbc:	50e3      	str	r3, [r4, r3]
 1030dbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 1030dc2:	d217      	bcs.n	1030df4 <_free_r+0x90>
 1030dc4:	08db      	lsrs	r3, r3, #3
 1030dc6:	1c58      	adds	r0, r3, #1
 1030dc8:	109a      	asrs	r2, r3, #2
 1030dca:	684d      	ldr	r5, [r1, #4]
 1030dcc:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
 1030dd0:	60a7      	str	r7, [r4, #8]
 1030dd2:	2301      	movs	r3, #1
 1030dd4:	4093      	lsls	r3, r2
 1030dd6:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
 1030dda:	432b      	orrs	r3, r5
 1030ddc:	3a08      	subs	r2, #8
 1030dde:	60e2      	str	r2, [r4, #12]
 1030de0:	604b      	str	r3, [r1, #4]
 1030de2:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
 1030de6:	60fc      	str	r4, [r7, #12]
 1030de8:	4640      	mov	r0, r8
 1030dea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 1030dee:	f000 bb59 	b.w	10314a4 <__malloc_unlock>
 1030df2:	4770      	bx	lr
 1030df4:	0a5a      	lsrs	r2, r3, #9
 1030df6:	2a04      	cmp	r2, #4
 1030df8:	d852      	bhi.n	1030ea0 <_free_r+0x13c>
 1030dfa:	099a      	lsrs	r2, r3, #6
 1030dfc:	f102 0739 	add.w	r7, r2, #57	; 0x39
 1030e00:	00ff      	lsls	r7, r7, #3
 1030e02:	f102 0538 	add.w	r5, r2, #56	; 0x38
 1030e06:	19c8      	adds	r0, r1, r7
 1030e08:	59ca      	ldr	r2, [r1, r7]
 1030e0a:	3808      	subs	r0, #8
 1030e0c:	4290      	cmp	r0, r2
 1030e0e:	d04f      	beq.n	1030eb0 <_free_r+0x14c>
 1030e10:	6851      	ldr	r1, [r2, #4]
 1030e12:	f021 0103 	bic.w	r1, r1, #3
 1030e16:	428b      	cmp	r3, r1
 1030e18:	d232      	bcs.n	1030e80 <_free_r+0x11c>
 1030e1a:	6892      	ldr	r2, [r2, #8]
 1030e1c:	4290      	cmp	r0, r2
 1030e1e:	d1f7      	bne.n	1030e10 <_free_r+0xac>
 1030e20:	68c3      	ldr	r3, [r0, #12]
 1030e22:	60a0      	str	r0, [r4, #8]
 1030e24:	60e3      	str	r3, [r4, #12]
 1030e26:	609c      	str	r4, [r3, #8]
 1030e28:	60c4      	str	r4, [r0, #12]
 1030e2a:	4640      	mov	r0, r8
 1030e2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 1030e30:	f000 bb38 	b.w	10314a4 <__malloc_unlock>
 1030e34:	6895      	ldr	r5, [r2, #8]
 1030e36:	4f3b      	ldr	r7, [pc, #236]	; (1030f24 <_free_r+0x1c0>)
 1030e38:	42bd      	cmp	r5, r7
 1030e3a:	4403      	add	r3, r0
 1030e3c:	d040      	beq.n	1030ec0 <_free_r+0x15c>
 1030e3e:	68d0      	ldr	r0, [r2, #12]
 1030e40:	60e8      	str	r0, [r5, #12]
 1030e42:	f043 0201 	orr.w	r2, r3, #1
 1030e46:	6085      	str	r5, [r0, #8]
 1030e48:	6062      	str	r2, [r4, #4]
 1030e4a:	50e3      	str	r3, [r4, r3]
 1030e4c:	e7b7      	b.n	1030dbe <_free_r+0x5a>
 1030e4e:	07ff      	lsls	r7, r7, #31
 1030e50:	4403      	add	r3, r0
 1030e52:	d407      	bmi.n	1030e64 <_free_r+0x100>
 1030e54:	f855 2c08 	ldr.w	r2, [r5, #-8]
 1030e58:	1aa4      	subs	r4, r4, r2
 1030e5a:	4413      	add	r3, r2
 1030e5c:	68a0      	ldr	r0, [r4, #8]
 1030e5e:	68e2      	ldr	r2, [r4, #12]
 1030e60:	60c2      	str	r2, [r0, #12]
 1030e62:	6090      	str	r0, [r2, #8]
 1030e64:	4a30      	ldr	r2, [pc, #192]	; (1030f28 <_free_r+0x1c4>)
 1030e66:	6812      	ldr	r2, [r2, #0]
 1030e68:	f043 0001 	orr.w	r0, r3, #1
 1030e6c:	4293      	cmp	r3, r2
 1030e6e:	6060      	str	r0, [r4, #4]
 1030e70:	608c      	str	r4, [r1, #8]
 1030e72:	d3b9      	bcc.n	1030de8 <_free_r+0x84>
 1030e74:	4b2d      	ldr	r3, [pc, #180]	; (1030f2c <_free_r+0x1c8>)
 1030e76:	4640      	mov	r0, r8
 1030e78:	6819      	ldr	r1, [r3, #0]
 1030e7a:	f7ff ff23 	bl	1030cc4 <_malloc_trim_r>
 1030e7e:	e7b3      	b.n	1030de8 <_free_r+0x84>
 1030e80:	4610      	mov	r0, r2
 1030e82:	e7cd      	b.n	1030e20 <_free_r+0xbc>
 1030e84:	1811      	adds	r1, r2, r0
 1030e86:	6849      	ldr	r1, [r1, #4]
 1030e88:	07c9      	lsls	r1, r1, #31
 1030e8a:	d444      	bmi.n	1030f16 <_free_r+0x1b2>
 1030e8c:	6891      	ldr	r1, [r2, #8]
 1030e8e:	68d2      	ldr	r2, [r2, #12]
 1030e90:	60ca      	str	r2, [r1, #12]
 1030e92:	4403      	add	r3, r0
 1030e94:	f043 0001 	orr.w	r0, r3, #1
 1030e98:	6091      	str	r1, [r2, #8]
 1030e9a:	6060      	str	r0, [r4, #4]
 1030e9c:	50e3      	str	r3, [r4, r3]
 1030e9e:	e7a3      	b.n	1030de8 <_free_r+0x84>
 1030ea0:	2a14      	cmp	r2, #20
 1030ea2:	d816      	bhi.n	1030ed2 <_free_r+0x16e>
 1030ea4:	f102 075c 	add.w	r7, r2, #92	; 0x5c
 1030ea8:	00ff      	lsls	r7, r7, #3
 1030eaa:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 1030eae:	e7aa      	b.n	1030e06 <_free_r+0xa2>
 1030eb0:	10aa      	asrs	r2, r5, #2
 1030eb2:	2301      	movs	r3, #1
 1030eb4:	684d      	ldr	r5, [r1, #4]
 1030eb6:	4093      	lsls	r3, r2
 1030eb8:	432b      	orrs	r3, r5
 1030eba:	604b      	str	r3, [r1, #4]
 1030ebc:	4603      	mov	r3, r0
 1030ebe:	e7b0      	b.n	1030e22 <_free_r+0xbe>
 1030ec0:	f043 0201 	orr.w	r2, r3, #1
 1030ec4:	614c      	str	r4, [r1, #20]
 1030ec6:	610c      	str	r4, [r1, #16]
 1030ec8:	60e5      	str	r5, [r4, #12]
 1030eca:	60a5      	str	r5, [r4, #8]
 1030ecc:	6062      	str	r2, [r4, #4]
 1030ece:	50e3      	str	r3, [r4, r3]
 1030ed0:	e78a      	b.n	1030de8 <_free_r+0x84>
 1030ed2:	2a54      	cmp	r2, #84	; 0x54
 1030ed4:	d806      	bhi.n	1030ee4 <_free_r+0x180>
 1030ed6:	0b1a      	lsrs	r2, r3, #12
 1030ed8:	f102 076f 	add.w	r7, r2, #111	; 0x6f
 1030edc:	00ff      	lsls	r7, r7, #3
 1030ede:	f102 056e 	add.w	r5, r2, #110	; 0x6e
 1030ee2:	e790      	b.n	1030e06 <_free_r+0xa2>
 1030ee4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 1030ee8:	d806      	bhi.n	1030ef8 <_free_r+0x194>
 1030eea:	0bda      	lsrs	r2, r3, #15
 1030eec:	f102 0778 	add.w	r7, r2, #120	; 0x78
 1030ef0:	00ff      	lsls	r7, r7, #3
 1030ef2:	f102 0577 	add.w	r5, r2, #119	; 0x77
 1030ef6:	e786      	b.n	1030e06 <_free_r+0xa2>
 1030ef8:	f240 5054 	movw	r0, #1364	; 0x554
 1030efc:	4282      	cmp	r2, r0
 1030efe:	d806      	bhi.n	1030f0e <_free_r+0x1aa>
 1030f00:	0c9a      	lsrs	r2, r3, #18
 1030f02:	f102 077d 	add.w	r7, r2, #125	; 0x7d
 1030f06:	00ff      	lsls	r7, r7, #3
 1030f08:	f102 057c 	add.w	r5, r2, #124	; 0x7c
 1030f0c:	e77b      	b.n	1030e06 <_free_r+0xa2>
 1030f0e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
 1030f12:	257e      	movs	r5, #126	; 0x7e
 1030f14:	e777      	b.n	1030e06 <_free_r+0xa2>
 1030f16:	f043 0101 	orr.w	r1, r3, #1
 1030f1a:	6061      	str	r1, [r4, #4]
 1030f1c:	6013      	str	r3, [r2, #0]
 1030f1e:	e763      	b.n	1030de8 <_free_r+0x84>
 1030f20:	200004d0 	.word	0x200004d0
 1030f24:	200004d8 	.word	0x200004d8
 1030f28:	200008dc 	.word	0x200008dc
 1030f2c:	20010648 	.word	0x20010648

01030f30 <malloc>:
 1030f30:	4b02      	ldr	r3, [pc, #8]	; (1030f3c <malloc+0xc>)
 1030f32:	4601      	mov	r1, r0
 1030f34:	6818      	ldr	r0, [r3, #0]
 1030f36:	f000 b803 	b.w	1030f40 <_malloc_r>
 1030f3a:	bf00      	nop
 1030f3c:	200000a0 	.word	0x200000a0

01030f40 <_malloc_r>:
 1030f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1030f44:	f101 060b 	add.w	r6, r1, #11
 1030f48:	2e16      	cmp	r6, #22
 1030f4a:	b083      	sub	sp, #12
 1030f4c:	4605      	mov	r5, r0
 1030f4e:	f240 809e 	bls.w	103108e <_malloc_r+0x14e>
 1030f52:	f036 0607 	bics.w	r6, r6, #7
 1030f56:	f100 80bd 	bmi.w	10310d4 <_malloc_r+0x194>
 1030f5a:	42b1      	cmp	r1, r6
 1030f5c:	f200 80ba 	bhi.w	10310d4 <_malloc_r+0x194>
 1030f60:	f000 fa9e 	bl	10314a0 <__malloc_lock>
 1030f64:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
 1030f68:	f0c0 8293 	bcc.w	1031492 <_malloc_r+0x552>
 1030f6c:	0a73      	lsrs	r3, r6, #9
 1030f6e:	f000 80b8 	beq.w	10310e2 <_malloc_r+0x1a2>
 1030f72:	2b04      	cmp	r3, #4
 1030f74:	f200 8179 	bhi.w	103126a <_malloc_r+0x32a>
 1030f78:	09b3      	lsrs	r3, r6, #6
 1030f7a:	f103 0039 	add.w	r0, r3, #57	; 0x39
 1030f7e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
 1030f82:	00c3      	lsls	r3, r0, #3
 1030f84:	4fbf      	ldr	r7, [pc, #764]	; (1031284 <_malloc_r+0x344>)
 1030f86:	443b      	add	r3, r7
 1030f88:	f1a3 0108 	sub.w	r1, r3, #8
 1030f8c:	685c      	ldr	r4, [r3, #4]
 1030f8e:	42a1      	cmp	r1, r4
 1030f90:	d106      	bne.n	1030fa0 <_malloc_r+0x60>
 1030f92:	e00c      	b.n	1030fae <_malloc_r+0x6e>
 1030f94:	2a00      	cmp	r2, #0
 1030f96:	f280 80aa 	bge.w	10310ee <_malloc_r+0x1ae>
 1030f9a:	68e4      	ldr	r4, [r4, #12]
 1030f9c:	42a1      	cmp	r1, r4
 1030f9e:	d006      	beq.n	1030fae <_malloc_r+0x6e>
 1030fa0:	6863      	ldr	r3, [r4, #4]
 1030fa2:	f023 0303 	bic.w	r3, r3, #3
 1030fa6:	1b9a      	subs	r2, r3, r6
 1030fa8:	2a0f      	cmp	r2, #15
 1030faa:	ddf3      	ble.n	1030f94 <_malloc_r+0x54>
 1030fac:	4670      	mov	r0, lr
 1030fae:	693c      	ldr	r4, [r7, #16]
 1030fb0:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 1031298 <_malloc_r+0x358>
 1030fb4:	4574      	cmp	r4, lr
 1030fb6:	f000 81ab 	beq.w	1031310 <_malloc_r+0x3d0>
 1030fba:	6863      	ldr	r3, [r4, #4]
 1030fbc:	f023 0303 	bic.w	r3, r3, #3
 1030fc0:	1b9a      	subs	r2, r3, r6
 1030fc2:	2a0f      	cmp	r2, #15
 1030fc4:	f300 8190 	bgt.w	10312e8 <_malloc_r+0x3a8>
 1030fc8:	2a00      	cmp	r2, #0
 1030fca:	f8c7 e014 	str.w	lr, [r7, #20]
 1030fce:	f8c7 e010 	str.w	lr, [r7, #16]
 1030fd2:	f280 809d 	bge.w	1031110 <_malloc_r+0x1d0>
 1030fd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 1030fda:	f080 8161 	bcs.w	10312a0 <_malloc_r+0x360>
 1030fde:	08db      	lsrs	r3, r3, #3
 1030fe0:	f103 0c01 	add.w	ip, r3, #1
 1030fe4:	1099      	asrs	r1, r3, #2
 1030fe6:	687a      	ldr	r2, [r7, #4]
 1030fe8:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
 1030fec:	f8c4 8008 	str.w	r8, [r4, #8]
 1030ff0:	2301      	movs	r3, #1
 1030ff2:	408b      	lsls	r3, r1
 1030ff4:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
 1030ff8:	4313      	orrs	r3, r2
 1030ffa:	3908      	subs	r1, #8
 1030ffc:	60e1      	str	r1, [r4, #12]
 1030ffe:	607b      	str	r3, [r7, #4]
 1031000:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
 1031004:	f8c8 400c 	str.w	r4, [r8, #12]
 1031008:	1082      	asrs	r2, r0, #2
 103100a:	2401      	movs	r4, #1
 103100c:	4094      	lsls	r4, r2
 103100e:	429c      	cmp	r4, r3
 1031010:	f200 808b 	bhi.w	103112a <_malloc_r+0x1ea>
 1031014:	421c      	tst	r4, r3
 1031016:	d106      	bne.n	1031026 <_malloc_r+0xe6>
 1031018:	f020 0003 	bic.w	r0, r0, #3
 103101c:	0064      	lsls	r4, r4, #1
 103101e:	421c      	tst	r4, r3
 1031020:	f100 0004 	add.w	r0, r0, #4
 1031024:	d0fa      	beq.n	103101c <_malloc_r+0xdc>
 1031026:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 103102a:	46cc      	mov	ip, r9
 103102c:	4680      	mov	r8, r0
 103102e:	f8dc 300c 	ldr.w	r3, [ip, #12]
 1031032:	459c      	cmp	ip, r3
 1031034:	d107      	bne.n	1031046 <_malloc_r+0x106>
 1031036:	e16d      	b.n	1031314 <_malloc_r+0x3d4>
 1031038:	2a00      	cmp	r2, #0
 103103a:	f280 817b 	bge.w	1031334 <_malloc_r+0x3f4>
 103103e:	68db      	ldr	r3, [r3, #12]
 1031040:	459c      	cmp	ip, r3
 1031042:	f000 8167 	beq.w	1031314 <_malloc_r+0x3d4>
 1031046:	6859      	ldr	r1, [r3, #4]
 1031048:	f021 0103 	bic.w	r1, r1, #3
 103104c:	1b8a      	subs	r2, r1, r6
 103104e:	2a0f      	cmp	r2, #15
 1031050:	ddf2      	ble.n	1031038 <_malloc_r+0xf8>
 1031052:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 1031056:	f8d3 8008 	ldr.w	r8, [r3, #8]
 103105a:	9300      	str	r3, [sp, #0]
 103105c:	199c      	adds	r4, r3, r6
 103105e:	4628      	mov	r0, r5
 1031060:	f046 0601 	orr.w	r6, r6, #1
 1031064:	f042 0501 	orr.w	r5, r2, #1
 1031068:	605e      	str	r6, [r3, #4]
 103106a:	f8c8 c00c 	str.w	ip, [r8, #12]
 103106e:	f8cc 8008 	str.w	r8, [ip, #8]
 1031072:	617c      	str	r4, [r7, #20]
 1031074:	613c      	str	r4, [r7, #16]
 1031076:	f8c4 e00c 	str.w	lr, [r4, #12]
 103107a:	f8c4 e008 	str.w	lr, [r4, #8]
 103107e:	6065      	str	r5, [r4, #4]
 1031080:	505a      	str	r2, [r3, r1]
 1031082:	f000 fa0f 	bl	10314a4 <__malloc_unlock>
 1031086:	9b00      	ldr	r3, [sp, #0]
 1031088:	f103 0408 	add.w	r4, r3, #8
 103108c:	e01e      	b.n	10310cc <_malloc_r+0x18c>
 103108e:	2910      	cmp	r1, #16
 1031090:	d820      	bhi.n	10310d4 <_malloc_r+0x194>
 1031092:	f000 fa05 	bl	10314a0 <__malloc_lock>
 1031096:	2610      	movs	r6, #16
 1031098:	2318      	movs	r3, #24
 103109a:	2002      	movs	r0, #2
 103109c:	4f79      	ldr	r7, [pc, #484]	; (1031284 <_malloc_r+0x344>)
 103109e:	443b      	add	r3, r7
 10310a0:	f1a3 0208 	sub.w	r2, r3, #8
 10310a4:	685c      	ldr	r4, [r3, #4]
 10310a6:	4294      	cmp	r4, r2
 10310a8:	f000 813d 	beq.w	1031326 <_malloc_r+0x3e6>
 10310ac:	6863      	ldr	r3, [r4, #4]
 10310ae:	68e1      	ldr	r1, [r4, #12]
 10310b0:	68a6      	ldr	r6, [r4, #8]
 10310b2:	f023 0303 	bic.w	r3, r3, #3
 10310b6:	4423      	add	r3, r4
 10310b8:	4628      	mov	r0, r5
 10310ba:	685a      	ldr	r2, [r3, #4]
 10310bc:	60f1      	str	r1, [r6, #12]
 10310be:	f042 0201 	orr.w	r2, r2, #1
 10310c2:	608e      	str	r6, [r1, #8]
 10310c4:	605a      	str	r2, [r3, #4]
 10310c6:	f000 f9ed 	bl	10314a4 <__malloc_unlock>
 10310ca:	3408      	adds	r4, #8
 10310cc:	4620      	mov	r0, r4
 10310ce:	b003      	add	sp, #12
 10310d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 10310d4:	2400      	movs	r4, #0
 10310d6:	230c      	movs	r3, #12
 10310d8:	4620      	mov	r0, r4
 10310da:	602b      	str	r3, [r5, #0]
 10310dc:	b003      	add	sp, #12
 10310de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 10310e2:	2040      	movs	r0, #64	; 0x40
 10310e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 10310e8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
 10310ec:	e74a      	b.n	1030f84 <_malloc_r+0x44>
 10310ee:	4423      	add	r3, r4
 10310f0:	68e1      	ldr	r1, [r4, #12]
 10310f2:	685a      	ldr	r2, [r3, #4]
 10310f4:	68a6      	ldr	r6, [r4, #8]
 10310f6:	f042 0201 	orr.w	r2, r2, #1
 10310fa:	60f1      	str	r1, [r6, #12]
 10310fc:	4628      	mov	r0, r5
 10310fe:	608e      	str	r6, [r1, #8]
 1031100:	605a      	str	r2, [r3, #4]
 1031102:	f000 f9cf 	bl	10314a4 <__malloc_unlock>
 1031106:	3408      	adds	r4, #8
 1031108:	4620      	mov	r0, r4
 103110a:	b003      	add	sp, #12
 103110c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1031110:	4423      	add	r3, r4
 1031112:	4628      	mov	r0, r5
 1031114:	685a      	ldr	r2, [r3, #4]
 1031116:	f042 0201 	orr.w	r2, r2, #1
 103111a:	605a      	str	r2, [r3, #4]
 103111c:	f000 f9c2 	bl	10314a4 <__malloc_unlock>
 1031120:	3408      	adds	r4, #8
 1031122:	4620      	mov	r0, r4
 1031124:	b003      	add	sp, #12
 1031126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 103112a:	68bc      	ldr	r4, [r7, #8]
 103112c:	6863      	ldr	r3, [r4, #4]
 103112e:	f023 0803 	bic.w	r8, r3, #3
 1031132:	45b0      	cmp	r8, r6
 1031134:	d304      	bcc.n	1031140 <_malloc_r+0x200>
 1031136:	eba8 0306 	sub.w	r3, r8, r6
 103113a:	2b0f      	cmp	r3, #15
 103113c:	f300 8085 	bgt.w	103124a <_malloc_r+0x30a>
 1031140:	f8df 9158 	ldr.w	r9, [pc, #344]	; 103129c <_malloc_r+0x35c>
 1031144:	4b50      	ldr	r3, [pc, #320]	; (1031288 <_malloc_r+0x348>)
 1031146:	f8d9 2000 	ldr.w	r2, [r9]
 103114a:	681b      	ldr	r3, [r3, #0]
 103114c:	3201      	adds	r2, #1
 103114e:	4433      	add	r3, r6
 1031150:	eb04 0a08 	add.w	sl, r4, r8
 1031154:	f000 8155 	beq.w	1031402 <_malloc_r+0x4c2>
 1031158:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 103115c:	330f      	adds	r3, #15
 103115e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
 1031162:	f02b 0b0f 	bic.w	fp, fp, #15
 1031166:	4659      	mov	r1, fp
 1031168:	4628      	mov	r0, r5
 103116a:	f000 f99d 	bl	10314a8 <_sbrk_r>
 103116e:	1c41      	adds	r1, r0, #1
 1031170:	4602      	mov	r2, r0
 1031172:	f000 80fc 	beq.w	103136e <_malloc_r+0x42e>
 1031176:	4582      	cmp	sl, r0
 1031178:	f200 80f7 	bhi.w	103136a <_malloc_r+0x42a>
 103117c:	4b43      	ldr	r3, [pc, #268]	; (103128c <_malloc_r+0x34c>)
 103117e:	6819      	ldr	r1, [r3, #0]
 1031180:	4459      	add	r1, fp
 1031182:	6019      	str	r1, [r3, #0]
 1031184:	f000 814d 	beq.w	1031422 <_malloc_r+0x4e2>
 1031188:	f8d9 0000 	ldr.w	r0, [r9]
 103118c:	3001      	adds	r0, #1
 103118e:	bf1b      	ittet	ne
 1031190:	eba2 0a0a 	subne.w	sl, r2, sl
 1031194:	4451      	addne	r1, sl
 1031196:	f8c9 2000 	streq.w	r2, [r9]
 103119a:	6019      	strne	r1, [r3, #0]
 103119c:	f012 0107 	ands.w	r1, r2, #7
 10311a0:	f000 8115 	beq.w	10313ce <_malloc_r+0x48e>
 10311a4:	f1c1 0008 	rsb	r0, r1, #8
 10311a8:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 10311ac:	4402      	add	r2, r0
 10311ae:	3108      	adds	r1, #8
 10311b0:	eb02 090b 	add.w	r9, r2, fp
 10311b4:	f3c9 090b 	ubfx	r9, r9, #0, #12
 10311b8:	eba1 0909 	sub.w	r9, r1, r9
 10311bc:	4649      	mov	r1, r9
 10311be:	4628      	mov	r0, r5
 10311c0:	9301      	str	r3, [sp, #4]
 10311c2:	9200      	str	r2, [sp, #0]
 10311c4:	f000 f970 	bl	10314a8 <_sbrk_r>
 10311c8:	1c43      	adds	r3, r0, #1
 10311ca:	e89d 000c 	ldmia.w	sp, {r2, r3}
 10311ce:	f000 8143 	beq.w	1031458 <_malloc_r+0x518>
 10311d2:	1a80      	subs	r0, r0, r2
 10311d4:	4448      	add	r0, r9
 10311d6:	f040 0001 	orr.w	r0, r0, #1
 10311da:	6819      	ldr	r1, [r3, #0]
 10311dc:	60ba      	str	r2, [r7, #8]
 10311de:	4449      	add	r1, r9
 10311e0:	42bc      	cmp	r4, r7
 10311e2:	6050      	str	r0, [r2, #4]
 10311e4:	6019      	str	r1, [r3, #0]
 10311e6:	d017      	beq.n	1031218 <_malloc_r+0x2d8>
 10311e8:	f1b8 0f0f 	cmp.w	r8, #15
 10311ec:	f240 80fb 	bls.w	10313e6 <_malloc_r+0x4a6>
 10311f0:	6860      	ldr	r0, [r4, #4]
 10311f2:	f1a8 020c 	sub.w	r2, r8, #12
 10311f6:	f022 0207 	bic.w	r2, r2, #7
 10311fa:	eb04 0e02 	add.w	lr, r4, r2
 10311fe:	f000 0001 	and.w	r0, r0, #1
 1031202:	f04f 0c05 	mov.w	ip, #5
 1031206:	4310      	orrs	r0, r2
 1031208:	2a0f      	cmp	r2, #15
 103120a:	6060      	str	r0, [r4, #4]
 103120c:	f8ce c004 	str.w	ip, [lr, #4]
 1031210:	f8ce c008 	str.w	ip, [lr, #8]
 1031214:	f200 8117 	bhi.w	1031446 <_malloc_r+0x506>
 1031218:	4b1d      	ldr	r3, [pc, #116]	; (1031290 <_malloc_r+0x350>)
 103121a:	68bc      	ldr	r4, [r7, #8]
 103121c:	681a      	ldr	r2, [r3, #0]
 103121e:	4291      	cmp	r1, r2
 1031220:	bf88      	it	hi
 1031222:	6019      	strhi	r1, [r3, #0]
 1031224:	4b1b      	ldr	r3, [pc, #108]	; (1031294 <_malloc_r+0x354>)
 1031226:	681a      	ldr	r2, [r3, #0]
 1031228:	4291      	cmp	r1, r2
 103122a:	6862      	ldr	r2, [r4, #4]
 103122c:	bf88      	it	hi
 103122e:	6019      	strhi	r1, [r3, #0]
 1031230:	f022 0203 	bic.w	r2, r2, #3
 1031234:	4296      	cmp	r6, r2
 1031236:	eba2 0306 	sub.w	r3, r2, r6
 103123a:	d801      	bhi.n	1031240 <_malloc_r+0x300>
 103123c:	2b0f      	cmp	r3, #15
 103123e:	dc04      	bgt.n	103124a <_malloc_r+0x30a>
 1031240:	4628      	mov	r0, r5
 1031242:	f000 f92f 	bl	10314a4 <__malloc_unlock>
 1031246:	2400      	movs	r4, #0
 1031248:	e740      	b.n	10310cc <_malloc_r+0x18c>
 103124a:	19a2      	adds	r2, r4, r6
 103124c:	f043 0301 	orr.w	r3, r3, #1
 1031250:	f046 0601 	orr.w	r6, r6, #1
 1031254:	6066      	str	r6, [r4, #4]
 1031256:	4628      	mov	r0, r5
 1031258:	60ba      	str	r2, [r7, #8]
 103125a:	6053      	str	r3, [r2, #4]
 103125c:	f000 f922 	bl	10314a4 <__malloc_unlock>
 1031260:	3408      	adds	r4, #8
 1031262:	4620      	mov	r0, r4
 1031264:	b003      	add	sp, #12
 1031266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 103126a:	2b14      	cmp	r3, #20
 103126c:	d971      	bls.n	1031352 <_malloc_r+0x412>
 103126e:	2b54      	cmp	r3, #84	; 0x54
 1031270:	f200 80a3 	bhi.w	10313ba <_malloc_r+0x47a>
 1031274:	0b33      	lsrs	r3, r6, #12
 1031276:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 103127a:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
 103127e:	00c3      	lsls	r3, r0, #3
 1031280:	e680      	b.n	1030f84 <_malloc_r+0x44>
 1031282:	bf00      	nop
 1031284:	200004d0 	.word	0x200004d0
 1031288:	20010648 	.word	0x20010648
 103128c:	20010618 	.word	0x20010618
 1031290:	20010640 	.word	0x20010640
 1031294:	20010644 	.word	0x20010644
 1031298:	200004d8 	.word	0x200004d8
 103129c:	200008d8 	.word	0x200008d8
 10312a0:	0a5a      	lsrs	r2, r3, #9
 10312a2:	2a04      	cmp	r2, #4
 10312a4:	d95b      	bls.n	103135e <_malloc_r+0x41e>
 10312a6:	2a14      	cmp	r2, #20
 10312a8:	f200 80ae 	bhi.w	1031408 <_malloc_r+0x4c8>
 10312ac:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 10312b0:	00c9      	lsls	r1, r1, #3
 10312b2:	325b      	adds	r2, #91	; 0x5b
 10312b4:	eb07 0c01 	add.w	ip, r7, r1
 10312b8:	5879      	ldr	r1, [r7, r1]
 10312ba:	f1ac 0c08 	sub.w	ip, ip, #8
 10312be:	458c      	cmp	ip, r1
 10312c0:	f000 8088 	beq.w	10313d4 <_malloc_r+0x494>
 10312c4:	684a      	ldr	r2, [r1, #4]
 10312c6:	f022 0203 	bic.w	r2, r2, #3
 10312ca:	4293      	cmp	r3, r2
 10312cc:	d273      	bcs.n	10313b6 <_malloc_r+0x476>
 10312ce:	6889      	ldr	r1, [r1, #8]
 10312d0:	458c      	cmp	ip, r1
 10312d2:	d1f7      	bne.n	10312c4 <_malloc_r+0x384>
 10312d4:	f8dc 200c 	ldr.w	r2, [ip, #12]
 10312d8:	687b      	ldr	r3, [r7, #4]
 10312da:	60e2      	str	r2, [r4, #12]
 10312dc:	f8c4 c008 	str.w	ip, [r4, #8]
 10312e0:	6094      	str	r4, [r2, #8]
 10312e2:	f8cc 400c 	str.w	r4, [ip, #12]
 10312e6:	e68f      	b.n	1031008 <_malloc_r+0xc8>
 10312e8:	19a1      	adds	r1, r4, r6
 10312ea:	f046 0c01 	orr.w	ip, r6, #1
 10312ee:	f042 0601 	orr.w	r6, r2, #1
 10312f2:	f8c4 c004 	str.w	ip, [r4, #4]
 10312f6:	4628      	mov	r0, r5
 10312f8:	6179      	str	r1, [r7, #20]
 10312fa:	6139      	str	r1, [r7, #16]
 10312fc:	f8c1 e00c 	str.w	lr, [r1, #12]
 1031300:	f8c1 e008 	str.w	lr, [r1, #8]
 1031304:	604e      	str	r6, [r1, #4]
 1031306:	50e2      	str	r2, [r4, r3]
 1031308:	f000 f8cc 	bl	10314a4 <__malloc_unlock>
 103130c:	3408      	adds	r4, #8
 103130e:	e6dd      	b.n	10310cc <_malloc_r+0x18c>
 1031310:	687b      	ldr	r3, [r7, #4]
 1031312:	e679      	b.n	1031008 <_malloc_r+0xc8>
 1031314:	f108 0801 	add.w	r8, r8, #1
 1031318:	f018 0f03 	tst.w	r8, #3
 103131c:	f10c 0c08 	add.w	ip, ip, #8
 1031320:	f47f ae85 	bne.w	103102e <_malloc_r+0xee>
 1031324:	e02d      	b.n	1031382 <_malloc_r+0x442>
 1031326:	68dc      	ldr	r4, [r3, #12]
 1031328:	42a3      	cmp	r3, r4
 103132a:	bf08      	it	eq
 103132c:	3002      	addeq	r0, #2
 103132e:	f43f ae3e 	beq.w	1030fae <_malloc_r+0x6e>
 1031332:	e6bb      	b.n	10310ac <_malloc_r+0x16c>
 1031334:	4419      	add	r1, r3
 1031336:	461c      	mov	r4, r3
 1031338:	684a      	ldr	r2, [r1, #4]
 103133a:	68db      	ldr	r3, [r3, #12]
 103133c:	f854 6f08 	ldr.w	r6, [r4, #8]!
 1031340:	f042 0201 	orr.w	r2, r2, #1
 1031344:	604a      	str	r2, [r1, #4]
 1031346:	4628      	mov	r0, r5
 1031348:	60f3      	str	r3, [r6, #12]
 103134a:	609e      	str	r6, [r3, #8]
 103134c:	f000 f8aa 	bl	10314a4 <__malloc_unlock>
 1031350:	e6bc      	b.n	10310cc <_malloc_r+0x18c>
 1031352:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 1031356:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
 103135a:	00c3      	lsls	r3, r0, #3
 103135c:	e612      	b.n	1030f84 <_malloc_r+0x44>
 103135e:	099a      	lsrs	r2, r3, #6
 1031360:	f102 0139 	add.w	r1, r2, #57	; 0x39
 1031364:	00c9      	lsls	r1, r1, #3
 1031366:	3238      	adds	r2, #56	; 0x38
 1031368:	e7a4      	b.n	10312b4 <_malloc_r+0x374>
 103136a:	42bc      	cmp	r4, r7
 103136c:	d054      	beq.n	1031418 <_malloc_r+0x4d8>
 103136e:	68bc      	ldr	r4, [r7, #8]
 1031370:	6862      	ldr	r2, [r4, #4]
 1031372:	f022 0203 	bic.w	r2, r2, #3
 1031376:	e75d      	b.n	1031234 <_malloc_r+0x2f4>
 1031378:	f859 3908 	ldr.w	r3, [r9], #-8
 103137c:	4599      	cmp	r9, r3
 103137e:	f040 8086 	bne.w	103148e <_malloc_r+0x54e>
 1031382:	f010 0f03 	tst.w	r0, #3
 1031386:	f100 30ff 	add.w	r0, r0, #4294967295
 103138a:	d1f5      	bne.n	1031378 <_malloc_r+0x438>
 103138c:	687b      	ldr	r3, [r7, #4]
 103138e:	ea23 0304 	bic.w	r3, r3, r4
 1031392:	607b      	str	r3, [r7, #4]
 1031394:	0064      	lsls	r4, r4, #1
 1031396:	429c      	cmp	r4, r3
 1031398:	f63f aec7 	bhi.w	103112a <_malloc_r+0x1ea>
 103139c:	2c00      	cmp	r4, #0
 103139e:	f43f aec4 	beq.w	103112a <_malloc_r+0x1ea>
 10313a2:	421c      	tst	r4, r3
 10313a4:	4640      	mov	r0, r8
 10313a6:	f47f ae3e 	bne.w	1031026 <_malloc_r+0xe6>
 10313aa:	0064      	lsls	r4, r4, #1
 10313ac:	421c      	tst	r4, r3
 10313ae:	f100 0004 	add.w	r0, r0, #4
 10313b2:	d0fa      	beq.n	10313aa <_malloc_r+0x46a>
 10313b4:	e637      	b.n	1031026 <_malloc_r+0xe6>
 10313b6:	468c      	mov	ip, r1
 10313b8:	e78c      	b.n	10312d4 <_malloc_r+0x394>
 10313ba:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 10313be:	d815      	bhi.n	10313ec <_malloc_r+0x4ac>
 10313c0:	0bf3      	lsrs	r3, r6, #15
 10313c2:	f103 0078 	add.w	r0, r3, #120	; 0x78
 10313c6:	f103 0e77 	add.w	lr, r3, #119	; 0x77
 10313ca:	00c3      	lsls	r3, r0, #3
 10313cc:	e5da      	b.n	1030f84 <_malloc_r+0x44>
 10313ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 10313d2:	e6ed      	b.n	10311b0 <_malloc_r+0x270>
 10313d4:	687b      	ldr	r3, [r7, #4]
 10313d6:	1092      	asrs	r2, r2, #2
 10313d8:	2101      	movs	r1, #1
 10313da:	fa01 f202 	lsl.w	r2, r1, r2
 10313de:	4313      	orrs	r3, r2
 10313e0:	607b      	str	r3, [r7, #4]
 10313e2:	4662      	mov	r2, ip
 10313e4:	e779      	b.n	10312da <_malloc_r+0x39a>
 10313e6:	2301      	movs	r3, #1
 10313e8:	6053      	str	r3, [r2, #4]
 10313ea:	e729      	b.n	1031240 <_malloc_r+0x300>
 10313ec:	f240 5254 	movw	r2, #1364	; 0x554
 10313f0:	4293      	cmp	r3, r2
 10313f2:	d822      	bhi.n	103143a <_malloc_r+0x4fa>
 10313f4:	0cb3      	lsrs	r3, r6, #18
 10313f6:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 10313fa:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
 10313fe:	00c3      	lsls	r3, r0, #3
 1031400:	e5c0      	b.n	1030f84 <_malloc_r+0x44>
 1031402:	f103 0b10 	add.w	fp, r3, #16
 1031406:	e6ae      	b.n	1031166 <_malloc_r+0x226>
 1031408:	2a54      	cmp	r2, #84	; 0x54
 103140a:	d829      	bhi.n	1031460 <_malloc_r+0x520>
 103140c:	0b1a      	lsrs	r2, r3, #12
 103140e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 1031412:	00c9      	lsls	r1, r1, #3
 1031414:	326e      	adds	r2, #110	; 0x6e
 1031416:	e74d      	b.n	10312b4 <_malloc_r+0x374>
 1031418:	4b20      	ldr	r3, [pc, #128]	; (103149c <_malloc_r+0x55c>)
 103141a:	6819      	ldr	r1, [r3, #0]
 103141c:	4459      	add	r1, fp
 103141e:	6019      	str	r1, [r3, #0]
 1031420:	e6b2      	b.n	1031188 <_malloc_r+0x248>
 1031422:	f3ca 000b 	ubfx	r0, sl, #0, #12
 1031426:	2800      	cmp	r0, #0
 1031428:	f47f aeae 	bne.w	1031188 <_malloc_r+0x248>
 103142c:	eb08 030b 	add.w	r3, r8, fp
 1031430:	68ba      	ldr	r2, [r7, #8]
 1031432:	f043 0301 	orr.w	r3, r3, #1
 1031436:	6053      	str	r3, [r2, #4]
 1031438:	e6ee      	b.n	1031218 <_malloc_r+0x2d8>
 103143a:	207f      	movs	r0, #127	; 0x7f
 103143c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 1031440:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
 1031444:	e59e      	b.n	1030f84 <_malloc_r+0x44>
 1031446:	f104 0108 	add.w	r1, r4, #8
 103144a:	4628      	mov	r0, r5
 103144c:	9300      	str	r3, [sp, #0]
 103144e:	f7ff fc89 	bl	1030d64 <_free_r>
 1031452:	9b00      	ldr	r3, [sp, #0]
 1031454:	6819      	ldr	r1, [r3, #0]
 1031456:	e6df      	b.n	1031218 <_malloc_r+0x2d8>
 1031458:	2001      	movs	r0, #1
 103145a:	f04f 0900 	mov.w	r9, #0
 103145e:	e6bc      	b.n	10311da <_malloc_r+0x29a>
 1031460:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 1031464:	d805      	bhi.n	1031472 <_malloc_r+0x532>
 1031466:	0bda      	lsrs	r2, r3, #15
 1031468:	f102 0178 	add.w	r1, r2, #120	; 0x78
 103146c:	00c9      	lsls	r1, r1, #3
 103146e:	3277      	adds	r2, #119	; 0x77
 1031470:	e720      	b.n	10312b4 <_malloc_r+0x374>
 1031472:	f240 5154 	movw	r1, #1364	; 0x554
 1031476:	428a      	cmp	r2, r1
 1031478:	d805      	bhi.n	1031486 <_malloc_r+0x546>
 103147a:	0c9a      	lsrs	r2, r3, #18
 103147c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 1031480:	00c9      	lsls	r1, r1, #3
 1031482:	327c      	adds	r2, #124	; 0x7c
 1031484:	e716      	b.n	10312b4 <_malloc_r+0x374>
 1031486:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 103148a:	227e      	movs	r2, #126	; 0x7e
 103148c:	e712      	b.n	10312b4 <_malloc_r+0x374>
 103148e:	687b      	ldr	r3, [r7, #4]
 1031490:	e780      	b.n	1031394 <_malloc_r+0x454>
 1031492:	08f0      	lsrs	r0, r6, #3
 1031494:	f106 0308 	add.w	r3, r6, #8
 1031498:	e600      	b.n	103109c <_malloc_r+0x15c>
 103149a:	bf00      	nop
 103149c:	20010618 	.word	0x20010618

010314a0 <__malloc_lock>:
 10314a0:	4770      	bx	lr
 10314a2:	bf00      	nop

010314a4 <__malloc_unlock>:
 10314a4:	4770      	bx	lr
 10314a6:	bf00      	nop

010314a8 <_sbrk_r>:
 10314a8:	b538      	push	{r3, r4, r5, lr}
 10314aa:	4c07      	ldr	r4, [pc, #28]	; (10314c8 <_sbrk_r+0x20>)
 10314ac:	2300      	movs	r3, #0
 10314ae:	4605      	mov	r5, r0
 10314b0:	4608      	mov	r0, r1
 10314b2:	6023      	str	r3, [r4, #0]
 10314b4:	f7fc fbc6 	bl	102dc44 <_sbrk>
 10314b8:	1c43      	adds	r3, r0, #1
 10314ba:	d000      	beq.n	10314be <_sbrk_r+0x16>
 10314bc:	bd38      	pop	{r3, r4, r5, pc}
 10314be:	6823      	ldr	r3, [r4, #0]
 10314c0:	2b00      	cmp	r3, #0
 10314c2:	d0fb      	beq.n	10314bc <_sbrk_r+0x14>
 10314c4:	602b      	str	r3, [r5, #0]
 10314c6:	bd38      	pop	{r3, r4, r5, pc}
 10314c8:	200172e0 	.word	0x200172e0

010314cc <__register_exitproc>:
 10314cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 10314d0:	4c25      	ldr	r4, [pc, #148]	; (1031568 <__register_exitproc+0x9c>)
 10314d2:	6825      	ldr	r5, [r4, #0]
 10314d4:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 10314d8:	4606      	mov	r6, r0
 10314da:	4688      	mov	r8, r1
 10314dc:	4692      	mov	sl, r2
 10314de:	4699      	mov	r9, r3
 10314e0:	b3c4      	cbz	r4, 1031554 <__register_exitproc+0x88>
 10314e2:	6860      	ldr	r0, [r4, #4]
 10314e4:	281f      	cmp	r0, #31
 10314e6:	dc17      	bgt.n	1031518 <__register_exitproc+0x4c>
 10314e8:	1c43      	adds	r3, r0, #1
 10314ea:	b176      	cbz	r6, 103150a <__register_exitproc+0x3e>
 10314ec:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 10314f0:	2201      	movs	r2, #1
 10314f2:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
 10314f6:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
 10314fa:	4082      	lsls	r2, r0
 10314fc:	4311      	orrs	r1, r2
 10314fe:	2e02      	cmp	r6, #2
 1031500:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
 1031504:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
 1031508:	d01e      	beq.n	1031548 <__register_exitproc+0x7c>
 103150a:	3002      	adds	r0, #2
 103150c:	6063      	str	r3, [r4, #4]
 103150e:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
 1031512:	2000      	movs	r0, #0
 1031514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 1031518:	4b14      	ldr	r3, [pc, #80]	; (103156c <__register_exitproc+0xa0>)
 103151a:	b303      	cbz	r3, 103155e <__register_exitproc+0x92>
 103151c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 1031520:	f7ff fd06 	bl	1030f30 <malloc>
 1031524:	4604      	mov	r4, r0
 1031526:	b1d0      	cbz	r0, 103155e <__register_exitproc+0x92>
 1031528:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 103152c:	2700      	movs	r7, #0
 103152e:	e880 0088 	stmia.w	r0, {r3, r7}
 1031532:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 1031536:	4638      	mov	r0, r7
 1031538:	2301      	movs	r3, #1
 103153a:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 103153e:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
 1031542:	2e00      	cmp	r6, #0
 1031544:	d0e1      	beq.n	103150a <__register_exitproc+0x3e>
 1031546:	e7d1      	b.n	10314ec <__register_exitproc+0x20>
 1031548:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
 103154c:	430a      	orrs	r2, r1
 103154e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 1031552:	e7da      	b.n	103150a <__register_exitproc+0x3e>
 1031554:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 1031558:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 103155c:	e7c1      	b.n	10314e2 <__register_exitproc+0x16>
 103155e:	f04f 30ff 	mov.w	r0, #4294967295
 1031562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 1031566:	bf00      	nop
 1031568:	01038d18 	.word	0x01038d18
 103156c:	01030f31 	.word	0x01030f31

01031570 <CSWTCH.190>:
 1031570:	cff5379e 00014d0f 00000000              .7...M......

0103157c <CSWTCH.198>:
 103157c:	cfff379e 00015f63 00000000              .7..c_......

01031588 <CSWTCH.192>:
 1031588:	fffffffe 000000c3 00000000 504d4554     ............TEMP
 1031598:	00000000 20202020 4d535033 00000000     ....    3PSM....
 10315a8:	20202020 00000020 20303032 00002020          ...200   ..
 10315b8:	20203033 00002020 20202020 20202020     30    ..        
 10315c8:	20202020 20202020 20202020 00000000                 ....
 10315d8:	20202020 20202020 20202020 20202020                     
 10315e8:	20202020 20202020 20202020 00002020                   ..
 10315f8:	415f4d53 765f5050 6b736154 00000000     SM_APP_vTask....
 1031608:	3030305a 33303030 00000000 3030305a     Z0000003....Z000
 1031618:	32303030 00000000 746e6543 206c6172     0002....Central 
 1031628:	6e617453 64726164 6d695420 4d282065     Standard Time (M
 1031638:	63697865 0000296f 545f504f 006b7361     exico)..OP_Task.
 1031648:	386c6563 616d2321 74252436 2426396f     cel8!#ma6$%to9&$
 1031658:	2f317265 00000000 5f43494e 6b736154     er1/....NIC_Task
 1031668:	00000000 49414650 50415f4c 54765f50     ....PFAIL_APP_vT
 1031678:	006b7361 00025800 00019800 0007d800     ask..X..........
 1031688:	0003d800 002a5800 00325800 003a5800     .....X*..X2..X:.
 1031698:	00299800 00319800 00399800 00005801     ..)...1...9..X..
 10316a8:	00009801 00011801 00021801 0000d801     ................
 10316b8:	00031801 0007d801 0003d801 00025801     .............X..
 10316c8:	00019801 00025802 00019802 0007d802     .....X..........
 10316d8:	0003d802 00005802 00009802 00011802     .....X..........
 10316e8:	00021802 00024500 00018500 0007c500     .....E..........
 10316f8:	0003c500 002a4500 00324500 003a4500     .....E*..E2..E:.
 1031708:	00298500 00318500 00398500 00004501     ..)...1...9..E..
 1031718:	00008501 00010501 00020501 0000c501     ................
 1031728:	00030501 0007c501 0003c501 00024501     .............E..
 1031738:	00018501 00024502 00018502 0007c502     .....E..........
 1031748:	0003c502 00004502 00008502 00010502     .....E..........
 1031758:	00020502 00025c00 00019c00 0007dc00     .....\..........
 1031768:	0003dc00 002a5c00 00325c00 003a5c00     .....\*..\2..\:.
 1031778:	00299c00 00319c00 00399c00 00005c01     ..)...1...9..\..
 1031788:	00009c01 00011c01 00021c01 0000dc01     ................
 1031798:	00031c01 0007dc01 0003dc01 00025c01     .............\..
 10317a8:	00019c01 00025c02 00019c02 0007dc02     .....\..........
 10317b8:	0003dc02 00005c02 00009c02 00011c02     .....\..........
 10317c8:	00021c02 0003d900 002bd900 0033d900     ..........+...3.
 10317d8:	003bd900 0003d901 002bd901 0033d901     ..;.......+...3.
 10317e8:	003bd901 0003d902 002bd902 0033d902     ..;.......+...3.
 10317f8:	003bd902 0028110b 0030110b 0038110b     ..;...(...0...8.
 1031808:	0028110f 0030110f 0038110f 00280114     ..(...0...8...(.
 1031818:	00300114 00380114 00280116 00300116     ..0...8...(...0.
 1031828:	00380116 0000011b 0028011b 0030011b     ..8.......(...0.
 1031838:	0038011b 00000118 00280118 00300118     ..8.......(...0.
 1031848:	00380118 00000121 00025b00 00019b00     ..8.!....[......
 1031858:	0007db00 0003db00 002a5b00 00325b00     .........[*..[2.
 1031868:	003a5b00 00299b00 00319b00 00399b00     .[:...)...1...9.
 1031878:	00005b01 00009b01 00011b01 00021b01     .[..............
 1031888:	0000db01 00031b01 0007db01 0003db01     ................
 1031898:	00025b01 00019b01 00025b02 00019b02     .[.......[......
 10318a8:	0007db02 0003db02 00005b02 00009b02     .........[......
 10318b8:	00011b02 00021b02 6574654d 676e6972     ........Metering
 10318c8:	7361545f 0000006b 1e1f1c1f 1f1f1e1f     _Task...........
 10318d8:	1f1e1f1e                                ....

010318dc <month_days>:
 10318dc:	1f1c1f00 1f1e1f1e 1e1f1e1f 1d1f001f     ................
 10318ec:	1e1f1e1f 1f1e1f1f 00001f1e 30303030     ............0000
 10318fc:	30303030 30303030 30303030 30303030     0000000000000000
 103190c:	00000000 5f554f54 5f505041 73615476     ....TOU_APP_vTas
 103191c:	0000006b                                k...

01031920 <month_days>:
 1031920:	1f1c1f00 1f1e1f1e 1e1f1e1f 1d1f001f     ................
 1031930:	1e1f1e1f 1f1e1f1f 00001f1e 00000000     ................
	...

01031a00 <core1_image_start_p>:
 1031a00:	20101c08 	.word	0x20101c08
 1031a04:	00003a45 	.word	0x00003a45
 1031a08:	000039f9 	.word	0x000039f9
 1031a0c:	000039fb 	.word	0x000039fb
 1031a10:	000039fd 	.word	0x000039fd
 1031a14:	000039ff 	.word	0x000039ff
 1031a18:	00003a01 	.word	0x00003a01
	...
 1031a2c:	00003a03 	.word	0x00003a03
 1031a30:	00003a05 	.word	0x00003a05
 1031a34:	00000000 	.word	0x00000000
 1031a38:	00003a07 	.word	0x00003a07
 1031a3c:	00003a09 	.word	0x00003a09
 1031a40:	00003a0b 	.word	0x00003a0b
 1031a44:	00003a0b 	.word	0x00003a0b
 1031a48:	00003a0b 	.word	0x00003a0b
 1031a4c:	00003a0b 	.word	0x00003a0b
 1031a50:	00003a0b 	.word	0x00003a0b
 1031a54:	00003a0b 	.word	0x00003a0b
 1031a58:	00003a0b 	.word	0x00003a0b
 1031a5c:	00000000 	.word	0x00000000
 1031a60:	00003a0b 	.word	0x00003a0b
	...
 1031a6c:	00002189 	.word	0x00002189
 1031a70:	0000218f 	.word	0x0000218f
 1031a74:	00000000 	.word	0x00000000
 1031a78:	00003a0b 	.word	0x00003a0b
 1031a7c:	00003a0b 	.word	0x00003a0b
 1031a80:	00003a0b 	.word	0x00003a0b
 1031a84:	00003a0b 	.word	0x00003a0b
 1031a88:	00003a0b 	.word	0x00003a0b
 1031a8c:	00003a0b 	.word	0x00003a0b
 1031a90:	00003a0b 	.word	0x00003a0b
 1031a94:	00003a0b 	.word	0x00003a0b
 1031a98:	00000000 	.word	0x00000000
 1031a9c:	00003a0b 	.word	0x00003a0b
 1031aa0:	00003a0b 	.word	0x00003a0b
 1031aa4:	00003a0b 	.word	0x00003a0b
 1031aa8:	00003a0b 	.word	0x00003a0b
 1031aac:	00003a0b 	.word	0x00003a0b
 1031ab0:	00003a0b 	.word	0x00003a0b
 1031ab4:	00003a0b 	.word	0x00003a0b
 1031ab8:	00003a0b 	.word	0x00003a0b
 1031abc:	00003a0b 	.word	0x00003a0b
 1031ac0:	00003a0b 	.word	0x00003a0b
 1031ac4:	00003a0b 	.word	0x00003a0b
 1031ac8:	00003a0b 	.word	0x00003a0b
 1031acc:	00000000 	.word	0x00000000
 1031ad0:	00003a0b 	.word	0x00003a0b
 1031ad4:	00002195 	.word	0x00002195
 1031ad8:	00003a0b 	.word	0x00003a0b
 1031adc:	00003a0b 	.word	0x00003a0b
 1031ae0:	0000377b 	.word	0x0000377b
 1031ae4:	00003765 	.word	0x00003765
 1031ae8:	00000000 	.word	0x00000000
 1031aec:	20101c08 	.word	0x20101c08
 1031af0:	00003a45 	.word	0x00003a45
 1031af4:	000039f9 	.word	0x000039f9
 1031af8:	000039fb 	.word	0x000039fb
 1031afc:	000039fd 	.word	0x000039fd
 1031b00:	000039ff 	.word	0x000039ff
 1031b04:	00003a01 	.word	0x00003a01
	...
 1031b18:	00003a03 	.word	0x00003a03
 1031b1c:	00003a05 	.word	0x00003a05
 1031b20:	00000000 	.word	0x00000000
 1031b24:	00003a07 	.word	0x00003a07
 1031b28:	00003a09 	.word	0x00003a09
 1031b2c:	4a040941 	.word	0x4a040941
 1031b30:	f0002301 	.word	0xf0002301
 1031b34:	fa03001f 	.word	0xfa03001f
 1031b38:	f842f000 	.word	0xf842f000
 1031b3c:	47700021 	.word	0x47700021
 1031b40:	e000e100 	.word	0xe000e100
 1031b44:	4ff0e92d 	.word	0x4ff0e92d
 1031b48:	0c60f8df 	.word	0x0c60f8df
 1031b4c:	4c60f8df 	.word	0x4c60f8df
 1031b50:	5c60f8df 	.word	0x5c60f8df
 1031b54:	6c60f8df 	.word	0x6c60f8df
 1031b58:	b08f2100 	.word	0xb08f2100
 1031b5c:	60256041 	.word	0x60256041
 1031b60:	20016066 	.word	0x20016066
 1031b64:	ff88f001 	.word	0xff88f001
 1031b68:	60666025 	.word	0x60666025
 1031b6c:	f8df2101 	.word	0xf8df2101
 1031b70:	60410c3c 	.word	0x60410c3c
 1031b74:	710af44f 	.word	0x710af44f
 1031b78:	0c40f8df 	.word	0x0c40f8df
 1031b7c:	67419003 	.word	0x67419003
 1031b80:	0c28f8df 	.word	0x0c28f8df
 1031b84:	1c38f8df 	.word	0x1c38f8df
 1031b88:	f44f6001 	.word	0xf44f6001
 1031b8c:	f0011180 	.word	0xf0011180
 1031b90:	f8dfff40 	.word	0xf8dfff40
 1031b94:	68000c30 	.word	0x68000c30
 1031b98:	d0fa2800 	.word	0xd0fa2800
 1031b9c:	0c24f8df 	.word	0x0c24f8df
 1031ba0:	90021d00 	.word	0x90021d00
 1031ba4:	2020f44f 	.word	0x2020f44f
 1031ba8:	6a099902 	.word	0x6a099902
 1031bac:	2f20f5b1 	.word	0x2f20f5b1
 1031bb0:	9902bf3c 	.word	0x9902bf3c
 1031bb4:	99026208 	.word	0x99026208
 1031bb8:	f5b16a49 	.word	0xf5b16a49
 1031bbc:	bf3c2f20 	.word	0xbf3c2f20
 1031bc0:	62489902 	.word	0x62489902
 1031bc4:	6a899902 	.word	0x6a899902
 1031bc8:	2f20f5b1 	.word	0x2f20f5b1
 1031bcc:	9902bf3c 	.word	0x9902bf3c
 1031bd0:	f8df6288 	.word	0xf8df6288
 1031bd4:	30b40bf0 	.word	0x30b40bf0
 1031bd8:	5200f06f 	.word	0x5200f06f
 1031bdc:	18516881 	.word	0x18516881
 1031be0:	2be4f8df 	.word	0x2be4f8df
 1031be4:	d2024291 	.word	0xd2024291
 1031be8:	68809903 	.word	0x68809903
 1031bec:	f00166c8 	.word	0xf00166c8
 1031bf0:	f8dfff55 	.word	0xf8dfff55
 1031bf4:	68010bd8 	.word	0x68010bd8
 1031bf8:	7100f441 	.word	0x7100f441
 1031bfc:	210f6001 	.word	0x210f6001
 1031c00:	0bccf8df 	.word	0x0bccf8df
 1031c04:	21006081 	.word	0x21006081
 1031c08:	20006001 	.word	0x20006001
 1031c0c:	1bb4f8df 	.word	0x1bb4f8df
 1031c10:	0180eb01 	.word	0x0180eb01
 1031c14:	01c96989 	.word	0x01c96989
 1031c18:	2802d408 	.word	0x2802d408
 1031c1c:	2003bf08 	.word	0x2003bf08
 1031c20:	f8df0141 	.word	0xf8df0141
 1031c24:	f44f2bb0 	.word	0xf44f2bb0
 1031c28:	e00763c1 	.word	0xe00763c1
 1031c2c:	bf082802 	.word	0xbf082802
 1031c30:	01412003 	.word	0x01412003
 1031c34:	2b9cf8df 	.word	0x2b9cf8df
 1031c38:	6381f44f 	.word	0x6381f44f
 1031c3c:	1c40508b 	.word	0x1c40508b
 1031c40:	dbe32803 	.word	0xdbe32803
 1031c44:	0b88f8df 	.word	0x0b88f8df
 1031c48:	f8df69c0 	.word	0xf8df69c0
 1031c4c:	210b0b84 	.word	0x210b0b84
 1031c50:	f44f6101 	.word	0xf44f6101
 1031c54:	f8df7000 	.word	0xf8df7000
 1031c58:	60081b80 	.word	0x60081b80
 1031c5c:	1b7cf8df 	.word	0x1b7cf8df
 1031c60:	21006008 	.word	0x21006008
 1031c64:	0b78f8df 	.word	0x0b78f8df
 1031c68:	20297001 	.word	0x20297001
 1031c6c:	ff5ef7ff 	.word	0xff5ef7ff
 1031c70:	4b70f8df 	.word	0x4b70f8df
 1031c74:	0b70f8df 	.word	0x0b70f8df
 1031c78:	5b70f8df 	.word	0x5b70f8df
 1031c7c:	7b70f8df 	.word	0x7b70f8df
 1031c80:	26006020 	.word	0x26006020
 1031c84:	0b6cf8df 	.word	0x0b6cf8df
 1031c88:	f8df6060 	.word	0xf8df6060
 1031c8c:	60a00b6c 	.word	0x60a00b6c
 1031c90:	0b68f8df 	.word	0x0b68f8df
 1031c94:	f8df60e0 	.word	0xf8df60e0
 1031c98:	eb000b2c 	.word	0xeb000b2c
 1031c9c:	69800086 	.word	0x69800086
 1031ca0:	d40c01c0 	.word	0xd40c01c0
 1031ca4:	bf082e02 	.word	0xbf082e02
 1031ca8:	f8572603 	.word	0xf8572603
 1031cac:	235b8026 	.word	0x235b8026
 1031cb0:	fe97f001 	.word	0xfe97f001
 1031cb4:	0026f854 	.word	0x0026f854
 1031cb8:	23509000 	.word	0x23509000
 1031cbc:	2e02e00b 	.word	0x2e02e00b
 1031cc0:	2603bf08 	.word	0x2603bf08
 1031cc4:	8026f857 	.word	0x8026f857
 1031cc8:	f001237b 	.word	0xf001237b
 1031ccc:	f854fe8a 	.word	0xf854fe8a
 1031cd0:	90000026 	.word	0x90000026
 1031cd4:	46422370 	.word	0x46422370
 1031cd8:	46282125 	.word	0x46282125
 1031cdc:	ff3df001 	.word	0xff3df001
 1031ce0:	1026f857 	.word	0x1026f857
 1031ce4:	f0024628 	.word	0xf0024628
 1031ce8:	1c76f810 	.word	0x1c76f810
 1031cec:	dbd22e03 	.word	0xdbd22e03
 1031cf0:	f8df2000 	.word	0xf8df2000
 1031cf4:	62604b0c 	.word	0x62604b0c
 1031cf8:	f8df2200 	.word	0xf8df2200
 1031cfc:	eb000b08 	.word	0xeb000b08
 1031d00:	21000082 	.word	0x21000082
 1031d04:	1e98f8c0 	.word	0x1e98f8c0
 1031d08:	fb0020c8 	.word	0xfb0020c8
 1031d0c:	f8dff602 	.word	0xf8dff602
 1031d10:	18330af4 	.word	0x18330af4
 1031d14:	2758f603 	.word	0x2758f603
 1031d18:	e9c72000 	.word	0xe9c72000
 1031d1c:	e9c70100 	.word	0xe9c70100
 1031d20:	e9c70102 	.word	0xe9c70102
 1031d24:	f5030104 	.word	0xf5030104
 1031d28:	e9c76731 	.word	0xe9c76731
 1031d2c:	46070100 	.word	0x46070100
 1031d30:	1ad0f8df 	.word	0x1ad0f8df
 1031d34:	eb011871 	.word	0xeb011871
 1031d38:	1c400180 	.word	0x1c400180
 1031d3c:	7a7cf8c1 	.word	0x7a7cf8c1
 1031d40:	dbf52821 	.word	0xdbf52821
 1031d44:	0a7cf8df 	.word	0x0a7cf8df
 1031d48:	1a78f8df 	.word	0x1a78f8df
 1031d4c:	0082eb00 	.word	0x0082eb00
 1031d50:	3318f603 	.word	0x3318f603
 1031d54:	f3c06980 	.word	0xf3c06980
 1031d58:	eb014041 	.word	0xeb014041
 1031d5c:	1c520080 	.word	0x1c520080
 1031d60:	0e816a40 	.word	0x0e816a40
 1031d64:	e9c30180 	.word	0xe9c30180
 1031d68:	2a030100 	.word	0x2a030100
 1031d6c:	f8dfdbc5 	.word	0xf8dfdbc5
 1031d70:	90000a98 	.word	0x90000a98
 1031d74:	f44f2350 	.word	0xf44f2350
 1031d78:	21257280 	.word	0x21257280
 1031d7c:	f0014628 	.word	0xf0014628
 1031d80:	f44ffeec 	.word	0xf44ffeec
 1031d84:	46287180 	.word	0x46287180
 1031d88:	ffbff001 	.word	0xffbff001
 1031d8c:	f7ff2025 	.word	0xf7ff2025
 1031d90:	f8dffecd 	.word	0xf8dffecd
 1031d94:	21020a18 	.word	0x21020a18
 1031d98:	20006041 	.word	0x20006041
 1031d9c:	46034602 	.word	0x46034602
 1031da0:	1a60f8df 	.word	0x1a60f8df
 1031da4:	01c0eb01 	.word	0x01c0eb01
 1031da8:	5138f601 	.word	0x5138f601
 1031dac:	e9c11c40 	.word	0xe9c11c40
 1031db0:	28052300 	.word	0x28052300
 1031db4:	2000d3f4 	.word	0x2000d3f4
 1031db8:	f8df2128 	.word	0xf8df2128
 1031dbc:	fb012a48 	.word	0xfb012a48
 1031dc0:	1c402100 	.word	0x1c402100
 1031dc4:	3cb0f881 	.word	0x3cb0f881
 1031dc8:	d3f52803 	.word	0xd3f52803
 1031dcc:	610af44f 	.word	0x610af44f
 1031dd0:	0a30f8df 	.word	0x0a30f8df
 1031dd4:	ffa8f001 	.word	0xffa8f001
 1031dd8:	09d0f8df 	.word	0x09d0f8df
 1031ddc:	60412104 	.word	0x60412104
 1031de0:	f85df002 	.word	0xf85df002
 1031de4:	f89cf002 	.word	0xf89cf002
 1031de8:	f8df2101 	.word	0xf8df2101
 1031dec:	90040a20 	.word	0x90040a20
 1031df0:	210670c1 	.word	0x210670c1
 1031df4:	09b4f8df 	.word	0x09b4f8df
 1031df8:	f0026041 	.word	0xf0026041
 1031dfc:	f8dff9c3 	.word	0xf8dff9c3
 1031e00:	f8811a04 	.word	0xf8811a04
 1031e04:	f8df0d28 	.word	0xf8df0d28
 1031e08:	680009bc 	.word	0x680009bc
 1031e0c:	d3fa2802 	.word	0xd3fa2802
 1031e10:	f8df2107 	.word	0xf8df2107
 1031e14:	60410998 	.word	0x60410998
 1031e18:	f8dfe0f7 	.word	0xf8dfe0f7
 1031e1c:	60881990 	.word	0x60881990
 1031e20:	69082500 	.word	0x69082500
 1031e24:	1c490c01 	.word	0x1c490c01
 1031e28:	eac0b289 	.word	0xeac0b289
 1031e2c:	f8df4001 	.word	0xf8df4001
 1031e30:	6108197c 	.word	0x6108197c
 1031e34:	09ccf8df 	.word	0x09ccf8df
 1031e38:	06c5eb00 	.word	0x06c5eb00
 1031e3c:	5238f606 	.word	0x5238f606
 1031e40:	0100e9d2 	.word	0x0100e9d2
 1031e44:	17d36a22 	.word	0x17d36a22
 1031e48:	fcc0f002 	.word	0xfcc0f002
 1031e4c:	f6064682 	.word	0xf6064682
 1031e50:	22005038 	.word	0x22005038
 1031e54:	2200e9c0 	.word	0x2200e9c0
 1031e58:	30309800 	.word	0x30309800
 1031e5c:	02c5eb00 	.word	0x02c5eb00
 1031e60:	73eaea4f 	.word	0x73eaea4f
 1031e64:	0100e9d2 	.word	0x0100e9d2
 1031e68:	670afbaa 	.word	0x670afbaa
 1031e6c:	7703fb0a 	.word	0x7703fb0a
 1031e70:	770afb03 	.word	0x770afb03
 1031e74:	6a220db6 	.word	0x6a220db6
 1031e78:	2687ea46 	.word	0x2687ea46
 1031e7c:	fba20dbf 	.word	0xfba20dbf
 1031e80:	17d38906 	.word	0x17d38906
 1031e84:	9907fb02 	.word	0x9907fb02
 1031e88:	9906fb03 	.word	0x9906fb03
 1031e8c:	0008ebb0 	.word	0x0008ebb0
 1031e90:	eb619a00 	.word	0xeb619a00
 1031e94:	32300109 	.word	0x32300109
 1031e98:	02c5eb02 	.word	0x02c5eb02
 1031e9c:	e9c22d03 	.word	0xe9c22d03
 1031ea0:	d20f0100 	.word	0xd20f0100
 1031ea4:	095cf8df 	.word	0x095cf8df
 1031ea8:	00c5eb00 	.word	0x00c5eb00
 1031eac:	1138f8d0 	.word	0x1138f8d0
 1031eb0:	010aeba1 	.word	0x010aeba1
 1031eb4:	1138f8c0 	.word	0x1138f8c0
 1031eb8:	709cf500 	.word	0x709cf500
 1031ebc:	eba16981 	.word	0xeba16981
 1031ec0:	6181010a 	.word	0x6181010a
 1031ec4:	2d051c6d 	.word	0x2d051c6d
 1031ec8:	f8dfd3b4 	.word	0xf8dfd3b4
 1031ecc:	6a2108e0 	.word	0x6a2108e0
 1031ed0:	98026141 	.word	0x98026141
 1031ed4:	04006840 	.word	0x04006840
 1031ed8:	9804d536 	.word	0x9804d536
 1031edc:	e9c02200 	.word	0xe9c02200
 1031ee0:	2000221e 	.word	0x2000221e
 1031ee4:	28dcf8df 	.word	0x28dcf8df
 1031ee8:	1918f8df 	.word	0x1918f8df
 1031eec:	0280eb02 	.word	0x0280eb02
 1031ef0:	0180eb01 	.word	0x0180eb01
 1031ef4:	f8d16e13 	.word	0xf8d16e13
 1031ef8:	029b5f40 	.word	0x029b5f40
 1031efc:	f313fb55 	.word	0xf313fb55
 1031f00:	590cf8df 	.word	0x590cf8df
 1031f04:	3020f845 	.word	0x3020f845
 1031f08:	7340f601 	.word	0x7340f601
 1031f0c:	699d6e12 	.word	0x699d6e12
 1031f10:	fb550292 	.word	0xfb550292
 1031f14:	f8dff212 	.word	0xf8dff212
 1031f18:	eb0558f8 	.word	0xeb0558f8
 1031f1c:	1c400580 	.word	0x1c400580
 1031f20:	220061aa 	.word	0x220061aa
 1031f24:	2f40f8c1 	.word	0x2f40f8c1
 1031f28:	2806619a 	.word	0x2806619a
 1031f2c:	f8dfd3da 	.word	0xf8dfd3da
 1031f30:	9902087c 	.word	0x9902087c
 1031f34:	68496880 	.word	0x68496880
 1031f38:	407ff420 	.word	0x407ff420
 1031f3c:	517cf401 	.word	0x517cf401
 1031f40:	f8df4308 	.word	0xf8df4308
 1031f44:	60881868 	.word	0x60881868
 1031f48:	f8df2232 	.word	0xf8df2232
 1031f4c:	f8df58c8 	.word	0xf8df58c8
 1031f50:	462818c8 	.word	0x462818c8
 1031f54:	6702e8f0 	.word	0x6702e8f0
 1031f58:	6702e8e1 	.word	0x6702e8e1
 1031f5c:	d1f91e52 	.word	0xd1f91e52
 1031f60:	f0012101 	.word	0xf0012101
 1031f64:	2032fd56 	.word	0x2032fd56
 1031f68:	e8e52200 	.word	0xe8e52200
 1031f6c:	1e402202 	.word	0x1e402202
 1031f70:	2500d1fb 	.word	0x2500d1fb
 1031f74:	f8df2028 	.word	0xf8df2028
 1031f78:	fb00188c 	.word	0xfb00188c
 1031f7c:	f6011105 	.word	0xf6011105
 1031f80:	688240b0 	.word	0x688240b0
 1031f84:	eba26a23 	.word	0xeba26a23
 1031f88:	60c23203 	.word	0x60c23203
 1031f8c:	5280f502 	.word	0x5280f502
 1031f90:	5f80f5b2 	.word	0x5f80f5b2
 1031f94:	2200bf84 	.word	0x2200bf84
 1031f98:	220060c2 	.word	0x220060c2
 1031f9c:	e9c02300 	.word	0xe9c02300
 1031fa0:	61022308 	.word	0x61022308
 1031fa4:	22011c6d 	.word	0x22011c6d
 1031fa8:	2cb0f881 	.word	0x2cb0f881
 1031fac:	61436043 	.word	0x61436043
 1031fb0:	d3df2d03 	.word	0xd3df2d03
 1031fb4:	07f4f8df 	.word	0x07f4f8df
 1031fb8:	17f0f8df 	.word	0x17f0f8df
 1031fbc:	0c006900 	.word	0x0c006900
 1031fc0:	61080400 	.word	0x61080400
 1031fc4:	62202000 	.word	0x62202000
 1031fc8:	46066260 	.word	0x46066260
 1031fcc:	21c84607 	.word	0x21c84607
 1031fd0:	2830f8df 	.word	0x2830f8df
 1031fd4:	2100fb01 	.word	0x2100fb01
 1031fd8:	2258f601 	.word	0x2258f601
 1031fdc:	2158f601 	.word	0x2158f601
 1031fe0:	6700e9c2 	.word	0x6700e9c2
 1031fe4:	3302e9c1 	.word	0x3302e9c1
 1031fe8:	3304e9c1 	.word	0x3304e9c1
 1031fec:	28031c40 	.word	0x28031c40
 1031ff0:	9804d3ed 	.word	0x9804d3ed
 1031ff4:	e9c02101 	.word	0xe9c02101
 1031ff8:	98043318 	.word	0x98043318
 1031ffc:	331ae9c0 	.word	0x331ae9c0
 1032000:	e9c09804 	.word	0xe9c09804
 1032004:	9803331c 	.word	0x9803331c
 1032008:	f8df6541 	.word	0xf8df6541
 103200c:	680007b8 	.word	0x680007b8
 1032010:	f0012800 	.word	0xf0012800
 1032014:	f8df84b5 	.word	0xf8df84b5
 1032018:	f8d007ac 	.word	0xf8d007ac
 103201c:	280000b4 	.word	0x280000b4
 1032020:	9803d404 	.word	0x9803d404
 1032024:	66812100 	.word	0x66812100
 1032028:	67019803 	.word	0x67019803
 103202c:	78409804 	.word	0x78409804
 1032030:	d0f02800 	.word	0xd0f02800
 1032034:	21009804 	.word	0x21009804
 1032038:	98047041 	.word	0x98047041
 103203c:	b1306b80 	.word	0xb1306b80
 1032040:	078cf8df 	.word	0x078cf8df
 1032044:	60412101 	.word	0x60412101
 1032048:	98042100 	.word	0x98042100
 103204c:	98046381 	.word	0x98046381
 1032050:	b1306bc0 	.word	0xb1306bc0
 1032054:	0778f8df 	.word	0x0778f8df
 1032058:	60412102 	.word	0x60412102
 103205c:	98042100 	.word	0x98042100
 1032060:	980463c1 	.word	0x980463c1
 1032064:	b1306c40 	.word	0xb1306c40
 1032068:	0764f8df 	.word	0x0764f8df
 103206c:	60412108 	.word	0x60412108
 1032070:	98042100 	.word	0x98042100
 1032074:	f8df6441 	.word	0xf8df6441
 1032078:	f8d0078c 	.word	0xf8d0078c
 103207c:	f0000e70 	.word	0xf0000e70
 1032080:	90050004 	.word	0x90050004
 1032084:	68409802 	.word	0x68409802
 1032088:	d51e0400 	.word	0xd51e0400
 103208c:	e9d29a04 	.word	0xe9d29a04
 1032090:	0040011e 	.word	0x0040011e
 1032094:	f0020840 	.word	0xf0020840
 1032098:	9903fc33 	.word	0x9903fc33
 103209c:	9a046208 	.word	0x9a046208
 10320a0:	011ee9d2 	.word	0x011ee9d2
 10320a4:	5000f1a0 	.word	0x5000f1a0
 10320a8:	08400040 	.word	0x08400040
 10320ac:	fc28f002 	.word	0xfc28f002
 10320b0:	61c89903 	.word	0x61c89903
 10320b4:	e9d09804 	.word	0xe9d09804
 10320b8:	9803231e 	.word	0x9803231e
 10320bc:	17c16980 	.word	0x17c16980
 10320c0:	9a041810 	.word	0x9a041810
 10320c4:	e9c24159 	.word	0xe9c24159
 10320c8:	2000011e 	.word	0x2000011e
 10320cc:	200060e0 	.word	0x200060e0
 10320d0:	69216120 	.word	0x69216120
 10320d4:	072cf8df 	.word	0x072cf8df
 10320d8:	eb009a05 	.word	0xeb009a05
 10320dc:	68e00581 	.word	0x68e00581
 10320e0:	1a801d00 	.word	0x1a801d00
 10320e4:	fb022206 	.word	0xfb022206
 10320e8:	f8df1000 	.word	0xf8df1000
 10320ec:	eb022718 	.word	0xeb022718
 10320f0:	f8df0080 	.word	0xf8df0080
 10320f4:	f8d026d0 	.word	0xf8d026d0
 10320f8:	eb020db0 	.word	0xeb020db0
 10320fc:	6fc90181 	.word	0x6fc90181
 1032100:	f111fb50 	.word	0xf111fb50
 1032104:	f8d2008e 	.word	0xf8d2008e
 1032108:	f8df10b4 	.word	0xf8df10b4
 103210c:	40112e48 	.word	0x40112e48
 1032110:	4f00f111 	.word	0x4f00f111
 1032114:	f8dfd10b 	.word	0xf8dfd10b
 1032118:	f8d116ac 	.word	0xf8d116ac
 103211c:	692310b4 	.word	0x692310b4
 1032120:	7280f44f 	.word	0x7280f44f
 1032124:	4211409a 	.word	0x4211409a
 1032128:	f002bf18 	.word	0xf002bf18
 103212c:	f8dffae2 	.word	0xf8dffae2
 1032130:	f8df06ec 	.word	0xf8df06ec
 1032134:	680016e8 	.word	0x680016e8
 1032138:	682a6849 	.word	0x682a6849
 103213c:	f010fb56 	.word	0xf010fb56
 1032140:	0011fb52 	.word	0x0011fb52
 1032144:	16d4f8df 	.word	0x16d4f8df
 1032148:	688969aa 	.word	0x688969aa
 103214c:	fb62602e 	.word	0xfb62602e
 1032150:	f8df0011 	.word	0xf8df0011
 1032154:	f8df16cc 	.word	0xf8df16cc
 1032158:	680926c8 	.word	0x680926c8
 103215c:	69ab6852 	.word	0x69ab6852
 1032160:	fb500080 	.word	0xfb500080
 1032164:	fb53f111 	.word	0xfb53f111
 1032168:	f8df1112 	.word	0xf8df1112
 103216c:	6b2b26b4 	.word	0x6b2b26b4
 1032170:	fb536892 	.word	0xfb536892
 1032174:	f8df1112 	.word	0xf8df1112
 1032178:	6e2b26a8 	.word	0x6e2b26a8
 103217c:	fb6368d2 	.word	0xfb6368d2
 1032180:	f8df1112 	.word	0xf8df1112
 1032184:	6fab269c 	.word	0x6fab269c
 1032188:	fb636912 	.word	0xfb636912
 103218c:	00891112 	.word	0x00891112
 1032190:	69a964a9 	.word	0x69a964a9
 1032194:	61a86329 	.word	0x61a86329
 1032198:	1668f8df 	.word	0x1668f8df
 103219c:	18406920 	.word	0x18406920
 10321a0:	f8902118 	.word	0xf8902118
 10321a4:	f0000d2c 	.word	0xf0000d2c
 10321a8:	fb110003 	.word	0xfb110003
 10321ac:	f8d05000 	.word	0xf8d05000
 10321b0:	6e28c048 	.word	0x6e28c048
 10321b4:	6ca867a8 	.word	0x6ca867a8
 10321b8:	69226628 	.word	0x69226628
 10321bc:	40d36863 	.word	0x40d36863
 10321c0:	d52407db 	.word	0xd52407db
 10321c4:	063cf8df 	.word	0x063cf8df
 10321c8:	3638f8df 	.word	0x3638f8df
 10321cc:	0042eb00 	.word	0x0042eb00
 10321d0:	0d70f9b0 	.word	0x0d70f9b0
 10321d4:	20c0f8d5 	.word	0x20c0f8d5
 10321d8:	ea4f0401 	.word	0xea4f0401
 10321dc:	fb62006c 	.word	0xfb62006c
 10321e0:	00400011 	.word	0x00400011
 10321e4:	fb501052 	.word	0xfb501052
 10321e8:	69222111 	.word	0x69222111
 10321ec:	0242eb03 	.word	0x0242eb03
 10321f0:	f9b20049 	.word	0xf9b20049
 10321f4:	f8d52d7c 	.word	0xf8d52d7c
 10321f8:	041230d8 	.word	0x041230d8
 10321fc:	fb631049 	.word	0xfb631049
 1032200:	00491112 	.word	0x00491112
 1032204:	fb51105b 	.word	0xfb51105b
 1032208:	ea4f3212 	.word	0xea4f3212
 103220c:	f8c50c42 	.word	0xf8c50c42
 1032210:	f8c500c0 	.word	0xf8c500c0
 1032214:	f8d510d8 	.word	0xf8d510d8
 1032218:	17c10108 	.word	0x17c10108
 103221c:	010ce9cd 	.word	0x010ce9cd
 1032220:	0600f8df 	.word	0x0600f8df
 1032224:	17c16840 	.word	0x17c16840
 1032228:	010ae9cd 	.word	0x010ae9cd
 103222c:	230ae9dd 	.word	0x230ae9dd
 1032230:	71ecea4f 	.word	0x71ecea4f
 1032234:	890cfba2 	.word	0x890cfba2
 1032238:	9901fb02 	.word	0x9901fb02
 103223c:	990cfb03 	.word	0x990cfb03
 1032240:	1058ea4f 	.word	0x1058ea4f
 1032244:	68c9ea40 	.word	0x68c9ea40
 1032248:	05d8f8df 	.word	0x05d8f8df
 103224c:	e9dd6800 	.word	0xe9dd6800
 1032250:	fba0230c 	.word	0xfba0230c
 1032254:	17c16702 	.word	0x17c16702
 1032258:	7703fb00 	.word	0x7703fb00
 103225c:	1969ea4f 	.word	0x1969ea4f
 1032260:	7702fb01 	.word	0x7702fb01
 1032264:	0006ebb8 	.word	0x0006ebb8
 1032268:	0b07eb69 	.word	0x0b07eb69
 103226c:	ea400fc0 	.word	0xea400fc0
 1032270:	f8d50a4b 	.word	0xf8d50a4b
 1032274:	17c100f0 	.word	0x17c100f0
 1032278:	0108e9cd 	.word	0x0108e9cd
 103227c:	7beaea4f 	.word	0x7beaea4f
 1032280:	05a4f8df 	.word	0x05a4f8df
 1032284:	17c16840 	.word	0x17c16840
 1032288:	0106e9cd 	.word	0x0106e9cd
 103228c:	0598f8df 	.word	0x0598f8df
 1032290:	fba06800 	.word	0xfba06800
 1032294:	17c1890a 	.word	0x17c1890a
 1032298:	990bfb00 	.word	0x990bfb00
 103229c:	990afb01 	.word	0x990afb01
 10322a0:	2308e9dd 	.word	0x2308e9dd
 10322a4:	0106e9dd 	.word	0x0106e9dd
 10322a8:	6702fba0 	.word	0x6702fba0
 10322ac:	7703fb00 	.word	0x7703fb00
 10322b0:	7702fb01 	.word	0x7702fb01
 10322b4:	256cf8df 	.word	0x256cf8df
 10322b8:	eb186812 	.word	0xeb186812
 10322bc:	eb490006 	.word	0xeb490006
 10322c0:	fb820107 	.word	0xfb820107
 10322c4:	0952230c 	.word	0x0952230c
 10322c8:	62c3ea42 	.word	0x62c3ea42
 10322cc:	e9cd115b 	.word	0xe9cd115b
 10322d0:	e9dd2300 	.word	0xe9dd2300
 10322d4:	e9dd670c 	.word	0xe9dd670c
 10322d8:	fba2230a 	.word	0xfba2230a
 10322dc:	fb028906 	.word	0xfb028906
 10322e0:	fb039907 	.word	0xfb039907
 10322e4:	e9dd9906 	.word	0xe9dd9906
 10322e8:	eb122300 	.word	0xeb122300
 10322ec:	eb430208 	.word	0xeb430208
 10322f0:	e9cd0309 	.word	0xe9cd0309
 10322f4:	e9dd2300 	.word	0xe9dd2300
 10322f8:	fba22306 	.word	0xfba22306
 10322fc:	fb02670a 	.word	0xfb02670a
 1032300:	fb03770b 	.word	0xfb03770b
 1032304:	46b2770a 	.word	0x46b2770a
 1032308:	f8df46bb 	.word	0xf8df46bb
 103230c:	6812251c 	.word	0x6812251c
 1032310:	6708e9dd 	.word	0x6708e9dd
 1032314:	8906fba2 	.word	0x8906fba2
 1032318:	fb0217d3 	.word	0xfb0217d3
 103231c:	fb039907 	.word	0xfb039907
 1032320:	ebba9906 	.word	0xebba9906
 1032324:	eb6b0208 	.word	0xeb6b0208
 1032328:	0fd20309 	.word	0x0fd20309
 103232c:	0243ea42 	.word	0x0243ea42
 1032330:	f8c50fc0 	.word	0xf8c50fc0
 1032334:	ea4020f0 	.word	0xea4020f0
 1032338:	f8c50041 	.word	0xf8c50041
 103233c:	ea4f0108 	.word	0xea4f0108
 1032340:	f8df77ec 	.word	0xf8df77ec
 1032344:	f8d50e5c 	.word	0xf8d50e5c
 1032348:	f8d0a120 	.word	0xf8d0a120
 103234c:	68008004 	.word	0x68008004
 1032350:	230cfb80 	.word	0x230cfb80
 1032354:	7beaea4f 	.word	0x7beaea4f
 1032358:	fba80952 	.word	0xfba80952
 103235c:	ea4f010a 	.word	0xea4f010a
 1032360:	ea4279e8 	.word	0xea4279e8
 1032364:	fb0862c3 	.word	0xfb0862c3
 1032368:	fb09110b 	.word	0xfb09110b
 103236c:	1810110a 	.word	0x1810110a
 1032370:	1163eb41 	.word	0x1163eb41
 1032374:	464b4642 	.word	0x464b4642
 1032378:	890cfba2 	.word	0x890cfba2
 103237c:	9907fb02 	.word	0x9907fb02
 1032380:	990cfb03 	.word	0x990cfb03
 1032384:	1258ea4f 	.word	0x1258ea4f
 1032388:	68c9ea42 	.word	0x68c9ea42
 103238c:	2e10f8df 	.word	0x2e10f8df
 1032390:	fba26812 	.word	0xfba26812
 1032394:	17d3670a 	.word	0x17d3670a
 1032398:	770bfb02 	.word	0x770bfb02
 103239c:	1969ea4f 	.word	0x1969ea4f
 10323a0:	770afb03 	.word	0x770afb03
 10323a4:	0206ebb8 	.word	0x0206ebb8
 10323a8:	0307eb69 	.word	0x0307eb69
 10323ac:	ea420fd2 	.word	0xea420fd2
 10323b0:	f8c50243 	.word	0xf8c50243
 10323b4:	e9dd2120 	.word	0xe9dd2120
 10323b8:	1a102300 	.word	0x1a102300
 10323bc:	0101eb63 	.word	0x0101eb63
 10323c0:	ea400ec0 	.word	0xea400ec0
 10323c4:	f8df1641 	.word	0xf8df1641
 10323c8:	f8df03fc 	.word	0xf8df03fc
 10323cc:	f8d01b88 	.word	0xf8d01b88
 10323d0:	400800b4 	.word	0x400800b4
 10323d4:	1dccf8df 	.word	0x1dccf8df
 10323d8:	d10c4288 	.word	0xd10c4288
 10323dc:	03e4f8df 	.word	0x03e4f8df
 10323e0:	00b4f8d0 	.word	0x00b4f8d0
 10323e4:	f44f6922 	.word	0xf44f6922
 10323e8:	40917180 	.word	0x40917180
 10323ec:	bf1c4208 	.word	0xbf1c4208
 10323f0:	f0024630 	.word	0xf0024630
 10323f4:	68a0f97e 	.word	0x68a0f97e
 10323f8:	40c86921 	.word	0x40c86921
 10323fc:	d53807c0 	.word	0xd53807c0
 1032400:	3da4f8df 	.word	0x3da4f8df
 1032404:	0da0f8df 	.word	0x0da0f8df
 1032408:	2138f8d5 	.word	0x2138f8d5
 103240c:	6800685b 	.word	0x6800685b
 1032410:	2302fb83 	.word	0x2302fb83
 1032414:	0106fb80 	.word	0x0106fb80
 1032418:	09800992 	.word	0x09800992
 103241c:	6283ea42 	.word	0x6283ea42
 1032420:	6081ea40 	.word	0x6081ea40
 1032424:	1880119b 	.word	0x1880119b
 1032428:	11a1eb43 	.word	0x11a1eb43
 103242c:	3d78f8df 	.word	0x3d78f8df
 1032430:	2150f8d5 	.word	0x2150f8d5
 1032434:	fb83689b 	.word	0xfb83689b
 1032438:	09922302 	.word	0x09922302
 103243c:	6283ea42 	.word	0x6283ea42
 1032440:	eb411880 	.word	0xeb411880
 1032444:	f8df11a3 	.word	0xf8df11a3
 1032448:	f8d53d60 	.word	0xf8d53d60
 103244c:	68db2168 	.word	0x68db2168
 1032450:	2302fb83 	.word	0x2302fb83
 1032454:	41991a80 	.word	0x41991a80
 1032458:	3d4cf8df 	.word	0x3d4cf8df
 103245c:	2180f8d5 	.word	0x2180f8d5
 1032460:	fb83691b 	.word	0xfb83691b
 1032464:	1a802302 	.word	0x1a802302
 1032468:	0f804199 	.word	0x0f804199
 103246c:	0081ea40 	.word	0x0081ea40
 1032470:	4630e000 	.word	0x4630e000
 1032474:	1138f8d5 	.word	0x1138f8d5
 1032478:	1150f8c5 	.word	0x1150f8c5
 103247c:	6138f8c5 	.word	0x6138f8c5
 1032480:	1168f8d5 	.word	0x1168f8d5
 1032484:	1180f8c5 	.word	0x1180f8c5
 1032488:	0168f8c5 	.word	0x0168f8c5
 103248c:	68e21040 	.word	0x68e21040
 1032490:	bf182a00 	.word	0xbf182a00
 1032494:	d0032a02 	.word	0xd0032a02
 1032498:	2a03d322 	.word	0x2a03d322
 103249c:	e051d020 	.word	0xe051d020
 10324a0:	3d08f8df 	.word	0x3d08f8df
 10324a4:	2198f8d5 	.word	0x2198f8d5
 10324a8:	fb62681b 	.word	0xfb62681b
 10324ac:	00400013 	.word	0x00400013
 10324b0:	f8c51052 	.word	0xf8c51052
 10324b4:	fb500198 	.word	0xfb500198
 10324b8:	f8df2213 	.word	0xf8df2213
 10324bc:	f8d50ef8 	.word	0xf8d50ef8
 10324c0:	680031b0 	.word	0x680031b0
 10324c4:	10520052 	.word	0x10520052
 10324c8:	2210fb63 	.word	0x2210fb63
 10324cc:	105b0052 	.word	0x105b0052
 10324d0:	3010fb52 	.word	0x3010fb52
 10324d4:	f8c50040 	.word	0xf8c50040
 10324d8:	f8c501c8 	.word	0xf8c501c8
 10324dc:	e03121b0 	.word	0xe03121b0
 10324e0:	2ed4f8df 	.word	0x2ed4f8df
 10324e4:	11e0f8d5 	.word	0x11e0f8d5
 10324e8:	fb616812 	.word	0xfb616812
 10324ec:	00400012 	.word	0x00400012
 10324f0:	f8c51049 	.word	0xf8c51049
 10324f4:	fb5001e0 	.word	0xfb5001e0
 10324f8:	f8df1112 	.word	0xf8df1112
 10324fc:	f8d50ec0 	.word	0xf8d50ec0
 1032500:	680021f8 	.word	0x680021f8
 1032504:	10490049 	.word	0x10490049
 1032508:	1110fb62 	.word	0x1110fb62
 103250c:	10520049 	.word	0x10520049
 1032510:	11f8f8c5 	.word	0x11f8f8c5
 1032514:	2010fb51 	.word	0x2010fb51
 1032518:	11c8f8d5 	.word	0x11c8f8d5
 103251c:	00404ab9 	.word	0x00404ab9
 1032520:	eb001040 	.word	0xeb001040
 1032524:	f8c50061 	.word	0xf8c50061
 1032528:	69210210 	.word	0x69210210
 103252c:	22181889 	.word	0x22181889
 1032530:	1d2cf891 	.word	0x1d2cf891
 1032534:	0180f3c1 	.word	0x0180f3c1
 1032538:	5101fb12 	.word	0x5101fb12
 103253c:	1210f8d1 	.word	0x1210f8d1
 1032540:	0228f8c5 	.word	0x0228f8c5
 1032544:	68e11048 	.word	0x68e11048
 1032548:	d0022901 	.word	0xd0022901
 103254c:	d0202903 	.word	0xd0202903
 1032550:	f8dfe09f 	.word	0xf8dfe09f
 1032554:	f8d52c58 	.word	0xf8d52c58
 1032558:	68131240 	.word	0x68131240
 103255c:	0013fb61 	.word	0x0013fb61
 1032560:	10490040 	.word	0x10490040
 1032564:	0240f8c5 	.word	0x0240f8c5
 1032568:	1113fb50 	.word	0x1113fb50
 103256c:	0e44f8df 	.word	0x0e44f8df
 1032570:	2258f8d5 	.word	0x2258f8d5
 1032574:	00496800 	.word	0x00496800
 1032578:	fb621049 	.word	0xfb621049
 103257c:	00491110 	.word	0x00491110
 1032580:	fb511052 	.word	0xfb511052
 1032584:	00402010 	.word	0x00402010
 1032588:	0270f8c5 	.word	0x0270f8c5
 103258c:	1258f8c5 	.word	0x1258f8c5
 1032590:	f8dfe07f 	.word	0xf8dfe07f
 1032594:	f8d52e24 	.word	0xf8d52e24
 1032598:	68121288 	.word	0x68121288
 103259c:	0012fb61 	.word	0x0012fb61
 10325a0:	10490040 	.word	0x10490040
 10325a4:	0288f8c5 	.word	0x0288f8c5
 10325a8:	1112fb50 	.word	0x1112fb50
 10325ac:	0e0cf8df 	.word	0x0e0cf8df
 10325b0:	22a0f8d5 	.word	0x22a0f8d5
 10325b4:	00496800 	.word	0x00496800
 10325b8:	fb621049 	.word	0xfb621049
 10325bc:	00491110 	.word	0x00491110
 10325c0:	f8c51052 	.word	0xf8c51052
 10325c4:	fb5112a0 	.word	0xfb5112a0
 10325c8:	f8d52010 	.word	0xf8d52010
 10325cc:	00401270 	.word	0x00401270
 10325d0:	eb001040 	.word	0xeb001040
 10325d4:	f8c50061 	.word	0xf8c50061
 10325d8:	498a02b8 	.word	0x498a02b8
 10325dc:	18406920 	.word	0x18406920
 10325e0:	f8902118 	.word	0xf8902118
 10325e4:	08c00d2c 	.word	0x08c00d2c
 10325e8:	5000fb11 	.word	0x5000fb11
 10325ec:	1964f8df 	.word	0x1964f8df
 10325f0:	02b8f8d0 	.word	0x02b8f8d0
 10325f4:	0348f8c5 	.word	0x0348f8c5
 10325f8:	0318f8d5 	.word	0x0318f8d5
 10325fc:	0330f8c5 	.word	0x0330f8c5
 1032600:	0300f8d5 	.word	0x0300f8d5
 1032604:	0318f8c5 	.word	0x0318f8c5
 1032608:	02e8f8d5 	.word	0x02e8f8d5
 103260c:	0300f8c5 	.word	0x0300f8c5
 1032610:	02d0f8d5 	.word	0x02d0f8d5
 1032614:	02e8f8c5 	.word	0x02e8f8c5
 1032618:	02b8f8d5 	.word	0x02b8f8d5
 103261c:	02d0f8c5 	.word	0x02d0f8c5
 1032620:	f8d04868 	.word	0xf8d04868
 1032624:	400800b4 	.word	0x400800b4
 1032628:	1d94f8df 	.word	0x1d94f8df
 103262c:	d10c4288 	.word	0xd10c4288
 1032630:	f8d04864 	.word	0xf8d04864
 1032634:	692200b4 	.word	0x692200b4
 1032638:	7180f44f 	.word	0x7180f44f
 103263c:	42084091 	.word	0x42084091
 1032640:	f8d5bf1c 	.word	0xf8d5bf1c
 1032644:	f0020348 	.word	0xf0020348
 1032648:	9802f854 	.word	0x9802f854
 103264c:	04006840 	.word	0x04006840
 1032650:	9803d51f 	.word	0x9803d51f
 1032654:	f8d56a00 	.word	0xf8d56a00
 1032658:	4a6a1348 	.word	0x4a6a1348
 103265c:	fb511280 	.word	0xfb511280
 1032660:	6921f010 	.word	0x6921f010
 1032664:	0181eb02 	.word	0x0181eb02
 1032668:	2f40f8d1 	.word	0x2f40f8d1
 103266c:	f8c11880 	.word	0xf8c11880
 1032670:	98030f40 	.word	0x98030f40
 1032674:	f8d569c0 	.word	0xf8d569c0
 1032678:	4a621348 	.word	0x4a621348
 103267c:	fb511280 	.word	0xfb511280
 1032680:	6921f010 	.word	0x6921f010
 1032684:	0181eb02 	.word	0x0181eb02
 1032688:	2f58f8d1 	.word	0x2f58f8d1
 103268c:	f8c11880 	.word	0xf8c11880
 1032690:	485c0f58 	.word	0x485c0f58
 1032694:	0348f8d0 	.word	0x0348f8d0
 1032698:	0360f8c5 	.word	0x0360f8c5
 103269c:	1c406920 	.word	0x1c406920
 10326a0:	28066120 	.word	0x28066120
 10326a4:	ad15f4ff 	.word	0xad15f4ff
 10326a8:	1c4068e0 	.word	0x1c4068e0
 10326ac:	280460e0 	.word	0x280460e0
 10326b0:	ad0df4ff 	.word	0xad0df4ff
 10326b4:	f8df4853 	.word	0xf8df4853
 10326b8:	f8d05d0c 	.word	0xf8d05d0c
 10326bc:	f8df0348 	.word	0xf8df0348
 10326c0:	61a81d08 	.word	0x61a81d08
 10326c4:	61e86868 	.word	0x61e86868
 10326c8:	622868a8 	.word	0x622868a8
 10326cc:	626868e8 	.word	0x626868e8
 10326d0:	62a86928 	.word	0x62a86928
 10326d4:	62e86968 	.word	0x62e86968
 10326d8:	f011fb50 	.word	0xf011fb50
 10326dc:	688a9902 	.word	0x688a9902
 10326e0:	42490081 	.word	0x42490081
 10326e4:	6670f002 	.word	0x6670f002
 10326e8:	4300f002 	.word	0x4300f002
 10326ec:	7f80f1b6 	.word	0x7f80f1b6
 10326f0:	f1b6d015 	.word	0xf1b6d015
 10326f4:	d01b7f00 	.word	0xd01b7f00
 10326f8:	7f40f1b6 	.word	0x7f40f1b6
 10326fc:	f1b6d02a 	.word	0xf1b6d02a
 1032700:	d03d6f80 	.word	0xd03d6f80
 1032704:	6fa0f1b6 	.word	0x6fa0f1b6
 1032708:	8090f000 	.word	0x8090f000
 103270c:	6fc0f1b6 	.word	0x6fc0f1b6
 1032710:	8090f000 	.word	0x8090f000
 1032714:	6fe0f1b6 	.word	0x6fe0f1b6
 1032718:	8097f000 	.word	0x8097f000
 103271c:	686ae09a 	.word	0x686ae09a
 1032720:	eb0262e9 	.word	0xeb0262e9
 1032724:	61ea0240 	.word	0x61ea0240
 1032728:	eb0268ea 	.word	0xeb0268ea
 103272c:	e07f0040 	.word	0xe07f0040
 1032730:	f0000ed0 	.word	0xf0000ed0
 1032734:	49330006 	.word	0x49330006
 1032738:	0080eb01 	.word	0x0080eb01
 103273c:	f8c02100 	.word	0xf8c02100
 1032740:	68ea134c 	.word	0x68ea134c
 1032744:	18516869 	.word	0x18516869
 1032748:	1851696a 	.word	0x1851696a
 103274c:	f8c04249 	.word	0xf8c04249
 1032750:	e07f1364 	.word	0xe07f1364
 1032754:	d1692b00 	.word	0xd1692b00
 1032758:	686a62e9 	.word	0x686a62e9
 103275c:	f8d14929 	.word	0xf8d14929
 1032760:	eb021348 	.word	0xeb021348
 1032764:	61ea0240 	.word	0x61ea0240
 1032768:	68ea1049 	.word	0x68ea1049
 103276c:	0040eb02 	.word	0x0040eb02
 1032770:	69286268 	.word	0x69286268
 1032774:	0260eba1 	.word	0x0260eba1
 1032778:	0060eb01 	.word	0x0060eb01
 103277c:	e01261aa 	.word	0xe01261aa
 1032780:	d1672b00 	.word	0xd1672b00
 1032784:	68696968 	.word	0x68696968
 1032788:	f06f1842 	.word	0xf06f1842
 103278c:	fb920302 	.word	0xfb920302
 1032790:	1880f2f3 	.word	0x1880f2f3
 1032794:	188962e8 	.word	0x188962e8
 1032798:	626a61e9 	.word	0x626a61e9
 103279c:	69294819 	.word	0x69294819
 10327a0:	0348f8d0 	.word	0x0348f8d0
 10327a4:	42401808 	.word	0x42401808
 10327a8:	bf00e04d 	.word	0xbf00e04d
 10327ac:	201000dc 	.word	0x201000dc
 10327b0:	48010040 	.word	0x48010040
 10327b4:	000201ff 	.word	0x000201ff
 10327b8:	000601ff 	.word	0x000601ff
 10327bc:	20101284 	.word	0x20101284
 10327c0:	00010206 	.word	0x00010206
 10327c4:	20100000 	.word	0x20100000
 10327c8:	0007ffff 	.word	0x0007ffff
 10327cc:	400e0314 	.word	0x400e0314
 10327d0:	48008000 	.word	0x48008000
 10327d4:	48008200 	.word	0x48008200
 10327d8:	e000e184 	.word	0xe000e184
 10327dc:	e000e284 	.word	0xe000e284
 10327e0:	e000e429 	.word	0xe000e429
 10327e4:	201014c4 	.word	0x201014c4
 10327e8:	00003745 	.word	0x00003745
 10327ec:	4800c000 	.word	0x4800c000
 10327f0:	00003a34 	.word	0x00003a34
 10327f4:	0000374d 	.word	0x0000374d
 10327f8:	00003755 	.word	0x00003755
 10327fc:	0000375d 	.word	0x0000375d
 1032800:	201011d8 	.word	0x201011d8
 1032804:	20100368 	.word	0x20100368
 1032808:	00002427 	.word	0x00002427
 103280c:	20101090 	.word	0x20101090
 1032810:	20100320 	.word	0x20100320
 1032814:	20100c08 	.word	0x20100c08
 1032818:	20100168 	.word	0x20100168
 103281c:	00003448 	.word	0x00003448
 1032820:	00003454 	.word	0x00003454
 1032824:	00003470 	.word	0x00003470
 1032828:	00003468 	.word	0x00003468
 103282c:	62282000 	.word	0x62282000
 1032830:	e00f6268 	.word	0xe00f6268
 1032834:	eb006868 	.word	0xeb006868
 1032838:	104070d0 	.word	0x104070d0
 103283c:	424061e8 	.word	0x424061e8
 1032840:	200062e8 	.word	0x200062e8
 1032844:	62286268 	.word	0x62286268
 1032848:	2000e004 	.word	0x2000e004
 103284c:	62686228 	.word	0x62686228
 1032850:	62e862a8 	.word	0x62e862a8
 1032854:	61202000 	.word	0x61202000
 1032858:	f8df6920 	.word	0xf8df6920
 103285c:	f8df1d90 	.word	0xf8df1d90
 1032860:	685b3d90 	.word	0x685b3d90
 1032864:	0680eb01 	.word	0x0680eb01
 1032868:	0d88f8df 	.word	0x0d88f8df
 103286c:	1360f8d6 	.word	0x1360f8d6
 1032870:	fb516800 	.word	0xfb516800
 1032874:	f506f010 	.word	0xf506f010
 1032878:	f8df7758 	.word	0xf8df7758
 103287c:	69ba1d78 	.word	0x69ba1d78
 1032880:	f8d76849 	.word	0xf8d76849
 1032884:	fb52c060 	.word	0xfb52c060
 1032888:	f8df0011 	.word	0xf8df0011
 103288c:	6b3a1d68 	.word	0x6b3a1d68
 1032890:	fb526889 	.word	0xfb526889
 1032894:	f8df0011 	.word	0xf8df0011
 1032898:	6cba1d5c 	.word	0x6cba1d5c
 103289c:	fb6268c9 	.word	0xfb6268c9
 10328a0:	f8df0011 	.word	0xf8df0011
 10328a4:	6e3a1d50 	.word	0x6e3a1d50
 10328a8:	fb626909 	.word	0xfb626909
 10328ac:	f8df0011 	.word	0xf8df0011
 10328b0:	68091d40 	.word	0x68091d40
 10328b4:	fb500080 	.word	0xfb500080
 10328b8:	6cb9f211 	.word	0x6cb9f211
 10328bc:	2213fb51 	.word	0x2213fb51
 10328c0:	3d2cf8df 	.word	0x3d2cf8df
 10328c4:	fb5c689b 	.word	0xfb5c689b
 10328c8:	f8df2213 	.word	0xf8df2213
 10328cc:	f8d73d24 	.word	0xf8d73d24
 10328d0:	68dbc078 	.word	0x68dbc078
 10328d4:	2213fb6c 	.word	0x2213fb6c
 10328d8:	3d14f8df 	.word	0x3d14f8df
 10328dc:	c3f0f8d6 	.word	0xc3f0f8d6
 10328e0:	6639691b 	.word	0x6639691b
 10328e4:	fb6c64b8 	.word	0xfb6c64b8
 10328e8:	f8df2213 	.word	0xf8df2213
 10328ec:	f8df0d0c 	.word	0xf8df0d0c
 10328f0:	68003d08 	.word	0x68003d08
 10328f4:	f8d6685b 	.word	0xf8d6685b
 10328f8:	0092c3f0 	.word	0x0092c3f0
 10328fc:	f110fb52 	.word	0xf110fb52
 1032900:	fb506fb8 	.word	0xfb506fb8
 1032904:	f8df1113 	.word	0xf8df1113
 1032908:	689b3cf0 	.word	0x689b3cf0
 103290c:	1113fb5c 	.word	0x1113fb5c
 1032910:	787cf506 	.word	0x787cf506
 1032914:	3ce0f8df 	.word	0x3ce0f8df
 1032918:	c018f8d8 	.word	0xc018f8d8
 103291c:	fb6c68db 	.word	0xfb6c68db
 1032920:	f8df1113 	.word	0xf8df1113
 1032924:	f8d83cd4 	.word	0xf8d83cd4
 1032928:	691bc030 	.word	0x691bc030
 103292c:	03f0f8c6 	.word	0x03f0f8c6
 1032930:	fb6c67ba 	.word	0xfb6c67ba
 1032934:	f8df1113 	.word	0xf8df1113
 1032938:	f8df0eb8 	.word	0xf8df0eb8
 103293c:	68003eb4 	.word	0x68003eb4
 1032940:	f8d8685b 	.word	0xf8d8685b
 1032944:	0089c030 	.word	0x0089c030
 1032948:	f210fb51 	.word	0xf210fb51
 103294c:	0018f8d8 	.word	0x0018f8d8
 1032950:	2213fb50 	.word	0x2213fb50
 1032954:	3e98f8df 	.word	0x3e98f8df
 1032958:	fb5c689b 	.word	0xfb5c689b
 103295c:	f8df2213 	.word	0xf8df2213
 1032960:	f8d83e90 	.word	0xf8d83e90
 1032964:	68dbc048 	.word	0x68dbc048
 1032968:	2213fb6c 	.word	0x2213fb6c
 103296c:	3e80f8df 	.word	0x3e80f8df
 1032970:	c060f8d8 	.word	0xc060f8d8
 1032974:	f8c8691b 	.word	0xf8c8691b
 1032978:	f8c80030 	.word	0xf8c80030
 103297c:	fb6c1018 	.word	0xfb6c1018
 1032980:	f8df2213 	.word	0xf8df2213
 1032984:	f8df0e70 	.word	0xf8df0e70
 1032988:	68001e6c 	.word	0x68001e6c
 103298c:	f8d86889 	.word	0xf8d86889
 1032990:	00923060 	.word	0x00923060
 1032994:	f010fb52 	.word	0xf010fb52
 1032998:	0011fb53 	.word	0x0011fb53
 103299c:	1e54f8df 	.word	0x1e54f8df
 10329a0:	3480f8d6 	.word	0x3480f8d6
 10329a4:	fb6368c9 	.word	0xfb6368c9
 10329a8:	f2060011 	.word	0xf2060011
 10329ac:	f8df4980 	.word	0xf8df4980
 10329b0:	f8d91e44 	.word	0xf8d91e44
 10329b4:	69093018 	.word	0x69093018
 10329b8:	0011fb63 	.word	0x0011fb63
 10329bc:	f8c80100 	.word	0xf8c80100
 10329c0:	f8df0078 	.word	0xf8df0078
 10329c4:	f8d81590 	.word	0xf8d81590
 10329c8:	f8c80048 	.word	0xf8c80048
 10329cc:	f8c80060 	.word	0xf8c80060
 10329d0:	f8df2048 	.word	0xf8df2048
 10329d4:	f8d00e24 	.word	0xf8d00e24
 10329d8:	400800b4 	.word	0x400800b4
 10329dc:	1e1cf8df 	.word	0x1e1cf8df
 10329e0:	d10d4288 	.word	0xd10d4288
 10329e4:	0e10f8df 	.word	0x0e10f8df
 10329e8:	00b4f8d0 	.word	0x00b4f8d0
 10329ec:	f44f6922 	.word	0xf44f6922
 10329f0:	40917180 	.word	0x40917180
 10329f4:	bf1c4208 	.word	0xbf1c4208
 10329f8:	0078f8d8 	.word	0x0078f8d8
 10329fc:	fe79f001 	.word	0xfe79f001
 1032a00:	0dfcf8df 	.word	0x0dfcf8df
 1032a04:	1078f8d8 	.word	0x1078f8d8
 1032a08:	f8d96800 	.word	0xf8d96800
 1032a0c:	f8d92048 	.word	0xf8d92048
 1032a10:	f8c93030 	.word	0xf8c93030
 1032a14:	10893048 	.word	0x10893048
 1032a18:	1110fb62 	.word	0x1110fb62
 1032a1c:	10520049 	.word	0x10520049
 1032a20:	1030f8c9 	.word	0x1030f8c9
 1032a24:	2210fb51 	.word	0x2210fb51
 1032a28:	1dd8f8df 	.word	0x1dd8f8df
 1032a2c:	3078f8d9 	.word	0x3078f8d9
 1032a30:	f8d96809 	.word	0xf8d96809
 1032a34:	f8c9c060 	.word	0xf8c9c060
 1032a38:	0092c078 	.word	0x0092c078
 1032a3c:	fb631092 	.word	0xfb631092
 1032a40:	00522211 	.word	0x00522211
 1032a44:	cdc0f8df 	.word	0xcdc0f8df
 1032a48:	2060f8c9 	.word	0x2060f8c9
 1032a4c:	f8dc105b 	.word	0xf8dc105b
 1032a50:	f8cde000 	.word	0xf8cde000
 1032a54:	fb52e014 	.word	0xfb52e014
 1032a58:	f2063311 	.word	0xf2063311
 1032a5c:	46f45210 	.word	0x46f45210
 1032a60:	f8d2009b 	.word	0xf8d2009b
 1032a64:	10dbe018 	.word	0x10dbe018
 1032a68:	331cfb6e 	.word	0x331cfb6e
 1032a6c:	0c6eea4f 	.word	0x0c6eea4f
 1032a70:	e014f8dd 	.word	0xe014f8dd
 1032a74:	fb53005b 	.word	0xfb53005b
 1032a78:	f8d6ce1e 	.word	0xf8d6ce1e
 1032a7c:	f8c2c510 	.word	0xf8c2c510
 1032a80:	f8c6c018 	.word	0xf8c6c018
 1032a84:	f8df3510 	.word	0xf8df3510
 1032a88:	681b3ea0 	.word	0x681b3ea0
 1032a8c:	ea4f9301 	.word	0xea4f9301
 1032a90:	f8dd03ce 	.word	0xf8dd03ce
 1032a94:	f8d2c004 	.word	0xf8d2c004
 1032a98:	111be048 	.word	0x111be048
 1032a9c:	331cfb6e 	.word	0x331cfb6e
 1032aa0:	0c6eea4f 	.word	0x0c6eea4f
 1032aa4:	e004f8dd 	.word	0xe004f8dd
 1032aa8:	fb53005b 	.word	0xfb53005b
 1032aac:	f8d2ce1e 	.word	0xf8d2ce1e
 1032ab0:	f8c2c030 	.word	0xf8c2c030
 1032ab4:	6313c048 	.word	0x6313c048
 1032ab8:	3e70f8df 	.word	0x3e70f8df
 1032abc:	9300681b 	.word	0x9300681b
 1032ac0:	130eea4f 	.word	0x130eea4f
 1032ac4:	c000f8dd 	.word	0xc000f8dd
 1032ac8:	e078f8d2 	.word	0xe078f8d2
 1032acc:	fb6e111b 	.word	0xfb6e111b
 1032ad0:	ea4f331c 	.word	0xea4f331c
 1032ad4:	f8dd0c6e 	.word	0xf8dd0c6e
 1032ad8:	005be000 	.word	0x005be000
 1032adc:	cc1efb53 	.word	0xcc1efb53
 1032ae0:	1c0cea4f 	.word	0x1c0cea4f
 1032ae4:	c5a0f8c6 	.word	0xc5a0f8c6
 1032ae8:	5ea0f206 	.word	0x5ea0f206
 1032aec:	c060f8d2 	.word	0xc060f8d2
 1032af0:	c078f8c2 	.word	0xc078f8c2
 1032af4:	f8df6613 	.word	0xf8df6613
 1032af8:	f8d62e98 	.word	0xf8d62e98
 1032afc:	68123480 	.word	0x68123480
 1032b00:	c030f8de 	.word	0xc030f8de
 1032b04:	a018f8de 	.word	0xa018f8de
 1032b08:	a030f8ce 	.word	0xa030f8ce
 1032b0c:	fb6c109b 	.word	0xfb6c109b
 1032b10:	005b3312 	.word	0x005b3312
 1032b14:	0c6cea4f 	.word	0x0c6cea4f
 1032b18:	3018f8ce 	.word	0x3018f8ce
 1032b1c:	cc12fb53 	.word	0xcc12fb53
 1032b20:	3480f8d6 	.word	0x3480f8d6
 1032b24:	3018f8c9 	.word	0x3018f8c9
 1032b28:	0c8cea4f 	.word	0x0c8cea4f
 1032b2c:	3078f8d8 	.word	0x3078f8d8
 1032b30:	3480f8c6 	.word	0x3480f8c6
 1032b34:	0cecea4f 	.word	0x0cecea4f
 1032b38:	3e58f8df 	.word	0x3e58f8df
 1032b3c:	8060f8de 	.word	0x8060f8de
 1032b40:	f8de681b 	.word	0xf8de681b
 1032b44:	f8ce9048 	.word	0xf8ce9048
 1032b48:	fb689060 	.word	0xfb689060
 1032b4c:	ea4fcc13 	.word	0xea4fcc13
 1032b50:	ea4f0c4c 	.word	0xea4f0c4c
 1032b54:	f8ce0868 	.word	0xf8ce0868
 1032b58:	fb5cc048 	.word	0xfb5cc048
 1032b5c:	f8df8813 	.word	0xf8df8813
 1032b60:	f8d6ce38 	.word	0xf8d6ce38
 1032b64:	f8dc9630 	.word	0xf8dc9630
 1032b68:	f8dec000 	.word	0xf8dec000
 1032b6c:	f8c6a078 	.word	0xf8c6a078
 1032b70:	ea4fa630 	.word	0xea4fa630
 1032b74:	ea4f08c8 	.word	0xea4f08c8
 1032b78:	fb691828 	.word	0xfb691828
 1032b7c:	ea4f881c 	.word	0xea4f881c
 1032b80:	ea4f0848 	.word	0xea4f0848
 1032b84:	f8ce0969 	.word	0xf8ce0969
 1032b88:	fb588078 	.word	0xfb588078
 1032b8c:	f206991c 	.word	0xf206991c
 1032b90:	f8df6e30 	.word	0xf8df6e30
 1032b94:	f8de8e08 	.word	0xf8de8e08
 1032b98:	f8d8a030 	.word	0xf8d8a030
 1032b9c:	ea4f8000 	.word	0xea4f8000
 1032ba0:	ea4f1909 	.word	0xea4f1909
 1032ba4:	fb6a1929 	.word	0xfb6a1929
 1032ba8:	ea4f9918 	.word	0xea4f9918
 1032bac:	ea4f0949 	.word	0xea4f0949
 1032bb0:	fb590a6a 	.word	0xfb590a6a
 1032bb4:	ea4faa18 	.word	0xea4faa18
 1032bb8:	f8de1b0a 	.word	0xf8de1b0a
 1032bbc:	f8cea018 	.word	0xf8cea018
 1032bc0:	f8cea030 	.word	0xf8cea030
 1032bc4:	f8df9018 	.word	0xf8df9018
 1032bc8:	f8d69dd8 	.word	0xf8d69dd8
 1032bcc:	fb5aa5a0 	.word	0xfb5aa5a0
 1032bd0:	fb5bfa19 	.word	0xfb5bfa19
 1032bd4:	ea4fa919 	.word	0xea4fa919
 1032bd8:	f8ce0949 	.word	0xf8ce0949
 1032bdc:	f8df9048 	.word	0xf8df9048
 1032be0:	fb5b9dc4 	.word	0xfb5b9dc4
 1032be4:	ea4fa919 	.word	0xea4fa919
 1032be8:	f8ce0949 	.word	0xf8ce0949
 1032bec:	f8d69060 	.word	0xf8d69060
 1032bf0:	f8d69360 	.word	0xf8d69360
 1032bf4:	ea4fa6c0 	.word	0xea4fa6c0
 1032bf8:	fb6a09a9 	.word	0xfb6a09a9
 1032bfc:	ea4f9910 	.word	0xea4f9910
 1032c00:	ea4f0949 	.word	0xea4f0949
 1032c04:	fb590a6a 	.word	0xfb590a6a
 1032c08:	f8deaa10 	.word	0xf8deaa10
 1032c0c:	f8c60078 	.word	0xf8c60078
 1032c10:	f8ce06c0 	.word	0xf8ce06c0
 1032c14:	f2069078 	.word	0xf2069078
 1032c18:	ea4f60c0 	.word	0xea4f60c0
 1032c1c:	f8d00e8a 	.word	0xf8d00e8a
 1032c20:	ea4f9030 	.word	0xea4f9030
 1032c24:	fb690eae 	.word	0xfb690eae
 1032c28:	ea4fee11 	.word	0xea4fee11
 1032c2c:	ea4f0e4e 	.word	0xea4f0e4e
 1032c30:	fb5e0969 	.word	0xfb5e0969
 1032c34:	f8d09111 	.word	0xf8d09111
 1032c38:	f8c09018 	.word	0xf8c09018
 1032c3c:	f8c09030 	.word	0xf8c09030
 1032c40:	0089e018 	.word	0x0089e018
 1032c44:	e014f8dd 	.word	0xe014f8dd
 1032c48:	9060f8d0 	.word	0x9060f8d0
 1032c4c:	fb6910c9 	.word	0xfb6910c9
 1032c50:	ea4f111e 	.word	0xea4f111e
 1032c54:	f8dd0e69 	.word	0xf8dd0e69
 1032c58:	00499014 	.word	0x00499014
 1032c5c:	ee19fb51 	.word	0xee19fb51
 1032c60:	9048f8d0 	.word	0x9048f8d0
 1032c64:	9060f8c0 	.word	0x9060f8c0
 1032c68:	ea4f6481 	.word	0xea4f6481
 1032c6c:	f8dd01ce 	.word	0xf8dd01ce
 1032c70:	f8d6e004 	.word	0xf8d6e004
 1032c74:	11099750 	.word	0x11099750
 1032c78:	111efb69 	.word	0x111efb69
 1032c7c:	0e69ea4f 	.word	0x0e69ea4f
 1032c80:	9004f8dd 	.word	0x9004f8dd
 1032c84:	fb510049 	.word	0xfb510049
 1032c88:	f8d0ee19 	.word	0xf8d0ee19
 1032c8c:	f8c69078 	.word	0xf8c69078
 1032c90:	67819750 	.word	0x67819750
 1032c94:	7050f206 	.word	0x7050f206
 1032c98:	110eea4f 	.word	0x110eea4f
 1032c9c:	e000f8dd 	.word	0xe000f8dd
 1032ca0:	9030f8d0 	.word	0x9030f8d0
 1032ca4:	fb691109 	.word	0xfb691109
 1032ca8:	ea4f111e 	.word	0xea4f111e
 1032cac:	f8dd0e69 	.word	0xf8dd0e69
 1032cb0:	00499000 	.word	0x00499000
 1032cb4:	ee19fb51 	.word	0xee19fb51
 1032cb8:	1e0eea4f 	.word	0x1e0eea4f
 1032cbc:	e048f8c0 	.word	0xe048f8c0
 1032cc0:	e018f8d0 	.word	0xe018f8d0
 1032cc4:	e030f8c0 	.word	0xe030f8c0
 1032cc8:	69b96181 	.word	0x69b96181
 1032ccc:	e078f8d0 	.word	0xe078f8d0
 1032cd0:	fb6e1089 	.word	0xfb6e1089
 1032cd4:	00491112 	.word	0x00491112
 1032cd8:	0e6eea4f 	.word	0x0e6eea4f
 1032cdc:	e212fb51 	.word	0xe212fb51
 1032ce0:	e060f8d0 	.word	0xe060f8d0
 1032ce4:	e078f8c0 	.word	0xe078f8c0
 1032ce8:	00926601 	.word	0x00926601
 1032cec:	633969b9 	.word	0x633969b9
 1032cf0:	f8d610d2 	.word	0xf8d610d2
 1032cf4:	61b91360 	.word	0x61b91360
 1032cf8:	71e0f206 	.word	0x71e0f206
 1032cfc:	fb67698f 	.word	0xfb67698f
 1032d00:	00522213 	.word	0x00522213
 1032d04:	fb52107f 	.word	0xfb52107f
 1032d08:	f8d67313 	.word	0xf8d67313
 1032d0c:	618f77e0 	.word	0x618f77e0
 1032d10:	27e0f8c6 	.word	0x27e0f8c6
 1032d14:	6c8b00da 	.word	0x6c8b00da
 1032d18:	648f6b0f 	.word	0x648f6b0f
 1032d1c:	fb631112 	.word	0xfb631112
 1032d20:	0052221c 	.word	0x0052221c
 1032d24:	630a105b 	.word	0x630a105b
 1032d28:	331cfb52 	.word	0x331cfb52
 1032d2c:	6f8b011a 	.word	0x6f8b011a
 1032d30:	11126e0f 	.word	0x11126e0f
 1032d34:	2218fb63 	.word	0x2218fb63
 1032d38:	6f8a0053 	.word	0x6f8a0053
 1032d3c:	660b678f 	.word	0x660b678f
 1032d40:	6c801052 	.word	0x6c801052
 1032d44:	1c58f8df 	.word	0x1c58f8df
 1032d48:	2218fb53 	.word	0x2218fb53
 1032d4c:	fb500112 	.word	0xfb500112
 1032d50:	fb52f011 	.word	0xfb52f011
 1032d54:	00490111 	.word	0x00490111
 1032d58:	1870f8c6 	.word	0x1870f8c6
 1032d5c:	1c44f8df 	.word	0x1c44f8df
 1032d60:	0011fb52 	.word	0x0011fb52
 1032d64:	f8c60040 	.word	0xf8c60040
 1032d68:	69200888 	.word	0x69200888
 1032d6c:	61201c40 	.word	0x61201c40
 1032d70:	f4ff2806 	.word	0xf4ff2806
 1032d74:	9804ad71 	.word	0x9804ad71
 1032d78:	28017880 	.word	0x28017880
 1032d7c:	85f3f040 	.word	0x85f3f040
 1032d80:	68409802 	.word	0x68409802
 1032d84:	d50b0200 	.word	0xd50b0200
 1032d88:	68409802 	.word	0x68409802
 1032d8c:	f4209902 	.word	0xf4209902
 1032d90:	60480000 	.word	0x60480000
 1032d94:	f8df2100 	.word	0xf8df2100
 1032d98:	64810c80 	.word	0x64810c80
 1032d9c:	650164c1 	.word	0x650164c1
 1032da0:	68409802 	.word	0x68409802
 1032da4:	d50d0300 	.word	0xd50d0300
 1032da8:	68409802 	.word	0x68409802
 1032dac:	f4209902 	.word	0xf4209902
 1032db0:	60482000 	.word	0x60482000
 1032db4:	f8df2100 	.word	0xf8df2100
 1032db8:	63410c60 	.word	0x63410c60
 1032dbc:	63c16381 	.word	0x63c16381
 1032dc0:	64416401 	.word	0x64416401
 1032dc4:	2c54f8df 	.word	0x2c54f8df
 1032dc8:	801cf8d5 	.word	0x801cf8d5
 1032dcc:	cc50f8df 	.word	0xcc50f8df
 1032dd0:	7c50f8df 	.word	0x7c50f8df
 1032dd4:	0100e9d2 	.word	0x0100e9d2
 1032dd8:	fb8869aa 	.word	0xfb8869aa
 1032ddc:	0d922302 	.word	0x0d922302
 1032de0:	2283ea42 	.word	0x2283ea42
 1032de4:	f8df1880 	.word	0xf8df1880
 1032de8:	eb412c34 	.word	0xeb412c34
 1032dec:	e9c251a3 	.word	0xe9c251a3
 1032df0:	46160100 	.word	0x46160100
 1032df4:	6a6b6a2a 	.word	0x6a6b6a2a
 1032df8:	0102e9d6 	.word	0x0102e9d6
 1032dfc:	fdd4f000 	.word	0xfdd4f000
 1032e00:	0102e9c6 	.word	0x0102e9c6
 1032e04:	6aeb6aaa 	.word	0x6aeb6aaa
 1032e08:	0104e9d6 	.word	0x0104e9d6
 1032e0c:	fdccf000 	.word	0xfdccf000
 1032e10:	0104e9c6 	.word	0x0104e9c6
 1032e14:	07d4f8df 	.word	0x07d4f8df
 1032e18:	1004f8dc 	.word	0x1004f8dc
 1032e1c:	0468f8d0 	.word	0x0468f8d0
 1032e20:	2306e9d6 	.word	0x2306e9d6
 1032e24:	fdc9f000 	.word	0xfdc9f000
 1032e28:	0106e9c6 	.word	0x0106e9c6
 1032e2c:	0008f8dc 	.word	0x0008f8dc
 1032e30:	100cf8dc 	.word	0x100cf8dc
 1032e34:	2308e9d6 	.word	0x2308e9d6
 1032e38:	fdbff000 	.word	0xfdbff000
 1032e3c:	0108e9c6 	.word	0x0108e9c6
 1032e40:	0010f8dc 	.word	0x0010f8dc
 1032e44:	1014f8dc 	.word	0x1014f8dc
 1032e48:	230ae9d6 	.word	0x230ae9d6
 1032e4c:	fdb5f000 	.word	0xfdb5f000
 1032e50:	010ae9c6 	.word	0x010ae9c6
 1032e54:	1bd0f8df 	.word	0x1bd0f8df
 1032e58:	0790f8df 	.word	0x0790f8df
 1032e5c:	0870f8d0 	.word	0x0870f8d0
 1032e60:	e9d69100 	.word	0xe9d69100
 1032e64:	69c92312 	.word	0x69c92312
 1032e68:	fda7f000 	.word	0xfda7f000
 1032e6c:	0112e9c6 	.word	0x0112e9c6
 1032e70:	99009800 	.word	0x99009800
 1032e74:	6a496880 	.word	0x6a496880
 1032e78:	2314e9d6 	.word	0x2314e9d6
 1032e7c:	fd9df000 	.word	0xfd9df000
 1032e80:	0114e9c6 	.word	0x0114e9c6
 1032e84:	99009800 	.word	0x99009800
 1032e88:	6ac96900 	.word	0x6ac96900
 1032e8c:	2316e9d6 	.word	0x2316e9d6
 1032e90:	fd93f000 	.word	0xfd93f000
 1032e94:	0116e9c6 	.word	0x0116e9c6
 1032e98:	0750f8df 	.word	0x0750f8df
 1032e9c:	f8d069f9 	.word	0xf8d069f9
 1032ea0:	e9d60678 	.word	0xe9d60678
 1032ea4:	f0002318 	.word	0xf0002318
 1032ea8:	e9c6fd88 	.word	0xe9c6fd88
 1032eac:	68b80118 	.word	0x68b80118
 1032eb0:	e9d66a79 	.word	0xe9d66a79
 1032eb4:	f000231a 	.word	0xf000231a
 1032eb8:	e9c6fd80 	.word	0xe9c6fd80
 1032ebc:	693a011a 	.word	0x693a011a
 1032ec0:	e9d66afb 	.word	0xe9d66afb
 1032ec4:	f000011c 	.word	0xf000011c
 1032ec8:	e9c6fd6f 	.word	0xe9c6fd6f
 1032ecc:	9a00011c 	.word	0x9a00011c
 1032ed0:	010ce9d2 	.word	0x010ce9d2
 1032ed4:	f00069aa 	.word	0xf00069aa
 1032ed8:	e9c2fd79 	.word	0xe9c2fd79
 1032edc:	9a00010c 	.word	0x9a00010c
 1032ee0:	010ee9d2 	.word	0x010ee9d2
 1032ee4:	f0006a2a 	.word	0xf0006a2a
 1032ee8:	e9c2fd71 	.word	0xe9c2fd71
 1032eec:	9a00010e 	.word	0x9a00010e
 1032ef0:	0110e9d2 	.word	0x0110e9d2
 1032ef4:	f0006aaa 	.word	0xf0006aaa
 1032ef8:	e9c2fd69 	.word	0xe9c2fd69
 1032efc:	9a000110 	.word	0x9a000110
 1032f00:	0116e9d2 	.word	0x0116e9d2
 1032f04:	26e4f8df 	.word	0x26e4f8df
 1032f08:	2468f8d2 	.word	0x2468f8d2
 1032f0c:	fd5ef000 	.word	0xfd5ef000
 1032f10:	0116e9c2 	.word	0x0116e9c2
 1032f14:	e9d29a00 	.word	0xe9d29a00
 1032f18:	f8dc0118 	.word	0xf8dc0118
 1032f1c:	f0002008 	.word	0xf0002008
 1032f20:	e9c2fd55 	.word	0xe9c2fd55
 1032f24:	9a000118 	.word	0x9a000118
 1032f28:	011ae9d2 	.word	0x011ae9d2
 1032f2c:	2010f8dc 	.word	0x2010f8dc
 1032f30:	fd4cf000 	.word	0xfd4cf000
 1032f34:	011ae9c2 	.word	0x011ae9c2
 1032f38:	2af0f8df 	.word	0x2af0f8df
 1032f3c:	0100e9d2 	.word	0x0100e9d2
 1032f40:	2308fb88 	.word	0x2308fb88
 1032f44:	ea420d92 	.word	0xea420d92
 1032f48:	18802283 	.word	0x18802283
 1032f4c:	2adcf8df 	.word	0x2adcf8df
 1032f50:	bf00e002 	.word	0xbf00e002
 1032f54:	80000070 	.word	0x80000070
 1032f58:	5193eb41 	.word	0x5193eb41
 1032f5c:	0100e9c2 	.word	0x0100e9c2
 1032f60:	6a684696 	.word	0x6a684696
 1032f64:	e9de4601 	.word	0xe9de4601
 1032f68:	fb812302 	.word	0xfb812302
 1032f6c:	0d800100 	.word	0x0d800100
 1032f70:	2081ea40 	.word	0x2081ea40
 1032f74:	eb431810 	.word	0xeb431810
 1032f78:	e9ce5191 	.word	0xe9ce5191
 1032f7c:	6ae80102 	.word	0x6ae80102
 1032f80:	e9de4601 	.word	0xe9de4601
 1032f84:	fb812304 	.word	0xfb812304
 1032f88:	0d800100 	.word	0x0d800100
 1032f8c:	2081ea40 	.word	0x2081ea40
 1032f90:	eb431810 	.word	0xeb431810
 1032f94:	e9ce5191 	.word	0xe9ce5191
 1032f98:	6a680104 	.word	0x6a680104
 1032f9c:	0008eba0 	.word	0x0008eba0
 1032fa0:	fba017c1 	.word	0xfba017c1
 1032fa4:	e9de2300 	.word	0xe9de2300
 1032fa8:	fb006710 	.word	0xfb006710
 1032fac:	fb013301 	.word	0xfb013301
 1032fb0:	0d923300 	.word	0x0d923300
 1032fb4:	2283ea42 	.word	0x2283ea42
 1032fb8:	eb4718b0 	.word	0xeb4718b0
 1032fbc:	e9ce51a3 	.word	0xe9ce51a3
 1032fc0:	6ae80110 	.word	0x6ae80110
 1032fc4:	1a406a69 	.word	0x1a406a69
 1032fc8:	fba017c1 	.word	0xfba017c1
 1032fcc:	e9de6700 	.word	0xe9de6700
 1032fd0:	fb002312 	.word	0xfb002312
 1032fd4:	fb017701 	.word	0xfb017701
 1032fd8:	0db67700 	.word	0x0db67700
 1032fdc:	2687ea46 	.word	0x2687ea46
 1032fe0:	eb431990 	.word	0xeb431990
 1032fe4:	e9ce51a7 	.word	0xe9ce51a7
 1032fe8:	6ae80112 	.word	0x6ae80112
 1032fec:	0000eba8 	.word	0x0000eba8
 1032ff0:	fba017c1 	.word	0xfba017c1
 1032ff4:	e9de6700 	.word	0xe9de6700
 1032ff8:	fb002314 	.word	0xfb002314
 1032ffc:	fb017701 	.word	0xfb017701
 1033000:	0db67700 	.word	0x0db67700
 1033004:	2687ea46 	.word	0x2687ea46
 1033008:	eb431990 	.word	0xeb431990
 103300c:	e9ce51a7 	.word	0xe9ce51a7
 1033010:	e9de0114 	.word	0xe9de0114
 1033014:	f8dc0108 	.word	0xf8dc0108
 1033018:	46132004 	.word	0x46132004
 103301c:	2302fb83 	.word	0x2302fb83
 1033020:	ea420d92 	.word	0xea420d92
 1033024:	18802283 	.word	0x18802283
 1033028:	5193eb41 	.word	0x5193eb41
 103302c:	0108e9ce 	.word	0x0108e9ce
 1033030:	200cf8dc 	.word	0x200cf8dc
 1033034:	e9de4613 	.word	0xe9de4613
 1033038:	fb83010a 	.word	0xfb83010a
 103303c:	0d922302 	.word	0x0d922302
 1033040:	2283ea42 	.word	0x2283ea42
 1033044:	eb411880 	.word	0xeb411880
 1033048:	e9ce5193 	.word	0xe9ce5193
 103304c:	f8dc010a 	.word	0xf8dc010a
 1033050:	46132014 	.word	0x46132014
 1033054:	010ce9de 	.word	0x010ce9de
 1033058:	2302fb83 	.word	0x2302fb83
 103305c:	ea420d92 	.word	0xea420d92
 1033060:	18802283 	.word	0x18802283
 1033064:	5193eb41 	.word	0x5193eb41
 1033068:	010ce9ce 	.word	0x010ce9ce
 103306c:	000cf8dc 	.word	0x000cf8dc
 1033070:	1004f8dc 	.word	0x1004f8dc
 1033074:	17c11a40 	.word	0x17c11a40
 1033078:	6700fba0 	.word	0x6700fba0
 103307c:	2316e9de 	.word	0x2316e9de
 1033080:	7701fb00 	.word	0x7701fb00
 1033084:	7700fb01 	.word	0x7700fb01
 1033088:	ea460db6 	.word	0xea460db6
 103308c:	19902687 	.word	0x19902687
 1033090:	51a7eb43 	.word	0x51a7eb43
 1033094:	0116e9ce 	.word	0x0116e9ce
 1033098:	0014f8dc 	.word	0x0014f8dc
 103309c:	100cf8dc 	.word	0x100cf8dc
 10330a0:	17c11a40 	.word	0x17c11a40
 10330a4:	6700fba0 	.word	0x6700fba0
 10330a8:	2318e9de 	.word	0x2318e9de
 10330ac:	7701fb00 	.word	0x7701fb00
 10330b0:	7700fb01 	.word	0x7700fb01
 10330b4:	ea460db6 	.word	0xea460db6
 10330b8:	19902687 	.word	0x19902687
 10330bc:	51a7eb43 	.word	0x51a7eb43
 10330c0:	0118e9ce 	.word	0x0118e9ce
 10330c4:	0004f8dc 	.word	0x0004f8dc
 10330c8:	1014f8dc 	.word	0x1014f8dc
 10330cc:	17c11a40 	.word	0x17c11a40
 10330d0:	6700fba0 	.word	0x6700fba0
 10330d4:	231ae9de 	.word	0x231ae9de
 10330d8:	7701fb00 	.word	0x7701fb00
 10330dc:	7700fb01 	.word	0x7700fb01
 10330e0:	ea460db6 	.word	0xea460db6
 10330e4:	19902687 	.word	0x19902687
 10330e8:	51a7eb43 	.word	0x51a7eb43
 10330ec:	011ae9ce 	.word	0x011ae9ce
 10330f0:	6a202500 	.word	0x6a202500
 10330f4:	62201c40 	.word	0x62201c40
 10330f8:	04f0f8df 	.word	0x04f0f8df
 10330fc:	14ecf8df 	.word	0x14ecf8df
 1033100:	0ac5eb00 	.word	0x0ac5eb00
 1033104:	f8da2028 	.word	0xf8da2028
 1033108:	f8da349c 	.word	0xf8da349c
 103310c:	fb00246c 	.word	0xfb00246c
 1033110:	f8df1805 	.word	0xf8df1805
 1033114:	f6080904 	.word	0xf6080904
 1033118:	eb0046b0 	.word	0xeb0046b0
 103311c:	2b010785 	.word	0x2b010785
 1033120:	2a01db0a 	.word	0x2a01db0a
 1033124:	f898da70 	.word	0xf898da70
 1033128:	28010cb0 	.word	0x28010cb0
 103312c:	7070d16e 	.word	0x7070d16e
 1033130:	1c406870 	.word	0x1c406870
 1033134:	e0696070 	.word	0xe0696070
 1033138:	d5652b00 	.word	0xd5652b00
 103313c:	d4632a00 	.word	0xd4632a00
 1033140:	70702002 	.word	0x70702002
 1033144:	030917d1 	.word	0x030917d1
 1033148:	5112ea41 	.word	0x5112ea41
 103314c:	1ad20310 	.word	0x1ad20310
 1033150:	f8d417d3 	.word	0xf8d417d3
 1033154:	f0019020 	.word	0xf0019020
 1033158:	ebc0fb39 	.word	0xebc0fb39
 103315c:	60b03009 	.word	0x60b03009
 1033160:	f89867b8 	.word	0xf89867b8
 1033164:	28010cb0 	.word	0x28010cb0
 1033168:	6870d122 	.word	0x6870d122
 103316c:	247cf8df 	.word	0x247cf8df
 1033170:	60701c40 	.word	0x60701c40
 1033174:	69a02128 	.word	0x69a02128
 1033178:	2000fb01 	.word	0x2000fb01
 103317c:	4250f04f 	.word	0x4250f04f
 1033180:	8cb4f8d0 	.word	0x8cb4f8d0
 1033184:	fba22307 	.word	0xfba22307
 1033188:	fb030108 	.word	0xfb030108
 103318c:	68b21108 	.word	0x68b21108
 1033190:	1ad268f3 	.word	0x1ad268f3
 1033194:	f0012300 	.word	0xf0012300
 1033198:	6170fb3b 	.word	0x6170fb3b
 103319c:	bf00e00d 	.word	0xbf00e00d
 10331a0:	00003478 	.word	0x00003478
 10331a4:	80000050 	.word	0x80000050
 10331a8:	00003480 	.word	0x00003480
 10331ac:	0000349c 	.word	0x0000349c
 10331b0:	f8882001 	.word	0xf8882001
 10331b4:	68b00cb0 	.word	0x68b00cb0
 10331b8:	200160f0 	.word	0x200160f0
 10331bc:	f805fa00 	.word	0xf805fa00
 10331c0:	0428f8df 	.word	0x0428f8df
 10331c4:	00c5eb00 	.word	0x00c5eb00
 10331c8:	12c8f600 	.word	0x12c8f600
 10331cc:	0100e9d2 	.word	0x0100e9d2
 10331d0:	17d36a22 	.word	0x17d36a22
 10331d4:	fb1cf001 	.word	0xfb1cf001
 10331d8:	ea400c00 	.word	0xea400c00
 10331dc:	28084001 	.word	0x28084001
 10331e0:	2001d307 	.word	0x2001d307
 10331e4:	f8df61b0 	.word	0xf8df61b0
 10331e8:	68800830 	.word	0x68800830
 10331ec:	0000ea48 	.word	0x0000ea48
 10331f0:	2000e006 	.word	0x2000e006
 10331f4:	f8df61b0 	.word	0xf8df61b0
 10331f8:	68800820 	.word	0x68800820
 10331fc:	0008ea20 	.word	0x0008ea20
 1033200:	1814f8df 	.word	0x1814f8df
 1033204:	e0016088 	.word	0xe0016088
 1033208:	70702000 	.word	0x70702000
 103320c:	0364f8da 	.word	0x0364f8da
 1033210:	bf482800 	.word	0xbf482800
 1033214:	6cb94240 	.word	0x6cb94240
 1033218:	bf384281 	.word	0xbf384281
 103321c:	1c6d4601 	.word	0x1c6d4601
 1033220:	2d0364b9 	.word	0x2d0364b9
 1033224:	af68f4ff 	.word	0xaf68f4ff
 1033228:	22002300 	.word	0x22002300
 103322c:	03bcf8df 	.word	0x03bcf8df
 1033230:	13b8f8df 	.word	0x13b8f8df
 1033234:	00c3eb00 	.word	0x00c3eb00
 1033238:	05c3eb01 	.word	0x05c3eb01
 103323c:	0360f8d0 	.word	0x0360f8d0
 1033240:	5138f605 	.word	0x5138f605
 1033244:	6700e9d1 	.word	0x6700e9d1
 1033248:	eb471836 	.word	0xeb471836
 103324c:	e9c177e0 	.word	0xe9c177e0
 1033250:	18826700 	.word	0x18826700
 1033254:	bf482800 	.word	0xbf482800
 1033258:	f8df4240 	.word	0xf8df4240
 103325c:	eb0117bc 	.word	0xeb0117bc
 1033260:	6b4d0183 	.word	0x6b4d0183
 1033264:	bf384285 	.word	0xbf384285
 1033268:	1c5b4605 	.word	0x1c5b4605
 103326c:	2b03634d 	.word	0x2b03634d
 1033270:	f8dfd3dc 	.word	0xf8dfd3dc
 1033274:	17d137bc 	.word	0x17d137bc
 1033278:	6700e9d3 	.word	0x6700e9d3
 103327c:	414f18b6 	.word	0x414f18b6
 1033280:	6700e9c3 	.word	0x6700e9c3
 1033284:	fba29b00 	.word	0xfba29b00
 1033288:	e9d38902 	.word	0xe9d38902
 103328c:	fb026712 	.word	0xfb026712
 1033290:	fb019901 	.word	0xfb019901
 1033294:	ea4f9902 	.word	0xea4f9902
 1033298:	ea405098 	.word	0xea405098
 103329c:	18702189 	.word	0x18702189
 10332a0:	5199eb47 	.word	0x5199eb47
 10332a4:	0112e9c3 	.word	0x0112e9c3
 10332a8:	bf482a00 	.word	0xbf482a00
 10332ac:	f8df4252 	.word	0xf8df4252
 10332b0:	6c000768 	.word	0x6c000768
 10332b4:	bf3c4290 	.word	0xbf3c4290
 10332b8:	075cf8df 	.word	0x075cf8df
 10332bc:	99036402 	.word	0x99036402
 10332c0:	0534f8df 	.word	0x0534f8df
 10332c4:	f8d06d89 	.word	0xf8d06d89
 10332c8:	f8df0094 	.word	0xf8df0094
 10332cc:	f8df2768 	.word	0xf8df2768
 10332d0:	fb315764 	.word	0xfb315764
 10332d4:	e9d2f010 	.word	0xe9d2f010
 10332d8:	00806700 	.word	0x00806700
 10332dc:	183217c1 	.word	0x183217c1
 10332e0:	0301eb47 	.word	0x0301eb47
 10332e4:	2300e9c5 	.word	0x2300e9c5
 10332e8:	e9d29a00 	.word	0xe9d29a00
 10332ec:	fba06714 	.word	0xfba06714
 10332f0:	fb002300 	.word	0xfb002300
 10332f4:	fb013301 	.word	0xfb013301
 10332f8:	0d923300 	.word	0x0d923300
 10332fc:	2283ea42 	.word	0x2283ea42
 1033300:	18b29900 	.word	0x18b29900
 1033304:	5393eb47 	.word	0x5393eb47
 1033308:	2314e9c1 	.word	0x2314e9c1
 103330c:	bf482800 	.word	0xbf482800
 1033310:	f8df4240 	.word	0xf8df4240
 1033314:	6c491704 	.word	0x6c491704
 1033318:	bf3c4281 	.word	0xbf3c4281
 103331c:	16f8f8df 	.word	0x16f8f8df
 1033320:	f8df6448 	.word	0xf8df6448
 1033324:	e9d00714 	.word	0xe9d00714
 1033328:	98032300 	.word	0x98032300
 103332c:	eb126dc1 	.word	0xeb126dc1
 1033330:	f8df5041 	.word	0xf8df5041
 1033334:	eb432704 	.word	0xeb432704
 1033338:	e9c221e1 	.word	0xe9c221e1
 103333c:	4aab0100 	.word	0x4aab0100
 1033340:	2e70f8d2 	.word	0x2e70f8d2
 1033344:	73fcf641 	.word	0x73fcf641
 1033348:	429a401a 	.word	0x429a401a
 103334c:	f8dfd118 	.word	0xf8dfd118
 1033350:	f8df26ec 	.word	0xf8df26ec
 1033354:	fb5136ec 	.word	0xfb5136ec
 1033358:	f8df2013 	.word	0xf8df2013
 103335c:	630816bc 	.word	0x630816bc
 1033360:	f8df2200 	.word	0xf8df2200
 1033364:	e9c116d4 	.word	0xe9c116d4
 1033368:	99032200 	.word	0x99032200
 103336c:	fb806e09 	.word	0xfb806e09
 1033370:	0a000101 	.word	0x0a000101
 1033374:	6001ea40 	.word	0x6001ea40
 1033378:	6e499903 	.word	0x6e499903
 103337c:	61601808 	.word	0x61601808
 1033380:	2474f8df 	.word	0x2474f8df
 1033384:	791269a1 	.word	0x791269a1
 1033388:	06b8f8df 	.word	0x06b8f8df
 103338c:	0230f002 	.word	0x0230f002
 1033390:	d0202a10 	.word	0xd0202a10
 1033394:	d00a2a20 	.word	0xd00a2a20
 1033398:	d01a2a30 	.word	0xd01a2a30
 103339c:	2ab26a22 	.word	0x2ab26a22
 10333a0:	6841db1a 	.word	0x6841db1a
 10333a4:	d0162901 	.word	0xd0162901
 10333a8:	29016ac1 	.word	0x29016ac1
 10333ac:	2101d10e 	.word	0x2101d10e
 10333b0:	bf00e012 	.word	0xbf00e012
 10333b4:	000034a0 	.word	0x000034a0
 10333b8:	00003494 	.word	0x00003494
 10333bc:	00003498 	.word	0x00003498
 10333c0:	80000010 	.word	0x80000010
 10333c4:	201006b0 	.word	0x201006b0
 10333c8:	d5555555 	.word	0xd5555555
 10333cc:	29016d41 	.word	0x29016d41
 10333d0:	2102d101 	.word	0x2102d101
 10333d4:	2100e000 	.word	0x2100e000
 10333d8:	263cf8df 	.word	0x263cf8df
 10333dc:	3638f8df 	.word	0x3638f8df
 10333e0:	61a16892 	.word	0x61a16892
 10333e4:	0218f022 	.word	0x0218f022
 10333e8:	02c1ea42 	.word	0x02c1ea42
 10333ec:	2228609a 	.word	0x2228609a
 10333f0:	fb024b7e 	.word	0xfb024b7e
 10333f4:	6a223101 	.word	0x6a223101
 10333f8:	db0c2ab2 	.word	0xdb0c2ab2
 10333fc:	2618f8df 	.word	0x2618f8df
 1033400:	3cc4f8d1 	.word	0x3cc4f8d1
 1033404:	4b7961d3 	.word	0x4b7961d3
 1033408:	3cc4f8d3 	.word	0x3cc4f8d3
 103340c:	6a836213 	.word	0x6a836213
 1033410:	62536d00 	.word	0x62536d00
 1033414:	f8916290 	.word	0xf8916290
 1033418:	b9200cb1 	.word	0xb9200cb1
 103341c:	99026a20 	.word	0x99026a20
 1033420:	42886909 	.word	0x42886909
 1033424:	f8dfd361 	.word	0xf8dfd361
 1033428:	f8df15f0 	.word	0xf8df15f0
 103342c:	690905ec 	.word	0x690905ec
 1033430:	1c496900 	.word	0x1c496900
 1033434:	b2890c00 	.word	0xb2890c00
 1033438:	4000ea41 	.word	0x4000ea41
 103343c:	15d8f8df 	.word	0x15d8f8df
 1033440:	25006108 	.word	0x25006108
 1033444:	49692028 	.word	0x49692028
 1033448:	1005fb00 	.word	0x1005fb00
 103344c:	f8d06a21 	.word	0xf8d06a21
 1033450:	1a8a2cc0 	.word	0x1a8a2cc0
 1033454:	f8c06a21 	.word	0xf8c06a21
 1033458:	f6001cc0 	.word	0xf6001cc0
 103345c:	496348c0 	.word	0x496348c0
 1033460:	01c5eb01 	.word	0x01c5eb01
 1033464:	11a8f601 	.word	0x11a8f601
 1033468:	6700e9d1 	.word	0x6700e9d1
 103346c:	0104e9d8 	.word	0x0104e9d8
 1033470:	eb671a30 	.word	0xeb671a30
 1033474:	23000101 	.word	0x23000101
 1033478:	f9caf001 	.word	0xf9caf001
 103347c:	ea400a00 	.word	0xea400a00
 1033480:	21016001 	.word	0x21016001
 1033484:	0218f105 	.word	0x0218f105
 1033488:	e9c84091 	.word	0xe9c84091
 103348c:	4ada6704 	.word	0x4ada6704
 1033490:	0285eb02 	.word	0x0285eb02
 1033494:	42836d53 	.word	0x42836d53
 1033498:	f8dfd304 	.word	0xf8dfd304
 103349c:	6880057c 	.word	0x6880057c
 10334a0:	e00c4308 	.word	0xe00c4308
 10334a4:	f1052301 	.word	0xf1052301
 10334a8:	6c92061c 	.word	0x6c92061c
 10334ac:	429040b3 	.word	0x429040b3
 10334b0:	0564f8df 	.word	0x0564f8df
 10334b4:	bf2e6880 	.word	0xbf2e6880
 10334b8:	43884318 	.word	0x43884318
 10334bc:	f8df4398 	.word	0xf8df4398
 10334c0:	60881558 	.word	0x60881558
 10334c4:	2d031c6d 	.word	0x2d031c6d
 10334c8:	2120d3bc 	.word	0x2120d3bc
 10334cc:	faa1f000 	.word	0xfaa1f000
 10334d0:	4a4669a0 	.word	0x4a4669a0
 10334d4:	fb012128 	.word	0xfb012128
 10334d8:	f8902000 	.word	0xf8902000
 10334dc:	28020cb1 	.word	0x28020cb1
 10334e0:	6a20d005 	.word	0x6a20d005
 10334e4:	69099902 	.word	0x69099902
 10334e8:	f4fe4288 	.word	0xf4fe4288
 10334ec:	6a20ad8e 	.word	0x6a20ad8e
 10334f0:	1a406a61 	.word	0x1a406a61
 10334f4:	6a209001 	.word	0x6a209001
 10334f8:	99016260 	.word	0x99016260
 10334fc:	0518f8df 	.word	0x0518f8df
 1033500:	202062c1 	.word	0x202062c1
 1033504:	eb014939 	.word	0xeb014939
 1033508:	1e400180 	.word	0x1e400180
 103350c:	2e94f8d1 	.word	0x2e94f8d1
 1033510:	2e98f8c1 	.word	0x2e98f8c1
 1033514:	daf52801 	.word	0xdaf52801
 1033518:	21649801 	.word	0x21649801
 103351c:	01004348 	.word	0x01004348
 1033520:	980362a0 	.word	0x980362a0
 1033524:	60819901 	.word	0x60819901
 1033528:	48302100 	.word	0x48302100
 103352c:	1f1cf8c0 	.word	0x1f1cf8c0
 1033530:	4a2e2000 	.word	0x4a2e2000
 1033534:	f8d1492d 	.word	0xf8d1492d
 1033538:	eb021f1c 	.word	0xeb021f1c
 103353c:	1c400280 	.word	0x1c400280
 1033540:	2e98f8d2 	.word	0x2e98f8d2
 1033544:	4a291851 	.word	0x4a291851
 1033548:	1f1cf8c2 	.word	0x1f1cf8c2
 103354c:	dbf02820 	.word	0xdbf02820
 1033550:	0010f101 	.word	0x0010f101
 1033554:	09409903 	.word	0x09409903
 1033558:	98026048 	.word	0x98026048
 103355c:	07c06840 	.word	0x07c06840
 1033560:	f000d502 	.word	0xf000d502
 1033564:	e006fed1 	.word	0xe006fed1
 1033568:	21009803 	.word	0x21009803
 103356c:	980360c1 	.word	0x980360c1
 1033570:	98036101 	.word	0x98036101
 1033574:	25006141 	.word	0x25006141
 1033578:	eb00489f 	.word	0xeb00489f
 103357c:	f8da0a85 	.word	0xf8da0a85
 1033580:	28000018 	.word	0x28000018
 1033584:	8193f140 	.word	0x8193f140
 1033588:	f0004629 	.word	0xf0004629
 103358c:	20c8ff51 	.word	0x20c8ff51
 1033590:	f205fb00 	.word	0xf205fb00
 1033594:	eb024815 	.word	0xeb024815
 1033598:	f50e0e00 	.word	0xf50e0e00
 103359c:	e9d36327 	.word	0xe9d36327
 10335a0:	f5100100 	.word	0xf5100100
 10335a4:	f1417600 	.word	0xf1417600
 10335a8:	0ab60700 	.word	0x0ab60700
 10335ac:	5687ea46 	.word	0x5687ea46
 10335b0:	0494f8df 	.word	0x0494f8df
 10335b4:	fba012bf 	.word	0xfba012bf
 10335b8:	fb008906 	.word	0xfb008906
 10335bc:	f1189907 	.word	0xf1189907
 10335c0:	f1495000 	.word	0xf1495000
 10335c4:	0f800100 	.word	0x0f800100
 10335c8:	3018f8da 	.word	0x3018f8da
 10335cc:	0081ea40 	.word	0x0081ea40
 10335d0:	f4031789 	.word	0xf4031789
 10335d4:	f1b3037f 	.word	0xf1b3037f
 10335d8:	d20f1f01 	.word	0xd20f1f01
 10335dc:	6b9b9b02 	.word	0x6b9b9b02
 10335e0:	d50b2b00 	.word	0xd50b2b00
 10335e4:	6bde9b02 	.word	0x6bde9b02
 10335e8:	bf00e015 	.word	0xbf00e015
 10335ec:	20100368 	.word	0x20100368
 10335f0:	000034b8 	.word	0x000034b8
 10335f4:	000034a4 	.word	0x000034a4
 10335f8:	000034cc 	.word	0x000034cc
 10335fc:	3018f8da 	.word	0x3018f8da
 1033600:	037ff403 	.word	0x037ff403
 1033604:	3f40f5b3 	.word	0x3f40f5b3
 1033608:	9b02d808 	.word	0x9b02d808
 103360c:	011b6b9b 	.word	0x011b6b9b
 1033610:	9b02d504 	.word	0x9b02d504
 1033614:	1b806c1e 	.word	0x1b806c1e
 1033618:	71e6eb61 	.word	0x71e6eb61
 103361c:	3018f8da 	.word	0x3018f8da
 1033620:	0800f1d0 	.word	0x0800f1d0
 1033624:	0941eb61 	.word	0x0941eb61
 1033628:	037ff403 	.word	0x037ff403
 103362c:	1f01f1b3 	.word	0x1f01f1b3
 1033630:	9b02d21d 	.word	0x9b02d21d
 1033634:	075b685b 	.word	0x075b685b
 1033638:	2900d519 	.word	0x2900d519
 103363c:	4680bfa4 	.word	0x4680bfa4
 1033640:	9b024689 	.word	0x9b024689
 1033644:	27006ade 	.word	0x27006ade
 1033648:	dc0a45b9 	.word	0xdc0a45b9
 103364c:	45b0db01 	.word	0x45b0db01
 1033650:	f8dfd207 	.word	0xf8dfd207
 1033654:	689b33c4 	.word	0x689b33c4
 1033658:	46012000 	.word	0x46012000
 103365c:	1380f443 	.word	0x1380f443
 1033660:	f8dfe028 	.word	0xf8dfe028
 1033664:	689b33b4 	.word	0x689b33b4
 1033668:	1380f423 	.word	0x1380f423
 103366c:	f8dae022 	.word	0xf8dae022
 1033670:	f4033018 	.word	0xf4033018
 1033674:	f5b3037f 	.word	0xf5b3037f
 1033678:	d81d3f40 	.word	0xd81d3f40
 103367c:	685b9b02 	.word	0x685b9b02
 1033680:	d519079b 	.word	0xd519079b
 1033684:	bfa42900 	.word	0xbfa42900
 1033688:	46894680 	.word	0x46894680
 103368c:	6b1e9b02 	.word	0x6b1e9b02
 1033690:	45b92700 	.word	0x45b92700
 1033694:	db01dc0a 	.word	0xdb01dc0a
 1033698:	d20745b0 	.word	0xd20745b0
 103369c:	3378f8df 	.word	0x3378f8df
 10336a0:	2000689b 	.word	0x2000689b
 10336a4:	f4434601 	.word	0xf4434601
 10336a8:	e0032300 	.word	0xe0032300
 10336ac:	689b4bda 	.word	0x689b4bda
 10336b0:	2300f423 	.word	0x2300f423
 10336b4:	60b34ed8 	.word	0x60b34ed8
 10336b8:	3018f8da 	.word	0x3018f8da
 10336bc:	d409015b 	.word	0xd409015b
 10336c0:	3388f8df 	.word	0x3388f8df
 10336c4:	03c5eb03 	.word	0x03c5eb03
 10336c8:	6764e9d3 	.word	0x6764e9d3
 10336cc:	414f1836 	.word	0x414f1836
 10336d0:	6764e9c3 	.word	0x6764e9c3
 10336d4:	3600f60e 	.word	0x3600f60e
 10336d8:	e9d64fdd 	.word	0xe9d64fdd
 10336dc:	eb188904 	.word	0xeb188904
 10336e0:	eb490300 	.word	0xeb490300
 10336e4:	e9c60901 	.word	0xe9c60901
 10336e8:	eb023904 	.word	0xeb023904
 10336ec:	23200c07 	.word	0x23200c07
 10336f0:	0283eb0c 	.word	0x0283eb0c
 10336f4:	f8d21e5b 	.word	0xf8d21e5b
 10336f8:	f8c27a78 	.word	0xf8c27a78
 10336fc:	2b017a7c 	.word	0x2b017a7c
 1033700:	f60edaf6 	.word	0xf60edaf6
 1033704:	f50e2770 	.word	0xf50e2770
 1033708:	60f86230 	.word	0x60f86230
 103370c:	e9c22000 	.word	0xe9c22000
 1033710:	46800000 	.word	0x46800000
 1033714:	6030f50c 	.word	0x6030f50c
 1033718:	2300e9d0 	.word	0x2300e9d0
 103371c:	0088eb0c 	.word	0x0088eb0c
 1033720:	0801f108 	.word	0x0801f108
 1033724:	0a7cf8d0 	.word	0x0a7cf8d0
 1033728:	181017c1 	.word	0x181017c1
 103372c:	6230f50c 	.word	0x6230f50c
 1033730:	e9c24159 	.word	0xe9c24159
 1033734:	f1b80100 	.word	0xf1b80100
 1033738:	dbeb0f20 	.word	0xdbeb0f20
 103373c:	f1413010 	.word	0xf1413010
 1033740:	09400100 	.word	0x09400100
 1033744:	60c1ea40 	.word	0x60c1ea40
 1033748:	29001149 	.word	0x29001149
 103374c:	4240bfb8 	.word	0x4240bfb8
 1033750:	68b860b0 	.word	0x68b860b0
 1033754:	f0402800 	.word	0xf0402800
 1033758:	e9d680aa 	.word	0xe9d680aa
 103375c:	f1b98904 	.word	0xf1b98904
 1033760:	da030f00 	.word	0xda030f00
 1033764:	0800f1d8 	.word	0x0800f1d8
 1033768:	0949eb69 	.word	0x0949eb69
 103376c:	0106e9d6 	.word	0x0106e9d6
 1033770:	ea410049 	.word	0xea410049
 1033774:	458971d0 	.word	0x458971d0
 1033778:	d802d308 	.word	0xd802d308
 103377c:	0f40ebb8 	.word	0x0f40ebb8
 1033780:	2000d304 	.word	0x2000d304
 1033784:	0004e9c6 	.word	0x0004e9c6
 1033788:	46814680 	.word	0x46814680
 103378c:	2306e9d6 	.word	0x2306e9d6
 1033790:	210068b0 	.word	0x210068b0
 1033794:	41591810 	.word	0x41591810
 1033798:	d3374589 	.word	0xd3374589
 103379c:	4580d801 	.word	0x4580d801
 10337a0:	e9d6d334 	.word	0xe9d6d334
 10337a4:	f0002304 	.word	0xf0002304
 10337a8:	f8daf922 	.word	0xf8daf922
 10337ac:	01800018 	.word	0x01800018
 10337b0:	2001bf5c 	.word	0x2001bf5c
 10337b4:	f8da60b8 	.word	0xf8da60b8
 10337b8:	b2800018 	.word	0xb2800018
 10337bc:	bf082d02 	.word	0xbf082d02
 10337c0:	490d2503 	.word	0x490d2503
 10337c4:	0185eb01 	.word	0x0185eb01
 10337c8:	01896989 	.word	0x01896989
 10337cc:	f20fd46f 	.word	0xf20fd46f
 10337d0:	4aa02198 	.word	0x4aa02198
 10337d4:	1025f851 	.word	0x1025f851
 10337d8:	220a6091 	.word	0x220a6091
 10337dc:	f1010169 	.word	0xf1010169
 10337e0:	f5014190 	.word	0xf5014190
 10337e4:	300a4102 	.word	0x300a4102
 10337e8:	6088604a 	.word	0x6088604a
 10337ec:	bf00e059 	.word	0xbf00e059
 10337f0:	000034e0 	.word	0x000034e0
 10337f4:	000034f4 	.word	0x000034f4
 10337f8:	20100000 	.word	0x20100000
 10337fc:	80000020 	.word	0x80000020
 1033800:	00003508 	.word	0x00003508
 1033804:	00003510 	.word	0x00003510
 1033808:	00003518 	.word	0x00003518
 103380c:	0106e9d6 	.word	0x0106e9d6
 1033810:	d34c4589 	.word	0xd34c4589
 1033814:	4580d801 	.word	0x4580d801
 1033818:	9903d349 	.word	0x9903d349
 103381c:	684968b2 	.word	0x684968b2
 1033820:	eba01810 	.word	0xeba01810
 1033824:	fba10008 	.word	0xfba10008
 1033828:	23000100 	.word	0x23000100
 103382c:	fff0f000 	.word	0xfff0f000
 1033830:	2304e9d6 	.word	0x2304e9d6
 1033834:	f0004684 	.word	0xf0004684
 1033838:	e9d6f8da 	.word	0xe9d6f8da
 103383c:	29000104 	.word	0x29000104
 1033840:	4875da04 	.word	0x4875da04
 1033844:	6f404974 	.word	0x6f404974
 1033848:	67481c40 	.word	0x67481c40
 103384c:	49724872 	.word	0x49724872
 1033850:	1c406e40 	.word	0x1c406e40
 1033854:	f8da6648 	.word	0xf8da6648
 1033858:	01800018 	.word	0x01800018
 103385c:	2001bf5c 	.word	0x2001bf5c
 1033860:	f8da60b8 	.word	0xf8da60b8
 1033864:	f10c0018 	.word	0xf10c0018
 1033868:	09090108 	.word	0x09090108
 103386c:	2d02b280 	.word	0x2d02b280
 1033870:	2503bf08 	.word	0x2503bf08
 1033874:	eb024a78 	.word	0xeb024a78
 1033878:	69920285 	.word	0x69920285
 103387c:	d4160192 	.word	0xd4160192
 1033880:	12e4f20f 	.word	0x12e4f20f
 1033884:	f8524b73 	.word	0xf8524b73
 1033888:	609a2025 	.word	0x609a2025
 103388c:	030af101 	.word	0x030af101
 1033890:	f102016a 	.word	0xf102016a
 1033894:	f5024290 	.word	0xf5024290
 1033898:	18084202 	.word	0x18084202
 103389c:	300a6053 	.word	0x300a6053
 10338a0:	21016090 	.word	0x21016090
 10338a4:	eb00486a 	.word	0xeb00486a
 10338a8:	f8c00085 	.word	0xf8c00085
 10338ac:	1c6d1d60 	.word	0x1c6d1d60
 10338b0:	f6ff2d03 	.word	0xf6ff2d03
 10338b4:	9802ae61 	.word	0x9802ae61
 10338b8:	04006840 	.word	0x04006840
 10338bc:	4856d512 	.word	0x4856d512
 10338c0:	69c04966 	.word	0x69c04966
 10338c4:	0100fba1 	.word	0x0100fba1
 10338c8:	ea400b00 	.word	0xea400b00
 10338cc:	99025001 	.word	0x99025001
 10338d0:	f3c16849 	.word	0xf3c16849
 10338d4:	43482105 	.word	0x43482105
 10338d8:	61889903 	.word	0x61889903
 10338dc:	98042200 	.word	0x98042200
 10338e0:	221ee9c0 	.word	0x221ee9c0
 10338e4:	f0002110 	.word	0xf0002110
 10338e8:	9803f894 	.word	0x9803f894
 10338ec:	28016d40 	.word	0x28016d40
 10338f0:	f000d107 	.word	0xf000d107
 10338f4:	4956fc47 	.word	0x4956fc47
 10338f8:	0d28f881 	.word	0x0d28f881
 10338fc:	98032100 	.word	0x98032100
 1033900:	21286541 	.word	0x21286541
 1033904:	4a5269a0 	.word	0x4a5269a0
 1033908:	2000fb01 	.word	0x2000fb01
 103390c:	68c99902 	.word	0x68c99902
 1033910:	4a51b971 	.word	0x4a51b971
 1033914:	04d26852 	.word	0x04d26852
 1033918:	f44fbf58 	.word	0xf44fbf58
 103391c:	f8d06100 	.word	0xf8d06100
 1033920:	18892cc4 	.word	0x18892cc4
 1033924:	e0050b09 	.word	0xe0050b09
 1033928:	00003520 	.word	0x00003520
 103392c:	00003528 	.word	0x00003528
 1033930:	68c99902 	.word	0x68c99902
 1033934:	f8d061e1 	.word	0xf8d061e1
 1033938:	69e10cb4 	.word	0x69e10cb4
 103393c:	42880840 	.word	0x42880840
 1033940:	6a20bf3f 	.word	0x6a20bf3f
 1033944:	69099902 	.word	0x69099902
 1033948:	d3114288 	.word	0xd3114288
 103394c:	99026a20 	.word	0x99026a20
 1033950:	42886909 	.word	0x42886909
 1033954:	68804830 	.word	0x68804830
 1033958:	f020bf2c 	.word	0xf020bf2c
 103395c:	f0400020 	.word	0xf0400020
 1033960:	f7fe0020 	.word	0xf7fe0020
 1033964:	483aba5a 	.word	0x483aba5a
 1033968:	0e70f8d0 	.word	0x0e70f8d0
 103396c:	28e60880 	.word	0x28e60880
 1033970:	ab4bf4fe 	.word	0xab4bf4fe
 1033974:	21019804 	.word	0x21019804
 1033978:	21087081 	.word	0x21087081
 103397c:	ba49f7fe 	.word	0xba49f7fe
 1033980:	b00f4837 	.word	0xb00f4837
 1033984:	4ff0e8bd 	.word	0x4ff0e8bd
 1033988:	f0012108 	.word	0xf0012108
 103398c:	bf00ba27 	.word	0xbf00ba27
 1033990:	0000350c 	.word	0x0000350c
 1033994:	00003514 	.word	0x00003514
 1033998:	0000351c 	.word	0x0000351c
 103399c:	00003524 	.word	0x00003524
 10339a0:	5a82799a 	.word	0x5a82799a
 10339a4:	a57d8666 	.word	0xa57d8666
 10339a8:	2302fb83 	.word	0x2302fb83
 10339ac:	ea420d92 	.word	0xea420d92
 10339b0:	18802283 	.word	0x18802283
 10339b4:	51a3eb41 	.word	0x51a3eb41
 10339b8:	fb814770 	.word	0xfb814770
 10339bc:	0d800100 	.word	0x0d800100
 10339c0:	2081ea40 	.word	0x2081ea40
 10339c4:	eb431810 	.word	0xeb431810
 10339c8:	477051a1 	.word	0x477051a1
 10339cc:	fb834613 	.word	0xfb834613
 10339d0:	0d922302 	.word	0x0d922302
 10339d4:	2283ea42 	.word	0x2283ea42
 10339d8:	9a001880 	.word	0x9a001880
 10339dc:	5193eb41 	.word	0x5193eb41
 10339e0:	46424770 	.word	0x46424770
 10339e4:	6100f04f 	.word	0x6100f04f
 10339e8:	f0004628 	.word	0xf0004628
 10339ec:	2b00b946 	.word	0x2b00b946
 10339f0:	dc01db08 	.word	0xdc01db08
 10339f4:	d3052a01 	.word	0xd3052a01
 10339f8:	0106e9d6 	.word	0x0106e9d6
 10339fc:	eb631a10 	.word	0xeb631a10
 1033a00:	e0030101 	.word	0xe0030101
 1033a04:	0106e9d6 	.word	0x0106e9d6
 1033a08:	41591810 	.word	0x41591810
 1033a0c:	0104e9c6 	.word	0x0104e9c6
 1033a10:	48144770 	.word	0x48144770
 1033a14:	b9f2f001 	.word	0xb9f2f001
 1033a18:	201000dc 	.word	0x201000dc
 1033a1c:	20100c80 	.word	0x20100c80
 1033a20:	201007d0 	.word	0x201007d0
 1033a24:	201009e0 	.word	0x201009e0
 1033a28:	20100bd8 	.word	0x20100bd8
 1033a2c:	20100d10 	.word	0x20100d10
 1033a30:	201010c0 	.word	0x201010c0
 1033a34:	201010b8 	.word	0x201010b8
 1033a38:	20101110 	.word	0x20101110
 1033a3c:	ffff1f83 	.word	0xffff1f83
 1033a40:	00091eb2 	.word	0x00091eb2
 1033a44:	2010102c 	.word	0x2010102c
 1033a48:	00012a43 	.word	0x00012a43
 1033a4c:	20100168 	.word	0x20100168
 1033a50:	20100368 	.word	0x20100368
 1033a54:	48008000 	.word	0x48008000
 1033a58:	20100000 	.word	0x20100000
 1033a5c:	00083127 	.word	0x00083127
 1033a60:	400e1400 	.word	0x400e1400
 1033a64:	4004c000 	.word	0x4004c000
 1033a68:	00000001 	.word	0x00000001
 1033a6c:	00000002 	.word	0x00000002
 1033a70:	00000004 	.word	0x00000004
 1033a74:	00000008 	.word	0x00000008
 1033a78:	28004905 	.word	0x28004905
 1033a7c:	4805bf19 	.word	0x4805bf19
 1033a80:	5000f040 	.word	0x5000f040
 1033a84:	f0204804 	.word	0xf0204804
 1033a88:	60085000 	.word	0x60085000
 1033a8c:	bf004770 	.word	0xbf004770
 1033a90:	e000ed08 	.word	0xe000ed08
 1033a94:	20101300 	.word	0x20101300
 1033a98:	00000000 	.word	0x00000000
 1033a9c:	4811b510 	.word	0x4811b510
 1033aa0:	f44f4c11 	.word	0xf44f4c11
 1033aa4:	60017148 	.word	0x60017148
 1033aa8:	4100f44f 	.word	0x4100f44f
 1033aac:	6001480f 	.word	0x6001480f
 1033ab0:	22102300 	.word	0x22102300
 1033ab4:	f81cf000 	.word	0xf81cf000
 1033ab8:	22082300 	.word	0x22082300
 1033abc:	f818f000 	.word	0xf818f000
 1033ac0:	22202300 	.word	0x22202300
 1033ac4:	f814f000 	.word	0xf814f000
 1033ac8:	22042300 	.word	0x22042300
 1033acc:	f810f000 	.word	0xf810f000
 1033ad0:	e8bd4620 	.word	0xe8bd4620
 1033ad4:	23534010 	.word	0x23534010
 1033ad8:	7280f44f 	.word	0x7280f44f
 1033adc:	5120f04f 	.word	0x5120f04f
 1033ae0:	b8cbf000 	.word	0xb8cbf000
 1033ae4:	400e0500 	.word	0x400e0500
 1033ae8:	4800c000 	.word	0x4800c000
 1033aec:	400e1454 	.word	0x400e1454
 1033af0:	6100f04f 	.word	0x6100f04f
 1033af4:	f0004620 	.word	0xf0004620
 1033af8:	f850b8c0 	.word	0xf850b8c0
 1033afc:	b1611b04 	.word	0xb1611b04
 1033b00:	2b04f850 	.word	0x2b04f850
 1033b04:	bf4407d3 	.word	0xbf4407d3
 1033b08:	0301f1a9 	.word	0x0301f1a9
 1033b0c:	2300189a 	.word	0x2300189a
 1033b10:	3b04f842 	.word	0x3b04f842
 1033b14:	d1fa1f09 	.word	0xd1fa1f09
 1033b18:	4770e7ef 	.word	0x4770e7ef
 1033b1c:	41f0e92d 	.word	0x41f0e92d
 1033b20:	46884605 	.word	0x46884605
 1033b24:	f8f4f000 	.word	0xf8f4f000
 1033b28:	46284606 	.word	0x46284606
 1033b2c:	f8f2f000 	.word	0xf8f2f000
 1033b30:	d0104006 	.word	0xd0104006
 1033b34:	4d192700 	.word	0x4d192700
 1033b38:	1c7f0138 	.word	0x1c7f0138
 1033b3c:	45415941 	.word	0x45415941
 1033b40:	1944d1fa 	.word	0x1944d1fa
 1033b44:	420e6861 	.word	0x420e6861
 1033b48:	5940d0f6 	.word	0x5940d0f6
 1033b4c:	479068e2 	.word	0x479068e2
 1033b50:	43866860 	.word	0x43866860
 1033b54:	e8bdd1f0 	.word	0xe8bdd1f0
 1033b58:	b5f881f0 	.word	0xb5f881f0
 1033b5c:	6f2e4d0f 	.word	0x6f2e4d0f
 1033b60:	461a4614 	.word	0x461a4614
 1033b64:	2e079b06 	.word	0x2e079b06
 1033b68:	2001d301 	.word	0x2001d301
 1033b6c:	eb05bdf2 	.word	0xeb05bdf2
 1033b70:	60391706 	.word	0x60391706
 1033b74:	60ba607c 	.word	0x60ba607c
 1033b78:	1c7160fb 	.word	0x1c7160fb
 1033b7c:	46216729 	.word	0x46216729
 1033b80:	f8b0f000 	.word	0xf8b0f000
 1033b84:	bdf22000 	.word	0xbdf22000
 1033b88:	4805210b 	.word	0x4805210b
 1033b8c:	210ce7c6 	.word	0x210ce7c6
 1033b90:	e7c34804 	.word	0xe7c34804
 1033b94:	48042125 	.word	0x48042125
 1033b98:	0000e7c0 	.word	0x0000e7c0
 1033b9c:	201013f0 	.word	0x201013f0
 1033ba0:	400e0e00 	.word	0x400e0e00
 1033ba4:	400e1000 	.word	0x400e1000
 1033ba8:	4800c000 	.word	0x4800c000
 1033bac:	6641b10a 	.word	0x6641b10a
 1033bb0:	66014770 	.word	0x66014770
 1033bb4:	64424770 	.word	0x64424770
 1033bb8:	b90143d3 	.word	0xb90143d3
 1033bbc:	b5104770 	.word	0xb5104770
 1033bc0:	6f00f1b1 	.word	0x6f00f1b1
 1033bc4:	f1b1d011 	.word	0xf1b1d011
 1033bc8:	d01a5f80 	.word	0xd01a5f80
 1033bcc:	5fc0f1b1 	.word	0x5fc0f1b1
 1033bd0:	f1b1d01a 	.word	0xf1b1d01a
 1033bd4:	d01f5f00 	.word	0xd01f5f00
 1033bd8:	5f20f1b1 	.word	0x5f20f1b1
 1033bdc:	f1b1bf1c 	.word	0xf1b1bf1c
 1033be0:	f1b15f40 	.word	0xf1b15f40
 1033be4:	d00b5f60 	.word	0xd00b5f60
 1033be8:	6f01e009 	.word	0x6f01e009
 1033bec:	40196f04 	.word	0x40196f04
 1033bf0:	67014021 	.word	0x67014021
 1033bf4:	6f446f41 	.word	0x6f446f41
 1033bf8:	40214019 	.word	0x40214019
 1033bfc:	60426741 	.word	0x60426741
 1033c00:	6f01bd10 	.word	0x6f01bd10
 1033c04:	e7f44311 	.word	0xe7f44311
 1033c08:	6f046f01 	.word	0x6f046f01
 1033c0c:	40214019 	.word	0x40214019
 1033c10:	6f416701 	.word	0x6f416701
 1033c14:	e7f14311 	.word	0xe7f14311
 1033c18:	43116f01 	.word	0x43116f01
 1033c1c:	b570e7f8 	.word	0xb570e7f8
 1033c20:	460d4604 	.word	0x460d4604
 1033c24:	64654616 	.word	0x64654616
 1033c28:	0201f006 	.word	0x0201f006
 1033c2c:	ffbef7ff 	.word	0xffbef7ff
 1033c30:	0f0af016 	.word	0x0f0af016
 1033c34:	6225bf14 	.word	0x6225bf14
 1033c38:	07b06265 	.word	0x07b06265
 1033c3c:	f8c4bf48 	.word	0xf8c4bf48
 1033c40:	d4035080 	.word	0xd4035080
 1033c44:	bf480730 	.word	0xbf480730
 1033c48:	5084f8c4 	.word	0x5084f8c4
 1033c4c:	60256165 	.word	0x60256165
 1033c50:	b5f8bd70 	.word	0xb5f8bd70
 1033c54:	46044616 	.word	0x46044616
 1033c58:	460d9a06 	.word	0x460d9a06
 1033c5c:	6465461f 	.word	0x6465461f
 1033c60:	ffa4f7ff 	.word	0xffa4f7ff
 1033c64:	bf142f00 	.word	0xbf142f00
 1033c68:	65656525 	.word	0x65656525
 1033c6c:	bf142e00 	.word	0xbf142e00
 1033c70:	63656325 	.word	0x63656325
 1033c74:	60256125 	.word	0x60256125
 1033c78:	b570bdf1 	.word	0xb570bdf1
 1033c7c:	461a4615 	.word	0x461a4615
 1033c80:	4604b082 	.word	0x4604b082
 1033c84:	0601f002 	.word	0x0601f002
 1033c88:	6f00f1b1 	.word	0x6f00f1b1
 1033c8c:	f1b1bf18 	.word	0xf1b1bf18
 1033c90:	d00f5f80 	.word	0xd00f5f80
 1033c94:	5fc0f1b1 	.word	0x5fc0f1b1
 1033c98:	f1b1bf18 	.word	0xf1b1bf18
 1033c9c:	d0095f00 	.word	0xd0095f00
 1033ca0:	5f20f1b1 	.word	0x5f20f1b1
 1033ca4:	f1b1d00d 	.word	0xf1b1d00d
 1033ca8:	bf185f40 	.word	0xbf185f40
 1033cac:	5f60f1b1 	.word	0x5f60f1b1
 1033cb0:	e015d00b 	.word	0xe015d00b
 1033cb4:	f7ff462a 	.word	0xf7ff462a
 1033cb8:	f000ff7e 	.word	0xf000ff7e
 1033cbc:	2001f831 	.word	0x2001f831
 1033cc0:	4629bd76 	.word	0x4629bd76
 1033cc4:	ffabf7ff 	.word	0xffabf7ff
 1033cc8:	0890e7f9 	.word	0x0890e7f9
 1033ccc:	0301f000 	.word	0x0301f000
 1033cd0:	5f60f1b1 	.word	0x5f60f1b1
 1033cd4:	2201bf0c 	.word	0x2201bf0c
 1033cd8:	f0002200 	.word	0xf0002200
 1033cdc:	e7eef81d 	.word	0xe7eef81d
 1033ce0:	bd762000 	.word	0xbd762000
 1033ce4:	f100b510 	.word	0xf100b510
 1033ce8:	06d403b0 	.word	0x06d403b0
 1033cec:	f8c0d50b 	.word	0xf8c0d50b
 1033cf0:	069010b0 	.word	0x069010b0
 1033cf4:	6259bf4c 	.word	0x6259bf4c
 1033cf8:	06506219 	.word	0x06506219
 1033cfc:	6119d501 	.word	0x6119d501
 1033d00:	6159bd10 	.word	0x6159bd10
 1033d04:	6059bd10 	.word	0x6059bd10
 1033d08:	6cc2bd10 	.word	0x6cc2bd10
 1033d0c:	47706401 	.word	0x47706401
 1033d10:	47706cc0 	.word	0x47706cc0
 1033d14:	47706c80 	.word	0x47706c80
 1033d18:	46299600 	.word	0x46299600
 1033d1c:	e7984620 	.word	0xe7984620
 1033d20:	46294632 	.word	0x46294632
 1033d24:	e7414620 	.word	0xe7414620
 1033d28:	f0012200 	.word	0xf0012200
 1033d2c:	e7feb869 	.word	0xe7feb869
 1033d30:	03b4f8df 	.word	0x03b4f8df
 1033d34:	60012105 	.word	0x60012105
 1033d38:	f04f4770 	.word	0xf04f4770
 1033d3c:	69014090 	.word	0x69014090
 1033d40:	d5fc0589 	.word	0xd5fc0589
 1033d44:	f4216841 	.word	0xf4216841
 1033d48:	60412170 	.word	0x60412170
 1033d4c:	f4416841 	.word	0xf4416841
 1033d50:	60412170 	.word	0x60412170
 1033d54:	7180f04f 	.word	0x7180f04f
 1033d58:	47706001 	.word	0x47706001
 1033d5c:	4604b5f8 	.word	0x4604b5f8
 1033d60:	2600460f 	.word	0x2600460f
 1033d64:	5384f8df 	.word	0x5384f8df
 1033d68:	5d30e009 	.word	0x5d30e009
 1033d6c:	1c766028 	.word	0x1c766028
 1033d70:	f7ff1e7f 	.word	0xf7ff1e7f
 1033d74:	f7ffffdd 	.word	0xf7ffffdd
 1033d78:	f7ffffdb 	.word	0xf7ffffdb
 1033d7c:	b15fffd9 	.word	0xb15fffd9
 1033d80:	2098f643 	.word	0x2098f643
 1033d84:	07896869 	.word	0x07896869
 1033d88:	4601d4ef 	.word	0x4601d4ef
 1033d8c:	29001e48 	.word	0x29001e48
 1033d90:	f06fd1f8 	.word	0xf06fd1f8
 1033d94:	bdf20002 	.word	0xbdf20002
 1033d98:	bdf22000 	.word	0xbdf22000
 1033d9c:	2500b5f0 	.word	0x2500b5f0
 1033da0:	f2404ad3 	.word	0xf2404ad3
 1033da4:	f6432301 	.word	0xf6432301
 1033da8:	e0032498 	.word	0xe0032498
 1033dac:	542e6816 	.word	0x542e6816
 1033db0:	1e491c6d 	.word	0x1e491c6d
 1033db4:	4626b1b1 	.word	0x4626b1b1
 1033db8:	07bf6897 	.word	0x07bf6897
 1033dbc:	4637d404 	.word	0x4637d404
 1033dc0:	2f001e7e 	.word	0x2f001e7e
 1033dc4:	e00ad1f8 	.word	0xe00ad1f8
 1033dc8:	605626ff 	.word	0x605626ff
 1033dcc:	68974626 	.word	0x68974626
 1033dd0:	429f401f 	.word	0x429f401f
 1033dd4:	4637d0ea 	.word	0x4637d0ea
 1033dd8:	2f001e7e 	.word	0x2f001e7e
 1033ddc:	f06fd1f7 	.word	0xf06fd1f7
 1033de0:	bdf00002 	.word	0xbdf00002
 1033de4:	bdf02000 	.word	0xbdf02000
 1033de8:	f000b570 	.word	0xf000b570
 1033dec:	2101f817 	.word	0x2101f817
 1033df0:	f7ff4620 	.word	0xf7ff4620
 1033df4:	4631ffb3 	.word	0x4631ffb3
 1033df8:	f7ff4628 	.word	0xf7ff4628
 1033dfc:	e00affaf 	.word	0xe00affaf
 1033e00:	f000b570 	.word	0xf000b570
 1033e04:	2101f80b 	.word	0x2101f80b
 1033e08:	f7ff4620 	.word	0xf7ff4620
 1033e0c:	4631ffa7 	.word	0x4631ffa7
 1033e10:	f7ff4628 	.word	0xf7ff4628
 1033e14:	e8bdffc3 	.word	0xe8bdffc3
 1033e18:	e78e4070 	.word	0xe78e4070
 1033e1c:	460d4604 	.word	0x460d4604
 1033e20:	f0014616 	.word	0xf0014616
 1033e24:	b510b807 	.word	0xb510b807
 1033e28:	2080b082 	.word	0x2080b082
 1033e2c:	0001f88d 	.word	0x0001f88d
 1033e30:	f88d20da 	.word	0xf88d20da
 1033e34:	48af0000 	.word	0x48af0000
 1033e38:	28017800 	.word	0x28017800
 1033e3c:	48aed121 	.word	0x48aed121
 1033e40:	68014cae 	.word	0x68014cae
 1033e44:	1c494aae 	.word	0x1c494aae
 1033e48:	68006001 	.word	0x68006001
 1033e4c:	f00049ad 	.word	0xf00049ad
 1033e50:	1e400003 	.word	0x1e400003
 1033e54:	0fc04180 	.word	0x0fc04180
 1033e58:	21807008 	.word	0x21807008
 1033e5c:	700148aa 	.word	0x700148aa
 1033e60:	600a6821 	.word	0x600a6821
 1033e64:	604a221e 	.word	0x604a221e
 1033e68:	60ca6088 	.word	0x60ca6088
 1033e6c:	ffe2f000 	.word	0xffe2f000
 1033e70:	680148a6 	.word	0x680148a6
 1033e74:	60412120 	.word	0x60412120
 1033e78:	1101f240 	.word	0x1101f240
 1033e7c:	62016820 	.word	0x62016820
 1033e80:	4ca3bd13 	.word	0x4ca3bd13
 1033e84:	b9487820 	.word	0xb9487820
 1033e88:	70202001 	.word	0x70202001
 1033e8c:	a9002201 	.word	0xa9002201
 1033e90:	0001f10d 	.word	0x0001f10d
 1033e94:	ffa8f7ff 	.word	0xffa8f7ff
 1033e98:	70202000 	.word	0x70202000
 1033e9c:	b510bd13 	.word	0xb510bd13
 1033ea0:	4490f04f 	.word	0x4490f04f
 1033ea4:	60202080 	.word	0x60202080
 1033ea8:	ff42f7ff 	.word	0xff42f7ff
 1033eac:	ff40f7ff 	.word	0xff40f7ff
 1033eb0:	ff3ef7ff 	.word	0xff3ef7ff
 1033eb4:	49976860 	.word	0x49976860
 1033eb8:	40084a97 	.word	0x40084a97
 1033ebc:	68606060 	.word	0x68606060
 1033ec0:	0011f040 	.word	0x0011f040
 1033ec4:	48956060 	.word	0x48956060
 1033ec8:	f8526801 	.word	0xf8526801
 1033ecc:	f0033021 	.word	0xf0033021
 1033ed0:	f842030c 	.word	0xf842030c
 1033ed4:	f6403021 	.word	0xf6403021
 1033ed8:	68004308 	.word	0x68004308
 1033edc:	1020f852 	.word	0x1020f852
 1033ee0:	f8424319 	.word	0xf8424319
 1033ee4:	20011020 	.word	0x20011020
 1033ee8:	23006020 	.word	0x23006020
 1033eec:	498c4883 	.word	0x498c4883
 1033ef0:	60014a83 	.word	0x60014a83
 1033ef4:	49842000 	.word	0x49842000
 1033ef8:	54435483 	.word	0x54435483
 1033efc:	281e1c40 	.word	0x281e1c40
 1033f00:	6920dbfa 	.word	0x6920dbfa
 1033f04:	f2404987 	.word	0xf2404987
 1033f08:	61a070ff 	.word	0x61a070ff
 1033f0c:	7080f44f 	.word	0x7080f44f
 1033f10:	49856008 	.word	0x49856008
 1033f14:	49856008 	.word	0x49856008
 1033f18:	4985700b 	.word	0x4985700b
 1033f1c:	bd106008 	.word	0xbd106008
 1033f20:	41f0e92d 	.word	0x41f0e92d
 1033f24:	202db088 	.word	0x202db088
 1033f28:	0000f88d 	.word	0x0000f88d
 1033f2c:	20012201 	.word	0x20012201
 1033f30:	f91df000 	.word	0xf91df000
 1033f34:	f88d20a9 	.word	0xf88d20a9
 1033f38:	24640000 	.word	0x24640000
 1033f3c:	f88d2000 	.word	0xf88d2000
 1033f40:	22010002 	.word	0x22010002
 1033f44:	0102f10d 	.word	0x0102f10d
 1033f48:	f90bf000 	.word	0xf90bf000
 1033f4c:	0002f89d 	.word	0x0002f89d
 1033f50:	b9081e64 	.word	0xb9081e64
 1033f54:	d1f42c00 	.word	0xd1f42c00
 1033f58:	f88d20c1 	.word	0xf88d20c1
 1033f5c:	a8060000 	.word	0xa8060000
 1033f60:	2118f20f 	.word	0x2118f20f
 1033f64:	c00cc90c 	.word	0xc00cc90c
 1033f68:	ae062464 	.word	0xae062464
 1033f6c:	2208ad01 	.word	0x2208ad01
 1033f70:	f000a901 	.word	0xf000a901
 1033f74:	2000f8f6 	.word	0x2000f8f6
 1033f78:	5d4a2100 	.word	0x5d4a2100
 1033f7c:	42935d8b 	.word	0x42935d8b
 1033f80:	2001bf18 	.word	0x2001bf18
 1033f84:	1c49558a 	.word	0x1c49558a
 1033f88:	d3f62908 	.word	0xd3f62908
 1033f8c:	b1301e64 	.word	0xb1301e64
 1033f90:	d1ec2c00 	.word	0xd1ec2c00
 1033f94:	68a04c67 	.word	0x68a04c67
 1033f98:	0080f040 	.word	0x0080f040
 1033f9c:	4c65e003 	.word	0x4c65e003
 1033fa0:	f02068a0 	.word	0xf02068a0
 1033fa4:	60a00080 	.word	0x60a00080
 1033fa8:	0edcf646 	.word	0x0edcf646
 1033fac:	f89d7869 	.word	0xf89d7869
 1033fb0:	78ab0004 	.word	0x78ab0004
 1033fb4:	792f78ea 	.word	0x792f78ea
 1033fb8:	c006f895 	.word	0xc006f895
 1033fbc:	8004f89d 	.word	0x8004f89d
 1033fc0:	fa56020e 	.word	0xfa56020e
 1033fc4:	eb00f080 	.word	0xeb00f080
 1033fc8:	eb004003 	.word	0xeb004003
 1033fcc:	f8c46002 	.word	0xf8c46002
 1033fd0:	ea410084 	.word	0xea410084
 1033fd4:	796e2108 	.word	0x796e2108
 1033fd8:	fa500230 	.word	0xfa500230
 1033fdc:	eb00f087 	.word	0xeb00f087
 1033fe0:	f895400c 	.word	0xf895400c
 1033fe4:	eb00c007 	.word	0xeb00c007
 1033fe8:	f8c4600c 	.word	0xf8c4600c
 1033fec:	ea460088 	.word	0xea460088
 1033ff0:	48512607 	.word	0x48512607
 1033ff4:	c144f8df 	.word	0xc144f8df
 1033ff8:	fb0e4f51 	.word	0xfb0e4f51
 1033ffc:	6001c101 	.word	0x6001c101
 1034000:	c606fb0e 	.word	0xc606fb0e
 1034004:	f8df494f 	.word	0xf8df494f
 1034008:	600ec140 	.word	0x600ec140
 103400c:	2203ea42 	.word	0x2203ea42
 1034010:	4e4e79ab 	.word	0x4e4e79ab
 1034014:	051279ed 	.word	0x051279ed
 1034018:	c217fb52 	.word	0xc217fb52
 103401c:	ea456032 	.word	0xea456032
 1034020:	4a4b2303 	.word	0x4a4b2303
 1034024:	4e4b6835 	.word	0x4e4b6835
 1034028:	fb53051b 	.word	0xfb53051b
 103402c:	6013c317 	.word	0x6013c317
 1034030:	6803af03 	.word	0x6803af03
 1034034:	68116808 	.word	0x68116808
 1034038:	02001ac0 	.word	0x02001ac0
 103403c:	fb901b49 	.word	0xfb901b49
 1034040:	4945f0f1 	.word	0x4945f0f1
 1034044:	42406008 	.word	0x42406008
 1034048:	0100fb85 	.word	0x0100fb85
 103404c:	ea400a00 	.word	0xea400a00
 1034050:	49426001 	.word	0x49426001
 1034054:	60081818 	.word	0x60081818
 1034058:	20202564 	.word	0x20202564
 103405c:	0000f88d 	.word	0x0000f88d
 1034060:	0800f04f 	.word	0x0800f04f
 1034064:	f1062209 	.word	0xf1062209
 1034068:	a80001cc 	.word	0xa80001cc
 103406c:	febcf7ff 	.word	0xfebcf7ff
 1034070:	f88d20a0 	.word	0xf88d20a0
 1034074:	22090000 	.word	0x22090000
 1034078:	f872f000 	.word	0xf872f000
 103407c:	19822000 	.word	0x19822000
 1034080:	f8925dc1 	.word	0xf8925dc1
 1034084:	429120cc 	.word	0x429120cc
 1034088:	2101bf14 	.word	0x2101bf14
 103408c:	1c402100 	.word	0x1c402100
 1034090:	0808ea41 	.word	0x0808ea41
 1034094:	d3f22809 	.word	0xd3f22809
 1034098:	f000202a 	.word	0xf000202a
 103409c:	202bf864 	.word	0x202bf864
 10340a0:	f861f000 	.word	0xf861f000
 10340a4:	f88d20aa 	.word	0xf88d20aa
 10340a8:	22020000 	.word	0x22020000
 10340ac:	f858f000 	.word	0xf858f000
 10340b0:	000cf89d 	.word	0x000cf89d
 10340b4:	bf142804 	.word	0xbf142804
 10340b8:	20002001 	.word	0x20002001
 10340bc:	ea407879 	.word	0xea407879
 10340c0:	29040008 	.word	0x29040008
 10340c4:	2101bf14 	.word	0x2101bf14
 10340c8:	1e6d2100 	.word	0x1e6d2100
 10340cc:	d0054308 	.word	0xd0054308
 10340d0:	d1c22d00 	.word	0xd1c22d00
 10340d4:	f04068a0 	.word	0xf04068a0
 10340d8:	e0000080 	.word	0xe0000080
 10340dc:	60a068a0 	.word	0x60a068a0
 10340e0:	e8bdb008 	.word	0xe8bdb008
 10340e4:	000081f0 	.word	0x000081f0
 10340e8:	20101500 	.word	0x20101500
 10340ec:	4800000c 	.word	0x4800000c
 10340f0:	48000008 	.word	0x48000008
 10340f4:	20101093 	.word	0x20101093
 10340f8:	201011d8 	.word	0x201011d8
 10340fc:	201014e8 	.word	0x201014e8
 1034100:	20101488 	.word	0x20101488
 1034104:	20101091 	.word	0x20101091
 1034108:	20101464 	.word	0x20101464
 103410c:	48000010 	.word	0x48000010
 1034110:	20101504 	.word	0x20101504
 1034114:	00f0ff79 	.word	0x00f0ff79
 1034118:	48000030 	.word	0x48000030
 103411c:	201014fc 	.word	0x201014fc
 1034120:	48000100 	.word	0x48000100
 1034124:	e000e184 	.word	0xe000e184
 1034128:	e000e284 	.word	0xe000e284
 103412c:	e000e428 	.word	0xe000e428
 1034130:	e000e104 	.word	0xe000e104
 1034134:	201000dc 	.word	0x201000dc
 1034138:	201014ec 	.word	0x201014ec
 103413c:	47ae147b 	.word	0x47ae147b
 1034140:	00091eb2 	.word	0x00091eb2
 1034144:	201014f0 	.word	0x201014f0
 1034148:	ffff1f83 	.word	0xffff1f83
 103414c:	201014f4 	.word	0x201014f4
 1034150:	201014f8 	.word	0x201014f8
 1034154:	20100000 	.word	0x20100000
 1034158:	201012e4 	.word	0x201012e4
 103415c:	201012e8 	.word	0x201012e8
 1034160:	a800a903 	.word	0xa800a903
 1034164:	f88de64c 	.word	0xf88de64c
 1034168:	22010000 	.word	0x22010000
 103416c:	f88d2004 	.word	0xf88d2004
 1034170:	f10d0001 	.word	0xf10d0001
 1034174:	a8000101 	.word	0xa8000101
 1034178:	0000e636 	.word	0x0000e636
 103417c:	04f3f2f1 	.word	0x04f3f2f1
 1034180:	e8e70605 	.word	0xe8e70605
 1034184:	4ff0e92d 	.word	0x4ff0e92d
 1034188:	05d0f8df 	.word	0x05d0f8df
 103418c:	35d0f8df 	.word	0x35d0f8df
 1034190:	1098f8d0 	.word	0x1098f8d0
 1034194:	22006019 	.word	0x22006019
 1034198:	109cf8d0 	.word	0x109cf8d0
 103419c:	f04f6059 	.word	0xf04f6059
 10341a0:	f8d04900 	.word	0xf8d04900
 10341a4:	609910a0 	.word	0x609910a0
 10341a8:	0a01f04f 	.word	0x0a01f04f
 10341ac:	10a4f8d0 	.word	0x10a4f8d0
 10341b0:	f8d060d9 	.word	0xf8d060d9
 10341b4:	611910a8 	.word	0x611910a8
 10341b8:	10acf8d0 	.word	0x10acf8d0
 10341bc:	68c16159 	.word	0x68c16159
 10341c0:	05a0f8df 	.word	0x05a0f8df
 10341c4:	f0016002 	.word	0xf0016002
 10341c8:	2e020603 	.word	0x2e020603
 10341cc:	f853d10b 	.word	0xf853d10b
 10341d0:	f8df6022 	.word	0xf8df6022
 10341d4:	19be7594 	.word	0x19be7594
 10341d8:	6022f843 	.word	0x6022f843
 10341dc:	f702fa0a 	.word	0xf702fa0a
 10341e0:	433e6806 	.word	0x433e6806
 10341e4:	08896006 	.word	0x08896006
 10341e8:	6022f853 	.word	0x6022f853
 10341ec:	bfb845b1 	.word	0xbfb845b1
 10341f0:	9022f853 	.word	0x9022f853
 10341f4:	2a061c52 	.word	0x2a061c52
 10341f8:	2200d3e5 	.word	0x2200d3e5
 10341fc:	156cf8df 	.word	0x156cf8df
 1034200:	056cf8df 	.word	0x056cf8df
 1034204:	656cf8df 	.word	0x656cf8df
 1034208:	756cf8df 	.word	0x756cf8df
 103420c:	e56cf8df 	.word	0xe56cf8df
 1034210:	42494449 	.word	0x42494449
 1034214:	46946181 	.word	0x46946181
 1034218:	0564f8df 	.word	0x0564f8df
 103421c:	60386030 	.word	0x60386030
 1034220:	0b87f04f 	.word	0x0b87f04f
 1034224:	002cf853 	.word	0x002cf853
 1034228:	0009eba0 	.word	0x0009eba0
 103422c:	002cf843 	.word	0x002cf843
 1034230:	6150f244 	.word	0x6150f244
 1034234:	002cf853 	.word	0x002cf853
 1034238:	0100fb81 	.word	0x0100fb81
 103423c:	4080f110 	.word	0x4080f110
 1034240:	0100f141 	.word	0x0100f141
 1034244:	ea400fc0 	.word	0xea400fc0
 1034248:	f8430041 	.word	0xf8430041
 103424c:	f06f002c 	.word	0xf06f002c
 1034250:	f8530186 	.word	0xf8530186
 1034254:	f853002c 	.word	0xf853002c
 1034258:	fb90502c 	.word	0xfb90502c
 103425c:	10a0f4f1 	.word	0x10a0f4f1
 1034260:	0140f3c4 	.word	0x0140f3c4
 1034264:	0801f004 	.word	0x0801f004
 1034268:	5404fb0b 	.word	0x5404fb0b
 103426c:	402cf843 	.word	0x402cf843
 1034270:	f40cfa0a 	.word	0xf40cfa0a
 1034274:	502cf853 	.word	0x502cf853
 1034278:	6835b995 	.word	0x6835b995
 103427c:	402543e4 	.word	0x402543e4
 1034280:	f1086035 	.word	0xf1086035
 1034284:	683d0801 	.word	0x683d0801
 1034288:	603c402c 	.word	0x603c402c
 103428c:	f8df2500 	.word	0xf8df2500
 1034290:	f82e44f4 	.word	0xf82e44f4
 1034294:	f8df401c 	.word	0xf8df401c
 1034298:	f82444f0 	.word	0xf82444f0
 103429c:	e01b501c 	.word	0xe01b501c
 10342a0:	43256835 	.word	0x43256835
 10342a4:	683d6035 	.word	0x683d6035
 10342a8:	603c432c 	.word	0x603c432c
 10342ac:	54dcf8df 	.word	0x54dcf8df
 10342b0:	402cf853 	.word	0x402cf853
 10342b4:	42641c64 	.word	0x42641c64
 10342b8:	4014f835 	.word	0x4014f835
 10342bc:	54d0f8df 	.word	0x54d0f8df
 10342c0:	401cf82e 	.word	0x401cf82e
 10342c4:	402cf853 	.word	0x402cf853
 10342c8:	42641c64 	.word	0x42641c64
 10342cc:	4014f835 	.word	0x4014f835
 10342d0:	54b4f8df 	.word	0x54b4f8df
 10342d4:	401cf825 	.word	0x401cf825
 10342d8:	eb04008c 	.word	0xeb04008c
 10342dc:	f8df04c0 	.word	0xf8df04c0
 10342e0:	444454b4 	.word	0x444454b4
 10342e4:	4005f80c 	.word	0x4005f80c
 10342e8:	bf3c2806 	.word	0xbf3c2806
 10342ec:	f1b82902 	.word	0xf1b82902
 10342f0:	d3010f03 	.word	0xd3010f03
 10342f4:	0210f042 	.word	0x0210f042
 10342f8:	0c01f10c 	.word	0x0c01f10c
 10342fc:	0f06f1bc 	.word	0x0f06f1bc
 1034300:	b2d0d390 	.word	0xb2d0d390
 1034304:	8ff0e8bd 	.word	0x8ff0e8bd
 1034308:	f8dfb5f0 	.word	0xf8dfb5f0
 103430c:	f8df0450 	.word	0xf8df0450
 1034310:	b0874488 	.word	0xb0874488
 1034314:	6b806b81 	.word	0x6b806b81
 1034318:	0101fba0 	.word	0x0101fba0
 103431c:	ea400d00 	.word	0xea400d00
 1034320:	0d093001 	.word	0x0d093001
 1034324:	0102e9c4 	.word	0x0102e9c4
 1034328:	8f4ff3bf 	.word	0x8f4ff3bf
 103432c:	146cf8df 	.word	0x146cf8df
 1034330:	046cf8df 	.word	0x046cf8df
 1034334:	546cf8df 	.word	0x546cf8df
 1034338:	2300e9d0 	.word	0x2300e9d0
 103433c:	6700e9d1 	.word	0x6700e9d1
 1034340:	41bb1b92 	.word	0x41bb1b92
 1034344:	2304e9cd 	.word	0x2304e9cd
 1034348:	2300e9d0 	.word	0x2300e9d0
 103434c:	2300e9c1 	.word	0x2300e9c1
 1034350:	1454f8df 	.word	0x1454f8df
 1034354:	2302e9d0 	.word	0x2302e9d0
 1034358:	6700e9d1 	.word	0x6700e9d1
 103435c:	41bb1b92 	.word	0x41bb1b92
 1034360:	2302e9cd 	.word	0x2302e9cd
 1034364:	2302e9d0 	.word	0x2302e9d0
 1034368:	2300e9c1 	.word	0x2300e9c1
 103436c:	143cf8df 	.word	0x143cf8df
 1034370:	2304e9d0 	.word	0x2304e9d0
 1034374:	6700e9d1 	.word	0x6700e9d1
 1034378:	41bb1b92 	.word	0x41bb1b92
 103437c:	2300e9cd 	.word	0x2300e9cd
 1034380:	2304e9d0 	.word	0x2304e9d0
 1034384:	2300e9c1 	.word	0x2300e9c1
 1034388:	0424f8df 	.word	0x0424f8df
 103438c:	f2416800 	.word	0xf2416800
 1034390:	434801c7 	.word	0x434801c7
 1034394:	e9d42100 	.word	0xe9d42100
 1034398:	e9c46702 	.word	0xe9c46702
 103439c:	fba00100 	.word	0xfba00100
 10343a0:	fb002306 	.word	0xfb002306
 10343a4:	0b123307 	.word	0x0b123307
 10343a8:	5203ea42 	.word	0x5203ea42
 10343ac:	0404f8df 	.word	0x0404f8df
 10343b0:	0b1b6029 	.word	0x0b1b6029
 10343b4:	2302e9c4 	.word	0x2302e9c4
 10343b8:	24006001 	.word	0x24006001
 10343bc:	13f8f8df 	.word	0x13f8f8df
 10343c0:	e9dd600c 	.word	0xe9dd600c
 10343c4:	f8df6704 	.word	0xf8df6704
 10343c8:	429f43a8 	.word	0x429f43a8
 10343cc:	bf28d808 	.word	0xbf28d808
 10343d0:	d2054296 	.word	0xd2054296
 10343d4:	602e2601 	.word	0x602e2601
 10343d8:	f44568a5 	.word	0xf44568a5
 10343dc:	e0023580 	.word	0xe0023580
 10343e0:	f42568a5 	.word	0xf42568a5
 10343e4:	60a53580 	.word	0x60a53580
 10343e8:	6702e9dd 	.word	0x6702e9dd
 10343ec:	d808429f 	.word	0xd808429f
 10343f0:	4296bf28 	.word	0x4296bf28
 10343f4:	2501d205 	.word	0x2501d205
 10343f8:	68a06005 	.word	0x68a06005
 10343fc:	3000f440 	.word	0x3000f440
 1034400:	68a0e002 	.word	0x68a0e002
 1034404:	3000f420 	.word	0x3000f420
 1034408:	e9dd60a0 	.word	0xe9dd60a0
 103440c:	429f6700 	.word	0x429f6700
 1034410:	bf28d808 	.word	0xbf28d808
 1034414:	d2054296 	.word	0xd2054296
 1034418:	60082001 	.word	0x60082001
 103441c:	f44068a0 	.word	0xf44068a0
 1034420:	e0022080 	.word	0xe0022080
 1034424:	f42068a0 	.word	0xf42068a0
 1034428:	60a02080 	.word	0x60a02080
 103442c:	bdf0b007 	.word	0xbdf0b007
 1034430:	43f0e92d 	.word	0x43f0e92d
 1034434:	b08b4684 	.word	0xb08b4684
 1034438:	7301f3cc 	.word	0x7301f3cc
 103443c:	4007f3cc 	.word	0x4007f3cc
 1034440:	8f4ff3bf 	.word	0x8f4ff3bf
 1034444:	e358f8df 	.word	0xe358f8df
 1034448:	2801b1a0 	.word	0x2801b1a0
 103444c:	f10ebf08 	.word	0xf10ebf08
 1034450:	d0110e90 	.word	0xd0110e90
 1034454:	bf082802 	.word	0xbf082802
 1034458:	0ec0f10e 	.word	0x0ec0f10e
 103445c:	2803d00c 	.word	0x2803d00c
 1034460:	f10ebf0c 	.word	0xf10ebf0c
 1034464:	28040ed8 	.word	0x28040ed8
 1034468:	2805d006 	.word	0x2805d006
 103446c:	f10ebf08 	.word	0xf10ebf08
 1034470:	d0010e28 	.word	0xd0010e28
 1034474:	0e78f10e 	.word	0x0e78f10e
 1034478:	fb0020c8 	.word	0xfb0020c8
 103447c:	4fcff201 	.word	0x4fcff201
 1034480:	e9de19d6 	.word	0xe9de19d6
 1034484:	e9d64500 	.word	0xe9d64500
 1034488:	1a260100 	.word	0x1a260100
 103448c:	0801eb65 	.word	0x0801eb65
 1034490:	6804e9cd 	.word	0x6804e9cd
 1034494:	19d219d0 	.word	0x19d219d0
 1034498:	4500e9c0 	.word	0x4500e9c0
 103449c:	0102e9d2 	.word	0x0102e9d2
 10344a0:	4502e9de 	.word	0x4502e9de
 10344a4:	eb651a26 	.word	0xeb651a26
 10344a8:	e9cd0801 	.word	0xe9cd0801
 10344ac:	e9c26802 	.word	0xe9c26802
 10344b0:	e9d24502 	.word	0xe9d24502
 10344b4:	e9de0104 	.word	0xe9de0104
 10344b8:	1a264504 	.word	0x1a264504
 10344bc:	0801eb65 	.word	0x0801eb65
 10344c0:	6800e9cd 	.word	0x6800e9cd
 10344c4:	4504e9c2 	.word	0x4504e9c2
 10344c8:	8f4ff3bf 	.word	0x8f4ff3bf
 10344cc:	2b012000 	.word	0x2b012000
 10344d0:	e9ddd11f 	.word	0xe9ddd11f
 10344d4:	2d004504 	.word	0x2d004504
 10344d8:	4504e9dd 	.word	0x4504e9dd
 10344dc:	4264da02 	.word	0x4264da02
 10344e0:	0545eb65 	.word	0x0545eb65
 10344e4:	4504e9cd 	.word	0x4504e9cd
 10344e8:	4502e9dd 	.word	0x4502e9dd
 10344ec:	e9dd2d00 	.word	0xe9dd2d00
 10344f0:	da024502 	.word	0xda024502
 10344f4:	eb654264 	.word	0xeb654264
 10344f8:	e9cd0545 	.word	0xe9cd0545
 10344fc:	e9dd4502 	.word	0xe9dd4502
 1034500:	2d004500 	.word	0x2d004500
 1034504:	4500e9dd 	.word	0x4500e9dd
 1034508:	4264da3d 	.word	0x4264da3d
 103450c:	0545eb65 	.word	0x0545eb65
 1034510:	2b02e039 	.word	0x2b02e039
 1034514:	e9ddd118 	.word	0xe9ddd118
 1034518:	2d004504 	.word	0x2d004504
 103451c:	e9ddbfa6 	.word	0xe9ddbfa6
 1034520:	e9cd4504 	.word	0xe9cd4504
 1034524:	e9cd4504 	.word	0xe9cd4504
 1034528:	e9dd0004 	.word	0xe9dd0004
 103452c:	2d004502 	.word	0x2d004502
 1034530:	e9ddbfa6 	.word	0xe9ddbfa6
 1034534:	e9cd4502 	.word	0xe9cd4502
 1034538:	e9cd4502 	.word	0xe9cd4502
 103453c:	e9dd0002 	.word	0xe9dd0002
 1034540:	2d004500 	.word	0x2d004500
 1034544:	e01cdb1a 	.word	0xe01cdb1a
 1034548:	d11e2b03 	.word	0xd11e2b03
 103454c:	4504e9dd 	.word	0x4504e9dd
 1034550:	bfae2d00 	.word	0xbfae2d00
 1034554:	0004e9cd 	.word	0x0004e9cd
 1034558:	4504e9dd 	.word	0x4504e9dd
 103455c:	4504e9cd 	.word	0x4504e9cd
 1034560:	4502e9dd 	.word	0x4502e9dd
 1034564:	bfae2d00 	.word	0xbfae2d00
 1034568:	0002e9cd 	.word	0x0002e9cd
 103456c:	4502e9dd 	.word	0x4502e9dd
 1034570:	4502e9cd 	.word	0x4502e9cd
 1034574:	4500e9dd 	.word	0x4500e9dd
 1034578:	db022d00 	.word	0xdb022d00
 103457c:	0000e9cd 	.word	0x0000e9cd
 1034580:	e9dde003 	.word	0xe9dde003
 1034584:	e9cd4500 	.word	0xe9cd4500
 1034588:	f3bf4500 	.word	0xf3bf4500
 103458c:	4b738f4f 	.word	0x4b738f4f
 1034590:	95086e1d 	.word	0x95086e1d
 1034594:	95076e9d 	.word	0x95076e9d
 1034598:	95066f1d 	.word	0x95066f1d
 103459c:	6104e9dd 	.word	0x6104e9dd
 10345a0:	9c080936 	.word	0x9c080936
 10345a4:	7601ea46 	.word	0x7601ea46
 10345a8:	fba41109 	.word	0xfba41109
 10345ac:	fb047906 	.word	0xfb047906
 10345b0:	0c3c9901 	.word	0x0c3c9901
 10345b4:	4409ea44 	.word	0x4409ea44
 10345b8:	4529ea4f 	.word	0x4529ea4f
 10345bc:	4504e9cd 	.word	0x4504e9cd
 10345c0:	6102e9dd 	.word	0x6102e9dd
 10345c4:	9c070936 	.word	0x9c070936
 10345c8:	7601ea46 	.word	0x7601ea46
 10345cc:	fba41109 	.word	0xfba41109
 10345d0:	fb047906 	.word	0xfb047906
 10345d4:	0c3c9901 	.word	0x0c3c9901
 10345d8:	4409ea44 	.word	0x4409ea44
 10345dc:	4529ea4f 	.word	0x4529ea4f
 10345e0:	4502e9cd 	.word	0x4502e9cd
 10345e4:	6100e9dd 	.word	0x6100e9dd
 10345e8:	9c060936 	.word	0x9c060936
 10345ec:	7601ea46 	.word	0x7601ea46
 10345f0:	fba41109 	.word	0xfba41109
 10345f4:	fb047906 	.word	0xfb047906
 10345f8:	0c3c9901 	.word	0x0c3c9901
 10345fc:	4409ea44 	.word	0x4409ea44
 1034600:	4529ea4f 	.word	0x4529ea4f
 1034604:	4500e9cd 	.word	0x4500e9cd
 1034608:	8f4ff3bf 	.word	0x8f4ff3bf
 103460c:	047ff40c 	.word	0x047ff40c
 1034610:	2f80f5b4 	.word	0x2f80f5b4
 1034614:	f5b4bf18 	.word	0xf5b4bf18
 1034618:	d1052fa0 	.word	0xd1052fa0
 103461c:	94086e1c 	.word	0x94086e1c
 1034620:	94076e9c 	.word	0x94076e9c
 1034624:	e0046f1c 	.word	0xe0046f1c
 1034628:	94086e5c 	.word	0x94086e5c
 103462c:	94076edc 	.word	0x94076edc
 1034630:	94066f5c 	.word	0x94066f5c
 1034634:	8f4ff3bf 	.word	0x8f4ff3bf
 1034638:	6104e9dd 	.word	0x6104e9dd
 103463c:	fba49c08 	.word	0xfba49c08
 1034640:	fb047906 	.word	0xfb047906
 1034644:	0abc9901 	.word	0x0abc9901
 1034648:	5489ea44 	.word	0x5489ea44
 103464c:	25a9ea4f 	.word	0x25a9ea4f
 1034650:	4504e9cd 	.word	0x4504e9cd
 1034654:	6102e9dd 	.word	0x6102e9dd
 1034658:	fba49c07 	.word	0xfba49c07
 103465c:	fb047906 	.word	0xfb047906
 1034660:	0abc9901 	.word	0x0abc9901
 1034664:	5489ea44 	.word	0x5489ea44
 1034668:	25a9ea4f 	.word	0x25a9ea4f
 103466c:	4502e9cd 	.word	0x4502e9cd
 1034670:	6100e9dd 	.word	0x6100e9dd
 1034674:	fba49c06 	.word	0xfba49c06
 1034678:	fb047906 	.word	0xfb047906
 103467c:	0abc9901 	.word	0x0abc9901
 1034680:	5489ea44 	.word	0x5489ea44
 1034684:	25a9ea4f 	.word	0x25a9ea4f
 1034688:	4500e9cd 	.word	0x4500e9cd
 103468c:	8f4ff3bf 	.word	0x8f4ff3bf
 1034690:	68244c44 	.word	0x68244c44
 1034694:	e9cdb10c 	.word	0xe9cdb10c
 1034698:	4c460004 	.word	0x4c460004
 103469c:	b10c6824 	.word	0xb10c6824
 10346a0:	0002e9cd 	.word	0x0002e9cd
 10346a4:	68244c44 	.word	0x68244c44
 10346a8:	e9cdb10c 	.word	0xe9cdb10c
 10346ac:	e9c20000 	.word	0xe9c20000
 10346b0:	68580006 	.word	0x68580006
 10346b4:	bf4405c0 	.word	0xbf4405c0
 10346b8:	0104e9dd 	.word	0x0104e9dd
 10346bc:	0106e9c2 	.word	0x0106e9c2
 10346c0:	05806858 	.word	0x05806858
 10346c4:	e9d2d507 	.word	0xe9d2d507
 10346c8:	e9dd0106 	.word	0xe9dd0106
 10346cc:	19004502 	.word	0x19004502
 10346d0:	e9c24169 	.word	0xe9c24169
 10346d4:	68580106 	.word	0x68580106
 10346d8:	d5070540 	.word	0xd5070540
 10346dc:	0106e9d2 	.word	0x0106e9d2
 10346e0:	4500e9dd 	.word	0x4500e9dd
 10346e4:	41691900 	.word	0x41691900
 10346e8:	0106e9c2 	.word	0x0106e9c2
 10346ec:	e8bdb00b 	.word	0xe8bdb00b
 10346f0:	b53083f0 	.word	0xb53083f0
 10346f4:	49334b32 	.word	0x49334b32
 10346f8:	680a681b 	.word	0x680a681b
 10346fc:	0022f843 	.word	0x0022f843
 1034700:	1c406808 	.word	0x1c406808
 1034704:	f3bf6008 	.word	0xf3bf6008
 1034708:	4b2f8f4f 	.word	0x4b2f8f4f
 103470c:	681c4a18 	.word	0x681c4a18
 1034710:	f0444304 	.word	0xf0444304
 1034714:	60d47480 	.word	0x60d47480
 1034718:	f8d44c10 	.word	0xf8d44c10
 103471c:	42a850b8 	.word	0x42a850b8
 1034720:	f8d4d319 	.word	0xf8d4d319
 1034724:	f01550b4 	.word	0xf01550b4
 1034728:	d1090f03 	.word	0xd1090f03
 103472c:	7000f040 	.word	0x7000f040
 1034730:	f8d460d0 	.word	0xf8d460d0
 1034734:	004000b4 	.word	0x004000b4
 1034738:	f8c40840 	.word	0xf8c40840
 103473c:	bd3000b4 	.word	0xbd3000b4
 1034740:	00b4f8d4 	.word	0x00b4f8d4
 1034744:	0003f000 	.word	0x0003f000
 1034748:	d1042801 	.word	0xd1042801
 103474c:	4000f04f 	.word	0x4000f04f
 1034750:	20006018 	.word	0x20006018
 1034754:	bd306008 	.word	0xbd306008
 1034758:	00000000 	.word	0x00000000
 103475c:	20100000 	.word	0x20100000
 1034760:	201014ac 	.word	0x201014ac
 1034764:	201011e0 	.word	0x201011e0
 1034768:	ffbc921c 	.word	0xffbc921c
 103476c:	00f5c28f 	.word	0x00f5c28f
 1034770:	201000dc 	.word	0x201000dc
 1034774:	201011dc 	.word	0x201011dc
 1034778:	201013ec 	.word	0x201013ec
 103477c:	201010d8 	.word	0x201010d8
 1034780:	100000ff 	.word	0x100000ff
 1034784:	ffff8000 	.word	0xffff8000
 1034788:	201010e4 	.word	0x201010e4
 103478c:	0000352c 	.word	0x0000352c
 1034790:	00003638 	.word	0x00003638
 1034794:	20101094 	.word	0x20101094
 1034798:	201014d8 	.word	0x201014d8
 103479c:	201010f0 	.word	0x201010f0
 10347a0:	20100c08 	.word	0x20100c08
 10347a4:	20101290 	.word	0x20101290
 10347a8:	201010f8 	.word	0x201010f8
 10347ac:	20101100 	.word	0x20101100
 10347b0:	2010128c 	.word	0x2010128c
 10347b4:	20101294 	.word	0x20101294
 10347b8:	20101298 	.word	0x20101298
 10347bc:	20100dc0 	.word	0x20100dc0
 10347c0:	201012f0 	.word	0x201012f0
 10347c4:	201012ec 	.word	0x201012ec
 10347c8:	201012f4 	.word	0x201012f4
 10347cc:	4c00f013 	.word	0x4c00f013
 10347d0:	425bd503 	.word	0x425bd503
 10347d4:	f1634252 	.word	0xf1634252
 10347d8:	ea9c0300 	.word	0xea9c0300
 10347dc:	f0000c21 	.word	0xf0000c21
 10347e0:	b5108017 	.word	0xb5108017
 10347e4:	d3034664 	.word	0xd3034664
 10347e8:	42404249 	.word	0x42404249
 10347ec:	0100f161 	.word	0x0100f161
 10347f0:	f80ef000 	.word	0xf80ef000
 10347f4:	d3040064 	.word	0xd3040064
 10347f8:	42404249 	.word	0x42404249
 10347fc:	0100f161 	.word	0x0100f161
 1034800:	d5034224 	.word	0xd5034224
 1034804:	4252425b 	.word	0x4252425b
 1034808:	0300f163 	.word	0x0300f163
 103480c:	0000bd10 	.word	0x0000bd10
 1034810:	d113421b 	.word	0xd113421b
 1034814:	d1364209 	.word	0xd1364209
 1034818:	4684b12a 	.word	0x4684b12a
 103481c:	f0f2fbb0 	.word	0xf0f2fbb0
 1034820:	c210fb02 	.word	0xc210fb02
 1034824:	f0004770 	.word	0xf0004770
 1034828:	d3fcbb0d 	.word	0xd3fcbb0d
 103482c:	23002200 	.word	0x23002200
 1034830:	000b4770 	.word	0x000b4770
 1034834:	21000002 	.word	0x21000002
 1034838:	47702000 	.word	0x47702000
 103483c:	eb714290 	.word	0xeb714290
 1034840:	d3f60c03 	.word	0xd3f60c03
 1034844:	fab1b570 	.word	0xfab1b570
 1034848:	fab3f481 	.word	0xfab3f481
 103484c:	1b2cf583 	.word	0x1b2cf583
 1034850:	f1c440a3 	.word	0xf1c440a3
 1034854:	fa320520 	.word	0xfa320520
 1034858:	4333f605 	.word	0x4333f605
 103485c:	f05f40a2 	.word	0xf05f40a2
 1034860:	40e64600 	.word	0x40e64600
 1034864:	085be002 	.word	0x085be002
 1034868:	0232ea5f 	.word	0x0232ea5f
 103486c:	eb711a84 	.word	0xeb711a84
 1034870:	bf240503 	.word	0xbf240503
 1034874:	46294620 	.word	0x46294620
 1034878:	d3f44176 	.word	0xd3f44176
 103487c:	000b0002 	.word	0x000b0002
 1034880:	21000030 	.word	0x21000030
 1034884:	2a01bd70 	.word	0x2a01bd70
 1034888:	b570d9cf 	.word	0xb570d9cf
 103488c:	d0200c14 	.word	0xd0200c14
 1034890:	f481fab1 	.word	0xf481fab1
 1034894:	f582fab2 	.word	0xf582fab2
 1034898:	0420f1c4 	.word	0x0420f1c4
 103489c:	f1b41964 	.word	0xf1b41964
 10348a0:	d3d60620 	.word	0xd3d60620
 10348a4:	f05f40b2 	.word	0xf05f40b2
 10348a8:	40f44400 	.word	0x40f44400
 10348ac:	e0022500 	.word	0xe0022500
 10348b0:	ea5f0852 	.word	0xea5f0852
 10348b4:	1ac60333 	.word	0x1ac60333
 10348b8:	0e02eb71 	.word	0x0e02eb71
 10348bc:	4630bf24 	.word	0x4630bf24
 10348c0:	41644671 	.word	0x41644671
 10348c4:	d3f3416d 	.word	0xd3f3416d
 10348c8:	000b0002 	.word	0x000b0002
 10348cc:	00290020 	.word	0x00290020
 10348d0:	460cbd70 	.word	0x460cbd70
 10348d4:	f1f2fbb1 	.word	0xf1f2fbb1
 10348d8:	4511fb02 	.word	0x4511fb02
 10348dc:	ea45042d 	.word	0xea45042d
 10348e0:	fbb54510 	.word	0xfbb54510
 10348e4:	fb02f4f2 	.word	0xfb02f4f2
 10348e8:	b2805514 	.word	0xb2805514
 10348ec:	4505ea40 	.word	0x4505ea40
 10348f0:	f0f2fbb5 	.word	0xf0f2fbb5
 10348f4:	5210fb02 	.word	0x5210fb02
 10348f8:	4004ea40 	.word	0x4004ea40
 10348fc:	0000bd70 	.word	0x0000bd70
 1034900:	4ff0e92d 	.word	0x4ff0e92d
 1034904:	eb001581 	.word	0xeb001581
 1034908:	15ca2151 	.word	0x15ca2151
 103490c:	50c2eba0 	.word	0x50c2eba0
 1034910:	46a20204 	.word	0x46a20204
 1034914:	fbaa17e5 	.word	0xfbaa17e5
 1034918:	fb0a010a 	.word	0xfb0a010a
 103491c:	fb051105 	.word	0xfb051105
 1034920:	004e110a 	.word	0x004e110a
 1034924:	fbaa17f7 	.word	0xfbaa17f7
 1034928:	fb0a0106 	.word	0xfb0a0106
 103492c:	fb051107 	.word	0xfb051107
 1034930:	004f1106 	.word	0x004f1106
 1034934:	2a00b083 	.word	0x2a00b083
 1034938:	2200bf48 	.word	0x2200bf48
 103493c:	f5b2d404 	.word	0xf5b2d404
 1034940:	bfc87f80 	.word	0xbfc87f80
 1034944:	7280f44f 	.word	0x7280f44f
 1034948:	0084f20f 	.word	0x0084f20f
 103494c:	0c82eb00 	.word	0x0c82eb00
 1034950:	f8dc481d 	.word	0xf8dc481d
 1034954:	f85cb000 	.word	0xf85cb000
 1034958:	f85cef04 	.word	0xf85cef04
 103495c:	4a1b8f04 	.word	0x4a1b8f04
 1034960:	0107fb80 	.word	0x0107fb80
 1034964:	30fff020 	.word	0x30fff020
 1034968:	0100e9cd 	.word	0x0100e9cd
 103496c:	0966ea4f 	.word	0x0966ea4f
 1034970:	010afba2 	.word	0x010afba2
 1034974:	1105fb02 	.word	0x1105fb02
 1034978:	2300e9dd 	.word	0x2300e9dd
 103497c:	41591810 	.word	0x41591810
 1034980:	0041eba9 	.word	0x0041eba9
 1034984:	f000fb5b 	.word	0xf000fb5b
 1034988:	0267ebc6 	.word	0x0267ebc6
 103498c:	eba24601 	.word	0xeba24601
 1034990:	f06f0264 	.word	0xf06f0264
 1034994:	20004300 	.word	0x20004300
 1034998:	fbc2189a 	.word	0xfbc2189a
 103499c:	1bf2010e 	.word	0x1bf2010e
 10349a0:	eb042000 	.word	0xeb042000
 10349a4:	fbc20262 	.word	0xfbc20262
 10349a8:	460b0108 	.word	0x460b0108
 10349ac:	4c061b39 	.word	0x4c061b39
 10349b0:	0f04f85c 	.word	0x0f04f85c
 10349b4:	f104fb51 	.word	0xf104fb51
 10349b8:	00492200 	.word	0x00492200
 10349bc:	2300fbc1 	.word	0x2300fbc1
 10349c0:	f083fa83 	.word	0xf083fa83
 10349c4:	8ffee8bd 	.word	0x8ffee8bd
 10349c8:	15555555 	.word	0x15555555
 10349cc:	2aaaaaaa 	.word	0x2aaaaaaa
 10349d0:	7ff62182 	.word	0x7ff62182
 10349d4:	7fffffff 	.word	0x7fffffff
 10349d8:	7ff62182 	.word	0x7ff62182
 10349dc:	7fd8878e 	.word	0x7fd8878e
 10349e0:	7fa736b4 	.word	0x7fa736b4
 10349e4:	7f62368f 	.word	0x7f62368f
 10349e8:	7f0991c4 	.word	0x7f0991c4
 10349ec:	7e9d55fc 	.word	0x7e9d55fc
 10349f0:	7e1d93ea 	.word	0x7e1d93ea
 10349f4:	7d8a5f40 	.word	0x7d8a5f40
 10349f8:	7ce3ceb2 	.word	0x7ce3ceb2
 10349fc:	7c29fbee 	.word	0x7c29fbee
 1034a00:	7b5d039e 	.word	0x7b5d039e
 1034a04:	7a7d055b 	.word	0x7a7d055b
 1034a08:	798a23b1 	.word	0x798a23b1
 1034a0c:	78848414 	.word	0x78848414
 1034a10:	776c4edb 	.word	0x776c4edb
 1034a14:	7641af3d 	.word	0x7641af3d
 1034a18:	7504d345 	.word	0x7504d345
 1034a1c:	73b5ebd1 	.word	0x73b5ebd1
 1034a20:	72552c85 	.word	0x72552c85
 1034a24:	70e2cbc6 	.word	0x70e2cbc6
 1034a28:	6f5f02b2 	.word	0x6f5f02b2
 1034a2c:	6dca0d14 	.word	0x6dca0d14
 1034a30:	6c242960 	.word	0x6c242960
 1034a34:	6a6d98a4 	.word	0x6a6d98a4
 1034a38:	68a69e81 	.word	0x68a69e81
 1034a3c:	66cf8120 	.word	0x66cf8120
 1034a40:	64e88926 	.word	0x64e88926
 1034a44:	62f201ac 	.word	0x62f201ac
 1034a48:	60ec3830 	.word	0x60ec3830
 1034a4c:	5ed77c8a 	.word	0x5ed77c8a
 1034a50:	5cb420e0 	.word	0x5cb420e0
 1034a54:	5a82799a 	.word	0x5a82799a
 1034a58:	5842dd54 	.word	0x5842dd54
 1034a5c:	55f5a4d2 	.word	0x55f5a4d2
 1034a60:	539b2af0 	.word	0x539b2af0
 1034a64:	5133cc94 	.word	0x5133cc94
 1034a68:	4ebfe8a5 	.word	0x4ebfe8a5
 1034a6c:	4c3fdff4 	.word	0x4c3fdff4
 1034a70:	49b41533 	.word	0x49b41533
 1034a74:	471cece7 	.word	0x471cece7
 1034a78:	447acd50 	.word	0x447acd50
 1034a7c:	41ce1e65 	.word	0x41ce1e65
 1034a80:	3f1749b8 	.word	0x3f1749b8
 1034a84:	3c56ba70 	.word	0x3c56ba70
 1034a88:	398cdd32 	.word	0x398cdd32
 1034a8c:	36ba2014 	.word	0x36ba2014
 1034a90:	33def287 	.word	0x33def287
 1034a94:	30fbc54d 	.word	0x30fbc54d
 1034a98:	2e110a62 	.word	0x2e110a62
 1034a9c:	2b1f34eb 	.word	0x2b1f34eb
 1034aa0:	2826b928 	.word	0x2826b928
 1034aa4:	25280c5e 	.word	0x25280c5e
 1034aa8:	2223a4c5 	.word	0x2223a4c5
 1034aac:	1f19f97b 	.word	0x1f19f97b
 1034ab0:	1c0b826a 	.word	0x1c0b826a
 1034ab4:	18f8b83c 	.word	0x18f8b83c
 1034ab8:	15e21445 	.word	0x15e21445
 1034abc:	12c8106f 	.word	0x12c8106f
 1034ac0:	0fab272b 	.word	0x0fab272b
 1034ac4:	0c8bd35e 	.word	0x0c8bd35e
 1034ac8:	096a9049 	.word	0x096a9049
 1034acc:	0647d97c 	.word	0x0647d97c
 1034ad0:	03242abf 	.word	0x03242abf
 1034ad4:	00000000 	.word	0x00000000
 1034ad8:	fcdbd541 	.word	0xfcdbd541
 1034adc:	f9b82684 	.word	0xf9b82684
 1034ae0:	f6956fb7 	.word	0xf6956fb7
 1034ae4:	f3742ca2 	.word	0xf3742ca2
 1034ae8:	f054d8d5 	.word	0xf054d8d5
 1034aec:	ed37ef91 	.word	0xed37ef91
 1034af0:	ea1debbb 	.word	0xea1debbb
 1034af4:	e70747c4 	.word	0xe70747c4
 1034af8:	e3f47d96 	.word	0xe3f47d96
 1034afc:	e0e60685 	.word	0xe0e60685
 1034b00:	dddc5b3b 	.word	0xdddc5b3b
 1034b04:	dad7f3a2 	.word	0xdad7f3a2
 1034b08:	d7d946d8 	.word	0xd7d946d8
 1034b0c:	d4e0cb15 	.word	0xd4e0cb15
 1034b10:	d1eef59e 	.word	0xd1eef59e
 1034b14:	cf043ab3 	.word	0xcf043ab3
 1034b18:	cc210d79 	.word	0xcc210d79
 1034b1c:	c945dfec 	.word	0xc945dfec
 1034b20:	c67322ce 	.word	0xc67322ce
 1034b24:	c3a94590 	.word	0xc3a94590
 1034b28:	c0e8b648 	.word	0xc0e8b648
 1034b2c:	be31e19b 	.word	0xbe31e19b
 1034b30:	bb8532b0 	.word	0xbb8532b0
 1034b34:	b8e31319 	.word	0xb8e31319
 1034b38:	b64beacd 	.word	0xb64beacd
 1034b3c:	b3c0200c 	.word	0xb3c0200c
 1034b40:	b140175b 	.word	0xb140175b
 1034b44:	aecc336c 	.word	0xaecc336c
 1034b48:	ac64d510 	.word	0xac64d510
 1034b4c:	aa0a5b2e 	.word	0xaa0a5b2e
 1034b50:	a7bd22ac 	.word	0xa7bd22ac
 1034b54:	a57d8666 	.word	0xa57d8666
 1034b58:	a34bdf20 	.word	0xa34bdf20
 1034b5c:	a1288376 	.word	0xa1288376
 1034b60:	9f13c7d0 	.word	0x9f13c7d0
 1034b64:	9d0dfe54 	.word	0x9d0dfe54
 1034b68:	9b1776da 	.word	0x9b1776da
 1034b6c:	99307ee0 	.word	0x99307ee0
 1034b70:	9759617f 	.word	0x9759617f
 1034b74:	9592675c 	.word	0x9592675c
 1034b78:	93dbd6a0 	.word	0x93dbd6a0
 1034b7c:	9235f2ec 	.word	0x9235f2ec
 1034b80:	90a0fd4e 	.word	0x90a0fd4e
 1034b84:	8f1d343a 	.word	0x8f1d343a
 1034b88:	8daad37b 	.word	0x8daad37b
 1034b8c:	8c4a142f 	.word	0x8c4a142f
 1034b90:	8afb2cbb 	.word	0x8afb2cbb
 1034b94:	89be50c3 	.word	0x89be50c3
 1034b98:	8893b125 	.word	0x8893b125
 1034b9c:	877b7bec 	.word	0x877b7bec
 1034ba0:	8675dc4f 	.word	0x8675dc4f
 1034ba4:	8582faa5 	.word	0x8582faa5
 1034ba8:	84a2fc62 	.word	0x84a2fc62
 1034bac:	83d60412 	.word	0x83d60412
 1034bb0:	831c314e 	.word	0x831c314e
 1034bb4:	8275a0c0 	.word	0x8275a0c0
 1034bb8:	81e26c16 	.word	0x81e26c16
 1034bbc:	8162aa04 	.word	0x8162aa04
 1034bc0:	80f66e3c 	.word	0x80f66e3c
 1034bc4:	809dc971 	.word	0x809dc971
 1034bc8:	8058c94c 	.word	0x8058c94c
 1034bcc:	80277872 	.word	0x80277872
 1034bd0:	8009de7e 	.word	0x8009de7e
 1034bd4:	80000000 	.word	0x80000000
 1034bd8:	8009de7e 	.word	0x8009de7e
 1034bdc:	80277872 	.word	0x80277872
 1034be0:	8058c94c 	.word	0x8058c94c
 1034be4:	809dc971 	.word	0x809dc971
 1034be8:	80f66e3c 	.word	0x80f66e3c
 1034bec:	8162aa04 	.word	0x8162aa04
 1034bf0:	81e26c16 	.word	0x81e26c16
 1034bf4:	8275a0c0 	.word	0x8275a0c0
 1034bf8:	831c314e 	.word	0x831c314e
 1034bfc:	83d60412 	.word	0x83d60412
 1034c00:	84a2fc62 	.word	0x84a2fc62
 1034c04:	8582faa5 	.word	0x8582faa5
 1034c08:	8675dc4f 	.word	0x8675dc4f
 1034c0c:	877b7bec 	.word	0x877b7bec
 1034c10:	8893b125 	.word	0x8893b125
 1034c14:	89be50c3 	.word	0x89be50c3
 1034c18:	8afb2cbb 	.word	0x8afb2cbb
 1034c1c:	8c4a142f 	.word	0x8c4a142f
 1034c20:	8daad37b 	.word	0x8daad37b
 1034c24:	8f1d343a 	.word	0x8f1d343a
 1034c28:	90a0fd4e 	.word	0x90a0fd4e
 1034c2c:	9235f2ec 	.word	0x9235f2ec
 1034c30:	93dbd6a0 	.word	0x93dbd6a0
 1034c34:	9592675c 	.word	0x9592675c
 1034c38:	9759617f 	.word	0x9759617f
 1034c3c:	99307ee0 	.word	0x99307ee0
 1034c40:	9b1776da 	.word	0x9b1776da
 1034c44:	9d0dfe54 	.word	0x9d0dfe54
 1034c48:	9f13c7d0 	.word	0x9f13c7d0
 1034c4c:	a1288376 	.word	0xa1288376
 1034c50:	a34bdf20 	.word	0xa34bdf20
 1034c54:	a57d8666 	.word	0xa57d8666
 1034c58:	a7bd22ac 	.word	0xa7bd22ac
 1034c5c:	aa0a5b2e 	.word	0xaa0a5b2e
 1034c60:	ac64d510 	.word	0xac64d510
 1034c64:	aecc336c 	.word	0xaecc336c
 1034c68:	b140175b 	.word	0xb140175b
 1034c6c:	b3c0200c 	.word	0xb3c0200c
 1034c70:	b64beacd 	.word	0xb64beacd
 1034c74:	b8e31319 	.word	0xb8e31319
 1034c78:	bb8532b0 	.word	0xbb8532b0
 1034c7c:	be31e19b 	.word	0xbe31e19b
 1034c80:	c0e8b648 	.word	0xc0e8b648
 1034c84:	c3a94590 	.word	0xc3a94590
 1034c88:	c67322ce 	.word	0xc67322ce
 1034c8c:	c945dfec 	.word	0xc945dfec
 1034c90:	cc210d79 	.word	0xcc210d79
 1034c94:	cf043ab3 	.word	0xcf043ab3
 1034c98:	d1eef59e 	.word	0xd1eef59e
 1034c9c:	d4e0cb15 	.word	0xd4e0cb15
 1034ca0:	d7d946d8 	.word	0xd7d946d8
 1034ca4:	dad7f3a2 	.word	0xdad7f3a2
 1034ca8:	dddc5b3b 	.word	0xdddc5b3b
 1034cac:	e0e60685 	.word	0xe0e60685
 1034cb0:	e3f47d96 	.word	0xe3f47d96
 1034cb4:	e70747c4 	.word	0xe70747c4
 1034cb8:	ea1debbb 	.word	0xea1debbb
 1034cbc:	ed37ef91 	.word	0xed37ef91
 1034cc0:	f054d8d5 	.word	0xf054d8d5
 1034cc4:	f3742ca2 	.word	0xf3742ca2
 1034cc8:	f6956fb7 	.word	0xf6956fb7
 1034ccc:	f9b82684 	.word	0xf9b82684
 1034cd0:	fcdbd541 	.word	0xfcdbd541
 1034cd4:	00000000 	.word	0x00000000
 1034cd8:	03242abf 	.word	0x03242abf
 1034cdc:	0647d97c 	.word	0x0647d97c
 1034ce0:	096a9049 	.word	0x096a9049
 1034ce4:	0c8bd35e 	.word	0x0c8bd35e
 1034ce8:	0fab272b 	.word	0x0fab272b
 1034cec:	12c8106f 	.word	0x12c8106f
 1034cf0:	15e21445 	.word	0x15e21445
 1034cf4:	18f8b83c 	.word	0x18f8b83c
 1034cf8:	1c0b826a 	.word	0x1c0b826a
 1034cfc:	1f19f97b 	.word	0x1f19f97b
 1034d00:	2223a4c5 	.word	0x2223a4c5
 1034d04:	25280c5e 	.word	0x25280c5e
 1034d08:	2826b928 	.word	0x2826b928
 1034d0c:	2b1f34eb 	.word	0x2b1f34eb
 1034d10:	2e110a62 	.word	0x2e110a62
 1034d14:	30fbc54d 	.word	0x30fbc54d
 1034d18:	33def287 	.word	0x33def287
 1034d1c:	36ba2014 	.word	0x36ba2014
 1034d20:	398cdd32 	.word	0x398cdd32
 1034d24:	3c56ba70 	.word	0x3c56ba70
 1034d28:	3f1749b8 	.word	0x3f1749b8
 1034d2c:	41ce1e65 	.word	0x41ce1e65
 1034d30:	447acd50 	.word	0x447acd50
 1034d34:	471cece7 	.word	0x471cece7
 1034d38:	49b41533 	.word	0x49b41533
 1034d3c:	4c3fdff4 	.word	0x4c3fdff4
 1034d40:	4ebfe8a5 	.word	0x4ebfe8a5
 1034d44:	5133cc94 	.word	0x5133cc94
 1034d48:	539b2af0 	.word	0x539b2af0
 1034d4c:	55f5a4d2 	.word	0x55f5a4d2
 1034d50:	5842dd54 	.word	0x5842dd54
 1034d54:	5a82799a 	.word	0x5a82799a
 1034d58:	5cb420e0 	.word	0x5cb420e0
 1034d5c:	5ed77c8a 	.word	0x5ed77c8a
 1034d60:	60ec3830 	.word	0x60ec3830
 1034d64:	62f201ac 	.word	0x62f201ac
 1034d68:	64e88926 	.word	0x64e88926
 1034d6c:	66cf8120 	.word	0x66cf8120
 1034d70:	68a69e81 	.word	0x68a69e81
 1034d74:	6a6d98a4 	.word	0x6a6d98a4
 1034d78:	6c242960 	.word	0x6c242960
 1034d7c:	6dca0d14 	.word	0x6dca0d14
 1034d80:	6f5f02b2 	.word	0x6f5f02b2
 1034d84:	70e2cbc6 	.word	0x70e2cbc6
 1034d88:	72552c85 	.word	0x72552c85
 1034d8c:	73b5ebd1 	.word	0x73b5ebd1
 1034d90:	7504d345 	.word	0x7504d345
 1034d94:	7641af3d 	.word	0x7641af3d
 1034d98:	776c4edb 	.word	0x776c4edb
 1034d9c:	78848414 	.word	0x78848414
 1034da0:	798a23b1 	.word	0x798a23b1
 1034da4:	7a7d055b 	.word	0x7a7d055b
 1034da8:	7b5d039e 	.word	0x7b5d039e
 1034dac:	7c29fbee 	.word	0x7c29fbee
 1034db0:	7ce3ceb2 	.word	0x7ce3ceb2
 1034db4:	7d8a5f40 	.word	0x7d8a5f40
 1034db8:	7e1d93ea 	.word	0x7e1d93ea
 1034dbc:	7e9d55fc 	.word	0x7e9d55fc
 1034dc0:	7f0991c4 	.word	0x7f0991c4
 1034dc4:	7f62368f 	.word	0x7f62368f
 1034dc8:	7fa736b4 	.word	0x7fa736b4
 1034dcc:	7fd8878e 	.word	0x7fd8878e
 1034dd0:	7ff62182 	.word	0x7ff62182
 1034dd4:	7fffffff 	.word	0x7fffffff
 1034dd8:	7ff62182 	.word	0x7ff62182
 1034ddc:	4b066882 	.word	0x4b066882
 1034de0:	401a0209 	.word	0x401a0209
 1034de4:	6170f401 	.word	0x6170f401
 1034de8:	e0004311 	.word	0xe0004311
 1034dec:	f0414011 	.word	0xf0414011
 1034df0:	60814125 	.word	0x60814125
 1034df4:	00004770 	.word	0x00004770
 1034df8:	00fff0ff 	.word	0x00fff0ff
 1034dfc:	47706001 	.word	0x47706001
 1034e00:	bf00b500 	.word	0xbf00b500
 1034e04:	46960013 	.word	0x46960013
 1034e08:	39104694 	.word	0x39104694
 1034e0c:	e8a0bf28 	.word	0xe8a0bf28
 1034e10:	d8fa500c 	.word	0xd8fa500c
 1034e14:	7c41ea5f 	.word	0x7c41ea5f
 1034e18:	c00cbf28 	.word	0xc00cbf28
 1034e1c:	f840bf48 	.word	0xf840bf48
 1034e20:	07c92b04 	.word	0x07c92b04
 1034e24:	f820bf28 	.word	0xf820bf28
 1034e28:	bf482b02 	.word	0xbf482b02
 1034e2c:	2b01f800 	.word	0x2b01f800
 1034e30:	0000bd00 	.word	0x0000bd00
 1034e34:	68014802 	.word	0x68014802
 1034e38:	2170f421 	.word	0x2170f421
 1034e3c:	47706001 	.word	0x47706001
 1034e40:	48000004 	.word	0x48000004
 1034e44:	00004770 	.word	0x00004770
 1034e48:	47dca7c1 	.word	0x47dca7c1
 1034e4c:	e825f754 	.word	0xe825f754
 1034e50:	f0029f16 	.word	0xf0029f16
 1034e54:	41df1ea3 	.word	0x41df1ea3
 1034e58:	c4df8fb0 	.word	0xc4df8fb0
 1034e5c:	14203b6f 	.word	0x14203b6f
 1034e60:	c80d7b8f 	.word	0xc80d7b8f
 1034e64:	12d16e34 	.word	0x12d16e34
 1034e68:	80007c8e 	.word	0x80007c8e
 1034e6c:	00b290dc 	.word	0x00b290dc
 1034e70:	7f54dd12 	.word	0x7f54dd12
 1034e74:	0d10981d 	.word	0x0d10981d
 1034e78:	80b83ea2 	.word	0x80b83ea2
 1034e7c:	0d8df910 	.word	0x0d8df910
 1034e80:	442e270f 	.word	0x442e270f
 1034e84:	48721598 	.word	0x48721598
 1034e88:	0443ee89 	.word	0x0443ee89
 1034e8c:	e0000000 	.word	0xe0000000
 1034e90:	e0000000 	.word	0xe0000000
 1034e94:	07a4d998 	.word	0x07a4d998
 1034e98:	3c35d933 	.word	0x3c35d933
 1034e9c:	1ccf1491 	.word	0x1ccf1491
 1034ea0:	658a5305 	.word	0x658a5305
 1034ea4:	0c5fb701 	.word	0x0c5fb701
 1034ea8:	e7829e7f 	.word	0xe7829e7f
 1034eac:	0c5fb701 	.word	0x0c5fb701
 1034eb0:	81d5076c 	.word	0x81d5076c
 1034eb4:	3f098b9a 	.word	0x3f098b9a
 1034eb8:	317edc07 	.word	0x317edc07
 1034ebc:	9d22cf5f 	.word	0x9d22cf5f
 1034ec0:	317edc07 	.word	0x317edc07
 1034ec4:	80c45c36 	.word	0x80c45c36
 1034ec8:	3f7b8be0 	.word	0x3f7b8be0
 1034ecc:	17c8221f 	.word	0x17c8221f
 1034ed0:	d1457de3 	.word	0xd1457de3
 1034ed4:	17c8221f 	.word	0x17c8221f
 1034ed8:	83bb2c28 	.word	0x83bb2c28
 1034edc:	3d030b9a 	.word	0x3d030b9a
 1034ee0:	17c8221f 	.word	0x17c8221f
 1034ee4:	d078fbfd 	.word	0xd078fbfd
 1034ee8:	17c8221f 	.word	0x17c8221f
 1034eec:	8224beba 	.word	0x8224beba
 1034ef0:	3e241670 	.word	0x3e241670
 1034ef4:	0106c79e 	.word	0x0106c79e
 1034ef8:	00000000 	.word	0x00000000
 1034efc:	fef93862 	.word	0xfef93862
 1034f00:	e0ffaa51 	.word	0xe0ffaa51
 1034f04:	0f1d817f 	.word	0x0f1d817f
 1034f08:	f54ce116 	.word	0xf54ce116
 1034f0c:	db8c82e3 	.word	0xdb8c82e3
 1034f10:	bef4de9b 	.word	0xbef4de9b
 1034f14:	a7a17a17 	.word	0xa7a17a17
 1034f18:	978af8af 	.word	0x978af8af
 1034f1c:	8d6cffc5 	.word	0x8d6cffc5
 1034f20:	8751fca7 	.word	0x8751fca7
 1034f24:	8397cdb2 	.word	0x8397cdb2
 1034f28:	8113f0e8 	.word	0x8113f0e8
 1034f2c:	7d857ec1 	.word	0x7d857ec1
 1034f30:	7b147c4c 	.word	0x7b147c4c
 1034f34:	78ac79df 	.word	0x78ac79df
 1034f38:	764c777b 	.word	0x764c777b
 1034f3c:	73f67520 	.word	0x73f67520
 1034f40:	71a672cd 	.word	0x71a672cd
 1034f44:	6f5f7082 	.word	0x6f5f7082
 1034f48:	6d206e3f 	.word	0x6d206e3f
 1034f4c:	6ae96c04 	.word	0x6ae96c04
 1034f50:	68b869d0 	.word	0x68b869d0
 1034f54:	669067a4 	.word	0x669067a4
 1034f58:	646e657e 	.word	0x646e657e
 1034f5c:	62536360 	.word	0x62536360
 1034f60:	603f6148 	.word	0x603f6148
 1034f64:	5e325f38 	.word	0x5e325f38
 1034f68:	5c2a5d2d 	.word	0x5c2a5d2d
 1034f6c:	5a2a5b29 	.word	0x5a2a5b29
 1034f70:	582f592b 	.word	0x582f592b
 1034f74:	563a5734 	.word	0x563a5734
 1034f78:	544b5542 	.word	0x544b5542
 1034f7c:	52615356 	.word	0x52615356
 1034f80:	507e516f 	.word	0x507e516f
 1034f84:	4e9f4f8e 	.word	0x4e9f4f8e
 1034f88:	4cc64db2 	.word	0x4cc64db2
 1034f8c:	4af24bdb 	.word	0x4af24bdb
 1034f90:	49224a09 	.word	0x49224a09
 1034f94:	4757483c 	.word	0x4757483c
 1034f98:	45914673 	.word	0x45914673
 1034f9c:	43cf44af 	.word	0x43cf44af
 1034fa0:	421242f0 	.word	0x421242f0
 1034fa4:	40594135 	.word	0x40594135
 1034fa8:	3ea43f7e 	.word	0x3ea43f7e
 1034fac:	3cf33dcb 	.word	0x3cf33dcb
 1034fb0:	3b463c1c 	.word	0x3b463c1c
 1034fb4:	399c3a71 	.word	0x399c3a71
 1034fb8:	37f638c8 	.word	0x37f638c8
 1034fbc:	36533724 	.word	0x36533724
 1034fc0:	34b33582 	.word	0x34b33582
 1034fc4:	331633e4 	.word	0x331633e4
 1034fc8:	317c3249 	.word	0x317c3249
 1034fcc:	2fe530b1 	.word	0x2fe530b1
 1034fd0:	2e502f1a 	.word	0x2e502f1a
 1034fd4:	2cbe2d87 	.word	0x2cbe2d87
 1034fd8:	2b2e2bf6 	.word	0x2b2e2bf6
 1034fdc:	299f2a66 	.word	0x299f2a66
 1034fe0:	281328d9 	.word	0x281328d9
 1034fe4:	2687274d 	.word	0x2687274d
 1034fe8:	24fd25c2 	.word	0x24fd25c2
 1034fec:	23742438 	.word	0x23742438
 1034ff0:	21eb22af 	.word	0x21eb22af
 1034ff4:	20622127 	.word	0x20622127
 1034ff8:	1eda1f9e 	.word	0x1eda1f9e
 1034ffc:	1d511e15 	.word	0x1d511e15
 1035000:	1bc61c8b 	.word	0x1bc61c8b
 1035004:	1a3a1b00 	.word	0x1a3a1b00
 1035008:	18ab1973 	.word	0x18ab1973
 103500c:	171817e2 	.word	0x171817e2
 1035010:	1581164d 	.word	0x1581164d
 1035014:	13e414b4 	.word	0x13e414b4
 1035018:	12401313 	.word	0x12401313
 103501c:	1091116a 	.word	0x1091116a
 1035020:	0ed50fb5 	.word	0x0ed50fb5
 1035024:	0d060df0 	.word	0x0d060df0
 1035028:	0b1c0c15 	.word	0x0b1c0c15
 103502c:	09090a19 	.word	0x09090a19
 1035030:	06ad07e7 	.word	0x06ad07e7
 1035034:	0399054a 	.word	0x0399054a
 1035038:	ffaeffd7 	.word	0xffaeffd7
 103503c:	ff5dff85 	.word	0xff5dff85
 1035040:	ff0dff35 	.word	0xff0dff35
 1035044:	febefee5 	.word	0xfebefee5
 1035048:	fe70fe97 	.word	0xfe70fe97
 103504c:	fe24fe4a 	.word	0xfe24fe4a
 1035050:	fdd9fdfe 	.word	0xfdd9fdfe
 1035054:	fd8ffdb4 	.word	0xfd8ffdb4
 1035058:	fd46fd6a 	.word	0xfd46fd6a
 103505c:	fcfffd22 	.word	0xfcfffd22
 1035060:	fcb8fcdb 	.word	0xfcb8fcdb
 1035064:	fc73fc95 	.word	0xfc73fc95
 1035068:	fc2ffc51 	.word	0xfc2ffc51
 103506c:	fbedfc0e 	.word	0xfbedfc0e
 1035070:	fbabfbcc 	.word	0xfbabfbcc
 1035074:	fb6bfb8b 	.word	0xfb6bfb8b
 1035078:	fb2cfb4b 	.word	0xfb2cfb4b
 103507c:	faeefb0d 	.word	0xfaeefb0d
 1035080:	fab2fad0 	.word	0xfab2fad0
 1035084:	fa77fa94 	.word	0xfa77fa94
 1035088:	fa3dfa5a 	.word	0xfa3dfa5a
 103508c:	fa05fa21 	.word	0xfa05fa21
 1035090:	f9cef9e9 	.word	0xf9cef9e9
 1035094:	f998f9b3 	.word	0xf998f9b3
 1035098:	f964f97e 	.word	0xf964f97e
 103509c:	f931f94a 	.word	0xf931f94a
 10350a0:	f8fff918 	.word	0xf8fff918
 10350a4:	f8cff8e7 	.word	0xf8cff8e7
 10350a8:	f8a1f8b8 	.word	0xf8a1f8b8
 10350ac:	f874f88a 	.word	0xf874f88a
 10350b0:	f848f85e 	.word	0xf848f85e
 10350b4:	f81ef833 	.word	0xf81ef833
 10350b8:	f7f6f80a 	.word	0xf7f6f80a
 10350bc:	f7d0f7e3 	.word	0xf7d0f7e3
 10350c0:	f7abf7bd 	.word	0xf7abf7bd
 10350c4:	f788f799 	.word	0xf788f799
 10350c8:	f767f777 	.word	0xf767f777
 10350cc:	f748f757 	.word	0xf748f757
 10350d0:	f72af739 	.word	0xf72af739
 10350d4:	f70ff71c 	.word	0xf70ff71c
 10350d8:	f6f6f702 	.word	0xf6f6f702
 10350dc:	f6dff6ea 	.word	0xf6dff6ea
 10350e0:	f6caf6d5 	.word	0xf6caf6d5
 10350e4:	f6b8f6c1 	.word	0xf6b8f6c1
 10350e8:	f6a9f6b1 	.word	0xf6a9f6b1
 10350ec:	f69cf6a2 	.word	0xf69cf6a2
 10350f0:	f693f697 	.word	0xf693f697
 10350f4:	f68cf68f 	.word	0xf68cf68f
 10350f8:	f689f68a 	.word	0xf689f68a
 10350fc:	f689f689 	.word	0xf689f689
 1035100:	f68ef68b 	.word	0xf68ef68b
 1035104:	f696f691 	.word	0xf696f691
 1035108:	f6a3f69c 	.word	0xf6a3f69c
 103510c:	f6b5f6ab 	.word	0xf6b5f6ab
 1035110:	f6cdf6c0 	.word	0xf6cdf6c0
 1035114:	f6ebf6db 	.word	0xf6ebf6db
 1035118:	f710f6fd 	.word	0xf710f6fd
 103511c:	f73df726 	.word	0xf73df726
 1035120:	f774f758 	.word	0xf774f758
 1035124:	f7b7f794 	.word	0xf7b7f794
 1035128:	f806f7dc 	.word	0xf806f7dc
 103512c:	f867f835 	.word	0xf867f835
 1035130:	f8def8a0 	.word	0xf8def8a0
 1035134:	f973f924 	.word	0xf973f924
 1035138:	fa35f9cd 	.word	0xfa35f9cd
 103513c:	fb43faaf 	.word	0xfb43faaf
 1035140:	fd0bfc00 	.word	0xfd0bfc00
 1035144:	21014854 	.word	0x21014854
 1035148:	47706001 	.word	0x47706001
 103514c:	21024852 	.word	0x21024852
 1035150:	47706001 	.word	0x47706001
 1035154:	21044850 	.word	0x21044850
 1035158:	47706001 	.word	0x47706001
 103515c:	2108484e 	.word	0x2108484e
 1035160:	47706001 	.word	0x47706001
 1035164:	6800484d 	.word	0x6800484d
 1035168:	484db130 	.word	0x484db130
 103516c:	62012100 	.word	0x62012100
 1035170:	10e8f8c0 	.word	0x10e8f8c0
 1035174:	11b0f8c0 	.word	0x11b0f8c0
 1035178:	f04f4770 	.word	0xf04f4770
 103517c:	69004090 	.word	0x69004090
 1035180:	d4000680 	.word	0xd4000680
 1035184:	b5384770 	.word	0xb5384770
 1035188:	f04f2120 	.word	0xf04f2120
 103518c:	f0004090 	.word	0xf0004090
 1035190:	4844f89b 	.word	0x4844f89b
 1035194:	f2406800 	.word	0xf2406800
 1035198:	f0002102 	.word	0xf0002102
 103519c:	f7fef897 	.word	0xf7fef897
 10351a0:	4841fdcc 	.word	0x4841fdcc
 10351a4:	68014b41 	.word	0x68014b41
 10351a8:	0107f001 	.word	0x0107f001
 10351ac:	fb122218 	.word	0xfb122218
 10351b0:	4a3f3101 	.word	0x4a3f3101
 10351b4:	f0037893 	.word	0xf0037893
 10351b8:	2b01030f 	.word	0x2b01030f
 10351bc:	4b3dd004 	.word	0x4b3dd004
 10351c0:	f504681c 	.word	0xf504681c
 10351c4:	601c3480 	.word	0x601c3480
 10351c8:	3007f8d2 	.word	0x3007f8d2
 10351cc:	4b3aba1c 	.word	0x4b3aba1c
 10351d0:	0a24681d 	.word	0x0a24681d
 10351d4:	fb540224 	.word	0xfb540224
 10351d8:	00a4f415 	.word	0x00a4f415
 10351dc:	f8d2600c 	.word	0xf8d2600c
 10351e0:	681d400b 	.word	0x681d400b
 10351e4:	0a24ba24 	.word	0x0a24ba24
 10351e8:	fb540224 	.word	0xfb540224
 10351ec:	00a4f415 	.word	0x00a4f415
 10351f0:	f8d2604c 	.word	0xf8d2604c
 10351f4:	681d400f 	.word	0x681d400f
 10351f8:	0a24ba24 	.word	0x0a24ba24
 10351fc:	fb540224 	.word	0xfb540224
 1035200:	00a4f415 	.word	0x00a4f415
 1035204:	f8d2608c 	.word	0xf8d2608c
 1035208:	681d4013 	.word	0x681d4013
 103520c:	0a24ba24 	.word	0x0a24ba24
 1035210:	fb540224 	.word	0xfb540224
 1035214:	00a4f415 	.word	0x00a4f415
 1035218:	f8d260cc 	.word	0xf8d260cc
 103521c:	681d4017 	.word	0x681d4017
 1035220:	0a24ba24 	.word	0x0a24ba24
 1035224:	fb540224 	.word	0xfb540224
 1035228:	00a4f415 	.word	0x00a4f415
 103522c:	f8d2610c 	.word	0xf8d2610c
 1035230:	681d401b 	.word	0x681d401b
 1035234:	0a24ba24 	.word	0x0a24ba24
 1035238:	fb540224 	.word	0xfb540224
 103523c:	00a4f415 	.word	0x00a4f415
 1035240:	f8d2614c 	.word	0xf8d2614c
 1035244:	68001003 	.word	0x68001003
 1035248:	0a09ba09 	.word	0x0a09ba09
 103524c:	f0100209 	.word	0xf0100209
 1035250:	d0020007 	.word	0xd0020007
 1035254:	d00b2804 	.word	0xd00b2804
 1035258:	6818bd31 	.word	0x6818bd31
 103525c:	f010fb51 	.word	0xf010fb51
 1035260:	00804916 	.word	0x00804916
 1035264:	20206008 	.word	0x20206008
 1035268:	0001f88d 	.word	0x0001f88d
 103526c:	e0092003 	.word	0xe0092003
 1035270:	60014813 	.word	0x60014813
 1035274:	f88d2020 	.word	0xf88d2020
 1035278:	48120001 	.word	0x48120001
 103527c:	00ccf890 	.word	0x00ccf890
 1035280:	00fdf000 	.word	0x00fdf000
 1035284:	0000f88d 	.word	0x0000f88d
 1035288:	a9002201 	.word	0xa9002201
 103528c:	0001f10d 	.word	0x0001f10d
 1035290:	fdaaf7fe 	.word	0xfdaaf7fe
 1035294:	0000bd31 	.word	0x0000bd31
 1035298:	48008008 	.word	0x48008008
 103529c:	4800801c 	.word	0x4800801c
 10352a0:	20100dc0 	.word	0x20100dc0
 10352a4:	201014e8 	.word	0x201014e8
 10352a8:	201011d8 	.word	0x201011d8
 10352ac:	20101118 	.word	0x20101118
 10352b0:	20101488 	.word	0x20101488
 10352b4:	201014d4 	.word	0x201014d4
 10352b8:	201011ec 	.word	0x201011ec
 10352bc:	201012dc 	.word	0x201012dc
 10352c0:	201012e0 	.word	0x201012e0
 10352c4:	20100000 	.word	0x20100000
 10352c8:	47706181 	.word	0x47706181
 10352cc:	2202f240 	.word	0x2202f240
 10352d0:	62014011 	.word	0x62014011
 10352d4:	68814770 	.word	0x68814770
 10352d8:	6802e007 	.word	0x6802e007
 10352dc:	68536811 	.word	0x68536811
 10352e0:	185b1889 	.word	0x185b1889
 10352e4:	320860c3 	.word	0x320860c3
 10352e8:	68c26002 	.word	0x68c26002
 10352ec:	d0f44291 	.word	0xd0f44291
 10352f0:	60821c4a 	.word	0x60821c4a
 10352f4:	47707808 	.word	0x47707808
 10352f8:	4dffe92d 	.word	0x4dffe92d
 10352fc:	0108f100 	.word	0x0108f100
 1035300:	f04f9100 	.word	0xf04f9100
 1035304:	68010a00 	.word	0x68010a00
 1035308:	08499a00 	.word	0x08499a00
 103530c:	01c1eb02 	.word	0x01c1eb02
 1035310:	46d39101 	.word	0x46d39101
 1035314:	91022100 	.word	0x91022100
 1035318:	68019103 	.word	0x68019103
 103531c:	eb000849 	.word	0xeb000849
 1035320:	684001c1 	.word	0x684001c1
 1035324:	0501f000 	.word	0x0501f000
 1035328:	0408f101 	.word	0x0408f101
 103532c:	eb040840 	.word	0xeb040840
 1035330:	e01f06c0 	.word	0xe01f06c0
 1035334:	f7ffa800 	.word	0xf7ffa800
 1035338:	b247ffce 	.word	0xb247ffce
 103533c:	f7ffa800 	.word	0xf7ffa800
 1035340:	4680ffca 	.word	0x4680ffca
 1035344:	d10d45da 	.word	0xd10d45da
 1035348:	bf0842b4 	.word	0xbf0842b4
 103534c:	f81bf000 	.word	0xf81bf000
 1035350:	a000f8d4 	.word	0xa000f8d4
 1035354:	44cab105 	.word	0x44cab105
 1035358:	eb006860 	.word	0xeb006860
 103535c:	34080b0a 	.word	0x34080b0a
 1035360:	d0f145da 	.word	0xd0f145da
 1035364:	8b01f80a 	.word	0x8b01f80a
 1035368:	d5092f00 	.word	0xd5092f00
 103536c:	d1e91c7f 	.word	0xd1e91c7f
 1035370:	d1df45da 	.word	0xd1df45da
 1035374:	d1dd42b4 	.word	0xd1dd42b4
 1035378:	b0044630 	.word	0xb0044630
 103537c:	8df0e8bd 	.word	0x8df0e8bd
 1035380:	d5db1e7f 	.word	0xd5db1e7f
 1035384:	2001e7f4 	.word	0x2001e7f4
 1035388:	b800f000 	.word	0xb800f000
 103538c:	20184901 	.word	0x20184901
 1035390:	e7fbbeab 	.word	0xe7fbbeab
 1035394:	00020026 	.word	0x00020026
 1035398:	4907b510 	.word	0x4907b510
 103539c:	31184479 	.word	0x31184479
 10353a0:	447c4c06 	.word	0x447c4c06
 10353a4:	e0043416 	.word	0xe0043416
 10353a8:	1d08680a 	.word	0x1d08680a
 10353ac:	47881851 	.word	0x47881851
 10353b0:	42a14601 	.word	0x42a14601
 10353b4:	bd10d1f8 	.word	0xbd10d1f8
 10353b8:	00000008 	.word	0x00000008
 10353bc:	00000038 	.word	0x00000038
 10353c0:	ffffe73b 	.word	0xffffe73b
 10353c4:	00000350 	.word	0x00000350
 10353c8:	20100000 	.word	0x20100000
 10353cc:	00000118 	.word	0x00000118
 10353d0:	201013f0 	.word	0x201013f0
 10353d4:	00000000 	.word	0x00000000
 10353d8:	ffffff21 	.word	0xffffff21
 10353dc:	00000002 	.word	0x00000002
 10353e0:	00000002 	.word	0x00000002
 10353e4:	0000006c 	.word	0x0000006c
 10353e8:	0000011b 	.word	0x0000011b
 10353ec:	20100368 	.word	0x20100368
 10353f0:	00001088 	.word	0x00001088
 10353f4:	47702001 	.word	0x47702001
 10353f8:	e7fee7fe 	.word	0xe7fee7fe
 10353fc:	e7fee7fe 	.word	0xe7fee7fe
 1035400:	e7fee7fe 	.word	0xe7fee7fe
 1035404:	e7fee7fe 	.word	0xe7fee7fe
 1035408:	e7fee7fe 	.word	0xe7fee7fe
 103540c:	fff2f7ff 	.word	0xfff2f7ff
 1035410:	d0012800 	.word	0xd0012800
 1035414:	ffc0f7ff 	.word	0xffc0f7ff
 1035418:	f7fc2000 	.word	0xf7fc2000
 103541c:	f000fb93 	.word	0xf000fb93
 1035420:	f000f800 	.word	0xf000f800
 1035424:	0000b801 	.word	0x0000b801
 1035428:	46384607 	.word	0x46384607
 103542c:	ffaef7ff 	.word	0xffaef7ff
 1035430:	0000e7fb 	.word	0x0000e7fb
 1035434:	00000040 	.word	0x00000040
 1035438:	00000080 	.word	0x00000080
 103543c:	00000100 	.word	0x00000100
 1035440:	00000200 	.word	0x00000200
 1035444:	46c046c0 	.word	0x46c046c0
 1035448:	46c046c0 	.word	0x46c046c0
 103544c:	ffdef7ff 	.word	0xffdef7ff
 1035450:	00810081 	.word	0x00810081
 1035454:	00810081 	.word	0x00810081
 1035458:	00810081 	.word	0x00810081
 103545c:	00810081 	.word	0x00810081
 1035460:	00810081 	.word	0x00810081
 1035464:	00810081 	.word	0x00810081
 1035468:	00810081 	.word	0x00810081
 103546c:	00810081 	.word	0x00810081
 1035470:	00810081 	.word	0x00810081
 1035474:	00810081 	.word	0x00810081
 1035478:	00810081 	.word	0x00810081
 103547c:	00810081 	.word	0x00810081
 1035480:	00810081 	.word	0x00810081
 1035484:	00810081 	.word	0x00810081
 1035488:	00f30081 	.word	0x00f30081
 103548c:	0005fffb 	.word	0x0005fffb
 1035490:	00ff1000 	.word	0x00ff1000
 1035494:	0300f761 	.word	0x0300f761
 1035498:	49374bc7 	.word	0x49374bc7
 103549c:	00810081 	.word	0x00810081
 10354a0:	081900ee 	.word	0x081900ee
 10354a4:	4520101c 	.word	0x4520101c
 10354a8:	f900003a 	.word	0xf900003a
 10354ac:	fb000039 	.word	0xfb000039
 10354b0:	fd000039 	.word	0xfd000039
 10354b4:	ff000039 	.word	0xff000039
 10354b8:	01000039 	.word	0x01000039
 10354bc:	0500ee3a 	.word	0x0500ee3a
 10354c0:	00003a03 	.word	0x00003a03
 10354c4:	00fa3a05 	.word	0x00fa3a05
 10354c8:	003a0721 	.word	0x003a0721
 10354cc:	003a0900 	.word	0x003a0900
 10354d0:	003a0b00 	.word	0x003a0b00
 10354d4:	003a0b00 	.word	0x003a0b00
 10354d8:	003a0b00 	.word	0x003a0b00
 10354dc:	003a0b00 	.word	0x003a0b00
 10354e0:	003a0b00 	.word	0x003a0b00
 10354e4:	003a0b00 	.word	0x003a0b00
 10354e8:	fa3a0b00 	.word	0xfa3a0b00
 10354ec:	3a0b0100 	.word	0x3a0b0100
 10354f0:	890500f6 	.word	0x890500f6
 10354f4:	8f000021 	.word	0x8f000021
 10354f8:	1d00fa21 	.word	0x1d00fa21
 10354fc:	00003a0b 	.word	0x00003a0b
 1035500:	00003a0b 	.word	0x00003a0b
 1035504:	00003a0b 	.word	0x00003a0b
 1035508:	00003a0b 	.word	0x00003a0b
 103550c:	00003a0b 	.word	0x00003a0b
 1035510:	00003a0b 	.word	0x00003a0b
 1035514:	00003a0b 	.word	0x00003a0b
 1035518:	00fa3a0b 	.word	0x00fa3a0b
 103551c:	003a0b2d 	.word	0x003a0b2d
 1035520:	003a0b00 	.word	0x003a0b00
 1035524:	003a0b00 	.word	0x003a0b00
 1035528:	003a0b00 	.word	0x003a0b00
 103552c:	003a0b00 	.word	0x003a0b00
 1035530:	003a0b00 	.word	0x003a0b00
 1035534:	003a0b00 	.word	0x003a0b00
 1035538:	003a0b00 	.word	0x003a0b00
 103553c:	003a0b00 	.word	0x003a0b00
 1035540:	003a0b00 	.word	0x003a0b00
 1035544:	003a0b00 	.word	0x003a0b00
 1035548:	fa3a0b00 	.word	0xfa3a0b00
 103554c:	3a0b1500 	.word	0x3a0b1500
 1035550:	21950000 	.word	0x21950000
 1035554:	3a0b0000 	.word	0x3a0b0000
 1035558:	3a0b0000 	.word	0x3a0b0000
 103555c:	377b0000 	.word	0x377b0000
 1035560:	37650000 	.word	0x37650000
 1035564:	ff0300fa 	.word	0xff0300fa
 1035568:	00100000 	.word	0x00100000
	...

01035600 <core1_image_end_p>:
 1035600:	201014d8 	.word	0x201014d8
 1035604:	000033ff 	.word	0x000033ff
 1035608:	000033c5 	.word	0x000033c5
 103560c:	000033c7 	.word	0x000033c7
 1035610:	000033c9 	.word	0x000033c9
 1035614:	000033cb 	.word	0x000033cb
 1035618:	000033cd 	.word	0x000033cd
	...
 103562c:	000033cf 	.word	0x000033cf
 1035630:	000033d1 	.word	0x000033d1
 1035634:	00000000 	.word	0x00000000
 1035638:	000033d3 	.word	0x000033d3
 103563c:	000033d5 	.word	0x000033d5
 1035640:	000033d7 	.word	0x000033d7
 1035644:	000033d7 	.word	0x000033d7
 1035648:	000033d7 	.word	0x000033d7
 103564c:	000033d7 	.word	0x000033d7
 1035650:	000033d7 	.word	0x000033d7
 1035654:	000033d7 	.word	0x000033d7
 1035658:	000033d7 	.word	0x000033d7
 103565c:	00000000 	.word	0x00000000
 1035660:	000033d7 	.word	0x000033d7
	...
 103566c:	00001be1 	.word	0x00001be1
 1035670:	00001be7 	.word	0x00001be7
 1035674:	00000000 	.word	0x00000000
 1035678:	000033d7 	.word	0x000033d7
 103567c:	000033d7 	.word	0x000033d7
 1035680:	000033d7 	.word	0x000033d7
 1035684:	000033d7 	.word	0x000033d7
 1035688:	000033d7 	.word	0x000033d7
 103568c:	000033d7 	.word	0x000033d7
 1035690:	000033d7 	.word	0x000033d7
 1035694:	000033d7 	.word	0x000033d7
 1035698:	00000000 	.word	0x00000000
 103569c:	000033d7 	.word	0x000033d7
 10356a0:	000033d7 	.word	0x000033d7
 10356a4:	000033d7 	.word	0x000033d7
 10356a8:	000033d7 	.word	0x000033d7
 10356ac:	000033d7 	.word	0x000033d7
 10356b0:	000033d7 	.word	0x000033d7
 10356b4:	000033d7 	.word	0x000033d7
 10356b8:	000033d7 	.word	0x000033d7
 10356bc:	000033d7 	.word	0x000033d7
 10356c0:	000033d7 	.word	0x000033d7
 10356c4:	000033d7 	.word	0x000033d7
 10356c8:	000033d7 	.word	0x000033d7
 10356cc:	00000000 	.word	0x00000000
 10356d0:	000033d7 	.word	0x000033d7
 10356d4:	00001bed 	.word	0x00001bed
 10356d8:	000033d7 	.word	0x000033d7
 10356dc:	000033d7 	.word	0x000033d7
 10356e0:	00003173 	.word	0x00003173
 10356e4:	0000315d 	.word	0x0000315d
 10356e8:	00000000 	.word	0x00000000
 10356ec:	201014d8 	.word	0x201014d8
 10356f0:	000033ff 	.word	0x000033ff
 10356f4:	000033c5 	.word	0x000033c5
 10356f8:	000033c7 	.word	0x000033c7
 10356fc:	000033c9 	.word	0x000033c9
 1035700:	000033cb 	.word	0x000033cb
 1035704:	000033cd 	.word	0x000033cd
	...
 1035718:	000033cf 	.word	0x000033cf
 103571c:	000033d1 	.word	0x000033d1
 1035720:	00000000 	.word	0x00000000
 1035724:	000033d3 	.word	0x000033d3
 1035728:	000033d5 	.word	0x000033d5
 103572c:	4a040941 	.word	0x4a040941
 1035730:	f0002301 	.word	0xf0002301
 1035734:	fa03001f 	.word	0xfa03001f
 1035738:	f842f000 	.word	0xf842f000
 103573c:	47700021 	.word	0x47700021
 1035740:	e000e100 	.word	0xe000e100
 1035744:	4ff0e92d 	.word	0x4ff0e92d
 1035748:	09c4f8df 	.word	0x09c4f8df
 103574c:	49c4f8df 	.word	0x49c4f8df
 1035750:	59c4f8df 	.word	0x59c4f8df
 1035754:	69c4f8df 	.word	0x69c4f8df
 1035758:	b08f2100 	.word	0xb08f2100
 103575c:	60256041 	.word	0x60256041
 1035760:	20016066 	.word	0x20016066
 1035764:	fcb4f001 	.word	0xfcb4f001
 1035768:	60666025 	.word	0x60666025
 103576c:	f8df2101 	.word	0xf8df2101
 1035770:	f8df09a0 	.word	0xf8df09a0
 1035774:	604189ac 	.word	0x604189ac
 1035778:	f8c820b8 	.word	0xf8c820b8
 103577c:	f8df0880 	.word	0xf8df0880
 1035780:	f8df19a4 	.word	0xf8df19a4
 1035784:	6001098c 	.word	0x6001098c
 1035788:	1180f44f 	.word	0x1180f44f
 103578c:	fc5df001 	.word	0xfc5df001
 1035790:	0994f8df 	.word	0x0994f8df
 1035794:	28006800 	.word	0x28006800
 1035798:	f8dfd0fa 	.word	0xf8dfd0fa
 103579c:	1d00098c 	.word	0x1d00098c
 10357a0:	f44f9002 	.word	0xf44f9002
 10357a4:	99022020 	.word	0x99022020
 10357a8:	f5b16a09 	.word	0xf5b16a09
 10357ac:	bf3c2f20 	.word	0xbf3c2f20
 10357b0:	62089902 	.word	0x62089902
 10357b4:	6a499902 	.word	0x6a499902
 10357b8:	2f20f5b1 	.word	0x2f20f5b1
 10357bc:	9902bf3c 	.word	0x9902bf3c
 10357c0:	99026248 	.word	0x99026248
 10357c4:	f5b16a89 	.word	0xf5b16a89
 10357c8:	bf3c2f20 	.word	0xbf3c2f20
 10357cc:	62889902 	.word	0x62889902
 10357d0:	0954f8df 	.word	0x0954f8df
 10357d4:	f06f30b4 	.word	0xf06f30b4
 10357d8:	68815200 	.word	0x68815200
 10357dc:	f8df1851 	.word	0xf8df1851
 10357e0:	4291294c 	.word	0x4291294c
 10357e4:	6880bf3c 	.word	0x6880bf3c
 10357e8:	0878f8c8 	.word	0x0878f8c8
 10357ec:	fc82f001 	.word	0xfc82f001
 10357f0:	093cf8df 	.word	0x093cf8df
 10357f4:	f4416801 	.word	0xf4416801
 10357f8:	60017100 	.word	0x60017100
 10357fc:	f8df210f 	.word	0xf8df210f
 1035800:	60810934 	.word	0x60810934
 1035804:	60012100 	.word	0x60012100
 1035808:	f8df2000 	.word	0xf8df2000
 103580c:	eb01191c 	.word	0xeb01191c
 1035810:	69890180 	.word	0x69890180
 1035814:	d40801c9 	.word	0xd40801c9
 1035818:	bf082802 	.word	0xbf082802
 103581c:	01412003 	.word	0x01412003
 1035820:	2914f8df 	.word	0x2914f8df
 1035824:	6307f240 	.word	0x6307f240
 1035828:	2802e007 	.word	0x2802e007
 103582c:	2003bf08 	.word	0x2003bf08
 1035830:	f8df0141 	.word	0xf8df0141
 1035834:	f2402904 	.word	0xf2402904
 1035838:	508b4307 	.word	0x508b4307
 103583c:	28031c40 	.word	0x28031c40
 1035840:	f8dfdbe3 	.word	0xf8dfdbe3
 1035844:	69c008f0 	.word	0x69c008f0
 1035848:	08e8f8df 	.word	0x08e8f8df
 103584c:	6101210b 	.word	0x6101210b
 1035850:	7000f44f 	.word	0x7000f44f
 1035854:	18e4f8df 	.word	0x18e4f8df
 1035858:	f8df6008 	.word	0xf8df6008
 103585c:	600818e4 	.word	0x600818e4
 1035860:	f8df2100 	.word	0xf8df2100
 1035864:	700108e0 	.word	0x700108e0
 1035868:	f7ff2029 	.word	0xf7ff2029
 103586c:	f8dfff5f 	.word	0xf8dfff5f
 1035870:	f8df68d8 	.word	0xf8df68d8
 1035874:	f8df08d8 	.word	0xf8df08d8
 1035878:	f8df58d8 	.word	0xf8df58d8
 103587c:	603048d8 	.word	0x603048d8
 1035880:	f8df2700 	.word	0xf8df2700
 1035884:	607008d4 	.word	0x607008d4
 1035888:	08d0f8df 	.word	0x08d0f8df
 103588c:	f8df60b0 	.word	0xf8df60b0
 1035890:	60f008d0 	.word	0x60f008d0
 1035894:	0890f8df 	.word	0x0890f8df
 1035898:	0087eb00 	.word	0x0087eb00
 103589c:	01c06980 	.word	0x01c06980
 10358a0:	2f02d40c 	.word	0x2f02d40c
 10358a4:	2703bf08 	.word	0x2703bf08
 10358a8:	9027f854 	.word	0x9027f854
 10358ac:	f001235b 	.word	0xf001235b
 10358b0:	f856fbb4 	.word	0xf856fbb4
 10358b4:	90000027 	.word	0x90000027
 10358b8:	e00b2350 	.word	0xe00b2350
 10358bc:	bf082f02 	.word	0xbf082f02
 10358c0:	f8542703 	.word	0xf8542703
 10358c4:	237b9027 	.word	0x237b9027
 10358c8:	fba7f001 	.word	0xfba7f001
 10358cc:	0027f856 	.word	0x0027f856
 10358d0:	23709000 	.word	0x23709000
 10358d4:	2125464a 	.word	0x2125464a
 10358d8:	f0014628 	.word	0xf0014628
 10358dc:	f854fc6a 	.word	0xf854fc6a
 10358e0:	46281027 	.word	0x46281027
 10358e4:	fd3df001 	.word	0xfd3df001
 10358e8:	2f031c7f 	.word	0x2f031c7f
 10358ec:	2000dbd2 	.word	0x2000dbd2
 10358f0:	07acf8c8 	.word	0x07acf8c8
 10358f4:	eb082200 	.word	0xeb082200
 10358f8:	21000082 	.word	0x21000082
 10358fc:	17b0f8c0 	.word	0x17b0f8c0
 1035900:	fb0020b8 	.word	0xfb0020b8
 1035904:	eb06f602 	.word	0xeb06f602
 1035908:	f5030308 	.word	0xf5030308
 103590c:	20006793 	.word	0x20006793
 1035910:	0100e9c7 	.word	0x0100e9c7
 1035914:	67a8f503 	.word	0x67a8f503
 1035918:	0100e9c7 	.word	0x0100e9c7
 103591c:	eb064607 	.word	0xeb064607
 1035920:	eb010108 	.word	0xeb010108
 1035924:	1c400180 	.word	0x1c400180
 1035928:	74acf8c1 	.word	0x74acf8c1
 103592c:	dbf62821 	.word	0xdbf62821
 1035930:	07f4f8df 	.word	0x07f4f8df
 1035934:	17f0f8df 	.word	0x17f0f8df
 1035938:	0082eb00 	.word	0x0082eb00
 103593c:	63a9f503 	.word	0x63a9f503
 1035940:	f3c06980 	.word	0xf3c06980
 1035944:	eb014041 	.word	0xeb014041
 1035948:	1c520080 	.word	0x1c520080
 103594c:	0e816a40 	.word	0x0e816a40
 1035950:	e9c30180 	.word	0xe9c30180
 1035954:	2a030100 	.word	0x2a030100
 1035958:	f8dfdbcd 	.word	0xf8dfdbcd
 103595c:	90000808 	.word	0x90000808
 1035960:	f44f2350 	.word	0xf44f2350
 1035964:	21257280 	.word	0x21257280
 1035968:	f0014628 	.word	0xf0014628
 103596c:	f44ffc22 	.word	0xf44ffc22
 1035970:	46287180 	.word	0x46287180
 1035974:	fcf5f001 	.word	0xfcf5f001
 1035978:	f7ff2025 	.word	0xf7ff2025
 103597c:	f8dffed7 	.word	0xf8dffed7
 1035980:	21020790 	.word	0x21020790
 1035984:	20006041 	.word	0x20006041
 1035988:	46034602 	.word	0x46034602
 103598c:	01c0eb08 	.word	0x01c0eb08
 1035990:	61def501 	.word	0x61def501
 1035994:	e9c11c40 	.word	0xe9c11c40
 1035998:	28052300 	.word	0x28052300
 103599c:	f888d3f6 	.word	0xf888d3f6
 10359a0:	f44f26c0 	.word	0xf44f26c0
 10359a4:	46407138 	.word	0x46407138
 10359a8:	fceaf001 	.word	0xfceaf001
 10359ac:	0760f8df 	.word	0x0760f8df
 10359b0:	60412104 	.word	0x60412104
 10359b4:	fd64f001 	.word	0xfd64f001
 10359b8:	fdf4f001 	.word	0xfdf4f001
 10359bc:	f8882001 	.word	0xf8882001
 10359c0:	210606ec 	.word	0x210606ec
 10359c4:	0748f8df 	.word	0x0748f8df
 10359c8:	f0016041 	.word	0xf0016041
 10359cc:	f888ff21 	.word	0xf888ff21
 10359d0:	f8df06e8 	.word	0xf8df06e8
 10359d4:	68000754 	.word	0x68000754
 10359d8:	d3fa2802 	.word	0xd3fa2802
 10359dc:	f8df2107 	.word	0xf8df2107
 10359e0:	60410730 	.word	0x60410730
 10359e4:	7038f508 	.word	0x7038f508
 10359e8:	e0dc9003 	.word	0xe0dc9003
 10359ec:	1720f8df 	.word	0x1720f8df
 10359f0:	25006088 	.word	0x25006088
 10359f4:	0c016908 	.word	0x0c016908
 10359f8:	b2891c49 	.word	0xb2891c49
 10359fc:	4001eac0 	.word	0x4001eac0
 1035a00:	170cf8df 	.word	0x170cf8df
 1035a04:	eb086108 	.word	0xeb086108
 1035a08:	f50606c5 	.word	0xf50606c5
 1035a0c:	f00162de 	.word	0xf00162de
 1035a10:	f002fafe 	.word	0xf002fafe
 1035a14:	4682f8ef 	.word	0x4682f8ef
 1035a18:	60def506 	.word	0x60def506
 1035a1c:	e9c02200 	.word	0xe9c02200
 1035a20:	98032200 	.word	0x98032200
 1035a24:	02c5eb00 	.word	0x02c5eb00
 1035a28:	73eaea4f 	.word	0x73eaea4f
 1035a2c:	0100e9d2 	.word	0x0100e9d2
 1035a30:	670afbaa 	.word	0x670afbaa
 1035a34:	7703fb0a 	.word	0x7703fb0a
 1035a38:	770afb03 	.word	0x770afb03
 1035a3c:	f8d80db6 	.word	0xf8d80db6
 1035a40:	ea4627a8 	.word	0xea4627a8
 1035a44:	0dbf2687 	.word	0x0dbf2687
 1035a48:	4906fba2 	.word	0x4906fba2
 1035a4c:	fb0217d3 	.word	0xfb0217d3
 1035a50:	9a039907 	.word	0x9a039907
 1035a54:	9906fb03 	.word	0x9906fb03
 1035a58:	eb021b00 	.word	0xeb021b00
 1035a5c:	eb6102c5 	.word	0xeb6102c5
 1035a60:	e9c20109 	.word	0xe9c20109
 1035a64:	2d030100 	.word	0x2d030100
 1035a68:	eb08d209 	.word	0xeb08d209
 1035a6c:	6e8100c5 	.word	0x6e8100c5
 1035a70:	010aeba1 	.word	0x010aeba1
 1035a74:	6f016681 	.word	0x6f016681
 1035a78:	010aeba1 	.word	0x010aeba1
 1035a7c:	1c6d6701 	.word	0x1c6d6701
 1035a80:	d3c02d05 	.word	0xd3c02d05
 1035a84:	f8882001 	.word	0xf8882001
 1035a88:	f8d806eb 	.word	0xf8d806eb
 1035a8c:	f8df17a8 	.word	0xf8df17a8
 1035a90:	61410680 	.word	0x61410680
 1035a94:	68409802 	.word	0x68409802
 1035a98:	d5350400 	.word	0xd5350400
 1035a9c:	60e7f508 	.word	0x60e7f508
 1035aa0:	e9c02200 	.word	0xe9c02200
 1035aa4:	20002200 	.word	0x20002200
 1035aa8:	267cf8df 	.word	0x267cf8df
 1035aac:	0280eb02 	.word	0x0280eb02
 1035ab0:	0180eb08 	.word	0x0180eb08
 1035ab4:	f8d16e13 	.word	0xf8d16e13
 1035ab8:	029b5850 	.word	0x029b5850
 1035abc:	f313fb55 	.word	0xf313fb55
 1035ac0:	56a4f8df 	.word	0x56a4f8df
 1035ac4:	3020f845 	.word	0x3020f845
 1035ac8:	0350f601 	.word	0x0350f601
 1035acc:	689d6e12 	.word	0x689d6e12
 1035ad0:	fb550292 	.word	0xfb550292
 1035ad4:	f8dff212 	.word	0xf8dff212
 1035ad8:	eb055690 	.word	0xeb055690
 1035adc:	1c400580 	.word	0x1c400580
 1035ae0:	220061aa 	.word	0x220061aa
 1035ae4:	2850f8c1 	.word	0x2850f8c1
 1035ae8:	2802609a 	.word	0x2802609a
 1035aec:	f8dfd3dc 	.word	0xf8dfd3dc
 1035af0:	99020620 	.word	0x99020620
 1035af4:	68496880 	.word	0x68496880
 1035af8:	407ff420 	.word	0x407ff420
 1035afc:	517cf401 	.word	0x517cf401
 1035b00:	f8df4308 	.word	0xf8df4308
 1035b04:	6088160c 	.word	0x6088160c
 1035b08:	7538f508 	.word	0x7538f508
 1035b0c:	f8df4628 	.word	0xf8df4628
 1035b10:	2232165c 	.word	0x2232165c
 1035b14:	6702e8f0 	.word	0x6702e8f0
 1035b18:	6702e8e1 	.word	0x6702e8e1
 1035b1c:	d1f91e52 	.word	0xd1f91e52
 1035b20:	f0012101 	.word	0xf0012101
 1035b24:	2032fa92 	.word	0x2032fa92
 1035b28:	e8e52200 	.word	0xe8e52200
 1035b2c:	1e402202 	.word	0x1e402202
 1035b30:	f8d8d1fb 	.word	0xf8d8d1fb
 1035b34:	f8d806c8 	.word	0xf8d806c8
 1035b38:	eba017a8 	.word	0xeba017a8
 1035b3c:	f8c83001 	.word	0xf8c83001
 1035b40:	f50006cc 	.word	0xf50006cc
 1035b44:	f5b05080 	.word	0xf5b05080
 1035b48:	bf885f80 	.word	0xbf885f80
 1035b4c:	26ccf8c8 	.word	0x26ccf8c8
 1035b50:	60dcf508 	.word	0x60dcf508
 1035b54:	15b8f8df 	.word	0x15b8f8df
 1035b58:	26d0f8c8 	.word	0x26d0f8c8
 1035b5c:	2200e9c0 	.word	0x2200e9c0
 1035b60:	f8882001 	.word	0xf8882001
 1035b64:	f8c806c0 	.word	0xf8c806c0
 1035b68:	f8c826c4 	.word	0xf8c826c4
 1035b6c:	f8df26d4 	.word	0xf8df26d4
 1035b70:	690005a0 	.word	0x690005a0
 1035b74:	04000c00 	.word	0x04000c00
 1035b78:	20006108 	.word	0x20006108
 1035b7c:	07a8f8c8 	.word	0x07a8f8c8
 1035b80:	07acf8c8 	.word	0x07acf8c8
 1035b84:	fb0121b8 	.word	0xfb0121b8
 1035b88:	f5018100 	.word	0xf5018100
 1035b8c:	1c406193 	.word	0x1c406193
 1035b90:	2200e9c1 	.word	0x2200e9c1
 1035b94:	d3f52803 	.word	0xd3f52803
 1035b98:	60e6f508 	.word	0x60e6f508
 1035b9c:	2200e9c0 	.word	0x2200e9c0
 1035ba0:	f8c82001 	.word	0xf8c82001
 1035ba4:	f8df0860 	.word	0xf8df0860
 1035ba8:	68000580 	.word	0x68000580
 1035bac:	f0012800 	.word	0xf0012800
 1035bb0:	f8df8227 	.word	0xf8df8227
 1035bb4:	f8d00574 	.word	0xf8d00574
 1035bb8:	280000b4 	.word	0x280000b4
 1035bbc:	2000d404 	.word	0x2000d404
 1035bc0:	0874f8c8 	.word	0x0874f8c8
 1035bc4:	087cf8c8 	.word	0x087cf8c8
 1035bc8:	06e9f898 	.word	0x06e9f898
 1035bcc:	d0f02800 	.word	0xd0f02800
 1035bd0:	f8882000 	.word	0xf8882000
 1035bd4:	f8d806e9 	.word	0xf8d806e9
 1035bd8:	b1300718 	.word	0xb1300718
 1035bdc:	0554f8df 	.word	0x0554f8df
 1035be0:	60412101 	.word	0x60412101
 1035be4:	f8c82000 	.word	0xf8c82000
 1035be8:	f8d80718 	.word	0xf8d80718
 1035bec:	b130071c 	.word	0xb130071c
 1035bf0:	f8df2102 	.word	0xf8df2102
 1035bf4:	60410540 	.word	0x60410540
 1035bf8:	f8c82000 	.word	0xf8c82000
 1035bfc:	f8d8071c 	.word	0xf8d8071c
 1035c00:	b1300724 	.word	0xb1300724
 1035c04:	f8df2108 	.word	0xf8df2108
 1035c08:	6041052c 	.word	0x6041052c
 1035c0c:	f8c82000 	.word	0xf8c82000
 1035c10:	f8d80724 	.word	0xf8d80724
 1035c14:	f0000788 	.word	0xf0000788
 1035c18:	90040004 	.word	0x90040004
 1035c1c:	68409802 	.word	0x68409802
 1035c20:	d5220400 	.word	0xd5220400
 1035c24:	62e7f508 	.word	0x62e7f508
 1035c28:	0100e9d2 	.word	0x0100e9d2
 1035c2c:	08400040 	.word	0x08400040
 1035c30:	f87af002 	.word	0xf87af002
 1035c34:	084cf8c8 	.word	0x084cf8c8
 1035c38:	62e7f508 	.word	0x62e7f508
 1035c3c:	0100e9d2 	.word	0x0100e9d2
 1035c40:	5000f1a0 	.word	0x5000f1a0
 1035c44:	08400040 	.word	0x08400040
 1035c48:	f86ef002 	.word	0xf86ef002
 1035c4c:	0848f8c8 	.word	0x0848f8c8
 1035c50:	60e7f508 	.word	0x60e7f508
 1035c54:	2300e9d0 	.word	0x2300e9d0
 1035c58:	0844f8d8 	.word	0x0844f8d8
 1035c5c:	181017c1 	.word	0x181017c1
 1035c60:	62e7f508 	.word	0x62e7f508
 1035c64:	e9c24159 	.word	0xe9c24159
 1035c68:	20000100 	.word	0x20000100
 1035c6c:	0794f8c8 	.word	0x0794f8c8
 1035c70:	f8c82000 	.word	0xf8c82000
 1035c74:	f8d80798 	.word	0xf8d80798
 1035c78:	9a040794 	.word	0x9a040794
 1035c7c:	1798f8d8 	.word	0x1798f8d8
 1035c80:	1a801d00 	.word	0x1a801d00
 1035c84:	0040eb01 	.word	0x0040eb01
 1035c88:	0080eb08 	.word	0x0080eb08
 1035c8c:	0581eb08 	.word	0x0581eb08
 1035c90:	2494f8df 	.word	0x2494f8df
 1035c94:	0748f8d0 	.word	0x0748f8d0
 1035c98:	0181eb02 	.word	0x0181eb02
 1035c9c:	fb506fc9 	.word	0xfb506fc9
 1035ca0:	008ef111 	.word	0x008ef111
 1035ca4:	10b4f8d2 	.word	0x10b4f8d2
 1035ca8:	2dd4f8df 	.word	0x2dd4f8df
 1035cac:	f1114011 	.word	0xf1114011
 1035cb0:	d10c4f00 	.word	0xd10c4f00
 1035cb4:	1470f8df 	.word	0x1470f8df
 1035cb8:	10b4f8d1 	.word	0x10b4f8d1
 1035cbc:	3798f8d8 	.word	0x3798f8d8
 1035cc0:	7280f44f 	.word	0x7280f44f
 1035cc4:	4211409a 	.word	0x4211409a
 1035cc8:	f001bf18 	.word	0xf001bf18
 1035ccc:	f8dfff2e 	.word	0xf8dfff2e
 1035cd0:	f8df04a0 	.word	0xf8df04a0
 1035cd4:	6800149c 	.word	0x6800149c
 1035cd8:	682a6849 	.word	0x682a6849
 1035cdc:	f010fb56 	.word	0xf010fb56
 1035ce0:	0011fb52 	.word	0x0011fb52
 1035ce4:	1488f8df 	.word	0x1488f8df
 1035ce8:	688968aa 	.word	0x688968aa
 1035cec:	fb62602e 	.word	0xfb62602e
 1035cf0:	f8df0011 	.word	0xf8df0011
 1035cf4:	f8df1480 	.word	0xf8df1480
 1035cf8:	6809247c 	.word	0x6809247c
 1035cfc:	68ab6852 	.word	0x68ab6852
 1035d00:	fb500080 	.word	0xfb500080
 1035d04:	fb53f111 	.word	0xfb53f111
 1035d08:	f8df1112 	.word	0xf8df1112
 1035d0c:	692b2468 	.word	0x692b2468
 1035d10:	fb536892 	.word	0xfb536892
 1035d14:	f8df1112 	.word	0xf8df1112
 1035d18:	6a2b245c 	.word	0x6a2b245c
 1035d1c:	fb6368d2 	.word	0xfb6368d2
 1035d20:	f8df1112 	.word	0xf8df1112
 1035d24:	6aab2450 	.word	0x6aab2450
 1035d28:	fb636912 	.word	0xfb636912
 1035d2c:	00891112 	.word	0x00891112
 1035d30:	68a961a9 	.word	0x68a961a9
 1035d34:	60a86129 	.word	0x60a86129
 1035d38:	0798f8d8 	.word	0x0798f8d8
 1035d3c:	f8904440 	.word	0xf8904440
 1035d40:	f00006ee 	.word	0xf00006ee
 1035d44:	eb050003 	.word	0xeb050003
 1035d48:	f8d000c0 	.word	0xf8d000c0
 1035d4c:	6a28c018 	.word	0x6a28c018
 1035d50:	69a862a8 	.word	0x69a862a8
 1035d54:	f8d86228 	.word	0xf8d86228
 1035d58:	f8d82798 	.word	0xf8d82798
 1035d5c:	40d3378c 	.word	0x40d3378c
 1035d60:	d51f07db 	.word	0xd51f07db
 1035d64:	0042eb08 	.word	0x0042eb08
 1035d68:	0728f9b0 	.word	0x0728f9b0
 1035d6c:	04016c2a 	.word	0x04016c2a
 1035d70:	006cea4f 	.word	0x006cea4f
 1035d74:	0011fb62 	.word	0x0011fb62
 1035d78:	10520040 	.word	0x10520040
 1035d7c:	2111fb50 	.word	0x2111fb50
 1035d80:	2798f8d8 	.word	0x2798f8d8
 1035d84:	0242eb08 	.word	0x0242eb08
 1035d88:	f9b20049 	.word	0xf9b20049
 1035d8c:	6cab272c 	.word	0x6cab272c
 1035d90:	10490412 	.word	0x10490412
 1035d94:	1112fb63 	.word	0x1112fb63
 1035d98:	105b0049 	.word	0x105b0049
 1035d9c:	3212fb51 	.word	0x3212fb51
 1035da0:	0c42ea4f 	.word	0x0c42ea4f
 1035da4:	64a96428 	.word	0x64a96428
 1035da8:	17c16da8 	.word	0x17c16da8
 1035dac:	010ce9cd 	.word	0x010ce9cd
 1035db0:	0ed4f8df 	.word	0x0ed4f8df
 1035db4:	17c16840 	.word	0x17c16840
 1035db8:	010ae9cd 	.word	0x010ae9cd
 1035dbc:	230ae9dd 	.word	0x230ae9dd
 1035dc0:	71ecea4f 	.word	0x71ecea4f
 1035dc4:	490cfba2 	.word	0x490cfba2
 1035dc8:	9901fb02 	.word	0x9901fb02
 1035dcc:	990cfb03 	.word	0x990cfb03
 1035dd0:	ea400960 	.word	0xea400960
 1035dd4:	f8df64c9 	.word	0xf8df64c9
 1035dd8:	68000eb0 	.word	0x68000eb0
 1035ddc:	230ce9dd 	.word	0x230ce9dd
 1035de0:	6702fba0 	.word	0x6702fba0
 1035de4:	fb0017c1 	.word	0xfb0017c1
 1035de8:	ea4f7703 	.word	0xea4f7703
 1035dec:	fb011969 	.word	0xfb011969
 1035df0:	1ba07702 	.word	0x1ba07702
 1035df4:	0b07eb69 	.word	0x0b07eb69
 1035df8:	ea400fc0 	.word	0xea400fc0
 1035dfc:	6d280a4b 	.word	0x6d280a4b
 1035e00:	e9cd17c1 	.word	0xe9cd17c1
 1035e04:	ea4f0108 	.word	0xea4f0108
 1035e08:	f8df7bea 	.word	0xf8df7bea
 1035e0c:	68400e80 	.word	0x68400e80
 1035e10:	e9cd17c1 	.word	0xe9cd17c1
 1035e14:	f8df0106 	.word	0xf8df0106
 1035e18:	68000e74 	.word	0x68000e74
 1035e1c:	490afba0 	.word	0x490afba0
 1035e20:	fb0017c1 	.word	0xfb0017c1
 1035e24:	fb01990b 	.word	0xfb01990b
 1035e28:	e9dd990a 	.word	0xe9dd990a
 1035e2c:	e9dd2308 	.word	0xe9dd2308
 1035e30:	fba00106 	.word	0xfba00106
 1035e34:	fb006702 	.word	0xfb006702
 1035e38:	fb017703 	.word	0xfb017703
 1035e3c:	f8df7702 	.word	0xf8df7702
 1035e40:	68122e48 	.word	0x68122e48
 1035e44:	eb4919a0 	.word	0xeb4919a0
 1035e48:	fb820107 	.word	0xfb820107
 1035e4c:	0952230c 	.word	0x0952230c
 1035e50:	62c3ea42 	.word	0x62c3ea42
 1035e54:	e9cd115b 	.word	0xe9cd115b
 1035e58:	e9dd2300 	.word	0xe9dd2300
 1035e5c:	e9dd670c 	.word	0xe9dd670c
 1035e60:	fba2230a 	.word	0xfba2230a
 1035e64:	fb024906 	.word	0xfb024906
 1035e68:	fb039907 	.word	0xfb039907
 1035e6c:	e9dd9906 	.word	0xe9dd9906
 1035e70:	19122300 	.word	0x19122300
 1035e74:	0309eb43 	.word	0x0309eb43
 1035e78:	2300e9cd 	.word	0x2300e9cd
 1035e7c:	2306e9dd 	.word	0x2306e9dd
 1035e80:	670afba2 	.word	0x670afba2
 1035e84:	770bfb02 	.word	0x770bfb02
 1035e88:	770afb03 	.word	0x770afb03
 1035e8c:	46bb46b2 	.word	0x46bb46b2
 1035e90:	2df8f8df 	.word	0x2df8f8df
 1035e94:	e9dd6812 	.word	0xe9dd6812
 1035e98:	fba26708 	.word	0xfba26708
 1035e9c:	17d34906 	.word	0x17d34906
 1035ea0:	9907fb02 	.word	0x9907fb02
 1035ea4:	9906fb03 	.word	0x9906fb03
 1035ea8:	0204ebba 	.word	0x0204ebba
 1035eac:	0309eb6b 	.word	0x0309eb6b
 1035eb0:	ea420fd2 	.word	0xea420fd2
 1035eb4:	0fc00243 	.word	0x0fc00243
 1035eb8:	ea40652a 	.word	0xea40652a
 1035ebc:	65a80041 	.word	0x65a80041
 1035ec0:	77ecea4f 	.word	0x77ecea4f
 1035ec4:	0dc8f8df 	.word	0x0dc8f8df
 1035ec8:	a060f8d5 	.word	0xa060f8d5
 1035ecc:	68006844 	.word	0x68006844
 1035ed0:	230cfb80 	.word	0x230cfb80
 1035ed4:	7beaea4f 	.word	0x7beaea4f
 1035ed8:	fba40952 	.word	0xfba40952
 1035edc:	ea4f010a 	.word	0xea4f010a
 1035ee0:	ea4279e4 	.word	0xea4279e4
 1035ee4:	fb0462c3 	.word	0xfb0462c3
 1035ee8:	fb09110b 	.word	0xfb09110b
 1035eec:	1810110a 	.word	0x1810110a
 1035ef0:	1163eb41 	.word	0x1163eb41
 1035ef4:	464b4622 	.word	0x464b4622
 1035ef8:	490cfba2 	.word	0x490cfba2
 1035efc:	9907fb02 	.word	0x9907fb02
 1035f00:	990cfb03 	.word	0x990cfb03
 1035f04:	ea420962 	.word	0xea420962
 1035f08:	f8df64c9 	.word	0xf8df64c9
 1035f0c:	68122d84 	.word	0x68122d84
 1035f10:	670afba2 	.word	0x670afba2
 1035f14:	fb0217d3 	.word	0xfb0217d3
 1035f18:	ea4f770b 	.word	0xea4f770b
 1035f1c:	fb031969 	.word	0xfb031969
 1035f20:	1ba2770a 	.word	0x1ba2770a
 1035f24:	0307eb69 	.word	0x0307eb69
 1035f28:	ea420fd2 	.word	0xea420fd2
 1035f2c:	662a0243 	.word	0x662a0243
 1035f30:	2300e9dd 	.word	0x2300e9dd
 1035f34:	eb631a10 	.word	0xeb631a10
 1035f38:	0ec00101 	.word	0x0ec00101
 1035f3c:	1641ea40 	.word	0x1641ea40
 1035f40:	f8df4879 	.word	0xf8df4879
 1035f44:	f8d01b3c 	.word	0xf8d01b3c
 1035f48:	400800b4 	.word	0x400800b4
 1035f4c:	1d44f8df 	.word	0x1d44f8df
 1035f50:	d10c4288 	.word	0xd10c4288
 1035f54:	f8d04874 	.word	0xf8d04874
 1035f58:	f8d800b4 	.word	0xf8d800b4
 1035f5c:	f44f2798 	.word	0xf44f2798
 1035f60:	40917180 	.word	0x40917180
 1035f64:	bf1c4208 	.word	0xbf1c4208
 1035f68:	f0014630 	.word	0xf0014630
 1035f6c:	f898fdde 	.word	0xf898fdde
 1035f70:	280106ea 	.word	0x280106ea
 1035f74:	2000bf04 	.word	0x2000bf04
 1035f78:	06ebf888 	.word	0x06ebf888
 1035f7c:	0790f8d8 	.word	0x0790f8d8
 1035f80:	1798f8d8 	.word	0x1798f8d8
 1035f84:	07c040c8 	.word	0x07c040c8
 1035f88:	f8dfd535 	.word	0xf8dfd535
 1035f8c:	f8df3d0c 	.word	0xf8df3d0c
 1035f90:	6eaa0d08 	.word	0x6eaa0d08
 1035f94:	6800685b 	.word	0x6800685b
 1035f98:	2302fb83 	.word	0x2302fb83
 1035f9c:	0106fb80 	.word	0x0106fb80
 1035fa0:	09800992 	.word	0x09800992
 1035fa4:	6283ea42 	.word	0x6283ea42
 1035fa8:	6081ea40 	.word	0x6081ea40
 1035fac:	1880119b 	.word	0x1880119b
 1035fb0:	11a1eb43 	.word	0x11a1eb43
 1035fb4:	3ce0f8df 	.word	0x3ce0f8df
 1035fb8:	689b6f2a 	.word	0x689b6f2a
 1035fbc:	2302fb83 	.word	0x2302fb83
 1035fc0:	ea420992 	.word	0xea420992
 1035fc4:	18806283 	.word	0x18806283
 1035fc8:	11a3eb41 	.word	0x11a3eb41
 1035fcc:	3cc8f8df 	.word	0x3cc8f8df
 1035fd0:	68db6faa 	.word	0x68db6faa
 1035fd4:	2302fb83 	.word	0x2302fb83
 1035fd8:	41991a80 	.word	0x41991a80
 1035fdc:	3cb8f8df 	.word	0x3cb8f8df
 1035fe0:	2080f8d5 	.word	0x2080f8d5
 1035fe4:	fb83691b 	.word	0xfb83691b
 1035fe8:	1a802302 	.word	0x1a802302
 1035fec:	0f804199 	.word	0x0f804199
 1035ff0:	0081ea40 	.word	0x0081ea40
 1035ff4:	4630e000 	.word	0x4630e000
 1035ff8:	67296ea9 	.word	0x67296ea9
 1035ffc:	6fa966ae 	.word	0x6fa966ae
 1036000:	1080f8c5 	.word	0x1080f8c5
 1036004:	104067a8 	.word	0x104067a8
 1036008:	2794f8d8 	.word	0x2794f8d8
 103600c:	bf182a00 	.word	0xbf182a00
 1036010:	d0032a02 	.word	0xd0032a02
 1036014:	2a03d322 	.word	0x2a03d322
 1036018:	e050d020 	.word	0xe050d020
 103601c:	3e60f8df 	.word	0x3e60f8df
 1036020:	2088f8d5 	.word	0x2088f8d5
 1036024:	fb62681b 	.word	0xfb62681b
 1036028:	00400013 	.word	0x00400013
 103602c:	f8c51052 	.word	0xf8c51052
 1036030:	fb500088 	.word	0xfb500088
 1036034:	f8df2213 	.word	0xf8df2213
 1036038:	f8d50e4c 	.word	0xf8d50e4c
 103603c:	68003090 	.word	0x68003090
 1036040:	10520052 	.word	0x10520052
 1036044:	2210fb63 	.word	0x2210fb63
 1036048:	105b0052 	.word	0x105b0052
 103604c:	3010fb52 	.word	0x3010fb52
 1036050:	f8c50040 	.word	0xf8c50040
 1036054:	f8c50098 	.word	0xf8c50098
 1036058:	e0302090 	.word	0xe0302090
 103605c:	2e28f8df 	.word	0x2e28f8df
 1036060:	10a0f8d5 	.word	0x10a0f8d5
 1036064:	fb616812 	.word	0xfb616812
 1036068:	00400012 	.word	0x00400012
 103606c:	f8c51049 	.word	0xf8c51049
 1036070:	fb5000a0 	.word	0xfb5000a0
 1036074:	f8df1112 	.word	0xf8df1112
 1036078:	f8d50e14 	.word	0xf8d50e14
 103607c:	680020a8 	.word	0x680020a8
 1036080:	10490049 	.word	0x10490049
 1036084:	1110fb62 	.word	0x1110fb62
 1036088:	10520049 	.word	0x10520049
 103608c:	10a8f8c5 	.word	0x10a8f8c5
 1036090:	2010fb51 	.word	0x2010fb51
 1036094:	1098f8d5 	.word	0x1098f8d5
 1036098:	10400040 	.word	0x10400040
 103609c:	0061eb00 	.word	0x0061eb00
 10360a0:	00b0f8c5 	.word	0x00b0f8c5
 10360a4:	1798f8d8 	.word	0x1798f8d8
 10360a8:	f8914441 	.word	0xf8914441
 10360ac:	f3c116ee 	.word	0xf3c116ee
 10360b0:	eb050180 	.word	0xeb050180
 10360b4:	f8d101c1 	.word	0xf8d101c1
 10360b8:	f8c510b0 	.word	0xf8c510b0
 10360bc:	104800b8 	.word	0x104800b8
 10360c0:	1794f8d8 	.word	0x1794f8d8
 10360c4:	d0022901 	.word	0xd0022901
 10360c8:	d0552903 	.word	0xd0552903
 10360cc:	f8dfe0d6 	.word	0xf8dfe0d6
 10360d0:	f8d52db0 	.word	0xf8d52db0
 10360d4:	681310c0 	.word	0x681310c0
 10360d8:	0013fb61 	.word	0x0013fb61
 10360dc:	10490040 	.word	0x10490040
 10360e0:	00c0f8c5 	.word	0x00c0f8c5
 10360e4:	1113fb50 	.word	0x1113fb50
 10360e8:	0d98f8df 	.word	0x0d98f8df
 10360ec:	20c8f8d5 	.word	0x20c8f8d5
 10360f0:	00496800 	.word	0x00496800
 10360f4:	fb621049 	.word	0xfb621049
 10360f8:	00491110 	.word	0x00491110
 10360fc:	fb511052 	.word	0xfb511052
 1036100:	00402010 	.word	0x00402010
 1036104:	00d0f8c5 	.word	0x00d0f8c5
 1036108:	10c8f8c5 	.word	0x10c8f8c5
 103610c:	bf00e0b6 	.word	0xbf00e0b6
 1036110:	201000dc 	.word	0x201000dc
 1036114:	48010040 	.word	0x48010040
 1036118:	000201ff 	.word	0x000201ff
 103611c:	000601ff 	.word	0x000601ff
 1036120:	20100378 	.word	0x20100378
 1036124:	00010206 	.word	0x00010206
 1036128:	20100000 	.word	0x20100000
 103612c:	0007ffff 	.word	0x0007ffff
 1036130:	400e0314 	.word	0x400e0314
 1036134:	48008000 	.word	0x48008000
 1036138:	48008200 	.word	0x48008200
 103613c:	e000e184 	.word	0xe000e184
 1036140:	e000e284 	.word	0xe000e284
 1036144:	e000e429 	.word	0xe000e429
 1036148:	20100d8c 	.word	0x20100d8c
 103614c:	0000313d 	.word	0x0000313d
 1036150:	4800c000 	.word	0x4800c000
 1036154:	000033a0 	.word	0x000033a0
 1036158:	00003145 	.word	0x00003145
 103615c:	0000314d 	.word	0x0000314d
 1036160:	00003155 	.word	0x00003155
 1036164:	00001de3 	.word	0x00001de3
 1036168:	20100320 	.word	0x20100320
 103616c:	20100168 	.word	0x20100168
 1036170:	00002e40 	.word	0x00002e40
 1036174:	00002e4c 	.word	0x00002e4c
 1036178:	2d0cf8df 	.word	0x2d0cf8df
 103617c:	10d8f8d5 	.word	0x10d8f8d5
 1036180:	fb616812 	.word	0xfb616812
 1036184:	00400012 	.word	0x00400012
 1036188:	f8c51049 	.word	0xf8c51049
 103618c:	fb5000d8 	.word	0xfb5000d8
 1036190:	f8df1112 	.word	0xf8df1112
 1036194:	f8d50cf8 	.word	0xf8d50cf8
 1036198:	680020e0 	.word	0x680020e0
 103619c:	10490049 	.word	0x10490049
 10361a0:	1110fb62 	.word	0x1110fb62
 10361a4:	10520049 	.word	0x10520049
 10361a8:	10e0f8c5 	.word	0x10e0f8c5
 10361ac:	2010fb51 	.word	0x2010fb51
 10361b0:	10d0f8d5 	.word	0x10d0f8d5
 10361b4:	10400040 	.word	0x10400040
 10361b8:	0061eb00 	.word	0x0061eb00
 10361bc:	00e8f8c5 	.word	0x00e8f8c5
 10361c0:	18bcf8df 	.word	0x18bcf8df
 10361c4:	0798f8d8 	.word	0x0798f8d8
 10361c8:	f8904440 	.word	0xf8904440
 10361cc:	08c006ee 	.word	0x08c006ee
 10361d0:	00c0eb05 	.word	0x00c0eb05
 10361d4:	00e8f8d0 	.word	0x00e8f8d0
 10361d8:	0118f8c5 	.word	0x0118f8c5
 10361dc:	0108f8d5 	.word	0x0108f8d5
 10361e0:	0110f8c5 	.word	0x0110f8c5
 10361e4:	0100f8d5 	.word	0x0100f8d5
 10361e8:	0108f8c5 	.word	0x0108f8c5
 10361ec:	00f8f8d5 	.word	0x00f8f8d5
 10361f0:	0100f8c5 	.word	0x0100f8c5
 10361f4:	00f0f8d5 	.word	0x00f0f8d5
 10361f8:	00f8f8c5 	.word	0x00f8f8c5
 10361fc:	00e8f8d5 	.word	0x00e8f8d5
 1036200:	00f0f8c5 	.word	0x00f0f8c5
 1036204:	0e48f8df 	.word	0x0e48f8df
 1036208:	00b4f8d0 	.word	0x00b4f8d0
 103620c:	f8df4008 	.word	0xf8df4008
 1036210:	42881e44 	.word	0x42881e44
 1036214:	f8dfd10e 	.word	0xf8dfd10e
 1036218:	f8d00e38 	.word	0xf8d00e38
 103621c:	f8d800b4 	.word	0xf8d800b4
 1036220:	f44f2798 	.word	0xf44f2798
 1036224:	40917180 	.word	0x40917180
 1036228:	bf1c4208 	.word	0xbf1c4208
 103622c:	0118f8d5 	.word	0x0118f8d5
 1036230:	fc7bf001 	.word	0xfc7bf001
 1036234:	68409802 	.word	0x68409802
 1036238:	d51f0400 	.word	0xd51f0400
 103623c:	084cf8d8 	.word	0x084cf8d8
 1036240:	1118f8d5 	.word	0x1118f8d5
 1036244:	fb511280 	.word	0xfb511280
 1036248:	f8d8f010 	.word	0xf8d8f010
 103624c:	eb081798 	.word	0xeb081798
 1036250:	f8d10181 	.word	0xf8d10181
 1036254:	18802850 	.word	0x18802850
 1036258:	0850f8c1 	.word	0x0850f8c1
 103625c:	0848f8d8 	.word	0x0848f8d8
 1036260:	1118f8d5 	.word	0x1118f8d5
 1036264:	fb511280 	.word	0xfb511280
 1036268:	f8d8f010 	.word	0xf8d8f010
 103626c:	eb081798 	.word	0xeb081798
 1036270:	f8d10181 	.word	0xf8d10181
 1036274:	18802858 	.word	0x18802858
 1036278:	0858f8c1 	.word	0x0858f8c1
 103627c:	0118f8d8 	.word	0x0118f8d8
 1036280:	0120f8c5 	.word	0x0120f8c5
 1036284:	0798f8d8 	.word	0x0798f8d8
 1036288:	f8c81c40 	.word	0xf8c81c40
 103628c:	28020798 	.word	0x28020798
 1036290:	acf1f4ff 	.word	0xacf1f4ff
 1036294:	0794f8d8 	.word	0x0794f8d8
 1036298:	f8c81c40 	.word	0xf8c81c40
 103629c:	28040794 	.word	0x28040794
 10362a0:	ace6f4ff 	.word	0xace6f4ff
 10362a4:	0118f8d8 	.word	0x0118f8d8
 10362a8:	0120f8c8 	.word	0x0120f8c8
 10362ac:	011cf8d8 	.word	0x011cf8d8
 10362b0:	0124f8c8 	.word	0x0124f8c8
 10362b4:	f8c82000 	.word	0xf8c82000
 10362b8:	f8d80798 	.word	0xf8d80798
 10362bc:	f8df0798 	.word	0xf8df0798
 10362c0:	685b3d98 	.word	0x685b3d98
 10362c4:	0580eb08 	.word	0x0580eb08
 10362c8:	0d90f8df 	.word	0x0d90f8df
 10362cc:	1120f8d5 	.word	0x1120f8d5
 10362d0:	fb516800 	.word	0xfb516800
 10362d4:	f505f010 	.word	0xf505f010
 10362d8:	f8df7690 	.word	0xf8df7690
 10362dc:	68b21d80 	.word	0x68b21d80
 10362e0:	6a376849 	.word	0x6a376849
 10362e4:	0011fb52 	.word	0x0011fb52
 10362e8:	1d70f8df 	.word	0x1d70f8df
 10362ec:	68896932 	.word	0x68896932
 10362f0:	0011fb52 	.word	0x0011fb52
 10362f4:	1d64f8df 	.word	0x1d64f8df
 10362f8:	68c969b2 	.word	0x68c969b2
 10362fc:	0011fb62 	.word	0x0011fb62
 1036300:	1d58f8df 	.word	0x1d58f8df
 1036304:	69096a32 	.word	0x69096a32
 1036308:	0011fb62 	.word	0x0011fb62
 103630c:	1d48f8df 	.word	0x1d48f8df
 1036310:	00806809 	.word	0x00806809
 1036314:	f211fb50 	.word	0xf211fb50
 1036318:	fb5169b1 	.word	0xfb5169b1
 103631c:	f8df2213 	.word	0xf8df2213
 1036320:	689b3d38 	.word	0x689b3d38
 1036324:	2213fb57 	.word	0x2213fb57
 1036328:	3d2cf8df 	.word	0x3d2cf8df
 103632c:	68db6ab7 	.word	0x68db6ab7
 1036330:	2213fb67 	.word	0x2213fb67
 1036334:	3d20f8df 	.word	0x3d20f8df
 1036338:	691b6b37 	.word	0x691b6b37
 103633c:	61b06231 	.word	0x61b06231
 1036340:	2213fb67 	.word	0x2213fb67
 1036344:	0d18f8df 	.word	0x0d18f8df
 1036348:	3d14f8df 	.word	0x3d14f8df
 103634c:	685b6800 	.word	0x685b6800
 1036350:	00926b37 	.word	0x00926b37
 1036354:	f110fb52 	.word	0xf110fb52
 1036358:	fb506ab0 	.word	0xfb506ab0
 103635c:	f8df1113 	.word	0xf8df1113
 1036360:	689b3d00 	.word	0x689b3d00
 1036364:	1113fb57 	.word	0x1113fb57
 1036368:	3cf4f8df 	.word	0x3cf4f8df
 103636c:	68db6bb7 	.word	0x68db6bb7
 1036370:	1113fb67 	.word	0x1113fb67
 1036374:	3ce8f8df 	.word	0x3ce8f8df
 1036378:	691b6c37 	.word	0x691b6c37
 103637c:	62b26330 	.word	0x62b26330
 1036380:	1113fb67 	.word	0x1113fb67
 1036384:	0cdcf8df 	.word	0x0cdcf8df
 1036388:	3cd8f8df 	.word	0x3cd8f8df
 103638c:	685b6800 	.word	0x685b6800
 1036390:	00896c37 	.word	0x00896c37
 1036394:	f210fb51 	.word	0xf210fb51
 1036398:	fb506bb0 	.word	0xfb506bb0
 103639c:	f8df2213 	.word	0xf8df2213
 10363a0:	689b3cc4 	.word	0x689b3cc4
 10363a4:	2213fb57 	.word	0x2213fb57
 10363a8:	3cb8f8df 	.word	0x3cb8f8df
 10363ac:	68db6cb7 	.word	0x68db6cb7
 10363b0:	2213fb67 	.word	0x2213fb67
 10363b4:	3cacf8df 	.word	0x3cacf8df
 10363b8:	691b6d37 	.word	0x691b6d37
 10363bc:	63b16430 	.word	0x63b16430
 10363c0:	2213fb67 	.word	0x2213fb67
 10363c4:	0ca0f8df 	.word	0x0ca0f8df
 10363c8:	1c9cf8df 	.word	0x1c9cf8df
 10363cc:	68896800 	.word	0x68896800
 10363d0:	00926d33 	.word	0x00926d33
 10363d4:	f010fb52 	.word	0xf010fb52
 10363d8:	0011fb53 	.word	0x0011fb53
 10363dc:	1c88f8df 	.word	0x1c88f8df
 10363e0:	68c96e33 	.word	0x68c96e33
 10363e4:	0011fb63 	.word	0x0011fb63
 10363e8:	1c7cf8df 	.word	0x1c7cf8df
 10363ec:	69096eb3 	.word	0x69096eb3
 10363f0:	0011fb63 	.word	0x0011fb63
 10363f4:	65b00100 	.word	0x65b00100
 10363f8:	1684f8df 	.word	0x1684f8df
 10363fc:	65306cb0 	.word	0x65306cb0
 1036400:	f8df64b2 	.word	0xf8df64b2
 1036404:	f8d00c4c 	.word	0xf8d00c4c
 1036408:	400800b4 	.word	0x400800b4
 103640c:	1c5cf8df 	.word	0x1c5cf8df
 1036410:	d10d4288 	.word	0xd10d4288
 1036414:	0c38f8df 	.word	0x0c38f8df
 1036418:	00b4f8d0 	.word	0x00b4f8d0
 103641c:	2798f8d8 	.word	0x2798f8d8
 1036420:	7180f44f 	.word	0x7180f44f
 1036424:	42084091 	.word	0x42084091
 1036428:	6db0bf1c 	.word	0x6db0bf1c
 103642c:	fb7df001 	.word	0xfb7df001
 1036430:	0c3cf8df 	.word	0x0c3cf8df
 1036434:	68006db1 	.word	0x68006db1
 1036438:	6f336fb2 	.word	0x6f336fb2
 103643c:	108967b3 	.word	0x108967b3
 1036440:	1110fb62 	.word	0x1110fb62
 1036444:	10520049 	.word	0x10520049
 1036448:	fb516731 	.word	0xfb516731
 103644c:	f5052210 	.word	0xf5052210
 1036450:	f8df74d0 	.word	0xf8df74d0
 1036454:	68a31c20 	.word	0x68a31c20
 1036458:	f8d56809 	.word	0xf8d56809
 103645c:	60a771a0 	.word	0x60a771a0
 1036460:	10920092 	.word	0x10920092
 1036464:	2211fb63 	.word	0x2211fb63
 1036468:	105b0052 	.word	0x105b0052
 103646c:	21a0f8c5 	.word	0x21a0f8c5
 1036470:	3311fb52 	.word	0x3311fb52
 1036474:	2c00f8df 	.word	0x2c00f8df
 1036478:	92016812 	.word	0x92016812
 103647c:	9b01009a 	.word	0x9b01009a
 1036480:	10d269a7 	.word	0x10d269a7
 1036484:	2213fb67 	.word	0x2213fb67
 1036488:	9f01107b 	.word	0x9f01107b
 103648c:	fb520052 	.word	0xfb520052
 1036490:	69273317 	.word	0x69273317
 1036494:	612261a7 	.word	0x612261a7
 1036498:	f8df00db 	.word	0xf8df00db
 103649c:	6aa72be0 	.word	0x6aa72be0
 10364a0:	f8d46812 	.word	0xf8d46812
 10364a4:	f8c4c020 	.word	0xf8c4c020
 10364a8:	111bc028 	.word	0x111bc028
 10364ac:	3312fb67 	.word	0x3312fb67
 10364b0:	107f005b 	.word	0x107f005b
 10364b4:	fb536223 	.word	0xfb536223
 10364b8:	f8df7712 	.word	0xf8df7712
 10364bc:	681b3bc4 	.word	0x681b3bc4
 10364c0:	013b9300 	.word	0x013b9300
 10364c4:	f8d49f00 	.word	0xf8d49f00
 10364c8:	111bc038 	.word	0x111bc038
 10364cc:	3317fb6c 	.word	0x3317fb6c
 10364d0:	076cea4f 	.word	0x076cea4f
 10364d4:	c000f8dd 	.word	0xc000f8dd
 10364d8:	fb53005b 	.word	0xfb53005b
 10364dc:	013f771c 	.word	0x013f771c
 10364e0:	6b276427 	.word	0x6b276427
 10364e4:	632363a7 	.word	0x632363a7
 10364e8:	3b98f8df 	.word	0x3b98f8df
 10364ec:	681b6e37 	.word	0x681b6e37
 10364f0:	c050f8d4 	.word	0xc050f8d4
 10364f4:	e048f8d4 	.word	0xe048f8d4
 10364f8:	e050f8c4 	.word	0xe050f8c4
 10364fc:	fb6c10bf 	.word	0xfb6c10bf
 1036500:	007f7713 	.word	0x007f7713
 1036504:	0c6cea4f 	.word	0x0c6cea4f
 1036508:	fb5764a7 	.word	0xfb5764a7
 103650c:	6e37cc13 	.word	0x6e37cc13
 1036510:	ea4f66b7 	.word	0xea4f66b7
 1036514:	6db70c8c 	.word	0x6db70c8c
 1036518:	ea4f6637 	.word	0xea4f6637
 103651c:	f8df0cec 	.word	0xf8df0cec
 1036520:	f8d47b68 	.word	0xf8d47b68
 1036524:	683fe060 	.word	0x683fe060
 1036528:	9058f8d4 	.word	0x9058f8d4
 103652c:	9060f8c4 	.word	0x9060f8c4
 1036530:	cc17fb6e 	.word	0xcc17fb6e
 1036534:	0c4cea4f 	.word	0x0c4cea4f
 1036538:	0e6eea4f 	.word	0x0e6eea4f
 103653c:	c058f8c4 	.word	0xc058f8c4
 1036540:	ee17fb5c 	.word	0xee17fb5c
 1036544:	cb44f8df 	.word	0xcb44f8df
 1036548:	9070f8d4 	.word	0x9070f8d4
 103654c:	c000f8dc 	.word	0xc000f8dc
 1036550:	a068f8d4 	.word	0xa068f8d4
 1036554:	a070f8c4 	.word	0xa070f8c4
 1036558:	0eceea4f 	.word	0x0eceea4f
 103655c:	1e2eea4f 	.word	0x1e2eea4f
 1036560:	ee1cfb69 	.word	0xee1cfb69
 1036564:	0e4eea4f 	.word	0x0e4eea4f
 1036568:	0969ea4f 	.word	0x0969ea4f
 103656c:	e068f8c4 	.word	0xe068f8c4
 1036570:	991cfb5e 	.word	0x991cfb5e
 1036574:	eb18f8df 	.word	0xeb18f8df
 1036578:	a220f8d5 	.word	0xa220f8d5
 103657c:	e000f8de 	.word	0xe000f8de
 1036580:	1909ea4f 	.word	0x1909ea4f
 1036584:	1929ea4f 	.word	0x1929ea4f
 1036588:	991efb6a 	.word	0x991efb6a
 103658c:	0949ea4f 	.word	0x0949ea4f
 1036590:	0a6aea4f 	.word	0x0a6aea4f
 1036594:	aa1efb59 	.word	0xaa1efb59
 1036598:	1b0aea4f 	.word	0x1b0aea4f
 103659c:	a078f8d4 	.word	0xa078f8d4
 10365a0:	a220f8c5 	.word	0xa220f8c5
 10365a4:	9078f8c4 	.word	0x9078f8c4
 10365a8:	f8df6c24 	.word	0xf8df6c24
 10365ac:	fb549ae8 	.word	0xfb549ae8
 10365b0:	fb5bfa19 	.word	0xfb5bfa19
 10365b4:	f505a919 	.word	0xf505a919
 10365b8:	ea4f7408 	.word	0xea4f7408
 10365bc:	f8c40949 	.word	0xf8c40949
 10365c0:	f8df9008 	.word	0xf8df9008
 10365c4:	fb5b9ad4 	.word	0xfb5b9ad4
 10365c8:	ea4fa919 	.word	0xea4fa919
 10365cc:	f8c40949 	.word	0xf8c40949
 10365d0:	f8d59010 	.word	0xf8d59010
 10365d4:	f8d49120 	.word	0xf8d49120
 10365d8:	ea4fa020 	.word	0xea4fa020
 10365dc:	fb6a09a9 	.word	0xfb6a09a9
 10365e0:	ea4f9910 	.word	0xea4f9910
 10365e4:	ea4f0949 	.word	0xea4f0949
 10365e8:	fb590a6a 	.word	0xfb590a6a
 10365ec:	f8d4a010 	.word	0xf8d4a010
 10365f0:	f8c4a018 	.word	0xf8c4a018
 10365f4:	f8c4a020 	.word	0xf8c4a020
 10365f8:	00809018 	.word	0x00809018
 10365fc:	9030f8d4 	.word	0x9030f8d4
 1036600:	fb691080 	.word	0xfb691080
 1036604:	00400011 	.word	0x00400011
 1036608:	0969ea4f 	.word	0x0969ea4f
 103660c:	9111fb50 	.word	0x9111fb50
 1036610:	9028f8d4 	.word	0x9028f8d4
 1036614:	9030f8c4 	.word	0x9030f8c4
 1036618:	008862a0 	.word	0x008862a0
 103661c:	f8d49901 	.word	0xf8d49901
 1036620:	10c09040 	.word	0x10c09040
 1036624:	0011fb69 	.word	0x0011fb69
 1036628:	0169ea4f 	.word	0x0169ea4f
 103662c:	9004f8dd 	.word	0x9004f8dd
 1036630:	fb500040 	.word	0xfb500040
 1036634:	f8d41119 	.word	0xf8d41119
 1036638:	f8c49038 	.word	0xf8c49038
 103663c:	63a09040 	.word	0x63a09040
 1036640:	6d2100c8 	.word	0x6d2100c8
 1036644:	fb611100 	.word	0xfb611100
 1036648:	00400012 	.word	0x00400012
 103664c:	fb501049 	.word	0xfb501049
 1036650:	6ca21112 	.word	0x6ca21112
 1036654:	64a06522 	.word	0x64a06522
 1036658:	99000108 	.word	0x99000108
 103665c:	11006e22 	.word	0x11006e22
 1036660:	0011fb62 	.word	0x0011fb62
 1036664:	9a001051 	.word	0x9a001051
 1036668:	fb500040 	.word	0xfb500040
 103666c:	01091112 	.word	0x01091112
 1036670:	6da166a1 	.word	0x6da166a1
 1036674:	65a06621 	.word	0x65a06621
 1036678:	6fa168b0 	.word	0x6fa168b0
 103667c:	67a26f22 	.word	0x67a26f22
 1036680:	fb611080 	.word	0xfb611080
 1036684:	00400013 	.word	0x00400013
 1036688:	67201049 	.word	0x67201049
 103668c:	1113fb50 	.word	0x1113fb50
 1036690:	613068b0 	.word	0x613068b0
 1036694:	f8d50089 	.word	0xf8d50089
 1036698:	60b00120 	.word	0x60b00120
 103669c:	f50510c9 	.word	0xf50510c9
 10366a0:	68827028 	.word	0x68827028
 10366a4:	32a0f8d5 	.word	0x32a0f8d5
 10366a8:	fb626083 	.word	0xfb626083
 10366ac:	00491117 	.word	0x00491117
 10366b0:	f8c51052 	.word	0xf8c51052
 10366b4:	fb5112a0 	.word	0xfb5112a0
 10366b8:	00d12217 	.word	0x00d12217
 10366bc:	69036982 	.word	0x69036982
 10366c0:	11096183 	.word	0x11096183
 10366c4:	111cfb62 	.word	0x111cfb62
 10366c8:	10520049 	.word	0x10520049
 10366cc:	fb516101 	.word	0xfb516101
 10366d0:	0111221c 	.word	0x0111221c
 10366d4:	6a036a82 	.word	0x6a036a82
 10366d8:	11096283 	.word	0x11096283
 10366dc:	111efb62 	.word	0x111efb62
 10366e0:	10520049 	.word	0x10520049
 10366e4:	fb516201 	.word	0xfb516201
 10366e8:	6ea3221e 	.word	0x6ea3221e
 10366ec:	19a4f8df 	.word	0x19a4f8df
 10366f0:	f111fb53 	.word	0xf111fb53
 10366f4:	f8df0112 	.word	0xf8df0112
 10366f8:	fb52399c 	.word	0xfb52399c
 10366fc:	005b1313 	.word	0x005b1313
 1036700:	f8df6303 	.word	0xf8df6303
 1036704:	fb523994 	.word	0xfb523994
 1036708:	00491113 	.word	0x00491113
 103670c:	f8d86381 	.word	0xf8d86381
 1036710:	1c400798 	.word	0x1c400798
 1036714:	0798f8c8 	.word	0x0798f8c8
 1036718:	f4ff2802 	.word	0xf4ff2802
 103671c:	f898adce 	.word	0xf898adce
 1036720:	280106ea 	.word	0x280106ea
 1036724:	845ff040 	.word	0x845ff040
 1036728:	68409802 	.word	0x68409802
 103672c:	d5090200 	.word	0xd5090200
 1036730:	68409802 	.word	0x68409802
 1036734:	f4209902 	.word	0xf4209902
 1036738:	60480000 	.word	0x60480000
 103673c:	f8df2100 	.word	0xf8df2100
 1036740:	6481095c 	.word	0x6481095c
 1036744:	68409802 	.word	0x68409802
 1036748:	d50b0300 	.word	0xd50b0300
 103674c:	68409802 	.word	0x68409802
 1036750:	f4209902 	.word	0xf4209902
 1036754:	60482000 	.word	0x60482000
 1036758:	f8df2100 	.word	0xf8df2100
 103675c:	63410940 	.word	0x63410940
 1036760:	64416401 	.word	0x64416401
 1036764:	0124f8d8 	.word	0x0124f8d8
 1036768:	a178f8d8 	.word	0xa178f8d8
 103676c:	52d0f8d8 	.word	0x52d0f8d8
 1036770:	ea4f9001 	.word	0xea4f9001
 1036774:	f8d87bea 	.word	0xf8d87bea
 1036778:	9b010120 	.word	0x9b010120
 103677c:	e9d89000 	.word	0xe9d89000
 1036780:	9a0001d6 	.word	0x9a0001d6
 1036784:	2302fb83 	.word	0x2302fb83
 1036788:	ea420d92 	.word	0xea420d92
 103678c:	18802283 	.word	0x18802283
 1036790:	51a3eb41 	.word	0x51a3eb41
 1036794:	01d6e9c8 	.word	0x01d6e9c8
 1036798:	017cf8d8 	.word	0x017cf8d8
 103679c:	670afba0 	.word	0x670afba0
 10367a0:	e9d817c1 	.word	0xe9d817c1
 10367a4:	fb0023dc 	.word	0xfb0023dc
 10367a8:	fb01770b 	.word	0xfb01770b
 10367ac:	0db6770a 	.word	0x0db6770a
 10367b0:	2687ea46 	.word	0x2687ea46
 10367b4:	eb431992 	.word	0xeb431992
 10367b8:	e9c853a7 	.word	0xe9c853a7
 10367bc:	f8d823dc 	.word	0xf8d823dc
 10367c0:	e9d862dc 	.word	0xe9d862dc
 10367c4:	fb8623e8 	.word	0xfb8623e8
 10367c8:	0db66705 	.word	0x0db66705
 10367cc:	2687ea46 	.word	0x2687ea46
 10367d0:	eb431992 	.word	0xeb431992
 10367d4:	e9c853a7 	.word	0xe9c853a7
 10367d8:	f8d823e8 	.word	0xf8d823e8
 10367dc:	f8d85228 	.word	0xf8d85228
 10367e0:	e9d86234 	.word	0xe9d86234
 10367e4:	fb8623ee 	.word	0xfb8623ee
 10367e8:	0db66705 	.word	0x0db66705
 10367ec:	2687ea46 	.word	0x2687ea46
 10367f0:	eb431992 	.word	0xeb431992
 10367f4:	e9c853a7 	.word	0xe9c853a7
 10367f8:	fbaa23ee 	.word	0xfbaa23ee
 10367fc:	9a00490a 	.word	0x9a00490a
 1036800:	fb834613 	.word	0xfb834613
 1036804:	e9d86702 	.word	0xe9d86702
 1036808:	0db623b8 	.word	0x0db623b8
 103680c:	2687ea46 	.word	0x2687ea46
 1036810:	eb431992 	.word	0xeb431992
 1036814:	e9c85397 	.word	0xe9c85397
 1036818:	fb0a23b8 	.word	0xfb0a23b8
 103681c:	e9d8990b 	.word	0xe9d8990b
 1036820:	fb0b23c2 	.word	0xfb0b23c2
 1036824:	0da5990a 	.word	0x0da5990a
 1036828:	2589ea45 	.word	0x2589ea45
 103682c:	eb431952 	.word	0xeb431952
 1036830:	e9c85399 	.word	0xe9c85399
 1036834:	9d0123c2 	.word	0x9d0123c2
 1036838:	e9d846ac 	.word	0xe9d846ac
 103683c:	fb8c23fa 	.word	0xfb8c23fa
 1036840:	0da54905 	.word	0x0da54905
 1036844:	2589ea45 	.word	0x2589ea45
 1036848:	eb431952 	.word	0xeb431952
 103684c:	e9c85399 	.word	0xe9c85399
 1036850:	f50823fa 	.word	0xf50823fa
 1036854:	fba06581 	.word	0xfba06581
 1036858:	e9d54900 	.word	0xe9d54900
 103685c:	fb002300 	.word	0xfb002300
 1036860:	fb019901 	.word	0xfb019901
 1036864:	0da49900 	.word	0x0da49900
 1036868:	2489ea44 	.word	0x2489ea44
 103686c:	eb431912 	.word	0xeb431912
 1036870:	e9c55399 	.word	0xe9c55399
 1036874:	f8d82300 	.word	0xf8d82300
 1036878:	1c5227a8 	.word	0x1c5227a8
 103687c:	27a8f8c8 	.word	0x27a8f8c8
 1036880:	f8d84602 	.word	0xf8d84602
 1036884:	f898318c 	.word	0xf898318c
 1036888:	2b0156c0 	.word	0x2b0156c0
 103688c:	2a01db0c 	.word	0x2a01db0c
 1036890:	2d01da6a 	.word	0x2d01da6a
 1036894:	2001d16b 	.word	0x2001d16b
 1036898:	06c1f888 	.word	0x06c1f888
 103689c:	06c4f8d8 	.word	0x06c4f8d8
 10368a0:	f8c81c40 	.word	0xf8c81c40
 10368a4:	e06206c4 	.word	0xe06206c4
 10368a8:	d55d2b00 	.word	0xd55d2b00
 10368ac:	d45b2a00 	.word	0xd45b2a00
 10368b0:	24020309 	.word	0x24020309
 10368b4:	5110ea41 	.word	0x5110ea41
 10368b8:	f8881ad2 	.word	0xf8881ad2
 10368bc:	030046c1 	.word	0x030046c1
 10368c0:	f00117d3 	.word	0xf00117d3
 10368c4:	f8d8f997 	.word	0xf8d8f997
 10368c8:	f8df47a8 	.word	0xf8df47a8
 10368cc:	ebc017d0 	.word	0xebc017d0
 10368d0:	f8c83004 	.word	0xf8c83004
 10368d4:	678806c8 	.word	0x678806c8
 10368d8:	d11e2d01 	.word	0xd11e2d01
 10368dc:	06c4f8d8 	.word	0x06c4f8d8
 10368e0:	36ccf8d8 	.word	0x36ccf8d8
 10368e4:	f8c81c40 	.word	0xf8c81c40
 10368e8:	212806c4 	.word	0x212806c4
 10368ec:	07a0f8d8 	.word	0x07a0f8d8
 10368f0:	8000fb01 	.word	0x8000fb01
 10368f4:	4450f04f 	.word	0x4450f04f
 10368f8:	26c4f8d0 	.word	0x26c4f8d0
 10368fc:	0907f04f 	.word	0x0907f04f
 1036900:	0102fba4 	.word	0x0102fba4
 1036904:	1102fb09 	.word	0x1102fb09
 1036908:	26c8f8d8 	.word	0x26c8f8d8
 103690c:	23001ad2 	.word	0x23001ad2
 1036910:	f992f001 	.word	0xf992f001
 1036914:	06d4f8c8 	.word	0x06d4f8c8
 1036918:	2001e006 	.word	0x2001e006
 103691c:	06c0f888 	.word	0x06c0f888
 1036920:	06c8f8d8 	.word	0x06c8f8d8
 1036924:	06ccf8c8 	.word	0x06ccf8c8
 1036928:	6281f508 	.word	0x6281f508
 103692c:	fb6ff000 	.word	0xfb6ff000
 1036930:	f982f001 	.word	0xf982f001
 1036934:	ea400c00 	.word	0xea400c00
 1036938:	28084001 	.word	0x28084001
 103693c:	2001d308 	.word	0x2001d308
 1036940:	06d8f8c8 	.word	0x06d8f8c8
 1036944:	0754f8df 	.word	0x0754f8df
 1036948:	f0406880 	.word	0xf0406880
 103694c:	e0070001 	.word	0xe0070001
 1036950:	f8c82000 	.word	0xf8c82000
 1036954:	f8df06d8 	.word	0xf8df06d8
 1036958:	68800744 	.word	0x68800744
 103695c:	00400840 	.word	0x00400840
 1036960:	1738f8df 	.word	0x1738f8df
 1036964:	e0026088 	.word	0xe0026088
 1036968:	f8882000 	.word	0xf8882000
 103696c:	980106c1 	.word	0x980106c1
 1036970:	bf482800 	.word	0xbf482800
 1036974:	f8df4240 	.word	0xf8df4240
 1036978:	6c891724 	.word	0x6c891724
 103697c:	bf384281 	.word	0xbf384281
 1036980:	f8df4601 	.word	0xf8df4601
 1036984:	64810718 	.word	0x64810718
 1036988:	61def508 	.word	0x61def508
 103698c:	e9d19800 	.word	0xe9d19800
 1036990:	18122300 	.word	0x18122300
 1036994:	73e0eb43 	.word	0x73e0eb43
 1036998:	2300e9c1 	.word	0x2300e9c1
 103699c:	bf4c2800 	.word	0xbf4c2800
 10369a0:	46054245 	.word	0x46054245
 10369a4:	16f4f8df 	.word	0x16f4f8df
 10369a8:	42a96b49 	.word	0x42a96b49
 10369ac:	4629bf38 	.word	0x4629bf38
 10369b0:	26e8f8df 	.word	0x26e8f8df
 10369b4:	f5086351 	.word	0xf5086351
 10369b8:	e9d161e2 	.word	0xe9d161e2
 10369bc:	17c12300 	.word	0x17c12300
 10369c0:	f5081810 	.word	0xf5081810
 10369c4:	415962e2 	.word	0x415962e2
 10369c8:	0100e9c2 	.word	0x0100e9c2
 10369cc:	01bee9d8 	.word	0x01bee9d8
 10369d0:	eb411980 	.word	0xeb411980
 10369d4:	e9c85197 	.word	0xe9c85197
 10369d8:	f8df01be 	.word	0xf8df01be
 10369dc:	6c0006c0 	.word	0x6c0006c0
 10369e0:	bf3c42a8 	.word	0xbf3c42a8
 10369e4:	06b4f8df 	.word	0x06b4f8df
 10369e8:	f8df6405 	.word	0xf8df6405
 10369ec:	f8d80664 	.word	0xf8d80664
 10369f0:	f8d01864 	.word	0xf8d01864
 10369f4:	f5080094 	.word	0xf5080094
 10369f8:	fb3162e1 	.word	0xfb3162e1
 10369fc:	e9d2f010 	.word	0xe9d2f010
 1036a00:	00806700 	.word	0x00806700
 1036a04:	183217c1 	.word	0x183217c1
 1036a08:	65e1f508 	.word	0x65e1f508
 1036a0c:	0301eb47 	.word	0x0301eb47
 1036a10:	2300e9c5 	.word	0x2300e9c5
 1036a14:	6700fba0 	.word	0x6700fba0
 1036a18:	23c0e9d8 	.word	0x23c0e9d8
 1036a1c:	7701fb00 	.word	0x7701fb00
 1036a20:	7700fb01 	.word	0x7700fb01
 1036a24:	ea460db6 	.word	0xea460db6
 1036a28:	19922687 	.word	0x19922687
 1036a2c:	5397eb43 	.word	0x5397eb43
 1036a30:	23c0e9c8 	.word	0x23c0e9c8
 1036a34:	bf482800 	.word	0xbf482800
 1036a38:	f8df4240 	.word	0xf8df4240
 1036a3c:	6c491660 	.word	0x6c491660
 1036a40:	bf3c4281 	.word	0xbf3c4281
 1036a44:	1654f8df 	.word	0x1654f8df
 1036a48:	f5086448 	.word	0xf5086448
 1036a4c:	e9d060e8 	.word	0xe9d060e8
 1036a50:	f8d82300 	.word	0xf8d82300
 1036a54:	eb121868 	.word	0xeb121868
 1036a58:	f5085041 	.word	0xf5085041
 1036a5c:	eb4362e8 	.word	0xeb4362e8
 1036a60:	e9c221e1 	.word	0xe9c221e1
 1036a64:	f8d80100 	.word	0xf8d80100
 1036a68:	f6412788 	.word	0xf6412788
 1036a6c:	401a73fc 	.word	0x401a73fc
 1036a70:	d11d429a 	.word	0xd11d429a
 1036a74:	2628f8df 	.word	0x2628f8df
 1036a78:	3628f8df 	.word	0x3628f8df
 1036a7c:	bf00e002 	.word	0xbf00e002
 1036a80:	80000070 	.word	0x80000070
 1036a84:	2013fb51 	.word	0x2013fb51
 1036a88:	1610f8df 	.word	0x1610f8df
 1036a8c:	f5086308 	.word	0xf5086308
 1036a90:	220061e8 	.word	0x220061e8
 1036a94:	2200e9c1 	.word	0x2200e9c1
 1036a98:	186cf8d8 	.word	0x186cf8d8
 1036a9c:	0101fb80 	.word	0x0101fb80
 1036aa0:	ea400a00 	.word	0xea400a00
 1036aa4:	f8d86001 	.word	0xf8d86001
 1036aa8:	18081870 	.word	0x18081870
 1036aac:	079cf8c8 	.word	0x079cf8c8
 1036ab0:	f8c82000 	.word	0xf8c82000
 1036ab4:	f8df07a0 	.word	0xf8df07a0
 1036ab8:	f8df15e4 	.word	0xf8df15e4
 1036abc:	688005e0 	.word	0x688005e0
 1036ac0:	0018f020 	.word	0x0018f020
 1036ac4:	f8d86088 	.word	0xf8d86088
 1036ac8:	28b207a8 	.word	0x28b207a8
 1036acc:	f8d8db03 	.word	0xf8d8db03
 1036ad0:	61c806d4 	.word	0x61c806d4
 1036ad4:	f8986208 	.word	0xf8986208
 1036ad8:	b92806c1 	.word	0xb92806c1
 1036adc:	07a8f8d8 	.word	0x07a8f8d8
 1036ae0:	69099902 	.word	0x69099902
 1036ae4:	d3544288 	.word	0xd3544288
 1036ae8:	15b0f8df 	.word	0x15b0f8df
 1036aec:	05acf8df 	.word	0x05acf8df
 1036af0:	69006909 	.word	0x69006909
 1036af4:	0c001c49 	.word	0x0c001c49
 1036af8:	ea41b289 	.word	0xea41b289
 1036afc:	f8df4000 	.word	0xf8df4000
 1036b00:	6108159c 	.word	0x6108159c
 1036b04:	07a8f8d8 	.word	0x07a8f8d8
 1036b08:	16d0f8d8 	.word	0x16d0f8d8
 1036b0c:	f8d81a42 	.word	0xf8d81a42
 1036b10:	f8c807a8 	.word	0xf8c807a8
 1036b14:	f50806d0 	.word	0xf50806d0
 1036b18:	e9d860dc 	.word	0xe9d860dc
 1036b1c:	e9d067fa 	.word	0xe9d067fa
 1036b20:	1b304300 	.word	0x1b304300
 1036b24:	0103eb67 	.word	0x0103eb67
 1036b28:	f0012300 	.word	0xf0012300
 1036b2c:	0a00f885 	.word	0x0a00f885
 1036b30:	6001ea40 	.word	0x6001ea40
 1036b34:	61dcf508 	.word	0x61dcf508
 1036b38:	6700e9c1 	.word	0x6700e9c1
 1036b3c:	1510f8df 	.word	0x1510f8df
 1036b40:	42816d49 	.word	0x42816d49
 1036b44:	f8dfd305 	.word	0xf8dfd305
 1036b48:	68800554 	.word	0x68800554
 1036b4c:	7080f040 	.word	0x7080f040
 1036b50:	f8dfe00b 	.word	0xf8dfe00b
 1036b54:	6c8914fc 	.word	0x6c8914fc
 1036b58:	f8df4288 	.word	0xf8df4288
 1036b5c:	68800540 	.word	0x68800540
 1036b60:	f040bf2c 	.word	0xf040bf2c
 1036b64:	f0205080 	.word	0xf0205080
 1036b68:	f8df5088 	.word	0xf8df5088
 1036b6c:	60881530 	.word	0x60881530
 1036b70:	f0002120 	.word	0xf0002120
 1036b74:	f8d8fa6a 	.word	0xf8d8fa6a
 1036b78:	212807a0 	.word	0x212807a0
 1036b7c:	8000fb01 	.word	0x8000fb01
 1036b80:	06c1f890 	.word	0x06c1f890
 1036b84:	d0062802 	.word	0xd0062802
 1036b88:	07a8f8d8 	.word	0x07a8f8d8
 1036b8c:	69099902 	.word	0x69099902
 1036b90:	f4ff4288 	.word	0xf4ff4288
 1036b94:	f8d8a808 	.word	0xf8d8a808
 1036b98:	f8d807a8 	.word	0xf8d807a8
 1036b9c:	1a4017ac 	.word	0x1a4017ac
 1036ba0:	f8d89000 	.word	0xf8d89000
 1036ba4:	f8c807a8 	.word	0xf8c807a8
 1036ba8:	990007ac 	.word	0x990007ac
 1036bac:	04ecf8df 	.word	0x04ecf8df
 1036bb0:	202062c1 	.word	0x202062c1
 1036bb4:	0180eb08 	.word	0x0180eb08
 1036bb8:	f8d11e40 	.word	0xf8d11e40
 1036bbc:	f8c127ac 	.word	0xf8c127ac
 1036bc0:	280127b0 	.word	0x280127b0
 1036bc4:	9800daf6 	.word	0x9800daf6
 1036bc8:	43482164 	.word	0x43482164
 1036bcc:	f8c80100 	.word	0xf8c80100
 1036bd0:	980007b0 	.word	0x980007b0
 1036bd4:	083cf8c8 	.word	0x083cf8c8
 1036bd8:	f8c82000 	.word	0xf8c82000
 1036bdc:	eb080834 	.word	0xeb080834
 1036be0:	f8d80280 	.word	0xf8d80280
 1036be4:	f8d21834 	.word	0xf8d21834
 1036be8:	185127b0 	.word	0x185127b0
 1036bec:	f8c81c40 	.word	0xf8c81c40
 1036bf0:	28201834 	.word	0x28201834
 1036bf4:	f101dbf3 	.word	0xf101dbf3
 1036bf8:	09400010 	.word	0x09400010
 1036bfc:	0838f8c8 	.word	0x0838f8c8
 1036c00:	68409802 	.word	0x68409802
 1036c04:	d50207c0 	.word	0xd50207c0
 1036c08:	feacf000 	.word	0xfeacf000
 1036c0c:	2000e002 	.word	0x2000e002
 1036c10:	0840f8c8 	.word	0x0840f8c8
 1036c14:	f8df2500 	.word	0xf8df2500
 1036c18:	eb000438 	.word	0xeb000438
 1036c1c:	f8da0a85 	.word	0xf8da0a85
 1036c20:	28000018 	.word	0x28000018
 1036c24:	8183f140 	.word	0x8183f140
 1036c28:	f0004629 	.word	0xf0004629
 1036c2c:	20b8fee2 	.word	0x20b8fee2
 1036c30:	f205fb00 	.word	0xf205fb00
 1036c34:	0e08eb02 	.word	0x0e08eb02
 1036c38:	6394f50e 	.word	0x6394f50e
 1036c3c:	0100e9d3 	.word	0x0100e9d3
 1036c40:	7600f510 	.word	0x7600f510
 1036c44:	0700f141 	.word	0x0700f141
 1036c48:	ea460ab6 	.word	0xea460ab6
 1036c4c:	f8df5687 	.word	0xf8df5687
 1036c50:	12bf0458 	.word	0x12bf0458
 1036c54:	4906fba0 	.word	0x4906fba0
 1036c58:	9907fb00 	.word	0x9907fb00
 1036c5c:	5000f114 	.word	0x5000f114
 1036c60:	0100f149 	.word	0x0100f149
 1036c64:	f8da0f80 	.word	0xf8da0f80
 1036c68:	ea403018 	.word	0xea403018
 1036c6c:	17890081 	.word	0x17890081
 1036c70:	037ff403 	.word	0x037ff403
 1036c74:	1f01f1b3 	.word	0x1f01f1b3
 1036c78:	9b02d210 	.word	0x9b02d210
 1036c7c:	2b006b9b 	.word	0x2b006b9b
 1036c80:	9b02d50c 	.word	0x9b02d50c
 1036c84:	e0166bde 	.word	0xe0166bde
 1036c88:	00002e68 	.word	0x00002e68
 1036c8c:	00002e60 	.word	0x00002e60
 1036c90:	00002e70 	.word	0x00002e70
 1036c94:	80000050 	.word	0x80000050
 1036c98:	00002e78 	.word	0x00002e78
 1036c9c:	3018f8da 	.word	0x3018f8da
 1036ca0:	037ff403 	.word	0x037ff403
 1036ca4:	3f40f5b3 	.word	0x3f40f5b3
 1036ca8:	9b02d808 	.word	0x9b02d808
 1036cac:	011b6b9b 	.word	0x011b6b9b
 1036cb0:	9b02d504 	.word	0x9b02d504
 1036cb4:	1b806c1e 	.word	0x1b806c1e
 1036cb8:	71e6eb61 	.word	0x71e6eb61
 1036cbc:	3018f8da 	.word	0x3018f8da
 1036cc0:	eb614244 	.word	0xeb614244
 1036cc4:	f4030941 	.word	0xf4030941
 1036cc8:	f1b3037f 	.word	0xf1b3037f
 1036ccc:	d21d1f01 	.word	0xd21d1f01
 1036cd0:	685b9b02 	.word	0x685b9b02
 1036cd4:	d519075b 	.word	0xd519075b
 1036cd8:	bfa42900 	.word	0xbfa42900
 1036cdc:	46894604 	.word	0x46894604
 1036ce0:	6ade9b02 	.word	0x6ade9b02
 1036ce4:	45b92700 	.word	0x45b92700
 1036ce8:	db01dc0a 	.word	0xdb01dc0a
 1036cec:	d20742b4 	.word	0xd20742b4
 1036cf0:	33a8f8df 	.word	0x33a8f8df
 1036cf4:	2000689b 	.word	0x2000689b
 1036cf8:	f4434601 	.word	0xf4434601
 1036cfc:	e0271380 	.word	0xe0271380
 1036d00:	3398f8df 	.word	0x3398f8df
 1036d04:	f423689b 	.word	0xf423689b
 1036d08:	e0211380 	.word	0xe0211380
 1036d0c:	3018f8da 	.word	0x3018f8da
 1036d10:	037ff403 	.word	0x037ff403
 1036d14:	3f40f5b3 	.word	0x3f40f5b3
 1036d18:	9b02d81c 	.word	0x9b02d81c
 1036d1c:	079b685b 	.word	0x079b685b
 1036d20:	2900d518 	.word	0x2900d518
 1036d24:	4604bfa4 	.word	0x4604bfa4
 1036d28:	9b024689 	.word	0x9b024689
 1036d2c:	27006b1e 	.word	0x27006b1e
 1036d30:	dc0945b9 	.word	0xdc0945b9
 1036d34:	42b4db01 	.word	0x42b4db01
 1036d38:	4bd8d206 	.word	0x4bd8d206
 1036d3c:	2000689b 	.word	0x2000689b
 1036d40:	f4434601 	.word	0xf4434601
 1036d44:	e0032300 	.word	0xe0032300
 1036d48:	689b4bd4 	.word	0x689b4bd4
 1036d4c:	2300f423 	.word	0x2300f423
 1036d50:	60b34ed2 	.word	0x60b34ed2
 1036d54:	3018f8da 	.word	0x3018f8da
 1036d58:	d408015b 	.word	0xd408015b
 1036d5c:	eb034bd3 	.word	0xeb034bd3
 1036d60:	e9d303c5 	.word	0xe9d303c5
 1036d64:	18366764 	.word	0x18366764
 1036d68:	e9c3414f 	.word	0xe9c3414f
 1036d6c:	f20e6764 	.word	0xf20e6764
 1036d70:	eb025630 	.word	0xeb025630
 1036d74:	e9d60c08 	.word	0xe9d60c08
 1036d78:	18234904 	.word	0x18234904
 1036d7c:	0901eb49 	.word	0x0901eb49
 1036d80:	3904e9c6 	.word	0x3904e9c6
 1036d84:	eb0c2320 	.word	0xeb0c2320
 1036d88:	1e5b0283 	.word	0x1e5b0283
 1036d8c:	74a8f8d2 	.word	0x74a8f8d2
 1036d90:	74acf8c2 	.word	0x74acf8c2
 1036d94:	daf62b01 	.word	0xdaf62b01
 1036d98:	47a0f20e 	.word	0x47a0f20e
 1036d9c:	62a6f50e 	.word	0x62a6f50e
 1036da0:	240060f8 	.word	0x240060f8
 1036da4:	e9c22000 	.word	0xe9c22000
 1036da8:	f50c0000 	.word	0xf50c0000
 1036dac:	e9d060a6 	.word	0xe9d060a6
 1036db0:	eb0c2300 	.word	0xeb0c2300
 1036db4:	f8d00084 	.word	0xf8d00084
 1036db8:	17c104ac 	.word	0x17c104ac
 1036dbc:	f50c1810 	.word	0xf50c1810
 1036dc0:	415962a6 	.word	0x415962a6
 1036dc4:	0100e9c2 	.word	0x0100e9c2
 1036dc8:	2c201c64 	.word	0x2c201c64
 1036dcc:	3010dbed 	.word	0x3010dbed
 1036dd0:	0100f141 	.word	0x0100f141
 1036dd4:	ea400940 	.word	0xea400940
 1036dd8:	114960c1 	.word	0x114960c1
 1036ddc:	bfb82900 	.word	0xbfb82900
 1036de0:	60b04240 	.word	0x60b04240
 1036de4:	280068b8 	.word	0x280068b8
 1036de8:	80a1f040 	.word	0x80a1f040
 1036dec:	4904e9d6 	.word	0x4904e9d6
 1036df0:	0f00f1b9 	.word	0x0f00f1b9
 1036df4:	4264da02 	.word	0x4264da02
 1036df8:	0949eb69 	.word	0x0949eb69
 1036dfc:	0106e9d6 	.word	0x0106e9d6
 1036e00:	ea410049 	.word	0xea410049
 1036e04:	458971d0 	.word	0x458971d0
 1036e08:	d802d308 	.word	0xd802d308
 1036e0c:	0f40ebb4 	.word	0x0f40ebb4
 1036e10:	2000d304 	.word	0x2000d304
 1036e14:	0004e9c6 	.word	0x0004e9c6
 1036e18:	46812400 	.word	0x46812400
 1036e1c:	2306e9d6 	.word	0x2306e9d6
 1036e20:	210068b0 	.word	0x210068b0
 1036e24:	41591810 	.word	0x41591810
 1036e28:	d3314589 	.word	0xd3314589
 1036e2c:	4284d801 	.word	0x4284d801
 1036e30:	e9d6d32e 	.word	0xe9d6d32e
 1036e34:	f0002304 	.word	0xf0002304
 1036e38:	f8daf8f6 	.word	0xf8daf8f6
 1036e3c:	01800018 	.word	0x01800018
 1036e40:	2001bf5c 	.word	0x2001bf5c
 1036e44:	f8da60b8 	.word	0xf8da60b8
 1036e48:	b2800018 	.word	0xb2800018
 1036e4c:	bf082d02 	.word	0xbf082d02
 1036e50:	497f2503 	.word	0x497f2503
 1036e54:	0185eb01 	.word	0x0185eb01
 1036e58:	01896989 	.word	0x01896989
 1036e5c:	f20fd467 	.word	0xf20fd467
 1036e60:	4a932160 	.word	0x4a932160
 1036e64:	1025f851 	.word	0x1025f851
 1036e68:	220a6091 	.word	0x220a6091
 1036e6c:	f1010169 	.word	0xf1010169
 1036e70:	f5014190 	.word	0xf5014190
 1036e74:	300a4102 	.word	0x300a4102
 1036e78:	6088604a 	.word	0x6088604a
 1036e7c:	bf00e052 	.word	0xbf00e052
 1036e80:	00002e94 	.word	0x00002e94
 1036e84:	00002e98 	.word	0x00002e98
 1036e88:	00002e8c 	.word	0x00002e8c
 1036e8c:	00002e90 	.word	0x00002e90
 1036e90:	0106e9d6 	.word	0x0106e9d6
 1036e94:	d34a4589 	.word	0xd34a4589
 1036e98:	4284d801 	.word	0x4284d801
 1036e9c:	68b2d347 	.word	0x68b2d347
 1036ea0:	1838f8d8 	.word	0x1838f8d8
 1036ea4:	1b001810 	.word	0x1b001810
 1036ea8:	0100fba1 	.word	0x0100fba1
 1036eac:	f0002300 	.word	0xf0002300
 1036eb0:	e9d6fec3 	.word	0xe9d6fec3
 1036eb4:	46042304 	.word	0x46042304
 1036eb8:	f8b5f000 	.word	0xf8b5f000
 1036ebc:	0104e9d6 	.word	0x0104e9d6
 1036ec0:	da042900 	.word	0xda042900
 1036ec4:	49754875 	.word	0x49754875
 1036ec8:	1c406f40 	.word	0x1c406f40
 1036ecc:	48736748 	.word	0x48736748
 1036ed0:	6e404972 	.word	0x6e404972
 1036ed4:	66481c40 	.word	0x66481c40
 1036ed8:	0018f8da 	.word	0x0018f8da
 1036edc:	bf5c0180 	.word	0xbf5c0180
 1036ee0:	60b82001 	.word	0x60b82001
 1036ee4:	0018f8da 	.word	0x0018f8da
 1036ee8:	0108f104 	.word	0x0108f104
 1036eec:	b2800909 	.word	0xb2800909
 1036ef0:	bf082d02 	.word	0xbf082d02
 1036ef4:	4a562503 	.word	0x4a562503
 1036ef8:	0285eb02 	.word	0x0285eb02
 1036efc:	01926992 	.word	0x01926992
 1036f00:	f20fd415 	.word	0xf20fd415
 1036f04:	4b6a12bc 	.word	0x4b6a12bc
 1036f08:	2025f852 	.word	0x2025f852
 1036f0c:	f101609a 	.word	0xf101609a
 1036f10:	016a030a 	.word	0x016a030a
 1036f14:	4290f102 	.word	0x4290f102
 1036f18:	4202f502 	.word	0x4202f502
 1036f1c:	60531808 	.word	0x60531808
 1036f20:	6090300a 	.word	0x6090300a
 1036f24:	0085eb08 	.word	0x0085eb08
 1036f28:	f8c02101 	.word	0xf8c02101
 1036f2c:	1c6d1718 	.word	0x1c6d1718
 1036f30:	f6ff2d03 	.word	0xf6ff2d03
 1036f34:	9802ae70 	.word	0x9802ae70
 1036f38:	04006840 	.word	0x04006840
 1036f3c:	4857d513 	.word	0x4857d513
 1036f40:	69c0495c 	.word	0x69c0495c
 1036f44:	0100fba1 	.word	0x0100fba1
 1036f48:	ea400b00 	.word	0xea400b00
 1036f4c:	99025001 	.word	0x99025001
 1036f50:	f3c16849 	.word	0xf3c16849
 1036f54:	43482105 	.word	0x43482105
 1036f58:	0844f8c8 	.word	0x0844f8c8
 1036f5c:	f5082200 	.word	0xf5082200
 1036f60:	e9c060e7 	.word	0xe9c060e7
 1036f64:	21102200 	.word	0x21102200
 1036f68:	f86ff000 	.word	0xf86ff000
 1036f6c:	0860f8d8 	.word	0x0860f8d8
 1036f70:	d1062801 	.word	0xd1062801
 1036f74:	fc4cf000 	.word	0xfc4cf000
 1036f78:	06e8f888 	.word	0x06e8f888
 1036f7c:	f8c82000 	.word	0xf8c82000
 1036f80:	21280860 	.word	0x21280860
 1036f84:	07a0f8d8 	.word	0x07a0f8d8
 1036f88:	8000fb01 	.word	0x8000fb01
 1036f8c:	68c99902 	.word	0x68c99902
 1036f90:	4a2fb951 	.word	0x4a2fb951
 1036f94:	04d26852 	.word	0x04d26852
 1036f98:	f44fbf58 	.word	0xf44fbf58
 1036f9c:	f8d06100 	.word	0xf8d06100
 1036fa0:	188926d4 	.word	0x188926d4
 1036fa4:	e0010b09 	.word	0xe0010b09
 1036fa8:	68c99902 	.word	0x68c99902
 1036fac:	17a4f8c8 	.word	0x17a4f8c8
 1036fb0:	06c4f8d0 	.word	0x06c4f8d0
 1036fb4:	17a4f8d8 	.word	0x17a4f8d8
 1036fb8:	42880840 	.word	0x42880840
 1036fbc:	f8d8bf3f 	.word	0xf8d8bf3f
 1036fc0:	990207a8 	.word	0x990207a8
 1036fc4:	42886909 	.word	0x42886909
 1036fc8:	f8d8d318 	.word	0xf8d8d318
 1036fcc:	990207a8 	.word	0x990207a8
 1036fd0:	42886909 	.word	0x42886909
 1036fd4:	68804831 	.word	0x68804831
 1036fd8:	f020bf2c 	.word	0xf020bf2c
 1036fdc:	f0400020 	.word	0xf0400020
 1036fe0:	f7fe0020 	.word	0xf7fe0020
 1036fe4:	f8d8bd03 	.word	0xf8d8bd03
 1036fe8:	08800788 	.word	0x08800788
 1036fec:	d30528e6 	.word	0xd30528e6
 1036ff0:	f8882001 	.word	0xf8882001
 1036ff4:	210806ea 	.word	0x210806ea
 1036ff8:	60414828 	.word	0x60414828
 1036ffc:	bdd3f7fe 	.word	0xbdd3f7fe
 1037000:	e8bdb00f 	.word	0xe8bdb00f
 1037004:	21084ff0 	.word	0x21084ff0
 1037008:	f001482b 	.word	0xf001482b
 103700c:	e9d2b8fb 	.word	0xe9d2b8fb
 1037010:	f8d80100 	.word	0xf8d80100
 1037014:	17d327a8 	.word	0x17d327a8
 1037018:	464a4770 	.word	0x464a4770
 103701c:	6100f04f 	.word	0x6100f04f
 1037020:	f0004628 	.word	0xf0004628
 1037024:	2b00b956 	.word	0x2b00b956
 1037028:	dc01db08 	.word	0xdc01db08
 103702c:	d3052a01 	.word	0xd3052a01
 1037030:	0106e9d6 	.word	0x0106e9d6
 1037034:	eb631a10 	.word	0xeb631a10
 1037038:	e0030101 	.word	0xe0030101
 103703c:	0106e9d6 	.word	0x0106e9d6
 1037040:	41591810 	.word	0x41591810
 1037044:	0104e9c6 	.word	0x0104e9c6
 1037048:	481c4770 	.word	0x481c4770
 103704c:	b8eaf001 	.word	0xb8eaf001
 1037050:	20100000 	.word	0x20100000
 1037054:	80000010 	.word	0x80000010
 1037058:	00002eb0 	.word	0x00002eb0
 103705c:	00002e9c 	.word	0x00002e9c
 1037060:	00002ec4 	.word	0x00002ec4
 1037064:	00002ed8 	.word	0x00002ed8
 1037068:	00002eec 	.word	0x00002eec
 103706c:	80000020 	.word	0x80000020
 1037070:	00002f00 	.word	0x00002f00
 1037074:	00002f08 	.word	0x00002f08
 1037078:	00002f10 	.word	0x00002f10
 103707c:	00002f18 	.word	0x00002f18
 1037080:	00002f20 	.word	0x00002f20
 1037084:	00002f04 	.word	0x00002f04
 1037088:	00002f0c 	.word	0x00002f0c
 103708c:	00002f14 	.word	0x00002f14
 1037090:	00002f1c 	.word	0x00002f1c
 1037094:	5a82799a 	.word	0x5a82799a
 1037098:	a57d8666 	.word	0xa57d8666
 103709c:	201000dc 	.word	0x201000dc
 10370a0:	ffff1f83 	.word	0xffff1f83
 10370a4:	00091eb2 	.word	0x00091eb2
 10370a8:	00012a43 	.word	0x00012a43
 10370ac:	20100168 	.word	0x20100168
 10370b0:	48008000 	.word	0x48008000
 10370b4:	00083127 	.word	0x00083127
 10370b8:	400e1400 	.word	0x400e1400
 10370bc:	4004c000 	.word	0x4004c000
 10370c0:	00000001 	.word	0x00000001
 10370c4:	00000002 	.word	0x00000002
 10370c8:	00000004 	.word	0x00000004
 10370cc:	00000008 	.word	0x00000008
 10370d0:	28004905 	.word	0x28004905
 10370d4:	4805bf19 	.word	0x4805bf19
 10370d8:	5000f040 	.word	0x5000f040
 10370dc:	f0204804 	.word	0xf0204804
 10370e0:	60085000 	.word	0x60085000
 10370e4:	bf004770 	.word	0xbf004770
 10370e8:	e000ed08 	.word	0xe000ed08
 10370ec:	20100c00 	.word	0x20100c00
 10370f0:	00000000 	.word	0x00000000
 10370f4:	4811b510 	.word	0x4811b510
 10370f8:	f44f4c11 	.word	0xf44f4c11
 10370fc:	60017148 	.word	0x60017148
 1037100:	4100f44f 	.word	0x4100f44f
 1037104:	6001480f 	.word	0x6001480f
 1037108:	22102300 	.word	0x22102300
 103710c:	f81cf000 	.word	0xf81cf000
 1037110:	22082300 	.word	0x22082300
 1037114:	f818f000 	.word	0xf818f000
 1037118:	22202300 	.word	0x22202300
 103711c:	f814f000 	.word	0xf814f000
 1037120:	22042300 	.word	0x22042300
 1037124:	f810f000 	.word	0xf810f000
 1037128:	e8bd4620 	.word	0xe8bd4620
 103712c:	23534010 	.word	0x23534010
 1037130:	7280f44f 	.word	0x7280f44f
 1037134:	5120f04f 	.word	0x5120f04f
 1037138:	b8cbf000 	.word	0xb8cbf000
 103713c:	400e0500 	.word	0x400e0500
 1037140:	4800c000 	.word	0x4800c000
 1037144:	400e1454 	.word	0x400e1454
 1037148:	6100f04f 	.word	0x6100f04f
 103714c:	f0004620 	.word	0xf0004620
 1037150:	f850b8c0 	.word	0xf850b8c0
 1037154:	b1611b04 	.word	0xb1611b04
 1037158:	2b04f850 	.word	0x2b04f850
 103715c:	bf4407d3 	.word	0xbf4407d3
 1037160:	0301f1a9 	.word	0x0301f1a9
 1037164:	2300189a 	.word	0x2300189a
 1037168:	3b04f842 	.word	0x3b04f842
 103716c:	d1fa1f09 	.word	0xd1fa1f09
 1037170:	4770e7ef 	.word	0x4770e7ef
 1037174:	41f0e92d 	.word	0x41f0e92d
 1037178:	46884605 	.word	0x46884605
 103717c:	f8f4f000 	.word	0xf8f4f000
 1037180:	46284606 	.word	0x46284606
 1037184:	f8f2f000 	.word	0xf8f2f000
 1037188:	d0104006 	.word	0xd0104006
 103718c:	4d192700 	.word	0x4d192700
 1037190:	1c7f0138 	.word	0x1c7f0138
 1037194:	45415941 	.word	0x45415941
 1037198:	1944d1fa 	.word	0x1944d1fa
 103719c:	420e6861 	.word	0x420e6861
 10371a0:	5940d0f6 	.word	0x5940d0f6
 10371a4:	479068e2 	.word	0x479068e2
 10371a8:	43866860 	.word	0x43866860
 10371ac:	e8bdd1f0 	.word	0xe8bdd1f0
 10371b0:	b5f881f0 	.word	0xb5f881f0
 10371b4:	6f2e4d0f 	.word	0x6f2e4d0f
 10371b8:	461a4614 	.word	0x461a4614
 10371bc:	2e079b06 	.word	0x2e079b06
 10371c0:	2001d301 	.word	0x2001d301
 10371c4:	eb05bdf2 	.word	0xeb05bdf2
 10371c8:	60391706 	.word	0x60391706
 10371cc:	60ba607c 	.word	0x60ba607c
 10371d0:	1c7160fb 	.word	0x1c7160fb
 10371d4:	46216729 	.word	0x46216729
 10371d8:	f8b0f000 	.word	0xf8b0f000
 10371dc:	bdf22000 	.word	0xbdf22000
 10371e0:	4805210b 	.word	0x4805210b
 10371e4:	210ce7c6 	.word	0x210ce7c6
 10371e8:	e7c34804 	.word	0xe7c34804
 10371ec:	48042125 	.word	0x48042125
 10371f0:	0000e7c0 	.word	0x0000e7c0
 10371f4:	20100cf0 	.word	0x20100cf0
 10371f8:	400e0e00 	.word	0x400e0e00
 10371fc:	400e1000 	.word	0x400e1000
 1037200:	4800c000 	.word	0x4800c000
 1037204:	6641b10a 	.word	0x6641b10a
 1037208:	66014770 	.word	0x66014770
 103720c:	64424770 	.word	0x64424770
 1037210:	b90143d3 	.word	0xb90143d3
 1037214:	b5104770 	.word	0xb5104770
 1037218:	6f00f1b1 	.word	0x6f00f1b1
 103721c:	f1b1d011 	.word	0xf1b1d011
 1037220:	d01a5f80 	.word	0xd01a5f80
 1037224:	5fc0f1b1 	.word	0x5fc0f1b1
 1037228:	f1b1d01a 	.word	0xf1b1d01a
 103722c:	d01f5f00 	.word	0xd01f5f00
 1037230:	5f20f1b1 	.word	0x5f20f1b1
 1037234:	f1b1bf1c 	.word	0xf1b1bf1c
 1037238:	f1b15f40 	.word	0xf1b15f40
 103723c:	d00b5f60 	.word	0xd00b5f60
 1037240:	6f01e009 	.word	0x6f01e009
 1037244:	40196f04 	.word	0x40196f04
 1037248:	67014021 	.word	0x67014021
 103724c:	6f446f41 	.word	0x6f446f41
 1037250:	40214019 	.word	0x40214019
 1037254:	60426741 	.word	0x60426741
 1037258:	6f01bd10 	.word	0x6f01bd10
 103725c:	e7f44311 	.word	0xe7f44311
 1037260:	6f046f01 	.word	0x6f046f01
 1037264:	40214019 	.word	0x40214019
 1037268:	6f416701 	.word	0x6f416701
 103726c:	e7f14311 	.word	0xe7f14311
 1037270:	43116f01 	.word	0x43116f01
 1037274:	b570e7f8 	.word	0xb570e7f8
 1037278:	460d4604 	.word	0x460d4604
 103727c:	64654616 	.word	0x64654616
 1037280:	0201f006 	.word	0x0201f006
 1037284:	ffbef7ff 	.word	0xffbef7ff
 1037288:	0f0af016 	.word	0x0f0af016
 103728c:	6225bf14 	.word	0x6225bf14
 1037290:	07b06265 	.word	0x07b06265
 1037294:	f8c4bf48 	.word	0xf8c4bf48
 1037298:	d4035080 	.word	0xd4035080
 103729c:	bf480730 	.word	0xbf480730
 10372a0:	5084f8c4 	.word	0x5084f8c4
 10372a4:	60256165 	.word	0x60256165
 10372a8:	b5f8bd70 	.word	0xb5f8bd70
 10372ac:	46044616 	.word	0x46044616
 10372b0:	460d9a06 	.word	0x460d9a06
 10372b4:	6465461f 	.word	0x6465461f
 10372b8:	ffa4f7ff 	.word	0xffa4f7ff
 10372bc:	bf142f00 	.word	0xbf142f00
 10372c0:	65656525 	.word	0x65656525
 10372c4:	bf142e00 	.word	0xbf142e00
 10372c8:	63656325 	.word	0x63656325
 10372cc:	60256125 	.word	0x60256125
 10372d0:	b570bdf1 	.word	0xb570bdf1
 10372d4:	461a4615 	.word	0x461a4615
 10372d8:	4604b082 	.word	0x4604b082
 10372dc:	0601f002 	.word	0x0601f002
 10372e0:	6f00f1b1 	.word	0x6f00f1b1
 10372e4:	f1b1bf18 	.word	0xf1b1bf18
 10372e8:	d00f5f80 	.word	0xd00f5f80
 10372ec:	5fc0f1b1 	.word	0x5fc0f1b1
 10372f0:	f1b1bf18 	.word	0xf1b1bf18
 10372f4:	d0095f00 	.word	0xd0095f00
 10372f8:	5f20f1b1 	.word	0x5f20f1b1
 10372fc:	f1b1d00d 	.word	0xf1b1d00d
 1037300:	bf185f40 	.word	0xbf185f40
 1037304:	5f60f1b1 	.word	0x5f60f1b1
 1037308:	e015d00b 	.word	0xe015d00b
 103730c:	f7ff462a 	.word	0xf7ff462a
 1037310:	f000ff7e 	.word	0xf000ff7e
 1037314:	2001f831 	.word	0x2001f831
 1037318:	4629bd76 	.word	0x4629bd76
 103731c:	ffabf7ff 	.word	0xffabf7ff
 1037320:	0890e7f9 	.word	0x0890e7f9
 1037324:	0301f000 	.word	0x0301f000
 1037328:	5f60f1b1 	.word	0x5f60f1b1
 103732c:	2201bf0c 	.word	0x2201bf0c
 1037330:	f0002200 	.word	0xf0002200
 1037334:	e7eef81d 	.word	0xe7eef81d
 1037338:	bd762000 	.word	0xbd762000
 103733c:	f100b510 	.word	0xf100b510
 1037340:	06d403b0 	.word	0x06d403b0
 1037344:	f8c0d50b 	.word	0xf8c0d50b
 1037348:	069010b0 	.word	0x069010b0
 103734c:	6259bf4c 	.word	0x6259bf4c
 1037350:	06506219 	.word	0x06506219
 1037354:	6119d501 	.word	0x6119d501
 1037358:	6159bd10 	.word	0x6159bd10
 103735c:	6059bd10 	.word	0x6059bd10
 1037360:	6cc2bd10 	.word	0x6cc2bd10
 1037364:	47706401 	.word	0x47706401
 1037368:	47706cc0 	.word	0x47706cc0
 103736c:	47706c80 	.word	0x47706c80
 1037370:	46299600 	.word	0x46299600
 1037374:	e7984620 	.word	0xe7984620
 1037378:	46294632 	.word	0x46294632
 103737c:	e7414620 	.word	0xe7414620
 1037380:	f0002200 	.word	0xf0002200
 1037384:	e7febf51 	.word	0xe7febf51
 1037388:	f8df0941 	.word	0xf8df0941
 103738c:	e00223e8 	.word	0xe00223e8
 1037390:	f8df0941 	.word	0xf8df0941
 1037394:	230123e4 	.word	0x230123e4
 1037398:	001ff000 	.word	0x001ff000
 103739c:	f000fa03 	.word	0xf000fa03
 10373a0:	0021f842 	.word	0x0021f842
 10373a4:	09414770 	.word	0x09414770
 10373a8:	23d0f8df 	.word	0x23d0f8df
 10373ac:	0109e7f3 	.word	0x0109e7f3
 10373b0:	d5072800 	.word	0xd5072800
 10373b4:	000ff000 	.word	0x000ff000
 10373b8:	23c4f8df 	.word	0x23c4f8df
 10373bc:	f8001880 	.word	0xf8001880
 10373c0:	47701c04 	.word	0x47701c04
 10373c4:	23bcf8df 	.word	0x23bcf8df
 10373c8:	47705481 	.word	0x47705481
 10373cc:	03b8f8df 	.word	0x03b8f8df
 10373d0:	e0012100 	.word	0xe0012100
 10373d4:	1c496801 	.word	0x1c496801
 10373d8:	68016001 	.word	0x68016001
 10373dc:	d3f92905 	.word	0xd3f92905
 10373e0:	b5384770 	.word	0xb5384770
 10373e4:	f88d2080 	.word	0xf88d2080
 10373e8:	20da0001 	.word	0x20da0001
 10373ec:	0000f88d 	.word	0x0000f88d
 10373f0:	4398f8df 	.word	0x4398f8df
 10373f4:	0398f8df 	.word	0x0398f8df
 10373f8:	28017800 	.word	0x28017800
 10373fc:	f8dfd12c 	.word	0xf8dfd12c
 1037400:	f8df0394 	.word	0xf8df0394
 1037404:	68015394 	.word	0x68015394
 1037408:	60011c49 	.word	0x60011c49
 103740c:	f8df6800 	.word	0xf8df6800
 1037410:	f000138c 	.word	0xf000138c
 1037414:	1e400003 	.word	0x1e400003
 1037418:	0fc04180 	.word	0x0fc04180
 103741c:	21807008 	.word	0x21807008
 1037420:	037cf8df 	.word	0x037cf8df
 1037424:	f8df7001 	.word	0xf8df7001
 1037428:	6828137c 	.word	0x6828137c
 103742c:	6002680a 	.word	0x6002680a
 1037430:	60416849 	.word	0x60416849
 1037434:	1370f8df 	.word	0x1370f8df
 1037438:	6082680a 	.word	0x6082680a
 103743c:	60c16849 	.word	0x60c16849
 1037440:	f87ff000 	.word	0xf87ff000
 1037444:	4090f04f 	.word	0x4090f04f
 1037448:	21206901 	.word	0x21206901
 103744c:	f2406141 	.word	0xf2406141
 1037450:	68281101 	.word	0x68281101
 1037454:	bd316201 	.word	0xbd316201
 1037458:	5350f8df 	.word	0x5350f8df
 103745c:	b9707828 	.word	0xb9707828
 1037460:	70282001 	.word	0x70282001
 1037464:	f0004621 	.word	0xf0004621
 1037468:	f000f862 	.word	0xf000f862
 103746c:	f000f855 	.word	0xf000f855
 1037470:	f000f864 	.word	0xf000f864
 1037474:	f000f860 	.word	0xf000f860
 1037478:	2000f853 	.word	0x2000f853
 103747c:	bd317028 	.word	0xbd317028
 1037480:	f000b510 	.word	0xf000b510
 1037484:	f7fff844 	.word	0xf7fff844
 1037488:	f7ffffa1 	.word	0xf7ffffa1
 103748c:	6860ff9f 	.word	0x6860ff9f
 1037490:	1320f8df 	.word	0x1320f8df
 1037494:	2320f8df 	.word	0x2320f8df
 1037498:	60604008 	.word	0x60604008
 103749c:	f0406860 	.word	0xf0406860
 10374a0:	60600011 	.word	0x60600011
 10374a4:	02e4f8df 	.word	0x02e4f8df
 10374a8:	f8526801 	.word	0xf8526801
 10374ac:	f0033021 	.word	0xf0033021
 10374b0:	f842030c 	.word	0xf842030c
 10374b4:	23003021 	.word	0x23003021
 10374b8:	f8526800 	.word	0xf8526800
 10374bc:	f4411020 	.word	0xf4411020
 10374c0:	f84261c1 	.word	0xf84261c1
 10374c4:	20011020 	.word	0x20011020
 10374c8:	f8df6020 	.word	0xf8df6020
 10374cc:	f8df12f0 	.word	0xf8df12f0
 10374d0:	f8df02c8 	.word	0xf8df02c8
 10374d4:	600122dc 	.word	0x600122dc
 10374d8:	f8df2000 	.word	0xf8df2000
 10374dc:	548312c4 	.word	0x548312c4
 10374e0:	1c405443 	.word	0x1c405443
 10374e4:	dbfa280e 	.word	0xdbfa280e
 10374e8:	f2406920 	.word	0xf2406920
 10374ec:	61a070ff 	.word	0x61a070ff
 10374f0:	f7ff2028 	.word	0xf7ff2028
 10374f4:	2028ff4d 	.word	0x2028ff4d
 10374f8:	ff55f7ff 	.word	0xff55f7ff
 10374fc:	20282100 	.word	0x20282100
 1037500:	ff55f7ff 	.word	0xff55f7ff
 1037504:	4010e8bd 	.word	0x4010e8bd
 1037508:	2028e7ff 	.word	0x2028e7ff
 103750c:	f04fe73c 	.word	0xf04fe73c
 1037510:	20804490 	.word	0x20804490
 1037514:	e7596020 	.word	0xe7596020
 1037518:	f10d2201 	.word	0xf10d2201
 103751c:	47700101 	.word	0x47700101
 1037520:	f04f4621 	.word	0xf04f4621
 1037524:	f0004090 	.word	0xf0004090
 1037528:	f88dbeb3 	.word	0xf88dbeb3
 103752c:	f04f0001 	.word	0xf04f0001
 1037530:	f0004090 	.word	0xf0004090
 1037534:	2201be97 	.word	0x2201be97
 1037538:	f04fa900 	.word	0xf04fa900
 103753c:	f0004090 	.word	0xf0004090
 1037540:	f04fbeb7 	.word	0xf04fbeb7
 1037544:	46214090 	.word	0x46214090
 1037548:	be8cf000 	.word	0xbe8cf000
 103754c:	f000b5f8 	.word	0xf000b5f8
 1037550:	f7fff81d 	.word	0xf7fff81d
 1037554:	f000ffec 	.word	0xf000ffec
 1037558:	4632f81f 	.word	0x4632f81f
 103755c:	f0004629 	.word	0xf0004629
 1037560:	e00cf81d 	.word	0xe00cf81d
 1037564:	f000b5f8 	.word	0xf000b5f8
 1037568:	f7fff811 	.word	0xf7fff811
 103756c:	f000ffe0 	.word	0xf000ffe0
 1037570:	4632f813 	.word	0x4632f813
 1037574:	f04f4629 	.word	0xf04f4629
 1037578:	f0004090 	.word	0xf0004090
 103757c:	4639feb8 	.word	0x4639feb8
 1037580:	40f4e8bd 	.word	0x40f4e8bd
 1037584:	4090f04f 	.word	0x4090f04f
 1037588:	be82f000 	.word	0xbe82f000
 103758c:	460d4604 	.word	0x460d4604
 1037590:	46164f7e 	.word	0x46164f7e
 1037594:	47704639 	.word	0x47704639
 1037598:	46212201 	.word	0x46212201
 103759c:	4090f04f 	.word	0x4090f04f
 10375a0:	be86f000 	.word	0xbe86f000
 10375a4:	41f0e92d 	.word	0x41f0e92d
 10375a8:	202db088 	.word	0x202db088
 10375ac:	0000f88d 	.word	0x0000f88d
 10375b0:	20012201 	.word	0x20012201
 10375b4:	0001f88d 	.word	0x0001f88d
 10375b8:	0101f10d 	.word	0x0101f10d
 10375bc:	f7ffa800 	.word	0xf7ffa800
 10375c0:	20a9ffc5 	.word	0x20a9ffc5
 10375c4:	0000f88d 	.word	0x0000f88d
 10375c8:	20002464 	.word	0x20002464
 10375cc:	0002f88d 	.word	0x0002f88d
 10375d0:	f10d2201 	.word	0xf10d2201
 10375d4:	f0000102 	.word	0xf0000102
 10375d8:	f89df90a 	.word	0xf89df90a
 10375dc:	1e640002 	.word	0x1e640002
 10375e0:	2c00b908 	.word	0x2c00b908
 10375e4:	20c1d1f4 	.word	0x20c1d1f4
 10375e8:	0000f88d 	.word	0x0000f88d
 10375ec:	f20fa806 	.word	0xf20fa806
 10375f0:	c90c2118 	.word	0xc90c2118
 10375f4:	2464c00c 	.word	0x2464c00c
 10375f8:	ad01ae06 	.word	0xad01ae06
 10375fc:	a9012208 	.word	0xa9012208
 1037600:	f8f5f000 	.word	0xf8f5f000
 1037604:	21002000 	.word	0x21002000
 1037608:	5d8b5d4a 	.word	0x5d8b5d4a
 103760c:	bf184293 	.word	0xbf184293
 1037610:	558a2001 	.word	0x558a2001
 1037614:	29081c49 	.word	0x29081c49
 1037618:	1e64d3f6 	.word	0x1e64d3f6
 103761c:	2c00b130 	.word	0x2c00b130
 1037620:	4c67d1ec 	.word	0x4c67d1ec
 1037624:	f04068a0 	.word	0xf04068a0
 1037628:	e0010080 	.word	0xe0010080
 103762c:	68a04c64 	.word	0x68a04c64
 1037630:	78ab78ea 	.word	0x78ab78ea
 1037634:	792f7869 	.word	0x792f7869
 1037638:	c006f895 	.word	0xc006f895
 103763c:	8004f89d 	.word	0x8004f89d
 1037640:	020e60a0 	.word	0x020e60a0
 1037644:	0004f89d 	.word	0x0004f89d
 1037648:	f080fa56 	.word	0xf080fa56
 103764c:	4003eb00 	.word	0x4003eb00
 1037650:	6002eb00 	.word	0x6002eb00
 1037654:	0084f8c4 	.word	0x0084f8c4
 1037658:	0edcf646 	.word	0x0edcf646
 103765c:	0230796e 	.word	0x0230796e
 1037660:	f087fa50 	.word	0xf087fa50
 1037664:	400ceb00 	.word	0x400ceb00
 1037668:	c007f895 	.word	0xc007f895
 103766c:	600ceb00 	.word	0x600ceb00
 1037670:	0088f8c4 	.word	0x0088f8c4
 1037674:	2108ea41 	.word	0x2108ea41
 1037678:	f8df4852 	.word	0xf8df4852
 103767c:	fb0ec14c 	.word	0xfb0ec14c
 1037680:	6001c101 	.word	0x6001c101
 1037684:	2607ea46 	.word	0x2607ea46
 1037688:	4f514950 	.word	0x4f514950
 103768c:	c606fb0e 	.word	0xc606fb0e
 1037690:	ea42600e 	.word	0xea42600e
 1037694:	79ab2203 	.word	0x79ab2203
 1037698:	f8df4e4e 	.word	0xf8df4e4e
 103769c:	79edc13c 	.word	0x79edc13c
 10376a0:	fb520512 	.word	0xfb520512
 10376a4:	6032c217 	.word	0x6032c217
 10376a8:	2303ea45 	.word	0x2303ea45
 10376ac:	68354a4b 	.word	0x68354a4b
 10376b0:	051b4e4b 	.word	0x051b4e4b
 10376b4:	c317fb53 	.word	0xc317fb53
 10376b8:	af036013 	.word	0xaf036013
 10376bc:	68086803 	.word	0x68086803
 10376c0:	1ac06811 	.word	0x1ac06811
 10376c4:	1b490200 	.word	0x1b490200
 10376c8:	f0f1fb90 	.word	0xf0f1fb90
 10376cc:	60084945 	.word	0x60084945
 10376d0:	fb854240 	.word	0xfb854240
 10376d4:	0a000100 	.word	0x0a000100
 10376d8:	6001ea40 	.word	0x6001ea40
 10376dc:	18184942 	.word	0x18184942
 10376e0:	25646008 	.word	0x25646008
 10376e4:	f88d2020 	.word	0xf88d2020
 10376e8:	f04f0000 	.word	0xf04f0000
 10376ec:	22090800 	.word	0x22090800
 10376f0:	01ccf106 	.word	0x01ccf106
 10376f4:	f7ffa800 	.word	0xf7ffa800
 10376f8:	20a0ff29 	.word	0x20a0ff29
 10376fc:	0000f88d 	.word	0x0000f88d
 1037700:	f0002209 	.word	0xf0002209
 1037704:	2000f873 	.word	0x2000f873
 1037708:	5dc11982 	.word	0x5dc11982
 103770c:	20ccf892 	.word	0x20ccf892
 1037710:	bf144291 	.word	0xbf144291
 1037714:	21002101 	.word	0x21002101
 1037718:	ea411c40 	.word	0xea411c40
 103771c:	28090808 	.word	0x28090808
 1037720:	202ad3f2 	.word	0x202ad3f2
 1037724:	f865f000 	.word	0xf865f000
 1037728:	f000202b 	.word	0xf000202b
 103772c:	20aaf862 	.word	0x20aaf862
 1037730:	0000f88d 	.word	0x0000f88d
 1037734:	f0002202 	.word	0xf0002202
 1037738:	f89df859 	.word	0xf89df859
 103773c:	2804000c 	.word	0x2804000c
 1037740:	2001bf14 	.word	0x2001bf14
 1037744:	78792000 	.word	0x78792000
 1037748:	0008ea40 	.word	0x0008ea40
 103774c:	bf142904 	.word	0xbf142904
 1037750:	21002101 	.word	0x21002101
 1037754:	43081e6d 	.word	0x43081e6d
 1037758:	2d00d005 	.word	0x2d00d005
 103775c:	68a0d1c2 	.word	0x68a0d1c2
 1037760:	0080f040 	.word	0x0080f040
 1037764:	68a0e000 	.word	0x68a0e000
 1037768:	b00860a0 	.word	0xb00860a0
 103776c:	81f0e8bd 	.word	0x81f0e8bd
 1037770:	00000000 	.word	0x00000000
 1037774:	e000e100 	.word	0xe000e100
 1037778:	e000e180 	.word	0xe000e180
 103777c:	e000e280 	.word	0xe000e280
 1037780:	e000ed18 	.word	0xe000ed18
 1037784:	e000e400 	.word	0xe000e400
 1037788:	20100dbc 	.word	0x20100dbc
 103778c:	20100dd0 	.word	0x20100dd0
 1037790:	20100a64 	.word	0x20100a64
 1037794:	20100b00 	.word	0x20100b00
 1037798:	20100db8 	.word	0x20100db8
 103779c:	20100a61 	.word	0x20100a61
 10377a0:	20100d64 	.word	0x20100d64
 10377a4:	000033b8 	.word	0x000033b8
 10377a8:	000033b0 	.word	0x000033b0
 10377ac:	20100dd4 	.word	0x20100dd4
 10377b0:	20100d78 	.word	0x20100d78
 10377b4:	00f0ff79 	.word	0x00f0ff79
 10377b8:	48000030 	.word	0x48000030
 10377bc:	48000100 	.word	0x48000100
 10377c0:	201000dc 	.word	0x201000dc
 10377c4:	20100dc0 	.word	0x20100dc0
 10377c8:	47ae147b 	.word	0x47ae147b
 10377cc:	20100dc4 	.word	0x20100dc4
 10377d0:	00091eb2 	.word	0x00091eb2
 10377d4:	20100dc8 	.word	0x20100dc8
 10377d8:	ffff1f83 	.word	0xffff1f83
 10377dc:	20100dcc 	.word	0x20100dcc
 10377e0:	20100000 	.word	0x20100000
 10377e4:	20100be4 	.word	0x20100be4
 10377e8:	20100be8 	.word	0x20100be8
 10377ec:	a800a903 	.word	0xa800a903
 10377f0:	f88de6b8 	.word	0xf88de6b8
 10377f4:	22010000 	.word	0x22010000
 10377f8:	f88d2004 	.word	0xf88d2004
 10377fc:	f10d0001 	.word	0xf10d0001
 1037800:	a8000101 	.word	0xa8000101
 1037804:	0000e6a2 	.word	0x0000e6a2
 1037808:	04f3f2f1 	.word	0x04f3f2f1
 103780c:	e8e70605 	.word	0xe8e70605
 1037810:	4ff0e92d 	.word	0x4ff0e92d
 1037814:	037cf8df 	.word	0x037cf8df
 1037818:	337cf8df 	.word	0x337cf8df
 103781c:	1098f8d0 	.word	0x1098f8d0
 1037820:	22006019 	.word	0x22006019
 1037824:	109cf8d0 	.word	0x109cf8d0
 1037828:	f04f6059 	.word	0xf04f6059
 103782c:	68c14900 	.word	0x68c14900
 1037830:	0368f8df 	.word	0x0368f8df
 1037834:	f04f6002 	.word	0xf04f6002
 1037838:	f0010a01 	.word	0xf0010a01
 103783c:	2e020603 	.word	0x2e020603
 1037840:	f853d10a 	.word	0xf853d10a
 1037844:	4fd66022 	.word	0x4fd66022
 1037848:	f84319be 	.word	0xf84319be
 103784c:	fa0a6022 	.word	0xfa0a6022
 1037850:	6806f702 	.word	0x6806f702
 1037854:	6006433e 	.word	0x6006433e
 1037858:	f8530889 	.word	0xf8530889
 103785c:	45b16022 	.word	0x45b16022
 1037860:	f853bfb8 	.word	0xf853bfb8
 1037864:	1c529022 	.word	0x1c529022
 1037868:	d3e62a02 	.word	0xd3e62a02
 103786c:	48ce49cd 	.word	0x48ce49cd
 1037870:	4fcf4ece 	.word	0x4fcf4ece
 1037874:	e33cf8df 	.word	0xe33cf8df
 1037878:	42494449 	.word	0x42494449
 103787c:	22006181 	.word	0x22006181
 1037880:	603048cd 	.word	0x603048cd
 1037884:	46946038 	.word	0x46946038
 1037888:	0b87f04f 	.word	0x0b87f04f
 103788c:	002cf853 	.word	0x002cf853
 1037890:	0009eba0 	.word	0x0009eba0
 1037894:	002cf843 	.word	0x002cf843
 1037898:	6150f244 	.word	0x6150f244
 103789c:	002cf853 	.word	0x002cf853
 10378a0:	0100fb81 	.word	0x0100fb81
 10378a4:	4080f110 	.word	0x4080f110
 10378a8:	0100f141 	.word	0x0100f141
 10378ac:	ea400fc0 	.word	0xea400fc0
 10378b0:	f8430041 	.word	0xf8430041
 10378b4:	f06f002c 	.word	0xf06f002c
 10378b8:	f8530186 	.word	0xf8530186
 10378bc:	f853002c 	.word	0xf853002c
 10378c0:	fb90502c 	.word	0xfb90502c
 10378c4:	10a0f4f1 	.word	0x10a0f4f1
 10378c8:	0140f3c4 	.word	0x0140f3c4
 10378cc:	0801f004 	.word	0x0801f004
 10378d0:	5404fb0b 	.word	0x5404fb0b
 10378d4:	402cf843 	.word	0x402cf843
 10378d8:	f40cfa0a 	.word	0xf40cfa0a
 10378dc:	502cf853 	.word	0x502cf853
 10378e0:	6835b985 	.word	0x6835b985
 10378e4:	402543e4 	.word	0x402543e4
 10378e8:	f1086035 	.word	0xf1086035
 10378ec:	683d0801 	.word	0x683d0801
 10378f0:	603c402c 	.word	0x603c402c
 10378f4:	4cb12500 	.word	0x4cb12500
 10378f8:	401cf82e 	.word	0x401cf82e
 10378fc:	f8244cb0 	.word	0xf8244cb0
 1037900:	e018501c 	.word	0xe018501c
 1037904:	43256835 	.word	0x43256835
 1037908:	683d6035 	.word	0x683d6035
 103790c:	603c432c 	.word	0x603c432c
 1037910:	f8534dac 	.word	0xf8534dac
 1037914:	1c64402c 	.word	0x1c64402c
 1037918:	f8354264 	.word	0xf8354264
 103791c:	4daa4014 	.word	0x4daa4014
 1037920:	401cf82e 	.word	0x401cf82e
 1037924:	402cf853 	.word	0x402cf853
 1037928:	42641c64 	.word	0x42641c64
 103792c:	4014f835 	.word	0x4014f835
 1037930:	f8254da3 	.word	0xf8254da3
 1037934:	008c401c 	.word	0x008c401c
 1037938:	04c0eb04 	.word	0x04c0eb04
 103793c:	44444da3 	.word	0x44444da3
 1037940:	4005f80c 	.word	0x4005f80c
 1037944:	bf3c2806 	.word	0xbf3c2806
 1037948:	f1b82902 	.word	0xf1b82902
 103794c:	d3010f03 	.word	0xd3010f03
 1037950:	0210f042 	.word	0x0210f042
 1037954:	0c01f10c 	.word	0x0c01f10c
 1037958:	0f02f1bc 	.word	0x0f02f1bc
 103795c:	b2d0d396 	.word	0xb2d0d396
 1037960:	8ff0e8bd 	.word	0x8ff0e8bd
 1037964:	488bb5f0 	.word	0x488bb5f0
 1037968:	b0834a99 	.word	0xb0834a99
 103796c:	6b806b81 	.word	0x6b806b81
 1037970:	0101fba0 	.word	0x0101fba0
 1037974:	ea400d00 	.word	0xea400d00
 1037978:	0d093001 	.word	0x0d093001
 103797c:	0102e9c2 	.word	0x0102e9c2
 1037980:	8f4ff3bf 	.word	0x8f4ff3bf
 1037984:	49944893 	.word	0x49944893
 1037988:	6700e9d0 	.word	0x6700e9d0
 103798c:	4500e9d1 	.word	0x4500e9d1
 1037990:	41bd1ba4 	.word	0x41bd1ba4
 1037994:	4500e9cd 	.word	0x4500e9cd
 1037998:	4500e9d1 	.word	0x4500e9d1
 103799c:	4500e9c0 	.word	0x4500e9c0
 10379a0:	6800488e 	.word	0x6800488e
 10379a4:	6702e9d2 	.word	0x6702e9d2
 10379a8:	01c7f241 	.word	0x01c7f241
 10379ac:	fba04348 	.word	0xfba04348
 10379b0:	fb004506 	.word	0xfb004506
 10379b4:	0b245507 	.word	0x0b245507
 10379b8:	5405ea44 	.word	0x5405ea44
 10379bc:	0b2d2100 	.word	0x0b2d2100
 10379c0:	0100e9c2 	.word	0x0100e9c2
 10379c4:	4502e9c2 	.word	0x4502e9c2
 10379c8:	2300e9dd 	.word	0x2300e9dd
 10379cc:	49762000 	.word	0x49762000
 10379d0:	d80742ab 	.word	0xd80742ab
 10379d4:	42a2bf28 	.word	0x42a2bf28
 10379d8:	688ad204 	.word	0x688ad204
 10379dc:	f4422001 	.word	0xf4422001
 10379e0:	e0023280 	.word	0xe0023280
 10379e4:	f422688a 	.word	0xf422688a
 10379e8:	608a3280 	.word	0x608a3280
 10379ec:	6008497c 	.word	0x6008497c
 10379f0:	e92dbdf7 	.word	0xe92dbdf7
 10379f4:	468643f0 	.word	0x468643f0
 10379f8:	f3ceb085 	.word	0xf3ceb085
 10379fc:	f3ce7301 	.word	0xf3ce7301
 1037a00:	f3bf4007 	.word	0xf3bf4007
 1037a04:	4e748f4f 	.word	0x4e748f4f
 1037a08:	2801b180 	.word	0x2801b180
 1037a0c:	3690bf08 	.word	0x3690bf08
 1037a10:	2802d00d 	.word	0x2802d00d
 1037a14:	36c0bf08 	.word	0x36c0bf08
 1037a18:	2803d009 	.word	0x2803d009
 1037a1c:	36d8bf0c 	.word	0x36d8bf0c
 1037a20:	d0042804 	.word	0xd0042804
 1037a24:	bf082805 	.word	0xbf082805
 1037a28:	d0003628 	.word	0xd0003628
 1037a2c:	e9d63678 	.word	0xe9d63678
 1037a30:	20b84500 	.word	0x20b84500
 1037a34:	f201fb00 	.word	0xf201fb00
 1037a38:	c1a8f8df 	.word	0xc1a8f8df
 1037a3c:	060ceb02 	.word	0x060ceb02
 1037a40:	0100e9d6 	.word	0x0100e9d6
 1037a44:	eb651a26 	.word	0xeb651a26
 1037a48:	e9cd0801 	.word	0xe9cd0801
 1037a4c:	eb026800 	.word	0xeb026800
 1037a50:	e9c0000c 	.word	0xe9c0000c
 1037a54:	f3bf4500 	.word	0xf3bf4500
 1037a58:	20008f4f 	.word	0x20008f4f
 1037a5c:	d1092b01 	.word	0xd1092b01
 1037a60:	4500e9dd 	.word	0x4500e9dd
 1037a64:	e9dd2d00 	.word	0xe9dd2d00
 1037a68:	da154500 	.word	0xda154500
 1037a6c:	eb654264 	.word	0xeb654264
 1037a70:	e0110545 	.word	0xe0110545
 1037a74:	d1042b02 	.word	0xd1042b02
 1037a78:	4500e9dd 	.word	0x4500e9dd
 1037a7c:	db062d00 	.word	0xdb062d00
 1037a80:	2b03e008 	.word	0x2b03e008
 1037a84:	e9ddd10a 	.word	0xe9ddd10a
 1037a88:	2d004500 	.word	0x2d004500
 1037a8c:	e9cddb02 	.word	0xe9cddb02
 1037a90:	e0030000 	.word	0xe0030000
 1037a94:	4500e9dd 	.word	0x4500e9dd
 1037a98:	4500e9cd 	.word	0x4500e9cd
 1037a9c:	8f4ff3bf 	.word	0x8f4ff3bf
 1037aa0:	6e1d4b3c 	.word	0x6e1d4b3c
 1037aa4:	e9dd9502 	.word	0xe9dd9502
 1037aa8:	09366100 	.word	0x09366100
 1037aac:	ea469c02 	.word	0xea469c02
 1037ab0:	11097601 	.word	0x11097601
 1037ab4:	7906fba4 	.word	0x7906fba4
 1037ab8:	9901fb04 	.word	0x9901fb04
 1037abc:	ea440c3c 	.word	0xea440c3c
 1037ac0:	ea4f4409 	.word	0xea4f4409
 1037ac4:	e9cd4529 	.word	0xe9cd4529
 1037ac8:	f3bf4500 	.word	0xf3bf4500
 1037acc:	f40e8f4f 	.word	0xf40e8f4f
 1037ad0:	f5b4047f 	.word	0xf5b4047f
 1037ad4:	bf162f80 	.word	0xbf162f80
 1037ad8:	2fa0f5b4 	.word	0x2fa0f5b4
 1037adc:	6e5d6e1d 	.word	0x6e5d6e1d
 1037ae0:	f3bf9502 	.word	0xf3bf9502
 1037ae4:	e9dd8f4f 	.word	0xe9dd8f4f
 1037ae8:	9c026100 	.word	0x9c026100
 1037aec:	7906fba4 	.word	0x7906fba4
 1037af0:	9901fb04 	.word	0x9901fb04
 1037af4:	ea440abc 	.word	0xea440abc
 1037af8:	ea4f5489 	.word	0xea4f5489
 1037afc:	e9cd25a9 	.word	0xe9cd25a9
 1037b00:	f3bf4500 	.word	0xf3bf4500
 1037b04:	4c368f4f 	.word	0x4c368f4f
 1037b08:	b10c6824 	.word	0xb10c6824
 1037b0c:	0000e9cd 	.word	0x0000e9cd
 1037b10:	e9c24462 	.word	0xe9c24462
 1037b14:	68580002 	.word	0x68580002
 1037b18:	bf4405c0 	.word	0xbf4405c0
 1037b1c:	0100e9dd 	.word	0x0100e9dd
 1037b20:	0102e9c2 	.word	0x0102e9c2
 1037b24:	e8bdb005 	.word	0xe8bdb005
 1037b28:	b53083f0 	.word	0xb53083f0
 1037b2c:	492f4b2e 	.word	0x492f4b2e
 1037b30:	680a681b 	.word	0x680a681b
 1037b34:	0022f843 	.word	0x0022f843
 1037b38:	1c406808 	.word	0x1c406808
 1037b3c:	f3bf6008 	.word	0xf3bf6008
 1037b40:	4b2b8f4f 	.word	0x4b2b8f4f
 1037b44:	681c4a18 	.word	0x681c4a18
 1037b48:	f0444304 	.word	0xf0444304
 1037b4c:	60d47480 	.word	0x60d47480
 1037b50:	f8d44c10 	.word	0xf8d44c10
 1037b54:	42a850b8 	.word	0x42a850b8
 1037b58:	f8d4d319 	.word	0xf8d4d319
 1037b5c:	f01550b4 	.word	0xf01550b4
 1037b60:	d1090f03 	.word	0xd1090f03
 1037b64:	7000f040 	.word	0x7000f040
 1037b68:	f8d460d0 	.word	0xf8d460d0
 1037b6c:	004000b4 	.word	0x004000b4
 1037b70:	f8c40840 	.word	0xf8c40840
 1037b74:	bd3000b4 	.word	0xbd3000b4
 1037b78:	00b4f8d4 	.word	0x00b4f8d4
 1037b7c:	0003f000 	.word	0x0003f000
 1037b80:	d1042801 	.word	0xd1042801
 1037b84:	4000f04f 	.word	0x4000f04f
 1037b88:	20006018 	.word	0x20006018
 1037b8c:	bd306008 	.word	0xbd306008
 1037b90:	00000000 	.word	0x00000000
 1037b94:	20100000 	.word	0x20100000
 1037b98:	20100db0 	.word	0x20100db0
 1037b9c:	20100b08 	.word	0x20100b08
 1037ba0:	ffbc921c 	.word	0xffbc921c
 1037ba4:	00f5c28f 	.word	0x00f5c28f
 1037ba8:	201000dc 	.word	0x201000dc
 1037bac:	20100b04 	.word	0x20100b04
 1037bb0:	20100cec 	.word	0x20100cec
 1037bb4:	20100aa0 	.word	0x20100aa0
 1037bb8:	100000ff 	.word	0x100000ff
 1037bbc:	ffff8000 	.word	0xffff8000
 1037bc0:	20100aa4 	.word	0x20100aa4
 1037bc4:	00002f24 	.word	0x00002f24
 1037bc8:	00003030 	.word	0x00003030
 1037bcc:	20100a66 	.word	0x20100a66
 1037bd0:	20100da0 	.word	0x20100da0
 1037bd4:	20100aa8 	.word	0x20100aa8
 1037bd8:	20100658 	.word	0x20100658
 1037bdc:	20100bb4 	.word	0x20100bb4
 1037be0:	20100bb8 	.word	0x20100bb8
 1037be4:	20100810 	.word	0x20100810
 1037be8:	20100bf0 	.word	0x20100bf0
 1037bec:	20100bec 	.word	0x20100bec
 1037bf0:	20100bf4 	.word	0x20100bf4
 1037bf4:	4c00f013 	.word	0x4c00f013
 1037bf8:	425bd503 	.word	0x425bd503
 1037bfc:	f1634252 	.word	0xf1634252
 1037c00:	ea9c0300 	.word	0xea9c0300
 1037c04:	f0000c21 	.word	0xf0000c21
 1037c08:	b5108017 	.word	0xb5108017
 1037c0c:	d3034664 	.word	0xd3034664
 1037c10:	42404249 	.word	0x42404249
 1037c14:	0100f161 	.word	0x0100f161
 1037c18:	f80ef000 	.word	0xf80ef000
 1037c1c:	d3040064 	.word	0xd3040064
 1037c20:	42404249 	.word	0x42404249
 1037c24:	0100f161 	.word	0x0100f161
 1037c28:	d5034224 	.word	0xd5034224
 1037c2c:	4252425b 	.word	0x4252425b
 1037c30:	0300f163 	.word	0x0300f163
 1037c34:	0000bd10 	.word	0x0000bd10
 1037c38:	d113421b 	.word	0xd113421b
 1037c3c:	d1364209 	.word	0xd1364209
 1037c40:	4684b12a 	.word	0x4684b12a
 1037c44:	f0f2fbb0 	.word	0xf0f2fbb0
 1037c48:	c210fb02 	.word	0xc210fb02
 1037c4c:	f0004770 	.word	0xf0004770
 1037c50:	d3fcbb85 	.word	0xd3fcbb85
 1037c54:	23002200 	.word	0x23002200
 1037c58:	000b4770 	.word	0x000b4770
 1037c5c:	21000002 	.word	0x21000002
 1037c60:	47702000 	.word	0x47702000
 1037c64:	eb714290 	.word	0xeb714290
 1037c68:	d3f60c03 	.word	0xd3f60c03
 1037c6c:	fab1b570 	.word	0xfab1b570
 1037c70:	fab3f481 	.word	0xfab3f481
 1037c74:	1b2cf583 	.word	0x1b2cf583
 1037c78:	f1c440a3 	.word	0xf1c440a3
 1037c7c:	fa320520 	.word	0xfa320520
 1037c80:	4333f605 	.word	0x4333f605
 1037c84:	f05f40a2 	.word	0xf05f40a2
 1037c88:	40e64600 	.word	0x40e64600
 1037c8c:	085be002 	.word	0x085be002
 1037c90:	0232ea5f 	.word	0x0232ea5f
 1037c94:	eb711a84 	.word	0xeb711a84
 1037c98:	bf240503 	.word	0xbf240503
 1037c9c:	46294620 	.word	0x46294620
 1037ca0:	d3f44176 	.word	0xd3f44176
 1037ca4:	000b0002 	.word	0x000b0002
 1037ca8:	21000030 	.word	0x21000030
 1037cac:	2a01bd70 	.word	0x2a01bd70
 1037cb0:	b570d9cf 	.word	0xb570d9cf
 1037cb4:	d0200c14 	.word	0xd0200c14
 1037cb8:	f481fab1 	.word	0xf481fab1
 1037cbc:	f582fab2 	.word	0xf582fab2
 1037cc0:	0420f1c4 	.word	0x0420f1c4
 1037cc4:	f1b41964 	.word	0xf1b41964
 1037cc8:	d3d60620 	.word	0xd3d60620
 1037ccc:	f05f40b2 	.word	0xf05f40b2
 1037cd0:	40f44400 	.word	0x40f44400
 1037cd4:	e0022500 	.word	0xe0022500
 1037cd8:	ea5f0852 	.word	0xea5f0852
 1037cdc:	1ac60333 	.word	0x1ac60333
 1037ce0:	0e02eb71 	.word	0x0e02eb71
 1037ce4:	4630bf24 	.word	0x4630bf24
 1037ce8:	41644671 	.word	0x41644671
 1037cec:	d3f3416d 	.word	0xd3f3416d
 1037cf0:	000b0002 	.word	0x000b0002
 1037cf4:	00290020 	.word	0x00290020
 1037cf8:	460cbd70 	.word	0x460cbd70
 1037cfc:	f1f2fbb1 	.word	0xf1f2fbb1
 1037d00:	4511fb02 	.word	0x4511fb02
 1037d04:	ea45042d 	.word	0xea45042d
 1037d08:	fbb54510 	.word	0xfbb54510
 1037d0c:	fb02f4f2 	.word	0xfb02f4f2
 1037d10:	b2805514 	.word	0xb2805514
 1037d14:	4505ea40 	.word	0x4505ea40
 1037d18:	f0f2fbb5 	.word	0xf0f2fbb5
 1037d1c:	5210fb02 	.word	0x5210fb02
 1037d20:	4004ea40 	.word	0x4004ea40
 1037d24:	0000bd70 	.word	0x0000bd70
 1037d28:	4ff0e92d 	.word	0x4ff0e92d
 1037d2c:	eb001581 	.word	0xeb001581
 1037d30:	15ca2151 	.word	0x15ca2151
 1037d34:	50c2eba0 	.word	0x50c2eba0
 1037d38:	46a20204 	.word	0x46a20204
 1037d3c:	fbaa17e5 	.word	0xfbaa17e5
 1037d40:	fb0a010a 	.word	0xfb0a010a
 1037d44:	fb051105 	.word	0xfb051105
 1037d48:	004e110a 	.word	0x004e110a
 1037d4c:	fbaa17f7 	.word	0xfbaa17f7
 1037d50:	fb0a0106 	.word	0xfb0a0106
 1037d54:	fb051107 	.word	0xfb051107
 1037d58:	004f1106 	.word	0x004f1106
 1037d5c:	2a00b083 	.word	0x2a00b083
 1037d60:	2200bf48 	.word	0x2200bf48
 1037d64:	f5b2d404 	.word	0xf5b2d404
 1037d68:	bfc87f80 	.word	0xbfc87f80
 1037d6c:	7280f44f 	.word	0x7280f44f
 1037d70:	0084f20f 	.word	0x0084f20f
 1037d74:	0c82eb00 	.word	0x0c82eb00
 1037d78:	f8dc481d 	.word	0xf8dc481d
 1037d7c:	f85cb000 	.word	0xf85cb000
 1037d80:	f85cef04 	.word	0xf85cef04
 1037d84:	4a1b8f04 	.word	0x4a1b8f04
 1037d88:	0107fb80 	.word	0x0107fb80
 1037d8c:	30fff020 	.word	0x30fff020
 1037d90:	0100e9cd 	.word	0x0100e9cd
 1037d94:	0966ea4f 	.word	0x0966ea4f
 1037d98:	010afba2 	.word	0x010afba2
 1037d9c:	1105fb02 	.word	0x1105fb02
 1037da0:	2300e9dd 	.word	0x2300e9dd
 1037da4:	41591810 	.word	0x41591810
 1037da8:	0041eba9 	.word	0x0041eba9
 1037dac:	f000fb5b 	.word	0xf000fb5b
 1037db0:	0267ebc6 	.word	0x0267ebc6
 1037db4:	eba24601 	.word	0xeba24601
 1037db8:	f06f0264 	.word	0xf06f0264
 1037dbc:	20004300 	.word	0x20004300
 1037dc0:	fbc2189a 	.word	0xfbc2189a
 1037dc4:	1bf2010e 	.word	0x1bf2010e
 1037dc8:	eb042000 	.word	0xeb042000
 1037dcc:	fbc20262 	.word	0xfbc20262
 1037dd0:	460b0108 	.word	0x460b0108
 1037dd4:	4c061b39 	.word	0x4c061b39
 1037dd8:	0f04f85c 	.word	0x0f04f85c
 1037ddc:	f104fb51 	.word	0xf104fb51
 1037de0:	00492200 	.word	0x00492200
 1037de4:	2300fbc1 	.word	0x2300fbc1
 1037de8:	f083fa83 	.word	0xf083fa83
 1037dec:	8ffee8bd 	.word	0x8ffee8bd
 1037df0:	15555555 	.word	0x15555555
 1037df4:	2aaaaaaa 	.word	0x2aaaaaaa
 1037df8:	7ff62182 	.word	0x7ff62182
 1037dfc:	7fffffff 	.word	0x7fffffff
 1037e00:	7ff62182 	.word	0x7ff62182
 1037e04:	7fd8878e 	.word	0x7fd8878e
 1037e08:	7fa736b4 	.word	0x7fa736b4
 1037e0c:	7f62368f 	.word	0x7f62368f
 1037e10:	7f0991c4 	.word	0x7f0991c4
 1037e14:	7e9d55fc 	.word	0x7e9d55fc
 1037e18:	7e1d93ea 	.word	0x7e1d93ea
 1037e1c:	7d8a5f40 	.word	0x7d8a5f40
 1037e20:	7ce3ceb2 	.word	0x7ce3ceb2
 1037e24:	7c29fbee 	.word	0x7c29fbee
 1037e28:	7b5d039e 	.word	0x7b5d039e
 1037e2c:	7a7d055b 	.word	0x7a7d055b
 1037e30:	798a23b1 	.word	0x798a23b1
 1037e34:	78848414 	.word	0x78848414
 1037e38:	776c4edb 	.word	0x776c4edb
 1037e3c:	7641af3d 	.word	0x7641af3d
 1037e40:	7504d345 	.word	0x7504d345
 1037e44:	73b5ebd1 	.word	0x73b5ebd1
 1037e48:	72552c85 	.word	0x72552c85
 1037e4c:	70e2cbc6 	.word	0x70e2cbc6
 1037e50:	6f5f02b2 	.word	0x6f5f02b2
 1037e54:	6dca0d14 	.word	0x6dca0d14
 1037e58:	6c242960 	.word	0x6c242960
 1037e5c:	6a6d98a4 	.word	0x6a6d98a4
 1037e60:	68a69e81 	.word	0x68a69e81
 1037e64:	66cf8120 	.word	0x66cf8120
 1037e68:	64e88926 	.word	0x64e88926
 1037e6c:	62f201ac 	.word	0x62f201ac
 1037e70:	60ec3830 	.word	0x60ec3830
 1037e74:	5ed77c8a 	.word	0x5ed77c8a
 1037e78:	5cb420e0 	.word	0x5cb420e0
 1037e7c:	5a82799a 	.word	0x5a82799a
 1037e80:	5842dd54 	.word	0x5842dd54
 1037e84:	55f5a4d2 	.word	0x55f5a4d2
 1037e88:	539b2af0 	.word	0x539b2af0
 1037e8c:	5133cc94 	.word	0x5133cc94
 1037e90:	4ebfe8a5 	.word	0x4ebfe8a5
 1037e94:	4c3fdff4 	.word	0x4c3fdff4
 1037e98:	49b41533 	.word	0x49b41533
 1037e9c:	471cece7 	.word	0x471cece7
 1037ea0:	447acd50 	.word	0x447acd50
 1037ea4:	41ce1e65 	.word	0x41ce1e65
 1037ea8:	3f1749b8 	.word	0x3f1749b8
 1037eac:	3c56ba70 	.word	0x3c56ba70
 1037eb0:	398cdd32 	.word	0x398cdd32
 1037eb4:	36ba2014 	.word	0x36ba2014
 1037eb8:	33def287 	.word	0x33def287
 1037ebc:	30fbc54d 	.word	0x30fbc54d
 1037ec0:	2e110a62 	.word	0x2e110a62
 1037ec4:	2b1f34eb 	.word	0x2b1f34eb
 1037ec8:	2826b928 	.word	0x2826b928
 1037ecc:	25280c5e 	.word	0x25280c5e
 1037ed0:	2223a4c5 	.word	0x2223a4c5
 1037ed4:	1f19f97b 	.word	0x1f19f97b
 1037ed8:	1c0b826a 	.word	0x1c0b826a
 1037edc:	18f8b83c 	.word	0x18f8b83c
 1037ee0:	15e21445 	.word	0x15e21445
 1037ee4:	12c8106f 	.word	0x12c8106f
 1037ee8:	0fab272b 	.word	0x0fab272b
 1037eec:	0c8bd35e 	.word	0x0c8bd35e
 1037ef0:	096a9049 	.word	0x096a9049
 1037ef4:	0647d97c 	.word	0x0647d97c
 1037ef8:	03242abf 	.word	0x03242abf
 1037efc:	00000000 	.word	0x00000000
 1037f00:	fcdbd541 	.word	0xfcdbd541
 1037f04:	f9b82684 	.word	0xf9b82684
 1037f08:	f6956fb7 	.word	0xf6956fb7
 1037f0c:	f3742ca2 	.word	0xf3742ca2
 1037f10:	f054d8d5 	.word	0xf054d8d5
 1037f14:	ed37ef91 	.word	0xed37ef91
 1037f18:	ea1debbb 	.word	0xea1debbb
 1037f1c:	e70747c4 	.word	0xe70747c4
 1037f20:	e3f47d96 	.word	0xe3f47d96
 1037f24:	e0e60685 	.word	0xe0e60685
 1037f28:	dddc5b3b 	.word	0xdddc5b3b
 1037f2c:	dad7f3a2 	.word	0xdad7f3a2
 1037f30:	d7d946d8 	.word	0xd7d946d8
 1037f34:	d4e0cb15 	.word	0xd4e0cb15
 1037f38:	d1eef59e 	.word	0xd1eef59e
 1037f3c:	cf043ab3 	.word	0xcf043ab3
 1037f40:	cc210d79 	.word	0xcc210d79
 1037f44:	c945dfec 	.word	0xc945dfec
 1037f48:	c67322ce 	.word	0xc67322ce
 1037f4c:	c3a94590 	.word	0xc3a94590
 1037f50:	c0e8b648 	.word	0xc0e8b648
 1037f54:	be31e19b 	.word	0xbe31e19b
 1037f58:	bb8532b0 	.word	0xbb8532b0
 1037f5c:	b8e31319 	.word	0xb8e31319
 1037f60:	b64beacd 	.word	0xb64beacd
 1037f64:	b3c0200c 	.word	0xb3c0200c
 1037f68:	b140175b 	.word	0xb140175b
 1037f6c:	aecc336c 	.word	0xaecc336c
 1037f70:	ac64d510 	.word	0xac64d510
 1037f74:	aa0a5b2e 	.word	0xaa0a5b2e
 1037f78:	a7bd22ac 	.word	0xa7bd22ac
 1037f7c:	a57d8666 	.word	0xa57d8666
 1037f80:	a34bdf20 	.word	0xa34bdf20
 1037f84:	a1288376 	.word	0xa1288376
 1037f88:	9f13c7d0 	.word	0x9f13c7d0
 1037f8c:	9d0dfe54 	.word	0x9d0dfe54
 1037f90:	9b1776da 	.word	0x9b1776da
 1037f94:	99307ee0 	.word	0x99307ee0
 1037f98:	9759617f 	.word	0x9759617f
 1037f9c:	9592675c 	.word	0x9592675c
 1037fa0:	93dbd6a0 	.word	0x93dbd6a0
 1037fa4:	9235f2ec 	.word	0x9235f2ec
 1037fa8:	90a0fd4e 	.word	0x90a0fd4e
 1037fac:	8f1d343a 	.word	0x8f1d343a
 1037fb0:	8daad37b 	.word	0x8daad37b
 1037fb4:	8c4a142f 	.word	0x8c4a142f
 1037fb8:	8afb2cbb 	.word	0x8afb2cbb
 1037fbc:	89be50c3 	.word	0x89be50c3
 1037fc0:	8893b125 	.word	0x8893b125
 1037fc4:	877b7bec 	.word	0x877b7bec
 1037fc8:	8675dc4f 	.word	0x8675dc4f
 1037fcc:	8582faa5 	.word	0x8582faa5
 1037fd0:	84a2fc62 	.word	0x84a2fc62
 1037fd4:	83d60412 	.word	0x83d60412
 1037fd8:	831c314e 	.word	0x831c314e
 1037fdc:	8275a0c0 	.word	0x8275a0c0
 1037fe0:	81e26c16 	.word	0x81e26c16
 1037fe4:	8162aa04 	.word	0x8162aa04
 1037fe8:	80f66e3c 	.word	0x80f66e3c
 1037fec:	809dc971 	.word	0x809dc971
 1037ff0:	8058c94c 	.word	0x8058c94c
 1037ff4:	80277872 	.word	0x80277872
 1037ff8:	8009de7e 	.word	0x8009de7e
 1037ffc:	80000000 	.word	0x80000000
 1038000:	8009de7e 	.word	0x8009de7e
 1038004:	80277872 	.word	0x80277872
 1038008:	8058c94c 	.word	0x8058c94c
 103800c:	809dc971 	.word	0x809dc971
 1038010:	80f66e3c 	.word	0x80f66e3c
 1038014:	8162aa04 	.word	0x8162aa04
 1038018:	81e26c16 	.word	0x81e26c16
 103801c:	8275a0c0 	.word	0x8275a0c0
 1038020:	831c314e 	.word	0x831c314e
 1038024:	83d60412 	.word	0x83d60412
 1038028:	84a2fc62 	.word	0x84a2fc62
 103802c:	8582faa5 	.word	0x8582faa5
 1038030:	8675dc4f 	.word	0x8675dc4f
 1038034:	877b7bec 	.word	0x877b7bec
 1038038:	8893b125 	.word	0x8893b125
 103803c:	89be50c3 	.word	0x89be50c3
 1038040:	8afb2cbb 	.word	0x8afb2cbb
 1038044:	8c4a142f 	.word	0x8c4a142f
 1038048:	8daad37b 	.word	0x8daad37b
 103804c:	8f1d343a 	.word	0x8f1d343a
 1038050:	90a0fd4e 	.word	0x90a0fd4e
 1038054:	9235f2ec 	.word	0x9235f2ec
 1038058:	93dbd6a0 	.word	0x93dbd6a0
 103805c:	9592675c 	.word	0x9592675c
 1038060:	9759617f 	.word	0x9759617f
 1038064:	99307ee0 	.word	0x99307ee0
 1038068:	9b1776da 	.word	0x9b1776da
 103806c:	9d0dfe54 	.word	0x9d0dfe54
 1038070:	9f13c7d0 	.word	0x9f13c7d0
 1038074:	a1288376 	.word	0xa1288376
 1038078:	a34bdf20 	.word	0xa34bdf20
 103807c:	a57d8666 	.word	0xa57d8666
 1038080:	a7bd22ac 	.word	0xa7bd22ac
 1038084:	aa0a5b2e 	.word	0xaa0a5b2e
 1038088:	ac64d510 	.word	0xac64d510
 103808c:	aecc336c 	.word	0xaecc336c
 1038090:	b140175b 	.word	0xb140175b
 1038094:	b3c0200c 	.word	0xb3c0200c
 1038098:	b64beacd 	.word	0xb64beacd
 103809c:	b8e31319 	.word	0xb8e31319
 10380a0:	bb8532b0 	.word	0xbb8532b0
 10380a4:	be31e19b 	.word	0xbe31e19b
 10380a8:	c0e8b648 	.word	0xc0e8b648
 10380ac:	c3a94590 	.word	0xc3a94590
 10380b0:	c67322ce 	.word	0xc67322ce
 10380b4:	c945dfec 	.word	0xc945dfec
 10380b8:	cc210d79 	.word	0xcc210d79
 10380bc:	cf043ab3 	.word	0xcf043ab3
 10380c0:	d1eef59e 	.word	0xd1eef59e
 10380c4:	d4e0cb15 	.word	0xd4e0cb15
 10380c8:	d7d946d8 	.word	0xd7d946d8
 10380cc:	dad7f3a2 	.word	0xdad7f3a2
 10380d0:	dddc5b3b 	.word	0xdddc5b3b
 10380d4:	e0e60685 	.word	0xe0e60685
 10380d8:	e3f47d96 	.word	0xe3f47d96
 10380dc:	e70747c4 	.word	0xe70747c4
 10380e0:	ea1debbb 	.word	0xea1debbb
 10380e4:	ed37ef91 	.word	0xed37ef91
 10380e8:	f054d8d5 	.word	0xf054d8d5
 10380ec:	f3742ca2 	.word	0xf3742ca2
 10380f0:	f6956fb7 	.word	0xf6956fb7
 10380f4:	f9b82684 	.word	0xf9b82684
 10380f8:	fcdbd541 	.word	0xfcdbd541
 10380fc:	00000000 	.word	0x00000000
 1038100:	03242abf 	.word	0x03242abf
 1038104:	0647d97c 	.word	0x0647d97c
 1038108:	096a9049 	.word	0x096a9049
 103810c:	0c8bd35e 	.word	0x0c8bd35e
 1038110:	0fab272b 	.word	0x0fab272b
 1038114:	12c8106f 	.word	0x12c8106f
 1038118:	15e21445 	.word	0x15e21445
 103811c:	18f8b83c 	.word	0x18f8b83c
 1038120:	1c0b826a 	.word	0x1c0b826a
 1038124:	1f19f97b 	.word	0x1f19f97b
 1038128:	2223a4c5 	.word	0x2223a4c5
 103812c:	25280c5e 	.word	0x25280c5e
 1038130:	2826b928 	.word	0x2826b928
 1038134:	2b1f34eb 	.word	0x2b1f34eb
 1038138:	2e110a62 	.word	0x2e110a62
 103813c:	30fbc54d 	.word	0x30fbc54d
 1038140:	33def287 	.word	0x33def287
 1038144:	36ba2014 	.word	0x36ba2014
 1038148:	398cdd32 	.word	0x398cdd32
 103814c:	3c56ba70 	.word	0x3c56ba70
 1038150:	3f1749b8 	.word	0x3f1749b8
 1038154:	41ce1e65 	.word	0x41ce1e65
 1038158:	447acd50 	.word	0x447acd50
 103815c:	471cece7 	.word	0x471cece7
 1038160:	49b41533 	.word	0x49b41533
 1038164:	4c3fdff4 	.word	0x4c3fdff4
 1038168:	4ebfe8a5 	.word	0x4ebfe8a5
 103816c:	5133cc94 	.word	0x5133cc94
 1038170:	539b2af0 	.word	0x539b2af0
 1038174:	55f5a4d2 	.word	0x55f5a4d2
 1038178:	5842dd54 	.word	0x5842dd54
 103817c:	5a82799a 	.word	0x5a82799a
 1038180:	5cb420e0 	.word	0x5cb420e0
 1038184:	5ed77c8a 	.word	0x5ed77c8a
 1038188:	60ec3830 	.word	0x60ec3830
 103818c:	62f201ac 	.word	0x62f201ac
 1038190:	64e88926 	.word	0x64e88926
 1038194:	66cf8120 	.word	0x66cf8120
 1038198:	68a69e81 	.word	0x68a69e81
 103819c:	6a6d98a4 	.word	0x6a6d98a4
 10381a0:	6c242960 	.word	0x6c242960
 10381a4:	6dca0d14 	.word	0x6dca0d14
 10381a8:	6f5f02b2 	.word	0x6f5f02b2
 10381ac:	70e2cbc6 	.word	0x70e2cbc6
 10381b0:	72552c85 	.word	0x72552c85
 10381b4:	73b5ebd1 	.word	0x73b5ebd1
 10381b8:	7504d345 	.word	0x7504d345
 10381bc:	7641af3d 	.word	0x7641af3d
 10381c0:	776c4edb 	.word	0x776c4edb
 10381c4:	78848414 	.word	0x78848414
 10381c8:	798a23b1 	.word	0x798a23b1
 10381cc:	7a7d055b 	.word	0x7a7d055b
 10381d0:	7b5d039e 	.word	0x7b5d039e
 10381d4:	7c29fbee 	.word	0x7c29fbee
 10381d8:	7ce3ceb2 	.word	0x7ce3ceb2
 10381dc:	7d8a5f40 	.word	0x7d8a5f40
 10381e0:	7e1d93ea 	.word	0x7e1d93ea
 10381e4:	7e9d55fc 	.word	0x7e9d55fc
 10381e8:	7f0991c4 	.word	0x7f0991c4
 10381ec:	7f62368f 	.word	0x7f62368f
 10381f0:	7fa736b4 	.word	0x7fa736b4
 10381f4:	7fd8878e 	.word	0x7fd8878e
 10381f8:	7ff62182 	.word	0x7ff62182
 10381fc:	7fffffff 	.word	0x7fffffff
 1038200:	7ff62182 	.word	0x7ff62182
 1038204:	4b066882 	.word	0x4b066882
 1038208:	401a0209 	.word	0x401a0209
 103820c:	6170f401 	.word	0x6170f401
 1038210:	e0004311 	.word	0xe0004311
 1038214:	f0414011 	.word	0xf0414011
 1038218:	60814125 	.word	0x60814125
 103821c:	00004770 	.word	0x00004770
 1038220:	00fff0ff 	.word	0x00fff0ff
 1038224:	47706001 	.word	0x47706001
 1038228:	bf00b500 	.word	0xbf00b500
 103822c:	46960013 	.word	0x46960013
 1038230:	39104694 	.word	0x39104694
 1038234:	e8a0bf28 	.word	0xe8a0bf28
 1038238:	d8fa500c 	.word	0xd8fa500c
 103823c:	7c41ea5f 	.word	0x7c41ea5f
 1038240:	c00cbf28 	.word	0xc00cbf28
 1038244:	f840bf48 	.word	0xf840bf48
 1038248:	07c92b04 	.word	0x07c92b04
 103824c:	f820bf28 	.word	0xf820bf28
 1038250:	bf482b02 	.word	0xbf482b02
 1038254:	2b01f800 	.word	0x2b01f800
 1038258:	0000bd00 	.word	0x0000bd00
 103825c:	22002300 	.word	0x22002300
 1038260:	b8b4f000 	.word	0xb8b4f000
 1038264:	4604b538 	.word	0x4604b538
 1038268:	f000460d 	.word	0xf000460d
 103826c:	6829f884 	.word	0x6829f884
 1038270:	d0022800 	.word	0xd0022800
 1038274:	d20a2910 	.word	0xd20a2910
 1038278:	2904e004 	.word	0x2904e004
 103827c:	2001d207 	.word	0x2001d207
 1038280:	43c14088 	.word	0x43c14088
 1038284:	e8bd4620 	.word	0xe8bd4620
 1038288:	f0004034 	.word	0xf0004034
 103828c:	bd31b87b 	.word	0xbd31b87b
 1038290:	4604b510 	.word	0x4604b510
 1038294:	f0004620 	.word	0xf0004620
 1038298:	2800f8b9 	.word	0x2800f8b9
 103829c:	210fd0fa 	.word	0x210fd0fa
 10382a0:	f0004620 	.word	0xf0004620
 10382a4:	4620f86f 	.word	0x4620f86f
 10382a8:	4010e8bd 	.word	0x4010e8bd
 10382ac:	b858f000 	.word	0xb858f000
 10382b0:	41f0e92d 	.word	0x41f0e92d
 10382b4:	460d4680 	.word	0x460d4680
 10382b8:	27004616 	.word	0x27004616
 10382bc:	5d79e005 	.word	0x5d79e005
 10382c0:	f7ff4640 	.word	0xf7ff4640
 10382c4:	1c7fffcb 	.word	0x1c7fffcb
 10382c8:	b16e1e76 	.word	0xb16e1e76
 10382cc:	2498f643 	.word	0x2498f643
 10382d0:	f0004640 	.word	0xf0004640
 10382d4:	2800f8a2 	.word	0x2800f8a2
 10382d8:	4620d1f1 	.word	0x4620d1f1
 10382dc:	28001e44 	.word	0x28001e44
 10382e0:	f06fd1f6 	.word	0xf06fd1f6
 10382e4:	e0000002 	.word	0xe0000002
 10382e8:	e8bd2000 	.word	0xe8bd2000
 10382ec:	e92d81f0 	.word	0xe92d81f0
 10382f0:	468043f8 	.word	0x468043f8
 10382f4:	4614460d 	.word	0x4614460d
 10382f8:	f6432700 	.word	0xf6432700
 10382fc:	e00d2998 	.word	0xe00d2998
 1038300:	a9002200 	.word	0xa9002200
 1038304:	f0004640 	.word	0xf0004640
 1038308:	f8bdf848 	.word	0xf8bdf848
 103830c:	f88d0000 	.word	0xf88d0000
 1038310:	1e640002 	.word	0x1e640002
 1038314:	0002f8bd 	.word	0x0002f8bd
 1038318:	1c7f5578 	.word	0x1c7f5578
 103831c:	464eb1d4 	.word	0x464eb1d4
 1038320:	f0004640 	.word	0xf0004640
 1038324:	b920f87a 	.word	0xb920f87a
 1038328:	1e464630 	.word	0x1e464630
 103832c:	d1f72800 	.word	0xd1f72800
 1038330:	21ffe00d 	.word	0x21ffe00d
 1038334:	f7ff4640 	.word	0xf7ff4640
 1038338:	464eff91 	.word	0x464eff91
 103833c:	f0004640 	.word	0xf0004640
 1038340:	2800f873 	.word	0x2800f873
 1038344:	4630d1dc 	.word	0x4630d1dc
 1038348:	28001e46 	.word	0x28001e46
 103834c:	f06fd1f6 	.word	0xf06fd1f6
 1038350:	e0000002 	.word	0xe0000002
 1038354:	e8bd2000 	.word	0xe8bd2000
 1038358:	000083f2 	.word	0x000083f2
 103835c:	00004770 	.word	0x00004770
 1038360:	7180f04f 	.word	0x7180f04f
 1038364:	47706001 	.word	0x47706001
 1038368:	07806840 	.word	0x07806840
 103836c:	2001d501 	.word	0x2001d501
 1038370:	20004770 	.word	0x20004770
 1038374:	68404770 	.word	0x68404770
 1038378:	d5010740 	.word	0xd5010740
 103837c:	47702001 	.word	0x47702001
 1038380:	47702000 	.word	0x47702000
 1038384:	f4226842 	.word	0xf4226842
 1038388:	60422270 	.word	0x60422270
 103838c:	68420409 	.word	0x68420409
 1038390:	2170f401 	.word	0x2170f401
 1038394:	60414311 	.word	0x60414311
 1038398:	b5704770 	.word	0xb5704770
 103839c:	4615460c 	.word	0x4615460c
 10383a0:	2198f643 	.word	0x2198f643
 10383a4:	07d26902 	.word	0x07d26902
 10383a8:	460ad405 	.word	0x460ad405
 10383ac:	2a001e51 	.word	0x2a001e51
 10383b0:	2001d1f8 	.word	0x2001d1f8
 10383b4:	6886bd70 	.word	0x6886bd70
 10383b8:	ffd6f7ff 	.word	0xffd6f7ff
 10383bc:	0c30b118 	.word	0x0c30b118
 10383c0:	000ff000 	.word	0x000ff000
 10383c4:	80267028 	.word	0x80267028
 10383c8:	bd702000 	.word	0xbd702000
 10383cc:	4604b5f8 	.word	0x4604b5f8
 10383d0:	4617460e 	.word	0x4617460e
 10383d4:	f643461d 	.word	0xf643461d
 10383d8:	69212098 	.word	0x69212098
 10383dc:	d4050789 	.word	0xd4050789
 10383e0:	1e484601 	.word	0x1e484601
 10383e4:	d1f82900 	.word	0xd1f82900
 10383e8:	bdf22001 	.word	0xbdf22001
 10383ec:	f7ff4620 	.word	0xf7ff4620
 10383f0:	2800ffbb 	.word	0x2800ffbb
 10383f4:	0438bf1f 	.word	0x0438bf1f
 10383f8:	2070f400 	.word	0x2070f400
 10383fc:	2d004306 	.word	0x2d004306
 1038400:	f046bf18 	.word	0xf046bf18
 1038404:	60e67680 	.word	0x60e67680
 1038408:	bdf22000 	.word	0xbdf22000
 103840c:	05806900 	.word	0x05806900
 1038410:	2001d501 	.word	0x2001d501
 1038414:	20004770 	.word	0x20004770
 1038418:	69004770 	.word	0x69004770
 103841c:	d5010780 	.word	0xd5010780
 1038420:	47702001 	.word	0x47702001
 1038424:	47702000 	.word	0x47702000
 1038428:	f2406900 	.word	0xf2406900
 103842c:	40082101 	.word	0x40082101
 1038430:	d1014288 	.word	0xd1014288
 1038434:	47702001 	.word	0x47702001
 1038438:	47702000 	.word	0x47702000
 103843c:	47706181 	.word	0x47706181
 1038440:	47dca7c1 	.word	0x47dca7c1
 1038444:	e825f754 	.word	0xe825f754
 1038448:	f0029f16 	.word	0xf0029f16
 103844c:	41df1ea3 	.word	0x41df1ea3
 1038450:	c4df8fb0 	.word	0xc4df8fb0
 1038454:	14203b6f 	.word	0x14203b6f
 1038458:	c80d7b8f 	.word	0xc80d7b8f
 103845c:	12d16e34 	.word	0x12d16e34
 1038460:	80007c8e 	.word	0x80007c8e
 1038464:	00b290dc 	.word	0x00b290dc
 1038468:	7f54dd12 	.word	0x7f54dd12
 103846c:	0d10981d 	.word	0x0d10981d
 1038470:	80b83ea2 	.word	0x80b83ea2
 1038474:	0d8df910 	.word	0x0d8df910
 1038478:	442e270f 	.word	0x442e270f
 103847c:	48721598 	.word	0x48721598
 1038480:	0443ee89 	.word	0x0443ee89
 1038484:	e0000000 	.word	0xe0000000
 1038488:	e0000000 	.word	0xe0000000
 103848c:	07a4d998 	.word	0x07a4d998
 1038490:	3c35d933 	.word	0x3c35d933
 1038494:	1ccf1491 	.word	0x1ccf1491
 1038498:	658a5305 	.word	0x658a5305
 103849c:	0c5fb701 	.word	0x0c5fb701
 10384a0:	e7829e7f 	.word	0xe7829e7f
 10384a4:	0c5fb701 	.word	0x0c5fb701
 10384a8:	81d5076c 	.word	0x81d5076c
 10384ac:	3f098b9a 	.word	0x3f098b9a
 10384b0:	317edc07 	.word	0x317edc07
 10384b4:	9d22cf5f 	.word	0x9d22cf5f
 10384b8:	317edc07 	.word	0x317edc07
 10384bc:	80c45c36 	.word	0x80c45c36
 10384c0:	3f7b8be0 	.word	0x3f7b8be0
 10384c4:	17c8221f 	.word	0x17c8221f
 10384c8:	d1457de3 	.word	0xd1457de3
 10384cc:	17c8221f 	.word	0x17c8221f
 10384d0:	83bb2c28 	.word	0x83bb2c28
 10384d4:	3d030b9a 	.word	0x3d030b9a
 10384d8:	17c8221f 	.word	0x17c8221f
 10384dc:	d078fbfd 	.word	0xd078fbfd
 10384e0:	17c8221f 	.word	0x17c8221f
 10384e4:	8224beba 	.word	0x8224beba
 10384e8:	3e241670 	.word	0x3e241670
 10384ec:	0106c79e 	.word	0x0106c79e
 10384f0:	00000000 	.word	0x00000000
 10384f4:	fef93862 	.word	0xfef93862
 10384f8:	e0ffaa51 	.word	0xe0ffaa51
 10384fc:	0f1d817f 	.word	0x0f1d817f
 1038500:	f54ce116 	.word	0xf54ce116
 1038504:	db8c82e3 	.word	0xdb8c82e3
 1038508:	bef4de9b 	.word	0xbef4de9b
 103850c:	a7a17a17 	.word	0xa7a17a17
 1038510:	978af8af 	.word	0x978af8af
 1038514:	8d6cffc5 	.word	0x8d6cffc5
 1038518:	8751fca7 	.word	0x8751fca7
 103851c:	8397cdb2 	.word	0x8397cdb2
 1038520:	8113f0e8 	.word	0x8113f0e8
 1038524:	7d857ec1 	.word	0x7d857ec1
 1038528:	7b147c4c 	.word	0x7b147c4c
 103852c:	78ac79df 	.word	0x78ac79df
 1038530:	764c777b 	.word	0x764c777b
 1038534:	73f67520 	.word	0x73f67520
 1038538:	71a672cd 	.word	0x71a672cd
 103853c:	6f5f7082 	.word	0x6f5f7082
 1038540:	6d206e3f 	.word	0x6d206e3f
 1038544:	6ae96c04 	.word	0x6ae96c04
 1038548:	68b869d0 	.word	0x68b869d0
 103854c:	669067a4 	.word	0x669067a4
 1038550:	646e657e 	.word	0x646e657e
 1038554:	62536360 	.word	0x62536360
 1038558:	603f6148 	.word	0x603f6148
 103855c:	5e325f38 	.word	0x5e325f38
 1038560:	5c2a5d2d 	.word	0x5c2a5d2d
 1038564:	5a2a5b29 	.word	0x5a2a5b29
 1038568:	582f592b 	.word	0x582f592b
 103856c:	563a5734 	.word	0x563a5734
 1038570:	544b5542 	.word	0x544b5542
 1038574:	52615356 	.word	0x52615356
 1038578:	507e516f 	.word	0x507e516f
 103857c:	4e9f4f8e 	.word	0x4e9f4f8e
 1038580:	4cc64db2 	.word	0x4cc64db2
 1038584:	4af24bdb 	.word	0x4af24bdb
 1038588:	49224a09 	.word	0x49224a09
 103858c:	4757483c 	.word	0x4757483c
 1038590:	45914673 	.word	0x45914673
 1038594:	43cf44af 	.word	0x43cf44af
 1038598:	421242f0 	.word	0x421242f0
 103859c:	40594135 	.word	0x40594135
 10385a0:	3ea43f7e 	.word	0x3ea43f7e
 10385a4:	3cf33dcb 	.word	0x3cf33dcb
 10385a8:	3b463c1c 	.word	0x3b463c1c
 10385ac:	399c3a71 	.word	0x399c3a71
 10385b0:	37f638c8 	.word	0x37f638c8
 10385b4:	36533724 	.word	0x36533724
 10385b8:	34b33582 	.word	0x34b33582
 10385bc:	331633e4 	.word	0x331633e4
 10385c0:	317c3249 	.word	0x317c3249
 10385c4:	2fe530b1 	.word	0x2fe530b1
 10385c8:	2e502f1a 	.word	0x2e502f1a
 10385cc:	2cbe2d87 	.word	0x2cbe2d87
 10385d0:	2b2e2bf6 	.word	0x2b2e2bf6
 10385d4:	299f2a66 	.word	0x299f2a66
 10385d8:	281328d9 	.word	0x281328d9
 10385dc:	2687274d 	.word	0x2687274d
 10385e0:	24fd25c2 	.word	0x24fd25c2
 10385e4:	23742438 	.word	0x23742438
 10385e8:	21eb22af 	.word	0x21eb22af
 10385ec:	20622127 	.word	0x20622127
 10385f0:	1eda1f9e 	.word	0x1eda1f9e
 10385f4:	1d511e15 	.word	0x1d511e15
 10385f8:	1bc61c8b 	.word	0x1bc61c8b
 10385fc:	1a3a1b00 	.word	0x1a3a1b00
 1038600:	18ab1973 	.word	0x18ab1973
 1038604:	171817e2 	.word	0x171817e2
 1038608:	1581164d 	.word	0x1581164d
 103860c:	13e414b4 	.word	0x13e414b4
 1038610:	12401313 	.word	0x12401313
 1038614:	1091116a 	.word	0x1091116a
 1038618:	0ed50fb5 	.word	0x0ed50fb5
 103861c:	0d060df0 	.word	0x0d060df0
 1038620:	0b1c0c15 	.word	0x0b1c0c15
 1038624:	09090a19 	.word	0x09090a19
 1038628:	06ad07e7 	.word	0x06ad07e7
 103862c:	0399054a 	.word	0x0399054a
 1038630:	ffaeffd7 	.word	0xffaeffd7
 1038634:	ff5dff85 	.word	0xff5dff85
 1038638:	ff0dff35 	.word	0xff0dff35
 103863c:	febefee5 	.word	0xfebefee5
 1038640:	fe70fe97 	.word	0xfe70fe97
 1038644:	fe24fe4a 	.word	0xfe24fe4a
 1038648:	fdd9fdfe 	.word	0xfdd9fdfe
 103864c:	fd8ffdb4 	.word	0xfd8ffdb4
 1038650:	fd46fd6a 	.word	0xfd46fd6a
 1038654:	fcfffd22 	.word	0xfcfffd22
 1038658:	fcb8fcdb 	.word	0xfcb8fcdb
 103865c:	fc73fc95 	.word	0xfc73fc95
 1038660:	fc2ffc51 	.word	0xfc2ffc51
 1038664:	fbedfc0e 	.word	0xfbedfc0e
 1038668:	fbabfbcc 	.word	0xfbabfbcc
 103866c:	fb6bfb8b 	.word	0xfb6bfb8b
 1038670:	fb2cfb4b 	.word	0xfb2cfb4b
 1038674:	faeefb0d 	.word	0xfaeefb0d
 1038678:	fab2fad0 	.word	0xfab2fad0
 103867c:	fa77fa94 	.word	0xfa77fa94
 1038680:	fa3dfa5a 	.word	0xfa3dfa5a
 1038684:	fa05fa21 	.word	0xfa05fa21
 1038688:	f9cef9e9 	.word	0xf9cef9e9
 103868c:	f998f9b3 	.word	0xf998f9b3
 1038690:	f964f97e 	.word	0xf964f97e
 1038694:	f931f94a 	.word	0xf931f94a
 1038698:	f8fff918 	.word	0xf8fff918
 103869c:	f8cff8e7 	.word	0xf8cff8e7
 10386a0:	f8a1f8b8 	.word	0xf8a1f8b8
 10386a4:	f874f88a 	.word	0xf874f88a
 10386a8:	f848f85e 	.word	0xf848f85e
 10386ac:	f81ef833 	.word	0xf81ef833
 10386b0:	f7f6f80a 	.word	0xf7f6f80a
 10386b4:	f7d0f7e3 	.word	0xf7d0f7e3
 10386b8:	f7abf7bd 	.word	0xf7abf7bd
 10386bc:	f788f799 	.word	0xf788f799
 10386c0:	f767f777 	.word	0xf767f777
 10386c4:	f748f757 	.word	0xf748f757
 10386c8:	f72af739 	.word	0xf72af739
 10386cc:	f70ff71c 	.word	0xf70ff71c
 10386d0:	f6f6f702 	.word	0xf6f6f702
 10386d4:	f6dff6ea 	.word	0xf6dff6ea
 10386d8:	f6caf6d5 	.word	0xf6caf6d5
 10386dc:	f6b8f6c1 	.word	0xf6b8f6c1
 10386e0:	f6a9f6b1 	.word	0xf6a9f6b1
 10386e4:	f69cf6a2 	.word	0xf69cf6a2
 10386e8:	f693f697 	.word	0xf693f697
 10386ec:	f68cf68f 	.word	0xf68cf68f
 10386f0:	f689f68a 	.word	0xf689f68a
 10386f4:	f689f689 	.word	0xf689f689
 10386f8:	f68ef68b 	.word	0xf68ef68b
 10386fc:	f696f691 	.word	0xf696f691
 1038700:	f6a3f69c 	.word	0xf6a3f69c
 1038704:	f6b5f6ab 	.word	0xf6b5f6ab
 1038708:	f6cdf6c0 	.word	0xf6cdf6c0
 103870c:	f6ebf6db 	.word	0xf6ebf6db
 1038710:	f710f6fd 	.word	0xf710f6fd
 1038714:	f73df726 	.word	0xf73df726
 1038718:	f774f758 	.word	0xf774f758
 103871c:	f7b7f794 	.word	0xf7b7f794
 1038720:	f806f7dc 	.word	0xf806f7dc
 1038724:	f867f835 	.word	0xf867f835
 1038728:	f8def8a0 	.word	0xf8def8a0
 103872c:	f973f924 	.word	0xf973f924
 1038730:	fa35f9cd 	.word	0xfa35f9cd
 1038734:	fb43faaf 	.word	0xfb43faaf
 1038738:	fd0bfc00 	.word	0xfd0bfc00
 103873c:	21014841 	.word	0x21014841
 1038740:	47706001 	.word	0x47706001
 1038744:	2102483f 	.word	0x2102483f
 1038748:	47706001 	.word	0x47706001
 103874c:	2104483d 	.word	0x2104483d
 1038750:	47706001 	.word	0x47706001
 1038754:	2108483b 	.word	0x2108483b
 1038758:	47706001 	.word	0x47706001
 103875c:	6800483a 	.word	0x6800483a
 1038760:	483ab130 	.word	0x483ab130
 1038764:	61012100 	.word	0x61012100
 1038768:	10c8f8c0 	.word	0x10c8f8c0
 103876c:	1180f8c0 	.word	0x1180f8c0
 1038770:	f04f4770 	.word	0xf04f4770
 1038774:	69004090 	.word	0x69004090
 1038778:	d4000680 	.word	0xd4000680
 103877c:	b5384770 	.word	0xb5384770
 1038780:	f04f2120 	.word	0xf04f2120
 1038784:	f7ff4090 	.word	0xf7ff4090
 1038788:	4831fe59 	.word	0x4831fe59
 103878c:	f2406800 	.word	0xf2406800
 1038790:	f0002102 	.word	0xf0002102
 1038794:	492ff871 	.word	0x492ff871
 1038798:	4090f04f 	.word	0x4090f04f
 103879c:	fd78f7ff 	.word	0xfd78f7ff
 10387a0:	4a2e482d 	.word	0x4a2e482d
 10387a4:	f0016801 	.word	0xf0016801
 10387a8:	eb020107 	.word	0xeb020107
 10387ac:	4a2c01c1 	.word	0x4a2c01c1
 10387b0:	f0037893 	.word	0xf0037893
 10387b4:	2b01030f 	.word	0x2b01030f
 10387b8:	4b2ad004 	.word	0x4b2ad004
 10387bc:	f504681c 	.word	0xf504681c
 10387c0:	601c3480 	.word	0x601c3480
 10387c4:	3007f8d2 	.word	0x3007f8d2
 10387c8:	4b27ba1c 	.word	0x4b27ba1c
 10387cc:	0a24681d 	.word	0x0a24681d
 10387d0:	fb540224 	.word	0xfb540224
 10387d4:	00a4f415 	.word	0x00a4f415
 10387d8:	f8d2600c 	.word	0xf8d2600c
 10387dc:	681d400b 	.word	0x681d400b
 10387e0:	0a24ba24 	.word	0x0a24ba24
 10387e4:	fb540224 	.word	0xfb540224
 10387e8:	00a4f415 	.word	0x00a4f415
 10387ec:	f8d2604c 	.word	0xf8d2604c
 10387f0:	68001003 	.word	0x68001003
 10387f4:	0a09ba09 	.word	0x0a09ba09
 10387f8:	f0100209 	.word	0xf0100209
 10387fc:	d0020007 	.word	0xd0020007
 1038800:	d00b2804 	.word	0xd00b2804
 1038804:	6818bd31 	.word	0x6818bd31
 1038808:	f010fb51 	.word	0xf010fb51
 103880c:	00804917 	.word	0x00804917
 1038810:	20206008 	.word	0x20206008
 1038814:	0001f88d 	.word	0x0001f88d
 1038818:	e0092003 	.word	0xe0092003
 103881c:	60014814 	.word	0x60014814
 1038820:	f88d2020 	.word	0xf88d2020
 1038824:	48130001 	.word	0x48130001
 1038828:	00ccf890 	.word	0x00ccf890
 103882c:	00fdf000 	.word	0x00fdf000
 1038830:	0000f88d 	.word	0x0000f88d
 1038834:	a9002201 	.word	0xa9002201
 1038838:	0001f10d 	.word	0x0001f10d
 103883c:	fe86f7fe 	.word	0xfe86f7fe
 1038840:	0000bd31 	.word	0x0000bd31
 1038844:	48008008 	.word	0x48008008
 1038848:	4800801c 	.word	0x4800801c
 103884c:	20100810 	.word	0x20100810
 1038850:	20100db8 	.word	0x20100db8
 1038854:	20100dd0 	.word	0x20100dd0
 1038858:	20100b00 	.word	0x20100b00
 103885c:	20100ac0 	.word	0x20100ac0
 1038860:	20100d78 	.word	0x20100d78
 1038864:	20100d9c 	.word	0x20100d9c
 1038868:	20100b14 	.word	0x20100b14
 103886c:	20100bdc 	.word	0x20100bdc
 1038870:	20100be0 	.word	0x20100be0
 1038874:	20100000 	.word	0x20100000
 1038878:	2202f240 	.word	0x2202f240
 103887c:	62014011 	.word	0x62014011
 1038880:	68814770 	.word	0x68814770
 1038884:	6802e007 	.word	0x6802e007
 1038888:	68536811 	.word	0x68536811
 103888c:	185b1889 	.word	0x185b1889
 1038890:	320860c3 	.word	0x320860c3
 1038894:	68c26002 	.word	0x68c26002
 1038898:	d0f44291 	.word	0xd0f44291
 103889c:	60821c4a 	.word	0x60821c4a
 10388a0:	47707808 	.word	0x47707808
 10388a4:	4dffe92d 	.word	0x4dffe92d
 10388a8:	0108f100 	.word	0x0108f100
 10388ac:	f04f9100 	.word	0xf04f9100
 10388b0:	68010a00 	.word	0x68010a00
 10388b4:	08499a00 	.word	0x08499a00
 10388b8:	01c1eb02 	.word	0x01c1eb02
 10388bc:	46d39101 	.word	0x46d39101
 10388c0:	91022100 	.word	0x91022100
 10388c4:	68019103 	.word	0x68019103
 10388c8:	eb000849 	.word	0xeb000849
 10388cc:	684001c1 	.word	0x684001c1
 10388d0:	0501f000 	.word	0x0501f000
 10388d4:	0408f101 	.word	0x0408f101
 10388d8:	eb040840 	.word	0xeb040840
 10388dc:	e01f06c0 	.word	0xe01f06c0
 10388e0:	f7ffa800 	.word	0xf7ffa800
 10388e4:	b247ffce 	.word	0xb247ffce
 10388e8:	f7ffa800 	.word	0xf7ffa800
 10388ec:	4680ffca 	.word	0x4680ffca
 10388f0:	d10d45da 	.word	0xd10d45da
 10388f4:	bf0842b4 	.word	0xbf0842b4
 10388f8:	f81bf000 	.word	0xf81bf000
 10388fc:	a000f8d4 	.word	0xa000f8d4
 1038900:	44cab105 	.word	0x44cab105
 1038904:	eb006860 	.word	0xeb006860
 1038908:	34080b0a 	.word	0x34080b0a
 103890c:	d0f145da 	.word	0xd0f145da
 1038910:	8b01f80a 	.word	0x8b01f80a
 1038914:	d5092f00 	.word	0xd5092f00
 1038918:	d1e91c7f 	.word	0xd1e91c7f
 103891c:	d1df45da 	.word	0xd1df45da
 1038920:	d1dd42b4 	.word	0xd1dd42b4
 1038924:	b0044630 	.word	0xb0044630
 1038928:	8df0e8bd 	.word	0x8df0e8bd
 103892c:	d5db1e7f 	.word	0xd5db1e7f
 1038930:	2001e7f4 	.word	0x2001e7f4
 1038934:	b800f000 	.word	0xb800f000
 1038938:	20184901 	.word	0x20184901
 103893c:	e7fbbeab 	.word	0xe7fbbeab
 1038940:	00020026 	.word	0x00020026
 1038944:	4907b510 	.word	0x4907b510
 1038948:	31184479 	.word	0x31184479
 103894c:	447c4c06 	.word	0x447c4c06
 1038950:	e0043416 	.word	0xe0043416
 1038954:	1d08680a 	.word	0x1d08680a
 1038958:	47881851 	.word	0x47881851
 103895c:	42a14601 	.word	0x42a14601
 1038960:	bd10d1f8 	.word	0xbd10d1f8
 1038964:	00000008 	.word	0x00000008
 1038968:	00000038 	.word	0x00000038
 103896c:	ffffe7e7 	.word	0xffffe7e7
 1038970:	00000350 	.word	0x00000350
 1038974:	20100000 	.word	0x20100000
 1038978:	000000e8 	.word	0x000000e8
 103897c:	20100cf0 	.word	0x20100cf0
 1038980:	00000000 	.word	0x00000000
 1038984:	ffffff21 	.word	0xffffff21
 1038988:	00000002 	.word	0x00000002
 103898c:	00000002 	.word	0x00000002
 1038990:	0000007a 	.word	0x0000007a
 1038994:	000000fd 	.word	0x000000fd
 1038998:	20100378 	.word	0x20100378
 103899c:	00000978 	.word	0x00000978
 10389a0:	00000040 	.word	0x00000040
 10389a4:	00000080 	.word	0x00000080
 10389a8:	00000100 	.word	0x00000100
 10389ac:	00000200 	.word	0x00000200
 10389b0:	20100d64 	.word	0x20100d64
 10389b4:	0000000e 	.word	0x0000000e
 10389b8:	20100d78 	.word	0x20100d78
 10389bc:	0000000e 	.word	0x0000000e
 10389c0:	47702001 	.word	0x47702001
 10389c4:	e7fee7fe 	.word	0xe7fee7fe
 10389c8:	e7fee7fe 	.word	0xe7fee7fe
 10389cc:	e7fee7fe 	.word	0xe7fee7fe
 10389d0:	e7fee7fe 	.word	0xe7fee7fe
 10389d4:	e7fee7fe 	.word	0xe7fee7fe
 10389d8:	fff2f7ff 	.word	0xfff2f7ff
 10389dc:	d0012800 	.word	0xd0012800
 10389e0:	ffb0f7ff 	.word	0xffb0f7ff
 10389e4:	f7fc2000 	.word	0xf7fc2000
 10389e8:	f000fead 	.word	0xf000fead
 10389ec:	f000f800 	.word	0xf000f800
 10389f0:	0000b801 	.word	0x0000b801
 10389f4:	46384607 	.word	0x46384607
 10389f8:	ff9ef7ff 	.word	0xff9ef7ff
 10389fc:	46c0e7fb 	.word	0x46c0e7fb
 1038a00:	46c046c0 	.word	0x46c046c0
 1038a04:	f7ff46c0 	.word	0xf7ff46c0
 1038a08:	0081ffe7 	.word	0x0081ffe7
 1038a0c:	00810081 	.word	0x00810081
 1038a10:	00810081 	.word	0x00810081
 1038a14:	00810081 	.word	0x00810081
 1038a18:	00810081 	.word	0x00810081
 1038a1c:	00810081 	.word	0x00810081
 1038a20:	00810081 	.word	0x00810081
 1038a24:	00810081 	.word	0x00810081
 1038a28:	fffb00e9 	.word	0xfffb00e9
 1038a2c:	10000005 	.word	0x10000005
 1038a30:	f76100ff 	.word	0xf76100ff
 1038a34:	4bc70300 	.word	0x4bc70300
 1038a38:	00814937 	.word	0x00814937
 1038a3c:	d8190097 	.word	0xd8190097
 1038a40:	ff201014 	.word	0xff201014
 1038a44:	c5000033 	.word	0xc5000033
 1038a48:	c7000033 	.word	0xc7000033
 1038a4c:	c9000033 	.word	0xc9000033
 1038a50:	cb000033 	.word	0xcb000033
 1038a54:	cd000033 	.word	0xcd000033
 1038a58:	0500ee33 	.word	0x0500ee33
 1038a5c:	000033cf 	.word	0x000033cf
 1038a60:	00fa33d1 	.word	0x00fa33d1
 1038a64:	0033d321 	.word	0x0033d321
 1038a68:	0033d500 	.word	0x0033d500
 1038a6c:	0033d700 	.word	0x0033d700
 1038a70:	0033d700 	.word	0x0033d700
 1038a74:	0033d700 	.word	0x0033d700
 1038a78:	0033d700 	.word	0x0033d700
 1038a7c:	0033d700 	.word	0x0033d700
 1038a80:	0033d700 	.word	0x0033d700
 1038a84:	fa33d700 	.word	0xfa33d700
 1038a88:	33d70100 	.word	0x33d70100
 1038a8c:	e10500f6 	.word	0xe10500f6
 1038a90:	e700001b 	.word	0xe700001b
 1038a94:	1d00fa1b 	.word	0x1d00fa1b
 1038a98:	000033d7 	.word	0x000033d7
 1038a9c:	000033d7 	.word	0x000033d7
 1038aa0:	000033d7 	.word	0x000033d7
 1038aa4:	000033d7 	.word	0x000033d7
 1038aa8:	000033d7 	.word	0x000033d7
 1038aac:	000033d7 	.word	0x000033d7
 1038ab0:	000033d7 	.word	0x000033d7
 1038ab4:	00fa33d7 	.word	0x00fa33d7
 1038ab8:	0033d72d 	.word	0x0033d72d
 1038abc:	0033d700 	.word	0x0033d700
 1038ac0:	0033d700 	.word	0x0033d700
 1038ac4:	0033d700 	.word	0x0033d700
 1038ac8:	0033d700 	.word	0x0033d700
 1038acc:	0033d700 	.word	0x0033d700
 1038ad0:	0033d700 	.word	0x0033d700
 1038ad4:	0033d700 	.word	0x0033d700
 1038ad8:	0033d700 	.word	0x0033d700
 1038adc:	0033d700 	.word	0x0033d700
 1038ae0:	0033d700 	.word	0x0033d700
 1038ae4:	fa33d700 	.word	0xfa33d700
 1038ae8:	33d71500 	.word	0x33d71500
 1038aec:	1bed0000 	.word	0x1bed0000
 1038af0:	33d70000 	.word	0x33d70000
 1038af4:	33d70000 	.word	0x33d70000
 1038af8:	31730000 	.word	0x31730000
 1038afc:	315d0000 	.word	0x315d0000
 1038b00:	ff0300fa 	.word	0xff0300fa
 1038b04:	00100000 	.word	0x00100000
	...

01038c00 <core1_image_end_s>:
 1038c00:	732f2e2e 	.word	0x732f2e2e
 1038c04:	412f6372 	.word	0x412f6372
 1038c08:	742f4653 	.word	0x742f4653
 1038c0c:	64726968 	.word	0x64726968
 1038c10:	74726170 	.word	0x74726170
 1038c14:	72662f79 	.word	0x72662f79
 1038c18:	74726565 	.word	0x74726565
 1038c1c:	662f736f 	.word	0x662f736f
 1038c20:	72656572 	.word	0x72656572
 1038c24:	2d736f74 	.word	0x2d736f74
 1038c28:	2e332e37 	.word	0x2e332e37
 1038c2c:	6f732f30 	.word	0x6f732f30
 1038c30:	65637275 	.word	0x65637275
 1038c34:	6575712f 	.word	0x6575712f
 1038c38:	632e6575 	.word	0x632e6575
 1038c3c:	00000000 	.word	0x00000000
 1038c40:	732f2e2e 	.word	0x732f2e2e
 1038c44:	412f6372 	.word	0x412f6372
 1038c48:	742f4653 	.word	0x742f4653
 1038c4c:	64726968 	.word	0x64726968
 1038c50:	74726170 	.word	0x74726170
 1038c54:	72662f79 	.word	0x72662f79
 1038c58:	74726565 	.word	0x74726565
 1038c5c:	662f736f 	.word	0x662f736f
 1038c60:	72656572 	.word	0x72656572
 1038c64:	2d736f74 	.word	0x2d736f74
 1038c68:	2e332e37 	.word	0x2e332e37
 1038c6c:	6f732f30 	.word	0x6f732f30
 1038c70:	65637275 	.word	0x65637275
 1038c74:	7361742f 	.word	0x7361742f
 1038c78:	632e736b 	.word	0x632e736b
 1038c7c:	00000000 	.word	0x00000000
 1038c80:	454c4449 	.word	0x454c4449
 1038c84:	00000000 	.word	0x00000000
 1038c88:	732f2e2e 	.word	0x732f2e2e
 1038c8c:	412f6372 	.word	0x412f6372
 1038c90:	742f4653 	.word	0x742f4653
 1038c94:	64726968 	.word	0x64726968
 1038c98:	74726170 	.word	0x74726170
 1038c9c:	72662f79 	.word	0x72662f79
 1038ca0:	74726565 	.word	0x74726565
 1038ca4:	662f736f 	.word	0x662f736f
 1038ca8:	72656572 	.word	0x72656572
 1038cac:	2d736f74 	.word	0x2d736f74
 1038cb0:	2e332e37 	.word	0x2e332e37
 1038cb4:	6f732f30 	.word	0x6f732f30
 1038cb8:	65637275 	.word	0x65637275
 1038cbc:	6d69742f 	.word	0x6d69742f
 1038cc0:	2e737265 	.word	0x2e737265
 1038cc4:	00000063 	.word	0x00000063
 1038cc8:	20726d54 	.word	0x20726d54
 1038ccc:	00637653 	.word	0x00637653

01038cd0 <atanhi>:
 1038cd0:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
 1038ce0:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?

01038cf0 <atanlo>:
 1038cf0:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
 1038d00:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<
 1038d10:	74727173 00000000                       sqrt....

01038d18 <_global_impure_ptr>:
 1038d18:	200000a8                                ... 

01038d1c <_init>:
 1038d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 1038d1e:	bf00      	nop
 1038d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 1038d22:	bc08      	pop	{r3}
 1038d24:	469e      	mov	lr, r3
 1038d26:	4770      	bx	lr

01038d28 <__init_array_start>:
 1038d28:	01030c71 	.word	0x01030c71

01038d2c <__frame_dummy_init_array_entry>:
 1038d2c:	0101010d                                ....

01038d30 <_fini>:
 1038d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 1038d32:	bf00      	nop
 1038d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 1038d36:	bc08      	pop	{r3}
 1038d38:	469e      	mov	lr, r3
 1038d3a:	4770      	bx	lr

01038d3c <__fini_array_start>:
 1038d3c:	010100e9 	.word	0x010100e9

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
2000000c:	b430      	push	{r4, r5}
2000000e:	b082      	sub	sp, #8
20000010:	9d04      	ldr	r5, [sp, #16]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000012:	b33b      	cbz	r3, 20000064 <efc_perform_read_sequence+0x58>
		return EFC_RC_INVALID;
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
20000014:	6804      	ldr	r4, [r0, #0]

	/* Send the Start Read command */
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
20000016:	b2c9      	uxtb	r1, r1
20000018:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
	p_efc->EEFC_FMR |= (0x1u << 16);
2000001c:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
20000020:	6004      	str	r4, [r0, #0]
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
20000022:	6041      	str	r1, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000024:	6881      	ldr	r1, [r0, #8]
20000026:	9101      	str	r1, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
20000028:	9901      	ldr	r1, [sp, #4]
2000002a:	07c9      	lsls	r1, r1, #31
2000002c:	d4fa      	bmi.n	20000024 <efc_perform_read_sequence+0x18>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
2000002e:	b145      	cbz	r5, 20000042 <efc_perform_read_sequence+0x36>
20000030:	490e      	ldr	r1, [pc, #56]	; (2000006c <efc_perform_read_sequence+0x60>)
20000032:	eb03 0585 	add.w	r5, r3, r5, lsl #2
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
20000036:	f851 4f04 	ldr.w	r4, [r1, #4]!
2000003a:	f843 4b04 	str.w	r4, [r3], #4
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
2000003e:	42ab      	cmp	r3, r5
20000040:	d1f9      	bne.n	20000036 <efc_perform_read_sequence+0x2a>

	/* To stop the read mode */
	p_efc->EEFC_FCR =
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
20000042:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
20000044:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
20000048:	6042      	str	r2, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2000004a:	6883      	ldr	r3, [r0, #8]
2000004c:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
2000004e:	9b01      	ldr	r3, [sp, #4]
20000050:	07db      	lsls	r3, r3, #31
20000052:	d5fa      	bpl.n	2000004a <efc_perform_read_sequence+0x3e>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
20000054:	6803      	ldr	r3, [r0, #0]
20000056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2000005a:	6003      	str	r3, [r0, #0]

	return EFC_RC_OK;
2000005c:	2000      	movs	r0, #0
}
2000005e:	b002      	add	sp, #8
20000060:	bc30      	pop	{r4, r5}
20000062:	4770      	bx	lr
		return EFC_RC_INVALID;
20000064:	2002      	movs	r0, #2
}
20000066:	b002      	add	sp, #8
20000068:	bc30      	pop	{r4, r5}
2000006a:	4770      	bx	lr
2000006c:	00fffffc 	.word	0x00fffffc

20000070 <efc_write_fmr>:
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
	p_efc->EEFC_FMR = ul_fmr;
20000070:	6001      	str	r1, [r0, #0]
20000072:	4770      	bx	lr

20000074 <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
20000074:	b082      	sub	sp, #8
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
20000076:	6041      	str	r1, [r0, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
20000078:	6883      	ldr	r3, [r0, #8]
2000007a:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
2000007c:	9b01      	ldr	r3, [sp, #4]
2000007e:	07db      	lsls	r3, r3, #31
20000080:	d5fa      	bpl.n	20000078 <efc_perform_fcr+0x4>

	return (ul_status & EEFC_ERROR_FLAGS);
20000082:	9801      	ldr	r0, [sp, #4]
}
20000084:	f000 000e 	and.w	r0, r0, #14
20000088:	b002      	add	sp, #8
2000008a:	4770      	bx	lr

2000008c <data_ok.15235>:
2000008c:	0101                                             .

2000008d <g_interrupt_enabled>:
2000008d:	0001 aa00                                        ...

20000090 <uxCriticalNesting>:
20000090:	aaaa aaaa                                   ....

20000094 <xFreeBytesRemaining>:
20000094:	8000 0000                                   ....

20000098 <xNextTaskUnblockTime>:
20000098:	ffff ffff                                   ....

2000009c <__fdlib_version>:
2000009c:	0001 0000                                   ....

200000a0 <_impure_ptr>:
200000a0:	00a8 2000 0000 0000                         ... ....

200000a8 <impure_data>:
200000a8:	0000 0000 0394 2000 03fc 2000 0464 2000     ....... ... d.. 
	...
20000150:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20000160:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

200004d0 <__malloc_av_>:
	...
200004d8:	04d0 2000 04d0 2000 04d8 2000 04d8 2000     ... ... ... ... 
200004e8:	04e0 2000 04e0 2000 04e8 2000 04e8 2000     ... ... ... ... 
200004f8:	04f0 2000 04f0 2000 04f8 2000 04f8 2000     ... ... ... ... 
20000508:	0500 2000 0500 2000 0508 2000 0508 2000     ... ... ... ... 
20000518:	0510 2000 0510 2000 0518 2000 0518 2000     ... ... ... ... 
20000528:	0520 2000 0520 2000 0528 2000 0528 2000      ..  .. (.. (.. 
20000538:	0530 2000 0530 2000 0538 2000 0538 2000     0.. 0.. 8.. 8.. 
20000548:	0540 2000 0540 2000 0548 2000 0548 2000     @.. @.. H.. H.. 
20000558:	0550 2000 0550 2000 0558 2000 0558 2000     P.. P.. X.. X.. 
20000568:	0560 2000 0560 2000 0568 2000 0568 2000     `.. `.. h.. h.. 
20000578:	0570 2000 0570 2000 0578 2000 0578 2000     p.. p.. x.. x.. 
20000588:	0580 2000 0580 2000 0588 2000 0588 2000     ... ... ... ... 
20000598:	0590 2000 0590 2000 0598 2000 0598 2000     ... ... ... ... 
200005a8:	05a0 2000 05a0 2000 05a8 2000 05a8 2000     ... ... ... ... 
200005b8:	05b0 2000 05b0 2000 05b8 2000 05b8 2000     ... ... ... ... 
200005c8:	05c0 2000 05c0 2000 05c8 2000 05c8 2000     ... ... ... ... 
200005d8:	05d0 2000 05d0 2000 05d8 2000 05d8 2000     ... ... ... ... 
200005e8:	05e0 2000 05e0 2000 05e8 2000 05e8 2000     ... ... ... ... 
200005f8:	05f0 2000 05f0 2000 05f8 2000 05f8 2000     ... ... ... ... 
20000608:	0600 2000 0600 2000 0608 2000 0608 2000     ... ... ... ... 
20000618:	0610 2000 0610 2000 0618 2000 0618 2000     ... ... ... ... 
20000628:	0620 2000 0620 2000 0628 2000 0628 2000      ..  .. (.. (.. 
20000638:	0630 2000 0630 2000 0638 2000 0638 2000     0.. 0.. 8.. 8.. 
20000648:	0640 2000 0640 2000 0648 2000 0648 2000     @.. @.. H.. H.. 
20000658:	0650 2000 0650 2000 0658 2000 0658 2000     P.. P.. X.. X.. 
20000668:	0660 2000 0660 2000 0668 2000 0668 2000     `.. `.. h.. h.. 
20000678:	0670 2000 0670 2000 0678 2000 0678 2000     p.. p.. x.. x.. 
20000688:	0680 2000 0680 2000 0688 2000 0688 2000     ... ... ... ... 
20000698:	0690 2000 0690 2000 0698 2000 0698 2000     ... ... ... ... 
200006a8:	06a0 2000 06a0 2000 06a8 2000 06a8 2000     ... ... ... ... 
200006b8:	06b0 2000 06b0 2000 06b8 2000 06b8 2000     ... ... ... ... 
200006c8:	06c0 2000 06c0 2000 06c8 2000 06c8 2000     ... ... ... ... 
200006d8:	06d0 2000 06d0 2000 06d8 2000 06d8 2000     ... ... ... ... 
200006e8:	06e0 2000 06e0 2000 06e8 2000 06e8 2000     ... ... ... ... 
200006f8:	06f0 2000 06f0 2000 06f8 2000 06f8 2000     ... ... ... ... 
20000708:	0700 2000 0700 2000 0708 2000 0708 2000     ... ... ... ... 
20000718:	0710 2000 0710 2000 0718 2000 0718 2000     ... ... ... ... 
20000728:	0720 2000 0720 2000 0728 2000 0728 2000      ..  .. (.. (.. 
20000738:	0730 2000 0730 2000 0738 2000 0738 2000     0.. 0.. 8.. 8.. 
20000748:	0740 2000 0740 2000 0748 2000 0748 2000     @.. @.. H.. H.. 
20000758:	0750 2000 0750 2000 0758 2000 0758 2000     P.. P.. X.. X.. 
20000768:	0760 2000 0760 2000 0768 2000 0768 2000     `.. `.. h.. h.. 
20000778:	0770 2000 0770 2000 0778 2000 0778 2000     p.. p.. x.. x.. 
20000788:	0780 2000 0780 2000 0788 2000 0788 2000     ... ... ... ... 
20000798:	0790 2000 0790 2000 0798 2000 0798 2000     ... ... ... ... 
200007a8:	07a0 2000 07a0 2000 07a8 2000 07a8 2000     ... ... ... ... 
200007b8:	07b0 2000 07b0 2000 07b8 2000 07b8 2000     ... ... ... ... 
200007c8:	07c0 2000 07c0 2000 07c8 2000 07c8 2000     ... ... ... ... 
200007d8:	07d0 2000 07d0 2000 07d8 2000 07d8 2000     ... ... ... ... 
200007e8:	07e0 2000 07e0 2000 07e8 2000 07e8 2000     ... ... ... ... 
200007f8:	07f0 2000 07f0 2000 07f8 2000 07f8 2000     ... ... ... ... 
20000808:	0800 2000 0800 2000 0808 2000 0808 2000     ... ... ... ... 
20000818:	0810 2000 0810 2000 0818 2000 0818 2000     ... ... ... ... 
20000828:	0820 2000 0820 2000 0828 2000 0828 2000      ..  .. (.. (.. 
20000838:	0830 2000 0830 2000 0838 2000 0838 2000     0.. 0.. 8.. 8.. 
20000848:	0840 2000 0840 2000 0848 2000 0848 2000     @.. @.. H.. H.. 
20000858:	0850 2000 0850 2000 0858 2000 0858 2000     P.. P.. X.. X.. 
20000868:	0860 2000 0860 2000 0868 2000 0868 2000     `.. `.. h.. h.. 
20000878:	0870 2000 0870 2000 0878 2000 0878 2000     p.. p.. x.. x.. 
20000888:	0880 2000 0880 2000 0888 2000 0888 2000     ... ... ... ... 
20000898:	0890 2000 0890 2000 0898 2000 0898 2000     ... ... ... ... 
200008a8:	08a0 2000 08a0 2000 08a8 2000 08a8 2000     ... ... ... ... 
200008b8:	08b0 2000 08b0 2000 08b8 2000 08b8 2000     ... ... ... ... 
200008c8:	08c0 2000 08c0 2000 08c8 2000 08c8 2000     ... ... ... ... 

200008d8 <__malloc_sbrk_base>:
200008d8:	ffff ffff                                   ....

200008dc <__malloc_trim_threshold>:
200008dc:	0000 0002                                   ....

200008e0 <end_of_app>:
200008e0:	2020 4e45 4144 5050 f200 00bd                      ENDAPP...
